
UART_DataLogger_SDcard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bdc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08009dac  08009dac  0000adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e7c  08009e7c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e84  08009e84  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009e8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000454c  2000006c  08009ef8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045b8  08009ef8  0000b5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd33  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043bc  00000000  00000000  00027dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129a  00000000  00000000  0002d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054e5  00000000  00000000  0002ec4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e5a8  00000000  00000000  0003412f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100956  00000000  00000000  000526d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015302d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b88  00000000  00000000  00153070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  00159bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d94 	.word	0x08009d94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08009d94 	.word	0x08009d94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000088 	.word	0x20000088
 80005d0:	20000128 	.word	0x20000128

080005d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d013      	beq.n	8000614 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00b      	beq.n	8000614 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	e000      	b.n	8000600 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000600:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f9      	beq.n	80005fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800060a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e009      	b.n	800064c <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	60ba      	str	r2, [r7, #8]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffc7 	bl	80005d4 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf1      	blt.n	8000638 <_write+0x16>
	}
	return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fd3e 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f85f 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f913 	bl	8000898 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000672:	f000 f8c1 	bl	80007f8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000676:	f005 faeb 	bl	8005c50 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800067a:	f000 f8dd 	bl	8000838 <MX_USART6_UART_Init>
//  Create_File("MRL.txt");
//  sprintf(sd_buffer, "Hello MRL \n Hello Maryam \n");
//  Update_File("MRL.txt", sd_buffer);
//  Unmount_SD(SDPath);

  HAL_UART_Receive_IT(&huart6, &uart_rec, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	4920      	ldr	r1, [pc, #128]	@ (8000704 <main+0xa4>)
 8000682:	4821      	ldr	r0, [pc, #132]	@ (8000708 <main+0xa8>)
 8000684:	f003 fbbe 	bl	8003e04 <HAL_UART_Receive_IT>

  FIFO_init(&fifo, dxlBuffer, sizeof(dxlBuffer));
 8000688:	22c8      	movs	r2, #200	@ 0xc8
 800068a:	4920      	ldr	r1, [pc, #128]	@ (800070c <main+0xac>)
 800068c:	4820      	ldr	r0, [pc, #128]	@ (8000710 <main+0xb0>)
 800068e:	f000 f969 	bl	8000964 <FIFO_init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  recDataSemaphore = xSemaphoreCreateBinary();
 8000692:	2203      	movs	r2, #3
 8000694:	2100      	movs	r1, #0
 8000696:	2001      	movs	r0, #1
 8000698:	f006 f917 	bl	80068ca <xQueueGenericCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a1d      	ldr	r2, [pc, #116]	@ (8000714 <main+0xb4>)
 80006a0:	6013      	str	r3, [r2, #0]
  recordDataSemaphore = xSemaphoreCreateBinary();
 80006a2:	2203      	movs	r2, #3
 80006a4:	2100      	movs	r1, #0
 80006a6:	2001      	movs	r0, #1
 80006a8:	f006 f90f 	bl	80068ca <xQueueGenericCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000718 <main+0xb8>)
 80006b0:	6013      	str	r3, [r2, #0]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 128);
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <main+0xbc>)
 80006b4:	f107 041c 	add.w	r4, r7, #28
 80006b8:	461d      	mov	r5, r3
 80006ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fda9 	bl	8006224 <osThreadCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <main+0xc0>)
 80006d6:	6013      	str	r3, [r2, #0]

  osThreadDef(recordTask, StartRecordTask, osPriorityNormal, 0, 128);
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <main+0xc4>)
 80006da:	463c      	mov	r4, r7
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recordTaskHandle = osThreadCreate(osThread(recordTask), NULL);
 80006ea:	463b      	mov	r3, r7
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fd98 	bl	8006224 <osThreadCreate>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <main+0xc8>)
 80006f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006fa:	f005 fd70 	bl	80061de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fe:	bf00      	nop
 8000700:	e7fd      	b.n	80006fe <main+0x9e>
 8000702:	bf00      	nop
 8000704:	20000444 	.word	0x20000444
 8000708:	200003ac 	.word	0x200003ac
 800070c:	20000524 	.word	0x20000524
 8000710:	20000510 	.word	0x20000510
 8000714:	2000043c 	.word	0x2000043c
 8000718:	20000440 	.word	0x20000440
 800071c:	08009db8 	.word	0x08009db8
 8000720:	20000434 	.word	0x20000434
 8000724:	08009de0 	.word	0x08009de0
 8000728:	20000438 	.word	0x20000438

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f008 fdf0 	bl	8009320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemClock_Config+0xc4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <SystemClock_Config+0xc4>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemClock_Config+0xc4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <SystemClock_Config+0xc8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <SystemClock_Config+0xc8>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemClock_Config+0xc8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000794:	230f      	movs	r3, #15
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000798:	23d8      	movs	r3, #216	@ 0xd8
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80007a0:	230f      	movs	r3, #15
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f8bf 	bl	800192c <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007b4:	f000 fa10 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2105      	movs	r1, #5
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fb4c 	bl	8001e74 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007e2:	f000 f9f9 	bl	8000bd8 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	@ 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 80007fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <MX_SDMMC1_SD_Init+0x3c>)
 8000800:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <MX_SDMMC1_SD_Init+0x38>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000328 	.word	0x20000328
 8000834:	40012c00 	.word	0x40012c00

08000838 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <MX_USART6_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_USART6_UART_Init+0x58>)
 800087c:	f003 fa74 	bl	8003d68 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f9a7 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200003ac 	.word	0x200003ac
 8000894:	40011400 	.word	0x40011400

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <MX_GPIO_Init+0x98>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x98>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SDMMC1_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC1_Detect_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_Detect_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_GPIO_Init+0x9c>)
 8000924:	f000 fe3e 	bl	80015a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800

08000938 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a05      	ldr	r2, [pc, #20]	@ (800095c <HAL_UART_RxCpltCallback+0x24>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d104      	bne.n	8000954 <HAL_UART_RxCpltCallback+0x1c>
	{
		osSemaphoreRelease(recDataSemaphore);
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_UART_RxCpltCallback+0x28>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fd02 	bl	8006358 <osSemaphoreRelease>
	}
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40011400 	.word	0x40011400
 8000960:	2000043c 	.word	0x2000043c

08000964 <FIFO_init>:
//<---- -------------------------------------------------------- ---->

void FIFO_init(FIFO_t* fifo, uint8_t* buffer, uint8_t size)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	4613      	mov	r3, r2
 8000970:	71fb      	strb	r3, [r7, #7]
	fifo->buffer = buffer;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	601a      	str	r2, [r3, #0]
	fifo->size = size;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	605a      	str	r2, [r3, #4]
	fifo->count = 0;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	fifo->head = 0;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	fifo->tail = 0;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <FIFO_isEmpty>:
//<---- -------------------------------------------------------- ---->

bool FIFO_isEmpty(const FIFO_t* fifo)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	return (fifo->count == 0);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <FIFO_isFull>:
//<---- -------------------------------------------------------- ---->

bool FIFO_isFull(const FIFO_t* fifo)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return (fifo->count == fifo->size);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <FIFO_Enqueue>:
//<---- -------------------------------------------------------- ---->

bool FIFO_Enqueue(FIFO_t* fifo, uint8_t data)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	if(FIFO_isFull(fifo))
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ffe4 	bl	80009be <FIFO_isFull>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <FIFO_Enqueue+0x1c>
		return false;
 80009fc:	2300      	movs	r3, #0
 80009fe:	e018      	b.n	8000a32 <FIFO_Enqueue+0x4e>

	fifo->buffer[fifo->tail] = data;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	4413      	add	r3, r2
 8000a0a:	78fa      	ldrb	r2, [r7, #3]
 8000a0c:	701a      	strb	r2, [r3, #0]
	fifo->tail = (fifo->tail + 1) % fifo->size;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	3301      	adds	r3, #1
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6852      	ldr	r2, [r2, #4]
 8000a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a1c:	fb01 f202 	mul.w	r2, r1, r2
 8000a20:	1a9a      	subs	r2, r3, r2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	611a      	str	r2, [r3, #16]
	fifo->count++;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

	return true;
 8000a30:	2301      	movs	r3, #1
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <FIFO_Dequeue>:
//<---- -------------------------------------------------------- ---->

bool FIFO_Dequeue(FIFO_t* fifo, uint8_t* data)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	if(FIFO_isEmpty(fifo))
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ffa9 	bl	800099c <FIFO_isEmpty>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <FIFO_Dequeue+0x1a>
		return false;
 8000a50:	2300      	movs	r3, #0
 8000a52:	e019      	b.n	8000a88 <FIFO_Dequeue+0x4e>

	*data = fifo->buffer[fifo->head];
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	701a      	strb	r2, [r3, #0]
	fifo->head = (fifo->head + 1) % fifo->size;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6852      	ldr	r2, [r2, #4]
 8000a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a72:	fb01 f202 	mul.w	r2, r1, r2
 8000a76:	1a9a      	subs	r2, r3, r2
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
	fifo->count--;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]

	return true;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <DXL_CheckSumCalc>:
//<---- -------------------------------------------------------- ---->

uint8_t DXL_CheckSumCalc(uint8_t *packet)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 2; i < packet[3] + 3; i++)
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	73bb      	strb	r3, [r7, #14]
 8000aa0:	e009      	b.n	8000ab6 <DXL_CheckSumCalc+0x26>
	{
		checksum += packet[i];
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	4413      	add	r3, r2
 8000aae:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < packet[3] + 3; i++)
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	73bb      	strb	r3, [r7, #14]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3303      	adds	r3, #3
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	1c9a      	adds	r2, r3, #2
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	daee      	bge.n	8000aa2 <DXL_CheckSumCalc+0x12>
	}
	checksum =~ checksum;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]

	return checksum;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <StartMainTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartMainTask(void const * argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		osSemaphoreWait(recDataSemaphore, osWaitForever);
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <StartMainTask+0x88>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 fbe5 	bl	80062bc <osSemaphoreWait>
		HAL_UART_Receive_IT(&huart6, &uart_rec, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	491b      	ldr	r1, [pc, #108]	@ (8000b64 <StartMainTask+0x8c>)
 8000af6:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <StartMainTask+0x90>)
 8000af8:	f003 f984 	bl	8003e04 <HAL_UART_Receive_IT>
		uart_recBuffer[uart_recCount++] = uart_rec;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <StartMainTask+0x94>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	b2d1      	uxtb	r1, r2
 8000b04:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <StartMainTask+0x94>)
 8000b06:	7011      	strb	r1, [r2, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <StartMainTask+0x8c>)
 8000b0c:	7819      	ldrb	r1, [r3, #0]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <StartMainTask+0x98>)
 8000b10:	5499      	strb	r1, [r3, r2]
		if(uart_recBuffer[3] > 2)
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <StartMainTask+0x98>)
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d905      	bls.n	8000b26 <StartMainTask+0x4e>
		{
			FIFO_Enqueue(&fifo, uart_rec);
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <StartMainTask+0x8c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <StartMainTask+0x9c>)
 8000b22:	f7ff ff5f 	bl	80009e4 <FIFO_Enqueue>
		}
		if(uart_recCount == uart_recBuffer[3] + 4)
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <StartMainTask+0x94>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <StartMainTask+0x98>)
 8000b2e:	78db      	ldrb	r3, [r3, #3]
 8000b30:	3304      	adds	r3, #4
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d1d6      	bne.n	8000ae4 <StartMainTask+0xc>
		{
			tmp = uart_recBuffer[3] + 3;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <StartMainTask+0x98>)
 8000b38:	78db      	ldrb	r3, [r3, #3]
 8000b3a:	3303      	adds	r3, #3
 8000b3c:	73fb      	strb	r3, [r7, #15]
			if(DXL_CheckSumCalc(uart_recBuffer) == uart_recBuffer[tmp])
 8000b3e:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <StartMainTask+0x98>)
 8000b40:	f7ff ffa6 	bl	8000a90 <DXL_CheckSumCalc>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4619      	mov	r1, r3
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <StartMainTask+0x98>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d1c8      	bne.n	8000ae4 <StartMainTask+0xc>
			{
				osSemaphoreRelease(recordDataSemaphore);
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <StartMainTask+0xa0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 fbfe 	bl	8006358 <osSemaphoreRelease>
		osSemaphoreWait(recDataSemaphore, osWaitForever);
 8000b5c:	e7c2      	b.n	8000ae4 <StartMainTask+0xc>
 8000b5e:	bf00      	nop
 8000b60:	2000043c 	.word	0x2000043c
 8000b64:	20000444 	.word	0x20000444
 8000b68:	200003ac 	.word	0x200003ac
 8000b6c:	20000445 	.word	0x20000445
 8000b70:	20000448 	.word	0x20000448
 8000b74:	20000510 	.word	0x20000510
 8000b78:	20000440 	.word	0x20000440

08000b7c <StartRecordTask>:
		}
	}
}
//<---- -------------------------------------------------------- ---->
void StartRecordTask(void const * argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreWait(recordDataSemaphore, osWaitForever);
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <StartRecordTask+0x28>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fb95 	bl	80062bc <osSemaphoreWait>
		FIFO_Dequeue(&fifo, dxlLog);
 8000b92:	4905      	ldr	r1, [pc, #20]	@ (8000ba8 <StartRecordTask+0x2c>)
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <StartRecordTask+0x30>)
 8000b96:	f7ff ff50 	bl	8000a3a <FIFO_Dequeue>
		printf("Hello");
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <StartRecordTask+0x34>)
 8000b9c:	f008 fad6 	bl	800914c <iprintf>
		osSemaphoreWait(recordDataSemaphore, osWaitForever);
 8000ba0:	bf00      	nop
 8000ba2:	e7ef      	b.n	8000b84 <StartRecordTask+0x8>
 8000ba4:	20000440 	.word	0x20000440
 8000ba8:	200005ec 	.word	0x200005ec
 8000bac:	20000510 	.word	0x20000510
 8000bb0:	08009dfc 	.word	0x08009dfc

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 fa9b 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	f06f 0001 	mvn.w	r0, #1
 8000c22:	f000 fb69 	bl	80012f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0ac      	sub	sp, #176	@ 0xb0
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	2284      	movs	r2, #132	@ 0x84
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f008 fb63 	bl	8009320 <memset>
  if(hsd->Instance==SDMMC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <HAL_SD_MspInit+0xfc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d161      	bne.n	8000d28 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000c64:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8000c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fb12 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000c86:	f7ff ffa7 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a29      	ldr	r2, [pc, #164]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000c90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a23      	ldr	r2, [pc, #140]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_SD_MspInit+0x100>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000cd2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cec:	230c      	movs	r3, #12
 8000cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <HAL_SD_MspInit+0x104>)
 8000cfa:	f000 fc53 	bl	80015a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d16:	230c      	movs	r3, #12
 8000d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <HAL_SD_MspInit+0x108>)
 8000d24:	f000 fc3e 	bl	80015a4 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	37b0      	adds	r7, #176	@ 0xb0
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0aa      	sub	sp, #168	@ 0xa8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2284      	movs	r2, #132	@ 0x84
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f008 fadd 	bl	8009320 <memset>
  if(huart->Instance==USART6)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <HAL_UART_MspInit+0xc0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d143      	bne.n	8000df8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fa90 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8a:	f7ff ff25 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <HAL_UART_MspInit+0xc4>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0xc4>)
 8000d94:	f043 0320 	orr.w	r3, r3, #32
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_UART_MspInit+0xc4>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_UART_MspInit+0xc4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <HAL_UART_MspInit+0xc4>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_UART_MspInit+0xc4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000dbe:	23c0      	movs	r3, #192	@ 0xc0
 8000dc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000de0:	4619      	mov	r1, r3
 8000de2:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <HAL_UART_MspInit+0xc8>)
 8000de4:	f000 fbde 	bl	80015a4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2105      	movs	r1, #5
 8000dec:	2047      	movs	r0, #71	@ 0x47
 8000dee:	f000 fa83 	bl	80012f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000df2:	2047      	movs	r0, #71	@ 0x47
 8000df4:	f000 fa9c 	bl	8001330 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8000df8:	bf00      	nop
 8000dfa:	37a8      	adds	r7, #168	@ 0xa8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40011400 	.word	0x40011400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020800 	.word	0x40020800

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	@ 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <HAL_InitTick+0xe0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f9fe 	bl	8002240 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f001 f9cf 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f001 f9cb 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <HAL_InitTick+0xe4>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_InitTick+0xec>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000e96:	f002 fc93 	bl	80037c0 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <HAL_InitTick+0xe8>)
 8000eaa:	f002 fceb 	bl	8003884 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	@ 0x36
 8000ebe:	f000 fa37 	bl	8001330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f000 fa13 	bl	80012f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_InitTick+0xf0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	@ 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	200006b4 	.word	0x200006b4
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	20000004 	.word	0x20000004

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <TIM6_DAC_IRQHandler+0x10>)
 8000f3e:	f002 fd19 	bl	8003974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200006b4 	.word	0x200006b4

08000f4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <USART6_IRQHandler+0x10>)
 8000f52:	f002 ff9b 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200003ac 	.word	0x200003ac

08000f60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
  }

  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_isatty>:

int _isatty(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f008 fa28 	bl	8009488 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20050000 	.word	0x20050000
 8001064:	00000400 	.word	0x00000400
 8001068:	20000700 	.word	0x20000700
 800106c:	200045b8 	.word	0x200045b8

08001070 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001098:	f7ff ffea 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f008 f9e7 	bl	8009494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff facb 	bl	8000660 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010d8:	08009e8c 	.word	0x08009e8c
  ldr r2, =_sbss
 80010dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010e0:	200045b8 	.word	0x200045b8

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>

080010e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ea:	2003      	movs	r0, #3
 80010ec:	f000 f8f9 	bl	80012e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f0:	200f      	movs	r0, #15
 80010f2:	f7ff fe8b 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f6:	f7ff fd75 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000704 	.word	0x20000704

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000704 	.word	0x20000704

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008

08001188 <__NVIC_SetPriorityGrouping>:
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	@ (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff4c 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130a:	f7ff ff61 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 800130e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff ffb1 	bl	800127c <NVIC_EncodePriority>
 800131a:	4602      	mov	r2, r0
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff80 	bl	8001228 <__NVIC_SetPriority>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff54 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_DMA_Start_IT+0x26>
 800136e:	2302      	movs	r3, #2
 8001370:	e048      	b.n	8001404 <HAL_DMA_Start_IT+0xb8>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d137      	bne.n	80013f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2202      	movs	r2, #2
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f8d4 	bl	8001548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a4:	223f      	movs	r2, #63	@ 0x3f
 80013a6:	409a      	lsls	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0216 	orr.w	r2, r2, #22
 80013ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0208 	orr.w	r2, r2, #8
 80013e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e005      	b.n	8001402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013fe:	2302      	movs	r3, #2
 8001400:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001402:	7dfb      	ldrb	r3, [r7, #23]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001418:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800141a:	f7ff fe85 	bl	8001128 <HAL_GetTick>
 800141e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d008      	beq.n	800143e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2280      	movs	r2, #128	@ 0x80
 8001430:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e052      	b.n	80014e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0216 	bic.w	r2, r2, #22
 800144c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800145c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <HAL_DMA_Abort+0x62>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0208 	bic.w	r2, r2, #8
 800147c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0201 	bic.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148e:	e013      	b.n	80014b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001490:	f7ff fe4a 	bl	8001128 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b05      	cmp	r3, #5
 800149c:	d90c      	bls.n	80014b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2220      	movs	r2, #32
 80014a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e015      	b.n	80014e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1e4      	bne.n	8001490 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ca:	223f      	movs	r2, #63	@ 0x3f
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d004      	beq.n	800150a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00c      	b.n	8001524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b40      	cmp	r3, #64	@ 0x40
 8001574:	d108      	bne.n	8001588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001586:	e007      	b.n	8001598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e175      	b.n	80018b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8164 	bne.w	80018aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x56>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80be 	beq.w	80018aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	4b66      	ldr	r3, [pc, #408]	@ (80018c8 <HAL_GPIO_Init+0x324>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a65      	ldr	r2, [pc, #404]	@ (80018c8 <HAL_GPIO_Init+0x324>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b63      	ldr	r3, [pc, #396]	@ (80018c8 <HAL_GPIO_Init+0x324>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001746:	4a61      	ldr	r2, [pc, #388]	@ (80018cc <HAL_GPIO_Init+0x328>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_GPIO_Init+0x32c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d037      	beq.n	80017e2 <HAL_GPIO_Init+0x23e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a57      	ldr	r2, [pc, #348]	@ (80018d4 <HAL_GPIO_Init+0x330>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d031      	beq.n	80017de <HAL_GPIO_Init+0x23a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a56      	ldr	r2, [pc, #344]	@ (80018d8 <HAL_GPIO_Init+0x334>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <HAL_GPIO_Init+0x236>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <HAL_GPIO_Init+0x338>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x232>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <HAL_GPIO_Init+0x33c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x22e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a53      	ldr	r2, [pc, #332]	@ (80018e4 <HAL_GPIO_Init+0x340>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x22a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <HAL_GPIO_Init+0x344>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x226>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a51      	ldr	r2, [pc, #324]	@ (80018ec <HAL_GPIO_Init+0x348>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x222>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a50      	ldr	r2, [pc, #320]	@ (80018f0 <HAL_GPIO_Init+0x34c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x21e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4f      	ldr	r2, [pc, #316]	@ (80018f4 <HAL_GPIO_Init+0x350>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x21a>
 80017ba:	2309      	movs	r3, #9
 80017bc:	e012      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017be:	230a      	movs	r3, #10
 80017c0:	e010      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e00e      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017e2:	2300      	movs	r3, #0
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017f4:	4935      	ldr	r1, [pc, #212]	@ (80018cc <HAL_GPIO_Init+0x328>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001826:	4a34      	ldr	r2, [pc, #208]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001850:	4a29      	ldr	r2, [pc, #164]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001856:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187a:	4a1f      	ldr	r2, [pc, #124]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	f67f ae86 	bls.w	80015c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40021c00 	.word	0x40021c00
 80018f0:	40022000 	.word	0x40022000
 80018f4:	40022400 	.word	0x40022400
 80018f8:	40013c00 	.word	0x40013c00

080018fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e001      	b.n	800191e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e291      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8087 	beq.w	8001a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	4b96      	ldr	r3, [pc, #600]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00c      	beq.n	8001976 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195c:	4b93      	ldr	r3, [pc, #588]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d112      	bne.n	800198e <HAL_RCC_OscConfig+0x62>
 8001968:	4b90      	ldr	r3, [pc, #576]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001974:	d10b      	bne.n	800198e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4b8d      	ldr	r3, [pc, #564]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x130>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d168      	bne.n	8001a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e26b      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x7a>
 8001998:	4b84      	ldr	r3, [pc, #528]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a83      	ldr	r2, [pc, #524]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e02e      	b.n	8001a04 <HAL_RCC_OscConfig+0xd8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x9c>
 80019ae:	4b7f      	ldr	r3, [pc, #508]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7e      	ldr	r2, [pc, #504]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b7c      	ldr	r3, [pc, #496]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7b      	ldr	r2, [pc, #492]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xd8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0xc0>
 80019d2:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b73      	ldr	r3, [pc, #460]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a72      	ldr	r2, [pc, #456]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xd8>
 80019ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6e      	ldr	r2, [pc, #440]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b6c      	ldr	r3, [pc, #432]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6b      	ldr	r2, [pc, #428]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fb8c 	bl	8001128 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fb88 	bl	8001128 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e21f      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b61      	ldr	r3, [pc, #388]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe8>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fb78 	bl	8001128 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fb74 	bl	8001128 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e20b      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b57      	ldr	r3, [pc, #348]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x110>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d069      	beq.n	8001b3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6a:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a76:	4b4d      	ldr	r3, [pc, #308]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d11c      	bne.n	8001abc <HAL_RCC_OscConfig+0x190>
 8001a82:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x17a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1df      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	493d      	ldr	r1, [pc, #244]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	e040      	b.n	8001b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d023      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac4:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a38      	ldr	r2, [pc, #224]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb2a 	bl	8001128 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fb26 	bl	8001128 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1bd      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4929      	ldr	r1, [pc, #164]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
 8001b0a:	e018      	b.n	8001b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0c:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a26      	ldr	r2, [pc, #152]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb06 	bl	8001128 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff fb02 	bl	8001128 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e199      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d038      	beq.n	8001bbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d019      	beq.n	8001b86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b56:	4a15      	ldr	r2, [pc, #84]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fae3 	bl	8001128 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff fadf 	bl	8001128 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e176      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x23a>
 8001b84:	e01a      	b.n	8001bbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b8a:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_RCC_OscConfig+0x280>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff fac9 	bl	8001128 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fac5 	bl	8001128 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d903      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e15c      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
 8001bac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b91      	ldr	r3, [pc, #580]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a4 	beq.w	8001d12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b8b      	ldr	r3, [pc, #556]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b88      	ldr	r3, [pc, #544]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a87      	ldr	r2, [pc, #540]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b85      	ldr	r3, [pc, #532]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf2:	4b82      	ldr	r3, [pc, #520]	@ (8001dfc <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001dfc <HAL_RCC_OscConfig+0x4d0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7e      	ldr	r2, [pc, #504]	@ (8001dfc <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fa8d 	bl	8001128 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7ff fa89 	bl	8001128 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	@ 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e120      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c24:	4b75      	ldr	r3, [pc, #468]	@ (8001dfc <HAL_RCC_OscConfig+0x4d0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x31a>
 8001c38:	4b6f      	ldr	r3, [pc, #444]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c44:	e02d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x376>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x33c>
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	4a69      	ldr	r2, [pc, #420]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5a:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	4a66      	ldr	r2, [pc, #408]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c66:	e01c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x376>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d10c      	bne.n	8001c8a <HAL_RCC_OscConfig+0x35e>
 8001c70:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a60      	ldr	r2, [pc, #384]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c80:	4a5d      	ldr	r2, [pc, #372]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c88:	e00b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x376>
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c96:	4b58      	ldr	r3, [pc, #352]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	4a57      	ldr	r2, [pc, #348]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff fa3d 	bl	8001128 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fa39 	bl	8001128 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0ce      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ee      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x386>
 8001cd4:	e014      	b.n	8001d00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fa27 	bl	8001128 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff fa23 	bl	8001128 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf4:	4b40      	ldr	r3, [pc, #256]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d105      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d06:	4b3c      	ldr	r3, [pc, #240]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80a4 	beq.w	8001e64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1c:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d06b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d149      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a30      	ldr	r2, [pc, #192]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f9f4 	bl	8001128 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f9f0 	bl	8001128 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e087      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	019b      	lsls	r3, r3, #6
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	4313      	orrs	r3, r2
 8001d88:	4a1b      	ldr	r2, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f9c4 	bl	8001128 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f9c0 	bl	8001128 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e057      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x478>
 8001dc2:	e04f      	b.n	8001e64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f9aa 	bl	8001128 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f9a6 	bl	8001128 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e03d      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	4b03      	ldr	r3, [pc, #12]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4ac>
 8001df6:	e035      	b.n	8001e64 <HAL_RCC_OscConfig+0x538>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_RCC_OscConfig+0x544>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d028      	beq.n	8001e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d121      	bne.n	8001e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d11a      	bne.n	8001e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d111      	bne.n	8001e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0d0      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	4965      	ldr	r1, [pc, #404]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d040      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d115      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	4b41      	ldr	r3, [pc, #260]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e073      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e06b      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b39      	ldr	r3, [pc, #228]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4936      	ldr	r1, [pc, #216]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f68:	f7ff f8de 	bl	8001128 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7ff f8da 	bl	8001128 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e053      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d210      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 020f 	bic.w	r2, r3, #15
 8001fae:	4922      	ldr	r1, [pc, #136]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	490a      	ldr	r1, [pc, #40]	@ (8002040 <HAL_RCC_ClockConfig+0x1cc>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	@ (8002044 <HAL_RCC_ClockConfig+0x1d0>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <HAL_RCC_ClockConfig+0x1d4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fef0 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00
 800203c:	40023800 	.word	0x40023800
 8002040:	08009e1c 	.word	0x08009e1c
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002050:	b090      	sub	sp, #64	@ 0x40
 8002052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002064:	4b59      	ldr	r3, [pc, #356]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d00d      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x40>
 8002070:	2b08      	cmp	r3, #8
 8002072:	f200 80a1 	bhi.w	80021b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 800207a:	2b04      	cmp	r3, #4
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x3a>
 800207e:	e09b      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002082:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002084:	e09b      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002086:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002088:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800208a:	e098      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208c:	4b4f      	ldr	r3, [pc, #316]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002096:	4b4d      	ldr	r3, [pc, #308]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d028      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	2200      	movs	r2, #0
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020b4:	2100      	movs	r1, #0
 80020b6:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b8:	fb03 f201 	mul.w	r2, r3, r1
 80020bc:	2300      	movs	r3, #0
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	4a43      	ldr	r2, [pc, #268]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020cc:	460a      	mov	r2, r1
 80020ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d2:	4413      	add	r3, r2
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d8:	2200      	movs	r2, #0
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	61fa      	str	r2, [r7, #28]
 80020de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020e6:	f7fe f8e3 	bl	80002b0 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4613      	mov	r3, r2
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020f2:	e053      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	4b35      	ldr	r3, [pc, #212]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2200      	movs	r2, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	617a      	str	r2, [r7, #20]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002106:	f04f 0b00 	mov.w	fp, #0
 800210a:	4652      	mov	r2, sl
 800210c:	465b      	mov	r3, fp
 800210e:	f04f 0000 	mov.w	r0, #0
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	0159      	lsls	r1, r3, #5
 8002118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800211c:	0150      	lsls	r0, r2, #5
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	ebb2 080a 	subs.w	r8, r2, sl
 8002126:	eb63 090b 	sbc.w	r9, r3, fp
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800213a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800213e:	ebb2 0408 	subs.w	r4, r2, r8
 8002142:	eb63 0509 	sbc.w	r5, r3, r9
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	00eb      	lsls	r3, r5, #3
 8002150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002154:	00e2      	lsls	r2, r4, #3
 8002156:	4614      	mov	r4, r2
 8002158:	461d      	mov	r5, r3
 800215a:	eb14 030a 	adds.w	r3, r4, sl
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	eb45 030b 	adc.w	r3, r5, fp
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002172:	4629      	mov	r1, r5
 8002174:	028b      	lsls	r3, r1, #10
 8002176:	4621      	mov	r1, r4
 8002178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800217c:	4621      	mov	r1, r4
 800217e:	028a      	lsls	r2, r1, #10
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002186:	2200      	movs	r2, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002190:	f7fe f88e 	bl	80002b0 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4613      	mov	r3, r2
 800219a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x180>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3740      	adds	r7, #64	@ 0x40
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	017d7840 	.word	0x017d7840

080021d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4903      	ldr	r1, [pc, #12]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	08009e2c 	.word	0x08009e2c

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800221c:	f7ff ffdc 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0b5b      	lsrs	r3, r3, #13
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	@ (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	08009e2c 	.word	0x08009e2c

08002240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	220f      	movs	r2, #15
 800224e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_RCC_GetClockConfig+0x5c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_RCC_GetClockConfig+0x5c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <HAL_RCC_GetClockConfig+0x5c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_RCC_GetClockConfig+0x60>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40023c00 	.word	0x40023c00

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d012      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022cc:	4b69      	ldr	r3, [pc, #420]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a68      	ldr	r2, [pc, #416]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e0:	4964      	ldr	r1, [pc, #400]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d017      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002304:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	4959      	ldr	r1, [pc, #356]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800231c:	d101      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d017      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800233a:	4b4e      	ldr	r3, [pc, #312]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002340:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	494a      	ldr	r1, [pc, #296]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 808b 	beq.w	800249e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	4a39      	ldr	r2, [pc, #228]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	@ 0x40
 8002394:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023a0:	4b35      	ldr	r3, [pc, #212]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a34      	ldr	r2, [pc, #208]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ac:	f7fe febc 	bl	8001128 <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe feb8 	bl	8001128 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	@ 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e357      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d2:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d035      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d02e      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f0:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002406:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	4a1a      	ldr	r2, [pc, #104]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002410:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002412:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002418:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d114      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fe80 	bl	8001128 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7fe fe7c 	bl	8001128 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e319      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ee      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800245a:	d111      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800246a:	400b      	ands	r3, r1
 800246c:	4901      	ldr	r1, [pc, #4]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
 8002472:	e00b      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000
 800247c:	0ffffcff 	.word	0x0ffffcff
 8002480:	4baa      	ldr	r3, [pc, #680]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4aa9      	ldr	r2, [pc, #676]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002486:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	4ba7      	ldr	r3, [pc, #668]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	49a4      	ldr	r1, [pc, #656]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249a:	4313      	orrs	r3, r2
 800249c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024aa:	4ba0      	ldr	r3, [pc, #640]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b0:	4a9e      	ldr	r2, [pc, #632]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ba:	4b9c      	ldr	r3, [pc, #624]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c4:	4999      	ldr	r1, [pc, #612]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024d8:	4b94      	ldr	r3, [pc, #592]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e6:	4991      	ldr	r1, [pc, #580]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024fa:	4b8c      	ldr	r3, [pc, #560]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002500:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002508:	4988      	ldr	r1, [pc, #544]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800251c:	4b83      	ldr	r3, [pc, #524]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800252a:	4980      	ldr	r1, [pc, #512]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800253e:	4b7b      	ldr	r3, [pc, #492]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254c:	4977      	ldr	r1, [pc, #476]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002560:	4b72      	ldr	r3, [pc, #456]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	496f      	ldr	r1, [pc, #444]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002582:	4b6a      	ldr	r3, [pc, #424]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002588:	f023 020c 	bic.w	r2, r3, #12
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002590:	4966      	ldr	r1, [pc, #408]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025a4:	4b61      	ldr	r3, [pc, #388]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	495e      	ldr	r1, [pc, #376]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025c6:	4b59      	ldr	r3, [pc, #356]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d4:	4955      	ldr	r1, [pc, #340]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025e8:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	494d      	ldr	r1, [pc, #308]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800260a:	4b48      	ldr	r3, [pc, #288]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	4944      	ldr	r1, [pc, #272]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800262c:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	493c      	ldr	r1, [pc, #240]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800264e:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265c:	4933      	ldr	r1, [pc, #204]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002670:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800267e:	492b      	ldr	r1, [pc, #172]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d011      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002692:	4b26      	ldr	r3, [pc, #152]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002698:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a0:	4922      	ldr	r1, [pc, #136]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026b0:	d101      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e0:	4912      	ldr	r1, [pc, #72]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002704:	4909      	ldr	r1, [pc, #36]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d006      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80d9 	beq.w	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002720:	4b02      	ldr	r3, [pc, #8]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a01      	ldr	r2, [pc, #4]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800272c:	40023800 	.word	0x40023800
 8002730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002732:	f7fe fcf9 	bl	8001128 <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800273a:	f7fe fcf5 	bl	8001128 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	@ 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e194      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800274c:	4b6c      	ldr	r3, [pc, #432]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d021      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11d      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800276c:	4b64      	ldr	r3, [pc, #400]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800277a:	4b61      	ldr	r3, [pc, #388]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002780:	0e1b      	lsrs	r3, r3, #24
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	019a      	lsls	r2, r3, #6
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	071b      	lsls	r3, r3, #28
 80027a0:	4957      	ldr	r1, [pc, #348]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02e      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d2:	d129      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027e2:	4b47      	ldr	r3, [pc, #284]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027e8:	0f1b      	lsrs	r3, r3, #28
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	019a      	lsls	r2, r3, #6
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	071b      	lsls	r3, r3, #28
 8002808:	493d      	ldr	r1, [pc, #244]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002810:	4b3b      	ldr	r3, [pc, #236]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002816:	f023 021f 	bic.w	r2, r3, #31
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	3b01      	subs	r3, #1
 8002820:	4937      	ldr	r1, [pc, #220]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01d      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002834:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283a:	0e1b      	lsrs	r3, r3, #24
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002842:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002848:	0f1b      	lsrs	r3, r3, #28
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	019a      	lsls	r2, r3, #6
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	431a      	orrs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	4925      	ldr	r1, [pc, #148]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d011      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	019a      	lsls	r2, r3, #6
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	061b      	lsls	r3, r3, #24
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	071b      	lsls	r3, r3, #28
 8002898:	4919      	ldr	r1, [pc, #100]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7fe fc3c 	bl	8001128 <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028b4:	f7fe fc38 	bl	8001128 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0d7      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 80cd 	bne.w	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a08      	ldr	r2, [pc, #32]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e6:	f7fe fc1f 	bl	8001128 <HAL_GetTick>
 80028ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028ee:	f7fe fc1b 	bl	8001128 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	d903      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0ba      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002900:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002904:	4b5e      	ldr	r3, [pc, #376]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800290c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002910:	d0ed      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800292e:	2b00      	cmp	r3, #0
 8002930:	d02e      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d12a      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800293a:	4b51      	ldr	r3, [pc, #324]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002948:	4b4d      	ldr	r3, [pc, #308]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	0f1b      	lsrs	r3, r3, #28
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	019a      	lsls	r2, r3, #6
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	061b      	lsls	r3, r3, #24
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	4944      	ldr	r1, [pc, #272]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002976:	4b42      	ldr	r3, [pc, #264]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800297c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	493d      	ldr	r1, [pc, #244]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029a4:	d11d      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029a6:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	0e1b      	lsrs	r3, r3, #24
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029b4:	4b32      	ldr	r3, [pc, #200]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	0f1b      	lsrs	r3, r3, #28
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	019a      	lsls	r2, r3, #6
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	4929      	ldr	r1, [pc, #164]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	0e1b      	lsrs	r3, r3, #24
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029fc:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	019a      	lsls	r2, r3, #6
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	071b      	lsls	r3, r3, #28
 8002a22:	4917      	ldr	r1, [pc, #92]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	4911      	ldr	r1, [pc, #68]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fb6c 	bl	8001128 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a54:	f7fe fb68 	bl	8001128 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	@ 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e007      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a72:	d1ef      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fe f8c3 	bl	8000c34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f814 	bl	8002ae4 <HAL_SD_InitCard>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00a      	b.n	8002adc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b08e      	sub	sp, #56	@ 0x38
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002b00:	2376      	movs	r3, #118	@ 0x76
 8002b02:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681d      	ldr	r5, [r3, #0]
 8002b08:	466c      	mov	r4, sp
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f002 fb83 	bl	8005228 <SDMMC_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e059      	b.n	8002be8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b42:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 fb99 	bl	8005280 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7fe faee 	bl	8001140 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fd75 	bl	8003654 <SD_PowerON>
 8002b6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e02e      	b.n	8002be8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fc94 	bl	80034b8 <SD_InitCard>
 8002b90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e01b      	b.n	8002be8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 fbf3 	bl	80053a4 <SDMMC_CmdBlockLength>
 8002bbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00f      	beq.n	8002be6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <HAL_SD_InitCard+0x10c>)
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	@ 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf0:	004005ff 	.word	0x004005ff

08002bf4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	@ 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0c3      	b.n	8002da4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 80bc 	bne.w	8002da2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d907      	bls.n	8002c4e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0aa      	b.n	8002da4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8002c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4a4e      	ldr	r2, [pc, #312]	@ (8002dac <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002c74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002c7c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	2200      	movs	r2, #0
 8002c84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3380      	adds	r3, #128	@ 0x80
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	f7fe fb45 	bl	800134c <HAL_DMA_Start_IT>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8002cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a35      	ldr	r2, [pc, #212]	@ (8002db4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002cde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e055      	b.n	8002da4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0208 	orr.w	r2, r2, #8
 8002d06:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	025b      	lsls	r3, r3, #9
 8002d20:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002d22:	2390      	movs	r3, #144	@ 0x90
 8002d24:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002d26:	2302      	movs	r3, #2
 8002d28:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f107 0210 	add.w	r2, r7, #16
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 fb05 	bl	800534c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d90a      	bls.n	8002d5e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2282      	movs	r2, #130	@ 0x82
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 fb69 	bl	800542c <SDMMC_CmdReadMultiBlock>
 8002d5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002d5c:	e009      	b.n	8002d72 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2281      	movs	r2, #129	@ 0x81
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fb3c 	bl	80053e8 <SDMMC_CmdReadSingleBlock>
 8002d70:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d012      	beq.n	8002d9e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002d7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e002      	b.n	8002da4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3730      	adds	r7, #48	@ 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	080033a3 	.word	0x080033a3
 8002db0:	08003415 	.word	0x08003415
 8002db4:	004005ff 	.word	0x004005ff

08002db8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	@ 0x30
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0c6      	b.n	8002f6e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	f040 80bf 	bne.w	8002f6c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	441a      	add	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d907      	bls.n	8002e12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0ad      	b.n	8002f6e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 021a 	orr.w	r2, r2, #26
 8002e30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	4a50      	ldr	r2, [pc, #320]	@ (8002f78 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3e:	4a4f      	ldr	r2, [pc, #316]	@ (8002f7c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002e40:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e46:	2200      	movs	r2, #0
 8002e48:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d002      	beq.n	8002e58 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	025b      	lsls	r3, r3, #9
 8002e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d90a      	bls.n	8002e74 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	22a0      	movs	r2, #160	@ 0xa0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 fb22 	bl	80054b4 <SDMMC_CmdWriteMultiBlock>
 8002e70:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002e72:	e009      	b.n	8002e88 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2290      	movs	r2, #144	@ 0x90
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 faf5 	bl	8005470 <SDMMC_CmdWriteSingleBlock>
 8002e86:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d012      	beq.n	8002eb4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3b      	ldr	r2, [pc, #236]	@ (8002f80 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002e94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e05c      	b.n	8002f6e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0208 	orr.w	r2, r2, #8
 8002ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	2240      	movs	r2, #64	@ 0x40
 8002eca:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3380      	adds	r3, #128	@ 0x80
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	025b      	lsls	r3, r3, #9
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	f7fe fa26 	bl	800134c <HAL_DMA_Start_IT>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01a      	beq.n	8002f3c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 021a 	bic.w	r2, r2, #26
 8002f14:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e018      	b.n	8002f6e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	025b      	lsls	r3, r3, #9
 8002f46:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002f48:	2390      	movs	r3, #144	@ 0x90
 8002f4a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f107 0210 	add.w	r2, r7, #16
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 f9f2 	bl	800534c <SDMMC_ConfigData>

      return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3730      	adds	r7, #48	@ 0x30
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	08003379 	.word	0x08003379
 8002f7c:	08003415 	.word	0x08003415
 8002f80:	004005ff 	.word	0x004005ff

08002f84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa6:	0f9b      	lsrs	r3, r3, #30
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb2:	0e9b      	lsrs	r3, r3, #26
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc4:	0e1b      	lsrs	r3, r3, #24
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ff8:	0d1b      	lsrs	r3, r3, #20
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	b2da      	uxtb	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003016:	0bdb      	lsrs	r3, r3, #15
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003028:	0b9b      	lsrs	r3, r3, #14
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800303a:	0b5b      	lsrs	r3, r3, #13
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800304c:	0b1b      	lsrs	r3, r3, #12
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	b2da      	uxtb	r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	2b00      	cmp	r3, #0
 8003066:	d163      	bne.n	8003130 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800306c:	009a      	lsls	r2, r3, #2
 800306e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003078:	0f92      	lsrs	r2, r2, #30
 800307a:	431a      	orrs	r2, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003084:	0edb      	lsrs	r3, r3, #27
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	b2da      	uxtb	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003096:	0e1b      	lsrs	r3, r3, #24
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030cc:	0bdb      	lsrs	r3, r3, #15
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	7e1b      	ldrb	r3, [r3, #24]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	3302      	adds	r3, #2
 80030f0:	2201      	movs	r2, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80030fa:	fb03 f202 	mul.w	r2, r3, r2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	7a1b      	ldrb	r3, [r3, #8]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800311c:	0a52      	lsrs	r2, r2, #9
 800311e:	fb03 f202 	mul.w	r2, r3, r2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60
 800312e:	e031      	b.n	8003194 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003134:	2b01      	cmp	r3, #1
 8003136:	d11d      	bne.n	8003174 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	029a      	lsls	r2, r3, #10
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003168:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60
 8003172:	e00f      	b.n	8003194 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a58      	ldr	r2, [pc, #352]	@ (80032dc <HAL_SD_GetCardCSD+0x344>)
 800317a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e09d      	b.n	80032d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003198:	0b9b      	lsrs	r3, r3, #14
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031aa:	09db      	lsrs	r3, r3, #7
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031cc:	0fdb      	lsrs	r3, r3, #31
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	0f5b      	lsrs	r3, r3, #29
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	0d9b      	lsrs	r3, r3, #22
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	b2da      	uxtb	r2, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	0d5b      	lsrs	r3, r3, #21
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	b2da      	uxtb	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	0bdb      	lsrs	r3, r3, #15
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	0b9b      	lsrs	r3, r3, #14
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	b2da      	uxtb	r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	0b5b      	lsrs	r3, r3, #13
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	0b1b      	lsrs	r3, r3, #12
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	b2da      	uxtb	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	b2da      	uxtb	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	004005ff 	.word	0x004005ff

080032e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa10 	bl	8003770 <SD_SendStatus>
 8003350:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800336e:	693b      	ldr	r3, [r7, #16]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	2b82      	cmp	r3, #130	@ 0x82
 80033b6:	d111      	bne.n	80033dc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 f89b 	bl	80054f8 <SDMMC_CmdStopTransfer>
 80033c2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fdd4 	bl	8002f84 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0208 	bic.w	r2, r2, #8
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80033f4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f002 fc9f 	bl	8005d48 <HAL_SD_RxCpltCallback>
#endif
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe f884 	bl	8001530 <HAL_DMA_GetError>
 8003428:	4603      	mov	r3, r0
 800342a:	2b02      	cmp	r3, #2
 800342c:	d03e      	beq.n	80034ac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d002      	beq.n	800344a <SD_DMAError+0x36>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d12d      	bne.n	80034a6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <SD_DMAError+0xa0>)
 8003450:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003460:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f7ff ff62 	bl	8003338 <HAL_SD_GetCardState>
 8003474:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d002      	beq.n	8003482 <SD_DMAError+0x6e>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d10a      	bne.n	8003498 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f002 f836 	bl	80054f8 <SDMMC_CmdStopTransfer>
 800348c:	4602      	mov	r2, r0
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff fd6c 	bl	8002f84 <HAL_SD_ErrorCallback>
#endif
  }
}
 80034ac:	bf00      	nop
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	004005ff 	.word	0x004005ff

080034b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b094      	sub	sp, #80	@ 0x50
 80034bc:	af04      	add	r7, sp, #16
 80034be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80034c0:	2301      	movs	r3, #1
 80034c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fee7 	bl	800529c <SDMMC_GetPowerState>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80034d8:	e0b8      	b.n	800364c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d02f      	beq.n	8003542 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 f8ce 	bl	8005688 <SDMMC_CmdSendCID>
 80034ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80034f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f6:	e0a9      	b.n	800364c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 ff11 	bl	8005326 <SDMMC_GetResponse>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2104      	movs	r1, #4
 8003510:	4618      	mov	r0, r3
 8003512:	f001 ff08 	bl	8005326 <SDMMC_GetResponse>
 8003516:	4602      	mov	r2, r0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2108      	movs	r1, #8
 8003522:	4618      	mov	r0, r3
 8003524:	f001 feff 	bl	8005326 <SDMMC_GetResponse>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	210c      	movs	r1, #12
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fef6 	bl	8005326 <SDMMC_GetResponse>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	2b03      	cmp	r3, #3
 8003548:	d00d      	beq.n	8003566 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f107 020e 	add.w	r2, r7, #14
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f002 f8d4 	bl	8005702 <SDMMC_CmdSetRelAdd>
 800355a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800355c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <SD_InitCard+0xae>
    {
      return errorstate;
 8003562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003564:	e072      	b.n	800364c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	2b03      	cmp	r3, #3
 800356c:	d036      	beq.n	80035dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f002 f89e 	bl	80056c4 <SDMMC_CmdSendCSD>
 8003588:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800358a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003592:	e05b      	b.n	800364c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fec3 	bl	8005326 <SDMMC_GetResponse>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2104      	movs	r1, #4
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 feba 	bl	8005326 <SDMMC_GetResponse>
 80035b2:	4602      	mov	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2108      	movs	r1, #8
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 feb1 	bl	8005326 <SDMMC_GetResponse>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	210c      	movs	r1, #12
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 fea8 	bl	8005326 <SDMMC_GetResponse>
 80035d6:	4602      	mov	r2, r0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2104      	movs	r1, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fe9f 	bl	8005326 <SDMMC_GetResponse>
 80035e8:	4603      	mov	r3, r0
 80035ea:	0d1a      	lsrs	r2, r3, #20
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80035f0:	f107 0310 	add.w	r3, r7, #16
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fcce 	bl	8002f98 <HAL_SD_GetCardCSD>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003602:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003606:	e021      	b.n	800364c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	2200      	movs	r2, #0
 8003614:	461c      	mov	r4, r3
 8003616:	4615      	mov	r5, r2
 8003618:	4622      	mov	r2, r4
 800361a:	462b      	mov	r3, r5
 800361c:	4608      	mov	r0, r1
 800361e:	f001 ff8d 	bl	800553c <SDMMC_CmdSelDesel>
 8003622:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <SD_InitCard+0x176>
  {
    return errorstate;
 800362a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362c:	e00e      	b.n	800364c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681d      	ldr	r5, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	466c      	mov	r4, sp
 8003636:	f103 0210 	add.w	r2, r3, #16
 800363a:	ca07      	ldmia	r2, {r0, r1, r2}
 800363c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003640:	3304      	adds	r3, #4
 8003642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003644:	4628      	mov	r0, r5
 8003646:	f001 fdef 	bl	8005228 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3740      	adds	r7, #64	@ 0x40
 8003650:	46bd      	mov	sp, r7
 8003652:	bdb0      	pop	{r4, r5, r7, pc}

08003654 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f001 ff88 	bl	8005582 <SDMMC_CmdGoIdleState>
 8003672:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <SD_PowerON+0x2a>
  {
    return errorstate;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	e072      	b.n	8003764 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 ff9b 	bl	80055be <SDMMC_CmdOperCond>
 8003688:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f001 ff71 	bl	8005582 <SDMMC_CmdGoIdleState>
 80036a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	e05b      	b.n	8003764 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d137      	bne.n	800372a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 ff9b 	bl	80055fc <SDMMC_CmdAppCommand>
 80036c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d02d      	beq.n	800372a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80036d2:	e047      	b.n	8003764 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 ff8e 	bl	80055fc <SDMMC_CmdAppCommand>
 80036e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <SD_PowerON+0x98>
    {
      return errorstate;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	e03b      	b.n	8003764 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	491e      	ldr	r1, [pc, #120]	@ (800376c <SD_PowerON+0x118>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 ffa4 	bl	8005640 <SDMMC_CmdAppOperCommand>
 80036f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003700:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003704:	e02e      	b.n	8003764 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f001 fe0a 	bl	8005326 <SDMMC_GetResponse>
 8003712:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	0fdb      	lsrs	r3, r3, #31
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <SD_PowerON+0xcc>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <SD_PowerON+0xce>
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]

    count++;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003730:	4293      	cmp	r3, r2
 8003732:	d802      	bhi.n	800373a <SD_PowerON+0xe6>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0cc      	beq.n	80036d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003740:	4293      	cmp	r3, r2
 8003742:	d902      	bls.n	800374a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003744:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003748:	e00c      	b.n	8003764 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
 800375a:	e002      	b.n	8003762 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	c1100000 	.word	0xc1100000

08003770 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003780:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003784:	e018      	b.n	80037b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f001 ffd6 	bl	8005744 <SDMMC_CmdSendStatus>
 8003798:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	e009      	b.n	80037b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fdbb 	bl	8005326 <SDMMC_GetResponse>
 80037b0:	4602      	mov	r2, r0
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e049      	b.n	8003866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f841 	bl	800386e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f000 f9e8 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e054      	b.n	8003946 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d01d      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <HAL_TIM_Base_Start_IT+0xd4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	@ (800395c <HAL_TIM_Base_Start_IT+0xd8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003960 <HAL_TIM_Base_Start_IT+0xdc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <HAL_TIM_Base_Start_IT+0xe0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_TIM_Base_Start_IT+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x80>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <HAL_TIM_Base_Start_IT+0xe8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d115      	bne.n	8003930 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <HAL_TIM_Base_Start_IT+0xec>)
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d015      	beq.n	8003942 <HAL_TIM_Base_Start_IT+0xbe>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391c:	d011      	beq.n	8003942 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	e008      	b.n	8003942 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e000      	b.n	8003944 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40010400 	.word	0x40010400
 8003968:	40014000 	.word	0x40014000
 800396c:	40001800 	.word	0x40001800
 8003970:	00010007 	.word	0x00010007

08003974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0202 	mvn.w	r2, #2
 80039a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8e9 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8db 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8ec 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0204 	mvn.w	r2, #4
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8c3 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8b5 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8c6 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d020      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0208 	mvn.w	r2, #8
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2204      	movs	r2, #4
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f89d 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f88f 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8a0 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d020      	beq.n	8003abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0210 	mvn.w	r2, #16
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2208      	movs	r2, #8
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f877 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f869 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f87a 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0201 	mvn.w	r2, #1
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd f86a 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f919 	bl	8003d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f911 	bl	8003d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00c      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f834 	bl	8003bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0220 	mvn.w	r2, #32
 8003b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8d9 	bl	8003d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a46      	ldr	r2, [pc, #280]	@ (8003d00 <TIM_Base_SetConfig+0x12c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d013      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf2:	d00f      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a43      	ldr	r2, [pc, #268]	@ (8003d04 <TIM_Base_SetConfig+0x130>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a42      	ldr	r2, [pc, #264]	@ (8003d08 <TIM_Base_SetConfig+0x134>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a41      	ldr	r2, [pc, #260]	@ (8003d0c <TIM_Base_SetConfig+0x138>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a40      	ldr	r2, [pc, #256]	@ (8003d10 <TIM_Base_SetConfig+0x13c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a35      	ldr	r2, [pc, #212]	@ (8003d00 <TIM_Base_SetConfig+0x12c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02b      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c34:	d027      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a32      	ldr	r2, [pc, #200]	@ (8003d04 <TIM_Base_SetConfig+0x130>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d023      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a31      	ldr	r2, [pc, #196]	@ (8003d08 <TIM_Base_SetConfig+0x134>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a30      	ldr	r2, [pc, #192]	@ (8003d0c <TIM_Base_SetConfig+0x138>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01b      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2f      	ldr	r2, [pc, #188]	@ (8003d10 <TIM_Base_SetConfig+0x13c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d017      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	@ (8003d14 <TIM_Base_SetConfig+0x140>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2d      	ldr	r2, [pc, #180]	@ (8003d18 <TIM_Base_SetConfig+0x144>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <TIM_Base_SetConfig+0x148>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <TIM_Base_SetConfig+0x14c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <TIM_Base_SetConfig+0x150>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a29      	ldr	r2, [pc, #164]	@ (8003d28 <TIM_Base_SetConfig+0x154>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a10      	ldr	r2, [pc, #64]	@ (8003d00 <TIM_Base_SetConfig+0x12c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0xf8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <TIM_Base_SetConfig+0x13c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d103      	bne.n	8003cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40000c00 	.word	0x40000c00
 8003d10:	40010400 	.word	0x40010400
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800
 8003d20:	40001800 	.word	0x40001800
 8003d24:	40001c00 	.word	0x40001c00
 8003d28:	40002000 	.word	0x40002000

08003d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e040      	b.n	8003dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fc ffd8 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fdc2 	bl	8004938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fb5b 	bl	8004470 <UART_SetConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e01b      	b.n	8003dfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fe41 	bl	8004a7c <UART_CheckIdleState>
 8003dfa:	4603      	mov	r3, r0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d132      	bne.n	8003e82 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Receive_IT+0x24>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e02b      	b.n	8003e84 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d018      	beq.n	8003e72 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	623b      	str	r3, [r7, #32]
 8003e60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	69f9      	ldr	r1, [r7, #28]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e6      	bne.n	8003e40 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	461a      	mov	r2, r3
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fec3 	bl	8004c04 <UART_Start_Receive_IT>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	e000      	b.n	8003e84 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3728      	adds	r7, #40	@ 0x28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003eb6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003eba:	4013      	ands	r3, r2
 8003ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d115      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8297 	beq.w	8004418 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
      }
      return;
 8003ef2:	e291      	b.n	8004418 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8117 	beq.w	800412c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f0e:	4b85      	ldr	r3, [pc, #532]	@ (8004124 <HAL_UART_IRQHandler+0x298>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 810a 	beq.w	800412c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d011      	beq.n	8003f48 <HAL_UART_IRQHandler+0xbc>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d011      	beq.n	8003f78 <HAL_UART_IRQHandler+0xec>
 8003f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d011      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x11c>
 8003f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fda:	f043 0208 	orr.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d012      	beq.n	8004016 <HAL_UART_IRQHandler+0x18a>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 81fd 	beq.w	800441c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004050:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d005      	beq.n	800406e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004066:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04f      	beq.n	800410e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fe8e 	bl	8004d90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	d141      	bne.n	8004106 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004098:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800409c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3308      	adds	r3, #8
 80040aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1d9      	bne.n	8004082 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d013      	beq.n	80040fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040da:	4a13      	ldr	r2, [pc, #76]	@ (8004128 <HAL_UART_IRQHandler+0x29c>)
 80040dc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fa02 	bl	80014ec <HAL_DMA_Abort_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e00f      	b.n	800411e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9a0 	bl	8004444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00b      	b.n	800411e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f99c 	bl	8004444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e007      	b.n	800411e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f998 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800411c:	e17e      	b.n	800441c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	bf00      	nop
    return;
 8004120:	e17c      	b.n	800441c <HAL_UART_IRQHandler+0x590>
 8004122:	bf00      	nop
 8004124:	04000120 	.word	0x04000120
 8004128:	08004e59 	.word	0x08004e59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 814c 	bne.w	80043ce <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8145 	beq.w	80043ce <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 813e 	beq.w	80043ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2210      	movs	r2, #16
 8004158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b40      	cmp	r3, #64	@ 0x40
 8004166:	f040 80b6 	bne.w	80042d6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004176:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8150 	beq.w	8004420 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800418a:	429a      	cmp	r2, r3
 800418c:	f080 8148 	bcs.w	8004420 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004196:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a4:	f000 8086 	beq.w	80042b4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1da      	bne.n	80041a8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3308      	adds	r3, #8
 8004212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004216:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800421a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800421e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e1      	bne.n	80041f2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800423e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004252:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004254:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004258:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e3      	bne.n	800422e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004284:	f023 0310 	bic.w	r3, r3, #16
 8004288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004296:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004298:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800429c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e4      	bne.n	8004274 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd f8ac 	bl	800140c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8c2 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042d4:	e0a4      	b.n	8004420 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8096 	beq.w	8004424 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80042f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8091 	beq.w	8004424 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004316:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004324:	647b      	str	r3, [r7, #68]	@ 0x44
 8004326:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800432a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e4      	bne.n	8004302 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	623b      	str	r3, [r7, #32]
   return(result);
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800435c:	633a      	str	r2, [r7, #48]	@ 0x30
 800435e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e3      	bne.n	8004338 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60fb      	str	r3, [r7, #12]
   return(result);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	617b      	str	r3, [r7, #20]
   return(result);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f846 	bl	8004458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043cc:	e02a      	b.n	8004424 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00e      	beq.n	80043f8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01c      	beq.n	8004428 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
    }
    return;
 80043f6:	e017      	b.n	8004428 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <HAL_UART_IRQHandler+0x59e>
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fd37 	bl	8004e84 <UART_EndTransmit_IT>
    return;
 8004416:	e008      	b.n	800442a <HAL_UART_IRQHandler+0x59e>
      return;
 8004418:	bf00      	nop
 800441a:	e006      	b.n	800442a <HAL_UART_IRQHandler+0x59e>
    return;
 800441c:	bf00      	nop
 800441e:	e004      	b.n	800442a <HAL_UART_IRQHandler+0x59e>
      return;
 8004420:	bf00      	nop
 8004422:	e002      	b.n	800442a <HAL_UART_IRQHandler+0x59e>
      return;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <HAL_UART_IRQHandler+0x59e>
    return;
 8004428:	bf00      	nop
  }

}
 800442a:	37e8      	adds	r7, #232	@ 0xe8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4ba6      	ldr	r3, [pc, #664]	@ (8004734 <UART_SetConfig+0x2c4>)
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a94      	ldr	r2, [pc, #592]	@ (8004738 <UART_SetConfig+0x2c8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d120      	bne.n	800452e <UART_SetConfig+0xbe>
 80044ec:	4b93      	ldr	r3, [pc, #588]	@ (800473c <UART_SetConfig+0x2cc>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d816      	bhi.n	8004528 <UART_SetConfig+0xb8>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <UART_SetConfig+0x90>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004511 	.word	0x08004511
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004517 	.word	0x08004517
 800450c:	08004523 	.word	0x08004523
 8004510:	2301      	movs	r3, #1
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e150      	b.n	80047b8 <UART_SetConfig+0x348>
 8004516:	2302      	movs	r3, #2
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e14d      	b.n	80047b8 <UART_SetConfig+0x348>
 800451c:	2304      	movs	r3, #4
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e14a      	b.n	80047b8 <UART_SetConfig+0x348>
 8004522:	2308      	movs	r3, #8
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e147      	b.n	80047b8 <UART_SetConfig+0x348>
 8004528:	2310      	movs	r3, #16
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e144      	b.n	80047b8 <UART_SetConfig+0x348>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a83      	ldr	r2, [pc, #524]	@ (8004740 <UART_SetConfig+0x2d0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d132      	bne.n	800459e <UART_SetConfig+0x12e>
 8004538:	4b80      	ldr	r3, [pc, #512]	@ (800473c <UART_SetConfig+0x2cc>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d828      	bhi.n	8004598 <UART_SetConfig+0x128>
 8004546:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0xdc>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004581 	.word	0x08004581
 8004550:	08004599 	.word	0x08004599
 8004554:	08004599 	.word	0x08004599
 8004558:	08004599 	.word	0x08004599
 800455c:	0800458d 	.word	0x0800458d
 8004560:	08004599 	.word	0x08004599
 8004564:	08004599 	.word	0x08004599
 8004568:	08004599 	.word	0x08004599
 800456c:	08004587 	.word	0x08004587
 8004570:	08004599 	.word	0x08004599
 8004574:	08004599 	.word	0x08004599
 8004578:	08004599 	.word	0x08004599
 800457c:	08004593 	.word	0x08004593
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e118      	b.n	80047b8 <UART_SetConfig+0x348>
 8004586:	2302      	movs	r3, #2
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e115      	b.n	80047b8 <UART_SetConfig+0x348>
 800458c:	2304      	movs	r3, #4
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e112      	b.n	80047b8 <UART_SetConfig+0x348>
 8004592:	2308      	movs	r3, #8
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e10f      	b.n	80047b8 <UART_SetConfig+0x348>
 8004598:	2310      	movs	r3, #16
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e10c      	b.n	80047b8 <UART_SetConfig+0x348>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a68      	ldr	r2, [pc, #416]	@ (8004744 <UART_SetConfig+0x2d4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d120      	bne.n	80045ea <UART_SetConfig+0x17a>
 80045a8:	4b64      	ldr	r3, [pc, #400]	@ (800473c <UART_SetConfig+0x2cc>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045b2:	2b30      	cmp	r3, #48	@ 0x30
 80045b4:	d013      	beq.n	80045de <UART_SetConfig+0x16e>
 80045b6:	2b30      	cmp	r3, #48	@ 0x30
 80045b8:	d814      	bhi.n	80045e4 <UART_SetConfig+0x174>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d009      	beq.n	80045d2 <UART_SetConfig+0x162>
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d810      	bhi.n	80045e4 <UART_SetConfig+0x174>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <UART_SetConfig+0x15c>
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d006      	beq.n	80045d8 <UART_SetConfig+0x168>
 80045ca:	e00b      	b.n	80045e4 <UART_SetConfig+0x174>
 80045cc:	2300      	movs	r3, #0
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e0f2      	b.n	80047b8 <UART_SetConfig+0x348>
 80045d2:	2302      	movs	r3, #2
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0ef      	b.n	80047b8 <UART_SetConfig+0x348>
 80045d8:	2304      	movs	r3, #4
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0ec      	b.n	80047b8 <UART_SetConfig+0x348>
 80045de:	2308      	movs	r3, #8
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e0e9      	b.n	80047b8 <UART_SetConfig+0x348>
 80045e4:	2310      	movs	r3, #16
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0e6      	b.n	80047b8 <UART_SetConfig+0x348>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a56      	ldr	r2, [pc, #344]	@ (8004748 <UART_SetConfig+0x2d8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d120      	bne.n	8004636 <UART_SetConfig+0x1c6>
 80045f4:	4b51      	ldr	r3, [pc, #324]	@ (800473c <UART_SetConfig+0x2cc>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004600:	d013      	beq.n	800462a <UART_SetConfig+0x1ba>
 8004602:	2bc0      	cmp	r3, #192	@ 0xc0
 8004604:	d814      	bhi.n	8004630 <UART_SetConfig+0x1c0>
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d009      	beq.n	800461e <UART_SetConfig+0x1ae>
 800460a:	2b80      	cmp	r3, #128	@ 0x80
 800460c:	d810      	bhi.n	8004630 <UART_SetConfig+0x1c0>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <UART_SetConfig+0x1a8>
 8004612:	2b40      	cmp	r3, #64	@ 0x40
 8004614:	d006      	beq.n	8004624 <UART_SetConfig+0x1b4>
 8004616:	e00b      	b.n	8004630 <UART_SetConfig+0x1c0>
 8004618:	2300      	movs	r3, #0
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e0cc      	b.n	80047b8 <UART_SetConfig+0x348>
 800461e:	2302      	movs	r3, #2
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e0c9      	b.n	80047b8 <UART_SetConfig+0x348>
 8004624:	2304      	movs	r3, #4
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e0c6      	b.n	80047b8 <UART_SetConfig+0x348>
 800462a:	2308      	movs	r3, #8
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e0c3      	b.n	80047b8 <UART_SetConfig+0x348>
 8004630:	2310      	movs	r3, #16
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0c0      	b.n	80047b8 <UART_SetConfig+0x348>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a44      	ldr	r2, [pc, #272]	@ (800474c <UART_SetConfig+0x2dc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d125      	bne.n	800468c <UART_SetConfig+0x21c>
 8004640:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <UART_SetConfig+0x2cc>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800464e:	d017      	beq.n	8004680 <UART_SetConfig+0x210>
 8004650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004654:	d817      	bhi.n	8004686 <UART_SetConfig+0x216>
 8004656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800465a:	d00b      	beq.n	8004674 <UART_SetConfig+0x204>
 800465c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004660:	d811      	bhi.n	8004686 <UART_SetConfig+0x216>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <UART_SetConfig+0x1fe>
 8004666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466a:	d006      	beq.n	800467a <UART_SetConfig+0x20a>
 800466c:	e00b      	b.n	8004686 <UART_SetConfig+0x216>
 800466e:	2300      	movs	r3, #0
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e0a1      	b.n	80047b8 <UART_SetConfig+0x348>
 8004674:	2302      	movs	r3, #2
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e09e      	b.n	80047b8 <UART_SetConfig+0x348>
 800467a:	2304      	movs	r3, #4
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e09b      	b.n	80047b8 <UART_SetConfig+0x348>
 8004680:	2308      	movs	r3, #8
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e098      	b.n	80047b8 <UART_SetConfig+0x348>
 8004686:	2310      	movs	r3, #16
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e095      	b.n	80047b8 <UART_SetConfig+0x348>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2f      	ldr	r2, [pc, #188]	@ (8004750 <UART_SetConfig+0x2e0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d125      	bne.n	80046e2 <UART_SetConfig+0x272>
 8004696:	4b29      	ldr	r3, [pc, #164]	@ (800473c <UART_SetConfig+0x2cc>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a4:	d017      	beq.n	80046d6 <UART_SetConfig+0x266>
 80046a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046aa:	d817      	bhi.n	80046dc <UART_SetConfig+0x26c>
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b0:	d00b      	beq.n	80046ca <UART_SetConfig+0x25a>
 80046b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b6:	d811      	bhi.n	80046dc <UART_SetConfig+0x26c>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <UART_SetConfig+0x254>
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c0:	d006      	beq.n	80046d0 <UART_SetConfig+0x260>
 80046c2:	e00b      	b.n	80046dc <UART_SetConfig+0x26c>
 80046c4:	2301      	movs	r3, #1
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e076      	b.n	80047b8 <UART_SetConfig+0x348>
 80046ca:	2302      	movs	r3, #2
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e073      	b.n	80047b8 <UART_SetConfig+0x348>
 80046d0:	2304      	movs	r3, #4
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e070      	b.n	80047b8 <UART_SetConfig+0x348>
 80046d6:	2308      	movs	r3, #8
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e06d      	b.n	80047b8 <UART_SetConfig+0x348>
 80046dc:	2310      	movs	r3, #16
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e06a      	b.n	80047b8 <UART_SetConfig+0x348>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <UART_SetConfig+0x2e4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d138      	bne.n	800475e <UART_SetConfig+0x2ee>
 80046ec:	4b13      	ldr	r3, [pc, #76]	@ (800473c <UART_SetConfig+0x2cc>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80046f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046fa:	d017      	beq.n	800472c <UART_SetConfig+0x2bc>
 80046fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004700:	d82a      	bhi.n	8004758 <UART_SetConfig+0x2e8>
 8004702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004706:	d00b      	beq.n	8004720 <UART_SetConfig+0x2b0>
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470c:	d824      	bhi.n	8004758 <UART_SetConfig+0x2e8>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <UART_SetConfig+0x2aa>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d006      	beq.n	8004726 <UART_SetConfig+0x2b6>
 8004718:	e01e      	b.n	8004758 <UART_SetConfig+0x2e8>
 800471a:	2300      	movs	r3, #0
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e04b      	b.n	80047b8 <UART_SetConfig+0x348>
 8004720:	2302      	movs	r3, #2
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e048      	b.n	80047b8 <UART_SetConfig+0x348>
 8004726:	2304      	movs	r3, #4
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e045      	b.n	80047b8 <UART_SetConfig+0x348>
 800472c:	2308      	movs	r3, #8
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e042      	b.n	80047b8 <UART_SetConfig+0x348>
 8004732:	bf00      	nop
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40011000 	.word	0x40011000
 800473c:	40023800 	.word	0x40023800
 8004740:	40004400 	.word	0x40004400
 8004744:	40004800 	.word	0x40004800
 8004748:	40004c00 	.word	0x40004c00
 800474c:	40005000 	.word	0x40005000
 8004750:	40011400 	.word	0x40011400
 8004754:	40007800 	.word	0x40007800
 8004758:	2310      	movs	r3, #16
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e02c      	b.n	80047b8 <UART_SetConfig+0x348>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a72      	ldr	r2, [pc, #456]	@ (800492c <UART_SetConfig+0x4bc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d125      	bne.n	80047b4 <UART_SetConfig+0x344>
 8004768:	4b71      	ldr	r3, [pc, #452]	@ (8004930 <UART_SetConfig+0x4c0>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004772:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004776:	d017      	beq.n	80047a8 <UART_SetConfig+0x338>
 8004778:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800477c:	d817      	bhi.n	80047ae <UART_SetConfig+0x33e>
 800477e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004782:	d00b      	beq.n	800479c <UART_SetConfig+0x32c>
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004788:	d811      	bhi.n	80047ae <UART_SetConfig+0x33e>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <UART_SetConfig+0x326>
 800478e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004792:	d006      	beq.n	80047a2 <UART_SetConfig+0x332>
 8004794:	e00b      	b.n	80047ae <UART_SetConfig+0x33e>
 8004796:	2300      	movs	r3, #0
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e00d      	b.n	80047b8 <UART_SetConfig+0x348>
 800479c:	2302      	movs	r3, #2
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e00a      	b.n	80047b8 <UART_SetConfig+0x348>
 80047a2:	2304      	movs	r3, #4
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e007      	b.n	80047b8 <UART_SetConfig+0x348>
 80047a8:	2308      	movs	r3, #8
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e004      	b.n	80047b8 <UART_SetConfig+0x348>
 80047ae:	2310      	movs	r3, #16
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e001      	b.n	80047b8 <UART_SetConfig+0x348>
 80047b4:	2310      	movs	r3, #16
 80047b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c0:	d15b      	bne.n	800487a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d828      	bhi.n	800481a <UART_SetConfig+0x3aa>
 80047c8:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0x360>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fd fcfc 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 80047f8:	61b8      	str	r0, [r7, #24]
        break;
 80047fa:	e013      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fd fd0c 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8004800:	61b8      	str	r0, [r7, #24]
        break;
 8004802:	e00f      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b4b      	ldr	r3, [pc, #300]	@ (8004934 <UART_SetConfig+0x4c4>)
 8004806:	61bb      	str	r3, [r7, #24]
        break;
 8004808:	e00c      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fd fc1f 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800480e:	61b8      	str	r0, [r7, #24]
        break;
 8004810:	e008      	b.n	8004824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004816:	61bb      	str	r3, [r7, #24]
        break;
 8004818:	e004      	b.n	8004824 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	77bb      	strb	r3, [r7, #30]
        break;
 8004822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d074      	beq.n	8004914 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d916      	bls.n	8004874 <UART_SetConfig+0x404>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484c:	d212      	bcs.n	8004874 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f023 030f 	bic.w	r3, r3, #15
 8004856:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	b29a      	uxth	r2, r3
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	4313      	orrs	r3, r2
 8004868:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	89fa      	ldrh	r2, [r7, #14]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	e04f      	b.n	8004914 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77bb      	strb	r3, [r7, #30]
 8004878:	e04c      	b.n	8004914 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487a:	7ffb      	ldrb	r3, [r7, #31]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d828      	bhi.n	80048d2 <UART_SetConfig+0x462>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <UART_SetConfig+0x418>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fd fca0 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e013      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fd fcb0 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <UART_SetConfig+0x4c4>)
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e00c      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fd fbc3 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80048c6:	61b8      	str	r0, [r7, #24]
        break;
 80048c8:	e008      	b.n	80048dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e004      	b.n	80048dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77bb      	strb	r3, [r7, #30]
        break;
 80048da:	bf00      	nop
    }

    if (pclk != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	085a      	lsrs	r2, r3, #1
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d909      	bls.n	8004910 <UART_SetConfig+0x4a0>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004902:	d205      	bcs.n	8004910 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	e001      	b.n	8004914 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004920:	7fbb      	ldrb	r3, [r7, #30]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40007c00 	.word	0x40007c00
 8004930:	40023800 	.word	0x40023800
 8004934:	00f42400 	.word	0x00f42400

08004938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a36:	d10a      	bne.n	8004a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	@ 0x30
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a8c:	f7fc fb4c 	bl	8001128 <HAL_GetTick>
 8004a90:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d12e      	bne.n	8004afe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f83b 	bl	8004b2a <UART_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d021      	beq.n	8004afe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e6      	bne.n	8004aba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e011      	b.n	8004b22 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3728      	adds	r7, #40	@ 0x28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3a:	e04f      	b.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d04b      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fc faf0 	bl	8001128 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04e      	b.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d037      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d034      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b40      	cmp	r3, #64	@ 0x40
 8004b76:	d031      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d110      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f8fe 	bl	8004d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2208      	movs	r2, #8
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e029      	b.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb6:	d111      	bne.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f8e4 	bl	8004d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e00f      	b.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d0a0      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b097      	sub	sp, #92	@ 0x5c
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	d10e      	bne.n	8004c56 <UART_Start_Receive_IT+0x52>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <UART_Start_Receive_IT+0x48>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c4a:	e02d      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	22ff      	movs	r2, #255	@ 0xff
 8004c50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c54:	e028      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <UART_Start_Receive_IT+0x76>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <UART_Start_Receive_IT+0x6c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	22ff      	movs	r2, #255	@ 0xff
 8004c6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c6e:	e01b      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	227f      	movs	r2, #127	@ 0x7f
 8004c74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c78:	e016      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c82:	d10d      	bne.n	8004ca0 <UART_Start_Receive_IT+0x9c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <UART_Start_Receive_IT+0x92>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	227f      	movs	r2, #127	@ 0x7f
 8004c90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c94:	e008      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	223f      	movs	r2, #63	@ 0x3f
 8004c9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c9e:	e003      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2222      	movs	r2, #34	@ 0x22
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004cda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf4:	d107      	bne.n	8004d06 <UART_Start_Receive_IT+0x102>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a21      	ldr	r2, [pc, #132]	@ (8004d88 <UART_Start_Receive_IT+0x184>)
 8004d02:	669a      	str	r2, [r3, #104]	@ 0x68
 8004d04:	e002      	b.n	8004d0c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4a20      	ldr	r2, [pc, #128]	@ (8004d8c <UART_Start_Receive_IT+0x188>)
 8004d0a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d34:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e6      	bne.n	8004d14 <UART_Start_Receive_IT+0x110>
 8004d46:	e018      	b.n	8004d7a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	613b      	str	r3, [r7, #16]
   return(result);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f043 0320 	orr.w	r3, r3, #32
 8004d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69f9      	ldr	r1, [r7, #28]
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	375c      	adds	r7, #92	@ 0x5c
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	08005081 	.word	0x08005081
 8004d8c:	08004ed9 	.word	0x08004ed9

08004d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b095      	sub	sp, #84	@ 0x54
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e6      	bne.n	8004d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d118      	bne.n	8004e38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 0310 	bic.w	r3, r3, #16
 8004e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	613b      	str	r3, [r7, #16]
   return(result);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e6      	bne.n	8004e06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e4c:	bf00      	nop
 8004e4e:	3754      	adds	r7, #84	@ 0x54
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff fae4 	bl	8004444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fab0 	bl	8004430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed0:	bf00      	nop
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b09c      	sub	sp, #112	@ 0x70
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ee6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef0:	2b22      	cmp	r3, #34	@ 0x22
 8004ef2:	f040 80b9 	bne.w	8005068 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f04:	b2d9      	uxtb	r1, r3
 8004f06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	400a      	ands	r2, r1
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 809c 	bne.w	8005078 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e6      	bne.n	8004f40 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3308      	adds	r3, #8
 8004f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d018      	beq.n	8004ffa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e6      	bne.n	8004fc8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d12e      	bne.n	8005060 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	60fb      	str	r3, [r7, #12]
   return(result);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f023 0310 	bic.w	r3, r3, #16
 800501c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	69b9      	ldr	r1, [r7, #24]
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	617b      	str	r3, [r7, #20]
   return(result);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e6      	bne.n	8005008 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d103      	bne.n	8005050 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2210      	movs	r2, #16
 800504e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff f9fd 	bl	8004458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800505e:	e00b      	b.n	8005078 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fb fc69 	bl	8000938 <HAL_UART_RxCpltCallback>
}
 8005066:	e007      	b.n	8005078 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	619a      	str	r2, [r3, #24]
}
 8005078:	bf00      	nop
 800507a:	3770      	adds	r7, #112	@ 0x70
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b09c      	sub	sp, #112	@ 0x70
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800508e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005098:	2b22      	cmp	r3, #34	@ 0x22
 800509a:	f040 80b9 	bne.w	8005210 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80050ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80050b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 809c 	bne.w	8005220 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80050f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005106:	657b      	str	r3, [r7, #84]	@ 0x54
 8005108:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800510c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3308      	adds	r3, #8
 8005120:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	663b      	str	r3, [r7, #96]	@ 0x60
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800513a:	643a      	str	r2, [r7, #64]	@ 0x40
 800513c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005140:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e5      	bne.n	800511a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d018      	beq.n	80051a2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	61fb      	str	r3, [r7, #28]
   return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005190:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e6      	bne.n	8005170 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d12e      	bne.n	8005208 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0310 	bic.w	r3, r3, #16
 80051c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	613b      	str	r3, [r7, #16]
   return(result);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d103      	bne.n	80051f8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2210      	movs	r2, #16
 80051f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff f929 	bl	8004458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005206:	e00b      	b.n	8005220 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fb fb95 	bl	8000938 <HAL_UART_RxCpltCallback>
}
 800520e:	e007      	b.n	8005220 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	619a      	str	r2, [r3, #24]
}
 8005220:	bf00      	nop
 8005222:	3770      	adds	r7, #112	@ 0x70
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005228:	b084      	sub	sp, #16
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	f107 001c 	add.w	r0, r7, #28
 8005236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800523e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005240:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005242:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005246:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800524a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800524e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005252:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	4b07      	ldr	r3, [pc, #28]	@ (800527c <SDMMC_Init+0x54>)
 8005260:	4013      	ands	r3, r2
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	b004      	add	sp, #16
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	ffff8100 	.word	0xffff8100

08005280 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2203      	movs	r2, #3
 800528c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0303 	and.w	r3, r3, #3
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80052dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80052e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <SDMMC_SendCommand+0x50>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	fffff000 	.word	0xfffff000

0800530c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	b2db      	uxtb	r3, r3
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3314      	adds	r3, #20
 8005334:	461a      	mov	r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	4413      	add	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
}  
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005372:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005378:	431a      	orrs	r2, r3
                       Data->DPSM);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800537e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0

}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80053b2:	2310      	movs	r3, #16
 80053b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053b6:	2340      	movs	r3, #64	@ 0x40
 80053b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff74 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80053d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d4:	2110      	movs	r1, #16
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f9d6 	bl	8005788 <SDMMC_GetCmdResp1>
 80053dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053de:	69fb      	ldr	r3, [r7, #28]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80053f6:	2311      	movs	r3, #17
 80053f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053fa:	2340      	movs	r3, #64	@ 0x40
 80053fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005406:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005408:	f107 0308 	add.w	r3, r7, #8
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff52 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005418:	2111      	movs	r1, #17
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9b4 	bl	8005788 <SDMMC_GetCmdResp1>
 8005420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005422:	69fb      	ldr	r3, [r7, #28]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800543a:	2312      	movs	r3, #18
 800543c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800543e:	2340      	movs	r3, #64	@ 0x40
 8005440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800544a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ff30 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545c:	2112      	movs	r1, #18
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f992 	bl	8005788 <SDMMC_GetCmdResp1>
 8005464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800547e:	2318      	movs	r3, #24
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	@ 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff0e 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800549c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a0:	2118      	movs	r1, #24
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f970 	bl	8005788 <SDMMC_GetCmdResp1>
 80054a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80054c2:	2319      	movs	r3, #25
 80054c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054c6:	2340      	movs	r3, #64	@ 0x40
 80054c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff feec 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80054e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e4:	2119      	movs	r1, #25
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f94e 	bl	8005788 <SDMMC_GetCmdResp1>
 80054ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ee:	69fb      	ldr	r3, [r7, #28]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005504:	230c      	movs	r3, #12
 8005506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005508:	2340      	movs	r3, #64	@ 0x40
 800550a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005514:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fecb 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005522:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <SDMMC_CmdStopTransfer+0x40>)
 8005524:	210c      	movs	r1, #12
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f92e 	bl	8005788 <SDMMC_GetCmdResp1>
 800552c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	05f5e100 	.word	0x05f5e100

0800553c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800554c:	2307      	movs	r3, #7
 800554e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005550:	2340      	movs	r3, #64	@ 0x40
 8005552:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800555c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800555e:	f107 0310 	add.w	r3, r7, #16
 8005562:	4619      	mov	r1, r3
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff fea7 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	2107      	movs	r1, #7
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f909 	bl	8005788 <SDMMC_GetCmdResp1>
 8005576:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800557a:	4618      	mov	r0, r3
 800557c:	3728      	adds	r7, #40	@ 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800559a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055a0:	f107 0308 	add.w	r3, r7, #8
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fe86 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fb23 	bl	8005bf8 <SDMMC_GetCmdError>
 80055b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055b4:	69fb      	ldr	r3, [r7, #28]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80055c6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80055ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80055cc:	2308      	movs	r3, #8
 80055ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055d0:	2340      	movs	r3, #64	@ 0x40
 80055d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fe67 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fab6 	bl	8005b5c <SDMMC_GetCmdResp7>
 80055f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f2:	69fb      	ldr	r3, [r7, #28]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800560a:	2337      	movs	r3, #55	@ 0x37
 800560c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800560e:	2340      	movs	r3, #64	@ 0x40
 8005610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800561a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe48 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562c:	2137      	movs	r1, #55	@ 0x37
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8aa 	bl	8005788 <SDMMC_GetCmdResp1>
 8005634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005636:	69fb      	ldr	r3, [r7, #28]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <SDMMC_CmdAppOperCommand+0x44>)
 800564e:	4313      	orrs	r3, r2
 8005650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005652:	2329      	movs	r3, #41	@ 0x29
 8005654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005656:	2340      	movs	r3, #64	@ 0x40
 8005658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800565e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005662:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fe24 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9bf 	bl	80059f4 <SDMMC_GetCmdResp3>
 8005676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005678:	69fb      	ldr	r3, [r7, #28]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	80100000 	.word	0x80100000

08005688 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005694:	2302      	movs	r3, #2
 8005696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005698:	23c0      	movs	r3, #192	@ 0xc0
 800569a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe03 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f956 	bl	8005964 <SDMMC_GetCmdResp2>
 80056b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ba:	69fb      	ldr	r3, [r7, #28]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80056d2:	2309      	movs	r3, #9
 80056d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056d6:	23c0      	movs	r3, #192	@ 0xc0
 80056d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fde4 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f937 	bl	8005964 <SDMMC_GetCmdResp2>
 80056f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056f8:	69fb      	ldr	r3, [r7, #28]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b088      	sub	sp, #32
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005710:	2303      	movs	r3, #3
 8005712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005714:	2340      	movs	r3, #64	@ 0x40
 8005716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800571c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005720:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fdc5 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	2103      	movs	r1, #3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f99c 	bl	8005a70 <SDMMC_GetCmdResp6>
 8005738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800573a:	69fb      	ldr	r3, [r7, #28]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005752:	230d      	movs	r3, #13
 8005754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005756:	2340      	movs	r3, #64	@ 0x40
 8005758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800575e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fda4 	bl	80052b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005774:	210d      	movs	r1, #13
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f806 	bl	8005788 <SDMMC_GetCmdResp1>
 800577c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577e:	69fb      	ldr	r3, [r7, #28]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	460b      	mov	r3, r1
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005796:	4b70      	ldr	r3, [pc, #448]	@ (8005958 <SDMMC_GetCmdResp1+0x1d0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a70      	ldr	r2, [pc, #448]	@ (800595c <SDMMC_GetCmdResp1+0x1d4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	0a5a      	lsrs	r2, r3, #9
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1e5a      	subs	r2, r3, #1
 80057ae:	61fa      	str	r2, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80057b8:	e0c9      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ef      	beq.n	80057aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ea      	bne.n	80057aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2204      	movs	r2, #4
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057e6:	2304      	movs	r3, #4
 80057e8:	e0b1      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0a6      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	22c5      	movs	r2, #197	@ 0xc5
 8005804:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fd80 	bl	800530c <SDMMC_GetCommandResponse>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	4293      	cmp	r3, r2
 8005814:	d001      	beq.n	800581a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005816:	2301      	movs	r3, #1
 8005818:	e099      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800581a:	2100      	movs	r1, #0
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff fd82 	bl	8005326 <SDMMC_GetResponse>
 8005822:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4b4e      	ldr	r3, [pc, #312]	@ (8005960 <SDMMC_GetCmdResp1+0x1d8>)
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800582e:	2300      	movs	r3, #0
 8005830:	e08d      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da02      	bge.n	800583e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005838:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800583c:	e087      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005848:	2340      	movs	r3, #64	@ 0x40
 800584a:	e080      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	e079      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005868:	e071      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005878:	e069      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005888:	e061      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005894:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005898:	e059      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058a8:	e051      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058b8:	e049      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80058c8:	e041      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80058d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058d8:	e039      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80058e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058e8:	e031      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80058f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80058f8:	e029      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005904:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005908:	e021      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005914:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005918:	e019      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005924:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005928:	e011      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005934:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005938:	e009      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005944:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005948:	e001      	b.n	800594e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800594a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000000 	.word	0x20000000
 800595c:	10624dd3 	.word	0x10624dd3
 8005960:	fdffe008 	.word	0xfdffe008

08005964 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800596c:	4b1f      	ldr	r3, [pc, #124]	@ (80059ec <SDMMC_GetCmdResp2+0x88>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	@ (80059f0 <SDMMC_GetCmdResp2+0x8c>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0a5b      	lsrs	r3, r3, #9
 8005978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1e5a      	subs	r2, r3, #1
 8005986:	60fa      	str	r2, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800598c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005990:	e026      	b.n	80059e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005996:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ef      	beq.n	8005982 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ea      	bne.n	8005982 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2204      	movs	r2, #4
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059be:	2304      	movs	r3, #4
 80059c0:	e00e      	b.n	80059e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e003      	b.n	80059e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	22c5      	movs	r2, #197	@ 0xc5
 80059dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000000 	.word	0x20000000
 80059f0:	10624dd3 	.word	0x10624dd3

080059f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a68 <SDMMC_GetCmdResp3+0x74>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1a      	ldr	r2, [pc, #104]	@ (8005a6c <SDMMC_GetCmdResp3+0x78>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	0a5b      	lsrs	r3, r3, #9
 8005a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1e5a      	subs	r2, r3, #1
 8005a16:	60fa      	str	r2, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a20:	e01b      	b.n	8005a5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ef      	beq.n	8005a12 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ea      	bne.n	8005a12 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a4e:	2304      	movs	r3, #4
 8005a50:	e003      	b.n	8005a5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	22c5      	movs	r2, #197	@ 0xc5
 8005a56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	20000000 	.word	0x20000000
 8005a6c:	10624dd3 	.word	0x10624dd3

08005a70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a7e:	4b35      	ldr	r3, [pc, #212]	@ (8005b54 <SDMMC_GetCmdResp6+0xe4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a35      	ldr	r2, [pc, #212]	@ (8005b58 <SDMMC_GetCmdResp6+0xe8>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	0a5b      	lsrs	r3, r3, #9
 8005a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	1e5a      	subs	r2, r3, #1
 8005a98:	61fa      	str	r2, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005aa2:	e052      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0ef      	beq.n	8005a94 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1ea      	bne.n	8005a94 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2204      	movs	r2, #4
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	e03a      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e02f      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fc0e 	bl	800530c <SDMMC_GetCommandResponse>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	7afb      	ldrb	r3, [r7, #11]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d001      	beq.n	8005afe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e025      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22c5      	movs	r2, #197	@ 0xc5
 8005b02:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b04:	2100      	movs	r1, #0
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fc0d 	bl	8005326 <SDMMC_GetResponse>
 8005b0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e011      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b34:	e009      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b44:	e001      	b.n	8005b4a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000000 	.word	0x20000000
 8005b58:	10624dd3 	.word	0x10624dd3

08005b5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b64:	4b22      	ldr	r3, [pc, #136]	@ (8005bf0 <SDMMC_GetCmdResp7+0x94>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a22      	ldr	r2, [pc, #136]	@ (8005bf4 <SDMMC_GetCmdResp7+0x98>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	0a5b      	lsrs	r3, r3, #9
 8005b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1e5a      	subs	r2, r3, #1
 8005b7e:	60fa      	str	r2, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b88:	e02c      	b.n	8005be4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0ef      	beq.n	8005b7a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ea      	bne.n	8005b7a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e014      	b.n	8005be4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e009      	b.n	8005be4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2240      	movs	r2, #64	@ 0x40
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005be2:	2300      	movs	r3, #0
  
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000000 	.word	0x20000000
 8005bf4:	10624dd3 	.word	0x10624dd3

08005bf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c00:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <SDMMC_GetCmdError+0x50>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a11      	ldr	r2, [pc, #68]	@ (8005c4c <SDMMC_GetCmdError+0x54>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	0a5b      	lsrs	r3, r3, #9
 8005c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	60fa      	str	r2, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c24:	e009      	b.n	8005c3a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f1      	beq.n	8005c16 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	22c5      	movs	r2, #197	@ 0xc5
 8005c36:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	10624dd3 	.word	0x10624dd3

08005c50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c54:	4904      	ldr	r1, [pc, #16]	@ (8005c68 <MX_FATFS_Init+0x18>)
 8005c56:	4805      	ldr	r0, [pc, #20]	@ (8005c6c <MX_FATFS_Init+0x1c>)
 8005c58:	f000 fa88 	bl	800616c <FATFS_LinkDriver>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <MX_FATFS_Init+0x20>)
 8005c62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c64:	bf00      	nop
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	2000070c 	.word	0x2000070c
 8005c6c:	08009e34 	.word	0x08009e34
 8005c70:	20000708 	.word	0x20000708

08005c74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005c7e:	f000 f86d 	bl	8005d5c <BSP_SD_IsDetected>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d001      	beq.n	8005c8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e005      	b.n	8005c98 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005c8c:	4804      	ldr	r0, [pc, #16]	@ (8005ca0 <BSP_SD_Init+0x2c>)
 8005c8e:	f7fc fef9 	bl	8002a84 <HAL_SD_Init>
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005c96:	79fb      	ldrb	r3, [r7, #7]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000328 	.word	0x20000328

08005ca4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	68f9      	ldr	r1, [r7, #12]
 8005cba:	4806      	ldr	r0, [pc, #24]	@ (8005cd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005cbc:	f7fc ff9a 	bl	8002bf4 <HAL_SD_ReadBlocks_DMA>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000328 	.word	0x20000328

08005cd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	4806      	ldr	r0, [pc, #24]	@ (8005d08 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005cf0:	f7fd f862 	bl	8002db8 <HAL_SD_WriteBlocks_DMA>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000328 	.word	0x20000328

08005d0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d10:	4805      	ldr	r0, [pc, #20]	@ (8005d28 <BSP_SD_GetCardState+0x1c>)
 8005d12:	f7fd fb11 	bl	8003338 <HAL_SD_GetCardState>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000328 	.word	0x20000328

08005d2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4803      	ldr	r0, [pc, #12]	@ (8005d44 <BSP_SD_GetCardInfo+0x18>)
 8005d38:	f7fd fad2 	bl	80032e0 <HAL_SD_GetCardInfo>
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000328 	.word	0x20000328

08005d48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005d50:	f000 f9b2 	bl	80060b8 <BSP_SD_ReadCpltCallback>
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005d62:	2301      	movs	r3, #1
 8005d64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005d66:	f000 f80b 	bl	8005d80 <BSP_PlatformIsDetected>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005d70:	2300      	movs	r3, #0
 8005d72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	b2db      	uxtb	r3, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005d86:	2301      	movs	r3, #1
 8005d88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d8e:	4806      	ldr	r0, [pc, #24]	@ (8005da8 <BSP_PlatformIsDetected+0x28>)
 8005d90:	f7fb fdb4 	bl	80018fc <HAL_GPIO_ReadPin>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40020800 	.word	0x40020800

08005dac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8005db4:	f000 fa26 	bl	8006204 <osKernelSysTick>
 8005db8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8005dba:	e006      	b.n	8005dca <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005dbc:	f7ff ffa6 	bl	8005d0c <BSP_SD_GetCardState>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e009      	b.n	8005dde <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8005dca:	f000 fa1b 	bl	8006204 <osKernelSysTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8f0      	bhi.n	8005dbc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005df2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <SD_CheckStatus+0x38>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005df8:	f7ff ff88 	bl	8005d0c <BSP_SD_GetCardState>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <SD_CheckStatus+0x38>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <SD_CheckStatus+0x38>)
 8005e10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005e12:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <SD_CheckStatus+0x38>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b2db      	uxtb	r3, r3
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000009 	.word	0x20000009

08005e24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005e2e:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <SD_initialize+0x8c>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8005e34:	f000 f9da 	bl	80061ec <osKernelRunning>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d030      	beq.n	8005ea0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005e3e:	f7ff ff19 	bl	8005c74 <BSP_SD_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff ffcc 	bl	8005de8 <SD_CheckStatus>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	4b16      	ldr	r3, [pc, #88]	@ (8005eb0 <SD_initialize+0x8c>)
 8005e56:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005e58:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <SD_initialize+0x8c>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d01e      	beq.n	8005ea0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8005e62:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <SD_initialize+0x90>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10e      	bne.n	8005e88 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8005e6a:	4b13      	ldr	r3, [pc, #76]	@ (8005eb8 <SD_initialize+0x94>)
 8005e6c:	f107 0408 	add.w	r4, r7, #8
 8005e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 faa1 	bl	80063c4 <osMessageCreate>
 8005e82:	4603      	mov	r3, r0
 8005e84:	4a0b      	ldr	r2, [pc, #44]	@ (8005eb4 <SD_initialize+0x90>)
 8005e86:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <SD_initialize+0x90>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d107      	bne.n	8005ea0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8005e90:	4b07      	ldr	r3, [pc, #28]	@ (8005eb0 <SD_initialize+0x8c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <SD_initialize+0x8c>)
 8005e9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005ea0:	4b03      	ldr	r3, [pc, #12]	@ (8005eb0 <SD_initialize+0x8c>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd90      	pop	{r4, r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000009 	.word	0x20000009
 8005eb4:	20000710 	.word	0x20000710
 8005eb8:	08009e04 	.word	0x08009e04

08005ebc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff8d 	bl	8005de8 <SD_CheckStatus>
 8005ece:	4603      	mov	r3, r0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	@ 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005eee:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005ef2:	f7ff ff5b 	bl	8005dac <SD_CheckStatusWithTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da02      	bge.n	8005f02 <SD_read+0x2a>
  {
    return res;
 8005efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f00:	e032      	b.n	8005f68 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f7ff fecc 	bl	8005ca4 <BSP_SD_ReadBlocks_DMA>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8005f12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d124      	bne.n	8005f64 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005f1a:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <SD_read+0x98>)
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fab4 	bl	8006494 <osMessageGet>

    if (event.status == osEventMessage)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d118      	bne.n	8005f64 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d115      	bne.n	8005f64 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8005f38:	f000 f964 	bl	8006204 <osKernelSysTick>
 8005f3c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005f3e:	e008      	b.n	8005f52 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f40:	f7ff fee4 	bl	8005d0c <BSP_SD_GetCardState>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <SD_read+0x7a>
              {
                res = RES_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005f50:	e008      	b.n	8005f64 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005f52:	f000 f957 	bl	8006204 <osKernelSysTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d9ed      	bls.n	8005f40 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000710 	.word	0x20000710

08005f74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005f8a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005f8e:	f7ff ff0d 	bl	8005dac <SD_CheckStatusWithTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da02      	bge.n	8005f9e <SD_write+0x2a>
  {
    return res;
 8005f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f9c:	e02e      	b.n	8005ffc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	68b8      	ldr	r0, [r7, #8]
 8005fa4:	f7ff fe98 	bl	8005cd8 <BSP_SD_WriteBlocks_DMA>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d124      	bne.n	8005ff8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005fae:	4b15      	ldr	r3, [pc, #84]	@ (8006004 <SD_write+0x90>)
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	f107 0314 	add.w	r3, r7, #20
 8005fb6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa6a 	bl	8006494 <osMessageGet>

    if (event.status == osEventMessage)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b10      	cmp	r3, #16
 8005fc4:	d118      	bne.n	8005ff8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d115      	bne.n	8005ff8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8005fcc:	f000 f91a 	bl	8006204 <osKernelSysTick>
 8005fd0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005fd2:	e008      	b.n	8005fe6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005fd4:	f7ff fe9a 	bl	8005d0c <BSP_SD_GetCardState>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <SD_write+0x72>
          {
            res = RES_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005fe4:	e008      	b.n	8005ff8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005fe6:	f000 f90d 	bl	8006204 <osKernelSysTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d9ed      	bls.n	8005fd4 <SD_write+0x60>
    }

  }
#endif

  return res;
 8005ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3728      	adds	r7, #40	@ 0x28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000710 	.word	0x20000710

08006008 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	@ 0x30
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	603a      	str	r2, [r7, #0]
 8006012:	71fb      	strb	r3, [r7, #7]
 8006014:	460b      	mov	r3, r1
 8006016:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800601e:	4b25      	ldr	r3, [pc, #148]	@ (80060b4 <SD_ioctl+0xac>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <SD_ioctl+0x28>
 800602c:	2303      	movs	r3, #3
 800602e:	e03c      	b.n	80060aa <SD_ioctl+0xa2>

  switch (cmd)
 8006030:	79bb      	ldrb	r3, [r7, #6]
 8006032:	2b03      	cmp	r3, #3
 8006034:	d834      	bhi.n	80060a0 <SD_ioctl+0x98>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <SD_ioctl+0x34>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	0800604d 	.word	0x0800604d
 8006040:	08006055 	.word	0x08006055
 8006044:	0800606d 	.word	0x0800606d
 8006048:	08006087 	.word	0x08006087
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006052:	e028      	b.n	80060a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006054:	f107 030c 	add.w	r3, r7, #12
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff fe67 	bl	8005d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800605e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800606a:	e01c      	b.n	80060a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fe5b 	bl	8005d2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	b29a      	uxth	r2, r3
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006084:	e00f      	b.n	80060a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006086:	f107 030c 	add.w	r3, r7, #12
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fe4e 	bl	8005d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	0a5a      	lsrs	r2, r3, #9
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800609e:	e002      	b.n	80060a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80060a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3730      	adds	r7, #48	@ 0x30
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000009 	.word	0x20000009

080060b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80060bc:	4b04      	ldr	r3, [pc, #16]	@ (80060d0 <BSP_SD_ReadCpltCallback+0x18>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f9a5 	bl	8006414 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000710 	.word	0x20000710

080060d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80060ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 80060ec:	7a5b      	ldrb	r3, [r3, #9]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d131      	bne.n	8006158 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80060f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 80060f6:	7a5b      	ldrb	r3, [r3, #9]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 80060fe:	2100      	movs	r1, #0
 8006100:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006102:	4b19      	ldr	r3, [pc, #100]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 8006104:	7a5b      	ldrb	r3, [r3, #9]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006112:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 8006114:	7a5b      	ldrb	r3, [r3, #9]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 800611c:	4413      	add	r3, r2
 800611e:	79fa      	ldrb	r2, [r7, #7]
 8006120:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006122:	4b11      	ldr	r3, [pc, #68]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 8006124:	7a5b      	ldrb	r3, [r3, #9]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	b2d1      	uxtb	r1, r2
 800612c:	4a0e      	ldr	r2, [pc, #56]	@ (8006168 <FATFS_LinkDriverEx+0x94>)
 800612e:	7251      	strb	r1, [r2, #9]
 8006130:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006132:	7dbb      	ldrb	r3, [r7, #22]
 8006134:	3330      	adds	r3, #48	@ 0x30
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	3301      	adds	r3, #1
 8006140:	223a      	movs	r2, #58	@ 0x3a
 8006142:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3302      	adds	r3, #2
 8006148:	222f      	movs	r2, #47	@ 0x2f
 800614a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	3303      	adds	r3, #3
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
}
 800615a:	4618      	mov	r0, r3
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000714 	.word	0x20000714

0800616c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006176:	2200      	movs	r2, #0
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff ffaa 	bl	80060d4 <FATFS_LinkDriverEx>
 8006180:	4603      	mov	r3, r0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	4603      	mov	r3, r0
 8006192:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800619c:	2b84      	cmp	r3, #132	@ 0x84
 800619e:	d005      	beq.n	80061ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	3303      	adds	r3, #3
 80061aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c0:	f3ef 8305 	mrs	r3, IPSR
 80061c4:	607b      	str	r3, [r7, #4]
  return(result);
 80061c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061e2:	f001 fb83 	bl	80078ec <vTaskStartScheduler>
  
  return osOK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	bd80      	pop	{r7, pc}

080061ec <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80061f0:	f001 ffd2 	bl	8008198 <xTaskGetSchedulerState>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <osKernelRunning+0x12>
    return 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <osKernelRunning+0x14>
  else
    return 1;
 80061fe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}

08006204 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006208:	f7ff ffd7 	bl	80061ba <inHandlerMode>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006212:	f001 fc97 	bl	8007b44 <xTaskGetTickCountFromISR>
 8006216:	4603      	mov	r3, r0
 8006218:	e002      	b.n	8006220 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800621a:	f001 fc83 	bl	8007b24 <xTaskGetTickCount>
 800621e:	4603      	mov	r3, r0
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	bd80      	pop	{r7, pc}

08006224 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006226:	b089      	sub	sp, #36	@ 0x24
 8006228:	af04      	add	r7, sp, #16
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d020      	beq.n	8006278 <osThreadCreate+0x54>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01c      	beq.n	8006278 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685c      	ldr	r4, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691e      	ldr	r6, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff ff9a 	bl	800618a <makeFreeRtosPriority>
 8006256:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006260:	9202      	str	r2, [sp, #8]
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	9100      	str	r1, [sp, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4632      	mov	r2, r6
 800626a:	4629      	mov	r1, r5
 800626c:	4620      	mov	r0, r4
 800626e:	f001 f985 	bl	800757c <xTaskCreateStatic>
 8006272:	4603      	mov	r3, r0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e01c      	b.n	80062b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685c      	ldr	r4, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006284:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff7c 	bl	800618a <makeFreeRtosPriority>
 8006292:	4602      	mov	r2, r0
 8006294:	f107 030c 	add.w	r3, r7, #12
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	9200      	str	r2, [sp, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	4632      	mov	r2, r6
 80062a0:	4629      	mov	r1, r5
 80062a2:	4620      	mov	r0, r4
 80062a4:	f001 f9d0 	bl	8007648 <xTaskCreate>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d001      	beq.n	80062b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062bc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	e03a      	b.n	800634a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d103      	bne.n	80062e8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80062e0:	f04f 33ff 	mov.w	r3, #4294967295
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e009      	b.n	80062fc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <osSemaphoreWait+0x40>
      ticks = 1;
 80062f8:	2301      	movs	r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80062fc:	f7ff ff5d 	bl	80061ba <inHandlerMode>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d017      	beq.n	8006336 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	461a      	mov	r2, r3
 800630c:	2100      	movs	r1, #0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 ff84 	bl	800721c <xQueueReceiveFromISR>
 8006314:	4603      	mov	r3, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d001      	beq.n	800631e <osSemaphoreWait+0x62>
      return osErrorOS;
 800631a:	23ff      	movs	r3, #255	@ 0xff
 800631c:	e015      	b.n	800634a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <osSemaphoreWait+0x8c>
 8006324:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <osSemaphoreWait+0x98>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	e008      	b.n	8006348 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fe57 	bl	8006fec <xQueueSemaphoreTake>
 800633e:	4603      	mov	r3, r0
 8006340:	2b01      	cmp	r3, #1
 8006342:	d001      	beq.n	8006348 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006344:	23ff      	movs	r3, #255	@ 0xff
 8006346:	e000      	b.n	800634a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006368:	f7ff ff27 	bl	80061ba <inHandlerMode>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fcb6 	bl	8006cea <xQueueGiveFromISR>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d001      	beq.n	8006388 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006384:	23ff      	movs	r3, #255	@ 0xff
 8006386:	e017      	b.n	80063b8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <osSemaphoreRelease+0x5e>
 800638e:	4b0c      	ldr	r3, [pc, #48]	@ (80063c0 <osSemaphoreRelease+0x68>)
 8006390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	e00a      	b.n	80063b6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80063a0:	2300      	movs	r3, #0
 80063a2:	2200      	movs	r2, #0
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 faf2 	bl	8006990 <xQueueGenericSend>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d001      	beq.n	80063b6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80063b2:	23ff      	movs	r3, #255	@ 0xff
 80063b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80063c4:	b590      	push	{r4, r7, lr}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <osMessageCreate+0x36>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2400      	movs	r4, #0
 80063f0:	9400      	str	r4, [sp, #0]
 80063f2:	f000 f9e3 	bl	80067bc <xQueueGenericCreateStatic>
 80063f6:	4603      	mov	r3, r0
 80063f8:	e008      	b.n	800640c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	4619      	mov	r1, r3
 8006406:	f000 fa60 	bl	80068ca <xQueueGenericCreate>
 800640a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <osMessagePut+0x1e>
    ticks = 1;
 800642e:	2301      	movs	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006432:	f7ff fec2 	bl	80061ba <inHandlerMode>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d018      	beq.n	800646e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800643c:	f107 0210 	add.w	r2, r7, #16
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	2300      	movs	r3, #0
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fbac 	bl	8006ba4 <xQueueGenericSendFromISR>
 800644c:	4603      	mov	r3, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d001      	beq.n	8006456 <osMessagePut+0x42>
      return osErrorOS;
 8006452:	23ff      	movs	r3, #255	@ 0xff
 8006454:	e018      	b.n	8006488 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d014      	beq.n	8006486 <osMessagePut+0x72>
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <osMessagePut+0x7c>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	e00b      	b.n	8006486 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800646e:	f107 0108 	add.w	r1, r7, #8
 8006472:	2300      	movs	r3, #0
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa8a 	bl	8006990 <xQueueGenericSend>
 800647c:	4603      	mov	r3, r0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <osMessagePut+0x72>
      return osErrorOS;
 8006482:	23ff      	movs	r3, #255	@ 0xff
 8006484:	e000      	b.n	8006488 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b08b      	sub	sp, #44	@ 0x2c
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80064ae:	2380      	movs	r3, #128	@ 0x80
 80064b0:	617b      	str	r3, [r7, #20]
    return event;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	461c      	mov	r4, r3
 80064b6:	f107 0314 	add.w	r3, r7, #20
 80064ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064c2:	e054      	b.n	800656e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d103      	bne.n	80064dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064da:	e009      	b.n	80064f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <osMessageGet+0x5c>
      ticks = 1;
 80064ec:	2301      	movs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80064f0:	f7ff fe63 	bl	80061ba <inHandlerMode>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01c      	beq.n	8006534 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80064fa:	f107 0220 	add.w	r2, r7, #32
 80064fe:	f107 0314 	add.w	r3, r7, #20
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	68b8      	ldr	r0, [r7, #8]
 8006508:	f000 fe88 	bl	800721c <xQueueReceiveFromISR>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d102      	bne.n	8006518 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006512:	2310      	movs	r3, #16
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e001      	b.n	800651c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01d      	beq.n	800655e <osMessageGet+0xca>
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <osMessageGet+0xe4>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	e014      	b.n	800655e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	3304      	adds	r3, #4
 800653a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800653c:	4619      	mov	r1, r3
 800653e:	68b8      	ldr	r0, [r7, #8]
 8006540:	f000 fc6c 	bl	8006e1c <xQueueReceive>
 8006544:	4603      	mov	r3, r0
 8006546:	2b01      	cmp	r3, #1
 8006548:	d102      	bne.n	8006550 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800654a:	2310      	movs	r3, #16
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e006      	b.n	800655e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <osMessageGet+0xc6>
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <osMessageGet+0xc8>
 800655a:	2340      	movs	r3, #64	@ 0x40
 800655c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	461c      	mov	r4, r3
 8006562:	f107 0314 	add.w	r3, r7, #20
 8006566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800656a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	372c      	adds	r7, #44	@ 0x2c
 8006572:	46bd      	mov	sp, r7
 8006574:	bd90      	pop	{r4, r7, pc}
 8006576:	bf00      	nop
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f103 0208 	add.w	r2, r3, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f04f 32ff 	mov.w	r2, #4294967295
 8006594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f103 0208 	add.w	r2, r3, #8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f103 0208 	add.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d103      	bne.n	800663e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e00c      	b.n	8006658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3308      	adds	r3, #8
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e002      	b.n	800664c <vListInsert+0x2e>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	429a      	cmp	r2, r3
 8006656:	d2f6      	bcs.n	8006646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6892      	ldr	r2, [r2, #8]
 80066a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6852      	ldr	r2, [r2, #4]
 80066b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d103      	bne.n	80066c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10d      	bne.n	8006714 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fc:	b672      	cpsid	i
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	b662      	cpsie	i
 800670c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006714:	f002 f892 	bl	800883c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006744:	3b01      	subs	r3, #1
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	441a      	add	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	22ff      	movs	r2, #255	@ 0xff
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	22ff      	movs	r2, #255	@ 0xff
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d114      	bne.n	8006794 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01a      	beq.n	80067a8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3310      	adds	r3, #16
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fb40 	bl	8007dfc <xTaskRemoveFromEventList>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006782:	4b0d      	ldr	r3, [pc, #52]	@ (80067b8 <xQueueGenericReset+0xd4>)
 8006784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	e009      	b.n	80067a8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3310      	adds	r3, #16
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff feef 	bl	800657c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3324      	adds	r3, #36	@ 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff feea 	bl	800657c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067a8:	f002 f87e 	bl	80088a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067ac:	2301      	movs	r3, #1
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08e      	sub	sp, #56	@ 0x38
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	b672      	cpsid	i
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	b662      	cpsie	i
 80067e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	b672      	cpsid	i
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	b662      	cpsie	i
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <xQueueGenericCreateStatic+0x5e>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <xQueueGenericCreateStatic+0x62>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <xQueueGenericCreateStatic+0x64>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10d      	bne.n	8006840 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	b672      	cpsid	i
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	b662      	cpsie	i
 8006838:	623b      	str	r3, [r7, #32]
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	e7fd      	b.n	800683c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <xQueueGenericCreateStatic+0x90>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <xQueueGenericCreateStatic+0x94>
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <xQueueGenericCreateStatic+0x96>
 8006850:	2300      	movs	r3, #0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	b672      	cpsid	i
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	b662      	cpsie	i
 800686a:	61fb      	str	r3, [r7, #28]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006872:	2348      	movs	r3, #72	@ 0x48
 8006874:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b48      	cmp	r3, #72	@ 0x48
 800687a:	d00d      	beq.n	8006898 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	b672      	cpsid	i
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	b662      	cpsie	i
 8006890:	61bb      	str	r3, [r7, #24]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006898:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80068b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f848 	bl	8006950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3730      	adds	r7, #48	@ 0x30
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b08a      	sub	sp, #40	@ 0x28
 80068ce:	af02      	add	r7, sp, #8
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <xQueueGenericCreate+0x30>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	b672      	cpsid	i
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	b662      	cpsie	i
 80068f2:	613b      	str	r3, [r7, #16]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	e004      	b.n	8006910 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	3348      	adds	r3, #72	@ 0x48
 8006914:	4618      	mov	r0, r3
 8006916:	f002 f8bf 	bl	8008a98 <pvPortMalloc>
 800691a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d011      	beq.n	8006946 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3348      	adds	r3, #72	@ 0x48
 800692a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006934:	79fa      	ldrb	r2, [r7, #7]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4613      	mov	r3, r2
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f805 	bl	8006950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006946:	69bb      	ldr	r3, [r7, #24]
	}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e002      	b.n	8006972 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800697e:	2101      	movs	r1, #1
 8006980:	69b8      	ldr	r0, [r7, #24]
 8006982:	f7ff feaf 	bl	80066e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	@ 0x38
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800699e:	2300      	movs	r3, #0
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10d      	bne.n	80069c8 <xQueueGenericSend+0x38>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <xQueueGenericSend+0x46>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <xQueueGenericSend+0x4a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <xQueueGenericSend+0x4c>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10d      	bne.n	80069fc <xQueueGenericSend+0x6c>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d103      	bne.n	8006a0a <xQueueGenericSend+0x7a>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <xQueueGenericSend+0x7e>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueGenericSend+0x80>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10d      	bne.n	8006a30 <xQueueGenericSend+0xa0>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	b672      	cpsid	i
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	b662      	cpsie	i
 8006a28:	623b      	str	r3, [r7, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	e7fd      	b.n	8006a2c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a30:	f001 fbb2 	bl	8008198 <xTaskGetSchedulerState>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <xQueueGenericSend+0xb0>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xQueueGenericSend+0xb4>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xQueueGenericSend+0xb6>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10d      	bne.n	8006a66 <xQueueGenericSend+0xd6>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	b672      	cpsid	i
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	b662      	cpsie	i
 8006a5e:	61fb      	str	r3, [r7, #28]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a66:	f001 fee9 	bl	800883c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <xQueueGenericSend+0xec>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d129      	bne.n	8006ad0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a82:	f000 fc6b 	bl	800735c <prvCopyDataToQueue>
 8006a86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	3324      	adds	r3, #36	@ 0x24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f9b1 	bl	8007dfc <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d013      	beq.n	8006ac8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba0 <xQueueGenericSend+0x210>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e00a      	b.n	8006ac8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <xQueueGenericSend+0x210>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ac8:	f001 feee 	bl	80088a8 <vPortExitCritical>
				return pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e063      	b.n	8006b98 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ad6:	f001 fee7 	bl	80088a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e05c      	b.n	8006b98 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f9ed 	bl	8007ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006af2:	f001 fed9 	bl	80088a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af6:	f000 ff67 	bl	80079c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006afa:	f001 fe9f 	bl	800883c <vPortEnterCritical>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <xQueueGenericSend+0x184>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x19a>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b2a:	f001 febd 	bl	80088a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b2e:	1d3a      	adds	r2, r7, #4
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f9dc 	bl	8007ef4 <xTaskCheckForTimeOut>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d124      	bne.n	8006b8c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b44:	f000 fd02 	bl	800754c <prvIsQueueFull>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	3310      	adds	r3, #16
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 f928 	bl	8007dac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b5e:	f000 fc8d 	bl	800747c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b62:	f000 ff3f 	bl	80079e4 <xTaskResumeAll>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af7c 	bne.w	8006a66 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba0 <xQueueGenericSend+0x210>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	e772      	b.n	8006a66 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b82:	f000 fc7b 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b86:	f000 ff2d 	bl	80079e4 <xTaskResumeAll>
 8006b8a:	e76c      	b.n	8006a66 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b8e:	f000 fc75 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b92:	f000 ff27 	bl	80079e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3738      	adds	r7, #56	@ 0x38
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08e      	sub	sp, #56	@ 0x38
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10d      	bne.n	8006bd8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	b672      	cpsid	i
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	b662      	cpsie	i
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <xQueueGenericSendFromISR+0x42>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <xQueueGenericSendFromISR+0x46>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <xQueueGenericSendFromISR+0x48>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10d      	bne.n	8006c0c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	b672      	cpsid	i
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	b662      	cpsie	i
 8006c04:	623b      	str	r3, [r7, #32]
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	e7fd      	b.n	8006c08 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d103      	bne.n	8006c1a <xQueueGenericSendFromISR+0x76>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <xQueueGenericSendFromISR+0x7a>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <xQueueGenericSendFromISR+0x7c>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10d      	bne.n	8006c40 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	b672      	cpsid	i
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	b662      	cpsie	i
 8006c38:	61fb      	str	r3, [r7, #28]
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c40:	f001 fee4 	bl	8008a0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c44:	f3ef 8211 	mrs	r2, BASEPRI
 8006c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4c:	b672      	cpsid	i
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	b662      	cpsie	i
 8006c5c:	61ba      	str	r2, [r7, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d302      	bcc.n	8006c76 <xQueueGenericSendFromISR+0xd2>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d12c      	bne.n	8006cd0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c86:	f000 fb69 	bl	800735c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c92:	d112      	bne.n	8006cba <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d016      	beq.n	8006cca <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	3324      	adds	r3, #36	@ 0x24
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f8ab 	bl	8007dfc <xTaskRemoveFromEventList>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00e      	beq.n	8006cca <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e007      	b.n	8006cca <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	b25a      	sxtb	r2, r3
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006cce:	e001      	b.n	8006cd4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3738      	adds	r7, #56	@ 0x38
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b08e      	sub	sp, #56	@ 0x38
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <xQueueGiveFromISR+0x30>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	b672      	cpsid	i
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	b662      	cpsie	i
 8006d12:	623b      	str	r3, [r7, #32]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <xQueueGiveFromISR+0x54>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d26:	b672      	cpsid	i
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	b662      	cpsie	i
 8006d36:	61fb      	str	r3, [r7, #28]
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <xQueueGiveFromISR+0x64>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <xQueueGiveFromISR+0x68>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueGiveFromISR+0x6a>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10d      	bne.n	8006d74 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	b672      	cpsid	i
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	b662      	cpsie	i
 8006d6c:	61bb      	str	r3, [r7, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d74:	f001 fe4a 	bl	8008a0c <vPortValidateInterruptPriority>
	__asm volatile
 8006d78:	f3ef 8211 	mrs	r2, BASEPRI
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	b672      	cpsid	i
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	b662      	cpsie	i
 8006d90:	617a      	str	r2, [r7, #20]
 8006d92:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d22b      	bcs.n	8006e00 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d112      	bne.n	8006dea <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d016      	beq.n	8006dfa <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	3324      	adds	r3, #36	@ 0x24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 f813 	bl	8007dfc <xTaskRemoveFromEventList>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e007      	b.n	8006dfa <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dee:	3301      	adds	r3, #1
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	b25a      	sxtb	r2, r3
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfe:	e001      	b.n	8006e04 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3738      	adds	r7, #56	@ 0x38
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08c      	sub	sp, #48	@ 0x30
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10d      	bne.n	8006e52 <xQueueReceive+0x36>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	b672      	cpsid	i
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	b662      	cpsie	i
 8006e4a:	623b      	str	r3, [r7, #32]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <xQueueReceive+0x44>
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <xQueueReceive+0x48>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <xQueueReceive+0x4a>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <xQueueReceive+0x6a>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	b672      	cpsid	i
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	b662      	cpsie	i
 8006e7e:	61fb      	str	r3, [r7, #28]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e86:	f001 f987 	bl	8008198 <xTaskGetSchedulerState>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <xQueueReceive+0x7a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <xQueueReceive+0x7e>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <xQueueReceive+0x80>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10d      	bne.n	8006ebc <xQueueReceive+0xa0>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	b672      	cpsid	i
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	61bb      	str	r3, [r7, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ebc:	f001 fcbe 	bl	800883c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01f      	beq.n	8006f0c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed0:	f000 faae 	bl	8007430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	1e5a      	subs	r2, r3, #1
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00f      	beq.n	8006f04 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	3310      	adds	r3, #16
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 ff87 	bl	8007dfc <xTaskRemoveFromEventList>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe8 <xQueueReceive+0x1cc>)
 8006ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f04:	f001 fcd0 	bl	80088a8 <vPortExitCritical>
				return pdPASS;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e069      	b.n	8006fe0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f12:	f001 fcc9 	bl	80088a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e062      	b.n	8006fe0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f20:	f107 0310 	add.w	r3, r7, #16
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 ffcf 	bl	8007ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f2e:	f001 fcbb 	bl	80088a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f32:	f000 fd49 	bl	80079c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f36:	f001 fc81 	bl	800883c <vPortEnterCritical>
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f40:	b25b      	sxtb	r3, r3
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d103      	bne.n	8006f50 <xQueueReceive+0x134>
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f56:	b25b      	sxtb	r3, r3
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d103      	bne.n	8006f66 <xQueueReceive+0x14a>
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f66:	f001 fc9f 	bl	80088a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f6a:	1d3a      	adds	r2, r7, #4
 8006f6c:	f107 0310 	add.w	r3, r7, #16
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 ffbe 	bl	8007ef4 <xTaskCheckForTimeOut>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d123      	bne.n	8006fc6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f80:	f000 face 	bl	8007520 <prvIsQueueEmpty>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d017      	beq.n	8006fba <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8c:	3324      	adds	r3, #36	@ 0x24
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ff0a 	bl	8007dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f9a:	f000 fa6f 	bl	800747c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f9e:	f000 fd21 	bl	80079e4 <xTaskResumeAll>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d189      	bne.n	8006ebc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <xQueueReceive+0x1cc>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	e780      	b.n	8006ebc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fbc:	f000 fa5e 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc0:	f000 fd10 	bl	80079e4 <xTaskResumeAll>
 8006fc4:	e77a      	b.n	8006ebc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fc8:	f000 fa58 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fcc:	f000 fd0a 	bl	80079e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd2:	f000 faa5 	bl	8007520 <prvIsQueueEmpty>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f43f af6f 	beq.w	8006ebc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3730      	adds	r7, #48	@ 0x30
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08e      	sub	sp, #56	@ 0x38
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10d      	bne.n	8007024 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700c:	b672      	cpsid	i
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	b662      	cpsie	i
 800701c:	623b      	str	r3, [r7, #32]
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	e7fd      	b.n	8007020 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00d      	beq.n	8007048 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	61fb      	str	r3, [r7, #28]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007048:	f001 f8a6 	bl	8008198 <xTaskGetSchedulerState>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <xQueueSemaphoreTake+0x6c>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <xQueueSemaphoreTake+0x70>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <xQueueSemaphoreTake+0x72>
 800705c:	2300      	movs	r3, #0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10d      	bne.n	800707e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	b672      	cpsid	i
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	b662      	cpsie	i
 8007076:	61bb      	str	r3, [r7, #24]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800707e:	f001 fbdd 	bl	800883c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d024      	beq.n	80070d8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	1e5a      	subs	r2, r3, #1
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800709e:	f001 fa45 	bl	800852c <pvTaskIncrementMutexHeldCount>
 80070a2:	4602      	mov	r2, r0
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	3310      	adds	r3, #16
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fea1 	bl	8007dfc <xTaskRemoveFromEventList>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070c0:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <xQueueSemaphoreTake+0x22c>)
 80070c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070d0:	f001 fbea 	bl	80088a8 <vPortExitCritical>
				return pdPASS;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e09a      	b.n	800720e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d114      	bne.n	8007108 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	617b      	str	r3, [r7, #20]
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007100:	f001 fbd2 	bl	80088a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007104:	2300      	movs	r3, #0
 8007106:	e082      	b.n	800720e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800710e:	f107 030c 	add.w	r3, r7, #12
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fed8 	bl	8007ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800711c:	f001 fbc4 	bl	80088a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007120:	f000 fc52 	bl	80079c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007124:	f001 fb8a 	bl	800883c <vPortEnterCritical>
 8007128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800712e:	b25b      	sxtb	r3, r3
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d103      	bne.n	800713e <xQueueSemaphoreTake+0x152>
 8007136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007144:	b25b      	sxtb	r3, r3
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d103      	bne.n	8007154 <xQueueSemaphoreTake+0x168>
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007154:	f001 fba8 	bl	80088a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007158:	463a      	mov	r2, r7
 800715a:	f107 030c 	add.w	r3, r7, #12
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fec7 	bl	8007ef4 <xTaskCheckForTimeOut>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d132      	bne.n	80071d2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800716c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800716e:	f000 f9d7 	bl	8007520 <prvIsQueueEmpty>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d026      	beq.n	80071c6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d109      	bne.n	8007194 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007180:	f001 fb5c 	bl	800883c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f823 	bl	80081d4 <xTaskPriorityInherit>
 800718e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007190:	f001 fb8a 	bl	80088a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	3324      	adds	r3, #36	@ 0x24
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fe05 	bl	8007dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071a4:	f000 f96a 	bl	800747c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071a8:	f000 fc1c 	bl	80079e4 <xTaskResumeAll>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f47f af65 	bne.w	800707e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80071b4:	4b18      	ldr	r3, [pc, #96]	@ (8007218 <xQueueSemaphoreTake+0x22c>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	e75b      	b.n	800707e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80071c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071c8:	f000 f958 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071cc:	f000 fc0a 	bl	80079e4 <xTaskResumeAll>
 80071d0:	e755      	b.n	800707e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80071d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071d4:	f000 f952 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071d8:	f000 fc04 	bl	80079e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071de:	f000 f99f 	bl	8007520 <prvIsQueueEmpty>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f43f af4a 	beq.w	800707e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80071f0:	f001 fb24 	bl	800883c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071f6:	f000 f899 	bl	800732c <prvGetDisinheritPriorityAfterTimeout>
 80071fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f8f2 	bl	80083ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007208:	f001 fb4e 	bl	80088a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800720c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800720e:	4618      	mov	r0, r3
 8007210:	3738      	adds	r7, #56	@ 0x38
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08e      	sub	sp, #56	@ 0x38
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10d      	bne.n	800724e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	b672      	cpsid	i
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	b662      	cpsie	i
 8007246:	623b      	str	r3, [r7, #32]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <xQueueReceiveFromISR+0x40>
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <xQueueReceiveFromISR+0x44>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <xQueueReceiveFromISR+0x46>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10d      	bne.n	8007282 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	b672      	cpsid	i
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	b662      	cpsie	i
 800727a:	61fb      	str	r3, [r7, #28]
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	e7fd      	b.n	800727e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007282:	f001 fbc3 	bl	8008a0c <vPortValidateInterruptPriority>
	__asm volatile
 8007286:	f3ef 8211 	mrs	r2, BASEPRI
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	b672      	cpsid	i
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	b662      	cpsie	i
 800729e:	61ba      	str	r2, [r7, #24]
 80072a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80072a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d02f      	beq.n	8007312 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072c0:	f000 f8b6 	bl	8007430 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	1e5a      	subs	r2, r3, #1
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80072cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d112      	bne.n	80072fc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d016      	beq.n	800730c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	3310      	adds	r3, #16
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fd8a 	bl	8007dfc <xTaskRemoveFromEventList>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00e      	beq.n	800730c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e007      	b.n	800730c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007300:	3301      	adds	r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	b25a      	sxtb	r2, r3
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800730c:	2301      	movs	r3, #1
 800730e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007310:	e001      	b.n	8007316 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007312:	2300      	movs	r3, #0
 8007314:	637b      	str	r3, [r7, #52]	@ 0x34
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	613b      	str	r3, [r7, #16]
	__asm volatile
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f383 8811 	msr	BASEPRI, r3
}
 8007320:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007324:	4618      	mov	r0, r3
 8007326:	3738      	adds	r7, #56	@ 0x38
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d006      	beq.n	800734a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f1c3 0307 	rsb	r3, r3, #7
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e001      	b.n	800734e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800734e:	68fb      	ldr	r3, [r7, #12]
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10d      	bne.n	8007396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d14d      	bne.n	800741e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 ffa4 	bl	80082d4 <xTaskPriorityDisinherit>
 800738c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
 8007394:	e043      	b.n	800741e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d119      	bne.n	80073d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6858      	ldr	r0, [r3, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a4:	461a      	mov	r2, r3
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	f002 f89b 	bl	80094e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d32b      	bcc.n	800741e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	e026      	b.n	800741e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68d8      	ldr	r0, [r3, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d8:	461a      	mov	r2, r3
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	f002 f881 	bl	80094e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	425b      	negs	r3, r3
 80073ea:	441a      	add	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d207      	bcs.n	800740c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	425b      	negs	r3, r3
 8007406:	441a      	add	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d105      	bne.n	800741e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	3b01      	subs	r3, #1
 800741c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007426:	697b      	ldr	r3, [r7, #20]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d018      	beq.n	8007474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744a:	441a      	add	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	d303      	bcc.n	8007464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68d9      	ldr	r1, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	461a      	mov	r2, r3
 800746e:	6838      	ldr	r0, [r7, #0]
 8007470:	f002 f837 	bl	80094e2 <memcpy>
	}
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007484:	f001 f9da 	bl	800883c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800748e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007490:	e011      	b.n	80074b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3324      	adds	r3, #36	@ 0x24
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fcac 	bl	8007dfc <xTaskRemoveFromEventList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074aa:	f000 fd8b 	bl	8007fc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dce9      	bgt.n	8007492 <prvUnlockQueue+0x16>
 80074be:	e000      	b.n	80074c2 <prvUnlockQueue+0x46>
					break;
 80074c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	22ff      	movs	r2, #255	@ 0xff
 80074c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074ca:	f001 f9ed 	bl	80088a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074ce:	f001 f9b5 	bl	800883c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074da:	e011      	b.n	8007500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d012      	beq.n	800750a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3310      	adds	r3, #16
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fc87 	bl	8007dfc <xTaskRemoveFromEventList>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074f4:	f000 fd66 	bl	8007fc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	dce9      	bgt.n	80074dc <prvUnlockQueue+0x60>
 8007508:	e000      	b.n	800750c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800750a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	22ff      	movs	r2, #255	@ 0xff
 8007510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007514:	f001 f9c8 	bl	80088a8 <vPortExitCritical>
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007528:	f001 f988 	bl	800883c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e001      	b.n	800753e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800753e:	f001 f9b3 	bl	80088a8 <vPortExitCritical>

	return xReturn;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007554:	f001 f972 	bl	800883c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007560:	429a      	cmp	r2, r3
 8007562:	d102      	bne.n	800756a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e001      	b.n	800756e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800756e:	f001 f99b 	bl	80088a8 <vPortExitCritical>

	return xReturn;
 8007572:	68fb      	ldr	r3, [r7, #12]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	@ 0x38
 8007580:	af04      	add	r7, sp, #16
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800758a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10d      	bne.n	80075ac <xTaskCreateStatic+0x30>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	b672      	cpsid	i
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	b662      	cpsie	i
 80075a4:	623b      	str	r3, [r7, #32]
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <xTaskCreateStatic+0x52>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	b672      	cpsid	i
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	b662      	cpsie	i
 80075c6:	61fb      	str	r3, [r7, #28]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075ce:	23a0      	movs	r3, #160	@ 0xa0
 80075d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80075d6:	d00d      	beq.n	80075f4 <xTaskCreateStatic+0x78>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	61bb      	str	r3, [r7, #24]
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01e      	beq.n	800763a <xTaskCreateStatic+0xbe>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01b      	beq.n	800763a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800760a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	2202      	movs	r2, #2
 8007610:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007614:	2300      	movs	r3, #0
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	9302      	str	r3, [sp, #8]
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f851 	bl	80076d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007634:	f000 f8f0 	bl	8007818 <prvAddNewTaskToReadyList>
 8007638:	e001      	b.n	800763e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
	}
 8007640:	4618      	mov	r0, r3
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08c      	sub	sp, #48	@ 0x30
 800764c:	af04      	add	r7, sp, #16
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4618      	mov	r0, r3
 800765e:	f001 fa1b 	bl	8008a98 <pvPortMalloc>
 8007662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800766a:	20a0      	movs	r0, #160	@ 0xa0
 800766c:	f001 fa14 	bl	8008a98 <pvPortMalloc>
 8007670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	631a      	str	r2, [r3, #48]	@ 0x30
 800767e:	e005      	b.n	800768c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007680:	6978      	ldr	r0, [r7, #20]
 8007682:	f001 fad7 	bl	8008c34 <vPortFree>
 8007686:	e001      	b.n	800768c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d017      	beq.n	80076c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800769a:	88fa      	ldrh	r2, [r7, #6]
 800769c:	2300      	movs	r3, #0
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f80f 	bl	80076d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076b6:	69f8      	ldr	r0, [r7, #28]
 80076b8:	f000 f8ae 	bl	8007818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	e002      	b.n	80076c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076c2:	f04f 33ff 	mov.w	r3, #4294967295
 80076c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076c8:	69bb      	ldr	r3, [r7, #24]
	}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80076ec:	440b      	add	r3, r1
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f023 0307 	bic.w	r3, r3, #7
 80076fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00d      	beq.n	8007722 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
 800771a:	617b      	str	r3, [r7, #20]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01f      	beq.n	8007768 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e012      	b.n	8007754 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	7819      	ldrb	r1, [r3, #0]
 8007736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	3334      	adds	r3, #52	@ 0x34
 800773e:	460a      	mov	r2, r1
 8007740:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d006      	beq.n	800775c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	3301      	adds	r3, #1
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d9e9      	bls.n	800772e <prvInitialiseNewTask+0x5a>
 800775a:	e000      	b.n	800775e <prvInitialiseNewTask+0x8a>
			{
				break;
 800775c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007766:	e003      	b.n	8007770 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	2b06      	cmp	r3, #6
 8007774:	d901      	bls.n	800777a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007776:	2306      	movs	r3, #6
 8007778:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800777e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007784:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	2200      	movs	r2, #0
 800778a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800778c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778e:	3304      	adds	r3, #4
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe ff13 	bl	80065bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	3318      	adds	r3, #24
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe ff0e 	bl	80065bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	f1c3 0207 	rsb	r2, r3, #7
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	334c      	adds	r3, #76	@ 0x4c
 80077ca:	224c      	movs	r2, #76	@ 0x4c
 80077cc:	2100      	movs	r1, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fda6 	bl	8009320 <memset>
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	4a0d      	ldr	r2, [pc, #52]	@ (800780c <prvInitialiseNewTask+0x138>)
 80077d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007810 <prvInitialiseNewTask+0x13c>)
 80077de:	655a      	str	r2, [r3, #84]	@ 0x54
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007814 <prvInitialiseNewTask+0x140>)
 80077e4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	69b8      	ldr	r0, [r7, #24]
 80077ec:	f000 ff18 	bl	8008620 <pxPortInitialiseStack>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007802:	bf00      	nop
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20004474 	.word	0x20004474
 8007810:	200044dc 	.word	0x200044dc
 8007814:	20004544 	.word	0x20004544

08007818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007820:	f001 f80c 	bl	800883c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007824:	4b2a      	ldr	r3, [pc, #168]	@ (80078d0 <prvAddNewTaskToReadyList+0xb8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	4a29      	ldr	r2, [pc, #164]	@ (80078d0 <prvAddNewTaskToReadyList+0xb8>)
 800782c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800782e:	4b29      	ldr	r3, [pc, #164]	@ (80078d4 <prvAddNewTaskToReadyList+0xbc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007836:	4a27      	ldr	r2, [pc, #156]	@ (80078d4 <prvAddNewTaskToReadyList+0xbc>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800783c:	4b24      	ldr	r3, [pc, #144]	@ (80078d0 <prvAddNewTaskToReadyList+0xb8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d110      	bne.n	8007866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007844:	f000 fbe2 	bl	800800c <prvInitialiseTaskLists>
 8007848:	e00d      	b.n	8007866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800784a:	4b23      	ldr	r3, [pc, #140]	@ (80078d8 <prvAddNewTaskToReadyList+0xc0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007852:	4b20      	ldr	r3, [pc, #128]	@ (80078d4 <prvAddNewTaskToReadyList+0xbc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	429a      	cmp	r2, r3
 800785e:	d802      	bhi.n	8007866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007860:	4a1c      	ldr	r2, [pc, #112]	@ (80078d4 <prvAddNewTaskToReadyList+0xbc>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007866:	4b1d      	ldr	r3, [pc, #116]	@ (80078dc <prvAddNewTaskToReadyList+0xc4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3301      	adds	r3, #1
 800786c:	4a1b      	ldr	r2, [pc, #108]	@ (80078dc <prvAddNewTaskToReadyList+0xc4>)
 800786e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	2201      	movs	r2, #1
 8007876:	409a      	lsls	r2, r3
 8007878:	4b19      	ldr	r3, [pc, #100]	@ (80078e0 <prvAddNewTaskToReadyList+0xc8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4313      	orrs	r3, r2
 800787e:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <prvAddNewTaskToReadyList+0xc8>)
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <prvAddNewTaskToReadyList+0xcc>)
 8007890:	441a      	add	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fe fe9c 	bl	80065d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800789e:	f001 f803 	bl	80088a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078a2:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <prvAddNewTaskToReadyList+0xc0>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00e      	beq.n	80078c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078aa:	4b0a      	ldr	r3, [pc, #40]	@ (80078d4 <prvAddNewTaskToReadyList+0xbc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d207      	bcs.n	80078c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078b8:	4b0b      	ldr	r3, [pc, #44]	@ (80078e8 <prvAddNewTaskToReadyList+0xd0>)
 80078ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000820 	.word	0x20000820
 80078d4:	20000720 	.word	0x20000720
 80078d8:	2000082c 	.word	0x2000082c
 80078dc:	2000083c 	.word	0x2000083c
 80078e0:	20000828 	.word	0x20000828
 80078e4:	20000724 	.word	0x20000724
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	@ 0x28
 80078f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078fa:	463a      	mov	r2, r7
 80078fc:	1d39      	adds	r1, r7, #4
 80078fe:	f107 0308 	add.w	r3, r7, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f7f8 fe4c 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	9202      	str	r2, [sp, #8]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	2300      	movs	r3, #0
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	2300      	movs	r3, #0
 8007918:	460a      	mov	r2, r1
 800791a:	4923      	ldr	r1, [pc, #140]	@ (80079a8 <vTaskStartScheduler+0xbc>)
 800791c:	4823      	ldr	r0, [pc, #140]	@ (80079ac <vTaskStartScheduler+0xc0>)
 800791e:	f7ff fe2d 	bl	800757c <xTaskCreateStatic>
 8007922:	4603      	mov	r3, r0
 8007924:	4a22      	ldr	r2, [pc, #136]	@ (80079b0 <vTaskStartScheduler+0xc4>)
 8007926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007928:	4b21      	ldr	r3, [pc, #132]	@ (80079b0 <vTaskStartScheduler+0xc4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e001      	b.n	800793a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d11d      	bne.n	800797c <vTaskStartScheduler+0x90>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	b672      	cpsid	i
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	b662      	cpsie	i
 8007954:	613b      	str	r3, [r7, #16]
}
 8007956:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007958:	4b16      	ldr	r3, [pc, #88]	@ (80079b4 <vTaskStartScheduler+0xc8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	334c      	adds	r3, #76	@ 0x4c
 800795e:	4a16      	ldr	r2, [pc, #88]	@ (80079b8 <vTaskStartScheduler+0xcc>)
 8007960:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007962:	4b16      	ldr	r3, [pc, #88]	@ (80079bc <vTaskStartScheduler+0xd0>)
 8007964:	f04f 32ff 	mov.w	r2, #4294967295
 8007968:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800796a:	4b15      	ldr	r3, [pc, #84]	@ (80079c0 <vTaskStartScheduler+0xd4>)
 800796c:	2201      	movs	r2, #1
 800796e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007970:	4b14      	ldr	r3, [pc, #80]	@ (80079c4 <vTaskStartScheduler+0xd8>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007976:	f000 fee3 	bl	8008740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800797a:	e011      	b.n	80079a0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d10d      	bne.n	80079a0 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007988:	b672      	cpsid	i
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	b662      	cpsie	i
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <vTaskStartScheduler+0xb0>
}
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	08009e14 	.word	0x08009e14
 80079ac:	08007fdd 	.word	0x08007fdd
 80079b0:	20000844 	.word	0x20000844
 80079b4:	20000720 	.word	0x20000720
 80079b8:	2000001c 	.word	0x2000001c
 80079bc:	20000840 	.word	0x20000840
 80079c0:	2000082c 	.word	0x2000082c
 80079c4:	20000824 	.word	0x20000824

080079c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079cc:	4b04      	ldr	r3, [pc, #16]	@ (80079e0 <vTaskSuspendAll+0x18>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3301      	adds	r3, #1
 80079d2:	4a03      	ldr	r2, [pc, #12]	@ (80079e0 <vTaskSuspendAll+0x18>)
 80079d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80079d6:	bf00      	nop
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	20000848 	.word	0x20000848

080079e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079f2:	4b43      	ldr	r3, [pc, #268]	@ (8007b00 <xTaskResumeAll+0x11c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <xTaskResumeAll+0x32>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a16:	f000 ff11 	bl	800883c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a1a:	4b39      	ldr	r3, [pc, #228]	@ (8007b00 <xTaskResumeAll+0x11c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	4a37      	ldr	r2, [pc, #220]	@ (8007b00 <xTaskResumeAll+0x11c>)
 8007a22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a24:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <xTaskResumeAll+0x11c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d161      	bne.n	8007af0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a2c:	4b35      	ldr	r3, [pc, #212]	@ (8007b04 <xTaskResumeAll+0x120>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d05d      	beq.n	8007af0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a34:	e02e      	b.n	8007a94 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a36:	4b34      	ldr	r3, [pc, #208]	@ (8007b08 <xTaskResumeAll+0x124>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fe24 	bl	8006690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fe1f 	bl	8006690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	2201      	movs	r2, #1
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b0c <xTaskResumeAll+0x128>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	4a2a      	ldr	r2, [pc, #168]	@ (8007b0c <xTaskResumeAll+0x128>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a27      	ldr	r2, [pc, #156]	@ (8007b10 <xTaskResumeAll+0x12c>)
 8007a72:	441a      	add	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fe fdab 	bl	80065d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a84:	4b23      	ldr	r3, [pc, #140]	@ (8007b14 <xTaskResumeAll+0x130>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007a8e:	4b22      	ldr	r3, [pc, #136]	@ (8007b18 <xTaskResumeAll+0x134>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a94:	4b1c      	ldr	r3, [pc, #112]	@ (8007b08 <xTaskResumeAll+0x124>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1cc      	bne.n	8007a36 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aa2:	f000 fb59 	bl	8008158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b1c <xTaskResumeAll+0x138>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d010      	beq.n	8007ad4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ab2:	f000 f859 	bl	8007b68 <xTaskIncrementTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007abc:	4b16      	ldr	r3, [pc, #88]	@ (8007b18 <xTaskResumeAll+0x134>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f1      	bne.n	8007ab2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007ace:	4b13      	ldr	r3, [pc, #76]	@ (8007b1c <xTaskResumeAll+0x138>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ad4:	4b10      	ldr	r3, [pc, #64]	@ (8007b18 <xTaskResumeAll+0x134>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d009      	beq.n	8007af0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007adc:	2301      	movs	r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b20 <xTaskResumeAll+0x13c>)
 8007ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007af0:	f000 feda 	bl	80088a8 <vPortExitCritical>

	return xAlreadyYielded;
 8007af4:	68bb      	ldr	r3, [r7, #8]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000848 	.word	0x20000848
 8007b04:	20000820 	.word	0x20000820
 8007b08:	200007e0 	.word	0x200007e0
 8007b0c:	20000828 	.word	0x20000828
 8007b10:	20000724 	.word	0x20000724
 8007b14:	20000720 	.word	0x20000720
 8007b18:	20000834 	.word	0x20000834
 8007b1c:	20000830 	.word	0x20000830
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b2a:	4b05      	ldr	r3, [pc, #20]	@ (8007b40 <xTaskGetTickCount+0x1c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b30:	687b      	ldr	r3, [r7, #4]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000824 	.word	0x20000824

08007b44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b4a:	f000 ff5f 	bl	8008a0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007b52:	4b04      	ldr	r3, [pc, #16]	@ (8007b64 <xTaskGetTickCountFromISR+0x20>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b58:	683b      	ldr	r3, [r7, #0]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000824 	.word	0x20000824

08007b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b72:	4b50      	ldr	r3, [pc, #320]	@ (8007cb4 <xTaskIncrementTick+0x14c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 808b 	bne.w	8007c92 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8007cb8 <xTaskIncrementTick+0x150>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b84:	4a4c      	ldr	r2, [pc, #304]	@ (8007cb8 <xTaskIncrementTick+0x150>)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d123      	bne.n	8007bd8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b90:	4b4a      	ldr	r3, [pc, #296]	@ (8007cbc <xTaskIncrementTick+0x154>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00d      	beq.n	8007bb6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	b672      	cpsid	i
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	b662      	cpsie	i
 8007bae:	603b      	str	r3, [r7, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <xTaskIncrementTick+0x4a>
 8007bb6:	4b41      	ldr	r3, [pc, #260]	@ (8007cbc <xTaskIncrementTick+0x154>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	4b40      	ldr	r3, [pc, #256]	@ (8007cc0 <xTaskIncrementTick+0x158>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8007cbc <xTaskIncrementTick+0x154>)
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8007cc0 <xTaskIncrementTick+0x158>)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc4 <xTaskIncrementTick+0x15c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8007cc4 <xTaskIncrementTick+0x15c>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	f000 fac0 	bl	8008158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc8 <xTaskIncrementTick+0x160>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d348      	bcc.n	8007c74 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be2:	4b36      	ldr	r3, [pc, #216]	@ (8007cbc <xTaskIncrementTick+0x154>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bec:	4b36      	ldr	r3, [pc, #216]	@ (8007cc8 <xTaskIncrementTick+0x160>)
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	601a      	str	r2, [r3, #0]
					break;
 8007bf4:	e03e      	b.n	8007c74 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf6:	4b31      	ldr	r3, [pc, #196]	@ (8007cbc <xTaskIncrementTick+0x154>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d203      	bcs.n	8007c16 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8007cc8 <xTaskIncrementTick+0x160>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c14:	e02e      	b.n	8007c74 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fd38 	bl	8006690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe fd2f 	bl	8006690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	2201      	movs	r2, #1
 8007c38:	409a      	lsls	r2, r3
 8007c3a:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <xTaskIncrementTick+0x164>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	4a22      	ldr	r2, [pc, #136]	@ (8007ccc <xTaskIncrementTick+0x164>)
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd0 <xTaskIncrementTick+0x168>)
 8007c52:	441a      	add	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe fcbb 	bl	80065d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c64:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd4 <xTaskIncrementTick+0x16c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d3b9      	bcc.n	8007be2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c72:	e7b6      	b.n	8007be2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c74:	4b17      	ldr	r3, [pc, #92]	@ (8007cd4 <xTaskIncrementTick+0x16c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7a:	4915      	ldr	r1, [pc, #84]	@ (8007cd0 <xTaskIncrementTick+0x168>)
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d907      	bls.n	8007c9c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e004      	b.n	8007c9c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c92:	4b11      	ldr	r3, [pc, #68]	@ (8007cd8 <xTaskIncrementTick+0x170>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	4a0f      	ldr	r2, [pc, #60]	@ (8007cd8 <xTaskIncrementTick+0x170>)
 8007c9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <xTaskIncrementTick+0x174>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ca8:	697b      	ldr	r3, [r7, #20]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000848 	.word	0x20000848
 8007cb8:	20000824 	.word	0x20000824
 8007cbc:	200007d8 	.word	0x200007d8
 8007cc0:	200007dc 	.word	0x200007dc
 8007cc4:	20000838 	.word	0x20000838
 8007cc8:	20000840 	.word	0x20000840
 8007ccc:	20000828 	.word	0x20000828
 8007cd0:	20000724 	.word	0x20000724
 8007cd4:	20000720 	.word	0x20000720
 8007cd8:	20000830 	.word	0x20000830
 8007cdc:	20000834 	.word	0x20000834

08007ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8007d94 <vTaskSwitchContext+0xb4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cee:	4b2a      	ldr	r3, [pc, #168]	@ (8007d98 <vTaskSwitchContext+0xb8>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cf4:	e047      	b.n	8007d86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007cf6:	4b28      	ldr	r3, [pc, #160]	@ (8007d98 <vTaskSwitchContext+0xb8>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfc:	4b27      	ldr	r3, [pc, #156]	@ (8007d9c <vTaskSwitchContext+0xbc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	fab3 f383 	clz	r3, r3
 8007d08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	f1c3 031f 	rsb	r3, r3, #31
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	4923      	ldr	r1, [pc, #140]	@ (8007da0 <vTaskSwitchContext+0xc0>)
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <vTaskSwitchContext+0x62>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	b672      	cpsid	i
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	b662      	cpsie	i
 8007d3a:	607b      	str	r3, [r7, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <vTaskSwitchContext+0x5e>
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4a14      	ldr	r2, [pc, #80]	@ (8007da0 <vTaskSwitchContext+0xc0>)
 8007d4e:	4413      	add	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	605a      	str	r2, [r3, #4]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	3308      	adds	r3, #8
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d104      	bne.n	8007d72 <vTaskSwitchContext+0x92>
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4a0a      	ldr	r2, [pc, #40]	@ (8007da4 <vTaskSwitchContext+0xc4>)
 8007d7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d7c:	4b09      	ldr	r3, [pc, #36]	@ (8007da4 <vTaskSwitchContext+0xc4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	334c      	adds	r3, #76	@ 0x4c
 8007d82:	4a09      	ldr	r2, [pc, #36]	@ (8007da8 <vTaskSwitchContext+0xc8>)
 8007d84:	6013      	str	r3, [r2, #0]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000848 	.word	0x20000848
 8007d98:	20000834 	.word	0x20000834
 8007d9c:	20000828 	.word	0x20000828
 8007da0:	20000724 	.word	0x20000724
 8007da4:	20000720 	.word	0x20000720
 8007da8:	2000001c 	.word	0x2000001c

08007dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10d      	bne.n	8007dd8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	60fb      	str	r3, [r7, #12]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dd8:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <vTaskPlaceOnEventList+0x4c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3318      	adds	r3, #24
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7fe fc1c 	bl	800661e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007de6:	2101      	movs	r1, #1
 8007de8:	6838      	ldr	r0, [r7, #0]
 8007dea:	f000 fbb3 	bl	8008554 <prvAddCurrentTaskToDelayedList>
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000720 	.word	0x20000720

08007dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	b672      	cpsid	i
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	b662      	cpsie	i
 8007e26:	60fb      	str	r3, [r7, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3318      	adds	r3, #24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fc2c 	bl	8006690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e38:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb0 <xTaskRemoveFromEventList+0xb4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11c      	bne.n	8007e7a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fc23 	bl	8006690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	2201      	movs	r2, #1
 8007e50:	409a      	lsls	r2, r3
 8007e52:	4b18      	ldr	r3, [pc, #96]	@ (8007eb4 <xTaskRemoveFromEventList+0xb8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <xTaskRemoveFromEventList+0xb8>)
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4a13      	ldr	r2, [pc, #76]	@ (8007eb8 <xTaskRemoveFromEventList+0xbc>)
 8007e6a:	441a      	add	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fe fbaf 	bl	80065d6 <vListInsertEnd>
 8007e78:	e005      	b.n	8007e86 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3318      	adds	r3, #24
 8007e7e:	4619      	mov	r1, r3
 8007e80:	480e      	ldr	r0, [pc, #56]	@ (8007ebc <xTaskRemoveFromEventList+0xc0>)
 8007e82:	f7fe fba8 	bl	80065d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec0 <xTaskRemoveFromEventList+0xc4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d905      	bls.n	8007ea0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e98:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <xTaskRemoveFromEventList+0xc8>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e001      	b.n	8007ea4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ea4:	697b      	ldr	r3, [r7, #20]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000848 	.word	0x20000848
 8007eb4:	20000828 	.word	0x20000828
 8007eb8:	20000724 	.word	0x20000724
 8007ebc:	200007e0 	.word	0x200007e0
 8007ec0:	20000720 	.word	0x20000720
 8007ec4:	20000834 	.word	0x20000834

08007ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <vTaskInternalSetTimeOutState+0x24>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ed8:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <vTaskInternalSetTimeOutState+0x28>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	605a      	str	r2, [r3, #4]
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20000838 	.word	0x20000838
 8007ef0:	20000824 	.word	0x20000824

08007ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	b672      	cpsid	i
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	b662      	cpsie	i
 8007f18:	613b      	str	r3, [r7, #16]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10d      	bne.n	8007f42 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	b672      	cpsid	i
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	b662      	cpsie	i
 8007f3a:	60fb      	str	r3, [r7, #12]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007f42:	f000 fc7b 	bl	800883c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f46:	4b1d      	ldr	r3, [pc, #116]	@ (8007fbc <xTaskCheckForTimeOut+0xc8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d102      	bne.n	8007f66 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e023      	b.n	8007fae <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <xTaskCheckForTimeOut+0xcc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d007      	beq.n	8007f82 <xTaskCheckForTimeOut+0x8e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d302      	bcc.n	8007f82 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	e015      	b.n	8007fae <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d20b      	bcs.n	8007fa4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	1ad2      	subs	r2, r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff95 	bl	8007ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	e004      	b.n	8007fae <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fae:	f000 fc7b 	bl	80088a8 <vPortExitCritical>

	return xReturn;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20000824 	.word	0x20000824
 8007fc0:	20000838 	.word	0x20000838

08007fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fc8:	4b03      	ldr	r3, [pc, #12]	@ (8007fd8 <vTaskMissedYield+0x14>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000834 	.word	0x20000834

08007fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fe4:	f000 f852 	bl	800808c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fe8:	4b06      	ldr	r3, [pc, #24]	@ (8008004 <prvIdleTask+0x28>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d9f9      	bls.n	8007fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <prvIdleTask+0x2c>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008000:	e7f0      	b.n	8007fe4 <prvIdleTask+0x8>
 8008002:	bf00      	nop
 8008004:	20000724 	.word	0x20000724
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008012:	2300      	movs	r3, #0
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	e00c      	b.n	8008032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4a12      	ldr	r2, [pc, #72]	@ (800806c <prvInitialiseTaskLists+0x60>)
 8008024:	4413      	add	r3, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe faa8 	bl	800657c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3301      	adds	r3, #1
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b06      	cmp	r3, #6
 8008036:	d9ef      	bls.n	8008018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008038:	480d      	ldr	r0, [pc, #52]	@ (8008070 <prvInitialiseTaskLists+0x64>)
 800803a:	f7fe fa9f 	bl	800657c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800803e:	480d      	ldr	r0, [pc, #52]	@ (8008074 <prvInitialiseTaskLists+0x68>)
 8008040:	f7fe fa9c 	bl	800657c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008044:	480c      	ldr	r0, [pc, #48]	@ (8008078 <prvInitialiseTaskLists+0x6c>)
 8008046:	f7fe fa99 	bl	800657c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800804a:	480c      	ldr	r0, [pc, #48]	@ (800807c <prvInitialiseTaskLists+0x70>)
 800804c:	f7fe fa96 	bl	800657c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008050:	480b      	ldr	r0, [pc, #44]	@ (8008080 <prvInitialiseTaskLists+0x74>)
 8008052:	f7fe fa93 	bl	800657c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <prvInitialiseTaskLists+0x78>)
 8008058:	4a05      	ldr	r2, [pc, #20]	@ (8008070 <prvInitialiseTaskLists+0x64>)
 800805a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800805c:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <prvInitialiseTaskLists+0x7c>)
 800805e:	4a05      	ldr	r2, [pc, #20]	@ (8008074 <prvInitialiseTaskLists+0x68>)
 8008060:	601a      	str	r2, [r3, #0]
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000724 	.word	0x20000724
 8008070:	200007b0 	.word	0x200007b0
 8008074:	200007c4 	.word	0x200007c4
 8008078:	200007e0 	.word	0x200007e0
 800807c:	200007f4 	.word	0x200007f4
 8008080:	2000080c 	.word	0x2000080c
 8008084:	200007d8 	.word	0x200007d8
 8008088:	200007dc 	.word	0x200007dc

0800808c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008092:	e019      	b.n	80080c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008094:	f000 fbd2 	bl	800883c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008098:	4b10      	ldr	r3, [pc, #64]	@ (80080dc <prvCheckTasksWaitingTermination+0x50>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe faf3 	bl	8006690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080aa:	4b0d      	ldr	r3, [pc, #52]	@ (80080e0 <prvCheckTasksWaitingTermination+0x54>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4a0b      	ldr	r2, [pc, #44]	@ (80080e0 <prvCheckTasksWaitingTermination+0x54>)
 80080b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080b4:	4b0b      	ldr	r3, [pc, #44]	@ (80080e4 <prvCheckTasksWaitingTermination+0x58>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	4a0a      	ldr	r2, [pc, #40]	@ (80080e4 <prvCheckTasksWaitingTermination+0x58>)
 80080bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080be:	f000 fbf3 	bl	80088a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f810 	bl	80080e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c8:	4b06      	ldr	r3, [pc, #24]	@ (80080e4 <prvCheckTasksWaitingTermination+0x58>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e1      	bne.n	8008094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200007f4 	.word	0x200007f4
 80080e0:	20000820 	.word	0x20000820
 80080e4:	20000808 	.word	0x20000808

080080e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	334c      	adds	r3, #76	@ 0x4c
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 f92b 	bl	8009350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008100:	2b00      	cmp	r3, #0
 8008102:	d108      	bne.n	8008116 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fd93 	bl	8008c34 <vPortFree>
				vPortFree( pxTCB );
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fd90 	bl	8008c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008114:	e01b      	b.n	800814e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800811c:	2b01      	cmp	r3, #1
 800811e:	d103      	bne.n	8008128 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fd87 	bl	8008c34 <vPortFree>
	}
 8008126:	e012      	b.n	800814e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800812e:	2b02      	cmp	r3, #2
 8008130:	d00d      	beq.n	800814e <prvDeleteTCB+0x66>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <prvDeleteTCB+0x62>
	}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815e:	4b0c      	ldr	r3, [pc, #48]	@ (8008190 <prvResetNextTaskUnblockTime+0x38>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d104      	bne.n	8008172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <prvResetNextTaskUnblockTime+0x3c>)
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008170:	e008      	b.n	8008184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008172:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <prvResetNextTaskUnblockTime+0x38>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <prvResetNextTaskUnblockTime+0x3c>)
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	200007d8 	.word	0x200007d8
 8008194:	20000840 	.word	0x20000840

08008198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800819e:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <xTaskGetSchedulerState+0x34>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081a6:	2301      	movs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e008      	b.n	80081be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ac:	4b08      	ldr	r3, [pc, #32]	@ (80081d0 <xTaskGetSchedulerState+0x38>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b4:	2302      	movs	r3, #2
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	e001      	b.n	80081be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081be:	687b      	ldr	r3, [r7, #4]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	2000082c 	.word	0x2000082c
 80081d0:	20000848 	.word	0x20000848

080081d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d069      	beq.n	80082be <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ee:	4b36      	ldr	r3, [pc, #216]	@ (80082c8 <xTaskPriorityInherit+0xf4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d259      	bcs.n	80082ac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	db06      	blt.n	800820e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008200:	4b31      	ldr	r3, [pc, #196]	@ (80082c8 <xTaskPriorityInherit+0xf4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008206:	f1c3 0207 	rsb	r2, r3, #7
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6959      	ldr	r1, [r3, #20]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4a2b      	ldr	r2, [pc, #172]	@ (80082cc <xTaskPriorityInherit+0xf8>)
 8008220:	4413      	add	r3, r2
 8008222:	4299      	cmp	r1, r3
 8008224:	d13a      	bne.n	800829c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fa30 	bl	8006690 <uxListRemove>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d115      	bne.n	8008262 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823a:	4924      	ldr	r1, [pc, #144]	@ (80082cc <xTaskPriorityInherit+0xf8>)
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xTaskPriorityInherit+0x8e>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	2201      	movs	r2, #1
 8008252:	fa02 f303 	lsl.w	r3, r2, r3
 8008256:	43da      	mvns	r2, r3
 8008258:	4b1d      	ldr	r3, [pc, #116]	@ (80082d0 <xTaskPriorityInherit+0xfc>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4013      	ands	r3, r2
 800825e:	4a1c      	ldr	r2, [pc, #112]	@ (80082d0 <xTaskPriorityInherit+0xfc>)
 8008260:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008262:	4b19      	ldr	r3, [pc, #100]	@ (80082c8 <xTaskPriorityInherit+0xf4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	2201      	movs	r2, #1
 8008272:	409a      	lsls	r2, r3
 8008274:	4b16      	ldr	r3, [pc, #88]	@ (80082d0 <xTaskPriorityInherit+0xfc>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4313      	orrs	r3, r2
 800827a:	4a15      	ldr	r2, [pc, #84]	@ (80082d0 <xTaskPriorityInherit+0xfc>)
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4a10      	ldr	r2, [pc, #64]	@ (80082cc <xTaskPriorityInherit+0xf8>)
 800828c:	441a      	add	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fe f99e 	bl	80065d6 <vListInsertEnd>
 800829a:	e004      	b.n	80082a6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800829c:	4b0a      	ldr	r3, [pc, #40]	@ (80082c8 <xTaskPriorityInherit+0xf4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80082a6:	2301      	movs	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e008      	b.n	80082be <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b0:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <xTaskPriorityInherit+0xf4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d201      	bcs.n	80082be <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082ba:	2301      	movs	r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082be:	68fb      	ldr	r3, [r7, #12]
	}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000720 	.word	0x20000720
 80082cc:	20000724 	.word	0x20000724
 80082d0:	20000828 	.word	0x20000828

080082d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d074      	beq.n	80083d4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082ea:	4b3d      	ldr	r3, [pc, #244]	@ (80083e0 <xTaskPriorityDisinherit+0x10c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d00d      	beq.n	8008310 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	b672      	cpsid	i
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	b662      	cpsie	i
 8008308:	60fb      	str	r3, [r7, #12]
}
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	e7fd      	b.n	800830c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10d      	bne.n	8008334 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	60bb      	str	r3, [r7, #8]
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	e7fd      	b.n	8008330 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008338:	1e5a      	subs	r2, r3, #1
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008346:	429a      	cmp	r2, r3
 8008348:	d044      	beq.n	80083d4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800834e:	2b00      	cmp	r3, #0
 8008350:	d140      	bne.n	80083d4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3304      	adds	r3, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe f99a 	bl	8006690 <uxListRemove>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d115      	bne.n	800838e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008366:	491f      	ldr	r1, [pc, #124]	@ (80083e4 <xTaskPriorityDisinherit+0x110>)
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	440b      	add	r3, r1
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTaskPriorityDisinherit+0xba>
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	2201      	movs	r2, #1
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	43da      	mvns	r2, r3
 8008384:	4b18      	ldr	r3, [pc, #96]	@ (80083e8 <xTaskPriorityDisinherit+0x114>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4013      	ands	r3, r2
 800838a:	4a17      	ldr	r2, [pc, #92]	@ (80083e8 <xTaskPriorityDisinherit+0x114>)
 800838c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	f1c3 0207 	rsb	r2, r3, #7
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a6:	2201      	movs	r2, #1
 80083a8:	409a      	lsls	r2, r3
 80083aa:	4b0f      	ldr	r3, [pc, #60]	@ (80083e8 <xTaskPriorityDisinherit+0x114>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	4a0d      	ldr	r2, [pc, #52]	@ (80083e8 <xTaskPriorityDisinherit+0x114>)
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4a08      	ldr	r2, [pc, #32]	@ (80083e4 <xTaskPriorityDisinherit+0x110>)
 80083c2:	441a      	add	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7fe f903 	bl	80065d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083d4:	697b      	ldr	r3, [r7, #20]
	}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000720 	.word	0x20000720
 80083e4:	20000724 	.word	0x20000724
 80083e8:	20000828 	.word	0x20000828

080083ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8089 	beq.w	8008518 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10d      	bne.n	800842a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	b672      	cpsid	i
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	b662      	cpsie	i
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d902      	bls.n	800843a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e002      	b.n	8008440 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	429a      	cmp	r2, r3
 8008448:	d066      	beq.n	8008518 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	429a      	cmp	r2, r3
 8008452:	d161      	bne.n	8008518 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008454:	4b32      	ldr	r3, [pc, #200]	@ (8008520 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	429a      	cmp	r2, r3
 800845c:	d10d      	bne.n	800847a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	b672      	cpsid	i
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	b662      	cpsie	i
 8008472:	60bb      	str	r3, [r7, #8]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	db04      	blt.n	8008498 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f1c3 0207 	rsb	r2, r3, #7
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	6959      	ldr	r1, [r3, #20]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008524 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80084a8:	4413      	add	r3, r2
 80084aa:	4299      	cmp	r1, r3
 80084ac:	d134      	bne.n	8008518 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe f8ec 	bl	8006690 <uxListRemove>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d115      	bne.n	80084ea <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c2:	4918      	ldr	r1, [pc, #96]	@ (8008524 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	440b      	add	r3, r1
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d8:	2201      	movs	r2, #1
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	43da      	mvns	r2, r3
 80084e0:	4b11      	ldr	r3, [pc, #68]	@ (8008528 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	4a10      	ldr	r2, [pc, #64]	@ (8008528 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80084e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ee:	2201      	movs	r2, #1
 80084f0:	409a      	lsls	r2, r3
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	4a0b      	ldr	r2, [pc, #44]	@ (8008528 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4a06      	ldr	r2, [pc, #24]	@ (8008524 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800850a:	441a      	add	r2, r3
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7fe f85f 	bl	80065d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008518:	bf00      	nop
 800851a:	3720      	adds	r7, #32
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000720 	.word	0x20000720
 8008524:	20000724 	.word	0x20000724
 8008528:	20000828 	.word	0x20000828

0800852c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008530:	4b07      	ldr	r3, [pc, #28]	@ (8008550 <pvTaskIncrementMutexHeldCount+0x24>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008538:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <pvTaskIncrementMutexHeldCount+0x24>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800853e:	3201      	adds	r2, #1
 8008540:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008542:	4b03      	ldr	r3, [pc, #12]	@ (8008550 <pvTaskIncrementMutexHeldCount+0x24>)
 8008544:	681b      	ldr	r3, [r3, #0]
	}
 8008546:	4618      	mov	r0, r3
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	20000720 	.word	0x20000720

08008554 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800855e:	4b29      	ldr	r3, [pc, #164]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008564:	4b28      	ldr	r3, [pc, #160]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3304      	adds	r3, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe f890 	bl	8006690 <uxListRemove>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10b      	bne.n	800858e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008576:	4b24      	ldr	r3, [pc, #144]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857c:	2201      	movs	r2, #1
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	43da      	mvns	r2, r3
 8008584:	4b21      	ldr	r3, [pc, #132]	@ (800860c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4013      	ands	r3, r2
 800858a:	4a20      	ldr	r2, [pc, #128]	@ (800860c <prvAddCurrentTaskToDelayedList+0xb8>)
 800858c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d10a      	bne.n	80085ac <prvAddCurrentTaskToDelayedList+0x58>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859c:	4b1a      	ldr	r3, [pc, #104]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	481a      	ldr	r0, [pc, #104]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xbc>)
 80085a6:	f7fe f816 	bl	80065d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085aa:	e026      	b.n	80085fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085b4:	4b14      	ldr	r3, [pc, #80]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d209      	bcs.n	80085d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085c4:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe f824 	bl	800661e <vListInsert>
}
 80085d6:	e010      	b.n	80085fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008618 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7fe f81a 	bl	800661e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085ea:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d202      	bcs.n	80085fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085f4:	4a09      	ldr	r2, [pc, #36]	@ (800861c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6013      	str	r3, [r2, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000824 	.word	0x20000824
 8008608:	20000720 	.word	0x20000720
 800860c:	20000828 	.word	0x20000828
 8008610:	2000080c 	.word	0x2000080c
 8008614:	200007dc 	.word	0x200007dc
 8008618:	200007d8 	.word	0x200007d8
 800861c:	20000840 	.word	0x20000840

08008620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3b04      	subs	r3, #4
 8008630:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3b04      	subs	r3, #4
 800863e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f023 0201 	bic.w	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3b04      	subs	r3, #4
 800864e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008650:	4a0c      	ldr	r2, [pc, #48]	@ (8008684 <pxPortInitialiseStack+0x64>)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b14      	subs	r3, #20
 800865a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3b04      	subs	r3, #4
 8008666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f06f 0202 	mvn.w	r2, #2
 800866e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3b20      	subs	r3, #32
 8008674:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008676:	68fb      	ldr	r3, [r7, #12]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	08008689 	.word	0x08008689

08008688 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008692:	4b15      	ldr	r3, [pc, #84]	@ (80086e8 <prvTaskExitError+0x60>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869a:	d00d      	beq.n	80086b8 <prvTaskExitError+0x30>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	b672      	cpsid	i
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	b662      	cpsie	i
 80086b0:	60fb      	str	r3, [r7, #12]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <prvTaskExitError+0x2c>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086bc:	b672      	cpsid	i
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	b662      	cpsie	i
 80086cc:	60bb      	str	r3, [r7, #8]
}
 80086ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086d0:	bf00      	nop
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0fc      	beq.n	80086d2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	2000000c 	.word	0x2000000c
 80086ec:	00000000 	.word	0x00000000

080086f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086f0:	4b07      	ldr	r3, [pc, #28]	@ (8008710 <pxCurrentTCBConst2>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f380 8809 	msr	PSP, r0
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	4770      	bx	lr
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst2>:
 8008710:	20000720 	.word	0x20000720
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008718:	4808      	ldr	r0, [pc, #32]	@ (800873c <prvPortStartFirstTask+0x24>)
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	f380 8808 	msr	MSP, r0
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8814 	msr	CONTROL, r0
 800872a:	b662      	cpsie	i
 800872c:	b661      	cpsie	f
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	df00      	svc	0
 8008738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800873a:	bf00      	nop
 800873c:	e000ed08 	.word	0xe000ed08

08008740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008746:	4b37      	ldr	r3, [pc, #220]	@ (8008824 <xPortStartScheduler+0xe4>)
 8008748:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b2db      	uxtb	r3, r3
 8008750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	22ff      	movs	r2, #255	@ 0xff
 8008756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008768:	b2da      	uxtb	r2, r3
 800876a:	4b2f      	ldr	r3, [pc, #188]	@ (8008828 <xPortStartScheduler+0xe8>)
 800876c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800876e:	4b2f      	ldr	r3, [pc, #188]	@ (800882c <xPortStartScheduler+0xec>)
 8008770:	2207      	movs	r2, #7
 8008772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008774:	e009      	b.n	800878a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008776:	4b2d      	ldr	r3, [pc, #180]	@ (800882c <xPortStartScheduler+0xec>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3b01      	subs	r3, #1
 800877c:	4a2b      	ldr	r2, [pc, #172]	@ (800882c <xPortStartScheduler+0xec>)
 800877e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	b2db      	uxtb	r3, r3
 8008788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008792:	2b80      	cmp	r3, #128	@ 0x80
 8008794:	d0ef      	beq.n	8008776 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008796:	4b25      	ldr	r3, [pc, #148]	@ (800882c <xPortStartScheduler+0xec>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1c3 0307 	rsb	r3, r3, #7
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d00d      	beq.n	80087be <xPortStartScheduler+0x7e>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a6:	b672      	cpsid	i
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	b662      	cpsie	i
 80087b6:	60bb      	str	r3, [r7, #8]
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	e7fd      	b.n	80087ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087be:	4b1b      	ldr	r3, [pc, #108]	@ (800882c <xPortStartScheduler+0xec>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	4a19      	ldr	r2, [pc, #100]	@ (800882c <xPortStartScheduler+0xec>)
 80087c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087c8:	4b18      	ldr	r3, [pc, #96]	@ (800882c <xPortStartScheduler+0xec>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087d0:	4a16      	ldr	r2, [pc, #88]	@ (800882c <xPortStartScheduler+0xec>)
 80087d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087dc:	4b14      	ldr	r3, [pc, #80]	@ (8008830 <xPortStartScheduler+0xf0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a13      	ldr	r2, [pc, #76]	@ (8008830 <xPortStartScheduler+0xf0>)
 80087e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087e8:	4b11      	ldr	r3, [pc, #68]	@ (8008830 <xPortStartScheduler+0xf0>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a10      	ldr	r2, [pc, #64]	@ (8008830 <xPortStartScheduler+0xf0>)
 80087ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087f4:	f000 f8dc 	bl	80089b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008834 <xPortStartScheduler+0xf4>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087fe:	f000 f8fb 	bl	80089f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <xPortStartScheduler+0xf8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a0c      	ldr	r2, [pc, #48]	@ (8008838 <xPortStartScheduler+0xf8>)
 8008808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800880c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800880e:	f7ff ff83 	bl	8008718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008812:	f7ff fa65 	bl	8007ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8008816:	f7ff ff37 	bl	8008688 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	e000e400 	.word	0xe000e400
 8008828:	2000084c 	.word	0x2000084c
 800882c:	20000850 	.word	0x20000850
 8008830:	e000ed20 	.word	0xe000ed20
 8008834:	2000000c 	.word	0x2000000c
 8008838:	e000ef34 	.word	0xe000ef34

0800883c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	b672      	cpsid	i
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	b662      	cpsie	i
 8008856:	607b      	str	r3, [r7, #4]
}
 8008858:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800885a:	4b11      	ldr	r3, [pc, #68]	@ (80088a0 <vPortEnterCritical+0x64>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3301      	adds	r3, #1
 8008860:	4a0f      	ldr	r2, [pc, #60]	@ (80088a0 <vPortEnterCritical+0x64>)
 8008862:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008864:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <vPortEnterCritical+0x64>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d112      	bne.n	8008892 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800886c:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <vPortEnterCritical+0x68>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00d      	beq.n	8008892 <vPortEnterCritical+0x56>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	b672      	cpsid	i
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	b662      	cpsie	i
 800888a:	603b      	str	r3, [r7, #0]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <vPortEnterCritical+0x52>
	}
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2000000c 	.word	0x2000000c
 80088a4:	e000ed04 	.word	0xe000ed04

080088a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088ae:	4b13      	ldr	r3, [pc, #76]	@ (80088fc <vPortExitCritical+0x54>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10d      	bne.n	80088d2 <vPortExitCritical+0x2a>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ba:	b672      	cpsid	i
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	b662      	cpsie	i
 80088ca:	607b      	str	r3, [r7, #4]
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	e7fd      	b.n	80088ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80088d2:	4b0a      	ldr	r3, [pc, #40]	@ (80088fc <vPortExitCritical+0x54>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	4a08      	ldr	r2, [pc, #32]	@ (80088fc <vPortExitCritical+0x54>)
 80088da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088dc:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <vPortExitCritical+0x54>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <vPortExitCritical+0x48>
 80088e4:	2300      	movs	r3, #0
 80088e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	f383 8811 	msr	BASEPRI, r3
}
 80088ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	2000000c 	.word	0x2000000c

08008900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008900:	f3ef 8009 	mrs	r0, PSP
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	4b15      	ldr	r3, [pc, #84]	@ (8008960 <pxCurrentTCBConst>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f01e 0f10 	tst.w	lr, #16
 8008910:	bf08      	it	eq
 8008912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891a:	6010      	str	r0, [r2, #0]
 800891c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008924:	b672      	cpsid	i
 8008926:	f380 8811 	msr	BASEPRI, r0
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	b662      	cpsie	i
 8008934:	f7ff f9d4 	bl	8007ce0 <vTaskSwitchContext>
 8008938:	f04f 0000 	mov.w	r0, #0
 800893c:	f380 8811 	msr	BASEPRI, r0
 8008940:	bc09      	pop	{r0, r3}
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f01e 0f10 	tst.w	lr, #16
 800894e:	bf08      	it	eq
 8008950:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008954:	f380 8809 	msr	PSP, r0
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop

08008960 <pxCurrentTCBConst>:
 8008960:	20000720 	.word	0x20000720
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	b672      	cpsid	i
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	b662      	cpsie	i
 8008982:	607b      	str	r3, [r7, #4]
}
 8008984:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008986:	f7ff f8ef 	bl	8007b68 <xTaskIncrementTick>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008990:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <SysTick_Handler+0x44>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	2300      	movs	r3, #0
 800899a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f383 8811 	msr	BASEPRI, r3
}
 80089a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	e000ed04 	.word	0xe000ed04

080089b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089b4:	4b0b      	ldr	r3, [pc, #44]	@ (80089e4 <vPortSetupTimerInterrupt+0x34>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089ba:	4b0b      	ldr	r3, [pc, #44]	@ (80089e8 <vPortSetupTimerInterrupt+0x38>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089c0:	4b0a      	ldr	r3, [pc, #40]	@ (80089ec <vPortSetupTimerInterrupt+0x3c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a0a      	ldr	r2, [pc, #40]	@ (80089f0 <vPortSetupTimerInterrupt+0x40>)
 80089c6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ca:	099b      	lsrs	r3, r3, #6
 80089cc:	4a09      	ldr	r2, [pc, #36]	@ (80089f4 <vPortSetupTimerInterrupt+0x44>)
 80089ce:	3b01      	subs	r3, #1
 80089d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089d2:	4b04      	ldr	r3, [pc, #16]	@ (80089e4 <vPortSetupTimerInterrupt+0x34>)
 80089d4:	2207      	movs	r2, #7
 80089d6:	601a      	str	r2, [r3, #0]
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	e000e010 	.word	0xe000e010
 80089e8:	e000e018 	.word	0xe000e018
 80089ec:	20000000 	.word	0x20000000
 80089f0:	10624dd3 	.word	0x10624dd3
 80089f4:	e000e014 	.word	0xe000e014

080089f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a08 <vPortEnableVFP+0x10>
 80089fc:	6801      	ldr	r1, [r0, #0]
 80089fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a02:	6001      	str	r1, [r0, #0]
 8008a04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a06:	bf00      	nop
 8008a08:	e000ed88 	.word	0xe000ed88

08008a0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a12:	f3ef 8305 	mrs	r3, IPSR
 8008a16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d917      	bls.n	8008a4e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8008a88 <vPortValidateInterruptPriority+0x7c>)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a28:	4b18      	ldr	r3, [pc, #96]	@ (8008a8c <vPortValidateInterruptPriority+0x80>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	7afa      	ldrb	r2, [r7, #11]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d20d      	bcs.n	8008a4e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a36:	b672      	cpsid	i
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	b662      	cpsie	i
 8008a46:	607b      	str	r3, [r7, #4]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a4e:	4b10      	ldr	r3, [pc, #64]	@ (8008a90 <vPortValidateInterruptPriority+0x84>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a56:	4b0f      	ldr	r3, [pc, #60]	@ (8008a94 <vPortValidateInterruptPriority+0x88>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d90d      	bls.n	8008a7a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a62:	b672      	cpsid	i
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	b662      	cpsie	i
 8008a72:	603b      	str	r3, [r7, #0]
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <vPortValidateInterruptPriority+0x6a>
	}
 8008a7a:	bf00      	nop
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	e000e3f0 	.word	0xe000e3f0
 8008a8c:	2000084c 	.word	0x2000084c
 8008a90:	e000ed0c 	.word	0xe000ed0c
 8008a94:	20000850 	.word	0x20000850

08008a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	@ 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008aa4:	f7fe ff90 	bl	80079c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8008c20 <pvPortMalloc+0x188>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ab0:	f000 f920 	bl	8008cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 8094 	bne.w	8008bea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d020      	beq.n	8008b0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008ac8:	2208      	movs	r2, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d017      	beq.n	8008b0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f023 0307 	bic.w	r3, r3, #7
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00d      	beq.n	8008b0a <pvPortMalloc+0x72>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	b672      	cpsid	i
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	b662      	cpsie	i
 8008b02:	617b      	str	r3, [r7, #20]
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d06c      	beq.n	8008bea <pvPortMalloc+0x152>
 8008b10:	4b45      	ldr	r3, [pc, #276]	@ (8008c28 <pvPortMalloc+0x190>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d867      	bhi.n	8008bea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b1a:	4b44      	ldr	r3, [pc, #272]	@ (8008c2c <pvPortMalloc+0x194>)
 8008b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b1e:	4b43      	ldr	r3, [pc, #268]	@ (8008c2c <pvPortMalloc+0x194>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b24:	e004      	b.n	8008b30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d903      	bls.n	8008b42 <pvPortMalloc+0xaa>
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f1      	bne.n	8008b26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b42:	4b37      	ldr	r3, [pc, #220]	@ (8008c20 <pvPortMalloc+0x188>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d04e      	beq.n	8008bea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2208      	movs	r2, #8
 8008b52:	4413      	add	r3, r2
 8008b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	1ad2      	subs	r2, r2, r3
 8008b66:	2308      	movs	r3, #8
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d922      	bls.n	8008bb4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00d      	beq.n	8008b9c <pvPortMalloc+0x104>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b84:	b672      	cpsid	i
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	b662      	cpsie	i
 8008b94:	613b      	str	r3, [r7, #16]
}
 8008b96:	bf00      	nop
 8008b98:	bf00      	nop
 8008b9a:	e7fd      	b.n	8008b98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bae:	69b8      	ldr	r0, [r7, #24]
 8008bb0:	f000 f902 	bl	8008db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c28 <pvPortMalloc+0x190>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8008c28 <pvPortMalloc+0x190>)
 8008bc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bc2:	4b19      	ldr	r3, [pc, #100]	@ (8008c28 <pvPortMalloc+0x190>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c30 <pvPortMalloc+0x198>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d203      	bcs.n	8008bd6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bce:	4b16      	ldr	r3, [pc, #88]	@ (8008c28 <pvPortMalloc+0x190>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a17      	ldr	r2, [pc, #92]	@ (8008c30 <pvPortMalloc+0x198>)
 8008bd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	4b12      	ldr	r3, [pc, #72]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bea:	f7fe fefb 	bl	80079e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00d      	beq.n	8008c14 <pvPortMalloc+0x17c>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	b672      	cpsid	i
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	b662      	cpsie	i
 8008c0c:	60fb      	str	r3, [r7, #12]
}
 8008c0e:	bf00      	nop
 8008c10:	bf00      	nop
 8008c12:	e7fd      	b.n	8008c10 <pvPortMalloc+0x178>
	return pvReturn;
 8008c14:	69fb      	ldr	r3, [r7, #28]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3728      	adds	r7, #40	@ 0x28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	2000445c 	.word	0x2000445c
 8008c24:	20004468 	.word	0x20004468
 8008c28:	20004460 	.word	0x20004460
 8008c2c:	20004454 	.word	0x20004454
 8008c30:	20004464 	.word	0x20004464

08008c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d04e      	beq.n	8008ce4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c46:	2308      	movs	r3, #8
 8008c48:	425b      	negs	r3, r3
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	4b24      	ldr	r3, [pc, #144]	@ (8008cec <vPortFree+0xb8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10d      	bne.n	8008c7e <vPortFree+0x4a>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	b672      	cpsid	i
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	b662      	cpsie	i
 8008c76:	60fb      	str	r3, [r7, #12]
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	e7fd      	b.n	8008c7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <vPortFree+0x6e>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	b672      	cpsid	i
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	b662      	cpsie	i
 8008c9a:	60bb      	str	r3, [r7, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	e7fd      	b.n	8008c9e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	4b11      	ldr	r3, [pc, #68]	@ (8008cec <vPortFree+0xb8>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d019      	beq.n	8008ce4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d115      	bne.n	8008ce4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008cec <vPortFree+0xb8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	401a      	ands	r2, r3
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cc8:	f7fe fe7e 	bl	80079c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	4b07      	ldr	r3, [pc, #28]	@ (8008cf0 <vPortFree+0xbc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4a06      	ldr	r2, [pc, #24]	@ (8008cf0 <vPortFree+0xbc>)
 8008cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cda:	6938      	ldr	r0, [r7, #16]
 8008cdc:	f000 f86c 	bl	8008db8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ce0:	f7fe fe80 	bl	80079e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ce4:	bf00      	nop
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20004468 	.word	0x20004468
 8008cf0:	20004460 	.word	0x20004460

08008cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cfa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d00:	4b27      	ldr	r3, [pc, #156]	@ (8008da0 <prvHeapInit+0xac>)
 8008d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00c      	beq.n	8008d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3307      	adds	r3, #7
 8008d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0307 	bic.w	r3, r3, #7
 8008d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	4a1f      	ldr	r2, [pc, #124]	@ (8008da0 <prvHeapInit+0xac>)
 8008d24:	4413      	add	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008da4 <prvHeapInit+0xb0>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d32:	4b1c      	ldr	r3, [pc, #112]	@ (8008da4 <prvHeapInit+0xb0>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d40:	2208      	movs	r2, #8
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a15      	ldr	r2, [pc, #84]	@ (8008da8 <prvHeapInit+0xb4>)
 8008d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d56:	4b14      	ldr	r3, [pc, #80]	@ (8008da8 <prvHeapInit+0xb4>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d5e:	4b12      	ldr	r3, [pc, #72]	@ (8008da8 <prvHeapInit+0xb4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d74:	4b0c      	ldr	r3, [pc, #48]	@ (8008da8 <prvHeapInit+0xb4>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4a0a      	ldr	r2, [pc, #40]	@ (8008dac <prvHeapInit+0xb8>)
 8008d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4a09      	ldr	r2, [pc, #36]	@ (8008db0 <prvHeapInit+0xbc>)
 8008d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d8c:	4b09      	ldr	r3, [pc, #36]	@ (8008db4 <prvHeapInit+0xc0>)
 8008d8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000854 	.word	0x20000854
 8008da4:	20004454 	.word	0x20004454
 8008da8:	2000445c 	.word	0x2000445c
 8008dac:	20004464 	.word	0x20004464
 8008db0:	20004460 	.word	0x20004460
 8008db4:	20004468 	.word	0x20004468

08008db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dc0:	4b28      	ldr	r3, [pc, #160]	@ (8008e64 <prvInsertBlockIntoFreeList+0xac>)
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e002      	b.n	8008dcc <prvInsertBlockIntoFreeList+0x14>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d8f7      	bhi.n	8008dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d108      	bne.n	8008dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	441a      	add	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	441a      	add	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d118      	bne.n	8008e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b15      	ldr	r3, [pc, #84]	@ (8008e68 <prvInsertBlockIntoFreeList+0xb0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d00d      	beq.n	8008e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e008      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e36:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <prvInsertBlockIntoFreeList+0xb0>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e003      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d002      	beq.n	8008e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20004454 	.word	0x20004454
 8008e68:	2000445c 	.word	0x2000445c

08008e6c <sbrk_aligned>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008eac <sbrk_aligned+0x40>)
 8008e70:	460c      	mov	r4, r1
 8008e72:	6831      	ldr	r1, [r6, #0]
 8008e74:	4605      	mov	r5, r0
 8008e76:	b911      	cbnz	r1, 8008e7e <sbrk_aligned+0x12>
 8008e78:	f000 fae4 	bl	8009444 <_sbrk_r>
 8008e7c:	6030      	str	r0, [r6, #0]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 fadf 	bl	8009444 <_sbrk_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d103      	bne.n	8008e92 <sbrk_aligned+0x26>
 8008e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e8e:	4620      	mov	r0, r4
 8008e90:	bd70      	pop	{r4, r5, r6, pc}
 8008e92:	1cc4      	adds	r4, r0, #3
 8008e94:	f024 0403 	bic.w	r4, r4, #3
 8008e98:	42a0      	cmp	r0, r4
 8008e9a:	d0f8      	beq.n	8008e8e <sbrk_aligned+0x22>
 8008e9c:	1a21      	subs	r1, r4, r0
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 fad0 	bl	8009444 <_sbrk_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d1f2      	bne.n	8008e8e <sbrk_aligned+0x22>
 8008ea8:	e7ef      	b.n	8008e8a <sbrk_aligned+0x1e>
 8008eaa:	bf00      	nop
 8008eac:	2000446c 	.word	0x2000446c

08008eb0 <_malloc_r>:
 8008eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb4:	1ccd      	adds	r5, r1, #3
 8008eb6:	f025 0503 	bic.w	r5, r5, #3
 8008eba:	3508      	adds	r5, #8
 8008ebc:	2d0c      	cmp	r5, #12
 8008ebe:	bf38      	it	cc
 8008ec0:	250c      	movcc	r5, #12
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	db01      	blt.n	8008ecc <_malloc_r+0x1c>
 8008ec8:	42a9      	cmp	r1, r5
 8008eca:	d904      	bls.n	8008ed6 <_malloc_r+0x26>
 8008ecc:	230c      	movs	r3, #12
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fac <_malloc_r+0xfc>
 8008eda:	f000 f869 	bl	8008fb0 <__malloc_lock>
 8008ede:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee2:	461c      	mov	r4, r3
 8008ee4:	bb44      	cbnz	r4, 8008f38 <_malloc_r+0x88>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff ffbf 	bl	8008e6c <sbrk_aligned>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	d158      	bne.n	8008fa6 <_malloc_r+0xf6>
 8008ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ef8:	4627      	mov	r7, r4
 8008efa:	2f00      	cmp	r7, #0
 8008efc:	d143      	bne.n	8008f86 <_malloc_r+0xd6>
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d04b      	beq.n	8008f9a <_malloc_r+0xea>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4639      	mov	r1, r7
 8008f06:	4630      	mov	r0, r6
 8008f08:	eb04 0903 	add.w	r9, r4, r3
 8008f0c:	f000 fa9a 	bl	8009444 <_sbrk_r>
 8008f10:	4581      	cmp	r9, r0
 8008f12:	d142      	bne.n	8008f9a <_malloc_r+0xea>
 8008f14:	6821      	ldr	r1, [r4, #0]
 8008f16:	1a6d      	subs	r5, r5, r1
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f7ff ffa6 	bl	8008e6c <sbrk_aligned>
 8008f20:	3001      	adds	r0, #1
 8008f22:	d03a      	beq.n	8008f9a <_malloc_r+0xea>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	442b      	add	r3, r5
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	bb62      	cbnz	r2, 8008f8c <_malloc_r+0xdc>
 8008f32:	f8c8 7000 	str.w	r7, [r8]
 8008f36:	e00f      	b.n	8008f58 <_malloc_r+0xa8>
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	1b52      	subs	r2, r2, r5
 8008f3c:	d420      	bmi.n	8008f80 <_malloc_r+0xd0>
 8008f3e:	2a0b      	cmp	r2, #11
 8008f40:	d917      	bls.n	8008f72 <_malloc_r+0xc2>
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	6025      	str	r5, [r4, #0]
 8008f48:	bf18      	it	ne
 8008f4a:	6059      	strne	r1, [r3, #4]
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	bf08      	it	eq
 8008f50:	f8c8 1000 	streq.w	r1, [r8]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f82f 	bl	8008fbc <__malloc_unlock>
 8008f5e:	f104 000b 	add.w	r0, r4, #11
 8008f62:	1d23      	adds	r3, r4, #4
 8008f64:	f020 0007 	bic.w	r0, r0, #7
 8008f68:	1ac2      	subs	r2, r0, r3
 8008f6a:	bf1c      	itt	ne
 8008f6c:	1a1b      	subne	r3, r3, r0
 8008f6e:	50a3      	strne	r3, [r4, r2]
 8008f70:	e7af      	b.n	8008ed2 <_malloc_r+0x22>
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	bf0c      	ite	eq
 8008f78:	f8c8 2000 	streq.w	r2, [r8]
 8008f7c:	605a      	strne	r2, [r3, #4]
 8008f7e:	e7eb      	b.n	8008f58 <_malloc_r+0xa8>
 8008f80:	4623      	mov	r3, r4
 8008f82:	6864      	ldr	r4, [r4, #4]
 8008f84:	e7ae      	b.n	8008ee4 <_malloc_r+0x34>
 8008f86:	463c      	mov	r4, r7
 8008f88:	687f      	ldr	r7, [r7, #4]
 8008f8a:	e7b6      	b.n	8008efa <_malloc_r+0x4a>
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d1fb      	bne.n	8008f8c <_malloc_r+0xdc>
 8008f94:	2300      	movs	r3, #0
 8008f96:	6053      	str	r3, [r2, #4]
 8008f98:	e7de      	b.n	8008f58 <_malloc_r+0xa8>
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 f80c 	bl	8008fbc <__malloc_unlock>
 8008fa4:	e794      	b.n	8008ed0 <_malloc_r+0x20>
 8008fa6:	6005      	str	r5, [r0, #0]
 8008fa8:	e7d6      	b.n	8008f58 <_malloc_r+0xa8>
 8008faa:	bf00      	nop
 8008fac:	20004470 	.word	0x20004470

08008fb0 <__malloc_lock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	@ (8008fb8 <__malloc_lock+0x8>)
 8008fb2:	f000 ba94 	b.w	80094de <__retarget_lock_acquire_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	200045b4 	.word	0x200045b4

08008fbc <__malloc_unlock>:
 8008fbc:	4801      	ldr	r0, [pc, #4]	@ (8008fc4 <__malloc_unlock+0x8>)
 8008fbe:	f000 ba8f 	b.w	80094e0 <__retarget_lock_release_recursive>
 8008fc2:	bf00      	nop
 8008fc4:	200045b4 	.word	0x200045b4

08008fc8 <std>:
 8008fc8:	2300      	movs	r3, #0
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	e9c0 3300 	strd	r3, r3, [r0]
 8008fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fd6:	6083      	str	r3, [r0, #8]
 8008fd8:	8181      	strh	r1, [r0, #12]
 8008fda:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fdc:	81c2      	strh	r2, [r0, #14]
 8008fde:	6183      	str	r3, [r0, #24]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	305c      	adds	r0, #92	@ 0x5c
 8008fe6:	f000 f99b 	bl	8009320 <memset>
 8008fea:	4b0d      	ldr	r3, [pc, #52]	@ (8009020 <std+0x58>)
 8008fec:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fee:	4b0d      	ldr	r3, [pc, #52]	@ (8009024 <std+0x5c>)
 8008ff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <std+0x60>)
 8008ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800902c <std+0x64>)
 8008ff8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8009030 <std+0x68>)
 8008ffc:	6224      	str	r4, [r4, #32]
 8008ffe:	429c      	cmp	r4, r3
 8009000:	d006      	beq.n	8009010 <std+0x48>
 8009002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009006:	4294      	cmp	r4, r2
 8009008:	d002      	beq.n	8009010 <std+0x48>
 800900a:	33d0      	adds	r3, #208	@ 0xd0
 800900c:	429c      	cmp	r4, r3
 800900e:	d105      	bne.n	800901c <std+0x54>
 8009010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009018:	f000 ba60 	b.w	80094dc <__retarget_lock_init_recursive>
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	08009171 	.word	0x08009171
 8009024:	08009193 	.word	0x08009193
 8009028:	080091cb 	.word	0x080091cb
 800902c:	080091ef 	.word	0x080091ef
 8009030:	20004474 	.word	0x20004474

08009034 <stdio_exit_handler>:
 8009034:	4a02      	ldr	r2, [pc, #8]	@ (8009040 <stdio_exit_handler+0xc>)
 8009036:	4903      	ldr	r1, [pc, #12]	@ (8009044 <stdio_exit_handler+0x10>)
 8009038:	4803      	ldr	r0, [pc, #12]	@ (8009048 <stdio_exit_handler+0x14>)
 800903a:	f000 b869 	b.w	8009110 <_fwalk_sglue>
 800903e:	bf00      	nop
 8009040:	20000010 	.word	0x20000010
 8009044:	08009c3d 	.word	0x08009c3d
 8009048:	20000020 	.word	0x20000020

0800904c <cleanup_stdio>:
 800904c:	6841      	ldr	r1, [r0, #4]
 800904e:	4b0c      	ldr	r3, [pc, #48]	@ (8009080 <cleanup_stdio+0x34>)
 8009050:	4299      	cmp	r1, r3
 8009052:	b510      	push	{r4, lr}
 8009054:	4604      	mov	r4, r0
 8009056:	d001      	beq.n	800905c <cleanup_stdio+0x10>
 8009058:	f000 fdf0 	bl	8009c3c <_fflush_r>
 800905c:	68a1      	ldr	r1, [r4, #8]
 800905e:	4b09      	ldr	r3, [pc, #36]	@ (8009084 <cleanup_stdio+0x38>)
 8009060:	4299      	cmp	r1, r3
 8009062:	d002      	beq.n	800906a <cleanup_stdio+0x1e>
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fde9 	bl	8009c3c <_fflush_r>
 800906a:	68e1      	ldr	r1, [r4, #12]
 800906c:	4b06      	ldr	r3, [pc, #24]	@ (8009088 <cleanup_stdio+0x3c>)
 800906e:	4299      	cmp	r1, r3
 8009070:	d004      	beq.n	800907c <cleanup_stdio+0x30>
 8009072:	4620      	mov	r0, r4
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	f000 bde0 	b.w	8009c3c <_fflush_r>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	20004474 	.word	0x20004474
 8009084:	200044dc 	.word	0x200044dc
 8009088:	20004544 	.word	0x20004544

0800908c <global_stdio_init.part.0>:
 800908c:	b510      	push	{r4, lr}
 800908e:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <global_stdio_init.part.0+0x30>)
 8009090:	4c0b      	ldr	r4, [pc, #44]	@ (80090c0 <global_stdio_init.part.0+0x34>)
 8009092:	4a0c      	ldr	r2, [pc, #48]	@ (80090c4 <global_stdio_init.part.0+0x38>)
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	4620      	mov	r0, r4
 8009098:	2200      	movs	r2, #0
 800909a:	2104      	movs	r1, #4
 800909c:	f7ff ff94 	bl	8008fc8 <std>
 80090a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090a4:	2201      	movs	r2, #1
 80090a6:	2109      	movs	r1, #9
 80090a8:	f7ff ff8e 	bl	8008fc8 <std>
 80090ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090b0:	2202      	movs	r2, #2
 80090b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b6:	2112      	movs	r1, #18
 80090b8:	f7ff bf86 	b.w	8008fc8 <std>
 80090bc:	200045ac 	.word	0x200045ac
 80090c0:	20004474 	.word	0x20004474
 80090c4:	08009035 	.word	0x08009035

080090c8 <__sfp_lock_acquire>:
 80090c8:	4801      	ldr	r0, [pc, #4]	@ (80090d0 <__sfp_lock_acquire+0x8>)
 80090ca:	f000 ba08 	b.w	80094de <__retarget_lock_acquire_recursive>
 80090ce:	bf00      	nop
 80090d0:	200045b5 	.word	0x200045b5

080090d4 <__sfp_lock_release>:
 80090d4:	4801      	ldr	r0, [pc, #4]	@ (80090dc <__sfp_lock_release+0x8>)
 80090d6:	f000 ba03 	b.w	80094e0 <__retarget_lock_release_recursive>
 80090da:	bf00      	nop
 80090dc:	200045b5 	.word	0x200045b5

080090e0 <__sinit>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4604      	mov	r4, r0
 80090e4:	f7ff fff0 	bl	80090c8 <__sfp_lock_acquire>
 80090e8:	6a23      	ldr	r3, [r4, #32]
 80090ea:	b11b      	cbz	r3, 80090f4 <__sinit+0x14>
 80090ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f0:	f7ff bff0 	b.w	80090d4 <__sfp_lock_release>
 80090f4:	4b04      	ldr	r3, [pc, #16]	@ (8009108 <__sinit+0x28>)
 80090f6:	6223      	str	r3, [r4, #32]
 80090f8:	4b04      	ldr	r3, [pc, #16]	@ (800910c <__sinit+0x2c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f5      	bne.n	80090ec <__sinit+0xc>
 8009100:	f7ff ffc4 	bl	800908c <global_stdio_init.part.0>
 8009104:	e7f2      	b.n	80090ec <__sinit+0xc>
 8009106:	bf00      	nop
 8009108:	0800904d 	.word	0x0800904d
 800910c:	200045ac 	.word	0x200045ac

08009110 <_fwalk_sglue>:
 8009110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009114:	4607      	mov	r7, r0
 8009116:	4688      	mov	r8, r1
 8009118:	4614      	mov	r4, r2
 800911a:	2600      	movs	r6, #0
 800911c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009120:	f1b9 0901 	subs.w	r9, r9, #1
 8009124:	d505      	bpl.n	8009132 <_fwalk_sglue+0x22>
 8009126:	6824      	ldr	r4, [r4, #0]
 8009128:	2c00      	cmp	r4, #0
 800912a:	d1f7      	bne.n	800911c <_fwalk_sglue+0xc>
 800912c:	4630      	mov	r0, r6
 800912e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d907      	bls.n	8009148 <_fwalk_sglue+0x38>
 8009138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800913c:	3301      	adds	r3, #1
 800913e:	d003      	beq.n	8009148 <_fwalk_sglue+0x38>
 8009140:	4629      	mov	r1, r5
 8009142:	4638      	mov	r0, r7
 8009144:	47c0      	blx	r8
 8009146:	4306      	orrs	r6, r0
 8009148:	3568      	adds	r5, #104	@ 0x68
 800914a:	e7e9      	b.n	8009120 <_fwalk_sglue+0x10>

0800914c <iprintf>:
 800914c:	b40f      	push	{r0, r1, r2, r3}
 800914e:	b507      	push	{r0, r1, r2, lr}
 8009150:	4906      	ldr	r1, [pc, #24]	@ (800916c <iprintf+0x20>)
 8009152:	ab04      	add	r3, sp, #16
 8009154:	6808      	ldr	r0, [r1, #0]
 8009156:	f853 2b04 	ldr.w	r2, [r3], #4
 800915a:	6881      	ldr	r1, [r0, #8]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	f000 fa43 	bl	80095e8 <_vfiprintf_r>
 8009162:	b003      	add	sp, #12
 8009164:	f85d eb04 	ldr.w	lr, [sp], #4
 8009168:	b004      	add	sp, #16
 800916a:	4770      	bx	lr
 800916c:	2000001c 	.word	0x2000001c

08009170 <__sread>:
 8009170:	b510      	push	{r4, lr}
 8009172:	460c      	mov	r4, r1
 8009174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009178:	f000 f952 	bl	8009420 <_read_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	bfab      	itete	ge
 8009180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009182:	89a3      	ldrhlt	r3, [r4, #12]
 8009184:	181b      	addge	r3, r3, r0
 8009186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800918a:	bfac      	ite	ge
 800918c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800918e:	81a3      	strhlt	r3, [r4, #12]
 8009190:	bd10      	pop	{r4, pc}

08009192 <__swrite>:
 8009192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009196:	461f      	mov	r7, r3
 8009198:	898b      	ldrh	r3, [r1, #12]
 800919a:	05db      	lsls	r3, r3, #23
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	4616      	mov	r6, r2
 80091a2:	d505      	bpl.n	80091b0 <__swrite+0x1e>
 80091a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a8:	2302      	movs	r3, #2
 80091aa:	2200      	movs	r2, #0
 80091ac:	f000 f926 	bl	80093fc <_lseek_r>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	4632      	mov	r2, r6
 80091be:	463b      	mov	r3, r7
 80091c0:	4628      	mov	r0, r5
 80091c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	f000 b94d 	b.w	8009464 <_write_r>

080091ca <__sseek>:
 80091ca:	b510      	push	{r4, lr}
 80091cc:	460c      	mov	r4, r1
 80091ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d2:	f000 f913 	bl	80093fc <_lseek_r>
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	bf15      	itete	ne
 80091dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091e6:	81a3      	strheq	r3, [r4, #12]
 80091e8:	bf18      	it	ne
 80091ea:	81a3      	strhne	r3, [r4, #12]
 80091ec:	bd10      	pop	{r4, pc}

080091ee <__sclose>:
 80091ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f2:	f000 b89d 	b.w	8009330 <_close_r>

080091f6 <__swbuf_r>:
 80091f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f8:	460e      	mov	r6, r1
 80091fa:	4614      	mov	r4, r2
 80091fc:	4605      	mov	r5, r0
 80091fe:	b118      	cbz	r0, 8009208 <__swbuf_r+0x12>
 8009200:	6a03      	ldr	r3, [r0, #32]
 8009202:	b90b      	cbnz	r3, 8009208 <__swbuf_r+0x12>
 8009204:	f7ff ff6c 	bl	80090e0 <__sinit>
 8009208:	69a3      	ldr	r3, [r4, #24]
 800920a:	60a3      	str	r3, [r4, #8]
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	071a      	lsls	r2, r3, #28
 8009210:	d501      	bpl.n	8009216 <__swbuf_r+0x20>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	b943      	cbnz	r3, 8009228 <__swbuf_r+0x32>
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f000 f82b 	bl	8009274 <__swsetup_r>
 800921e:	b118      	cbz	r0, 8009228 <__swbuf_r+0x32>
 8009220:	f04f 37ff 	mov.w	r7, #4294967295
 8009224:	4638      	mov	r0, r7
 8009226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	6922      	ldr	r2, [r4, #16]
 800922c:	1a98      	subs	r0, r3, r2
 800922e:	6963      	ldr	r3, [r4, #20]
 8009230:	b2f6      	uxtb	r6, r6
 8009232:	4283      	cmp	r3, r0
 8009234:	4637      	mov	r7, r6
 8009236:	dc05      	bgt.n	8009244 <__swbuf_r+0x4e>
 8009238:	4621      	mov	r1, r4
 800923a:	4628      	mov	r0, r5
 800923c:	f000 fcfe 	bl	8009c3c <_fflush_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	d1ed      	bne.n	8009220 <__swbuf_r+0x2a>
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	3b01      	subs	r3, #1
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	701e      	strb	r6, [r3, #0]
 8009252:	6962      	ldr	r2, [r4, #20]
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	429a      	cmp	r2, r3
 8009258:	d004      	beq.n	8009264 <__swbuf_r+0x6e>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	07db      	lsls	r3, r3, #31
 800925e:	d5e1      	bpl.n	8009224 <__swbuf_r+0x2e>
 8009260:	2e0a      	cmp	r6, #10
 8009262:	d1df      	bne.n	8009224 <__swbuf_r+0x2e>
 8009264:	4621      	mov	r1, r4
 8009266:	4628      	mov	r0, r5
 8009268:	f000 fce8 	bl	8009c3c <_fflush_r>
 800926c:	2800      	cmp	r0, #0
 800926e:	d0d9      	beq.n	8009224 <__swbuf_r+0x2e>
 8009270:	e7d6      	b.n	8009220 <__swbuf_r+0x2a>
	...

08009274 <__swsetup_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4b29      	ldr	r3, [pc, #164]	@ (800931c <__swsetup_r+0xa8>)
 8009278:	4605      	mov	r5, r0
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	460c      	mov	r4, r1
 800927e:	b118      	cbz	r0, 8009288 <__swsetup_r+0x14>
 8009280:	6a03      	ldr	r3, [r0, #32]
 8009282:	b90b      	cbnz	r3, 8009288 <__swsetup_r+0x14>
 8009284:	f7ff ff2c 	bl	80090e0 <__sinit>
 8009288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928c:	0719      	lsls	r1, r3, #28
 800928e:	d422      	bmi.n	80092d6 <__swsetup_r+0x62>
 8009290:	06da      	lsls	r2, r3, #27
 8009292:	d407      	bmi.n	80092a4 <__swsetup_r+0x30>
 8009294:	2209      	movs	r2, #9
 8009296:	602a      	str	r2, [r5, #0]
 8009298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	e033      	b.n	800930c <__swsetup_r+0x98>
 80092a4:	0758      	lsls	r0, r3, #29
 80092a6:	d512      	bpl.n	80092ce <__swsetup_r+0x5a>
 80092a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092aa:	b141      	cbz	r1, 80092be <__swsetup_r+0x4a>
 80092ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d002      	beq.n	80092ba <__swsetup_r+0x46>
 80092b4:	4628      	mov	r0, r5
 80092b6:	f000 f923 	bl	8009500 <_free_r>
 80092ba:	2300      	movs	r3, #0
 80092bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	2300      	movs	r3, #0
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f043 0308 	orr.w	r3, r3, #8
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	b94b      	cbnz	r3, 80092ee <__swsetup_r+0x7a>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092e4:	d003      	beq.n	80092ee <__swsetup_r+0x7a>
 80092e6:	4621      	mov	r1, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	f000 fcf5 	bl	8009cd8 <__smakebuf_r>
 80092ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f2:	f013 0201 	ands.w	r2, r3, #1
 80092f6:	d00a      	beq.n	800930e <__swsetup_r+0x9a>
 80092f8:	2200      	movs	r2, #0
 80092fa:	60a2      	str	r2, [r4, #8]
 80092fc:	6962      	ldr	r2, [r4, #20]
 80092fe:	4252      	negs	r2, r2
 8009300:	61a2      	str	r2, [r4, #24]
 8009302:	6922      	ldr	r2, [r4, #16]
 8009304:	b942      	cbnz	r2, 8009318 <__swsetup_r+0xa4>
 8009306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800930a:	d1c5      	bne.n	8009298 <__swsetup_r+0x24>
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	0799      	lsls	r1, r3, #30
 8009310:	bf58      	it	pl
 8009312:	6962      	ldrpl	r2, [r4, #20]
 8009314:	60a2      	str	r2, [r4, #8]
 8009316:	e7f4      	b.n	8009302 <__swsetup_r+0x8e>
 8009318:	2000      	movs	r0, #0
 800931a:	e7f7      	b.n	800930c <__swsetup_r+0x98>
 800931c:	2000001c 	.word	0x2000001c

08009320 <memset>:
 8009320:	4402      	add	r2, r0
 8009322:	4603      	mov	r3, r0
 8009324:	4293      	cmp	r3, r2
 8009326:	d100      	bne.n	800932a <memset+0xa>
 8009328:	4770      	bx	lr
 800932a:	f803 1b01 	strb.w	r1, [r3], #1
 800932e:	e7f9      	b.n	8009324 <memset+0x4>

08009330 <_close_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	@ (800934c <_close_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f7 fe2d 	bl	8000f9a <_close>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_close_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_close_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	200045b0 	.word	0x200045b0

08009350 <_reclaim_reent>:
 8009350:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <_reclaim_reent+0xa8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4283      	cmp	r3, r0
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	4604      	mov	r4, r0
 800935a:	d04b      	beq.n	80093f4 <_reclaim_reent+0xa4>
 800935c:	69c3      	ldr	r3, [r0, #28]
 800935e:	b1ab      	cbz	r3, 800938c <_reclaim_reent+0x3c>
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	b16b      	cbz	r3, 8009380 <_reclaim_reent+0x30>
 8009364:	2500      	movs	r5, #0
 8009366:	69e3      	ldr	r3, [r4, #28]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	5959      	ldr	r1, [r3, r5]
 800936c:	2900      	cmp	r1, #0
 800936e:	d13b      	bne.n	80093e8 <_reclaim_reent+0x98>
 8009370:	3504      	adds	r5, #4
 8009372:	2d80      	cmp	r5, #128	@ 0x80
 8009374:	d1f7      	bne.n	8009366 <_reclaim_reent+0x16>
 8009376:	69e3      	ldr	r3, [r4, #28]
 8009378:	4620      	mov	r0, r4
 800937a:	68d9      	ldr	r1, [r3, #12]
 800937c:	f000 f8c0 	bl	8009500 <_free_r>
 8009380:	69e3      	ldr	r3, [r4, #28]
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	b111      	cbz	r1, 800938c <_reclaim_reent+0x3c>
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f8ba 	bl	8009500 <_free_r>
 800938c:	6961      	ldr	r1, [r4, #20]
 800938e:	b111      	cbz	r1, 8009396 <_reclaim_reent+0x46>
 8009390:	4620      	mov	r0, r4
 8009392:	f000 f8b5 	bl	8009500 <_free_r>
 8009396:	69e1      	ldr	r1, [r4, #28]
 8009398:	b111      	cbz	r1, 80093a0 <_reclaim_reent+0x50>
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f8b0 	bl	8009500 <_free_r>
 80093a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80093a2:	b111      	cbz	r1, 80093aa <_reclaim_reent+0x5a>
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 f8ab 	bl	8009500 <_free_r>
 80093aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093ac:	b111      	cbz	r1, 80093b4 <_reclaim_reent+0x64>
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 f8a6 	bl	8009500 <_free_r>
 80093b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80093b6:	b111      	cbz	r1, 80093be <_reclaim_reent+0x6e>
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 f8a1 	bl	8009500 <_free_r>
 80093be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80093c0:	b111      	cbz	r1, 80093c8 <_reclaim_reent+0x78>
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 f89c 	bl	8009500 <_free_r>
 80093c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80093ca:	b111      	cbz	r1, 80093d2 <_reclaim_reent+0x82>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 f897 	bl	8009500 <_free_r>
 80093d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80093d4:	b111      	cbz	r1, 80093dc <_reclaim_reent+0x8c>
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f892 	bl	8009500 <_free_r>
 80093dc:	6a23      	ldr	r3, [r4, #32]
 80093de:	b14b      	cbz	r3, 80093f4 <_reclaim_reent+0xa4>
 80093e0:	4620      	mov	r0, r4
 80093e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093e6:	4718      	bx	r3
 80093e8:	680e      	ldr	r6, [r1, #0]
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f888 	bl	8009500 <_free_r>
 80093f0:	4631      	mov	r1, r6
 80093f2:	e7bb      	b.n	800936c <_reclaim_reent+0x1c>
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	bf00      	nop
 80093f8:	2000001c 	.word	0x2000001c

080093fc <_lseek_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d07      	ldr	r5, [pc, #28]	@ (800941c <_lseek_r+0x20>)
 8009400:	4604      	mov	r4, r0
 8009402:	4608      	mov	r0, r1
 8009404:	4611      	mov	r1, r2
 8009406:	2200      	movs	r2, #0
 8009408:	602a      	str	r2, [r5, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	f7f7 fdec 	bl	8000fe8 <_lseek>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_lseek_r+0x1e>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_lseek_r+0x1e>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	200045b0 	.word	0x200045b0

08009420 <_read_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	@ (8009440 <_read_r+0x20>)
 8009424:	4604      	mov	r4, r0
 8009426:	4608      	mov	r0, r1
 8009428:	4611      	mov	r1, r2
 800942a:	2200      	movs	r2, #0
 800942c:	602a      	str	r2, [r5, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	f7f7 fd96 	bl	8000f60 <_read>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_read_r+0x1e>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_read_r+0x1e>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	200045b0 	.word	0x200045b0

08009444 <_sbrk_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d06      	ldr	r5, [pc, #24]	@ (8009460 <_sbrk_r+0x1c>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f7 fdd8 	bl	8001004 <_sbrk>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_sbrk_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_sbrk_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	200045b0 	.word	0x200045b0

08009464 <_write_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	@ (8009484 <_write_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f7 f8d5 	bl	8000622 <_write>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_write_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_write_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	200045b0 	.word	0x200045b0

08009488 <__errno>:
 8009488:	4b01      	ldr	r3, [pc, #4]	@ (8009490 <__errno+0x8>)
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2000001c 	.word	0x2000001c

08009494 <__libc_init_array>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4d0d      	ldr	r5, [pc, #52]	@ (80094cc <__libc_init_array+0x38>)
 8009498:	4c0d      	ldr	r4, [pc, #52]	@ (80094d0 <__libc_init_array+0x3c>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	2600      	movs	r6, #0
 80094a0:	42a6      	cmp	r6, r4
 80094a2:	d109      	bne.n	80094b8 <__libc_init_array+0x24>
 80094a4:	4d0b      	ldr	r5, [pc, #44]	@ (80094d4 <__libc_init_array+0x40>)
 80094a6:	4c0c      	ldr	r4, [pc, #48]	@ (80094d8 <__libc_init_array+0x44>)
 80094a8:	f000 fc74 	bl	8009d94 <_init>
 80094ac:	1b64      	subs	r4, r4, r5
 80094ae:	10a4      	asrs	r4, r4, #2
 80094b0:	2600      	movs	r6, #0
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d105      	bne.n	80094c2 <__libc_init_array+0x2e>
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094bc:	4798      	blx	r3
 80094be:	3601      	adds	r6, #1
 80094c0:	e7ee      	b.n	80094a0 <__libc_init_array+0xc>
 80094c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c6:	4798      	blx	r3
 80094c8:	3601      	adds	r6, #1
 80094ca:	e7f2      	b.n	80094b2 <__libc_init_array+0x1e>
 80094cc:	08009e84 	.word	0x08009e84
 80094d0:	08009e84 	.word	0x08009e84
 80094d4:	08009e84 	.word	0x08009e84
 80094d8:	08009e88 	.word	0x08009e88

080094dc <__retarget_lock_init_recursive>:
 80094dc:	4770      	bx	lr

080094de <__retarget_lock_acquire_recursive>:
 80094de:	4770      	bx	lr

080094e0 <__retarget_lock_release_recursive>:
 80094e0:	4770      	bx	lr

080094e2 <memcpy>:
 80094e2:	440a      	add	r2, r1
 80094e4:	4291      	cmp	r1, r2
 80094e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80094ea:	d100      	bne.n	80094ee <memcpy+0xc>
 80094ec:	4770      	bx	lr
 80094ee:	b510      	push	{r4, lr}
 80094f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f8:	4291      	cmp	r1, r2
 80094fa:	d1f9      	bne.n	80094f0 <memcpy+0xe>
 80094fc:	bd10      	pop	{r4, pc}
	...

08009500 <_free_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4605      	mov	r5, r0
 8009504:	2900      	cmp	r1, #0
 8009506:	d041      	beq.n	800958c <_free_r+0x8c>
 8009508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950c:	1f0c      	subs	r4, r1, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfb8      	it	lt
 8009512:	18e4      	addlt	r4, r4, r3
 8009514:	f7ff fd4c 	bl	8008fb0 <__malloc_lock>
 8009518:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <_free_r+0x90>)
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	b933      	cbnz	r3, 800952c <_free_r+0x2c>
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	6014      	str	r4, [r2, #0]
 8009522:	4628      	mov	r0, r5
 8009524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009528:	f7ff bd48 	b.w	8008fbc <__malloc_unlock>
 800952c:	42a3      	cmp	r3, r4
 800952e:	d908      	bls.n	8009542 <_free_r+0x42>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	1821      	adds	r1, r4, r0
 8009534:	428b      	cmp	r3, r1
 8009536:	bf01      	itttt	eq
 8009538:	6819      	ldreq	r1, [r3, #0]
 800953a:	685b      	ldreq	r3, [r3, #4]
 800953c:	1809      	addeq	r1, r1, r0
 800953e:	6021      	streq	r1, [r4, #0]
 8009540:	e7ed      	b.n	800951e <_free_r+0x1e>
 8009542:	461a      	mov	r2, r3
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	b10b      	cbz	r3, 800954c <_free_r+0x4c>
 8009548:	42a3      	cmp	r3, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x42>
 800954c:	6811      	ldr	r1, [r2, #0]
 800954e:	1850      	adds	r0, r2, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x6c>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1850      	adds	r0, r2, r1
 800955a:	4283      	cmp	r3, r0
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	d1e0      	bne.n	8009522 <_free_r+0x22>
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	6053      	str	r3, [r2, #4]
 8009566:	4408      	add	r0, r1
 8009568:	6010      	str	r0, [r2, #0]
 800956a:	e7da      	b.n	8009522 <_free_r+0x22>
 800956c:	d902      	bls.n	8009574 <_free_r+0x74>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d6      	b.n	8009522 <_free_r+0x22>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428b      	cmp	r3, r1
 800957a:	bf04      	itt	eq
 800957c:	6819      	ldreq	r1, [r3, #0]
 800957e:	685b      	ldreq	r3, [r3, #4]
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	6054      	str	r4, [r2, #4]
 800958a:	e7ca      	b.n	8009522 <_free_r+0x22>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	20004470 	.word	0x20004470

08009594 <__sfputc_r>:
 8009594:	6893      	ldr	r3, [r2, #8]
 8009596:	3b01      	subs	r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	b410      	push	{r4}
 800959c:	6093      	str	r3, [r2, #8]
 800959e:	da08      	bge.n	80095b2 <__sfputc_r+0x1e>
 80095a0:	6994      	ldr	r4, [r2, #24]
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	db01      	blt.n	80095aa <__sfputc_r+0x16>
 80095a6:	290a      	cmp	r1, #10
 80095a8:	d103      	bne.n	80095b2 <__sfputc_r+0x1e>
 80095aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ae:	f7ff be22 	b.w	80091f6 <__swbuf_r>
 80095b2:	6813      	ldr	r3, [r2, #0]
 80095b4:	1c58      	adds	r0, r3, #1
 80095b6:	6010      	str	r0, [r2, #0]
 80095b8:	7019      	strb	r1, [r3, #0]
 80095ba:	4608      	mov	r0, r1
 80095bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <__sfputs_r>:
 80095c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c4:	4606      	mov	r6, r0
 80095c6:	460f      	mov	r7, r1
 80095c8:	4614      	mov	r4, r2
 80095ca:	18d5      	adds	r5, r2, r3
 80095cc:	42ac      	cmp	r4, r5
 80095ce:	d101      	bne.n	80095d4 <__sfputs_r+0x12>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e007      	b.n	80095e4 <__sfputs_r+0x22>
 80095d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d8:	463a      	mov	r2, r7
 80095da:	4630      	mov	r0, r6
 80095dc:	f7ff ffda 	bl	8009594 <__sfputc_r>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d1f3      	bne.n	80095cc <__sfputs_r+0xa>
 80095e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e8 <_vfiprintf_r>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	460d      	mov	r5, r1
 80095ee:	b09d      	sub	sp, #116	@ 0x74
 80095f0:	4614      	mov	r4, r2
 80095f2:	4698      	mov	r8, r3
 80095f4:	4606      	mov	r6, r0
 80095f6:	b118      	cbz	r0, 8009600 <_vfiprintf_r+0x18>
 80095f8:	6a03      	ldr	r3, [r0, #32]
 80095fa:	b90b      	cbnz	r3, 8009600 <_vfiprintf_r+0x18>
 80095fc:	f7ff fd70 	bl	80090e0 <__sinit>
 8009600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	d405      	bmi.n	8009612 <_vfiprintf_r+0x2a>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	059a      	lsls	r2, r3, #22
 800960a:	d402      	bmi.n	8009612 <_vfiprintf_r+0x2a>
 800960c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800960e:	f7ff ff66 	bl	80094de <__retarget_lock_acquire_recursive>
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	071b      	lsls	r3, r3, #28
 8009616:	d501      	bpl.n	800961c <_vfiprintf_r+0x34>
 8009618:	692b      	ldr	r3, [r5, #16]
 800961a:	b99b      	cbnz	r3, 8009644 <_vfiprintf_r+0x5c>
 800961c:	4629      	mov	r1, r5
 800961e:	4630      	mov	r0, r6
 8009620:	f7ff fe28 	bl	8009274 <__swsetup_r>
 8009624:	b170      	cbz	r0, 8009644 <_vfiprintf_r+0x5c>
 8009626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009628:	07dc      	lsls	r4, r3, #31
 800962a:	d504      	bpl.n	8009636 <_vfiprintf_r+0x4e>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b01d      	add	sp, #116	@ 0x74
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	0598      	lsls	r0, r3, #22
 800963a:	d4f7      	bmi.n	800962c <_vfiprintf_r+0x44>
 800963c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800963e:	f7ff ff4f 	bl	80094e0 <__retarget_lock_release_recursive>
 8009642:	e7f3      	b.n	800962c <_vfiprintf_r+0x44>
 8009644:	2300      	movs	r3, #0
 8009646:	9309      	str	r3, [sp, #36]	@ 0x24
 8009648:	2320      	movs	r3, #32
 800964a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800964e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009652:	2330      	movs	r3, #48	@ 0x30
 8009654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009804 <_vfiprintf_r+0x21c>
 8009658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800965c:	f04f 0901 	mov.w	r9, #1
 8009660:	4623      	mov	r3, r4
 8009662:	469a      	mov	sl, r3
 8009664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009668:	b10a      	cbz	r2, 800966e <_vfiprintf_r+0x86>
 800966a:	2a25      	cmp	r2, #37	@ 0x25
 800966c:	d1f9      	bne.n	8009662 <_vfiprintf_r+0x7a>
 800966e:	ebba 0b04 	subs.w	fp, sl, r4
 8009672:	d00b      	beq.n	800968c <_vfiprintf_r+0xa4>
 8009674:	465b      	mov	r3, fp
 8009676:	4622      	mov	r2, r4
 8009678:	4629      	mov	r1, r5
 800967a:	4630      	mov	r0, r6
 800967c:	f7ff ffa1 	bl	80095c2 <__sfputs_r>
 8009680:	3001      	adds	r0, #1
 8009682:	f000 80a7 	beq.w	80097d4 <_vfiprintf_r+0x1ec>
 8009686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009688:	445a      	add	r2, fp
 800968a:	9209      	str	r2, [sp, #36]	@ 0x24
 800968c:	f89a 3000 	ldrb.w	r3, [sl]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 809f 	beq.w	80097d4 <_vfiprintf_r+0x1ec>
 8009696:	2300      	movs	r3, #0
 8009698:	f04f 32ff 	mov.w	r2, #4294967295
 800969c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a0:	f10a 0a01 	add.w	sl, sl, #1
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80096ae:	4654      	mov	r4, sl
 80096b0:	2205      	movs	r2, #5
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4853      	ldr	r0, [pc, #332]	@ (8009804 <_vfiprintf_r+0x21c>)
 80096b8:	f7f6 fdaa 	bl	8000210 <memchr>
 80096bc:	9a04      	ldr	r2, [sp, #16]
 80096be:	b9d8      	cbnz	r0, 80096f8 <_vfiprintf_r+0x110>
 80096c0:	06d1      	lsls	r1, r2, #27
 80096c2:	bf44      	itt	mi
 80096c4:	2320      	movmi	r3, #32
 80096c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ca:	0713      	lsls	r3, r2, #28
 80096cc:	bf44      	itt	mi
 80096ce:	232b      	movmi	r3, #43	@ 0x2b
 80096d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d4:	f89a 3000 	ldrb.w	r3, [sl]
 80096d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096da:	d015      	beq.n	8009708 <_vfiprintf_r+0x120>
 80096dc:	9a07      	ldr	r2, [sp, #28]
 80096de:	4654      	mov	r4, sl
 80096e0:	2000      	movs	r0, #0
 80096e2:	f04f 0c0a 	mov.w	ip, #10
 80096e6:	4621      	mov	r1, r4
 80096e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ec:	3b30      	subs	r3, #48	@ 0x30
 80096ee:	2b09      	cmp	r3, #9
 80096f0:	d94b      	bls.n	800978a <_vfiprintf_r+0x1a2>
 80096f2:	b1b0      	cbz	r0, 8009722 <_vfiprintf_r+0x13a>
 80096f4:	9207      	str	r2, [sp, #28]
 80096f6:	e014      	b.n	8009722 <_vfiprintf_r+0x13a>
 80096f8:	eba0 0308 	sub.w	r3, r0, r8
 80096fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009700:	4313      	orrs	r3, r2
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	46a2      	mov	sl, r4
 8009706:	e7d2      	b.n	80096ae <_vfiprintf_r+0xc6>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	1d19      	adds	r1, r3, #4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	9103      	str	r1, [sp, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbb      	ittet	lt
 8009714:	425b      	neglt	r3, r3
 8009716:	f042 0202 	orrlt.w	r2, r2, #2
 800971a:	9307      	strge	r3, [sp, #28]
 800971c:	9307      	strlt	r3, [sp, #28]
 800971e:	bfb8      	it	lt
 8009720:	9204      	strlt	r2, [sp, #16]
 8009722:	7823      	ldrb	r3, [r4, #0]
 8009724:	2b2e      	cmp	r3, #46	@ 0x2e
 8009726:	d10a      	bne.n	800973e <_vfiprintf_r+0x156>
 8009728:	7863      	ldrb	r3, [r4, #1]
 800972a:	2b2a      	cmp	r3, #42	@ 0x2a
 800972c:	d132      	bne.n	8009794 <_vfiprintf_r+0x1ac>
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	1d1a      	adds	r2, r3, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9203      	str	r2, [sp, #12]
 8009736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800973a:	3402      	adds	r4, #2
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009814 <_vfiprintf_r+0x22c>
 8009742:	7821      	ldrb	r1, [r4, #0]
 8009744:	2203      	movs	r2, #3
 8009746:	4650      	mov	r0, sl
 8009748:	f7f6 fd62 	bl	8000210 <memchr>
 800974c:	b138      	cbz	r0, 800975e <_vfiprintf_r+0x176>
 800974e:	9b04      	ldr	r3, [sp, #16]
 8009750:	eba0 000a 	sub.w	r0, r0, sl
 8009754:	2240      	movs	r2, #64	@ 0x40
 8009756:	4082      	lsls	r2, r0
 8009758:	4313      	orrs	r3, r2
 800975a:	3401      	adds	r4, #1
 800975c:	9304      	str	r3, [sp, #16]
 800975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009762:	4829      	ldr	r0, [pc, #164]	@ (8009808 <_vfiprintf_r+0x220>)
 8009764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009768:	2206      	movs	r2, #6
 800976a:	f7f6 fd51 	bl	8000210 <memchr>
 800976e:	2800      	cmp	r0, #0
 8009770:	d03f      	beq.n	80097f2 <_vfiprintf_r+0x20a>
 8009772:	4b26      	ldr	r3, [pc, #152]	@ (800980c <_vfiprintf_r+0x224>)
 8009774:	bb1b      	cbnz	r3, 80097be <_vfiprintf_r+0x1d6>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	3307      	adds	r3, #7
 800977a:	f023 0307 	bic.w	r3, r3, #7
 800977e:	3308      	adds	r3, #8
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009784:	443b      	add	r3, r7
 8009786:	9309      	str	r3, [sp, #36]	@ 0x24
 8009788:	e76a      	b.n	8009660 <_vfiprintf_r+0x78>
 800978a:	fb0c 3202 	mla	r2, ip, r2, r3
 800978e:	460c      	mov	r4, r1
 8009790:	2001      	movs	r0, #1
 8009792:	e7a8      	b.n	80096e6 <_vfiprintf_r+0xfe>
 8009794:	2300      	movs	r3, #0
 8009796:	3401      	adds	r4, #1
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	4619      	mov	r1, r3
 800979c:	f04f 0c0a 	mov.w	ip, #10
 80097a0:	4620      	mov	r0, r4
 80097a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a6:	3a30      	subs	r2, #48	@ 0x30
 80097a8:	2a09      	cmp	r2, #9
 80097aa:	d903      	bls.n	80097b4 <_vfiprintf_r+0x1cc>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0c6      	beq.n	800973e <_vfiprintf_r+0x156>
 80097b0:	9105      	str	r1, [sp, #20]
 80097b2:	e7c4      	b.n	800973e <_vfiprintf_r+0x156>
 80097b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b8:	4604      	mov	r4, r0
 80097ba:	2301      	movs	r3, #1
 80097bc:	e7f0      	b.n	80097a0 <_vfiprintf_r+0x1b8>
 80097be:	ab03      	add	r3, sp, #12
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	462a      	mov	r2, r5
 80097c4:	4b12      	ldr	r3, [pc, #72]	@ (8009810 <_vfiprintf_r+0x228>)
 80097c6:	a904      	add	r1, sp, #16
 80097c8:	4630      	mov	r0, r6
 80097ca:	f3af 8000 	nop.w
 80097ce:	4607      	mov	r7, r0
 80097d0:	1c78      	adds	r0, r7, #1
 80097d2:	d1d6      	bne.n	8009782 <_vfiprintf_r+0x19a>
 80097d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	d405      	bmi.n	80097e6 <_vfiprintf_r+0x1fe>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	059a      	lsls	r2, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_vfiprintf_r+0x1fe>
 80097e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097e2:	f7ff fe7d 	bl	80094e0 <__retarget_lock_release_recursive>
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	065b      	lsls	r3, r3, #25
 80097ea:	f53f af1f 	bmi.w	800962c <_vfiprintf_r+0x44>
 80097ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097f0:	e71e      	b.n	8009630 <_vfiprintf_r+0x48>
 80097f2:	ab03      	add	r3, sp, #12
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	462a      	mov	r2, r5
 80097f8:	4b05      	ldr	r3, [pc, #20]	@ (8009810 <_vfiprintf_r+0x228>)
 80097fa:	a904      	add	r1, sp, #16
 80097fc:	4630      	mov	r0, r6
 80097fe:	f000 f879 	bl	80098f4 <_printf_i>
 8009802:	e7e4      	b.n	80097ce <_vfiprintf_r+0x1e6>
 8009804:	08009e48 	.word	0x08009e48
 8009808:	08009e52 	.word	0x08009e52
 800980c:	00000000 	.word	0x00000000
 8009810:	080095c3 	.word	0x080095c3
 8009814:	08009e4e 	.word	0x08009e4e

08009818 <_printf_common>:
 8009818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	4616      	mov	r6, r2
 800981e:	4698      	mov	r8, r3
 8009820:	688a      	ldr	r2, [r1, #8]
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009828:	4293      	cmp	r3, r2
 800982a:	bfb8      	it	lt
 800982c:	4613      	movlt	r3, r2
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009834:	4607      	mov	r7, r0
 8009836:	460c      	mov	r4, r1
 8009838:	b10a      	cbz	r2, 800983e <_printf_common+0x26>
 800983a:	3301      	adds	r3, #1
 800983c:	6033      	str	r3, [r6, #0]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	0699      	lsls	r1, r3, #26
 8009842:	bf42      	ittt	mi
 8009844:	6833      	ldrmi	r3, [r6, #0]
 8009846:	3302      	addmi	r3, #2
 8009848:	6033      	strmi	r3, [r6, #0]
 800984a:	6825      	ldr	r5, [r4, #0]
 800984c:	f015 0506 	ands.w	r5, r5, #6
 8009850:	d106      	bne.n	8009860 <_printf_common+0x48>
 8009852:	f104 0a19 	add.w	sl, r4, #25
 8009856:	68e3      	ldr	r3, [r4, #12]
 8009858:	6832      	ldr	r2, [r6, #0]
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	42ab      	cmp	r3, r5
 800985e:	dc26      	bgt.n	80098ae <_printf_common+0x96>
 8009860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009864:	6822      	ldr	r2, [r4, #0]
 8009866:	3b00      	subs	r3, #0
 8009868:	bf18      	it	ne
 800986a:	2301      	movne	r3, #1
 800986c:	0692      	lsls	r2, r2, #26
 800986e:	d42b      	bmi.n	80098c8 <_printf_common+0xb0>
 8009870:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009874:	4641      	mov	r1, r8
 8009876:	4638      	mov	r0, r7
 8009878:	47c8      	blx	r9
 800987a:	3001      	adds	r0, #1
 800987c:	d01e      	beq.n	80098bc <_printf_common+0xa4>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	6922      	ldr	r2, [r4, #16]
 8009882:	f003 0306 	and.w	r3, r3, #6
 8009886:	2b04      	cmp	r3, #4
 8009888:	bf02      	ittt	eq
 800988a:	68e5      	ldreq	r5, [r4, #12]
 800988c:	6833      	ldreq	r3, [r6, #0]
 800988e:	1aed      	subeq	r5, r5, r3
 8009890:	68a3      	ldr	r3, [r4, #8]
 8009892:	bf0c      	ite	eq
 8009894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009898:	2500      	movne	r5, #0
 800989a:	4293      	cmp	r3, r2
 800989c:	bfc4      	itt	gt
 800989e:	1a9b      	subgt	r3, r3, r2
 80098a0:	18ed      	addgt	r5, r5, r3
 80098a2:	2600      	movs	r6, #0
 80098a4:	341a      	adds	r4, #26
 80098a6:	42b5      	cmp	r5, r6
 80098a8:	d11a      	bne.n	80098e0 <_printf_common+0xc8>
 80098aa:	2000      	movs	r0, #0
 80098ac:	e008      	b.n	80098c0 <_printf_common+0xa8>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4652      	mov	r2, sl
 80098b2:	4641      	mov	r1, r8
 80098b4:	4638      	mov	r0, r7
 80098b6:	47c8      	blx	r9
 80098b8:	3001      	adds	r0, #1
 80098ba:	d103      	bne.n	80098c4 <_printf_common+0xac>
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c4:	3501      	adds	r5, #1
 80098c6:	e7c6      	b.n	8009856 <_printf_common+0x3e>
 80098c8:	18e1      	adds	r1, r4, r3
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	2030      	movs	r0, #48	@ 0x30
 80098ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80098d2:	4422      	add	r2, r4
 80098d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098dc:	3302      	adds	r3, #2
 80098de:	e7c7      	b.n	8009870 <_printf_common+0x58>
 80098e0:	2301      	movs	r3, #1
 80098e2:	4622      	mov	r2, r4
 80098e4:	4641      	mov	r1, r8
 80098e6:	4638      	mov	r0, r7
 80098e8:	47c8      	blx	r9
 80098ea:	3001      	adds	r0, #1
 80098ec:	d0e6      	beq.n	80098bc <_printf_common+0xa4>
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7d9      	b.n	80098a6 <_printf_common+0x8e>
	...

080098f4 <_printf_i>:
 80098f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	7e0f      	ldrb	r7, [r1, #24]
 80098fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098fc:	2f78      	cmp	r7, #120	@ 0x78
 80098fe:	4691      	mov	r9, r2
 8009900:	4680      	mov	r8, r0
 8009902:	460c      	mov	r4, r1
 8009904:	469a      	mov	sl, r3
 8009906:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800990a:	d807      	bhi.n	800991c <_printf_i+0x28>
 800990c:	2f62      	cmp	r7, #98	@ 0x62
 800990e:	d80a      	bhi.n	8009926 <_printf_i+0x32>
 8009910:	2f00      	cmp	r7, #0
 8009912:	f000 80d2 	beq.w	8009aba <_printf_i+0x1c6>
 8009916:	2f58      	cmp	r7, #88	@ 0x58
 8009918:	f000 80b9 	beq.w	8009a8e <_printf_i+0x19a>
 800991c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009920:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009924:	e03a      	b.n	800999c <_printf_i+0xa8>
 8009926:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800992a:	2b15      	cmp	r3, #21
 800992c:	d8f6      	bhi.n	800991c <_printf_i+0x28>
 800992e:	a101      	add	r1, pc, #4	@ (adr r1, 8009934 <_printf_i+0x40>)
 8009930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009934:	0800998d 	.word	0x0800998d
 8009938:	080099a1 	.word	0x080099a1
 800993c:	0800991d 	.word	0x0800991d
 8009940:	0800991d 	.word	0x0800991d
 8009944:	0800991d 	.word	0x0800991d
 8009948:	0800991d 	.word	0x0800991d
 800994c:	080099a1 	.word	0x080099a1
 8009950:	0800991d 	.word	0x0800991d
 8009954:	0800991d 	.word	0x0800991d
 8009958:	0800991d 	.word	0x0800991d
 800995c:	0800991d 	.word	0x0800991d
 8009960:	08009aa1 	.word	0x08009aa1
 8009964:	080099cb 	.word	0x080099cb
 8009968:	08009a5b 	.word	0x08009a5b
 800996c:	0800991d 	.word	0x0800991d
 8009970:	0800991d 	.word	0x0800991d
 8009974:	08009ac3 	.word	0x08009ac3
 8009978:	0800991d 	.word	0x0800991d
 800997c:	080099cb 	.word	0x080099cb
 8009980:	0800991d 	.word	0x0800991d
 8009984:	0800991d 	.word	0x0800991d
 8009988:	08009a63 	.word	0x08009a63
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	1d1a      	adds	r2, r3, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6032      	str	r2, [r6, #0]
 8009994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800999c:	2301      	movs	r3, #1
 800999e:	e09d      	b.n	8009adc <_printf_i+0x1e8>
 80099a0:	6833      	ldr	r3, [r6, #0]
 80099a2:	6820      	ldr	r0, [r4, #0]
 80099a4:	1d19      	adds	r1, r3, #4
 80099a6:	6031      	str	r1, [r6, #0]
 80099a8:	0606      	lsls	r6, r0, #24
 80099aa:	d501      	bpl.n	80099b0 <_printf_i+0xbc>
 80099ac:	681d      	ldr	r5, [r3, #0]
 80099ae:	e003      	b.n	80099b8 <_printf_i+0xc4>
 80099b0:	0645      	lsls	r5, r0, #25
 80099b2:	d5fb      	bpl.n	80099ac <_printf_i+0xb8>
 80099b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	da03      	bge.n	80099c4 <_printf_i+0xd0>
 80099bc:	232d      	movs	r3, #45	@ 0x2d
 80099be:	426d      	negs	r5, r5
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099c4:	4859      	ldr	r0, [pc, #356]	@ (8009b2c <_printf_i+0x238>)
 80099c6:	230a      	movs	r3, #10
 80099c8:	e011      	b.n	80099ee <_printf_i+0xfa>
 80099ca:	6821      	ldr	r1, [r4, #0]
 80099cc:	6833      	ldr	r3, [r6, #0]
 80099ce:	0608      	lsls	r0, r1, #24
 80099d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80099d4:	d402      	bmi.n	80099dc <_printf_i+0xe8>
 80099d6:	0649      	lsls	r1, r1, #25
 80099d8:	bf48      	it	mi
 80099da:	b2ad      	uxthmi	r5, r5
 80099dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80099de:	4853      	ldr	r0, [pc, #332]	@ (8009b2c <_printf_i+0x238>)
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	bf14      	ite	ne
 80099e4:	230a      	movne	r3, #10
 80099e6:	2308      	moveq	r3, #8
 80099e8:	2100      	movs	r1, #0
 80099ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099ee:	6866      	ldr	r6, [r4, #4]
 80099f0:	60a6      	str	r6, [r4, #8]
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	bfa2      	ittt	ge
 80099f6:	6821      	ldrge	r1, [r4, #0]
 80099f8:	f021 0104 	bicge.w	r1, r1, #4
 80099fc:	6021      	strge	r1, [r4, #0]
 80099fe:	b90d      	cbnz	r5, 8009a04 <_printf_i+0x110>
 8009a00:	2e00      	cmp	r6, #0
 8009a02:	d04b      	beq.n	8009a9c <_printf_i+0x1a8>
 8009a04:	4616      	mov	r6, r2
 8009a06:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a0a:	fb03 5711 	mls	r7, r3, r1, r5
 8009a0e:	5dc7      	ldrb	r7, [r0, r7]
 8009a10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a14:	462f      	mov	r7, r5
 8009a16:	42bb      	cmp	r3, r7
 8009a18:	460d      	mov	r5, r1
 8009a1a:	d9f4      	bls.n	8009a06 <_printf_i+0x112>
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d10b      	bne.n	8009a38 <_printf_i+0x144>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	07df      	lsls	r7, r3, #31
 8009a24:	d508      	bpl.n	8009a38 <_printf_i+0x144>
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	6861      	ldr	r1, [r4, #4]
 8009a2a:	4299      	cmp	r1, r3
 8009a2c:	bfde      	ittt	le
 8009a2e:	2330      	movle	r3, #48	@ 0x30
 8009a30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a38:	1b92      	subs	r2, r2, r6
 8009a3a:	6122      	str	r2, [r4, #16]
 8009a3c:	f8cd a000 	str.w	sl, [sp]
 8009a40:	464b      	mov	r3, r9
 8009a42:	aa03      	add	r2, sp, #12
 8009a44:	4621      	mov	r1, r4
 8009a46:	4640      	mov	r0, r8
 8009a48:	f7ff fee6 	bl	8009818 <_printf_common>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d14a      	bne.n	8009ae6 <_printf_i+0x1f2>
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	b004      	add	sp, #16
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	f043 0320 	orr.w	r3, r3, #32
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	4833      	ldr	r0, [pc, #204]	@ (8009b30 <_printf_i+0x23c>)
 8009a64:	2778      	movs	r7, #120	@ 0x78
 8009a66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	6831      	ldr	r1, [r6, #0]
 8009a6e:	061f      	lsls	r7, r3, #24
 8009a70:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a74:	d402      	bmi.n	8009a7c <_printf_i+0x188>
 8009a76:	065f      	lsls	r7, r3, #25
 8009a78:	bf48      	it	mi
 8009a7a:	b2ad      	uxthmi	r5, r5
 8009a7c:	6031      	str	r1, [r6, #0]
 8009a7e:	07d9      	lsls	r1, r3, #31
 8009a80:	bf44      	itt	mi
 8009a82:	f043 0320 	orrmi.w	r3, r3, #32
 8009a86:	6023      	strmi	r3, [r4, #0]
 8009a88:	b11d      	cbz	r5, 8009a92 <_printf_i+0x19e>
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	e7ac      	b.n	80099e8 <_printf_i+0xf4>
 8009a8e:	4827      	ldr	r0, [pc, #156]	@ (8009b2c <_printf_i+0x238>)
 8009a90:	e7e9      	b.n	8009a66 <_printf_i+0x172>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	f023 0320 	bic.w	r3, r3, #32
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	e7f6      	b.n	8009a8a <_printf_i+0x196>
 8009a9c:	4616      	mov	r6, r2
 8009a9e:	e7bd      	b.n	8009a1c <_printf_i+0x128>
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	6825      	ldr	r5, [r4, #0]
 8009aa4:	6961      	ldr	r1, [r4, #20]
 8009aa6:	1d18      	adds	r0, r3, #4
 8009aa8:	6030      	str	r0, [r6, #0]
 8009aaa:	062e      	lsls	r6, r5, #24
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	d501      	bpl.n	8009ab4 <_printf_i+0x1c0>
 8009ab0:	6019      	str	r1, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <_printf_i+0x1c6>
 8009ab4:	0668      	lsls	r0, r5, #25
 8009ab6:	d5fb      	bpl.n	8009ab0 <_printf_i+0x1bc>
 8009ab8:	8019      	strh	r1, [r3, #0]
 8009aba:	2300      	movs	r3, #0
 8009abc:	6123      	str	r3, [r4, #16]
 8009abe:	4616      	mov	r6, r2
 8009ac0:	e7bc      	b.n	8009a3c <_printf_i+0x148>
 8009ac2:	6833      	ldr	r3, [r6, #0]
 8009ac4:	1d1a      	adds	r2, r3, #4
 8009ac6:	6032      	str	r2, [r6, #0]
 8009ac8:	681e      	ldr	r6, [r3, #0]
 8009aca:	6862      	ldr	r2, [r4, #4]
 8009acc:	2100      	movs	r1, #0
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7f6 fb9e 	bl	8000210 <memchr>
 8009ad4:	b108      	cbz	r0, 8009ada <_printf_i+0x1e6>
 8009ad6:	1b80      	subs	r0, r0, r6
 8009ad8:	6060      	str	r0, [r4, #4]
 8009ada:	6863      	ldr	r3, [r4, #4]
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ae4:	e7aa      	b.n	8009a3c <_printf_i+0x148>
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	4632      	mov	r2, r6
 8009aea:	4649      	mov	r1, r9
 8009aec:	4640      	mov	r0, r8
 8009aee:	47d0      	blx	sl
 8009af0:	3001      	adds	r0, #1
 8009af2:	d0ad      	beq.n	8009a50 <_printf_i+0x15c>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	079b      	lsls	r3, r3, #30
 8009af8:	d413      	bmi.n	8009b22 <_printf_i+0x22e>
 8009afa:	68e0      	ldr	r0, [r4, #12]
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	4298      	cmp	r0, r3
 8009b00:	bfb8      	it	lt
 8009b02:	4618      	movlt	r0, r3
 8009b04:	e7a6      	b.n	8009a54 <_printf_i+0x160>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4632      	mov	r2, r6
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	47d0      	blx	sl
 8009b10:	3001      	adds	r0, #1
 8009b12:	d09d      	beq.n	8009a50 <_printf_i+0x15c>
 8009b14:	3501      	adds	r5, #1
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	9903      	ldr	r1, [sp, #12]
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dcf2      	bgt.n	8009b06 <_printf_i+0x212>
 8009b20:	e7eb      	b.n	8009afa <_printf_i+0x206>
 8009b22:	2500      	movs	r5, #0
 8009b24:	f104 0619 	add.w	r6, r4, #25
 8009b28:	e7f5      	b.n	8009b16 <_printf_i+0x222>
 8009b2a:	bf00      	nop
 8009b2c:	08009e59 	.word	0x08009e59
 8009b30:	08009e6a 	.word	0x08009e6a

08009b34 <__sflush_r>:
 8009b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3c:	0716      	lsls	r6, r2, #28
 8009b3e:	4605      	mov	r5, r0
 8009b40:	460c      	mov	r4, r1
 8009b42:	d454      	bmi.n	8009bee <__sflush_r+0xba>
 8009b44:	684b      	ldr	r3, [r1, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dc02      	bgt.n	8009b50 <__sflush_r+0x1c>
 8009b4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	dd48      	ble.n	8009be2 <__sflush_r+0xae>
 8009b50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b52:	2e00      	cmp	r6, #0
 8009b54:	d045      	beq.n	8009be2 <__sflush_r+0xae>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b5c:	682f      	ldr	r7, [r5, #0]
 8009b5e:	6a21      	ldr	r1, [r4, #32]
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	d030      	beq.n	8009bc6 <__sflush_r+0x92>
 8009b64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	0759      	lsls	r1, r3, #29
 8009b6a:	d505      	bpl.n	8009b78 <__sflush_r+0x44>
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b72:	b10b      	cbz	r3, 8009b78 <__sflush_r+0x44>
 8009b74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	2300      	movs	r3, #0
 8009b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b7c:	6a21      	ldr	r1, [r4, #32]
 8009b7e:	4628      	mov	r0, r5
 8009b80:	47b0      	blx	r6
 8009b82:	1c43      	adds	r3, r0, #1
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	d106      	bne.n	8009b96 <__sflush_r+0x62>
 8009b88:	6829      	ldr	r1, [r5, #0]
 8009b8a:	291d      	cmp	r1, #29
 8009b8c:	d82b      	bhi.n	8009be6 <__sflush_r+0xb2>
 8009b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009c38 <__sflush_r+0x104>)
 8009b90:	410a      	asrs	r2, r1
 8009b92:	07d6      	lsls	r6, r2, #31
 8009b94:	d427      	bmi.n	8009be6 <__sflush_r+0xb2>
 8009b96:	2200      	movs	r2, #0
 8009b98:	6062      	str	r2, [r4, #4]
 8009b9a:	04d9      	lsls	r1, r3, #19
 8009b9c:	6922      	ldr	r2, [r4, #16]
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	d504      	bpl.n	8009bac <__sflush_r+0x78>
 8009ba2:	1c42      	adds	r2, r0, #1
 8009ba4:	d101      	bne.n	8009baa <__sflush_r+0x76>
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	b903      	cbnz	r3, 8009bac <__sflush_r+0x78>
 8009baa:	6560      	str	r0, [r4, #84]	@ 0x54
 8009bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bae:	602f      	str	r7, [r5, #0]
 8009bb0:	b1b9      	cbz	r1, 8009be2 <__sflush_r+0xae>
 8009bb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bb6:	4299      	cmp	r1, r3
 8009bb8:	d002      	beq.n	8009bc0 <__sflush_r+0x8c>
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f7ff fca0 	bl	8009500 <_free_r>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bc4:	e00d      	b.n	8009be2 <__sflush_r+0xae>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b0      	blx	r6
 8009bcc:	4602      	mov	r2, r0
 8009bce:	1c50      	adds	r0, r2, #1
 8009bd0:	d1c9      	bne.n	8009b66 <__sflush_r+0x32>
 8009bd2:	682b      	ldr	r3, [r5, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0c6      	beq.n	8009b66 <__sflush_r+0x32>
 8009bd8:	2b1d      	cmp	r3, #29
 8009bda:	d001      	beq.n	8009be0 <__sflush_r+0xac>
 8009bdc:	2b16      	cmp	r3, #22
 8009bde:	d11e      	bne.n	8009c1e <__sflush_r+0xea>
 8009be0:	602f      	str	r7, [r5, #0]
 8009be2:	2000      	movs	r0, #0
 8009be4:	e022      	b.n	8009c2c <__sflush_r+0xf8>
 8009be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bea:	b21b      	sxth	r3, r3
 8009bec:	e01b      	b.n	8009c26 <__sflush_r+0xf2>
 8009bee:	690f      	ldr	r7, [r1, #16]
 8009bf0:	2f00      	cmp	r7, #0
 8009bf2:	d0f6      	beq.n	8009be2 <__sflush_r+0xae>
 8009bf4:	0793      	lsls	r3, r2, #30
 8009bf6:	680e      	ldr	r6, [r1, #0]
 8009bf8:	bf08      	it	eq
 8009bfa:	694b      	ldreq	r3, [r1, #20]
 8009bfc:	600f      	str	r7, [r1, #0]
 8009bfe:	bf18      	it	ne
 8009c00:	2300      	movne	r3, #0
 8009c02:	eba6 0807 	sub.w	r8, r6, r7
 8009c06:	608b      	str	r3, [r1, #8]
 8009c08:	f1b8 0f00 	cmp.w	r8, #0
 8009c0c:	dde9      	ble.n	8009be2 <__sflush_r+0xae>
 8009c0e:	6a21      	ldr	r1, [r4, #32]
 8009c10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c12:	4643      	mov	r3, r8
 8009c14:	463a      	mov	r2, r7
 8009c16:	4628      	mov	r0, r5
 8009c18:	47b0      	blx	r6
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	dc08      	bgt.n	8009c30 <__sflush_r+0xfc>
 8009c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	4407      	add	r7, r0
 8009c32:	eba8 0800 	sub.w	r8, r8, r0
 8009c36:	e7e7      	b.n	8009c08 <__sflush_r+0xd4>
 8009c38:	dfbffffe 	.word	0xdfbffffe

08009c3c <_fflush_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	690b      	ldr	r3, [r1, #16]
 8009c40:	4605      	mov	r5, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b913      	cbnz	r3, 8009c4c <_fflush_r+0x10>
 8009c46:	2500      	movs	r5, #0
 8009c48:	4628      	mov	r0, r5
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	b118      	cbz	r0, 8009c56 <_fflush_r+0x1a>
 8009c4e:	6a03      	ldr	r3, [r0, #32]
 8009c50:	b90b      	cbnz	r3, 8009c56 <_fflush_r+0x1a>
 8009c52:	f7ff fa45 	bl	80090e0 <__sinit>
 8009c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0f3      	beq.n	8009c46 <_fflush_r+0xa>
 8009c5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c60:	07d0      	lsls	r0, r2, #31
 8009c62:	d404      	bmi.n	8009c6e <_fflush_r+0x32>
 8009c64:	0599      	lsls	r1, r3, #22
 8009c66:	d402      	bmi.n	8009c6e <_fflush_r+0x32>
 8009c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c6a:	f7ff fc38 	bl	80094de <__retarget_lock_acquire_recursive>
 8009c6e:	4628      	mov	r0, r5
 8009c70:	4621      	mov	r1, r4
 8009c72:	f7ff ff5f 	bl	8009b34 <__sflush_r>
 8009c76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c78:	07da      	lsls	r2, r3, #31
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	d4e4      	bmi.n	8009c48 <_fflush_r+0xc>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	059b      	lsls	r3, r3, #22
 8009c82:	d4e1      	bmi.n	8009c48 <_fflush_r+0xc>
 8009c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c86:	f7ff fc2b 	bl	80094e0 <__retarget_lock_release_recursive>
 8009c8a:	e7dd      	b.n	8009c48 <_fflush_r+0xc>

08009c8c <__swhatbuf_r>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	460c      	mov	r4, r1
 8009c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c94:	2900      	cmp	r1, #0
 8009c96:	b096      	sub	sp, #88	@ 0x58
 8009c98:	4615      	mov	r5, r2
 8009c9a:	461e      	mov	r6, r3
 8009c9c:	da0d      	bge.n	8009cba <__swhatbuf_r+0x2e>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ca4:	f04f 0100 	mov.w	r1, #0
 8009ca8:	bf14      	ite	ne
 8009caa:	2340      	movne	r3, #64	@ 0x40
 8009cac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	6031      	str	r1, [r6, #0]
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	b016      	add	sp, #88	@ 0x58
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
 8009cba:	466a      	mov	r2, sp
 8009cbc:	f000 f848 	bl	8009d50 <_fstat_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	dbec      	blt.n	8009c9e <__swhatbuf_r+0x12>
 8009cc4:	9901      	ldr	r1, [sp, #4]
 8009cc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cce:	4259      	negs	r1, r3
 8009cd0:	4159      	adcs	r1, r3
 8009cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cd6:	e7eb      	b.n	8009cb0 <__swhatbuf_r+0x24>

08009cd8 <__smakebuf_r>:
 8009cd8:	898b      	ldrh	r3, [r1, #12]
 8009cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cdc:	079d      	lsls	r5, r3, #30
 8009cde:	4606      	mov	r6, r0
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	d507      	bpl.n	8009cf4 <__smakebuf_r+0x1c>
 8009ce4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	6123      	str	r3, [r4, #16]
 8009cec:	2301      	movs	r3, #1
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	b003      	add	sp, #12
 8009cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf4:	ab01      	add	r3, sp, #4
 8009cf6:	466a      	mov	r2, sp
 8009cf8:	f7ff ffc8 	bl	8009c8c <__swhatbuf_r>
 8009cfc:	9f00      	ldr	r7, [sp, #0]
 8009cfe:	4605      	mov	r5, r0
 8009d00:	4639      	mov	r1, r7
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7ff f8d4 	bl	8008eb0 <_malloc_r>
 8009d08:	b948      	cbnz	r0, 8009d1e <__smakebuf_r+0x46>
 8009d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0e:	059a      	lsls	r2, r3, #22
 8009d10:	d4ee      	bmi.n	8009cf0 <__smakebuf_r+0x18>
 8009d12:	f023 0303 	bic.w	r3, r3, #3
 8009d16:	f043 0302 	orr.w	r3, r3, #2
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	e7e2      	b.n	8009ce4 <__smakebuf_r+0xc>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	6020      	str	r0, [r4, #0]
 8009d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d2e:	b15b      	cbz	r3, 8009d48 <__smakebuf_r+0x70>
 8009d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d34:	4630      	mov	r0, r6
 8009d36:	f000 f81d 	bl	8009d74 <_isatty_r>
 8009d3a:	b128      	cbz	r0, 8009d48 <__smakebuf_r+0x70>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f023 0303 	bic.w	r3, r3, #3
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	431d      	orrs	r5, r3
 8009d4c:	81a5      	strh	r5, [r4, #12]
 8009d4e:	e7cf      	b.n	8009cf0 <__smakebuf_r+0x18>

08009d50 <_fstat_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d07      	ldr	r5, [pc, #28]	@ (8009d70 <_fstat_r+0x20>)
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	602b      	str	r3, [r5, #0]
 8009d5e:	f7f7 f928 	bl	8000fb2 <_fstat>
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	d102      	bne.n	8009d6c <_fstat_r+0x1c>
 8009d66:	682b      	ldr	r3, [r5, #0]
 8009d68:	b103      	cbz	r3, 8009d6c <_fstat_r+0x1c>
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
 8009d6e:	bf00      	nop
 8009d70:	200045b0 	.word	0x200045b0

08009d74 <_isatty_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d06      	ldr	r5, [pc, #24]	@ (8009d90 <_isatty_r+0x1c>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	f7f7 f927 	bl	8000fd2 <_isatty>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_isatty_r+0x1a>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_isatty_r+0x1a>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	200045b0 	.word	0x200045b0

08009d94 <_init>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	bf00      	nop
 8009d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9a:	bc08      	pop	{r3}
 8009d9c:	469e      	mov	lr, r3
 8009d9e:	4770      	bx	lr

08009da0 <_fini>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr
