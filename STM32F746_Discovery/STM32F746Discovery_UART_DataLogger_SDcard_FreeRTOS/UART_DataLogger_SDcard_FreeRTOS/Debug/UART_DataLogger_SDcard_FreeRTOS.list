
UART_DataLogger_SDcard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e728  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800e8f8  0800e8f8  0000f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f018  0800f018  0001106c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f020  0800f020  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f020  0800f020  00010020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f024  0800f024  00010024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800f028  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065dc  2000006c  0800f094  0001106c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006648  0800f094  00011648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020aa7  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c59  00000000  00000000  00031b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  000367a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000150a  00000000  00000000  000382e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2ef  00000000  00000000  000397ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002457f  00000000  00000000  00065ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101cb2  00000000  00000000  0008a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bd0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007be0  00000000  00000000  0018bd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  00193930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e8e0 	.word	0x0800e8e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800e8e0 	.word	0x0800e8e0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;

//<---- --------------- Functions --------------- ---->
void Mount_SD(const TCHAR* path)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <Mount_SD+0x48>)
 8000bea:	f008 fdaf 	bl	800974c <f_mount>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <Mount_SD+0x4c>)
 8000bf4:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Mounting => %d \n", fresult);
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <Mount_SD+0x4c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <Mount_SD+0x50>)
 8000bfe:	f00c fe15 	bl	800d82c <iprintf>

	if(fresult == FR_OK)
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <Mount_SD+0x4c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <Mount_SD+0x36>
		printf("SD_CARD mounted successfully...\n");
 8000c0a:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <Mount_SD+0x54>)
 8000c0c:	f00c fe76 	bl	800d8fc <puts>
	else
	{
		printf("Error! in mounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000c10:	e004      	b.n	8000c1c <Mount_SD+0x40>
		printf("Error! in mounting SD_CARD...\n");
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <Mount_SD+0x58>)
 8000c14:	f00c fe72 	bl	800d8fc <puts>
		Error_Handler();
 8000c18:	f000 fd96 	bl	8001748 <Error_Handler>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000088 	.word	0x20000088
 8000c28:	20002108 	.word	0x20002108
 8000c2c:	0800e8f8 	.word	0x0800e8f8
 8000c30:	0800e914 	.word	0x0800e914
 8000c34:	0800e934 	.word	0x0800e934

08000c38 <Unmount_SD>:

//<---- -------------------------------------------------------- ---->
void Unmount_SD(const TCHAR* path)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2000      	movs	r0, #0
 8000c46:	f008 fd81 	bl	800974c <f_mount>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <Unmount_SD+0x48>)
 8000c50:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Unmounting => %d \n", fresult);
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <Unmount_SD+0x48>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	480a      	ldr	r0, [pc, #40]	@ (8000c84 <Unmount_SD+0x4c>)
 8000c5a:	f00c fde7 	bl	800d82c <iprintf>

	if(fresult == FR_OK)
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <Unmount_SD+0x48>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <Unmount_SD+0x36>
		printf("SD_CARD unmounted successfully...\n");
 8000c66:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <Unmount_SD+0x50>)
 8000c68:	f00c fe48 	bl	800d8fc <puts>
	else
	{
		printf("Error! in unmounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000c6c:	e004      	b.n	8000c78 <Unmount_SD+0x40>
		printf("Error! in unmounting SD_CARD...\n");
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <Unmount_SD+0x54>)
 8000c70:	f00c fe44 	bl	800d8fc <puts>
		Error_Handler();
 8000c74:	f000 fd68 	bl	8001748 <Error_Handler>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20002108 	.word	0x20002108
 8000c84:	0800e954 	.word	0x0800e954
 8000c88:	0800e974 	.word	0x0800e974
 8000c8c:	0800e998 	.word	0x0800e998

08000c90 <Format_SD>:
//<---- -------------------------------------------------------- ---->

FRESULT Format_SD(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20 * sizeof(char));
 8000c96:	2014      	movs	r0, #20
 8000c98:	f00c fc48 	bl	800d52c <malloc>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    sprintf(path, "%s", "/");
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d50 <Format_SD+0xc0>)
 8000ca2:	492c      	ldr	r1, [pc, #176]	@ (8000d54 <Format_SD+0xc4>)
 8000ca4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ca6:	f00c fe31 	bl	800d90c <siprintf>

    fresult = f_opendir(&dir, path);							// Open the directory
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f009 f9fa 	bl	800a0a8 <f_opendir>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <Format_SD+0xc8>)
 8000cba:	701a      	strb	r2, [r3, #0]
    printf("Fresult in Opening Directory => %d \n", fresult);
 8000cbc:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <Format_SD+0xc8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <Format_SD+0xcc>)
 8000cc4:	f00c fdb2 	bl	800d82c <iprintf>

    if(fresult == FR_OK)
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <Format_SD+0xc8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d136      	bne.n	8000d3e <Format_SD+0xae>
    {
        for(;;)
        {
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4923      	ldr	r1, [pc, #140]	@ (8000d60 <Format_SD+0xd0>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f009 fa8b 	bl	800a1f0 <f_readdir>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <Format_SD+0xc8>)
 8000ce0:	701a      	strb	r2, [r3, #0]
            if(fresult != FR_OK || fno.fname[0] == 0)
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <Format_SD+0xc8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d125      	bne.n	8000d36 <Format_SD+0xa6>
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <Format_SD+0xd0>)
 8000cec:	7a5b      	ldrb	r3, [r3, #9]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d021      	beq.n	8000d36 <Format_SD+0xa6>
            	break;  										// Break on error or end of dir

            if(fno.fattrib & AM_DIR)     						// It is a directory
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <Format_SD+0xd0>)
 8000cf4:	7a1b      	ldrb	r3, [r3, #8]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d011      	beq.n	8000d22 <Format_SD+0x92>
            {
            	if(!(strcmp("SYSTEM~1", fno.fname)))
 8000cfe:	4919      	ldr	r1, [pc, #100]	@ (8000d64 <Format_SD+0xd4>)
 8000d00:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <Format_SD+0xd8>)
 8000d02:	f7ff fa85 	bl	8000210 <strcmp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d012      	beq.n	8000d32 <Format_SD+0xa2>
            		continue;

            	fresult = f_unlink(fno.fname);
 8000d0c:	4815      	ldr	r0, [pc, #84]	@ (8000d64 <Format_SD+0xd4>)
 8000d0e:	f009 fbae 	bl	800a46e <f_unlink>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <Format_SD+0xc8>)
 8000d18:	701a      	strb	r2, [r3, #0]
            	if(fresult == FR_DENIED)
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <Format_SD+0xc8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	e7d6      	b.n	8000cd0 <Format_SD+0x40>
            		continue;
            }
            else
            {
               fresult = f_unlink(fno.fname);					// It is a file.
 8000d22:	4810      	ldr	r0, [pc, #64]	@ (8000d64 <Format_SD+0xd4>)
 8000d24:	f009 fba3 	bl	800a46e <f_unlink>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <Format_SD+0xc8>)
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e7ce      	b.n	8000cd0 <Format_SD+0x40>
            		continue;
 8000d32:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000d34:	e7cc      	b.n	8000cd0 <Format_SD+0x40>
            }
        }
        f_closedir(&dir);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f009 fa2e 	bl	800a19a <f_closedir>
    }
    free(path);
 8000d3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000d40:	f00c fbfc 	bl	800d53c <free>
    return fresult;
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <Format_SD+0xc8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3738      	adds	r7, #56	@ 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	0800e9b8 	.word	0x0800e9b8
 8000d54:	0800e9bc 	.word	0x0800e9bc
 8000d58:	20002108 	.word	0x20002108
 8000d5c:	0800e9c0 	.word	0x0800e9c0
 8000d60:	200020f0 	.word	0x200020f0
 8000d64:	200020f9 	.word	0x200020f9
 8000d68:	0800e9e8 	.word	0x0800e9e8

08000d6c <Create_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Create_File(char *name)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8000d74:	4928      	ldr	r1, [pc, #160]	@ (8000e18 <Create_File+0xac>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f009 fa7d 	bl	800a276 <f_stat>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <Create_File+0xb0>)
 8000d82:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000d84:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <Create_File+0xb0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <Create_File+0xb4>)
 8000d8c:	f00c fd4e 	bl	800d82c <iprintf>

	if(fresult == FR_OK)
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <Create_File+0xb0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <Create_File+0x3a>
	{
		printf("Error! *%s* already exists!\n use Update_File Function \n", name);
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4822      	ldr	r0, [pc, #136]	@ (8000e24 <Create_File+0xb8>)
 8000d9c:	f00c fd46 	bl	800d82c <iprintf>
	    return fresult;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <Create_File+0xb0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	e034      	b.n	8000e10 <Create_File+0xa4>
	}
	else
	{
		fresult = f_open(&fil, name, (FA_CREATE_ALWAYS | FA_READ | FA_WRITE));
 8000da6:	220b      	movs	r2, #11
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	481f      	ldr	r0, [pc, #124]	@ (8000e28 <Create_File+0xbc>)
 8000dac:	f008 fd32 	bl	8009814 <f_open>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <Create_File+0xb0>)
 8000db6:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <Create_File+0xb0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10f      	bne.n	8000de0 <Create_File+0x74>
			printf("*%s* created successfully\n Now use Write_File to write data\n", name);
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	481a      	ldr	r0, [pc, #104]	@ (8000e2c <Create_File+0xc0>)
 8000dc4:	f00c fd32 	bl	800d82c <iprintf>
		{
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
		    return fresult;
		}

		fresult = f_close(&fil);
 8000dc8:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <Create_File+0xbc>)
 8000dca:	f009 f93e 	bl	800a04a <f_close>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <Create_File+0xb0>)
 8000dd4:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <Create_File+0xb0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10f      	bne.n	8000dfe <Create_File+0x92>
 8000dde:	e009      	b.n	8000df4 <Create_File+0x88>
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <Create_File+0xb0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <Create_File+0xc4>)
 8000dea:	f00c fd1f 	bl	800d82c <iprintf>
		    return fresult;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <Create_File+0xb0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	e00d      	b.n	8000e10 <Create_File+0xa4>
			printf("File *%s* Closed Successfully\n", name);
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	480f      	ldr	r0, [pc, #60]	@ (8000e34 <Create_File+0xc8>)
 8000df8:	f00c fd18 	bl	800d82c <iprintf>
 8000dfc:	e006      	b.n	8000e0c <Create_File+0xa0>
		else
			printf("Error! No. %d in closing file *%s* \n", fresult, name);
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <Create_File+0xb0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <Create_File+0xcc>)
 8000e08:	f00c fd10 	bl	800d82c <iprintf>
	}
    return fresult;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <Create_File+0xb0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200020f0 	.word	0x200020f0
 8000e1c:	20002108 	.word	0x20002108
 8000e20:	0800e9f4 	.word	0x0800e9f4
 8000e24:	0800ea14 	.word	0x0800ea14
 8000e28:	200010c0 	.word	0x200010c0
 8000e2c:	0800ea4c 	.word	0x0800ea4c
 8000e30:	0800ea8c 	.word	0x0800ea8c
 8000e34:	0800eab4 	.word	0x0800eab4
 8000e38:	0800ead4 	.word	0x0800ead4

08000e3c <Update_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Update_File(char *name, char *data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	fresult = f_stat(name, &fno);
 8000e46:	493b      	ldr	r1, [pc, #236]	@ (8000f34 <Update_File+0xf8>)
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f009 fa14 	bl	800a276 <f_stat>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <Update_File+0xfc>)
 8000e54:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <Update_File+0xfc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4837      	ldr	r0, [pc, #220]	@ (8000f3c <Update_File+0x100>)
 8000e5e:	f00c fce5 	bl	800d82c <iprintf>

	if(fresult == FR_OK)
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <Update_File+0xfc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d157      	bne.n	8000f1a <Update_File+0xde>
	{
		fresult = f_open(&fil, name, (FA_OPEN_APPEND | FA_WRITE));
 8000e6a:	2232      	movs	r2, #50	@ 0x32
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4834      	ldr	r0, [pc, #208]	@ (8000f40 <Update_File+0x104>)
 8000e70:	f008 fcd0 	bl	8009814 <f_open>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <Update_File+0xfc>)
 8000e7a:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK)
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <Update_File+0xfc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <Update_File+0x5c>
		{
			printf("Error! No. %d in opening file *%s*\n\n", fresult, name);
 8000e84:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <Update_File+0xfc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482d      	ldr	r0, [pc, #180]	@ (8000f44 <Update_File+0x108>)
 8000e8e:	f00c fccd 	bl	800d82c <iprintf>
			return fresult;
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <Update_File+0xfc>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	e049      	b.n	8000f2c <Update_File+0xf0>
		}

		fresult = f_write(&fil, data, strlen (data), &bw);					// Writing text
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff f9c3 	bl	8000224 <strlen>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <Update_File+0x10c>)
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	4826      	ldr	r0, [pc, #152]	@ (8000f40 <Update_File+0x104>)
 8000ea6:	f008 fe84 	bl	8009bb2 <f_write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <Update_File+0xfc>)
 8000eb0:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Write File => %d \n", fresult);
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <Update_File+0xfc>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4824      	ldr	r0, [pc, #144]	@ (8000f4c <Update_File+0x110>)
 8000eba:	f00c fcb7 	bl	800d82c <iprintf>

		if(fresult == FR_OK)
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <Update_File+0xfc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <Update_File+0x94>
			printf("*%s* UPDATED successfully\n", name);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4821      	ldr	r0, [pc, #132]	@ (8000f50 <Update_File+0x114>)
 8000eca:	f00c fcaf 	bl	800d82c <iprintf>
 8000ece:	e006      	b.n	8000ede <Update_File+0xa2>
		else
			printf("Error! No. %d in writing file *%s*\n\n", fresult, name);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <Update_File+0xfc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481e      	ldr	r0, [pc, #120]	@ (8000f54 <Update_File+0x118>)
 8000eda:	f00c fca7 	bl	800d82c <iprintf>

		fresult = f_close(&fil);											// Close file
 8000ede:	4818      	ldr	r0, [pc, #96]	@ (8000f40 <Update_File+0x104>)
 8000ee0:	f009 f8b3 	bl	800a04a <f_close>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <Update_File+0xfc>)
 8000eea:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Closing File => %d \n", fresult);
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <Update_File+0xfc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <Update_File+0x11c>)
 8000ef4:	f00c fc9a 	bl	800d82c <iprintf>

		if(fresult == FR_OK)
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <Update_File+0xfc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <Update_File+0xce>
			printf("File *%s* CLOSED successfully\n", name);
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <Update_File+0x120>)
 8000f04:	f00c fc92 	bl	800d82c <iprintf>
 8000f08:	e00e      	b.n	8000f28 <Update_File+0xec>
		else
			printf("Error! No. %d in closing file *%s*\n\n", fresult, name);
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <Update_File+0xfc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <Update_File+0x124>)
 8000f14:	f00c fc8a 	bl	800d82c <iprintf>
 8000f18:	e006      	b.n	8000f28 <Update_File+0xec>
	}
	else
	{
		printf("Error! *%s* does not exists\n\n", name);
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <Update_File+0x128>)
 8000f1e:	f00c fc85 	bl	800d82c <iprintf>
	    return fresult;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <Update_File+0xfc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	e001      	b.n	8000f2c <Update_File+0xf0>
	}
    return fresult;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <Update_File+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200020f0 	.word	0x200020f0
 8000f38:	20002108 	.word	0x20002108
 8000f3c:	0800e9f4 	.word	0x0800e9f4
 8000f40:	200010c0 	.word	0x200010c0
 8000f44:	0800eafc 	.word	0x0800eafc
 8000f48:	2000210c 	.word	0x2000210c
 8000f4c:	0800eb24 	.word	0x0800eb24
 8000f50:	0800eb44 	.word	0x0800eb44
 8000f54:	0800eb60 	.word	0x0800eb60
 8000f58:	0800eb88 	.word	0x0800eb88
 8000f5c:	0800eba8 	.word	0x0800eba8
 8000f60:	0800ebc8 	.word	0x0800ebc8
 8000f64:	0800ebf0 	.word	0x0800ebf0

08000f68 <Check_SD_Space>:
    return fresult;
}
//<---- -------------------------------------------------------- ---->

void Check_SD_Space (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint32_t total, free_space;

    f_getfree("", &fre_clust, &pfs);						// Check free space
 8000f6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f70:	4921      	ldr	r1, [pc, #132]	@ (8000ff8 <Check_SD_Space+0x90>)
 8000f72:	4822      	ldr	r0, [pc, #136]	@ (8000ffc <Check_SD_Space+0x94>)
 8000f74:	f009 f9bf 	bl	800a2f6 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	3b02      	subs	r3, #2
 8000f80:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	8952      	ldrh	r2, [r2, #10]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fc14 	bl	80007b8 <__aeabi_ui2d>
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <Check_SD_Space+0x98>)
 8000f96:	f7ff f9a3 	bl	80002e0 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fc83 	bl	80008ac <__aeabi_d2uiz>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	607b      	str	r3, [r7, #4]
    printf("SD_CARD Total Size: \t%lu\n", total);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <Check_SD_Space+0x9c>)
 8000fae:	f00c fc3d 	bl	800d82c <iprintf>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <Check_SD_Space+0x90>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fbf8 	bl	80007b8 <__aeabi_ui2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Check_SD_Space+0x98>)
 8000fce:	f7ff f987 	bl	80002e0 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fc67 	bl	80008ac <__aeabi_d2uiz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	603b      	str	r3, [r7, #0]
    printf("SD_CARD Free Space: \t%lu\n", free_space);
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <Check_SD_Space+0xa0>)
 8000fe6:	f00c fc21 	bl	800d82c <iprintf>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20002110 	.word	0x20002110
 8000ff8:	20002114 	.word	0x20002114
 8000ffc:	0800ee10 	.word	0x0800ee10
 8001000:	3fe00000 	.word	0x3fe00000
 8001004:	0800ee14 	.word	0x0800ee14
 8001008:	0800ee30 	.word	0x0800ee30

0800100c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <vApplicationGetIdleTaskMemory+0x2c>)
 800101c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <vApplicationGetIdleTaskMemory+0x30>)
 8001022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20002118 	.word	0x20002118
 800103c:	200021b8 	.word	0x200021b8

08001040 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001048:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001058:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800105c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001060:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001068:	e000      	b.n	800106c <ITM_SendChar+0x2c>
    {
      __NOP();
 800106a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800106c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f9      	beq.n	800106a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001076:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
	int i = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e009      	b.n	80010b8 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffc7 	bl	8001040 <ITM_SendChar>
	for(i = 0; i < len; i++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf1      	blt.n	80010a4 <_write+0x16>
	}
	return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b08e      	sub	sp, #56	@ 0x38
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f000 fe66 	bl	8001da2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f85d 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 f937 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 80010de:	f000 f90f 	bl	8001300 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80010e2:	f000 f8bd 	bl	8001260 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80010e6:	f006 f9a3 	bl	8007430 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 80010ea:	f000 f8d9 	bl	80012a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart6, &uart_rec, 1);
 80010ee:	2201      	movs	r2, #1
 80010f0:	491f      	ldr	r1, [pc, #124]	@ (8001170 <main+0xa4>)
 80010f2:	4820      	ldr	r0, [pc, #128]	@ (8001174 <main+0xa8>)
 80010f4:	f004 fa58 	bl	80055a8 <HAL_UART_Receive_IT>

  FIFO_init(&fifo);
 80010f8:	481f      	ldr	r0, [pc, #124]	@ (8001178 <main+0xac>)
 80010fa:	f000 f993 	bl	8001424 <FIFO_init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  recDataSemaphore = xSemaphoreCreateBinary();
 80010fe:	2203      	movs	r2, #3
 8001100:	2100      	movs	r1, #0
 8001102:	2001      	movs	r0, #1
 8001104:	f009 fef3 	bl	800aeee <xQueueGenericCreate>
 8001108:	4603      	mov	r3, r0
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <main+0xb0>)
 800110c:	6013      	str	r3, [r2, #0]
  recordDataSemaphore = xSemaphoreCreateBinary();
 800110e:	2203      	movs	r2, #3
 8001110:	2100      	movs	r1, #0
 8001112:	2001      	movs	r0, #1
 8001114:	f009 feeb 	bl	800aeee <xQueueGenericCreate>
 8001118:	4603      	mov	r3, r0
 800111a:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <main+0xb4>)
 800111c:	6013      	str	r3, [r2, #0]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 1024);
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <main+0xb8>)
 8001120:	f107 041c 	add.w	r4, r7, #28
 8001124:	461d      	mov	r5, r3
 8001126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800112e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f009 fb3f 	bl	800a7bc <osThreadCreate>
 800113e:	4603      	mov	r3, r0
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <main+0xbc>)
 8001142:	6013      	str	r3, [r2, #0]

  osThreadDef(recordTask, StartRecordTask, osPriorityNormal, 0, 1024);
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <main+0xc0>)
 8001146:	463c      	mov	r4, r7
 8001148:	461d      	mov	r5, r3
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recordTaskHandle = osThreadCreate(osThread(recordTask), NULL);
 8001156:	463b      	mov	r3, r7
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f009 fb2e 	bl	800a7bc <osThreadCreate>
 8001160:	4603      	mov	r3, r0
 8001162:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <main+0xc4>)
 8001164:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001166:	f009 fb06 	bl	800a776 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <main+0x9e>
 800116e:	bf00      	nop
 8001170:	200025fc 	.word	0x200025fc
 8001174:	200024fc 	.word	0x200024fc
 8001178:	200026c8 	.word	0x200026c8
 800117c:	2000258c 	.word	0x2000258c
 8001180:	20002590 	.word	0x20002590
 8001184:	0800ee58 	.word	0x0800ee58
 8001188:	20002584 	.word	0x20002584
 800118c:	0800ee80 	.word	0x0800ee80
 8001190:	20002588 	.word	0x20002588

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	@ 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	@ 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00c fcaa 	bl	800dafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <SystemClock_Config+0xc4>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a26      	ldr	r2, [pc, #152]	@ (8001258 <SystemClock_Config+0xc4>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <SystemClock_Config+0xc4>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <SystemClock_Config+0xc8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a21      	ldr	r2, [pc, #132]	@ (800125c <SystemClock_Config+0xc8>)
 80011d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <SystemClock_Config+0xc8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80011fc:	230f      	movs	r3, #15
 80011fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001200:	23d8      	movs	r3, #216	@ 0xd8
 8001202:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001208:	230f      	movs	r3, #15
 800120a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fcd3 	bl	8002bbc <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800121c:	f000 fa94 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2302      	movs	r3, #2
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2105      	movs	r1, #5
 800123e:	4618      	mov	r0, r3
 8001240:	f001 ff60 	bl	8003104 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800124a:	f000 fa7d 	bl	8001748 <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3750      	adds	r7, #80	@ 0x50
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 8001266:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <MX_SDMMC1_SD_Init+0x3c>)
 8001268:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <MX_SDMMC1_SD_Init+0x38>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	200023b8 	.word	0x200023b8
 800129c:	40012c00 	.word	0x40012c00

080012a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012a6:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <MX_USART6_UART_Init+0x5c>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_USART6_UART_Init+0x58>)
 80012e4:	f004 f912 	bl	800550c <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 fa2b 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200024fc 	.word	0x200024fc
 80012fc:	40011400 	.word	0x40011400

08001300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_DMA_Init+0x48>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <MX_DMA_Init+0x48>)
 800130c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <MX_DMA_Init+0x48>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2105      	movs	r1, #5
 8001322:	203b      	movs	r0, #59	@ 0x3b
 8001324:	f000 fe46 	bl	8001fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001328:	203b      	movs	r0, #59	@ 0x3b
 800132a:	f000 fe5f 	bl	8001fec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2105      	movs	r1, #5
 8001332:	2045      	movs	r0, #69	@ 0x45
 8001334:	f000 fe3e 	bl	8001fb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001338:	2045      	movs	r0, #69	@ 0x45
 800133a:	f000 fe57 	bl	8001fec <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_GPIO_Init+0x98>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <MX_GPIO_Init+0x98>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_GPIO_Init+0x98>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_GPIO_Init+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <MX_GPIO_Init+0x98>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_GPIO_Init+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SDMMC1_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC1_Detect_Pin;
 80013c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_Detect_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <MX_GPIO_Init+0x9c>)
 80013d8:	f001 fa2c 	bl	8002834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020800 	.word	0x40020800

080013ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Receive_IT(&huart6, &uart_rec, 1) == HAL_OK)
 80013f4:	2201      	movs	r2, #1
 80013f6:	4908      	ldr	r1, [pc, #32]	@ (8001418 <HAL_UART_RxCpltCallback+0x2c>)
 80013f8:	4808      	ldr	r0, [pc, #32]	@ (800141c <HAL_UART_RxCpltCallback+0x30>)
 80013fa:	f004 f8d5 	bl	80055a8 <HAL_UART_Receive_IT>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d104      	bne.n	800140e <HAL_UART_RxCpltCallback+0x22>
	{
		osSemaphoreRelease(recDataSemaphore);
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_UART_RxCpltCallback+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f009 faa3 	bl	800a954 <osSemaphoreRelease>
	}
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200025fc 	.word	0x200025fc
 800141c:	200024fc 	.word	0x200024fc
 8001420:	2000258c 	.word	0x2000258c

08001424 <FIFO_init>:
//<---- -------------------------------------------------------- ---->

void FIFO_init(FIFO_t* fifo)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	fifo->head = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
	fifo->tail = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
	fifo->count = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <FIFO_Enqueue>:
	return (fifo->count == BUFFER_SIZE);
}
//<---- -------------------------------------------------------- ---->

bool FIFO_Enqueue(FIFO_t* fifo, uint8_t* data, uint8_t size)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	71fb      	strb	r3, [r7, #7]
	if((fifo->count + size) > BUFFER_SIZE)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4413      	add	r3, r2
 8001462:	2bc8      	cmp	r3, #200	@ 0xc8
 8001464:	d901      	bls.n	800146a <FIFO_Enqueue+0x1e>
		return false;
 8001466:	2300      	movs	r3, #0
 8001468:	e027      	b.n	80014ba <FIFO_Enqueue+0x6e>

	for(uint8_t i = 0; i < size; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
 800146e:	e019      	b.n	80014a4 <FIFO_Enqueue+0x58>
	{
		fifo->buffer[fifo->tail] = data[i];
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	441a      	add	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	440b      	add	r3, r1
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	701a      	strb	r2, [r3, #0]
		fifo->tail = (fifo->tail + 1) % BUFFER_SIZE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <FIFO_Enqueue+0x7c>)
 800148c:	fba3 1302 	umull	r1, r3, r3, r2
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	21c8      	movs	r1, #200	@ 0xc8
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	6113      	str	r3, [r2, #16]
	for(uint8_t i = 0; i < size; i++)
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	3301      	adds	r3, #1
 80014a2:	75fb      	strb	r3, [r7, #23]
 80014a4:	7dfa      	ldrb	r2, [r7, #23]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e1      	bcc.n	8001470 <FIFO_Enqueue+0x24>
	}
	fifo->count += size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	441a      	add	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	609a      	str	r2, [r3, #8]

	return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	51eb851f 	.word	0x51eb851f

080014cc <FIFO_Dequeue>:
//<---- -------------------------------------------------------- ---->

bool FIFO_Dequeue(FIFO_t* fifo, uint8_t* data, uint8_t size)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
	if(fifo->count < size)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d201      	bcs.n	80014e8 <FIFO_Dequeue+0x1c>
		return false;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e027      	b.n	8001538 <FIFO_Dequeue+0x6c>

	for(uint8_t i = 0; i < size; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
 80014ec:	e019      	b.n	8001522 <FIFO_Dequeue+0x56>
	{
		data[i] = fifo->buffer[fifo->head];
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	441a      	add	r2, r3
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	440b      	add	r3, r1
 80014fe:	7812      	ldrb	r2, [r2, #0]
 8001500:	701a      	strb	r2, [r3, #0]
		fifo->head = (fifo->head + 1) % BUFFER_SIZE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <FIFO_Dequeue+0x78>)
 800150a:	fba3 1302 	umull	r1, r3, r3, r2
 800150e:	099b      	lsrs	r3, r3, #6
 8001510:	21c8      	movs	r1, #200	@ 0xc8
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	60d3      	str	r3, [r2, #12]
	for(uint8_t i = 0; i < size; i++)
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	3301      	adds	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
 8001522:	7dfa      	ldrb	r2, [r7, #23]
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3e1      	bcc.n	80014ee <FIFO_Dequeue+0x22>
	}
	fifo->count -= size;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	609a      	str	r2, [r3, #8]

	return true;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	51eb851f 	.word	0x51eb851f

08001548 <StartMainTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartMainTask(void const * argument)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreWait(recDataSemaphore, osWaitForever);
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <StartMainTask+0x60>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	4618      	mov	r0, r3
 800155a:	f009 f9ad 	bl	800a8b8 <osSemaphoreWait>

		uart_recBuffer[uart_recCount++] = uart_rec;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <StartMainTask+0x64>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	b2d1      	uxtb	r1, r2
 8001566:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <StartMainTask+0x64>)
 8001568:	7011      	strb	r1, [r2, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <StartMainTask+0x68>)
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <StartMainTask+0x6c>)
 8001572:	5499      	strb	r1, [r3, r2]
		if(uart_recBuffer[3] > 2 && uart_recCount == (uart_recBuffer[3] + 4))
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <StartMainTask+0x6c>)
 8001576:	78db      	ldrb	r3, [r3, #3]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d9e9      	bls.n	8001550 <StartMainTask+0x8>
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <StartMainTask+0x64>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <StartMainTask+0x6c>)
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	3304      	adds	r3, #4
 8001588:	429a      	cmp	r2, r3
 800158a:	d1e1      	bne.n	8001550 <StartMainTask+0x8>
		{
			FIFO_Enqueue(&fifo, uart_recBuffer, uart_recCount);
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <StartMainTask+0x64>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <StartMainTask+0x6c>)
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <StartMainTask+0x70>)
 8001596:	f7ff ff59 	bl	800144c <FIFO_Enqueue>
			// ToDo: SendOut to DXL
			osSemaphoreRelease(recordDataSemaphore);
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <StartMainTask+0x74>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 f9d8 	bl	800a954 <osSemaphoreRelease>
		osSemaphoreWait(recDataSemaphore, osWaitForever);
 80015a4:	e7d4      	b.n	8001550 <StartMainTask+0x8>
 80015a6:	bf00      	nop
 80015a8:	2000258c 	.word	0x2000258c
 80015ac:	200025fd 	.word	0x200025fd
 80015b0:	200025fc 	.word	0x200025fc
 80015b4:	20002600 	.word	0x20002600
 80015b8:	200026c8 	.word	0x200026c8
 80015bc:	20002590 	.word	0x20002590

080015c0 <StartRecordTask>:
		}
	}
}
//<---- -------------------------------------------------------- ---->
void StartRecordTask(void const * argument)
{
 80015c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015c4:	b0b9      	sub	sp, #228	@ 0xe4
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	uint8_t dxlLog[BUFFER_SIZE];

	for(;;)
	{
		osSemaphoreWait(recordDataSemaphore, osWaitForever);
 80015ca:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <StartRecordTask+0x138>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	4618      	mov	r0, r3
 80015d4:	f009 f970 	bl	800a8b8 <osSemaphoreWait>
		FIFO_Dequeue(&fifo, dxlLog, uart_recCount);
 80015d8:	4b48      	ldr	r3, [pc, #288]	@ (80016fc <StartRecordTask+0x13c>)
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	4847      	ldr	r0, [pc, #284]	@ (8001700 <StartRecordTask+0x140>)
 80015e4:	f7ff ff72 	bl	80014cc <FIFO_Dequeue>
		count++;
 80015e8:	4b46      	ldr	r3, [pc, #280]	@ (8001704 <StartRecordTask+0x144>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b44      	ldr	r3, [pc, #272]	@ (8001704 <StartRecordTask+0x144>)
 80015f2:	701a      	strb	r2, [r3, #0]

		Mount_SD(SDPath);
 80015f4:	4844      	ldr	r0, [pc, #272]	@ (8001708 <StartRecordTask+0x148>)
 80015f6:	f7ff faf1 	bl	8000bdc <Mount_SD>
		Format_SD();
 80015fa:	f7ff fb49 	bl	8000c90 <Format_SD>
		Check_SD_Space();
 80015fe:	f7ff fcb3 	bl	8000f68 <Check_SD_Space>
		Create_File("MRL.txt");
 8001602:	4842      	ldr	r0, [pc, #264]	@ (800170c <StartRecordTask+0x14c>)
 8001604:	f7ff fbb2 	bl	8000d6c <Create_File>
		sprintf(sd_buffer, "Hello MRL ----> %d\n", count);
 8001608:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <StartRecordTask+0x144>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4940      	ldr	r1, [pc, #256]	@ (8001710 <StartRecordTask+0x150>)
 8001610:	4840      	ldr	r0, [pc, #256]	@ (8001714 <StartRecordTask+0x154>)
 8001612:	f00c f97b 	bl	800d90c <siprintf>
		Update_File("MRL.txt", sd_buffer);
 8001616:	493f      	ldr	r1, [pc, #252]	@ (8001714 <StartRecordTask+0x154>)
 8001618:	483c      	ldr	r0, [pc, #240]	@ (800170c <StartRecordTask+0x14c>)
 800161a:	f7ff fc0f 	bl	8000e3c <Update_File>

		sprintf(sd_buffer, "Packet ----> ");
 800161e:	493e      	ldr	r1, [pc, #248]	@ (8001718 <StartRecordTask+0x158>)
 8001620:	483c      	ldr	r0, [pc, #240]	@ (8001714 <StartRecordTask+0x154>)
 8001622:	f00c f973 	bl	800d90c <siprintf>
		for(uint8_t i = 0; i < uart_recCount; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800162c:	e042      	b.n	80016b4 <StartRecordTask+0xf4>
		{
 800162e:	466b      	mov	r3, sp
 8001630:	461e      	mov	r6, r3
			char byte_str[uart_recCount];
 8001632:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <StartRecordTask+0x13c>)
 8001634:	7819      	ldrb	r1, [r3, #0]
 8001636:	460b      	mov	r3, r1
 8001638:	3b01      	subs	r3, #1
 800163a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800163e:	b2cb      	uxtb	r3, r1
 8001640:	2200      	movs	r2, #0
 8001642:	461c      	mov	r4, r3
 8001644:	4615      	mov	r5, r2
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	00eb      	lsls	r3, r5, #3
 8001650:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001654:	00e2      	lsls	r2, r4, #3
 8001656:	b2cb      	uxtb	r3, r1
 8001658:	2200      	movs	r2, #0
 800165a:	4698      	mov	r8, r3
 800165c:	4691      	mov	r9, r2
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800166a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800166e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001672:	460b      	mov	r3, r1
 8001674:	3307      	adds	r3, #7
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	ebad 0d03 	sub.w	sp, sp, r3
 800167e:	466b      	mov	r3, sp
 8001680:	3300      	adds	r3, #0
 8001682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

			sprintf(byte_str, "%02X ", dxlLog[i]);
 8001686:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800168a:	33e0      	adds	r3, #224	@ 0xe0
 800168c:	443b      	add	r3, r7
 800168e:	f813 3cd4 	ldrb.w	r3, [r3, #-212]
 8001692:	461a      	mov	r2, r3
 8001694:	4921      	ldr	r1, [pc, #132]	@ (800171c <StartRecordTask+0x15c>)
 8001696:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800169a:	f00c f937 	bl	800d90c <siprintf>
			strcat(sd_buffer, byte_str);
 800169e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80016a2:	481c      	ldr	r0, [pc, #112]	@ (8001714 <StartRecordTask+0x154>)
 80016a4:	f00c fa32 	bl	800db0c <strcat>
 80016a8:	46b5      	mov	sp, r6
		for(uint8_t i = 0; i < uart_recCount; i++)
 80016aa:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <StartRecordTask+0x13c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3b6      	bcc.n	800162e <StartRecordTask+0x6e>
		}

		strcat(sd_buffer, "\n");
 80016c0:	4814      	ldr	r0, [pc, #80]	@ (8001714 <StartRecordTask+0x154>)
 80016c2:	f7fe fdaf 	bl	8000224 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <StartRecordTask+0x154>)
 80016cc:	4413      	add	r3, r2
 80016ce:	4914      	ldr	r1, [pc, #80]	@ (8001720 <StartRecordTask+0x160>)
 80016d0:	461a      	mov	r2, r3
 80016d2:	460b      	mov	r3, r1
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	8013      	strh	r3, [r2, #0]
		Update_File("MRL.txt", sd_buffer);
 80016d8:	490e      	ldr	r1, [pc, #56]	@ (8001714 <StartRecordTask+0x154>)
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <StartRecordTask+0x14c>)
 80016dc:	f7ff fbae 	bl	8000e3c <Update_File>
		Unmount_SD(SDPath);
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <StartRecordTask+0x148>)
 80016e2:	f7ff faa9 	bl	8000c38 <Unmount_SD>

		uart_recCount = 0;
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <StartRecordTask+0x13c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
		memset(&fifo, 0, sizeof(FIFO_t));
 80016ec:	2214      	movs	r2, #20
 80016ee:	2100      	movs	r1, #0
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <StartRecordTask+0x140>)
 80016f2:	f00c fa03 	bl	800dafc <memset>
		osSemaphoreWait(recordDataSemaphore, osWaitForever);
 80016f6:	e768      	b.n	80015ca <StartRecordTask+0xa>
 80016f8:	20002590 	.word	0x20002590
 80016fc:	200025fd 	.word	0x200025fd
 8001700:	200026c8 	.word	0x200026c8
 8001704:	20002594 	.word	0x20002594
 8001708:	20002734 	.word	0x20002734
 800170c:	0800ee9c 	.word	0x0800ee9c
 8001710:	0800eea4 	.word	0x0800eea4
 8001714:	20002598 	.word	0x20002598
 8001718:	0800eeb8 	.word	0x0800eeb8
 800171c:	0800eec8 	.word	0x0800eec8
 8001720:	0800eed0 	.word	0x0800eed0

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001736:	f000 fb41 	bl	8001dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40001000 	.word	0x40001000

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <Error_Handler+0x8>

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177c:	6453      	str	r3, [r2, #68]	@ 0x44
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	210f      	movs	r1, #15
 800178e:	f06f 0001 	mvn.w	r0, #1
 8001792:	f000 fc0f 	bl	8001fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0ac      	sub	sp, #176	@ 0xb0
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	2284      	movs	r2, #132	@ 0x84
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00c f999 	bl	800dafc <memset>
  if(hsd->Instance==SDMMC1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a74      	ldr	r2, [pc, #464]	@ (80019a0 <HAL_SD_MspInit+0x1fc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f040 80e0 	bne.w	8001996 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80017d6:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80017da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fea1 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80017f8:	f7ff ffa6 	bl	8001748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80017fc:	4b69      	ldr	r3, [pc, #420]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	4a68      	ldr	r2, [pc, #416]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 8001802:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001806:	6453      	str	r3, [r2, #68]	@ 0x44
 8001808:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	4b63      	ldr	r3, [pc, #396]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4a62      	ldr	r2, [pc, #392]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001820:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	4b5d      	ldr	r3, [pc, #372]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	4a5c      	ldr	r2, [pc, #368]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6313      	str	r3, [r2, #48]	@ 0x30
 8001838:	4b5a      	ldr	r3, [pc, #360]	@ (80019a4 <HAL_SD_MspInit+0x200>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001844:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800185e:	230c      	movs	r3, #12
 8001860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001868:	4619      	mov	r1, r3
 800186a:	484f      	ldr	r0, [pc, #316]	@ (80019a8 <HAL_SD_MspInit+0x204>)
 800186c:	f000 ffe2 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001870:	2304      	movs	r3, #4
 8001872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001888:	230c      	movs	r3, #12
 800188a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001892:	4619      	mov	r1, r3
 8001894:	4845      	ldr	r0, [pc, #276]	@ (80019ac <HAL_SD_MspInit+0x208>)
 8001896:	f000 ffcd 	bl	8002834 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800189a:	4b45      	ldr	r3, [pc, #276]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 800189c:	4a45      	ldr	r2, [pc, #276]	@ (80019b4 <HAL_SD_MspInit+0x210>)
 800189e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80018a0:	4b43      	ldr	r3, [pc, #268]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018a6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a8:	4b41      	ldr	r3, [pc, #260]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ae:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b4:	4b3e      	ldr	r3, [pc, #248]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ba:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018bc:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018c2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c4:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ca:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80018cc:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018ce:	2220      	movs	r2, #32
 80018d0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d2:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018d8:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018da:	2204      	movs	r2, #4
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018de:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018e0:	2203      	movs	r2, #3
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80018e4:	4b32      	ldr	r3, [pc, #200]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018ec:	4b30      	ldr	r3, [pc, #192]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80018f4:	482e      	ldr	r0, [pc, #184]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 80018f6:	f000 fb87 	bl	8002008 <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001900:	f7ff ff22 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a2a      	ldr	r2, [pc, #168]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40
 800190a:	4a29      	ldr	r2, [pc, #164]	@ (80019b0 <HAL_SD_MspInit+0x20c>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001912:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <HAL_SD_MspInit+0x218>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001916:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001918:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800191c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001920:	2240      	movs	r2, #64	@ 0x40
 8001922:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 800192c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001930:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001934:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001938:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 800193c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001940:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001944:	2220      	movs	r2, #32
 8001946:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001950:	2204      	movs	r2, #4
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001956:	2203      	movs	r2, #3
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 800195c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001960:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001964:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001968:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800196a:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 800196c:	f000 fb4c 	bl	8002008 <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001976:	f7ff fee7 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 800197e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_SD_MspInit+0x214>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	2031      	movs	r0, #49	@ 0x31
 800198c:	f000 fb12 	bl	8001fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001990:	2031      	movs	r0, #49	@ 0x31
 8001992:	f000 fb2b 	bl	8001fec <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001996:	bf00      	nop
 8001998:	37b0      	adds	r7, #176	@ 0xb0
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	2000243c 	.word	0x2000243c
 80019b4:	40026458 	.word	0x40026458
 80019b8:	2000249c 	.word	0x2000249c
 80019bc:	400264a0 	.word	0x400264a0

080019c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0aa      	sub	sp, #168	@ 0xa8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2284      	movs	r2, #132	@ 0x84
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c f88b 	bl	800dafc <memset>
  if(huart->Instance==USART6)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a25      	ldr	r2, [pc, #148]	@ (8001a80 <HAL_UART_MspInit+0xc0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d143      	bne.n	8001a78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80019f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80019f6:	2300      	movs	r3, #0
 80019f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fd98 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a0a:	f7ff fe9d 	bl	8001748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_UART_MspInit+0xc4>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_UART_MspInit+0xc4>)
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_UART_MspInit+0xc4>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_UART_MspInit+0xc4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <HAL_UART_MspInit+0xc4>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_UART_MspInit+0xc4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a3e:	23c0      	movs	r3, #192	@ 0xc0
 8001a40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a56:	2308      	movs	r3, #8
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <HAL_UART_MspInit+0xc8>)
 8001a64:	f000 fee6 	bl	8002834 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2105      	movs	r1, #5
 8001a6c:	2047      	movs	r0, #71	@ 0x47
 8001a6e:	f000 faa1 	bl	8001fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a72:	2047      	movs	r0, #71	@ 0x47
 8001a74:	f000 faba 	bl	8001fec <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001a78:	bf00      	nop
 8001a7a:	37a8      	adds	r7, #168	@ 0xa8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40011400 	.word	0x40011400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020800 	.word	0x40020800

08001a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	@ 0x38
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a9c:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_InitTick+0xe0>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	4a32      	ldr	r2, [pc, #200]	@ (8001b6c <HAL_InitTick+0xe0>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa8:	4b30      	ldr	r3, [pc, #192]	@ (8001b6c <HAL_InitTick+0xe0>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ab4:	f107 0210 	add.w	r2, r7, #16
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fd06 	bl	80034d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ace:	f001 fcd7 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8001ad2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ad4:	e004      	b.n	8001ae0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ad6:	f001 fcd3 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8001ada:	4603      	mov	r3, r0
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <HAL_InitTick+0xe4>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	3b01      	subs	r3, #1
 8001aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001af0:	4a21      	ldr	r2, [pc, #132]	@ (8001b78 <HAL_InitTick+0xec>)
 8001af2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001af6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001afa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001afc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b14:	4817      	ldr	r0, [pc, #92]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001b16:	f003 fa25 	bl	8004f64 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d11b      	bne.n	8001b60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b28:	4812      	ldr	r0, [pc, #72]	@ (8001b74 <HAL_InitTick+0xe8>)
 8001b2a:	f003 fa7d 	bl	8005028 <HAL_TIM_Base_Start_IT>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d111      	bne.n	8001b60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b3c:	2036      	movs	r0, #54	@ 0x36
 8001b3e:	f000 fa55 	bl	8001fec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d808      	bhi.n	8001b5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	2036      	movs	r0, #54	@ 0x36
 8001b4e:	f000 fa31 	bl	8001fb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_InitTick+0xf0>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e002      	b.n	8001b60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3738      	adds	r7, #56	@ 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	200026dc 	.word	0x200026dc
 8001b78:	40001000 	.word	0x40001000
 8001b7c:	20000004 	.word	0x20000004

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x4>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <MemManage_Handler+0x4>

08001b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <SDMMC1_IRQHandler+0x10>)
 8001bbe:	f002 fb29 	bl	8004214 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200023b8 	.word	0x200023b8

08001bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <TIM6_DAC_IRQHandler+0x10>)
 8001bd2:	f003 faa1 	bl	8005118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200026dc 	.word	0x200026dc

08001be0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <DMA2_Stream3_IRQHandler+0x10>)
 8001be6:	f000 fbaf 	bl	8002348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000243c 	.word	0x2000243c

08001bf4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <DMA2_Stream6_IRQHandler+0x10>)
 8001bfa:	f000 fba5 	bl	8002348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000249c 	.word	0x2000249c

08001c08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <USART6_IRQHandler+0x10>)
 8001c0e:	f003 fd0f 	bl	8005630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200024fc 	.word	0x200024fc

08001c1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e00a      	b.n	8001c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2e:	f3af 8000 	nop.w
 8001c32:	4601      	mov	r1, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf0      	blt.n	8001c2e <_read+0x12>
  }

  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_isatty>:

int _isatty(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc8:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <_sbrk+0x5c>)
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <_sbrk+0x60>)
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <_sbrk+0x64>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <_sbrk+0x68>)
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d207      	bcs.n	8001d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf0:	f00b ffc8 	bl	800dc84 <__errno>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	e009      	b.n	8001d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <_sbrk+0x64>)
 8001d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20050000 	.word	0x20050000
 8001d20:	00004000 	.word	0x00004000
 8001d24:	20002728 	.word	0x20002728
 8001d28:	20006648 	.word	0x20006648

08001d2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <SystemInit+0x20>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <SystemInit+0x20>)
 8001d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d54:	f7ff ffea 	bl	8001d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d5a:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d70:	4c0a      	ldr	r4, [pc, #40]	@ (8001d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f00b ff87 	bl	800dc90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d82:	f7ff f9a3 	bl	80010cc <main>
  bx  lr    
 8001d86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d94:	0800f028 	.word	0x0800f028
  ldr r2, =_sbss
 8001d98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d9c:	20006648 	.word	0x20006648

08001da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC_IRQHandler>

08001da2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da6:	2003      	movs	r0, #3
 8001da8:	f000 f8f9 	bl	8001f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dac:	200f      	movs	r0, #15
 8001dae:	f7ff fe6d 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db2:	f7ff fccf 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	2000272c 	.word	0x2000272c

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	@ (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000272c 	.word	0x2000272c

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff ffee 	bl	8001de4 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d005      	beq.n	8001e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <HAL_Delay+0x44>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e22:	bf00      	nop
 8001e24:	f7ff ffde 	bl	8001de4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d8f7      	bhi.n	8001e24 <HAL_Delay+0x28>
  {
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008

08001e44 <__NVIC_SetPriorityGrouping>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <__NVIC_SetPriorityGrouping+0x40>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <__NVIC_SetPriorityGrouping+0x40>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	05fa0000 	.word	0x05fa0000

08001e8c <__NVIC_GetPriorityGrouping>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4907      	ldr	r1, [pc, #28]	@ (8001ee0 <__NVIC_EnableIRQ+0x38>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	@ (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	@ (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	@ 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff4c 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc6:	f7ff ff61 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8001fca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f7ff ffb1 	bl	8001f38 <NVIC_EncodePriority>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff80 	bl	8001ee4 <__NVIC_SetPriority>
}
 8001fe4:	bf00      	nop
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff54 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff fee6 	bl	8001de4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e099      	b.n	8002158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002044:	e00f      	b.n	8002066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002046:	f7ff fecd 	bl	8001de4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b05      	cmp	r3, #5
 8002052:	d908      	bls.n	8002066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2203      	movs	r2, #3
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e078      	b.n	8002158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e8      	bne.n	8002046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4b38      	ldr	r3, [pc, #224]	@ (8002160 <HAL_DMA_Init+0x158>)
 8002080:	4013      	ands	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d107      	bne.n	80020d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	4313      	orrs	r3, r2
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d117      	bne.n	800212a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00e      	beq.n	800212a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fb15 	bl	800273c <DMA_CheckFifoParam>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2240      	movs	r2, #64	@ 0x40
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002126:	2301      	movs	r3, #1
 8002128:	e016      	b.n	8002158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 facc 	bl	80026d0 <DMA_CalcBaseAndBitshift>
 8002138:	4603      	mov	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	223f      	movs	r2, #63	@ 0x3f
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	f010803f 	.word	0xf010803f

08002164 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_DMA_Start_IT+0x26>
 8002186:	2302      	movs	r3, #2
 8002188:	e048      	b.n	800221c <HAL_DMA_Start_IT+0xb8>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d137      	bne.n	800220e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa5e 	bl	8002674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	223f      	movs	r2, #63	@ 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0216 	orr.w	r2, r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0208 	orr.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e005      	b.n	800221a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002230:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002232:	f7ff fdd7 	bl	8001de4 <HAL_GetTick>
 8002236:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d008      	beq.n	8002256 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e052      	b.n	80022fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0216 	bic.w	r2, r2, #22
 8002264:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002274:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <HAL_DMA_Abort+0x62>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0208 	bic.w	r2, r2, #8
 8002294:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a6:	e013      	b.n	80022d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a8:	f7ff fd9c 	bl	8001de4 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d90c      	bls.n	80022d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e015      	b.n	80022fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e4      	bne.n	80022a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e2:	223f      	movs	r2, #63	@ 0x3f
 80022e4:	409a      	lsls	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d004      	beq.n	8002322 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00c      	b.n	800233c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002354:	4b8e      	ldr	r3, [pc, #568]	@ (8002590 <HAL_DMA_IRQHandler+0x248>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a8e      	ldr	r2, [pc, #568]	@ (8002594 <HAL_DMA_IRQHandler+0x24c>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	2208      	movs	r2, #8
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	2208      	movs	r2, #8
 80023a2:	409a      	lsls	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	2201      	movs	r2, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d012      	beq.n	80023ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	2201      	movs	r2, #1
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	f043 0202 	orr.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2204      	movs	r2, #4
 80023f0:	409a      	lsls	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	2204      	movs	r2, #4
 800240e:	409a      	lsls	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f043 0204 	orr.w	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	2210      	movs	r2, #16
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d043      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03c      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	2210      	movs	r2, #16
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d018      	beq.n	800248a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d024      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
 8002476:	e01f      	b.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
 8002488:	e016      	b.n	80024b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0208 	bic.w	r2, r2, #8
 80024a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	2220      	movs	r2, #32
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 808f 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8087 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	2220      	movs	r2, #32
 80024e0:	409a      	lsls	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d136      	bne.n	8002560 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0216 	bic.w	r2, r2, #22
 8002500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002510:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_DMA_IRQHandler+0x1da>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	223f      	movs	r2, #63	@ 0x3f
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07e      	beq.n	8002654 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
        }
        return;
 800255e:	e079      	b.n	8002654 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002580:	2b00      	cmp	r3, #0
 8002582:	d031      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e02c      	b.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000
 8002594:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
 80025a8:	e01e      	b.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0210 	bic.w	r2, r2, #16
 80025c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d032      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2205      	movs	r2, #5
 8002600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	d307      	bcc.n	8002630 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f2      	bne.n	8002614 <HAL_DMA_IRQHandler+0x2cc>
 800262e:	e000      	b.n	8002632 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002630:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e000      	b.n	8002656 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002654:	bf00      	nop
    }
  }
}
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d108      	bne.n	80026b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b2:	e007      	b.n	80026c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3b10      	subs	r3, #16
 80026e0:	4a13      	ldr	r2, [pc, #76]	@ (8002730 <DMA_CalcBaseAndBitshift+0x60>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ea:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <DMA_CalcBaseAndBitshift+0x64>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d908      	bls.n	8002710 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 8002706:	4013      	ands	r3, r2
 8002708:	1d1a      	adds	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	659a      	str	r2, [r3, #88]	@ 0x58
 800270e:	e006      	b.n	800271e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	aaaaaaab 	.word	0xaaaaaaab
 8002734:	0800ef48 	.word	0x0800ef48
 8002738:	fffffc00 	.word	0xfffffc00

0800273c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d856      	bhi.n	800280a <DMA_CheckFifoParam+0xce>
 800275c:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <DMA_CheckFifoParam+0x28>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002775 	.word	0x08002775
 8002768:	08002787 	.word	0x08002787
 800276c:	08002775 	.word	0x08002775
 8002770:	0800280b 	.word	0x0800280b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d046      	beq.n	800280e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e043      	b.n	800280e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800278e:	d140      	bne.n	8002812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e03d      	b.n	8002812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279e:	d121      	bne.n	80027e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d837      	bhi.n	8002816 <DMA_CheckFifoParam+0xda>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <DMA_CheckFifoParam+0x70>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027c3 	.word	0x080027c3
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	080027d5 	.word	0x080027d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e030      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d025      	beq.n	800281a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e022      	b.n	800281a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027dc:	d11f      	bne.n	800281e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e2:	e01c      	b.n	800281e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d903      	bls.n	80027f2 <DMA_CheckFifoParam+0xb6>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d003      	beq.n	80027f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f0:	e018      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      break;
 80027f6:	e015      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e00b      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 800280a:	bf00      	nop
 800280c:	e00a      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e008      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e006      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e004      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;   
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
    }
  } 
  
  return status; 
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e175      	b.n	8002b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8164 	bne.w	8002b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x56>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80be 	beq.w	8002b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	4a65      	ldr	r2, [pc, #404]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ca:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_GPIO_Init+0x324>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029d6:	4a61      	ldr	r2, [pc, #388]	@ (8002b5c <HAL_GPIO_Init+0x328>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	@ (8002b60 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d037      	beq.n	8002a72 <HAL_GPIO_Init+0x23e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a57      	ldr	r2, [pc, #348]	@ (8002b64 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_GPIO_Init+0x23a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a56      	ldr	r2, [pc, #344]	@ (8002b68 <HAL_GPIO_Init+0x334>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02b      	beq.n	8002a6a <HAL_GPIO_Init+0x236>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a55      	ldr	r2, [pc, #340]	@ (8002b6c <HAL_GPIO_Init+0x338>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x232>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	@ (8002b70 <HAL_GPIO_Init+0x33c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x22e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a53      	ldr	r2, [pc, #332]	@ (8002b74 <HAL_GPIO_Init+0x340>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x22a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	@ (8002b78 <HAL_GPIO_Init+0x344>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a51      	ldr	r2, [pc, #324]	@ (8002b7c <HAL_GPIO_Init+0x348>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x222>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	@ (8002b80 <HAL_GPIO_Init+0x34c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x21e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4f      	ldr	r2, [pc, #316]	@ (8002b84 <HAL_GPIO_Init+0x350>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x21a>
 8002a4a:	2309      	movs	r3, #9
 8002a4c:	e012      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a4e:	230a      	movs	r3, #10
 8002a50:	e010      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e00e      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00c      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00a      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5e:	2305      	movs	r3, #5
 8002a60:	e008      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e004      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a72:	2300      	movs	r3, #0
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f002 0203 	and.w	r2, r2, #3
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a84:	4935      	ldr	r1, [pc, #212]	@ (8002b5c <HAL_GPIO_Init+0x328>)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b3d      	ldr	r3, [pc, #244]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab6:	4a34      	ldr	r2, [pc, #208]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abc:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae0:	4a29      	ldr	r2, [pc, #164]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae6:	4b28      	ldr	r3, [pc, #160]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b34:	4a14      	ldr	r2, [pc, #80]	@ (8002b88 <HAL_GPIO_Init+0x354>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f ae86 	bls.w	8002854 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	@ 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40021400 	.word	0x40021400
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40021c00 	.word	0x40021c00
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022400 	.word	0x40022400
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e001      	b.n	8002bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e291      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8087 	beq.w	8002cee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be0:	4b96      	ldr	r3, [pc, #600]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d00c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bec:	4b93      	ldr	r3, [pc, #588]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d112      	bne.n	8002c1e <HAL_RCC_OscConfig+0x62>
 8002bf8:	4b90      	ldr	r3, [pc, #576]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c04:	d10b      	bne.n	8002c1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c06:	4b8d      	ldr	r3, [pc, #564]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d06c      	beq.n	8002cec <HAL_RCC_OscConfig+0x130>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d168      	bne.n	8002cec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e26b      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x7a>
 8002c28:	4b84      	ldr	r3, [pc, #528]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a83      	ldr	r2, [pc, #524]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e02e      	b.n	8002c94 <HAL_RCC_OscConfig+0xd8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x9c>
 8002c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7e      	ldr	r2, [pc, #504]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0xd8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0xc0>
 8002c62:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a75      	ldr	r2, [pc, #468]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a72      	ldr	r2, [pc, #456]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0xd8>
 8002c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6e      	ldr	r2, [pc, #440]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b6c      	ldr	r3, [pc, #432]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f8a2 	bl	8001de4 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f89e 	bl	8001de4 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e21f      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b61      	ldr	r3, [pc, #388]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe8>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f88e 	bl	8001de4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f88a 	bl	8001de4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e20b      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	4b57      	ldr	r3, [pc, #348]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x110>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d069      	beq.n	8002dce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cfa:	4b50      	ldr	r3, [pc, #320]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b4d      	ldr	r3, [pc, #308]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d11c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x190>
 8002d12:	4b4a      	ldr	r3, [pc, #296]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x17a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1df      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	493d      	ldr	r1, [pc, #244]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	e040      	b.n	8002dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a38      	ldr	r2, [pc, #224]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff f840 	bl	8001de4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff f83c 	bl	8001de4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1bd      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d86:	4b2d      	ldr	r3, [pc, #180]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4929      	ldr	r1, [pc, #164]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
 8002d9a:	e018      	b.n	8002dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a26      	ldr	r2, [pc, #152]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7ff f81c 	bl	8001de4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db0:	f7ff f818 	bl	8001de4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e199      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d038      	beq.n	8002e4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d019      	beq.n	8002e16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de2:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de6:	4a15      	ldr	r2, [pc, #84]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe fff9 	bl	8001de4 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe fff5 	bl	8001de4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e176      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x23a>
 8002e14:	e01a      	b.n	8002e4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e1a:	4a08      	ldr	r2, [pc, #32]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe ffdf 	bl	8001de4 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7fe ffdb 	bl	8001de4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d903      	bls.n	8002e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e15c      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
 8002e3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	4b91      	ldr	r3, [pc, #580]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ee      	bne.n	8002e2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80a4 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4a87      	ldr	r2, [pc, #540]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e72:	4b85      	ldr	r3, [pc, #532]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e82:	4b82      	ldr	r3, [pc, #520]	@ (800308c <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800308c <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe ffa3 	bl	8001de4 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe ff9f 	bl	8001de4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b64      	cmp	r3, #100	@ 0x64
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e120      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb4:	4b75      	ldr	r3, [pc, #468]	@ (800308c <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x31a>
 8002ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed4:	e02d      	b.n	8002f32 <HAL_RCC_OscConfig+0x376>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x33c>
 8002ede:	4b6a      	ldr	r3, [pc, #424]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a69      	ldr	r2, [pc, #420]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	4b67      	ldr	r3, [pc, #412]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a66      	ldr	r2, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x376>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x35e>
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	4a5d      	ldr	r2, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x376>
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f26:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	4a57      	ldr	r2, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe ff53 	bl	8001de4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe ff4f 	bl	8001de4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0ce      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x386>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe ff3d 	bl	8001de4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe ff39 	bl	8001de4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b3c      	ldr	r3, [pc, #240]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80a4 	beq.w	80030f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d06b      	beq.n	8003090 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d149      	bne.n	8003054 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a30      	ldr	r2, [pc, #192]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe ff0a 	bl	8001de4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe ff06 	bl	8001de4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e087      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b28      	ldr	r3, [pc, #160]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	4313      	orrs	r3, r2
 8003018:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 800301a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800301e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe feda 	bl	8001de4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fed6 	bl	8001de4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e057      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x478>
 8003052:	e04f      	b.n	80030f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 800305a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fec0 	bl	8001de4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe febc 	bl	8001de4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e03d      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_OscConfig+0x4cc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x4ac>
 8003086:	e035      	b.n	80030f4 <HAL_RCC_OscConfig+0x538>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003090:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_RCC_OscConfig+0x544>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d028      	beq.n	80030f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d111      	bne.n	80030f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d0      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b67      	ldr	r3, [pc, #412]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	4965      	ldr	r1, [pc, #404]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a58      	ldr	r2, [pc, #352]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800316e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a52      	ldr	r2, [pc, #328]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d040      	beq.n	8003228 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e073      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3d      	ldr	r3, [pc, #244]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06b      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4936      	ldr	r1, [pc, #216]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f8:	f7fe fdf4 	bl	8001de4 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe fdf0 	bl	8001de4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e053      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b27      	ldr	r3, [pc, #156]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d210      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 020f 	bic.w	r2, r3, #15
 800323e:	4922      	ldr	r1, [pc, #136]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490a      	ldr	r1, [pc, #40]	@ (80032d0 <HAL_RCC_ClockConfig+0x1cc>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x1d0>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <HAL_RCC_ClockConfig+0x1d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fbe8 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023c00 	.word	0x40023c00
 80032cc:	40023800 	.word	0x40023800
 80032d0:	0800ef30 	.word	0x0800ef30
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000004 	.word	0x20000004

080032dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e0:	b090      	sub	sp, #64	@ 0x40
 80032e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ec:	2300      	movs	r3, #0
 80032ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f4:	4b59      	ldr	r3, [pc, #356]	@ (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d00d      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003300:	2b08      	cmp	r3, #8
 8003302:	f200 80a1 	bhi.w	8003448 <HAL_RCC_GetSysClockFreq+0x16c>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x34>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x3a>
 800330e:	e09b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b53      	ldr	r3, [pc, #332]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x184>)
 8003312:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003314:	e09b      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800331a:	e098      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b4f      	ldr	r3, [pc, #316]	@ (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003326:	4b4d      	ldr	r3, [pc, #308]	@ (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b4a      	ldr	r3, [pc, #296]	@ (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	2200      	movs	r2, #0
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	627a      	str	r2, [r7, #36]	@ 0x24
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003344:	2100      	movs	r1, #0
 8003346:	4b47      	ldr	r3, [pc, #284]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003348:	fb03 f201 	mul.w	r2, r3, r1
 800334c:	2300      	movs	r3, #0
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	4413      	add	r3, r2
 8003354:	4a43      	ldr	r2, [pc, #268]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003356:	fba0 1202 	umull	r1, r2, r0, r2
 800335a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800335c:	460a      	mov	r2, r1
 800335e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003362:	4413      	add	r3, r2
 8003364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	2200      	movs	r2, #0
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	61fa      	str	r2, [r7, #28]
 800336e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003376:	f7fd fab9 	bl	80008ec <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4613      	mov	r3, r2
 8003380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003382:	e053      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003384:	4b35      	ldr	r3, [pc, #212]	@ (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	2200      	movs	r2, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	617a      	str	r2, [r7, #20]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003396:	f04f 0b00 	mov.w	fp, #0
 800339a:	4652      	mov	r2, sl
 800339c:	465b      	mov	r3, fp
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	ebb2 080a 	subs.w	r8, r2, sl
 80033b6:	eb63 090b 	sbc.w	r9, r3, fp
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ce:	ebb2 0408 	subs.w	r4, r2, r8
 80033d2:	eb63 0509 	sbc.w	r5, r3, r9
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	00eb      	lsls	r3, r5, #3
 80033e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e4:	00e2      	lsls	r2, r4, #3
 80033e6:	4614      	mov	r4, r2
 80033e8:	461d      	mov	r5, r3
 80033ea:	eb14 030a 	adds.w	r3, r4, sl
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	eb45 030b 	adc.w	r3, r5, fp
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003402:	4629      	mov	r1, r5
 8003404:	028b      	lsls	r3, r1, #10
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800340c:	4621      	mov	r1, r4
 800340e:	028a      	lsls	r2, r1, #10
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003416:	2200      	movs	r2, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	60fa      	str	r2, [r7, #12]
 800341c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003420:	f7fd fa64 	bl	80008ec <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800342c:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800343c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x184>)
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003450:	4618      	mov	r0, r3
 8003452:	3740      	adds	r7, #64	@ 0x40
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	017d7840 	.word	0x017d7840

08003468 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	@ (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	0800ef40 	.word	0x0800ef40

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffdc 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0b5b      	lsrs	r3, r3, #13
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	0800ef40 	.word	0x0800ef40

080034d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	220f      	movs	r2, #15
 80034de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034e0:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034ec:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003504:	4b09      	ldr	r3, [pc, #36]	@ (800352c <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	08db      	lsrs	r3, r3, #3
 800350a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003512:	4b07      	ldr	r3, [pc, #28]	@ (8003530 <HAL_RCC_GetClockConfig+0x60>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	40023c00 	.word	0x40023c00

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d012      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800355c:	4b69      	ldr	r3, [pc, #420]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a68      	ldr	r2, [pc, #416]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003566:	6093      	str	r3, [r2, #8]
 8003568:	4b66      	ldr	r3, [pc, #408]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	4964      	ldr	r1, [pc, #400]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d017      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800358e:	4b5d      	ldr	r3, [pc, #372]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003594:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	4959      	ldr	r1, [pc, #356]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	494a      	ldr	r1, [pc, #296]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 808b 	beq.w	800372e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b3a      	ldr	r3, [pc, #232]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	4a39      	ldr	r2, [pc, #228]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003622:	6413      	str	r3, [r2, #64]	@ 0x40
 8003624:	4b37      	ldr	r3, [pc, #220]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003630:	4b35      	ldr	r3, [pc, #212]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a34      	ldr	r2, [pc, #208]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fe fbd2 	bl	8001de4 <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fe fbce 	bl	8001de4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e357      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003656:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003662:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d035      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d02e      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003680:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800368a:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368e:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003694:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003696:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	4a1a      	ldr	r2, [pc, #104]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036a2:	4a18      	ldr	r2, [pc, #96]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036a8:	4b16      	ldr	r3, [pc, #88]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d114      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fb96 	bl	8001de4 <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fe fb92 	bl	8001de4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e319      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ee      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ea:	d111      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036f8:	4b04      	ldr	r3, [pc, #16]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	4901      	ldr	r1, [pc, #4]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
 8003702:	e00b      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
 800370c:	0ffffcff 	.word	0x0ffffcff
 8003710:	4baa      	ldr	r3, [pc, #680]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4aa9      	ldr	r2, [pc, #676]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	4ba7      	ldr	r3, [pc, #668]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	49a4      	ldr	r1, [pc, #656]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	4313      	orrs	r3, r2
 800372c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800373a:	4ba0      	ldr	r3, [pc, #640]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003740:	4a9e      	ldr	r2, [pc, #632]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003746:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800374a:	4b9c      	ldr	r3, [pc, #624]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	4999      	ldr	r1, [pc, #612]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003768:	4b94      	ldr	r3, [pc, #592]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003776:	4991      	ldr	r1, [pc, #580]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800378a:	4b8c      	ldr	r3, [pc, #560]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003790:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003798:	4988      	ldr	r1, [pc, #544]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ac:	4b83      	ldr	r3, [pc, #524]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ba:	4980      	ldr	r1, [pc, #512]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ce:	4b7b      	ldr	r3, [pc, #492]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4977      	ldr	r1, [pc, #476]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f0:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	496f      	ldr	r1, [pc, #444]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003812:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003818:	f023 020c 	bic.w	r2, r3, #12
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003820:	4966      	ldr	r1, [pc, #408]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003834:	4b61      	ldr	r3, [pc, #388]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	495e      	ldr	r1, [pc, #376]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003856:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	4955      	ldr	r1, [pc, #340]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003878:	4b50      	ldr	r3, [pc, #320]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	494d      	ldr	r1, [pc, #308]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800389a:	4b48      	ldr	r3, [pc, #288]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	4944      	ldr	r1, [pc, #272]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038bc:	4b3f      	ldr	r3, [pc, #252]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	493c      	ldr	r1, [pc, #240]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038de:	4b37      	ldr	r3, [pc, #220]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	4933      	ldr	r1, [pc, #204]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003900:	4b2e      	ldr	r3, [pc, #184]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390e:	492b      	ldr	r1, [pc, #172]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d011      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003922:	4b26      	ldr	r3, [pc, #152]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003928:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003930:	4922      	ldr	r1, [pc, #136]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003962:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003968:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003970:	4912      	ldr	r1, [pc, #72]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003994:	4909      	ldr	r1, [pc, #36]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d006      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80d9 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039b0:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a01      	ldr	r2, [pc, #4]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c2:	f7fe fa0f 	bl	8001de4 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ca:	f7fe fa0b 	bl	8001de4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	@ 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e194      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11d      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039fc:	4b64      	ldr	r3, [pc, #400]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a0a:	4b61      	ldr	r3, [pc, #388]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a10:	0e1b      	lsrs	r3, r3, #24
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	019a      	lsls	r2, r3, #6
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	071b      	lsls	r3, r3, #28
 8003a30:	4957      	ldr	r1, [pc, #348]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02e      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a62:	d129      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a64:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a72:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a78:	0f1b      	lsrs	r3, r3, #28
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	019a      	lsls	r2, r3, #6
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	071b      	lsls	r3, r3, #28
 8003a98:	493d      	ldr	r1, [pc, #244]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa6:	f023 021f 	bic.w	r2, r3, #31
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4937      	ldr	r1, [pc, #220]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01d      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ac4:	4b32      	ldr	r3, [pc, #200]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aca:	0e1b      	lsrs	r3, r3, #24
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad8:	0f1b      	lsrs	r3, r3, #28
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	019a      	lsls	r2, r3, #6
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	431a      	orrs	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	071b      	lsls	r3, r3, #28
 8003af8:	4925      	ldr	r1, [pc, #148]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d011      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	019a      	lsls	r2, r3, #6
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	071b      	lsls	r3, r3, #28
 8003b28:	4919      	ldr	r1, [pc, #100]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b30:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3c:	f7fe f952 	bl	8001de4 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b44:	f7fe f94e 	bl	8001de4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0d7      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 80cd 	bne.w	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a08      	ldr	r2, [pc, #32]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fe f935 	bl	8001de4 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b7e:	f7fe f931 	bl	8001de4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	@ 0x64
 8003b8a:	d903      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0ba      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b94:	4b5e      	ldr	r3, [pc, #376]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba0:	d0ed      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d02e      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bca:	4b51      	ldr	r3, [pc, #324]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	0f1b      	lsrs	r3, r3, #28
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	019a      	lsls	r2, r3, #6
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	061b      	lsls	r3, r3, #24
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	071b      	lsls	r3, r3, #28
 8003bfe:	4944      	ldr	r1, [pc, #272]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c06:	4b42      	ldr	r3, [pc, #264]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	493d      	ldr	r1, [pc, #244]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d022      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c34:	d11d      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c36:	4b36      	ldr	r3, [pc, #216]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	0e1b      	lsrs	r3, r3, #24
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c44:	4b32      	ldr	r3, [pc, #200]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	0f1b      	lsrs	r3, r3, #28
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	019a      	lsls	r2, r3, #6
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	071b      	lsls	r3, r3, #28
 8003c6a:	4929      	ldr	r1, [pc, #164]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d028      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c8c:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	4917      	ldr	r1, [pc, #92]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	4911      	ldr	r1, [pc, #68]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cdc:	f7fe f882 	bl	8001de4 <HAL_GetTick>
 8003ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ce4:	f7fe f87e 	bl	8001de4 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e007      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d02:	d1ef      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e022      	b.n	8003d6c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d105      	bne.n	8003d3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fd fd33 	bl	80017a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f814 	bl	8003d74 <HAL_SD_InitCard>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00a      	b.n	8003d6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d74:	b5b0      	push	{r4, r5, r7, lr}
 8003d76:	b08e      	sub	sp, #56	@ 0x38
 8003d78:	af04      	add	r7, sp, #16
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003d90:	2376      	movs	r3, #118	@ 0x76
 8003d92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681d      	ldr	r5, [r3, #0]
 8003d98:	466c      	mov	r4, sp
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dac:	4628      	mov	r0, r5
 8003dae:	f002 fe0d 	bl	80069cc <SDMMC_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e059      	b.n	8003e78 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 fe41 	bl	8006a60 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dec:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003dee:	2002      	movs	r0, #2
 8003df0:	f7fe f804 	bl	8001dfc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 ff59 	bl	8004cac <SD_PowerON>
 8003dfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e02e      	b.n	8003e78 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fe78 	bl	8004b10 <SD_InitCard>
 8003e20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e01b      	b.n	8003e78 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f002 fe9b 	bl	8006b84 <SDMMC_CmdBlockLength>
 8003e4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00f      	beq.n	8003e76 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a09      	ldr	r2, [pc, #36]	@ (8003e80 <HAL_SD_InitCard+0x10c>)
 8003e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	@ 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e80:	004005ff 	.word	0x004005ff

08003e84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	@ 0x30
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0c3      	b.n	8004034 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f040 80bc 	bne.w	8004032 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d907      	bls.n	8003ede <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0aa      	b.n	8004034 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003efc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003f04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003f0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2200      	movs	r2, #0
 8003f14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3380      	adds	r3, #128	@ 0x80
 8003f44:	4619      	mov	r1, r3
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	025b      	lsls	r3, r3, #9
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	f7fe f909 	bl	8002164 <HAL_DMA_Start_IT>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d017      	beq.n	8003f88 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003f66:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a35      	ldr	r2, [pc, #212]	@ (8004044 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e055      	b.n	8004034 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0208 	orr.w	r2, r2, #8
 8003f96:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d002      	beq.n	8003fa6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa2:	025b      	lsls	r3, r3, #9
 8003fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	025b      	lsls	r3, r3, #9
 8003fb0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003fb2:	2390      	movs	r3, #144	@ 0x90
 8003fb4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f107 0210 	add.w	r2, r7, #16
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f002 fdad 	bl	8006b2c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d90a      	bls.n	8003fee <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2282      	movs	r2, #130	@ 0x82
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f002 fe11 	bl	8006c0c <SDMMC_CmdReadMultiBlock>
 8003fea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003fec:	e009      	b.n	8004002 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2281      	movs	r2, #129	@ 0x81
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f002 fde4 	bl	8006bc8 <SDMMC_CmdReadSingleBlock>
 8004000:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0d      	ldr	r2, [pc, #52]	@ (8004044 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800400e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	431a      	orrs	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e002      	b.n	8004034 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	4618      	mov	r0, r3
 8004036:	3730      	adds	r7, #48	@ 0x30
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	0800491f 	.word	0x0800491f
 8004040:	08004991 	.word	0x08004991
 8004044:	004005ff 	.word	0x004005ff

08004048 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	@ 0x30
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0c6      	b.n	80041fe <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 80bf 	bne.w	80041fc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	441a      	add	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	429a      	cmp	r2, r3
 8004090:	d907      	bls.n	80040a2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004096:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0ad      	b.n	80041fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2203      	movs	r2, #3
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 021a 	orr.w	r2, r2, #26
 80040c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	4a50      	ldr	r2, [pc, #320]	@ (8004208 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80040c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	4a4f      	ldr	r2, [pc, #316]	@ (800420c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80040d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d6:	2200      	movs	r2, #0
 80040d8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d002      	beq.n	80040e8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d90a      	bls.n	8004104 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	22a0      	movs	r2, #160	@ 0xa0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 fdca 	bl	8006c94 <SDMMC_CmdWriteMultiBlock>
 8004100:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004102:	e009      	b.n	8004118 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2290      	movs	r2, #144	@ 0x90
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004110:	4618      	mov	r0, r3
 8004112:	f002 fd9d 	bl	8006c50 <SDMMC_CmdWriteSingleBlock>
 8004116:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d012      	beq.n	8004144 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3b      	ldr	r2, [pc, #236]	@ (8004210 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004124:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e05c      	b.n	80041fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0208 	orr.w	r2, r2, #8
 8004152:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	2240      	movs	r2, #64	@ 0x40
 800415a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3380      	adds	r3, #128	@ 0x80
 8004184:	461a      	mov	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	025b      	lsls	r3, r3, #9
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	f7fd ffea 	bl	8002164 <HAL_DMA_Start_IT>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 021a 	bic.w	r2, r2, #26
 80041a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80041ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e018      	b.n	80041fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
 80041d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80041d8:	2390      	movs	r3, #144	@ 0x90
 80041da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f107 0210 	add.w	r2, r7, #16
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 fc9a 	bl	8006b2c <SDMMC_ConfigData>

      return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3730      	adds	r7, #48	@ 0x30
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	080048f5 	.word	0x080048f5
 800420c:	08004991 	.word	0x08004991
 8004210:	004005ff 	.word	0x004005ff

08004214 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_SD_IRQHandler+0x2e>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fdec 	bl	8004e18 <SD_Read_IT>
 8004240:	e15a      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 808d 	beq.w	800436c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800425a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b9a      	ldr	r3, [pc, #616]	@ (80044d0 <HAL_SD_IRQHandler+0x2bc>)
 8004268:	400b      	ands	r3, r1
 800426a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d039      	beq.n	80042fa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <HAL_SD_IRQHandler+0x86>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d011      	beq.n	80042be <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f002 fd1a 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 80042a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f921 	bl	8004500 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80042c6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_SD_IRQHandler+0xd6>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f003 f938 	bl	8007560 <HAL_SD_RxCpltCallback>
 80042f0:	e102      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f003 f92a 	bl	800754c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042f8:	e0fe      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80f9 	beq.w	80044f8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d011      	beq.n	8004334 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f002 fcdf 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 800431a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8e6 	bl	8004500 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 80dc 	bne.w	80044f8 <HAL_SD_IRQHandler+0x2e4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 80d6 	bne.w	80044f8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0208 	bic.w	r2, r2, #8
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f003 f8f1 	bl	800754c <HAL_SD_TxCpltCallback>
}
 800436a:	e0c5      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_SD_IRQHandler+0x178>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fd98 	bl	8004eba <SD_Write_IT>
 800438a:	e0b5      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004392:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80ae 	beq.w	80044f8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	f043 0202 	orr.w	r2, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	f043 0208 	orr.w	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	f043 0210 	orr.w	r2, r3, #16
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f240 523a 	movw	r2, #1338	@ 0x53a
 800440c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800441c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f002 fc58 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 8004428:	4602      	mov	r2, r0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f857 	bl	8004500 <HAL_SD_ErrorCallback>
}
 8004452:	e051      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d04c      	beq.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <HAL_SD_IRQHandler+0x25e>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	4a17      	ldr	r2, [pc, #92]	@ (80044d4 <HAL_SD_IRQHandler+0x2c0>)
 8004478:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd ff40 	bl	8002304 <HAL_DMA_Abort_IT>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d036      	beq.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fad0 	bl	8004a34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004494:	e030      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_SD_IRQHandler+0x296>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <HAL_SD_IRQHandler+0x2c4>)
 80044b0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd ff24 	bl	8002304 <HAL_DMA_Abort_IT>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01a      	beq.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 faeb 	bl	8004aa2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044cc:	e014      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
 80044ce:	bf00      	nop
 80044d0:	ffff3ec5 	.word	0xffff3ec5
 80044d4:	08004a35 	.word	0x08004a35
 80044d8:	08004aa3 	.word	0x08004aa3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f003 f821 	bl	8007538 <HAL_SD_AbortCallback>
}
 80044f6:	e7ff      	b.n	80044f8 <HAL_SD_IRQHandler+0x2e4>
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004522:	0f9b      	lsrs	r3, r3, #30
 8004524:	b2da      	uxtb	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800452e:	0e9b      	lsrs	r3, r3, #26
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	b2da      	uxtb	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004540:	0e1b      	lsrs	r3, r3, #24
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	b2da      	uxtb	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	b2da      	uxtb	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	b2da      	uxtb	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004574:	0d1b      	lsrs	r3, r3, #20
 8004576:	b29a      	uxth	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	b2da      	uxtb	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004592:	0bdb      	lsrs	r3, r3, #15
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a4:	0b9b      	lsrs	r3, r3, #14
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b6:	0b5b      	lsrs	r3, r3, #13
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c8:	0b1b      	lsrs	r3, r3, #12
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2200      	movs	r2, #0
 80045da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d163      	bne.n	80046ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045e8:	009a      	lsls	r2, r3, #2
 80045ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045f4:	0f92      	lsrs	r2, r2, #30
 80045f6:	431a      	orrs	r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004600:	0edb      	lsrs	r3, r3, #27
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	b2da      	uxtb	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	b2da      	uxtb	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	b2da      	uxtb	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004636:	0c9b      	lsrs	r3, r3, #18
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	b2da      	uxtb	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004648:	0bdb      	lsrs	r3, r3, #15
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	b2da      	uxtb	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	7e1b      	ldrb	r3, [r3, #24]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	3302      	adds	r3, #2
 800466c:	2201      	movs	r2, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004676:	fb03 f202 	mul.w	r2, r3, r2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	7a1b      	ldrb	r3, [r3, #8]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004698:	0a52      	lsrs	r2, r2, #9
 800469a:	fb03 f202 	mul.w	r2, r3, r2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80046aa:	e031      	b.n	8004710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11d      	bne.n	80046f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	431a      	orrs	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	3301      	adds	r3, #1
 80046d0:	029a      	lsls	r2, r3, #10
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80046ee:	e00f      	b.n	8004710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a58      	ldr	r2, [pc, #352]	@ (8004858 <HAL_SD_GetCardCSD+0x344>)
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e09d      	b.n	800484c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004714:	0b9b      	lsrs	r3, r3, #14
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004726:	09db      	lsrs	r3, r3, #7
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800472e:	b2da      	uxtb	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800473e:	b2da      	uxtb	r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004748:	0fdb      	lsrs	r3, r3, #31
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004754:	0f5b      	lsrs	r3, r3, #29
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	b2da      	uxtb	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	0e9b      	lsrs	r3, r3, #26
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	b2da      	uxtb	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	0d9b      	lsrs	r3, r3, #22
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	b2da      	uxtb	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	0d5b      	lsrs	r3, r3, #21
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	0bdb      	lsrs	r3, r3, #15
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	0b9b      	lsrs	r3, r3, #14
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e2:	0b5b      	lsrs	r3, r3, #13
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	0b1b      	lsrs	r3, r3, #12
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	0a9b      	lsrs	r3, r3, #10
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	b2da      	uxtb	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	b2da      	uxtb	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800483a:	b2da      	uxtb	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	004005ff 	.word	0x004005ff

0800485c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80048c0:	f107 030c 	add.w	r3, r7, #12
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa7e 	bl	8004dc8 <SD_SendStatus>
 80048cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	0a5b      	lsrs	r3, r3, #9
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048ea:	693b      	ldr	r3, [r7, #16]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004910:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	2b82      	cmp	r3, #130	@ 0x82
 8004932:	d111      	bne.n	8004958 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f002 f9cd 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 800493e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fdd4 	bl	8004500 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0208 	bic.w	r2, r2, #8
 8004966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004970:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f002 fded 	bl	8007560 <HAL_SD_RxCpltCallback>
#endif
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd fe5c 	bl	800265c <HAL_DMA_GetError>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d03e      	beq.n	8004a28 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d002      	beq.n	80049c6 <SD_DMAError+0x36>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d12d      	bne.n	8004a22 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a19      	ldr	r2, [pc, #100]	@ (8004a30 <SD_DMAError+0xa0>)
 80049cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80049ea:	6978      	ldr	r0, [r7, #20]
 80049ec:	f7ff ff62 	bl	80048b4 <HAL_SD_GetCardState>
 80049f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d002      	beq.n	80049fe <SD_DMAError+0x6e>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d10a      	bne.n	8004a14 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f002 f968 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004a22:	6978      	ldr	r0, [r7, #20]
 8004a24:	f7ff fd6c 	bl	8004500 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	004005ff 	.word	0x004005ff

08004a34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a4a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ff31 	bl	80048b4 <HAL_SD_GetCardState>
 8004a52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d002      	beq.n	8004a6e <SD_DMATxAbort+0x3a>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d10a      	bne.n	8004a84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f002 f930 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f002 fd53 	bl	8007538 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004a92:	e002      	b.n	8004a9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7ff fd33 	bl	8004500 <HAL_SD_ErrorCallback>
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff fefa 	bl	80048b4 <HAL_SD_GetCardState>
 8004ac0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d002      	beq.n	8004adc <SD_DMARxAbort+0x3a>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b05      	cmp	r3, #5
 8004ada:	d10a      	bne.n	8004af2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 f8f9 	bl	8006cd8 <SDMMC_CmdStopTransfer>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f002 fd1c 	bl	8007538 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b00:	e002      	b.n	8004b08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff fcfc 	bl	8004500 <HAL_SD_ErrorCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b094      	sub	sp, #80	@ 0x50
 8004b14:	af04      	add	r7, sp, #16
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 ffab 	bl	8006a7c <SDMMC_GetPowerState>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b2c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b30:	e0b8      	b.n	8004ca4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d02f      	beq.n	8004b9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f002 f992 	bl	8006e68 <SDMMC_CmdSendCID>
 8004b44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <SD_InitCard+0x40>
    {
      return errorstate;
 8004b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4e:	e0a9      	b.n	8004ca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 ffd5 	bl	8006b06 <SDMMC_GetResponse>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2104      	movs	r1, #4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 ffcc 	bl	8006b06 <SDMMC_GetResponse>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2108      	movs	r1, #8
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 ffc3 	bl	8006b06 <SDMMC_GetResponse>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	210c      	movs	r1, #12
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 ffba 	bl	8006b06 <SDMMC_GetResponse>
 8004b92:	4602      	mov	r2, r0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d00d      	beq.n	8004bbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f107 020e 	add.w	r2, r7, #14
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f002 f998 	bl	8006ee2 <SDMMC_CmdSetRelAdd>
 8004bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <SD_InitCard+0xae>
    {
      return errorstate;
 8004bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbc:	e072      	b.n	8004ca4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d036      	beq.n	8004c34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004bc6:	89fb      	ldrh	r3, [r7, #14]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f002 f962 	bl	8006ea4 <SDMMC_CmdSendCSD>
 8004be0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <SD_InitCard+0xdc>
    {
      return errorstate;
 8004be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bea:	e05b      	b.n	8004ca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 ff87 	bl	8006b06 <SDMMC_GetResponse>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2104      	movs	r1, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 ff7e 	bl	8006b06 <SDMMC_GetResponse>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2108      	movs	r1, #8
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 ff75 	bl	8006b06 <SDMMC_GetResponse>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	210c      	movs	r1, #12
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 ff6c 	bl	8006b06 <SDMMC_GetResponse>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 ff63 	bl	8006b06 <SDMMC_GetResponse>
 8004c40:	4603      	mov	r3, r0
 8004c42:	0d1a      	lsrs	r2, r3, #20
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fc60 	bl	8004514 <HAL_SD_GetCardCSD>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c5e:	e021      	b.n	8004ca4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	461c      	mov	r4, r3
 8004c6e:	4615      	mov	r5, r2
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	4608      	mov	r0, r1
 8004c76:	f002 f851 	bl	8006d1c <SDMMC_CmdSelDesel>
 8004c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <SD_InitCard+0x176>
  {
    return errorstate;
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	e00e      	b.n	8004ca4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681d      	ldr	r5, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	466c      	mov	r4, sp
 8004c8e:	f103 0210 	add.w	r2, r3, #16
 8004c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c98:	3304      	adds	r3, #4
 8004c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f001 fe95 	bl	80069cc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3740      	adds	r7, #64	@ 0x40
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdb0      	pop	{r4, r5, r7, pc}

08004cac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f002 f84c 	bl	8006d62 <SDMMC_CmdGoIdleState>
 8004cca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	e072      	b.n	8004dbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f002 f85f 	bl	8006d9e <SDMMC_CmdOperCond>
 8004ce0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f002 f835 	bl	8006d62 <SDMMC_CmdGoIdleState>
 8004cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	e05b      	b.n	8004dbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d137      	bne.n	8004d82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f002 f85f 	bl	8006ddc <SDMMC_CmdAppCommand>
 8004d1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02d      	beq.n	8004d82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d2a:	e047      	b.n	8004dbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f002 f852 	bl	8006ddc <SDMMC_CmdAppCommand>
 8004d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <SD_PowerON+0x98>
    {
      return errorstate;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e03b      	b.n	8004dbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	491e      	ldr	r1, [pc, #120]	@ (8004dc4 <SD_PowerON+0x118>)
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f002 f868 	bl	8006e20 <SDMMC_CmdAppOperCommand>
 8004d50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d5c:	e02e      	b.n	8004dbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f001 fece 	bl	8006b06 <SDMMC_GetResponse>
 8004d6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	0fdb      	lsrs	r3, r3, #31
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <SD_PowerON+0xcc>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <SD_PowerON+0xce>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]

    count++;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d802      	bhi.n	8004d92 <SD_PowerON+0xe6>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0cc      	beq.n	8004d2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d902      	bls.n	8004da2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004d9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004da0:	e00c      	b.n	8004dbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004db2:	e002      	b.n	8004dba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	c1100000 	.word	0xc1100000

08004dc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004dd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ddc:	e018      	b.n	8004e10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f002 f89a 	bl	8006f24 <SDMMC_CmdSendStatus>
 8004df0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <SD_SendStatus+0x34>
  {
    return errorstate;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	e009      	b.n	8004e10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fe7f 	bl	8006b06 <SDMMC_GetResponse>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d03f      	beq.n	8004eb2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e033      	b.n	8004ea0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fdf1 	bl	8006a24 <SDMMC_ReadFIFO>
 8004e42:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	0e1b      	lsrs	r3, r3, #24
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3301      	adds	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b07      	cmp	r3, #7
 8004ea4:	d9c8      	bls.n	8004e38 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d043      	beq.n	8004f5c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e037      	b.n	8004f4a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	021a      	lsls	r2, r3, #8
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	041a      	lsls	r2, r3, #16
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f107 0208 	add.w	r2, r7, #8
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fd7d 	bl	8006a3e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3301      	adds	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d9c4      	bls.n	8004eda <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e049      	b.n	800500a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f841 	bl	8005012 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f000 f9e8 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d001      	beq.n	8005040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e054      	b.n	80050ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a26      	ldr	r2, [pc, #152]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d022      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	d01d      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a21      	ldr	r2, [pc, #132]	@ (8005100 <HAL_TIM_Base_Start_IT+0xd8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <HAL_TIM_Base_Start_IT+0xdc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1e      	ldr	r2, [pc, #120]	@ (8005108 <HAL_TIM_Base_Start_IT+0xe0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <HAL_TIM_Base_Start_IT+0xe4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x80>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005110 <HAL_TIM_Base_Start_IT+0xe8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d115      	bne.n	80050d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	4b19      	ldr	r3, [pc, #100]	@ (8005114 <HAL_TIM_Base_Start_IT+0xec>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d015      	beq.n	80050e6 <HAL_TIM_Base_Start_IT+0xbe>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c0:	d011      	beq.n	80050e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	e008      	b.n	80050e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e000      	b.n	80050e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40010400 	.word	0x40010400
 800510c:	40014000 	.word	0x40014000
 8005110:	40001800 	.word	0x40001800
 8005114:	00010007 	.word	0x00010007

08005118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d020      	beq.n	800517c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01b      	beq.n	800517c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0202 	mvn.w	r2, #2
 800514c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8e9 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f8db 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8ec 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d020      	beq.n	80051c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0204 	mvn.w	r2, #4
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8c3 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8b5 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f8c6 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d020      	beq.n	8005214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0208 	mvn.w	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f89d 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f88f 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8a0 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d020      	beq.n	8005260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2208      	movs	r2, #8
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f877 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f869 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f87a 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00c      	beq.n	8005284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0201 	mvn.w	r2, #1
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc fa50 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f919 	bl	80054e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00c      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f911 	bl	80054f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00c      	beq.n	80052fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f834 	bl	8005362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00c      	beq.n	800531e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f06f 0220 	mvn.w	r2, #32
 8005316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f8d9 	bl	80054d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a46      	ldr	r2, [pc, #280]	@ (80054a4 <TIM_Base_SetConfig+0x12c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a43      	ldr	r2, [pc, #268]	@ (80054a8 <TIM_Base_SetConfig+0x130>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a42      	ldr	r2, [pc, #264]	@ (80054ac <TIM_Base_SetConfig+0x134>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a41      	ldr	r2, [pc, #260]	@ (80054b0 <TIM_Base_SetConfig+0x138>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a40      	ldr	r2, [pc, #256]	@ (80054b4 <TIM_Base_SetConfig+0x13c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d108      	bne.n	80053ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a35      	ldr	r2, [pc, #212]	@ (80054a4 <TIM_Base_SetConfig+0x12c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d8:	d027      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a32      	ldr	r2, [pc, #200]	@ (80054a8 <TIM_Base_SetConfig+0x130>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d023      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a31      	ldr	r2, [pc, #196]	@ (80054ac <TIM_Base_SetConfig+0x134>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a30      	ldr	r2, [pc, #192]	@ (80054b0 <TIM_Base_SetConfig+0x138>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2f      	ldr	r2, [pc, #188]	@ (80054b4 <TIM_Base_SetConfig+0x13c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2e      	ldr	r2, [pc, #184]	@ (80054b8 <TIM_Base_SetConfig+0x140>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2d      	ldr	r2, [pc, #180]	@ (80054bc <TIM_Base_SetConfig+0x144>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <TIM_Base_SetConfig+0x148>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2b      	ldr	r2, [pc, #172]	@ (80054c4 <TIM_Base_SetConfig+0x14c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2a      	ldr	r2, [pc, #168]	@ (80054c8 <TIM_Base_SetConfig+0x150>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a29      	ldr	r2, [pc, #164]	@ (80054cc <TIM_Base_SetConfig+0x154>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a10      	ldr	r2, [pc, #64]	@ (80054a4 <TIM_Base_SetConfig+0x12c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0xf8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a12      	ldr	r2, [pc, #72]	@ (80054b4 <TIM_Base_SetConfig+0x13c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	611a      	str	r2, [r3, #16]
  }
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40010400 	.word	0x40010400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800
 80054c4:	40001800 	.word	0x40001800
 80054c8:	40001c00 	.word	0x40001c00
 80054cc:	40002000 	.word	0x40002000

080054d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e040      	b.n	80055a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fa46 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fdc2 	bl	80060dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fb5b 	bl	8005c14 <UART_SetConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01b      	b.n	80055a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fe41 	bl	8006220 <UART_CheckIdleState>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	@ 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d132      	bne.n	8005626 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_UART_Receive_IT+0x24>
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e02b      	b.n	8005628 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d018      	beq.n	8005616 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e6      	bne.n	80055e4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	461a      	mov	r2, r3
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fec3 	bl	80063a8 <UART_Start_Receive_IT>
 8005622:	4603      	mov	r3, r0
 8005624:	e000      	b.n	8005628 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
  }
}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	@ 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b0ba      	sub	sp, #232	@ 0xe8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800565a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800565e:	4013      	ands	r3, r2
 8005660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d115      	bne.n	8005698 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00f      	beq.n	8005698 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8297 	beq.w	8005bbc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
      }
      return;
 8005696:	e291      	b.n	8005bbc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8117 	beq.w	80058d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80056b2:	4b85      	ldr	r3, [pc, #532]	@ (80058c8 <HAL_UART_IRQHandler+0x298>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 810a 	beq.w	80058d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d011      	beq.n	80056ec <HAL_UART_IRQHandler+0xbc>
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2201      	movs	r2, #1
 80056da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e2:	f043 0201 	orr.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_UART_IRQHandler+0xec>
 80056f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2202      	movs	r2, #2
 800570a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005712:	f043 0204 	orr.w	r2, r3, #4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d011      	beq.n	800574c <HAL_UART_IRQHandler+0x11c>
 8005728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2204      	movs	r2, #4
 800573a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005742:	f043 0202 	orr.w	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005768:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2208      	movs	r2, #8
 8005776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577e:	f043 0208 	orr.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005790:	2b00      	cmp	r3, #0
 8005792:	d012      	beq.n	80057ba <HAL_UART_IRQHandler+0x18a>
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 81fd 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00d      	beq.n	80057ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b40      	cmp	r3, #64	@ 0x40
 8005804:	d005      	beq.n	8005812 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800580a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800580e:	2b00      	cmp	r3, #0
 8005810:	d04f      	beq.n	80058b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fe8e 	bl	8006534 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005822:	2b40      	cmp	r3, #64	@ 0x40
 8005824:	d141      	bne.n	80058aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800583c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800585e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800586a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1d9      	bne.n	8005826 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005876:	2b00      	cmp	r3, #0
 8005878:	d013      	beq.n	80058a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587e:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <HAL_UART_IRQHandler+0x29c>)
 8005880:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005886:	4618      	mov	r0, r3
 8005888:	f7fc fd3c 	bl	8002304 <HAL_DMA_Abort_IT>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	e00f      	b.n	80058c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9a0 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	e00b      	b.n	80058c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f99c 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	e007      	b.n	80058c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f998 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80058c0:	e17e      	b.n	8005bc0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c2:	bf00      	nop
    return;
 80058c4:	e17c      	b.n	8005bc0 <HAL_UART_IRQHandler+0x590>
 80058c6:	bf00      	nop
 80058c8:	04000120 	.word	0x04000120
 80058cc:	080065fd 	.word	0x080065fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	f040 814c 	bne.w	8005b72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8145 	beq.w	8005b72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 813e 	beq.w	8005b72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2210      	movs	r2, #16
 80058fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	f040 80b6 	bne.w	8005a7a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800591a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8150 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800592a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800592e:	429a      	cmp	r2, r3
 8005930:	f080 8148 	bcs.w	8005bc4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800593a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005948:	f000 8086 	beq.w	8005a58 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005960:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800597a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005982:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800598e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1da      	bne.n	800594c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e1      	bne.n	8005996 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e3      	bne.n	80059d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e4      	bne.n	8005a18 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fc fbe6 	bl	8002224 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f8c2 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a78:	e0a4      	b.n	8005bc4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8096 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8091 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e4      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	623b      	str	r3, [r7, #32]
   return(result);
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b00:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e3      	bne.n	8005adc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f023 0310 	bic.w	r3, r3, #16
 8005b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	69b9      	ldr	r1, [r7, #24]
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	617b      	str	r3, [r7, #20]
   return(result);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e4      	bne.n	8005b28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f846 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b70:	e02a      	b.n	8005bc8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00e      	beq.n	8005b9c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01c      	beq.n	8005bcc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
    }
    return;
 8005b9a:	e017      	b.n	8005bcc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d012      	beq.n	8005bce <HAL_UART_IRQHandler+0x59e>
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fd37 	bl	8006628 <UART_EndTransmit_IT>
    return;
 8005bba:	e008      	b.n	8005bce <HAL_UART_IRQHandler+0x59e>
      return;
 8005bbc:	bf00      	nop
 8005bbe:	e006      	b.n	8005bce <HAL_UART_IRQHandler+0x59e>
    return;
 8005bc0:	bf00      	nop
 8005bc2:	e004      	b.n	8005bce <HAL_UART_IRQHandler+0x59e>
      return;
 8005bc4:	bf00      	nop
 8005bc6:	e002      	b.n	8005bce <HAL_UART_IRQHandler+0x59e>
      return;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <HAL_UART_IRQHandler+0x59e>
    return;
 8005bcc:	bf00      	nop
  }

}
 8005bce:	37e8      	adds	r7, #232	@ 0xe8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4ba6      	ldr	r3, [pc, #664]	@ (8005ed8 <UART_SetConfig+0x2c4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	6979      	ldr	r1, [r7, #20]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a94      	ldr	r2, [pc, #592]	@ (8005edc <UART_SetConfig+0x2c8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d120      	bne.n	8005cd2 <UART_SetConfig+0xbe>
 8005c90:	4b93      	ldr	r3, [pc, #588]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d816      	bhi.n	8005ccc <UART_SetConfig+0xb8>
 8005c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x90>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cc1 	.word	0x08005cc1
 8005cac:	08005cbb 	.word	0x08005cbb
 8005cb0:	08005cc7 	.word	0x08005cc7
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e150      	b.n	8005f5c <UART_SetConfig+0x348>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e14d      	b.n	8005f5c <UART_SetConfig+0x348>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e14a      	b.n	8005f5c <UART_SetConfig+0x348>
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e147      	b.n	8005f5c <UART_SetConfig+0x348>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e144      	b.n	8005f5c <UART_SetConfig+0x348>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a83      	ldr	r2, [pc, #524]	@ (8005ee4 <UART_SetConfig+0x2d0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d132      	bne.n	8005d42 <UART_SetConfig+0x12e>
 8005cdc:	4b80      	ldr	r3, [pc, #512]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d828      	bhi.n	8005d3c <UART_SetConfig+0x128>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <UART_SetConfig+0xdc>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d25 	.word	0x08005d25
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	08005d31 	.word	0x08005d31
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d3d 	.word	0x08005d3d
 8005d10:	08005d2b 	.word	0x08005d2b
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d3d 	.word	0x08005d3d
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d37 	.word	0x08005d37
 8005d24:	2300      	movs	r3, #0
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e118      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e115      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d30:	2304      	movs	r3, #4
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e112      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d36:	2308      	movs	r3, #8
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e10f      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e10c      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a68      	ldr	r2, [pc, #416]	@ (8005ee8 <UART_SetConfig+0x2d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d120      	bne.n	8005d8e <UART_SetConfig+0x17a>
 8005d4c:	4b64      	ldr	r3, [pc, #400]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d56:	2b30      	cmp	r3, #48	@ 0x30
 8005d58:	d013      	beq.n	8005d82 <UART_SetConfig+0x16e>
 8005d5a:	2b30      	cmp	r3, #48	@ 0x30
 8005d5c:	d814      	bhi.n	8005d88 <UART_SetConfig+0x174>
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d009      	beq.n	8005d76 <UART_SetConfig+0x162>
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d810      	bhi.n	8005d88 <UART_SetConfig+0x174>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <UART_SetConfig+0x15c>
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d006      	beq.n	8005d7c <UART_SetConfig+0x168>
 8005d6e:	e00b      	b.n	8005d88 <UART_SetConfig+0x174>
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e0f2      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d76:	2302      	movs	r3, #2
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e0ef      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e0ec      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d82:	2308      	movs	r3, #8
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e0e9      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e0e6      	b.n	8005f5c <UART_SetConfig+0x348>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a56      	ldr	r2, [pc, #344]	@ (8005eec <UART_SetConfig+0x2d8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d120      	bne.n	8005dda <UART_SetConfig+0x1c6>
 8005d98:	4b51      	ldr	r3, [pc, #324]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da4:	d013      	beq.n	8005dce <UART_SetConfig+0x1ba>
 8005da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da8:	d814      	bhi.n	8005dd4 <UART_SetConfig+0x1c0>
 8005daa:	2b80      	cmp	r3, #128	@ 0x80
 8005dac:	d009      	beq.n	8005dc2 <UART_SetConfig+0x1ae>
 8005dae:	2b80      	cmp	r3, #128	@ 0x80
 8005db0:	d810      	bhi.n	8005dd4 <UART_SetConfig+0x1c0>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <UART_SetConfig+0x1a8>
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d006      	beq.n	8005dc8 <UART_SetConfig+0x1b4>
 8005dba:	e00b      	b.n	8005dd4 <UART_SetConfig+0x1c0>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e0cc      	b.n	8005f5c <UART_SetConfig+0x348>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e0c9      	b.n	8005f5c <UART_SetConfig+0x348>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e0c6      	b.n	8005f5c <UART_SetConfig+0x348>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e0c3      	b.n	8005f5c <UART_SetConfig+0x348>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e0c0      	b.n	8005f5c <UART_SetConfig+0x348>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a44      	ldr	r2, [pc, #272]	@ (8005ef0 <UART_SetConfig+0x2dc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d125      	bne.n	8005e30 <UART_SetConfig+0x21c>
 8005de4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df2:	d017      	beq.n	8005e24 <UART_SetConfig+0x210>
 8005df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df8:	d817      	bhi.n	8005e2a <UART_SetConfig+0x216>
 8005dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dfe:	d00b      	beq.n	8005e18 <UART_SetConfig+0x204>
 8005e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e04:	d811      	bhi.n	8005e2a <UART_SetConfig+0x216>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <UART_SetConfig+0x1fe>
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0e:	d006      	beq.n	8005e1e <UART_SetConfig+0x20a>
 8005e10:	e00b      	b.n	8005e2a <UART_SetConfig+0x216>
 8005e12:	2300      	movs	r3, #0
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e0a1      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e09e      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e1e:	2304      	movs	r3, #4
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e09b      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e24:	2308      	movs	r3, #8
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e098      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e2a:	2310      	movs	r3, #16
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e095      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef4 <UART_SetConfig+0x2e0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d125      	bne.n	8005e86 <UART_SetConfig+0x272>
 8005e3a:	4b29      	ldr	r3, [pc, #164]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e48:	d017      	beq.n	8005e7a <UART_SetConfig+0x266>
 8005e4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e4e:	d817      	bhi.n	8005e80 <UART_SetConfig+0x26c>
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e54:	d00b      	beq.n	8005e6e <UART_SetConfig+0x25a>
 8005e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e5a:	d811      	bhi.n	8005e80 <UART_SetConfig+0x26c>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <UART_SetConfig+0x254>
 8005e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e64:	d006      	beq.n	8005e74 <UART_SetConfig+0x260>
 8005e66:	e00b      	b.n	8005e80 <UART_SetConfig+0x26c>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e076      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e073      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e74:	2304      	movs	r3, #4
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e070      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e06d      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e80:	2310      	movs	r3, #16
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e06a      	b.n	8005f5c <UART_SetConfig+0x348>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef8 <UART_SetConfig+0x2e4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d138      	bne.n	8005f02 <UART_SetConfig+0x2ee>
 8005e90:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e9e:	d017      	beq.n	8005ed0 <UART_SetConfig+0x2bc>
 8005ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea4:	d82a      	bhi.n	8005efc <UART_SetConfig+0x2e8>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eaa:	d00b      	beq.n	8005ec4 <UART_SetConfig+0x2b0>
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	d824      	bhi.n	8005efc <UART_SetConfig+0x2e8>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <UART_SetConfig+0x2aa>
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eba:	d006      	beq.n	8005eca <UART_SetConfig+0x2b6>
 8005ebc:	e01e      	b.n	8005efc <UART_SetConfig+0x2e8>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e04b      	b.n	8005f5c <UART_SetConfig+0x348>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e048      	b.n	8005f5c <UART_SetConfig+0x348>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e045      	b.n	8005f5c <UART_SetConfig+0x348>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e042      	b.n	8005f5c <UART_SetConfig+0x348>
 8005ed6:	bf00      	nop
 8005ed8:	efff69f3 	.word	0xefff69f3
 8005edc:	40011000 	.word	0x40011000
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40004400 	.word	0x40004400
 8005ee8:	40004800 	.word	0x40004800
 8005eec:	40004c00 	.word	0x40004c00
 8005ef0:	40005000 	.word	0x40005000
 8005ef4:	40011400 	.word	0x40011400
 8005ef8:	40007800 	.word	0x40007800
 8005efc:	2310      	movs	r3, #16
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e02c      	b.n	8005f5c <UART_SetConfig+0x348>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a72      	ldr	r2, [pc, #456]	@ (80060d0 <UART_SetConfig+0x4bc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d125      	bne.n	8005f58 <UART_SetConfig+0x344>
 8005f0c:	4b71      	ldr	r3, [pc, #452]	@ (80060d4 <UART_SetConfig+0x4c0>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f16:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f1a:	d017      	beq.n	8005f4c <UART_SetConfig+0x338>
 8005f1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f20:	d817      	bhi.n	8005f52 <UART_SetConfig+0x33e>
 8005f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f26:	d00b      	beq.n	8005f40 <UART_SetConfig+0x32c>
 8005f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f2c:	d811      	bhi.n	8005f52 <UART_SetConfig+0x33e>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <UART_SetConfig+0x326>
 8005f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f36:	d006      	beq.n	8005f46 <UART_SetConfig+0x332>
 8005f38:	e00b      	b.n	8005f52 <UART_SetConfig+0x33e>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e00d      	b.n	8005f5c <UART_SetConfig+0x348>
 8005f40:	2302      	movs	r3, #2
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e00a      	b.n	8005f5c <UART_SetConfig+0x348>
 8005f46:	2304      	movs	r3, #4
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e007      	b.n	8005f5c <UART_SetConfig+0x348>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e004      	b.n	8005f5c <UART_SetConfig+0x348>
 8005f52:	2310      	movs	r3, #16
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e001      	b.n	8005f5c <UART_SetConfig+0x348>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f64:	d15b      	bne.n	800601e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f66:	7ffb      	ldrb	r3, [r7, #31]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d828      	bhi.n	8005fbe <UART_SetConfig+0x3aa>
 8005f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f74 <UART_SetConfig+0x360>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fa9 	.word	0x08005fa9
 8005f80:	08005fbf 	.word	0x08005fbf
 8005f84:	08005faf 	.word	0x08005faf
 8005f88:	08005fbf 	.word	0x08005fbf
 8005f8c:	08005fbf 	.word	0x08005fbf
 8005f90:	08005fbf 	.word	0x08005fbf
 8005f94:	08005fb7 	.word	0x08005fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f98:	f7fd fa72 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8005f9c:	61b8      	str	r0, [r7, #24]
        break;
 8005f9e:	e013      	b.n	8005fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa0:	f7fd fa82 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8005fa4:	61b8      	str	r0, [r7, #24]
        break;
 8005fa6:	e00f      	b.n	8005fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80060d8 <UART_SetConfig+0x4c4>)
 8005faa:	61bb      	str	r3, [r7, #24]
        break;
 8005fac:	e00c      	b.n	8005fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fae:	f7fd f995 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 8005fb2:	61b8      	str	r0, [r7, #24]
        break;
 8005fb4:	e008      	b.n	8005fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fba:	61bb      	str	r3, [r7, #24]
        break;
 8005fbc:	e004      	b.n	8005fc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d074      	beq.n	80060b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	005a      	lsls	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b0f      	cmp	r3, #15
 8005fe8:	d916      	bls.n	8006018 <UART_SetConfig+0x404>
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff0:	d212      	bcs.n	8006018 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f023 030f 	bic.w	r3, r3, #15
 8005ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	b29b      	uxth	r3, r3
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	b29a      	uxth	r2, r3
 8006008:	89fb      	ldrh	r3, [r7, #14]
 800600a:	4313      	orrs	r3, r2
 800600c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	89fa      	ldrh	r2, [r7, #14]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	e04f      	b.n	80060b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77bb      	strb	r3, [r7, #30]
 800601c:	e04c      	b.n	80060b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800601e:	7ffb      	ldrb	r3, [r7, #31]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d828      	bhi.n	8006076 <UART_SetConfig+0x462>
 8006024:	a201      	add	r2, pc, #4	@ (adr r2, 800602c <UART_SetConfig+0x418>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	08006077 	.word	0x08006077
 800603c:	08006067 	.word	0x08006067
 8006040:	08006077 	.word	0x08006077
 8006044:	08006077 	.word	0x08006077
 8006048:	08006077 	.word	0x08006077
 800604c:	0800606f 	.word	0x0800606f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006050:	f7fd fa16 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8006054:	61b8      	str	r0, [r7, #24]
        break;
 8006056:	e013      	b.n	8006080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006058:	f7fd fa26 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 800605c:	61b8      	str	r0, [r7, #24]
        break;
 800605e:	e00f      	b.n	8006080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006060:	4b1d      	ldr	r3, [pc, #116]	@ (80060d8 <UART_SetConfig+0x4c4>)
 8006062:	61bb      	str	r3, [r7, #24]
        break;
 8006064:	e00c      	b.n	8006080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006066:	f7fd f939 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800606a:	61b8      	str	r0, [r7, #24]
        break;
 800606c:	e008      	b.n	8006080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006072:	61bb      	str	r3, [r7, #24]
        break;
 8006074:	e004      	b.n	8006080 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	77bb      	strb	r3, [r7, #30]
        break;
 800607e:	bf00      	nop
    }

    if (pclk != 0U)
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d018      	beq.n	80060b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	085a      	lsrs	r2, r3, #1
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	441a      	add	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b0f      	cmp	r3, #15
 800609e:	d909      	bls.n	80060b4 <UART_SetConfig+0x4a0>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a6:	d205      	bcs.n	80060b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	e001      	b.n	80060b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40007c00 	.word	0x40007c00
 80060d4:	40023800 	.word	0x40023800
 80060d8:	00f42400 	.word	0x00f42400

080060dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061da:	d10a      	bne.n	80061f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08c      	sub	sp, #48	@ 0x30
 8006224:	af02      	add	r7, sp, #8
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006230:	f7fb fdd8 	bl	8001de4 <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b08      	cmp	r3, #8
 8006242:	d12e      	bne.n	80062a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	2200      	movs	r2, #0
 800624e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f83b 	bl	80062ce <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d021      	beq.n	80062a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60fb      	str	r3, [r7, #12]
   return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69b9      	ldr	r1, [r7, #24]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	617b      	str	r3, [r7, #20]
   return(result);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e011      	b.n	80062c6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3728      	adds	r7, #40	@ 0x28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062de:	e04f      	b.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d04b      	beq.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e8:	f7fb fd7c 	bl	8001de4 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d302      	bcc.n	80062fe <UART_WaitOnFlagUntilTimeout+0x30>
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e04e      	b.n	80063a0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d037      	beq.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b80      	cmp	r3, #128	@ 0x80
 8006314:	d034      	beq.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d031      	beq.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b08      	cmp	r3, #8
 8006328:	d110      	bne.n	800634c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2208      	movs	r2, #8
 8006330:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f8fe 	bl	8006534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2208      	movs	r2, #8
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e029      	b.n	80063a0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800635a:	d111      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006364:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f8e4 	bl	8006534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e00f      	b.n	80063a0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	429a      	cmp	r2, r3
 800639c:	d0a0      	beq.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b097      	sub	sp, #92	@ 0x5c
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063da:	d10e      	bne.n	80063fa <UART_Start_Receive_IT+0x52>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <UART_Start_Receive_IT+0x48>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063ee:	e02d      	b.n	800644c <UART_Start_Receive_IT+0xa4>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	22ff      	movs	r2, #255	@ 0xff
 80063f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063f8:	e028      	b.n	800644c <UART_Start_Receive_IT+0xa4>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <UART_Start_Receive_IT+0x76>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <UART_Start_Receive_IT+0x6c>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	@ 0xff
 800640e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006412:	e01b      	b.n	800644c <UART_Start_Receive_IT+0xa4>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	227f      	movs	r2, #127	@ 0x7f
 8006418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800641c:	e016      	b.n	800644c <UART_Start_Receive_IT+0xa4>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006426:	d10d      	bne.n	8006444 <UART_Start_Receive_IT+0x9c>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <UART_Start_Receive_IT+0x92>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	227f      	movs	r2, #127	@ 0x7f
 8006434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006438:	e008      	b.n	800644c <UART_Start_Receive_IT+0xa4>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	223f      	movs	r2, #63	@ 0x3f
 800643e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006442:	e003      	b.n	800644c <UART_Start_Receive_IT+0xa4>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2222      	movs	r2, #34	@ 0x22
 8006458:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800646c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	657b      	str	r3, [r7, #84]	@ 0x54
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800647c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800647e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800648a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006498:	d107      	bne.n	80064aa <UART_Start_Receive_IT+0x102>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a21      	ldr	r2, [pc, #132]	@ (800652c <UART_Start_Receive_IT+0x184>)
 80064a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80064a8:	e002      	b.n	80064b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a20      	ldr	r2, [pc, #128]	@ (8006530 <UART_Start_Receive_IT+0x188>)
 80064ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d019      	beq.n	80064ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80064cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e6      	bne.n	80064b8 <UART_Start_Receive_IT+0x110>
 80064ea:	e018      	b.n	800651e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	613b      	str	r3, [r7, #16]
   return(result);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f043 0320 	orr.w	r3, r3, #32
 8006500:	653b      	str	r3, [r7, #80]	@ 0x50
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	69f9      	ldr	r1, [r7, #28]
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	61bb      	str	r3, [r7, #24]
   return(result);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e6      	bne.n	80064ec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	375c      	adds	r7, #92	@ 0x5c
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	08006825 	.word	0x08006825
 8006530:	0800667d 	.word	0x0800667d

08006534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b095      	sub	sp, #84	@ 0x54
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800655a:	643b      	str	r3, [r7, #64]	@ 0x40
 800655c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e6      	bne.n	800653c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	61fb      	str	r3, [r7, #28]
   return(result);
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800658e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006590:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e5      	bne.n	800656e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d118      	bne.n	80065dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	647b      	str	r3, [r7, #68]	@ 0x44
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	613b      	str	r3, [r7, #16]
   return(result);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e6      	bne.n	80065aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065f0:	bf00      	nop
 80065f2:	3754      	adds	r7, #84	@ 0x54
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff fae4 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	60bb      	str	r3, [r7, #8]
   return(result);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	613b      	str	r3, [r7, #16]
   return(result);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e6      	bne.n	8006630 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff fab0 	bl	8005bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006674:	bf00      	nop
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b09c      	sub	sp, #112	@ 0x70
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800668a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006694:	2b22      	cmp	r3, #34	@ 0x22
 8006696:	f040 80b9 	bne.w	800680c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066a8:	b2d9      	uxtb	r1, r3
 80066aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b4:	400a      	ands	r2, r1
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 809c 	bne.w	800681c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006704:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006708:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	667b      	str	r3, [r7, #100]	@ 0x64
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006736:	647a      	str	r2, [r7, #68]	@ 0x44
 8006738:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800673c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d018      	beq.n	800679e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	623b      	str	r3, [r7, #32]
   return(result);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006780:	663b      	str	r3, [r7, #96]	@ 0x60
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800678a:	633b      	str	r3, [r7, #48]	@ 0x30
 800678c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e6      	bne.n	800676c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d12e      	bne.n	8006804 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	69b9      	ldr	r1, [r7, #24]
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	617b      	str	r3, [r7, #20]
   return(result);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d103      	bne.n	80067f4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2210      	movs	r2, #16
 80067f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff f9fd 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006802:	e00b      	b.n	800681c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fa fdf1 	bl	80013ec <HAL_UART_RxCpltCallback>
}
 800680a:	e007      	b.n	800681c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0208 	orr.w	r2, r2, #8
 800681a:	619a      	str	r2, [r3, #24]
}
 800681c:	bf00      	nop
 800681e:	3770      	adds	r7, #112	@ 0x70
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b09c      	sub	sp, #112	@ 0x70
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006832:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800683c:	2b22      	cmp	r3, #34	@ 0x22
 800683e:	f040 80b9 	bne.w	80069b4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006852:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006856:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800685a:	4013      	ands	r3, r2
 800685c:	b29a      	uxth	r2, r3
 800685e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006860:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006866:	1c9a      	adds	r2, r3, #2
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 809c 	bne.w	80069c4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800689a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e6      	bne.n	800688c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068de:	643a      	str	r2, [r7, #64]	@ 0x40
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e5      	bne.n	80068be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d018      	beq.n	8006946 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	61fb      	str	r3, [r7, #28]
   return(result);
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006934:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e6      	bne.n	8006914 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694a:	2b01      	cmp	r3, #1
 800694c:	d12e      	bne.n	80069ac <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	60bb      	str	r3, [r7, #8]
   return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0310 	bic.w	r3, r3, #16
 8006968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	613b      	str	r3, [r7, #16]
   return(result);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b10      	cmp	r3, #16
 8006992:	d103      	bne.n	800699c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2210      	movs	r2, #16
 800699a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff f929 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069aa:	e00b      	b.n	80069c4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fa fd1d 	bl	80013ec <HAL_UART_RxCpltCallback>
}
 80069b2:	e007      	b.n	80069c4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0208 	orr.w	r2, r2, #8
 80069c2:	619a      	str	r2, [r3, #24]
}
 80069c4:	bf00      	nop
 80069c6:	3770      	adds	r7, #112	@ 0x70
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80069cc:	b084      	sub	sp, #16
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	f107 001c 	add.w	r0, r7, #28
 80069da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80069e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80069e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80069e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80069ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80069ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80069f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80069f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <SDMMC_Init+0x54>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	b004      	add	sp, #16
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	ffff8100 	.word	0xffff8100

08006a24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0303 	and.w	r3, r3, #3
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ab6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006abc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006ac2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <SDMMC_SendCommand+0x50>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	fffff000 	.word	0xfffff000

08006aec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	b2db      	uxtb	r3, r3
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3314      	adds	r3, #20
 8006b14:	461a      	mov	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	4413      	add	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
}  
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b52:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006b58:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006b5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0

}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006b92:	2310      	movs	r3, #16
 8006b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b96:	2340      	movs	r3, #64	@ 0x40
 8006b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ba4:	f107 0308 	add.w	r3, r7, #8
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff74 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb4:	2110      	movs	r1, #16
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9d6 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006bd6:	2311      	movs	r3, #17
 8006bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bda:	2340      	movs	r3, #64	@ 0x40
 8006bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006be6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ff52 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bf8:	2111      	movs	r1, #17
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9b4 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c02:	69fb      	ldr	r3, [r7, #28]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006c1a:	2312      	movs	r3, #18
 8006c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c1e:	2340      	movs	r3, #64	@ 0x40
 8006c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c2c:	f107 0308 	add.w	r3, r7, #8
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ff30 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3c:	2112      	movs	r1, #18
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f992 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006c5e:	2318      	movs	r3, #24
 8006c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c62:	2340      	movs	r3, #64	@ 0x40
 8006c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c70:	f107 0308 	add.w	r3, r7, #8
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff ff0e 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c80:	2118      	movs	r1, #24
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f970 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006c88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006ca2:	2319      	movs	r3, #25
 8006ca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ca6:	2340      	movs	r3, #64	@ 0x40
 8006ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cb4:	f107 0308 	add.w	r3, r7, #8
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff feec 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc4:	2119      	movs	r1, #25
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f94e 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cce:	69fb      	ldr	r3, [r7, #28]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ce8:	2340      	movs	r3, #64	@ 0x40
 8006cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fecb 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006d02:	4a05      	ldr	r2, [pc, #20]	@ (8006d18 <SDMMC_CmdStopTransfer+0x40>)
 8006d04:	210c      	movs	r1, #12
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f92e 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d0e:	69fb      	ldr	r3, [r7, #28]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	05f5e100 	.word	0x05f5e100

08006d1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	@ 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006d2c:	2307      	movs	r3, #7
 8006d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d30:	2340      	movs	r3, #64	@ 0x40
 8006d32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d3c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d3e:	f107 0310 	add.w	r3, r7, #16
 8006d42:	4619      	mov	r1, r3
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fea7 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4e:	2107      	movs	r1, #7
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f909 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006d56:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3728      	adds	r7, #40	@ 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b088      	sub	sp, #32
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fe86 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fb23 	bl	80073d8 <SDMMC_GetCmdError>
 8006d92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d94:	69fb      	ldr	r3, [r7, #28]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b088      	sub	sp, #32
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006da6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006daa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006dac:	2308      	movs	r3, #8
 8006dae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006db0:	2340      	movs	r3, #64	@ 0x40
 8006db2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dbe:	f107 0308 	add.w	r3, r7, #8
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fe67 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fab6 	bl	800733c <SDMMC_GetCmdResp7>
 8006dd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006dea:	2337      	movs	r3, #55	@ 0x37
 8006dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006dee:	2340      	movs	r3, #64	@ 0x40
 8006df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fe48 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0c:	2137      	movs	r1, #55	@ 0x37
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f8aa 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e16:	69fb      	ldr	r3, [r7, #28]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <SDMMC_CmdAppOperCommand+0x44>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006e32:	2329      	movs	r3, #41	@ 0x29
 8006e34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e36:	2340      	movs	r3, #64	@ 0x40
 8006e38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e44:	f107 0308 	add.w	r3, r7, #8
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff fe24 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f9bf 	bl	80071d4 <SDMMC_GetCmdResp3>
 8006e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e58:	69fb      	ldr	r3, [r7, #28]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	80100000 	.word	0x80100000

08006e68 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006e74:	2302      	movs	r3, #2
 8006e76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006e78:	23c0      	movs	r3, #192	@ 0xc0
 8006e7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fe03 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f956 	bl	8007144 <SDMMC_GetCmdResp2>
 8006e98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3720      	adds	r7, #32
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006eb2:	2309      	movs	r3, #9
 8006eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006eb6:	23c0      	movs	r3, #192	@ 0xc0
 8006eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ec4:	f107 0308 	add.w	r3, r7, #8
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fde4 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f937 	bl	8007144 <SDMMC_GetCmdResp2>
 8006ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b088      	sub	sp, #32
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ef4:	2340      	movs	r3, #64	@ 0x40
 8006ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff fdc5 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	2103      	movs	r1, #3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f99c 	bl	8007250 <SDMMC_GetCmdResp6>
 8006f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006f32:	230d      	movs	r3, #13
 8006f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f36:	2340      	movs	r3, #64	@ 0x40
 8006f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff fda4 	bl	8006a98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f54:	210d      	movs	r1, #13
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f806 	bl	8006f68 <SDMMC_GetCmdResp1>
 8006f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	460b      	mov	r3, r1
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f76:	4b70      	ldr	r3, [pc, #448]	@ (8007138 <SDMMC_GetCmdResp1+0x1d0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a70      	ldr	r2, [pc, #448]	@ (800713c <SDMMC_GetCmdResp1+0x1d4>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	0a5a      	lsrs	r2, r3, #9
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
 8006f88:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	61fa      	str	r2, [r7, #28]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f98:	e0c9      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0ef      	beq.n	8006f8a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1ea      	bne.n	8006f8a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fc6:	2304      	movs	r3, #4
 8006fc8:	e0b1      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0a6      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	22c5      	movs	r2, #197	@ 0xc5
 8006fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fd80 	bl	8006aec <SDMMC_GetCommandResponse>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d001      	beq.n	8006ffa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e099      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fd82 	bl	8006b06 <SDMMC_GetResponse>
 8007002:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4b4e      	ldr	r3, [pc, #312]	@ (8007140 <SDMMC_GetCmdResp1+0x1d8>)
 8007008:	4013      	ands	r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800700e:	2300      	movs	r3, #0
 8007010:	e08d      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	da02      	bge.n	800701e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800701c:	e087      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007028:	2340      	movs	r3, #64	@ 0x40
 800702a:	e080      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007036:	2380      	movs	r3, #128	@ 0x80
 8007038:	e079      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007048:	e071      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007058:	e069      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007068:	e061      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007078:	e059      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007088:	e051      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007098:	e049      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80070a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80070a8:	e041      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80070b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070b8:	e039      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80070c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80070c8:	e031      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80070d8:	e029      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80070e8:	e021      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80070f8:	e019      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007104:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007108:	e011      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007114:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007118:	e009      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007124:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007128:	e001      	b.n	800712e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800712a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000000 	.word	0x20000000
 800713c:	10624dd3 	.word	0x10624dd3
 8007140:	fdffe008 	.word	0xfdffe008

08007144 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800714c:	4b1f      	ldr	r3, [pc, #124]	@ (80071cc <SDMMC_GetCmdResp2+0x88>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1f      	ldr	r2, [pc, #124]	@ (80071d0 <SDMMC_GetCmdResp2+0x8c>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	0a5b      	lsrs	r3, r3, #9
 8007158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800715c:	fb02 f303 	mul.w	r3, r2, r3
 8007160:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1e5a      	subs	r2, r3, #1
 8007166:	60fa      	str	r2, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800716c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007170:	e026      	b.n	80071c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007176:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0ef      	beq.n	8007162 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ea      	bne.n	8007162 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2204      	movs	r2, #4
 800719c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800719e:	2304      	movs	r3, #4
 80071a0:	e00e      	b.n	80071c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e003      	b.n	80071c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	22c5      	movs	r2, #197	@ 0xc5
 80071bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20000000 	.word	0x20000000
 80071d0:	10624dd3 	.word	0x10624dd3

080071d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <SDMMC_GetCmdResp3+0x74>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1a      	ldr	r2, [pc, #104]	@ (800724c <SDMMC_GetCmdResp3+0x78>)
 80071e2:	fba2 2303 	umull	r2, r3, r2, r3
 80071e6:	0a5b      	lsrs	r3, r3, #9
 80071e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
 80071f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	60fa      	str	r2, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007200:	e01b      	b.n	800723a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007206:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0ef      	beq.n	80071f2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1ea      	bne.n	80071f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2204      	movs	r2, #4
 800722c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800722e:	2304      	movs	r3, #4
 8007230:	e003      	b.n	800723a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	22c5      	movs	r2, #197	@ 0xc5
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000000 	.word	0x20000000
 800724c:	10624dd3 	.word	0x10624dd3

08007250 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	460b      	mov	r3, r1
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800725e:	4b35      	ldr	r3, [pc, #212]	@ (8007334 <SDMMC_GetCmdResp6+0xe4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a35      	ldr	r2, [pc, #212]	@ (8007338 <SDMMC_GetCmdResp6+0xe8>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	0a5b      	lsrs	r3, r3, #9
 800726a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	61fa      	str	r2, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800727e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007282:	e052      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007288:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0ef      	beq.n	8007274 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1ea      	bne.n	8007274 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2204      	movs	r2, #4
 80072ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072b0:	2304      	movs	r3, #4
 80072b2:	e03a      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e02f      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff fc0e 	bl	8006aec <SDMMC_GetCommandResponse>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d001      	beq.n	80072de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072da:	2301      	movs	r3, #1
 80072dc:	e025      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	22c5      	movs	r2, #197	@ 0xc5
 80072e2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80072e4:	2100      	movs	r1, #0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7ff fc0d 	bl	8006b06 <SDMMC_GetResponse>
 80072ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007302:	2300      	movs	r3, #0
 8007304:	e011      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007314:	e009      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007324:	e001      	b.n	800732a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800732a:	4618      	mov	r0, r3
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000000 	.word	0x20000000
 8007338:	10624dd3 	.word	0x10624dd3

0800733c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007344:	4b22      	ldr	r3, [pc, #136]	@ (80073d0 <SDMMC_GetCmdResp7+0x94>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a22      	ldr	r2, [pc, #136]	@ (80073d4 <SDMMC_GetCmdResp7+0x98>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	0a5b      	lsrs	r3, r3, #9
 8007350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1e5a      	subs	r2, r3, #1
 800735e:	60fa      	str	r2, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007364:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007368:	e02c      	b.n	80073c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800736e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ef      	beq.n	800735a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1ea      	bne.n	800735a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2204      	movs	r2, #4
 8007394:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007396:	2304      	movs	r3, #4
 8007398:	e014      	b.n	80073c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e009      	b.n	80073c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2240      	movs	r2, #64	@ 0x40
 80073c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80073c2:	2300      	movs	r3, #0
  
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000000 	.word	0x20000000
 80073d4:	10624dd3 	.word	0x10624dd3

080073d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073e0:	4b11      	ldr	r3, [pc, #68]	@ (8007428 <SDMMC_GetCmdError+0x50>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a11      	ldr	r2, [pc, #68]	@ (800742c <SDMMC_GetCmdError+0x54>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	60fa      	str	r2, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007400:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007404:	e009      	b.n	800741a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f1      	beq.n	80073f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	22c5      	movs	r2, #197	@ 0xc5
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000000 	.word	0x20000000
 800742c:	10624dd3 	.word	0x10624dd3

08007430 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007434:	4904      	ldr	r1, [pc, #16]	@ (8007448 <MX_FATFS_Init+0x18>)
 8007436:	4805      	ldr	r0, [pc, #20]	@ (800744c <MX_FATFS_Init+0x1c>)
 8007438:	f003 f918 	bl	800a66c <FATFS_LinkDriver>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <MX_FATFS_Init+0x20>)
 8007442:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20002734 	.word	0x20002734
 800744c:	0800ef50 	.word	0x0800ef50
 8007450:	20002730 	.word	0x20002730

08007454 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007458:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800745a:	4618      	mov	r0, r3
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800746e:	f000 f888 	bl	8007582 <BSP_SD_IsDetected>
 8007472:	4603      	mov	r3, r0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007478:	2302      	movs	r3, #2
 800747a:	e005      	b.n	8007488 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800747c:	4804      	ldr	r0, [pc, #16]	@ (8007490 <BSP_SD_Init+0x2c>)
 800747e:	f7fc fc49 	bl	8003d14 <HAL_SD_Init>
 8007482:	4603      	mov	r3, r0
 8007484:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007486:	79fb      	ldrb	r3, [r7, #7]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200023b8 	.word	0x200023b8

08007494 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	68f9      	ldr	r1, [r7, #12]
 80074aa:	4806      	ldr	r0, [pc, #24]	@ (80074c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80074ac:	f7fc fcea 	bl	8003e84 <HAL_SD_ReadBlocks_DMA>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200023b8 	.word	0x200023b8

080074c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	68f9      	ldr	r1, [r7, #12]
 80074de:	4806      	ldr	r0, [pc, #24]	@ (80074f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80074e0:	f7fc fdb2 	bl	8004048 <HAL_SD_WriteBlocks_DMA>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	200023b8 	.word	0x200023b8

080074fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007500:	4805      	ldr	r0, [pc, #20]	@ (8007518 <BSP_SD_GetCardState+0x1c>)
 8007502:	f7fd f9d7 	bl	80048b4 <HAL_SD_GetCardState>
 8007506:	4603      	mov	r3, r0
 8007508:	2b04      	cmp	r3, #4
 800750a:	bf14      	ite	ne
 800750c:	2301      	movne	r3, #1
 800750e:	2300      	moveq	r3, #0
 8007510:	b2db      	uxtb	r3, r3
}
 8007512:	4618      	mov	r0, r3
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	200023b8 	.word	0x200023b8

0800751c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4803      	ldr	r0, [pc, #12]	@ (8007534 <BSP_SD_GetCardInfo+0x18>)
 8007528:	f7fd f998 	bl	800485c <HAL_SD_GetCardInfo>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	200023b8 	.word	0x200023b8

08007538 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007540:	f000 f818 	bl	8007574 <BSP_SD_AbortCallback>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007554:	f000 f9c4 	bl	80078e0 <BSP_SD_WriteCpltCallback>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007568:	f000 f9c8 	bl	80078fc <BSP_SD_ReadCpltCallback>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0

}
 8007578:	bf00      	nop
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007588:	2301      	movs	r3, #1
 800758a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800758c:	f000 f80c 	bl	80075a8 <BSP_PlatformIsDetected>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007596:	2300      	movs	r3, #0
 8007598:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	b2db      	uxtb	r3, r3
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80075ae:	2301      	movs	r3, #1
 80075b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80075b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80075b6:	4806      	ldr	r0, [pc, #24]	@ (80075d0 <BSP_PlatformIsDetected+0x28>)
 80075b8:	f7fb fae8 	bl	8002b8c <HAL_GPIO_ReadPin>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80075c2:	2300      	movs	r3, #0
 80075c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80075c6:	79fb      	ldrb	r3, [r7, #7]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40020800 	.word	0x40020800

080075d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80075dc:	f003 f8de 	bl	800a79c <osKernelSysTick>
 80075e0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80075e2:	e006      	b.n	80075f2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80075e4:	f7ff ff8a 	bl	80074fc <BSP_SD_GetCardState>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e009      	b.n	8007606 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80075f2:	f003 f8d3 	bl	800a79c <osKernelSysTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d8f0      	bhi.n	80075e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800761a:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <SD_CheckStatus+0x38>)
 800761c:	2201      	movs	r2, #1
 800761e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007620:	f7ff ff6c 	bl	80074fc <BSP_SD_GetCardState>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d107      	bne.n	800763a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800762a:	4b07      	ldr	r3, [pc, #28]	@ (8007648 <SD_CheckStatus+0x38>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <SD_CheckStatus+0x38>)
 8007638:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800763a:	4b03      	ldr	r3, [pc, #12]	@ (8007648 <SD_CheckStatus+0x38>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000009 	.word	0x20000009

0800764c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007656:	4b20      	ldr	r3, [pc, #128]	@ (80076d8 <SD_initialize+0x8c>)
 8007658:	2201      	movs	r2, #1
 800765a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800765c:	f003 f892 	bl	800a784 <osKernelRunning>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d030      	beq.n	80076c8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007666:	f7ff fefd 	bl	8007464 <BSP_SD_Init>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d107      	bne.n	8007680 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff ffcc 	bl	8007610 <SD_CheckStatus>
 8007678:	4603      	mov	r3, r0
 800767a:	461a      	mov	r2, r3
 800767c:	4b16      	ldr	r3, [pc, #88]	@ (80076d8 <SD_initialize+0x8c>)
 800767e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007680:	4b15      	ldr	r3, [pc, #84]	@ (80076d8 <SD_initialize+0x8c>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d01e      	beq.n	80076c8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800768a:	4b14      	ldr	r3, [pc, #80]	@ (80076dc <SD_initialize+0x90>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10e      	bne.n	80076b0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007692:	4b13      	ldr	r3, [pc, #76]	@ (80076e0 <SD_initialize+0x94>)
 8007694:	f107 0408 	add.w	r4, r7, #8
 8007698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800769a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f003 f99e 	bl	800a9e6 <osMessageCreate>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4a0b      	ldr	r2, [pc, #44]	@ (80076dc <SD_initialize+0x90>)
 80076ae:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80076b0:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <SD_initialize+0x90>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d107      	bne.n	80076c8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80076b8:	4b07      	ldr	r3, [pc, #28]	@ (80076d8 <SD_initialize+0x8c>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	4b04      	ldr	r3, [pc, #16]	@ (80076d8 <SD_initialize+0x8c>)
 80076c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80076c8:	4b03      	ldr	r3, [pc, #12]	@ (80076d8 <SD_initialize+0x8c>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd90      	pop	{r4, r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000009 	.word	0x20000009
 80076dc:	20002738 	.word	0x20002738
 80076e0:	0800eed4 	.word	0x0800eed4

080076e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff ff8d 	bl	8007610 <SD_CheckStatus>
 80076f6:	4603      	mov	r3, r0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	@ 0x28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007716:	f247 5030 	movw	r0, #30000	@ 0x7530
 800771a:	f7ff ff5b 	bl	80075d4 <SD_CheckStatusWithTimeout>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	da02      	bge.n	800772a <SD_read+0x2a>
  {
    return res;
 8007724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007728:	e032      	b.n	8007790 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	68b8      	ldr	r0, [r7, #8]
 8007730:	f7ff feb0 	bl	8007494 <BSP_SD_ReadBlocks_DMA>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800773a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800773e:	2b00      	cmp	r3, #0
 8007740:	d124      	bne.n	800778c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007742:	4b15      	ldr	r3, [pc, #84]	@ (8007798 <SD_read+0x98>)
 8007744:	6819      	ldr	r1, [r3, #0]
 8007746:	f107 0314 	add.w	r3, r7, #20
 800774a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800774e:	4618      	mov	r0, r3
 8007750:	f003 f9b2 	bl	800aab8 <osMessageGet>

    if (event.status == osEventMessage)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b10      	cmp	r3, #16
 8007758:	d118      	bne.n	800778c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d115      	bne.n	800778c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007760:	f003 f81c 	bl	800a79c <osKernelSysTick>
 8007764:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007766:	e008      	b.n	800777a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007768:	f7ff fec8 	bl	80074fc <BSP_SD_GetCardState>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <SD_read+0x7a>
              {
                res = RES_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007778:	e008      	b.n	800778c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800777a:	f003 f80f 	bl	800a79c <osKernelSysTick>
 800777e:	4602      	mov	r2, r0
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007788:	4293      	cmp	r3, r2
 800778a:	d9ed      	bls.n	8007768 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800778c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007790:	4618      	mov	r0, r3
 8007792:	3728      	adds	r7, #40	@ 0x28
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20002738 	.word	0x20002738

0800779c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	@ 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80077b2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80077b6:	f7ff ff0d 	bl	80075d4 <SD_CheckStatusWithTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da02      	bge.n	80077c6 <SD_write+0x2a>
  {
    return res;
 80077c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077c4:	e02e      	b.n	8007824 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	68b8      	ldr	r0, [r7, #8]
 80077cc:	f7ff fe7c 	bl	80074c8 <BSP_SD_WriteBlocks_DMA>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d124      	bne.n	8007820 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80077d6:	4b15      	ldr	r3, [pc, #84]	@ (800782c <SD_write+0x90>)
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	f107 0314 	add.w	r3, r7, #20
 80077de:	f247 5230 	movw	r2, #30000	@ 0x7530
 80077e2:	4618      	mov	r0, r3
 80077e4:	f003 f968 	bl	800aab8 <osMessageGet>

    if (event.status == osEventMessage)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d118      	bne.n	8007820 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d115      	bne.n	8007820 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80077f4:	f002 ffd2 	bl	800a79c <osKernelSysTick>
 80077f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80077fa:	e008      	b.n	800780e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80077fc:	f7ff fe7e 	bl	80074fc <BSP_SD_GetCardState>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <SD_write+0x72>
          {
            res = RES_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800780c:	e008      	b.n	8007820 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800780e:	f002 ffc5 	bl	800a79c <osKernelSysTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f247 522f 	movw	r2, #29999	@ 0x752f
 800781c:	4293      	cmp	r3, r2
 800781e:	d9ed      	bls.n	80077fc <SD_write+0x60>
    }

  }
#endif

  return res;
 8007820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007824:	4618      	mov	r0, r3
 8007826:	3728      	adds	r7, #40	@ 0x28
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20002738 	.word	0x20002738

08007830 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08c      	sub	sp, #48	@ 0x30
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	603a      	str	r2, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
 800783c:	460b      	mov	r3, r1
 800783e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007846:	4b25      	ldr	r3, [pc, #148]	@ (80078dc <SD_ioctl+0xac>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <SD_ioctl+0x28>
 8007854:	2303      	movs	r3, #3
 8007856:	e03c      	b.n	80078d2 <SD_ioctl+0xa2>

  switch (cmd)
 8007858:	79bb      	ldrb	r3, [r7, #6]
 800785a:	2b03      	cmp	r3, #3
 800785c:	d834      	bhi.n	80078c8 <SD_ioctl+0x98>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <SD_ioctl+0x34>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007875 	.word	0x08007875
 8007868:	0800787d 	.word	0x0800787d
 800786c:	08007895 	.word	0x08007895
 8007870:	080078af 	.word	0x080078af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800787a:	e028      	b.n	80078ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fe4b 	bl	800751c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007892:	e01c      	b.n	80078ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007894:	f107 030c 	add.w	r3, r7, #12
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fe3f 	bl	800751c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80078ac:	e00f      	b.n	80078ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fe32 	bl	800751c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	0a5a      	lsrs	r2, r3, #9
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80078c6:	e002      	b.n	80078ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80078ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3730      	adds	r7, #48	@ 0x30
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000009 	.word	0x20000009

080078e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80078e4:	4b04      	ldr	r3, [pc, #16]	@ (80078f8 <BSP_SD_WriteCpltCallback+0x18>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2200      	movs	r2, #0
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f003 f8a3 	bl	800aa38 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 80078f2:	bf00      	nop
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20002738 	.word	0x20002738

080078fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007900:	4b04      	ldr	r3, [pc, #16]	@ (8007914 <BSP_SD_ReadCpltCallback+0x18>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2200      	movs	r2, #0
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f003 f895 	bl	800aa38 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800790e:	bf00      	nop
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20002738 	.word	0x20002738

08007918 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	4a08      	ldr	r2, [pc, #32]	@ (8007948 <disk_status+0x30>)
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	79fa      	ldrb	r2, [r7, #7]
 8007930:	4905      	ldr	r1, [pc, #20]	@ (8007948 <disk_status+0x30>)
 8007932:	440a      	add	r2, r1
 8007934:	7a12      	ldrb	r2, [r2, #8]
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20002764 	.word	0x20002764

0800794c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	4a0d      	ldr	r2, [pc, #52]	@ (8007994 <disk_initialize+0x48>)
 800795e:	5cd3      	ldrb	r3, [r2, r3]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d111      	bne.n	8007988 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	4a0b      	ldr	r2, [pc, #44]	@ (8007994 <disk_initialize+0x48>)
 8007968:	2101      	movs	r1, #1
 800796a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	4a09      	ldr	r2, [pc, #36]	@ (8007994 <disk_initialize+0x48>)
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	79fa      	ldrb	r2, [r7, #7]
 800797a:	4906      	ldr	r1, [pc, #24]	@ (8007994 <disk_initialize+0x48>)
 800797c:	440a      	add	r2, r1
 800797e:	7a12      	ldrb	r2, [r2, #8]
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20002764 	.word	0x20002764

08007998 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	4a0a      	ldr	r2, [pc, #40]	@ (80079d4 <disk_read+0x3c>)
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	689c      	ldr	r4, [r3, #8]
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	4a07      	ldr	r2, [pc, #28]	@ (80079d4 <disk_read+0x3c>)
 80079b8:	4413      	add	r3, r2
 80079ba:	7a18      	ldrb	r0, [r3, #8]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	47a0      	blx	r4
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd90      	pop	{r4, r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20002764 	.word	0x20002764

080079d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007a14 <disk_write+0x3c>)
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68dc      	ldr	r4, [r3, #12]
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	4a07      	ldr	r2, [pc, #28]	@ (8007a14 <disk_write+0x3c>)
 80079f8:	4413      	add	r3, r2
 80079fa:	7a18      	ldrb	r0, [r3, #8]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	47a0      	blx	r4
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]
  return res;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd90      	pop	{r4, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20002764 	.word	0x20002764

08007a18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	603a      	str	r2, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
 8007a24:	460b      	mov	r3, r1
 8007a26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4a09      	ldr	r2, [pc, #36]	@ (8007a50 <disk_ioctl+0x38>)
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	79fa      	ldrb	r2, [r7, #7]
 8007a36:	4906      	ldr	r1, [pc, #24]	@ (8007a50 <disk_ioctl+0x38>)
 8007a38:	440a      	add	r2, r1
 8007a3a:	7a10      	ldrb	r0, [r2, #8]
 8007a3c:	79b9      	ldrb	r1, [r7, #6]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4798      	blx	r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
  return res;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20002764 	.word	0x20002764

08007a54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007a64:	89fb      	ldrh	r3, [r7, #14]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	b21a      	sxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b21b      	sxth	r3, r3
 8007a70:	4313      	orrs	r3, r2
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007a76:	89fb      	ldrh	r3, [r7, #14]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3303      	adds	r3, #3
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	3202      	adds	r2, #2
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
	return rv;
 8007abc:	68fb      	ldr	r3, [r7, #12]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	887a      	ldrh	r2, [r7, #2]
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	887a      	ldrh	r2, [r7, #2]
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	701a      	strb	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	0a1b      	lsrs	r3, r3, #8
 8007b1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	607a      	str	r2, [r7, #4]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	0a1b      	lsrs	r3, r3, #8
 8007b2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00d      	beq.n	8007b8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	1c53      	adds	r3, r2, #1
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	1c59      	adds	r1, r3, #1
 8007b7c:	6179      	str	r1, [r7, #20]
 8007b7e:	7812      	ldrb	r2, [r2, #0]
 8007b80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f1      	bne.n	8007b72 <mem_cpy+0x1a>
	}
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b9a:	b480      	push	{r7}
 8007b9c:	b087      	sub	sp, #28
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	617a      	str	r2, [r7, #20]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f3      	bne.n	8007baa <mem_set+0x10>
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	371c      	adds	r7, #28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007bd0:	b480      	push	{r7}
 8007bd2:	b089      	sub	sp, #36	@ 0x24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	61fa      	str	r2, [r7, #28]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	61ba      	str	r2, [r7, #24]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	1acb      	subs	r3, r1, r3
 8007bfc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <mem_cmp+0x40>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0eb      	beq.n	8007be8 <mem_cmp+0x18>

	return r;
 8007c10:	697b      	ldr	r3, [r7, #20]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3724      	adds	r7, #36	@ 0x24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007c28:	e002      	b.n	8007c30 <chk_chr+0x12>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	607b      	str	r3, [r7, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <chk_chr+0x26>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d1f2      	bne.n	8007c2a <chk_chr+0xc>
	return *str;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	781b      	ldrb	r3, [r3, #0]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d009      	beq.n	8007c76 <lock_fs+0x22>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f002 fd3b 	bl	800a6e2 <ff_req_grant>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <lock_fs+0x22>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <lock_fs+0x24>
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00d      	beq.n	8007cae <unlock_fs+0x2e>
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	2b0c      	cmp	r3, #12
 8007c96:	d00a      	beq.n	8007cae <unlock_fs+0x2e>
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	2b0b      	cmp	r3, #11
 8007c9c:	d007      	beq.n	8007cae <unlock_fs+0x2e>
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	2b0f      	cmp	r3, #15
 8007ca2:	d004      	beq.n	8007cae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f002 fd2f 	bl	800a70c <ff_rel_grant>
	}
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e029      	b.n	8007d20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ccc:	4a27      	ldr	r2, [pc, #156]	@ (8007d6c <chk_lock+0xb4>)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	4413      	add	r3, r2
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01d      	beq.n	8007d16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007cda:	4a24      	ldr	r2, [pc, #144]	@ (8007d6c <chk_lock+0xb4>)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	4413      	add	r3, r2
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d116      	bne.n	8007d1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007cec:	4a1f      	ldr	r2, [pc, #124]	@ (8007d6c <chk_lock+0xb4>)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d10c      	bne.n	8007d1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d00:	4a1a      	ldr	r2, [pc, #104]	@ (8007d6c <chk_lock+0xb4>)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	4413      	add	r3, r2
 8007d08:	3308      	adds	r3, #8
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d102      	bne.n	8007d1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d14:	e007      	b.n	8007d26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d9d2      	bls.n	8007ccc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d109      	bne.n	8007d40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <chk_lock+0x80>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d101      	bne.n	8007d3c <chk_lock+0x84>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e010      	b.n	8007d5e <chk_lock+0xa6>
 8007d3c:	2312      	movs	r3, #18
 8007d3e:	e00e      	b.n	8007d5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d108      	bne.n	8007d58 <chk_lock+0xa0>
 8007d46:	4a09      	ldr	r2, [pc, #36]	@ (8007d6c <chk_lock+0xb4>)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	4413      	add	r3, r2
 8007d4e:	330c      	adds	r3, #12
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d56:	d101      	bne.n	8007d5c <chk_lock+0xa4>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	e000      	b.n	8007d5e <chk_lock+0xa6>
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20002744 	.word	0x20002744

08007d70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d76:	2300      	movs	r3, #0
 8007d78:	607b      	str	r3, [r7, #4]
 8007d7a:	e002      	b.n	8007d82 <enq_lock+0x12>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d806      	bhi.n	8007d96 <enq_lock+0x26>
 8007d88:	4a09      	ldr	r2, [pc, #36]	@ (8007db0 <enq_lock+0x40>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	4413      	add	r3, r2
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f2      	bne.n	8007d7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	bf14      	ite	ne
 8007d9c:	2301      	movne	r3, #1
 8007d9e:	2300      	moveq	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20002744 	.word	0x20002744

08007db4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	e01f      	b.n	8007e04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007dc4:	4a41      	ldr	r2, [pc, #260]	@ (8007ecc <inc_lock+0x118>)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	4413      	add	r3, r2
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d113      	bne.n	8007dfe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8007ecc <inc_lock+0x118>)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	4413      	add	r3, r2
 8007dde:	3304      	adds	r3, #4
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d109      	bne.n	8007dfe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007dea:	4a38      	ldr	r2, [pc, #224]	@ (8007ecc <inc_lock+0x118>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	4413      	add	r3, r2
 8007df2:	3308      	adds	r3, #8
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d006      	beq.n	8007e0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d9dc      	bls.n	8007dc4 <inc_lock+0x10>
 8007e0a:	e000      	b.n	8007e0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007e0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d132      	bne.n	8007e7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	e002      	b.n	8007e20 <inc_lock+0x6c>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d806      	bhi.n	8007e34 <inc_lock+0x80>
 8007e26:	4a29      	ldr	r2, [pc, #164]	@ (8007ecc <inc_lock+0x118>)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	4413      	add	r3, r2
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f2      	bne.n	8007e1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d101      	bne.n	8007e3e <inc_lock+0x8a>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e040      	b.n	8007ec0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4922      	ldr	r1, [pc, #136]	@ (8007ecc <inc_lock+0x118>)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	440b      	add	r3, r1
 8007e4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	491e      	ldr	r1, [pc, #120]	@ (8007ecc <inc_lock+0x118>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	440b      	add	r3, r1
 8007e58:	3304      	adds	r3, #4
 8007e5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	491a      	ldr	r1, [pc, #104]	@ (8007ecc <inc_lock+0x118>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	440b      	add	r3, r1
 8007e68:	3308      	adds	r3, #8
 8007e6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007e6c:	4a17      	ldr	r2, [pc, #92]	@ (8007ecc <inc_lock+0x118>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	4413      	add	r3, r2
 8007e74:	330c      	adds	r3, #12
 8007e76:	2200      	movs	r2, #0
 8007e78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <inc_lock+0xe0>
 8007e80:	4a12      	ldr	r2, [pc, #72]	@ (8007ecc <inc_lock+0x118>)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	4413      	add	r3, r2
 8007e88:	330c      	adds	r3, #12
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <inc_lock+0xe0>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e015      	b.n	8007ec0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d108      	bne.n	8007eac <inc_lock+0xf8>
 8007e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007ecc <inc_lock+0x118>)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	4413      	add	r3, r2
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	e001      	b.n	8007eb0 <inc_lock+0xfc>
 8007eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007eb0:	4906      	ldr	r1, [pc, #24]	@ (8007ecc <inc_lock+0x118>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	440b      	add	r3, r1
 8007eb8:	330c      	adds	r3, #12
 8007eba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20002744 	.word	0x20002744

08007ed0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	607b      	str	r3, [r7, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d825      	bhi.n	8007f30 <dec_lock+0x60>
		n = Files[i].ctr;
 8007ee4:	4a17      	ldr	r2, [pc, #92]	@ (8007f44 <dec_lock+0x74>)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	4413      	add	r3, r2
 8007eec:	330c      	adds	r3, #12
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007ef2:	89fb      	ldrh	r3, [r7, #14]
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef8:	d101      	bne.n	8007efe <dec_lock+0x2e>
 8007efa:	2300      	movs	r3, #0
 8007efc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007efe:	89fb      	ldrh	r3, [r7, #14]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <dec_lock+0x3a>
 8007f04:	89fb      	ldrh	r3, [r7, #14]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8007f44 <dec_lock+0x74>)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	4413      	add	r3, r2
 8007f12:	330c      	adds	r3, #12
 8007f14:	89fa      	ldrh	r2, [r7, #14]
 8007f16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007f18:	89fb      	ldrh	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d105      	bne.n	8007f2a <dec_lock+0x5a>
 8007f1e:	4a09      	ldr	r2, [pc, #36]	@ (8007f44 <dec_lock+0x74>)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	4413      	add	r3, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	737b      	strb	r3, [r7, #13]
 8007f2e:	e001      	b.n	8007f34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007f30:	2302      	movs	r3, #2
 8007f32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007f34:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20002744 	.word	0x20002744

08007f48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e010      	b.n	8007f78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007f56:	4a0d      	ldr	r2, [pc, #52]	@ (8007f8c <clear_lock+0x44>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d105      	bne.n	8007f72 <clear_lock+0x2a>
 8007f66:	4a09      	ldr	r2, [pc, #36]	@ (8007f8c <clear_lock+0x44>)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3301      	adds	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d9eb      	bls.n	8007f56 <clear_lock+0xe>
	}
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	20002744 	.word	0x20002744

08007f90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	78db      	ldrb	r3, [r3, #3]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d034      	beq.n	800800e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7858      	ldrb	r0, [r3, #1]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	f7ff fd0e 	bl	80079d8 <disk_write>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	73fb      	strb	r3, [r7, #15]
 8007fc6:	e022      	b.n	800800e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	1ad2      	subs	r2, r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d217      	bcs.n	800800e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	789b      	ldrb	r3, [r3, #2]
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	e010      	b.n	8008008 <sync_window+0x78>
					wsect += fs->fsize;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7858      	ldrb	r0, [r3, #1]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	f7ff fceb 	bl	80079d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3b01      	subs	r3, #1
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d8eb      	bhi.n	8007fe6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d01b      	beq.n	8008068 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ffad 	bl	8007f90 <sync_window>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d113      	bne.n	8008068 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7858      	ldrb	r0, [r3, #1]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800804a:	2301      	movs	r3, #1
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	f7ff fca3 	bl	8007998 <disk_read>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800805e:	2301      	movs	r3, #1
 8008060:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff ff87 	bl	8007f90 <sync_window>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d159      	bne.n	8008140 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b03      	cmp	r3, #3
 8008092:	d149      	bne.n	8008128 <sync_fs+0xb4>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	791b      	ldrb	r3, [r3, #4]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d145      	bne.n	8008128 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	899b      	ldrh	r3, [r3, #12]
 80080a6:	461a      	mov	r2, r3
 80080a8:	2100      	movs	r1, #0
 80080aa:	f7ff fd76 	bl	8007b9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3338      	adds	r3, #56	@ 0x38
 80080b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80080b6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff fd05 	bl	8007aca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3338      	adds	r3, #56	@ 0x38
 80080c4:	4921      	ldr	r1, [pc, #132]	@ (800814c <sync_fs+0xd8>)
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fd1a 	bl	8007b00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3338      	adds	r3, #56	@ 0x38
 80080d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80080d4:	491e      	ldr	r1, [pc, #120]	@ (8008150 <sync_fs+0xdc>)
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fd12 	bl	8007b00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3338      	adds	r3, #56	@ 0x38
 80080e0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7ff fd08 	bl	8007b00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3338      	adds	r3, #56	@ 0x38
 80080f4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7ff fcfe 	bl	8007b00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7858      	ldrb	r0, [r3, #1]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800811c:	2301      	movs	r3, #1
 800811e:	f7ff fc5b 	bl	80079d8 <disk_write>
			fs->fsi_flag = 0;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	785b      	ldrb	r3, [r3, #1]
 800812c:	2200      	movs	r2, #0
 800812e:	2100      	movs	r1, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fc71 	bl	8007a18 <disk_ioctl>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <sync_fs+0xcc>
 800813c:	2301      	movs	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	41615252 	.word	0x41615252
 8008150:	61417272 	.word	0x61417272

08008154 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	3b02      	subs	r3, #2
 8008162:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	3b02      	subs	r3, #2
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d301      	bcc.n	8008174 <clust2sect+0x20>
 8008170:	2300      	movs	r3, #0
 8008172:	e008      	b.n	8008186 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	895b      	ldrh	r3, [r3, #10]
 8008178:	461a      	mov	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	fb03 f202 	mul.w	r2, r3, r2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008184:	4413      	add	r3, r2
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b086      	sub	sp, #24
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d904      	bls.n	80081b2 <get_fat+0x20>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d302      	bcc.n	80081b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80081b2:	2301      	movs	r3, #1
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	e0ba      	b.n	800832e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80081b8:	f04f 33ff 	mov.w	r3, #4294967295
 80081bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	f000 8082 	beq.w	80082cc <get_fat+0x13a>
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	f300 80a6 	bgt.w	800831a <get_fat+0x188>
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d002      	beq.n	80081d8 <get_fat+0x46>
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d055      	beq.n	8008282 <get_fat+0xf0>
 80081d6:	e0a0      	b.n	800831a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	899b      	ldrh	r3, [r3, #12]
 80081ee:	4619      	mov	r1, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80081f6:	4413      	add	r3, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	6938      	ldr	r0, [r7, #16]
 80081fc:	f7ff ff0c 	bl	8008018 <move_window>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 808c 	bne.w	8008320 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	60fa      	str	r2, [r7, #12]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	8992      	ldrh	r2, [r2, #12]
 8008212:	fbb3 f1f2 	udiv	r1, r3, r2
 8008216:	fb01 f202 	mul.w	r2, r1, r2
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008224:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	899b      	ldrh	r3, [r3, #12]
 800822e:	4619      	mov	r1, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	fbb3 f3f1 	udiv	r3, r3, r1
 8008236:	4413      	add	r3, r2
 8008238:	4619      	mov	r1, r3
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f7ff feec 	bl	8008018 <move_window>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d16e      	bne.n	8008324 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	899b      	ldrh	r3, [r3, #12]
 800824a:	461a      	mov	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008252:	fb01 f202 	mul.w	r2, r1, r2
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	4313      	orrs	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <get_fat+0xe6>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	091b      	lsrs	r3, r3, #4
 8008276:	e002      	b.n	800827e <get_fat+0xec>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800827e:	617b      	str	r3, [r7, #20]
			break;
 8008280:	e055      	b.n	800832e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	899b      	ldrh	r3, [r3, #12]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	b29b      	uxth	r3, r3
 800828e:	4619      	mov	r1, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	fbb3 f3f1 	udiv	r3, r3, r1
 8008296:	4413      	add	r3, r2
 8008298:	4619      	mov	r1, r3
 800829a:	6938      	ldr	r0, [r7, #16]
 800829c:	f7ff febc 	bl	8008018 <move_window>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d140      	bne.n	8008328 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	8992      	ldrh	r2, [r2, #12]
 80082b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80082b8:	fb00 f202 	mul.w	r2, r0, r2
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	440b      	add	r3, r1
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff fbc7 	bl	8007a54 <ld_word>
 80082c6:	4603      	mov	r3, r0
 80082c8:	617b      	str	r3, [r7, #20]
			break;
 80082ca:	e030      	b.n	800832e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	899b      	ldrh	r3, [r3, #12]
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	4619      	mov	r1, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e0:	4413      	add	r3, r2
 80082e2:	4619      	mov	r1, r3
 80082e4:	6938      	ldr	r0, [r7, #16]
 80082e6:	f7ff fe97 	bl	8008018 <move_window>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d11d      	bne.n	800832c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	8992      	ldrh	r2, [r2, #12]
 80082fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008302:	fb00 f202 	mul.w	r2, r0, r2
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	440b      	add	r3, r1
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fbba 	bl	8007a84 <ld_dword>
 8008310:	4603      	mov	r3, r0
 8008312:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008316:	617b      	str	r3, [r7, #20]
			break;
 8008318:	e009      	b.n	800832e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800831a:	2301      	movs	r3, #1
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e006      	b.n	800832e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008320:	bf00      	nop
 8008322:	e004      	b.n	800832e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008324:	bf00      	nop
 8008326:	e002      	b.n	800832e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800832c:	bf00      	nop
		}
	}

	return val;
 800832e:	697b      	ldr	r3, [r7, #20]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b089      	sub	sp, #36	@ 0x24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008344:	2302      	movs	r3, #2
 8008346:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b01      	cmp	r3, #1
 800834c:	f240 8109 	bls.w	8008562 <put_fat+0x22a>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	f080 8103 	bcs.w	8008562 <put_fat+0x22a>
		switch (fs->fs_type) {
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b03      	cmp	r3, #3
 8008362:	f000 80b6 	beq.w	80084d2 <put_fat+0x19a>
 8008366:	2b03      	cmp	r3, #3
 8008368:	f300 80fb 	bgt.w	8008562 <put_fat+0x22a>
 800836c:	2b01      	cmp	r3, #1
 800836e:	d003      	beq.n	8008378 <put_fat+0x40>
 8008370:	2b02      	cmp	r3, #2
 8008372:	f000 8083 	beq.w	800847c <put_fat+0x144>
 8008376:	e0f4      	b.n	8008562 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	4413      	add	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	899b      	ldrh	r3, [r3, #12]
 800838e:	4619      	mov	r1, r3
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	fbb3 f3f1 	udiv	r3, r3, r1
 8008396:	4413      	add	r3, r2
 8008398:	4619      	mov	r1, r3
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f7ff fe3c 	bl	8008018 <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083a4:	7ffb      	ldrb	r3, [r7, #31]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80d4 	bne.w	8008554 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	61ba      	str	r2, [r7, #24]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	8992      	ldrh	r2, [r2, #12]
 80083bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80083c0:	fb00 f202 	mul.w	r2, r0, r2
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	440b      	add	r3, r1
 80083c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00d      	beq.n	80083f0 <put_fat+0xb8>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b25b      	sxtb	r3, r3
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	b25a      	sxtb	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b25b      	sxtb	r3, r3
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e001      	b.n	80083f4 <put_fat+0xbc>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	899b      	ldrh	r3, [r3, #12]
 8008406:	4619      	mov	r1, r3
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	fbb3 f3f1 	udiv	r3, r3, r1
 800840e:	4413      	add	r3, r2
 8008410:	4619      	mov	r1, r3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fe00 	bl	8008018 <move_window>
 8008418:	4603      	mov	r3, r0
 800841a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800841c:	7ffb      	ldrb	r3, [r7, #31]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 809a 	bne.w	8008558 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	899b      	ldrh	r3, [r3, #12]
 800842e:	461a      	mov	r2, r3
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	fbb3 f0f2 	udiv	r0, r3, r2
 8008436:	fb00 f202 	mul.w	r2, r0, r2
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	440b      	add	r3, r1
 800843e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <put_fat+0x11a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	091b      	lsrs	r3, r3, #4
 800844e:	b2db      	uxtb	r3, r3
 8008450:	e00e      	b.n	8008470 <put_fat+0x138>
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	b25b      	sxtb	r3, r3
 8008458:	f023 030f 	bic.w	r3, r3, #15
 800845c:	b25a      	sxtb	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	b25b      	sxtb	r3, r3
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	b25b      	sxtb	r3, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	b25b      	sxtb	r3, r3
 800846e:	b2db      	uxtb	r3, r3
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	70da      	strb	r2, [r3, #3]
			break;
 800847a:	e072      	b.n	8008562 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	899b      	ldrh	r3, [r3, #12]
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	b29b      	uxth	r3, r3
 8008488:	4619      	mov	r1, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008490:	4413      	add	r3, r2
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fdbf 	bl	8008018 <move_window>
 800849a:	4603      	mov	r3, r0
 800849c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800849e:	7ffb      	ldrb	r3, [r7, #31]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d15b      	bne.n	800855c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	8992      	ldrh	r2, [r2, #12]
 80084b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80084b6:	fb00 f202 	mul.w	r2, r0, r2
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	440b      	add	r3, r1
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	b292      	uxth	r2, r2
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fb00 	bl	8007aca <st_word>
			fs->wflag = 1;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	70da      	strb	r2, [r3, #3]
			break;
 80084d0:	e047      	b.n	8008562 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	899b      	ldrh	r3, [r3, #12]
 80084da:	089b      	lsrs	r3, r3, #2
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084e6:	4413      	add	r3, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f7ff fd94 	bl	8008018 <move_window>
 80084f0:	4603      	mov	r3, r0
 80084f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084f4:	7ffb      	ldrb	r3, [r7, #31]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d132      	bne.n	8008560 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	8992      	ldrh	r2, [r2, #12]
 800850e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008512:	fb00 f202 	mul.w	r2, r0, r2
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	440b      	add	r3, r1
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fab2 	bl	8007a84 <ld_dword>
 8008520:	4603      	mov	r3, r0
 8008522:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008526:	4323      	orrs	r3, r4
 8008528:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	8992      	ldrh	r2, [r2, #12]
 8008538:	fbb3 f0f2 	udiv	r0, r3, r2
 800853c:	fb00 f202 	mul.w	r2, r0, r2
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	440b      	add	r3, r1
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fada 	bl	8007b00 <st_dword>
			fs->wflag = 1;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	70da      	strb	r2, [r3, #3]
			break;
 8008552:	e006      	b.n	8008562 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <put_fat+0x22a>
			if (res != FR_OK) break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008560:	bf00      	nop
		}
	}
	return res;
 8008562:	7ffb      	ldrb	r3, [r7, #31]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3724      	adds	r7, #36	@ 0x24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd90      	pop	{r4, r7, pc}

0800856c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d904      	bls.n	8008592 <remove_chain+0x26>
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d301      	bcc.n	8008596 <remove_chain+0x2a>
 8008592:	2302      	movs	r3, #2
 8008594:	e04b      	b.n	800862e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800859c:	f04f 32ff 	mov.w	r2, #4294967295
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	69b8      	ldr	r0, [r7, #24]
 80085a4:	f7ff fec8 	bl	8008338 <put_fat>
 80085a8:	4603      	mov	r3, r0
 80085aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80085ac:	7ffb      	ldrb	r3, [r7, #31]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <remove_chain+0x4a>
 80085b2:	7ffb      	ldrb	r3, [r7, #31]
 80085b4:	e03b      	b.n	800862e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fdea 	bl	8008192 <get_fat>
 80085be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d031      	beq.n	800862a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <remove_chain+0x64>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e02e      	b.n	800862e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d101      	bne.n	80085dc <remove_chain+0x70>
 80085d8:	2301      	movs	r3, #1
 80085da:	e028      	b.n	800862e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80085dc:	2200      	movs	r2, #0
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	69b8      	ldr	r0, [r7, #24]
 80085e2:	f7ff fea9 	bl	8008338 <put_fat>
 80085e6:	4603      	mov	r3, r0
 80085e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80085ea:	7ffb      	ldrb	r3, [r7, #31]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <remove_chain+0x88>
 80085f0:	7ffb      	ldrb	r3, [r7, #31]
 80085f2:	e01c      	b.n	800862e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	3b02      	subs	r3, #2
 80085fe:	429a      	cmp	r2, r3
 8008600:	d20b      	bcs.n	800861a <remove_chain+0xae>
			fs->free_clst++;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	791b      	ldrb	r3, [r3, #4]
 8008610:	f043 0301 	orr.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	429a      	cmp	r2, r3
 8008626:	d3c6      	bcc.n	80085b6 <remove_chain+0x4a>
 8008628:	e000      	b.n	800862c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800862a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10d      	bne.n	8008668 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <create_chain+0x2c>
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	429a      	cmp	r2, r3
 8008660:	d31b      	bcc.n	800869a <create_chain+0x64>
 8008662:	2301      	movs	r3, #1
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	e018      	b.n	800869a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fd91 	bl	8008192 <get_fat>
 8008670:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d801      	bhi.n	800867c <create_chain+0x46>
 8008678:	2301      	movs	r3, #1
 800867a:	e070      	b.n	800875e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d101      	bne.n	8008688 <create_chain+0x52>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	e06a      	b.n	800875e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	429a      	cmp	r2, r3
 8008690:	d201      	bcs.n	8008696 <create_chain+0x60>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	e063      	b.n	800875e <create_chain+0x128>
		scl = clst;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3301      	adds	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d307      	bcc.n	80086be <create_chain+0x88>
				ncl = 2;
 80086ae:	2302      	movs	r3, #2
 80086b0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d901      	bls.n	80086be <create_chain+0x88>
 80086ba:	2300      	movs	r3, #0
 80086bc:	e04f      	b.n	800875e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80086be:	69f9      	ldr	r1, [r7, #28]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fd66 	bl	8008192 <get_fat>
 80086c6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d003      	beq.n	80086dc <create_chain+0xa6>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d101      	bne.n	80086e0 <create_chain+0xaa>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	e03e      	b.n	800875e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d1da      	bne.n	800869e <create_chain+0x68>
 80086e8:	2300      	movs	r3, #0
 80086ea:	e038      	b.n	800875e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80086ec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295
 80086f2:	69f9      	ldr	r1, [r7, #28]
 80086f4:	6938      	ldr	r0, [r7, #16]
 80086f6:	f7ff fe1f 	bl	8008338 <put_fat>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <create_chain+0xe2>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6938      	ldr	r0, [r7, #16]
 8008710:	f7ff fe12 	bl	8008338 <put_fat>
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d116      	bne.n	800874c <create_chain+0x116>
		fs->last_clst = ncl;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	3b02      	subs	r3, #2
 800872e:	429a      	cmp	r2, r3
 8008730:	d804      	bhi.n	800873c <create_chain+0x106>
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	791b      	ldrb	r3, [r3, #4]
 8008740:	f043 0301 	orr.w	r3, r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	711a      	strb	r2, [r3, #4]
 800874a:	e007      	b.n	800875c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d102      	bne.n	8008758 <create_chain+0x122>
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	e000      	b.n	800875a <create_chain+0x124>
 8008758:	2301      	movs	r3, #1
 800875a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800875c:	69fb      	ldr	r3, [r7, #28]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	3304      	adds	r3, #4
 800877c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	899b      	ldrh	r3, [r3, #12]
 8008782:	461a      	mov	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	fbb3 f3f2 	udiv	r3, r3, r2
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	8952      	ldrh	r2, [r2, #10]
 800878e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008792:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	1d1a      	adds	r2, r3, #4
 8008798:	613a      	str	r2, [r7, #16]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <clmt_clust+0x42>
 80087a4:	2300      	movs	r3, #0
 80087a6:	e010      	b.n	80087ca <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d307      	bcc.n	80087c0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	3304      	adds	r3, #4
 80087bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087be:	e7e9      	b.n	8008794 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80087c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	4413      	add	r3, r2
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ec:	d204      	bcs.n	80087f8 <dir_sdi+0x22>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <dir_sdi+0x26>
		return FR_INT_ERR;
 80087f8:	2302      	movs	r3, #2
 80087fa:	e071      	b.n	80088e0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <dir_sdi+0x46>
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d902      	bls.n	800881c <dir_sdi+0x46>
		clst = fs->dirbase;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10c      	bne.n	800883c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	095b      	lsrs	r3, r3, #5
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	8912      	ldrh	r2, [r2, #8]
 800882a:	4293      	cmp	r3, r2
 800882c:	d301      	bcc.n	8008832 <dir_sdi+0x5c>
 800882e:	2302      	movs	r3, #2
 8008830:	e056      	b.n	80088e0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	61da      	str	r2, [r3, #28]
 800883a:	e02d      	b.n	8008898 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	895b      	ldrh	r3, [r3, #10]
 8008840:	461a      	mov	r2, r3
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	899b      	ldrh	r3, [r3, #12]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800884c:	e019      	b.n	8008882 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6979      	ldr	r1, [r7, #20]
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff fc9d 	bl	8008192 <get_fat>
 8008858:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d101      	bne.n	8008866 <dir_sdi+0x90>
 8008862:	2301      	movs	r3, #1
 8008864:	e03c      	b.n	80088e0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d904      	bls.n	8008876 <dir_sdi+0xa0>
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	429a      	cmp	r2, r3
 8008874:	d301      	bcc.n	800887a <dir_sdi+0xa4>
 8008876:	2302      	movs	r3, #2
 8008878:	e032      	b.n	80088e0 <dir_sdi+0x10a>
			ofs -= csz;
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	429a      	cmp	r2, r3
 8008888:	d2e1      	bcs.n	800884e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	6938      	ldr	r0, [r7, #16]
 800888e:	f7ff fc61 	bl	8008154 <clust2sect>
 8008892:	4602      	mov	r2, r0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <dir_sdi+0xd4>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e01a      	b.n	80088e0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	69da      	ldr	r2, [r3, #28]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	899b      	ldrh	r3, [r3, #12]
 80088b2:	4619      	mov	r1, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088ba:	441a      	add	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	899b      	ldrh	r3, [r3, #12]
 80088ca:	461a      	mov	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80088d2:	fb00 f202 	mul.w	r2, r0, r2
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	18ca      	adds	r2, r1, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	3320      	adds	r3, #32
 80088fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <dir_next+0x28>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800890e:	d301      	bcc.n	8008914 <dir_next+0x2c>
 8008910:	2304      	movs	r3, #4
 8008912:	e0bb      	b.n	8008a8c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	899b      	ldrh	r3, [r3, #12]
 8008918:	461a      	mov	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008920:	fb01 f202 	mul.w	r2, r1, r2
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	2b00      	cmp	r3, #0
 8008928:	f040 809d 	bne.w	8008a66 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	8912      	ldrh	r2, [r2, #8]
 8008946:	4293      	cmp	r3, r2
 8008948:	f0c0 808d 	bcc.w	8008a66 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	61da      	str	r2, [r3, #28]
 8008952:	2304      	movs	r3, #4
 8008954:	e09a      	b.n	8008a8c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	899b      	ldrh	r3, [r3, #12]
 800895a:	461a      	mov	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	8952      	ldrh	r2, [r2, #10]
 8008966:	3a01      	subs	r2, #1
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d17b      	bne.n	8008a66 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f7ff fc0b 	bl	8008192 <get_fat>
 800897c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d801      	bhi.n	8008988 <dir_next+0xa0>
 8008984:	2302      	movs	r3, #2
 8008986:	e081      	b.n	8008a8c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898e:	d101      	bne.n	8008994 <dir_next+0xac>
 8008990:	2301      	movs	r3, #1
 8008992:	e07b      	b.n	8008a8c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	429a      	cmp	r2, r3
 800899c:	d359      	bcc.n	8008a52 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	61da      	str	r2, [r3, #28]
 80089aa:	2304      	movs	r3, #4
 80089ac:	e06e      	b.n	8008a8c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f7ff fe3d 	bl	8008636 <create_chain>
 80089bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <dir_next+0xe0>
 80089c4:	2307      	movs	r3, #7
 80089c6:	e061      	b.n	8008a8c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <dir_next+0xea>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e05c      	b.n	8008a8c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d101      	bne.n	80089de <dir_next+0xf6>
 80089da:	2301      	movs	r3, #1
 80089dc:	e056      	b.n	8008a8c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fad6 	bl	8007f90 <sync_window>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <dir_next+0x106>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e04e      	b.n	8008a8c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	899b      	ldrh	r3, [r3, #12]
 80089f8:	461a      	mov	r2, r3
 80089fa:	2100      	movs	r1, #0
 80089fc:	f7ff f8cd 	bl	8007b9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	6979      	ldr	r1, [r7, #20]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff fba4 	bl	8008154 <clust2sect>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a12:	e012      	b.n	8008a3a <dir_next+0x152>
						fs->wflag = 1;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff fab8 	bl	8007f90 <sync_window>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <dir_next+0x142>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e030      	b.n	8008a8c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a34:	1c5a      	adds	r2, r3, #1
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	895b      	ldrh	r3, [r3, #10]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d3e6      	bcc.n	8008a14 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008a58:	6979      	ldr	r1, [r7, #20]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fb7a 	bl	8008154 <clust2sect>
 8008a60:	4602      	mov	r2, r0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	899b      	ldrh	r3, [r3, #12]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a7e:	fb00 f202 	mul.w	r2, r0, r2
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	18ca      	adds	r2, r1, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fe95 	bl	80087d6 <dir_sdi>
 8008aac:	4603      	mov	r3, r0
 8008aae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d12b      	bne.n	8008b0e <dir_alloc+0x7a>
		n = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff faa9 	bl	8008018 <move_window>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d11d      	bne.n	8008b0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2be5      	cmp	r3, #229	@ 0xe5
 8008ad8:	d004      	beq.n	8008ae4 <dir_alloc+0x50>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d107      	bne.n	8008af4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d102      	bne.n	8008af8 <dir_alloc+0x64>
 8008af2:	e00c      	b.n	8008b0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008af8:	2101      	movs	r1, #1
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff fef4 	bl	80088e8 <dir_next>
 8008b00:	4603      	mov	r3, r0
 8008b02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0d7      	beq.n	8008aba <dir_alloc+0x26>
 8008b0a:	e000      	b.n	8008b0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008b0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d101      	bne.n	8008b18 <dir_alloc+0x84>
 8008b14:	2307      	movs	r3, #7
 8008b16:	75fb      	strb	r3, [r7, #23]
	return res;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	331a      	adds	r3, #26
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe ff8f 	bl	8007a54 <ld_word>
 8008b36:	4603      	mov	r3, r0
 8008b38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d109      	bne.n	8008b56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	3314      	adds	r3, #20
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe ff84 	bl	8007a54 <ld_word>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	041b      	lsls	r3, r3, #16
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008b56:	68fb      	ldr	r3, [r7, #12]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	331a      	adds	r3, #26
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	b292      	uxth	r2, r2
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe ffa7 	bl	8007aca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d109      	bne.n	8008b98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f103 0214 	add.w	r2, r3, #20
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7fe ff99 	bl	8007aca <st_word>
	}
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008baa:	2304      	movs	r3, #4
 8008bac:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008bb4:	e03c      	b.n	8008c30 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6938      	ldr	r0, [r7, #16]
 8008bbe:	f7ff fa2b 	bl	8008018 <move_window>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d136      	bne.n	8008c3a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008bda:	2304      	movs	r3, #4
 8008bdc:	75fb      	strb	r3, [r7, #23]
 8008bde:	e031      	b.n	8008c44 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	330b      	adds	r3, #11
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bec:	73bb      	strb	r3, [r7, #14]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7bba      	ldrb	r2, [r7, #14]
 8008bf2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	2be5      	cmp	r3, #229	@ 0xe5
 8008bf8:	d011      	beq.n	8008c1e <dir_read+0x7e>
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bfe:	d00e      	beq.n	8008c1e <dir_read+0x7e>
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b0f      	cmp	r3, #15
 8008c04:	d00b      	beq.n	8008c1e <dir_read+0x7e>
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	f023 0320 	bic.w	r3, r3, #32
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	bf0c      	ite	eq
 8008c10:	2301      	moveq	r3, #1
 8008c12:	2300      	movne	r3, #0
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	461a      	mov	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008c1e:	2100      	movs	r1, #0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fe61 	bl	80088e8 <dir_next>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <dir_read+0xa2>
	while (dp->sect) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1be      	bne.n	8008bb6 <dir_read+0x16>
 8008c38:	e004      	b.n	8008c44 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008c3a:	bf00      	nop
 8008c3c:	e002      	b.n	8008c44 <dir_read+0xa4>
				break;
 8008c3e:	bf00      	nop
 8008c40:	e000      	b.n	8008c44 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008c42:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <dir_read+0xb0>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	61da      	str	r2, [r3, #28]
	return res;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff fdb3 	bl	80087d6 <dir_sdi>
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <dir_find+0x24>
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	e03e      	b.n	8008cfc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6938      	ldr	r0, [r7, #16]
 8008c86:	f7ff f9c7 	bl	8008018 <move_window>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d12f      	bne.n	8008cf4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <dir_find+0x4e>
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	75fb      	strb	r3, [r7, #23]
 8008ca6:	e028      	b.n	8008cfa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	330b      	adds	r3, #11
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	330b      	adds	r3, #11
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <dir_find+0x86>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a18      	ldr	r0, [r3, #32]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3324      	adds	r3, #36	@ 0x24
 8008cd2:	220b      	movs	r2, #11
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f7fe ff7b 	bl	8007bd0 <mem_cmp>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fe00 	bl	80088e8 <dir_next>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c5      	beq.n	8008c7e <dir_find+0x24>
 8008cf2:	e002      	b.n	8008cfa <dir_find+0xa0>
		if (res != FR_OK) break;
 8008cf4:	bf00      	nop
 8008cf6:	e000      	b.n	8008cfa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008cf8:	bf00      	nop

	return res;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008d12:	2101      	movs	r1, #1
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff febd 	bl	8008a94 <dir_alloc>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d11c      	bne.n	8008d5e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	68b8      	ldr	r0, [r7, #8]
 8008d2c:	f7ff f974 	bl	8008018 <move_window>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d111      	bne.n	8008d5e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	2100      	movs	r1, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe ff29 	bl	8007b9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a18      	ldr	r0, [r3, #32]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3324      	adds	r3, #36	@ 0x24
 8008d50:	220b      	movs	r2, #11
 8008d52:	4619      	mov	r1, r3
 8008d54:	f7fe ff00 	bl	8007b58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7ff f94b 	bl	8008018 <move_window>
 8008d82:	4603      	mov	r3, r0
 8008d84:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	22e5      	movs	r2, #229	@ 0xe5
 8008d92:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2200      	movs	r2, #0
 8008db2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d04f      	beq.n	8008e5c <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008dc4:	e022      	b.n	8008e0c <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	1c59      	adds	r1, r3, #1
 8008dce:	6179      	str	r1, [r7, #20]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d016      	beq.n	8008e0a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	d101      	bne.n	8008de6 <get_fileinfo+0x42>
 8008de2:	23e5      	movs	r3, #229	@ 0xe5
 8008de4:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d106      	bne.n	8008dfa <get_fileinfo+0x56>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	613a      	str	r2, [r7, #16]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4413      	add	r3, r2
 8008df6:	222e      	movs	r2, #46	@ 0x2e
 8008df8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	613a      	str	r2, [r7, #16]
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	4413      	add	r3, r2
 8008e04:	7bfa      	ldrb	r2, [r7, #15]
 8008e06:	725a      	strb	r2, [r3, #9]
 8008e08:	e000      	b.n	8008e0c <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008e0a:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2b0a      	cmp	r3, #10
 8008e10:	d9d9      	bls.n	8008dc6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4413      	add	r3, r2
 8008e18:	3309      	adds	r3, #9
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	7ada      	ldrb	r2, [r3, #11]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	331c      	adds	r3, #28
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fe28 	bl	8007a84 <ld_dword>
 8008e34:	4602      	mov	r2, r0
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	3316      	adds	r3, #22
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fe1f 	bl	8007a84 <ld_dword>
 8008e46:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	80da      	strh	r2, [r3, #6]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	0c1b      	lsrs	r3, r3, #16
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	809a      	strh	r2, [r3, #4]
 8008e5a:	e000      	b.n	8008e5e <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008e5c:	bf00      	nop
}
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3324      	adds	r3, #36	@ 0x24
 8008e78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008e7a:	220b      	movs	r2, #11
 8008e7c:	2120      	movs	r1, #32
 8008e7e:	68b8      	ldr	r0, [r7, #8]
 8008e80:	f7fe fe8b 	bl	8007b9a <mem_set>
	si = i = 0; ni = 8;
 8008e84:	2300      	movs	r3, #0
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	61fb      	str	r3, [r7, #28]
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	61fa      	str	r2, [r7, #28]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e9e:	7efb      	ldrb	r3, [r7, #27]
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d94e      	bls.n	8008f42 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ea4:	7efb      	ldrb	r3, [r7, #27]
 8008ea6:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ea8:	d006      	beq.n	8008eb8 <create_name+0x54>
 8008eaa:	7efb      	ldrb	r3, [r7, #27]
 8008eac:	2b5c      	cmp	r3, #92	@ 0x5c
 8008eae:	d110      	bne.n	8008ed2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008eb0:	e002      	b.n	8008eb8 <create_name+0x54>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ec2:	d0f6      	beq.n	8008eb2 <create_name+0x4e>
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ece:	d0f0      	beq.n	8008eb2 <create_name+0x4e>
			break;
 8008ed0:	e038      	b.n	8008f44 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008ed2:	7efb      	ldrb	r3, [r7, #27]
 8008ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ed6:	d003      	beq.n	8008ee0 <create_name+0x7c>
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d30c      	bcc.n	8008efa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b0b      	cmp	r3, #11
 8008ee4:	d002      	beq.n	8008eec <create_name+0x88>
 8008ee6:	7efb      	ldrb	r3, [r7, #27]
 8008ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eea:	d001      	beq.n	8008ef0 <create_name+0x8c>
 8008eec:	2306      	movs	r3, #6
 8008eee:	e044      	b.n	8008f7a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	230b      	movs	r3, #11
 8008ef6:	617b      	str	r3, [r7, #20]
			continue;
 8008ef8:	e022      	b.n	8008f40 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008efa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da04      	bge.n	8008f0c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008f02:	7efb      	ldrb	r3, [r7, #27]
 8008f04:	3b80      	subs	r3, #128	@ 0x80
 8008f06:	4a1f      	ldr	r2, [pc, #124]	@ (8008f84 <create_name+0x120>)
 8008f08:	5cd3      	ldrb	r3, [r2, r3]
 8008f0a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008f0c:	7efb      	ldrb	r3, [r7, #27]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	481d      	ldr	r0, [pc, #116]	@ (8008f88 <create_name+0x124>)
 8008f12:	f7fe fe84 	bl	8007c1e <chk_chr>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <create_name+0xbc>
 8008f1c:	2306      	movs	r3, #6
 8008f1e:	e02c      	b.n	8008f7a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008f20:	7efb      	ldrb	r3, [r7, #27]
 8008f22:	2b60      	cmp	r3, #96	@ 0x60
 8008f24:	d905      	bls.n	8008f32 <create_name+0xce>
 8008f26:	7efb      	ldrb	r3, [r7, #27]
 8008f28:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f2a:	d802      	bhi.n	8008f32 <create_name+0xce>
 8008f2c:	7efb      	ldrb	r3, [r7, #27]
 8008f2e:	3b20      	subs	r3, #32
 8008f30:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	613a      	str	r2, [r7, #16]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	7efa      	ldrb	r2, [r7, #27]
 8008f3e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008f40:	e7a6      	b.n	8008e90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f42:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	441a      	add	r2, r3
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <create_name+0xf4>
 8008f54:	2306      	movs	r3, #6
 8008f56:	e010      	b.n	8008f7a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2be5      	cmp	r3, #229	@ 0xe5
 8008f5e:	d102      	bne.n	8008f66 <create_name+0x102>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2205      	movs	r2, #5
 8008f64:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f66:	7efb      	ldrb	r3, [r7, #27]
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	d801      	bhi.n	8008f70 <create_name+0x10c>
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	e000      	b.n	8008f72 <create_name+0x10e>
 8008f70:	2200      	movs	r2, #0
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	330b      	adds	r3, #11
 8008f76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008f78:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	0800ef64 	.word	0x0800ef64
 8008f88:	0800eee4 	.word	0x0800eee4

08008f8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008fa0:	e002      	b.n	8008fa8 <follow_path+0x1c>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fae:	d0f8      	beq.n	8008fa2 <follow_path+0x16>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fb6:	d0f4      	beq.n	8008fa2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b1f      	cmp	r3, #31
 8008fc4:	d80a      	bhi.n	8008fdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2280      	movs	r2, #128	@ 0x80
 8008fca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008fce:	2100      	movs	r1, #0
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff fc00 	bl	80087d6 <dir_sdi>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	75fb      	strb	r3, [r7, #23]
 8008fda:	e048      	b.n	800906e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008fdc:	463b      	mov	r3, r7
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff ff3f 	bl	8008e64 <create_name>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d139      	bne.n	8009064 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff fe32 	bl	8008c5a <dir_find>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009000:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b04      	cmp	r3, #4
 800900c:	d12c      	bne.n	8009068 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800900e:	7afb      	ldrb	r3, [r7, #11]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d127      	bne.n	8009068 <follow_path+0xdc>
 8009018:	2305      	movs	r3, #5
 800901a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800901c:	e024      	b.n	8009068 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d121      	bne.n	800906c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	799b      	ldrb	r3, [r3, #6]
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009034:	2305      	movs	r3, #5
 8009036:	75fb      	strb	r3, [r7, #23]
 8009038:	e019      	b.n	800906e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	8992      	ldrh	r2, [r2, #12]
 8009048:	fbb3 f0f2 	udiv	r0, r3, r2
 800904c:	fb00 f202 	mul.w	r2, r0, r2
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	440b      	add	r3, r1
 8009054:	4619      	mov	r1, r3
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff fd63 	bl	8008b22 <ld_clust>
 800905c:	4602      	mov	r2, r0
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009062:	e7bb      	b.n	8008fdc <follow_path+0x50>
			if (res != FR_OK) break;
 8009064:	bf00      	nop
 8009066:	e002      	b.n	800906e <follow_path+0xe2>
				break;
 8009068:	bf00      	nop
 800906a:	e000      	b.n	800906e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800906c:	bf00      	nop
			}
		}
	}

	return res;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009080:	f04f 33ff 	mov.w	r3, #4294967295
 8009084:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d031      	beq.n	80090f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	e002      	b.n	800909c <get_ldnumber+0x24>
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	3301      	adds	r3, #1
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	d903      	bls.n	80090ac <get_ldnumber+0x34>
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80090aa:	d1f4      	bne.n	8009096 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80090b2:	d11c      	bne.n	80090ee <get_ldnumber+0x76>
			tp = *path;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	60fa      	str	r2, [r7, #12]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	3b30      	subs	r3, #48	@ 0x30
 80090c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b09      	cmp	r3, #9
 80090ca:	d80e      	bhi.n	80090ea <get_ldnumber+0x72>
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d10a      	bne.n	80090ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <get_ldnumber+0x72>
					vol = (int)i;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	3301      	adds	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	e002      	b.n	80090f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80090f2:	693b      	ldr	r3, [r7, #16]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	70da      	strb	r2, [r3, #3]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f04f 32ff 	mov.w	r2, #4294967295
 8009116:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fe ff7c 	bl	8008018 <move_window>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <check_fs+0x2a>
 8009126:	2304      	movs	r3, #4
 8009128:	e038      	b.n	800919c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3338      	adds	r3, #56	@ 0x38
 800912e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fc8e 	bl	8007a54 <ld_word>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009140:	429a      	cmp	r2, r3
 8009142:	d001      	beq.n	8009148 <check_fs+0x48>
 8009144:	2303      	movs	r3, #3
 8009146:	e029      	b.n	800919c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800914e:	2be9      	cmp	r3, #233	@ 0xe9
 8009150:	d009      	beq.n	8009166 <check_fs+0x66>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009158:	2beb      	cmp	r3, #235	@ 0xeb
 800915a:	d11e      	bne.n	800919a <check_fs+0x9a>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009162:	2b90      	cmp	r3, #144	@ 0x90
 8009164:	d119      	bne.n	800919a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3338      	adds	r3, #56	@ 0x38
 800916a:	3336      	adds	r3, #54	@ 0x36
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fc89 	bl	8007a84 <ld_dword>
 8009172:	4603      	mov	r3, r0
 8009174:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009178:	4a0a      	ldr	r2, [pc, #40]	@ (80091a4 <check_fs+0xa4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d101      	bne.n	8009182 <check_fs+0x82>
 800917e:	2300      	movs	r3, #0
 8009180:	e00c      	b.n	800919c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3338      	adds	r3, #56	@ 0x38
 8009186:	3352      	adds	r3, #82	@ 0x52
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe fc7b 	bl	8007a84 <ld_dword>
 800918e:	4603      	mov	r3, r0
 8009190:	4a05      	ldr	r2, [pc, #20]	@ (80091a8 <check_fs+0xa8>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d101      	bne.n	800919a <check_fs+0x9a>
 8009196:	2300      	movs	r3, #0
 8009198:	e000      	b.n	800919c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800919a:	2302      	movs	r3, #2
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	00544146 	.word	0x00544146
 80091a8:	33544146 	.word	0x33544146

080091ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b096      	sub	sp, #88	@ 0x58
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff ff59 	bl	8009078 <get_ldnumber>
 80091c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80091c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da01      	bge.n	80091d2 <find_volume+0x26>
 80091ce:	230b      	movs	r3, #11
 80091d0:	e26a      	b.n	80096a8 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80091d2:	4aa3      	ldr	r2, [pc, #652]	@ (8009460 <find_volume+0x2b4>)
 80091d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <find_volume+0x3a>
 80091e2:	230c      	movs	r3, #12
 80091e4:	e260      	b.n	80096a8 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80091e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091e8:	f7fe fd34 	bl	8007c54 <lock_fs>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <find_volume+0x4a>
 80091f2:	230f      	movs	r3, #15
 80091f4:	e258      	b.n	80096a8 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	f023 0301 	bic.w	r3, r3, #1
 8009202:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01a      	beq.n	8009242 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800920c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe fb81 	bl	8007918 <disk_status>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800921c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10c      	bne.n	8009242 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <find_volume+0x92>
 800922e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800923a:	230a      	movs	r3, #10
 800923c:	e234      	b.n	80096a8 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800923e:	2300      	movs	r3, #0
 8009240:	e232      	b.n	80096a8 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924a:	b2da      	uxtb	r2, r3
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fb79 	bl	800794c <disk_initialize>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800926c:	2303      	movs	r3, #3
 800926e:	e21b      	b.n	80096a8 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d007      	beq.n	8009286 <find_volume+0xda>
 8009276:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009282:	230a      	movs	r3, #10
 8009284:	e210      	b.n	80096a8 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009288:	7858      	ldrb	r0, [r3, #1]
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	330c      	adds	r3, #12
 800928e:	461a      	mov	r2, r3
 8009290:	2102      	movs	r1, #2
 8009292:	f7fe fbc1 	bl	8007a18 <disk_ioctl>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <find_volume+0xf4>
 800929c:	2301      	movs	r3, #1
 800929e:	e203      	b.n	80096a8 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	899b      	ldrh	r3, [r3, #12]
 80092a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a8:	d80d      	bhi.n	80092c6 <find_volume+0x11a>
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	899b      	ldrh	r3, [r3, #12]
 80092ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b2:	d308      	bcc.n	80092c6 <find_volume+0x11a>
 80092b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b6:	899b      	ldrh	r3, [r3, #12]
 80092b8:	461a      	mov	r2, r3
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	899b      	ldrh	r3, [r3, #12]
 80092be:	3b01      	subs	r3, #1
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <find_volume+0x11e>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e1ee      	b.n	80096a8 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80092ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092d2:	f7ff ff15 	bl	8009100 <check_fs>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80092dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d149      	bne.n	8009378 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092e4:	2300      	movs	r3, #0
 80092e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80092e8:	e01e      	b.n	8009328 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80092f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80092f8:	4413      	add	r3, r2
 80092fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	3304      	adds	r3, #4
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d006      	beq.n	8009314 <find_volume+0x168>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	3308      	adds	r3, #8
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fbba 	bl	8007a84 <ld_dword>
 8009310:	4602      	mov	r2, r0
 8009312:	e000      	b.n	8009316 <find_volume+0x16a>
 8009314:	2200      	movs	r2, #0
 8009316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	3358      	adds	r3, #88	@ 0x58
 800931c:	443b      	add	r3, r7
 800931e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009324:	3301      	adds	r3, #1
 8009326:	643b      	str	r3, [r7, #64]	@ 0x40
 8009328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800932a:	2b03      	cmp	r3, #3
 800932c:	d9dd      	bls.n	80092ea <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800932e:	2300      	movs	r3, #0
 8009330:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <find_volume+0x192>
 8009338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800933a:	3b01      	subs	r3, #1
 800933c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800933e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	3358      	adds	r3, #88	@ 0x58
 8009344:	443b      	add	r3, r7
 8009346:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800934a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800934c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <find_volume+0x1b2>
 8009352:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009354:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009356:	f7ff fed3 	bl	8009100 <check_fs>
 800935a:	4603      	mov	r3, r0
 800935c:	e000      	b.n	8009360 <find_volume+0x1b4>
 800935e:	2303      	movs	r3, #3
 8009360:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009364:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009368:	2b01      	cmp	r3, #1
 800936a:	d905      	bls.n	8009378 <find_volume+0x1cc>
 800936c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800936e:	3301      	adds	r3, #1
 8009370:	643b      	str	r3, [r7, #64]	@ 0x40
 8009372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009374:	2b03      	cmp	r3, #3
 8009376:	d9e2      	bls.n	800933e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009378:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800937c:	2b04      	cmp	r3, #4
 800937e:	d101      	bne.n	8009384 <find_volume+0x1d8>
 8009380:	2301      	movs	r3, #1
 8009382:	e191      	b.n	80096a8 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009384:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009388:	2b01      	cmp	r3, #1
 800938a:	d901      	bls.n	8009390 <find_volume+0x1e4>
 800938c:	230d      	movs	r3, #13
 800938e:	e18b      	b.n	80096a8 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	3338      	adds	r3, #56	@ 0x38
 8009394:	330b      	adds	r3, #11
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fb5c 	bl	8007a54 <ld_word>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	899b      	ldrh	r3, [r3, #12]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d001      	beq.n	80093ac <find_volume+0x200>
 80093a8:	230d      	movs	r3, #13
 80093aa:	e17d      	b.n	80096a8 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	3338      	adds	r3, #56	@ 0x38
 80093b0:	3316      	adds	r3, #22
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fb4e 	bl	8007a54 <ld_word>
 80093b8:	4603      	mov	r3, r0
 80093ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80093bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <find_volume+0x224>
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	3338      	adds	r3, #56	@ 0x38
 80093c6:	3324      	adds	r3, #36	@ 0x24
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fb5b 	bl	8007a84 <ld_dword>
 80093ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80093d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	789b      	ldrb	r3, [r3, #2]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d005      	beq.n	80093f4 <find_volume+0x248>
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	789b      	ldrb	r3, [r3, #2]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d001      	beq.n	80093f4 <find_volume+0x248>
 80093f0:	230d      	movs	r3, #13
 80093f2:	e159      	b.n	80096a8 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	789b      	ldrb	r3, [r3, #2]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009408:	461a      	mov	r2, r3
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009410:	895b      	ldrh	r3, [r3, #10]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d008      	beq.n	8009428 <find_volume+0x27c>
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	895b      	ldrh	r3, [r3, #10]
 800941a:	461a      	mov	r2, r3
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	895b      	ldrh	r3, [r3, #10]
 8009420:	3b01      	subs	r3, #1
 8009422:	4013      	ands	r3, r2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <find_volume+0x280>
 8009428:	230d      	movs	r3, #13
 800942a:	e13d      	b.n	80096a8 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	3338      	adds	r3, #56	@ 0x38
 8009430:	3311      	adds	r3, #17
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe fb0e 	bl	8007a54 <ld_word>
 8009438:	4603      	mov	r3, r0
 800943a:	461a      	mov	r2, r3
 800943c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009442:	891b      	ldrh	r3, [r3, #8]
 8009444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009446:	8992      	ldrh	r2, [r2, #12]
 8009448:	0952      	lsrs	r2, r2, #5
 800944a:	b292      	uxth	r2, r2
 800944c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009450:	fb01 f202 	mul.w	r2, r1, r2
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <find_volume+0x2b8>
 800945c:	230d      	movs	r3, #13
 800945e:	e123      	b.n	80096a8 <find_volume+0x4fc>
 8009460:	2000273c 	.word	0x2000273c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009466:	3338      	adds	r3, #56	@ 0x38
 8009468:	3313      	adds	r3, #19
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe faf2 	bl	8007a54 <ld_word>
 8009470:	4603      	mov	r3, r0
 8009472:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <find_volume+0x2dc>
 800947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947c:	3338      	adds	r3, #56	@ 0x38
 800947e:	3320      	adds	r3, #32
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe faff 	bl	8007a84 <ld_dword>
 8009486:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	3338      	adds	r3, #56	@ 0x38
 800948c:	330e      	adds	r3, #14
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fae0 	bl	8007a54 <ld_word>
 8009494:	4603      	mov	r3, r0
 8009496:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009498:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <find_volume+0x2f6>
 800949e:	230d      	movs	r3, #13
 80094a0:	e102      	b.n	80096a8 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80094a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80094a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a6:	4413      	add	r3, r2
 80094a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094aa:	8911      	ldrh	r1, [r2, #8]
 80094ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094ae:	8992      	ldrh	r2, [r2, #12]
 80094b0:	0952      	lsrs	r2, r2, #5
 80094b2:	b292      	uxth	r2, r2
 80094b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80094b8:	b292      	uxth	r2, r2
 80094ba:	4413      	add	r3, r2
 80094bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80094be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d201      	bcs.n	80094ca <find_volume+0x31e>
 80094c6:	230d      	movs	r3, #13
 80094c8:	e0ee      	b.n	80096a8 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80094ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094d2:	8952      	ldrh	r2, [r2, #10]
 80094d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <find_volume+0x338>
 80094e0:	230d      	movs	r3, #13
 80094e2:	e0e1      	b.n	80096a8 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80094e4:	2303      	movs	r3, #3
 80094e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d802      	bhi.n	80094fa <find_volume+0x34e>
 80094f4:	2302      	movs	r3, #2
 80094f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009500:	4293      	cmp	r3, r2
 8009502:	d802      	bhi.n	800950a <find_volume+0x35e>
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	1c9a      	adds	r2, r3, #2
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009514:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009516:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009518:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800951a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800951c:	441a      	add	r2, r3
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009522:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009526:	441a      	add	r2, r3
 8009528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800952c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009530:	2b03      	cmp	r3, #3
 8009532:	d11e      	bne.n	8009572 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	3338      	adds	r3, #56	@ 0x38
 8009538:	332a      	adds	r3, #42	@ 0x2a
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fa8a 	bl	8007a54 <ld_word>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <find_volume+0x39e>
 8009546:	230d      	movs	r3, #13
 8009548:	e0ae      	b.n	80096a8 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	891b      	ldrh	r3, [r3, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <find_volume+0x3aa>
 8009552:	230d      	movs	r3, #13
 8009554:	e0a8      	b.n	80096a8 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	3338      	adds	r3, #56	@ 0x38
 800955a:	332c      	adds	r3, #44	@ 0x2c
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fa91 	bl	8007a84 <ld_dword>
 8009562:	4602      	mov	r2, r0
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009570:	e01f      	b.n	80095b2 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009574:	891b      	ldrh	r3, [r3, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <find_volume+0x3d2>
 800957a:	230d      	movs	r3, #13
 800957c:	e094      	b.n	80096a8 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800957e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009584:	441a      	add	r2, r3
 8009586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009588:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800958a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800958e:	2b02      	cmp	r3, #2
 8009590:	d103      	bne.n	800959a <find_volume+0x3ee>
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	e00a      	b.n	80095b0 <find_volume+0x404>
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	69da      	ldr	r2, [r3, #28]
 800959e:	4613      	mov	r3, r2
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4413      	add	r3, r2
 80095a4:	085a      	lsrs	r2, r3, #1
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80095b0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	6a1a      	ldr	r2, [r3, #32]
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	899b      	ldrh	r3, [r3, #12]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095be:	440b      	add	r3, r1
 80095c0:	3b01      	subs	r3, #1
 80095c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095c4:	8989      	ldrh	r1, [r1, #12]
 80095c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d201      	bcs.n	80095d2 <find_volume+0x426>
 80095ce:	230d      	movs	r3, #13
 80095d0:	e06a      	b.n	80096a8 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	f04f 32ff 	mov.w	r2, #4294967295
 80095d8:	619a      	str	r2, [r3, #24]
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	2280      	movs	r2, #128	@ 0x80
 80095e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80095e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d149      	bne.n	8009684 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	3338      	adds	r3, #56	@ 0x38
 80095f4:	3330      	adds	r3, #48	@ 0x30
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fa2c 	bl	8007a54 <ld_word>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d140      	bne.n	8009684 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009604:	3301      	adds	r3, #1
 8009606:	4619      	mov	r1, r3
 8009608:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800960a:	f7fe fd05 	bl	8008018 <move_window>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d137      	bne.n	8009684 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	2200      	movs	r2, #0
 8009618:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	3338      	adds	r3, #56	@ 0x38
 800961e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fa16 	bl	8007a54 <ld_word>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009630:	429a      	cmp	r2, r3
 8009632:	d127      	bne.n	8009684 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	3338      	adds	r3, #56	@ 0x38
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fa23 	bl	8007a84 <ld_dword>
 800963e:	4603      	mov	r3, r0
 8009640:	4a1b      	ldr	r2, [pc, #108]	@ (80096b0 <find_volume+0x504>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d11e      	bne.n	8009684 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	3338      	adds	r3, #56	@ 0x38
 800964a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fa18 	bl	8007a84 <ld_dword>
 8009654:	4603      	mov	r3, r0
 8009656:	4a17      	ldr	r2, [pc, #92]	@ (80096b4 <find_volume+0x508>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d113      	bne.n	8009684 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	3338      	adds	r3, #56	@ 0x38
 8009660:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fa0d 	bl	8007a84 <ld_dword>
 800966a:	4602      	mov	r2, r0
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	3338      	adds	r3, #56	@ 0x38
 8009674:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fa03 	bl	8007a84 <ld_dword>
 800967e:	4602      	mov	r2, r0
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800968a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800968c:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <find_volume+0x50c>)
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	4b08      	ldr	r3, [pc, #32]	@ (80096b8 <find_volume+0x50c>)
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	4b07      	ldr	r3, [pc, #28]	@ (80096b8 <find_volume+0x50c>)
 800969a:	881a      	ldrh	r2, [r3, #0]
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80096a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096a2:	f7fe fc51 	bl	8007f48 <clear_lock>
#endif
	return FR_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3758      	adds	r7, #88	@ 0x58
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	41615252 	.word	0x41615252
 80096b4:	61417272 	.word	0x61417272
 80096b8:	20002740 	.word	0x20002740

080096bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80096c6:	2309      	movs	r3, #9
 80096c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d02e      	beq.n	800972e <validate+0x72>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d02a      	beq.n	800972e <validate+0x72>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d025      	beq.n	800972e <validate+0x72>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	889a      	ldrh	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	88db      	ldrh	r3, [r3, #6]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d11e      	bne.n	800972e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe faad 	bl	8007c54 <lock_fs>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d014      	beq.n	800972a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	785b      	ldrb	r3, [r3, #1]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe f906 	bl	8007918 <disk_status>
 800970c:	4603      	mov	r3, r0
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <validate+0x60>
				res = FR_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
 800971a:	e008      	b.n	800972e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2100      	movs	r1, #0
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe faac 	bl	8007c80 <unlock_fs>
 8009728:	e001      	b.n	800972e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800972a:	230f      	movs	r3, #15
 800972c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <validate+0x7e>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	e000      	b.n	800973c <validate+0x80>
 800973a:	2300      	movs	r3, #0
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	6013      	str	r3, [r2, #0]
	return res;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	4613      	mov	r3, r2
 8009758:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800975e:	f107 0310 	add.w	r3, r7, #16
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fc88 	bl	8009078 <get_ldnumber>
 8009768:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	da01      	bge.n	8009774 <f_mount+0x28>
 8009770:	230b      	movs	r3, #11
 8009772:	e048      	b.n	8009806 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009774:	4a26      	ldr	r2, [pc, #152]	@ (8009810 <f_mount+0xc4>)
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800977c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00f      	beq.n	80097a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009784:	69b8      	ldr	r0, [r7, #24]
 8009786:	f7fe fbdf 	bl	8007f48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 ff9b 	bl	800a6ca <ff_del_syncobj>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <f_mount+0x52>
 800979a:	2302      	movs	r3, #2
 800979c:	e033      	b.n	8009806 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00f      	beq.n	80097ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3310      	adds	r3, #16
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f000 ff65 	bl	800a68a <ff_cre_syncobj>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <f_mount+0x7e>
 80097c6:	2302      	movs	r3, #2
 80097c8:	e01d      	b.n	8009806 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4910      	ldr	r1, [pc, #64]	@ (8009810 <f_mount+0xc4>)
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <f_mount+0x94>
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d001      	beq.n	80097e4 <f_mount+0x98>
 80097e0:	2300      	movs	r3, #0
 80097e2:	e010      	b.n	8009806 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80097e4:	f107 010c 	add.w	r1, r7, #12
 80097e8:	f107 0308 	add.w	r3, r7, #8
 80097ec:	2200      	movs	r2, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fcdc 	bl	80091ac <find_volume>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	7dfa      	ldrb	r2, [r7, #23]
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fa3e 	bl	8007c80 <unlock_fs>
 8009804:	7dfb      	ldrb	r3, [r7, #23]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	2000273c 	.word	0x2000273c

08009814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b098      	sub	sp, #96	@ 0x60
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	4613      	mov	r3, r2
 8009820:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <f_open+0x18>
 8009828:	2309      	movs	r3, #9
 800982a:	e1be      	b.n	8009baa <f_open+0x396>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009832:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009834:	79fa      	ldrb	r2, [r7, #7]
 8009836:	f107 0110 	add.w	r1, r7, #16
 800983a:	f107 0308 	add.w	r3, r7, #8
 800983e:	4618      	mov	r0, r3
 8009840:	f7ff fcb4 	bl	80091ac <find_volume>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800984a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800984e:	2b00      	cmp	r3, #0
 8009850:	f040 819b 	bne.w	8009b8a <f_open+0x376>
		dj.obj.fs = fs;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	f107 0314 	add.w	r3, r7, #20
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fb93 	bl	8008f8c <follow_path>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800986c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009870:	2b00      	cmp	r3, #0
 8009872:	d118      	bne.n	80098a6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009874:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009878:	b25b      	sxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	da03      	bge.n	8009886 <f_open+0x72>
				res = FR_INVALID_NAME;
 800987e:	2306      	movs	r3, #6
 8009880:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009884:	e00f      	b.n	80098a6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	2b01      	cmp	r3, #1
 800988a:	bf8c      	ite	hi
 800988c:	2301      	movhi	r3, #1
 800988e:	2300      	movls	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	461a      	mov	r2, r3
 8009894:	f107 0314 	add.w	r3, r7, #20
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe fa0c 	bl	8007cb8 <chk_lock>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 031c 	and.w	r3, r3, #28
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d07f      	beq.n	80099b0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80098b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d017      	beq.n	80098e8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80098b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d10e      	bne.n	80098de <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80098c0:	f7fe fa56 	bl	8007d70 <enq_lock>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d006      	beq.n	80098d8 <f_open+0xc4>
 80098ca:	f107 0314 	add.w	r3, r7, #20
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fa18 	bl	8008d04 <dir_register>
 80098d4:	4603      	mov	r3, r0
 80098d6:	e000      	b.n	80098da <f_open+0xc6>
 80098d8:	2312      	movs	r3, #18
 80098da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	f043 0308 	orr.w	r3, r3, #8
 80098e4:	71fb      	strb	r3, [r7, #7]
 80098e6:	e010      	b.n	800990a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80098e8:	7ebb      	ldrb	r3, [r7, #26]
 80098ea:	f003 0311 	and.w	r3, r3, #17
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <f_open+0xe6>
					res = FR_DENIED;
 80098f2:	2307      	movs	r3, #7
 80098f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80098f8:	e007      	b.n	800990a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <f_open+0xf6>
 8009904:	2308      	movs	r3, #8
 8009906:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800990a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800990e:	2b00      	cmp	r3, #0
 8009910:	d168      	bne.n	80099e4 <f_open+0x1d0>
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d063      	beq.n	80099e4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800991c:	f7fd fd9a 	bl	8007454 <get_fattime>
 8009920:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009924:	330e      	adds	r3, #14
 8009926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe f8e9 	bl	8007b00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800992e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009930:	3316      	adds	r3, #22
 8009932:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe f8e3 	bl	8007b00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800993a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993c:	330b      	adds	r3, #11
 800993e:	2220      	movs	r2, #32
 8009940:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff f8ea 	bl	8008b22 <ld_clust>
 800994e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009954:	2200      	movs	r2, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff f902 	bl	8008b60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800995c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995e:	331c      	adds	r3, #28
 8009960:	2100      	movs	r1, #0
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe f8cc 	bl	8007b00 <st_dword>
					fs->wflag = 1;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2201      	movs	r2, #1
 800996c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800996e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d037      	beq.n	80099e4 <f_open+0x1d0>
						dw = fs->winsect;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009978:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800997a:	f107 0314 	add.w	r3, r7, #20
 800997e:	2200      	movs	r2, #0
 8009980:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fdf2 	bl	800856c <remove_chain>
 8009988:	4603      	mov	r3, r0
 800998a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800998e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009992:	2b00      	cmp	r3, #0
 8009994:	d126      	bne.n	80099e4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fb3c 	bl	8008018 <move_window>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099aa:	3a01      	subs	r2, #1
 80099ac:	615a      	str	r2, [r3, #20]
 80099ae:	e019      	b.n	80099e4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80099b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d115      	bne.n	80099e4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80099b8:	7ebb      	ldrb	r3, [r7, #26]
 80099ba:	f003 0310 	and.w	r3, r3, #16
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <f_open+0x1b6>
					res = FR_NO_FILE;
 80099c2:	2304      	movs	r3, #4
 80099c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80099c8:	e00c      	b.n	80099e4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <f_open+0x1d0>
 80099d4:	7ebb      	ldrb	r3, [r7, #26]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <f_open+0x1d0>
						res = FR_DENIED;
 80099de:	2307      	movs	r3, #7
 80099e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80099e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d126      	bne.n	8009a3a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	bf8c      	ite	hi
 8009a12:	2301      	movhi	r3, #1
 8009a14:	2300      	movls	r3, #0
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f107 0314 	add.w	r3, r7, #20
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe f9c7 	bl	8007db4 <inc_lock>
 8009a26:	4602      	mov	r2, r0
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <f_open+0x226>
 8009a34:	2302      	movs	r3, #2
 8009a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f040 80a3 	bne.w	8009b8a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff f869 	bl	8008b22 <ld_clust>
 8009a50:	4602      	mov	r2, r0
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a58:	331c      	adds	r3, #28
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe f812 	bl	8007a84 <ld_dword>
 8009a60:	4602      	mov	r2, r0
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	88da      	ldrh	r2, [r3, #6]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	79fa      	ldrb	r2, [r7, #7]
 8009a7e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3330      	adds	r3, #48	@ 0x30
 8009a96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe f87c 	bl	8007b9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d06e      	beq.n	8009b8a <f_open+0x376>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d06a      	beq.n	8009b8a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	895b      	ldrh	r3, [r3, #10]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	899b      	ldrh	r3, [r3, #12]
 8009ac6:	fb02 f303 	mul.w	r3, r2, r3
 8009aca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ad8:	e016      	b.n	8009b08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fb57 	bl	8008192 <get_fat>
 8009ae4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d802      	bhi.n	8009af2 <f_open+0x2de>
 8009aec:	2302      	movs	r3, #2
 8009aee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af8:	d102      	bne.n	8009b00 <f_open+0x2ec>
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d103      	bne.n	8009b18 <f_open+0x304>
 8009b10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d8e0      	bhi.n	8009ada <f_open+0x2c6>
				}
				fp->clust = clst;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d131      	bne.n	8009b8a <f_open+0x376>
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	899b      	ldrh	r3, [r3, #12]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b32:	fb01 f202 	mul.w	r2, r1, r2
 8009b36:	1a9b      	subs	r3, r3, r2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d026      	beq.n	8009b8a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fb07 	bl	8008154 <clust2sect>
 8009b46:	6478      	str	r0, [r7, #68]	@ 0x44
 8009b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d103      	bne.n	8009b56 <f_open+0x342>
						res = FR_INT_ERR;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009b54:	e019      	b.n	8009b8a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	899b      	ldrh	r3, [r3, #12]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b64:	441a      	add	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	7858      	ldrb	r0, [r3, #1]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a1a      	ldr	r2, [r3, #32]
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f7fd ff0d 	bl	8007998 <disk_read>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <f_open+0x376>
 8009b84:	2301      	movs	r3, #1
 8009b86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <f_open+0x384>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe f86d 	bl	8007c80 <unlock_fs>
 8009ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3760      	adds	r7, #96	@ 0x60
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b08c      	sub	sp, #48	@ 0x30
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f107 0210 	add.w	r2, r7, #16
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff fd72 	bl	80096bc <validate>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d107      	bne.n	8009bf6 <f_write+0x44>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	7d5b      	ldrb	r3, [r3, #21]
 8009bea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009bee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d009      	beq.n	8009c0a <f_write+0x58>
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe f83e 	bl	8007c80 <unlock_fs>
 8009c04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c08:	e192      	b.n	8009f30 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	7d1b      	ldrb	r3, [r3, #20]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <f_write+0x72>
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2107      	movs	r1, #7
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe f830 	bl	8007c80 <unlock_fs>
 8009c20:	2307      	movs	r3, #7
 8009c22:	e185      	b.n	8009f30 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	441a      	add	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	f080 816a 	bcs.w	8009f0a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	43db      	mvns	r3, r3
 8009c3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009c3e:	e164      	b.n	8009f0a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	8992      	ldrh	r2, [r2, #12]
 8009c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c4c:	fb01 f202 	mul.w	r2, r1, r2
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 810f 	bne.w	8009e76 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	8992      	ldrh	r2, [r2, #12]
 8009c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	8952      	ldrh	r2, [r2, #10]
 8009c68:	3a01      	subs	r2, #1
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d14d      	bne.n	8009d10 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10c      	bne.n	8009c96 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d11a      	bne.n	8009cbe <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fcd2 	bl	8008636 <create_chain>
 8009c92:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009c94:	e013      	b.n	8009cbe <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7fe fd5e 	bl	8008766 <clmt_clust>
 8009caa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009cac:	e007      	b.n	8009cbe <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fe fcbd 	bl	8008636 <create_chain>
 8009cbc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8127 	beq.w	8009f14 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d109      	bne.n	8009ce0 <f_write+0x12e>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	755a      	strb	r2, [r3, #21]
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2102      	movs	r1, #2
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fd ffd2 	bl	8007c80 <unlock_fs>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e127      	b.n	8009f30 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce6:	d109      	bne.n	8009cfc <f_write+0x14a>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2201      	movs	r2, #1
 8009cec:	755a      	strb	r2, [r3, #21]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fd ffc4 	bl	8007c80 <unlock_fs>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e119      	b.n	8009f30 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d00:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <f_write+0x15e>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d0e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	7d1b      	ldrb	r3, [r3, #20]
 8009d14:	b25b      	sxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da1d      	bge.n	8009d56 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	7858      	ldrb	r0, [r3, #1]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a1a      	ldr	r2, [r3, #32]
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f7fd fe55 	bl	80079d8 <disk_write>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d009      	beq.n	8009d48 <f_write+0x196>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2201      	movs	r2, #1
 8009d38:	755a      	strb	r2, [r3, #21]
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fd ff9e 	bl	8007c80 <unlock_fs>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e0f3      	b.n	8009f30 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	7d1b      	ldrb	r3, [r3, #20]
 8009d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fe f9f8 	bl	8008154 <clust2sect>
 8009d64:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d109      	bne.n	8009d80 <f_write+0x1ce>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	755a      	strb	r2, [r3, #21]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2102      	movs	r1, #2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fd ff82 	bl	8007c80 <unlock_fs>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e0d7      	b.n	8009f30 <f_write+0x37e>
			sect += csect;
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	4413      	add	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	899b      	ldrh	r3, [r3, #12]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d94:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d048      	beq.n	8009e2e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	4413      	add	r3, r2
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	8952      	ldrh	r2, [r2, #10]
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d905      	bls.n	8009db6 <f_write+0x204>
					cc = fs->csize - csect;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	895b      	ldrh	r3, [r3, #10]
 8009dae:	461a      	mov	r2, r3
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	7858      	ldrb	r0, [r3, #1]
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	69f9      	ldr	r1, [r7, #28]
 8009dc0:	f7fd fe0a 	bl	80079d8 <disk_write>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <f_write+0x22c>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	755a      	strb	r2, [r3, #21]
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd ff53 	bl	8007c80 <unlock_fs>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e0a8      	b.n	8009f30 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1a      	ldr	r2, [r3, #32]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	6a3a      	ldr	r2, [r7, #32]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d918      	bls.n	8009e1e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1a      	ldr	r2, [r3, #32]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	8992      	ldrh	r2, [r2, #12]
 8009dfe:	fb02 f303 	mul.w	r3, r2, r3
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	18d1      	adds	r1, r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	899b      	ldrh	r3, [r3, #12]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7fd fea4 	bl	8007b58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	7d1b      	ldrb	r3, [r3, #20]
 8009e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	899b      	ldrh	r3, [r3, #12]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009e2c:	e050      	b.n	8009ed0 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d01b      	beq.n	8009e70 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	699a      	ldr	r2, [r3, #24]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d215      	bcs.n	8009e70 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	7858      	ldrb	r0, [r3, #1]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e4e:	2301      	movs	r3, #1
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	f7fd fda1 	bl	8007998 <disk_read>
 8009e56:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	755a      	strb	r2, [r3, #21]
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2101      	movs	r1, #1
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fd ff0a 	bl	8007c80 <unlock_fs>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e05f      	b.n	8009f30 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	899b      	ldrh	r3, [r3, #12]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	8992      	ldrh	r2, [r2, #12]
 8009e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e88:	fb01 f202 	mul.w	r2, r1, r2
 8009e8c:	1a9b      	subs	r3, r3, r2
 8009e8e:	1ac3      	subs	r3, r0, r3
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d901      	bls.n	8009e9e <f_write+0x2ec>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	8992      	ldrh	r2, [r2, #12]
 8009eac:	fbb3 f0f2 	udiv	r0, r3, r2
 8009eb0:	fb00 f202 	mul.w	r2, r0, r2
 8009eb4:	1a9b      	subs	r3, r3, r2
 8009eb6:	440b      	add	r3, r1
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eba:	69f9      	ldr	r1, [r7, #28]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fd fe4b 	bl	8007b58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	7d1b      	ldrb	r3, [r3, #20]
 8009ec6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009ed0:	69fa      	ldr	r2, [r7, #28]
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed4:	4413      	add	r3, r2
 8009ed6:	61fb      	str	r3, [r7, #28]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ede:	441a      	add	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	619a      	str	r2, [r3, #24]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	bf38      	it	cc
 8009ef0:	461a      	movcc	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	60da      	str	r2, [r3, #12]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	441a      	add	r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f47f ae97 	bne.w	8009c40 <f_write+0x8e>
 8009f12:	e000      	b.n	8009f16 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f14:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	7d1b      	ldrb	r3, [r3, #20]
 8009f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fd fea9 	bl	8007c80 <unlock_fs>
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3730      	adds	r7, #48	@ 0x30
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f107 0208 	add.w	r2, r7, #8
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff fbb7 	bl	80096bc <validate>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d16d      	bne.n	800a034 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7d1b      	ldrb	r3, [r3, #20]
 8009f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d067      	beq.n	800a034 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	7d1b      	ldrb	r3, [r3, #20]
 8009f68:	b25b      	sxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	da1a      	bge.n	8009fa4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	7858      	ldrb	r0, [r3, #1]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a1a      	ldr	r2, [r3, #32]
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f7fd fd2b 	bl	80079d8 <disk_write>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d006      	beq.n	8009f96 <f_sync+0x5e>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fd fe77 	bl	8007c80 <unlock_fs>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e055      	b.n	800a042 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7d1b      	ldrb	r3, [r3, #20]
 8009f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009fa4:	f7fd fa56 	bl	8007454 <get_fattime>
 8009fa8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f7fe f830 	bl	8008018 <move_window>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d138      	bne.n	800a034 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	330b      	adds	r3, #11
 8009fcc:	781a      	ldrb	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	330b      	adds	r3, #11
 8009fd2:	f042 0220 	orr.w	r2, r2, #32
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	f7fe fdbb 	bl	8008b60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f103 021c 	add.w	r2, r3, #28
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fd fd82 	bl	8007b00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3316      	adds	r3, #22
 800a000:	6939      	ldr	r1, [r7, #16]
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd fd7c 	bl	8007b00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3312      	adds	r3, #18
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd fd5b 	bl	8007aca <st_word>
					fs->wflag = 1;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2201      	movs	r2, #1
 800a018:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe f829 	bl	8008074 <sync_fs>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	7d1b      	ldrb	r3, [r3, #20]
 800a02a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	7dfa      	ldrb	r2, [r7, #23]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fd fe20 	bl	8007c80 <unlock_fs>
 800a040:	7dfb      	ldrb	r3, [r7, #23]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff ff70 	bl	8009f38 <f_sync>
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d11d      	bne.n	800a09e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f107 0208 	add.w	r2, r7, #8
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff fb26 	bl	80096bc <validate>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d111      	bne.n	800a09e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fd ff26 	bl	8007ed0 <dec_lock>
 800a084:	4603      	mov	r3, r0
 800a086:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd fdf1 	bl	8007c80 <unlock_fs>
#endif
		}
	}
	return res;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <f_opendir+0x14>
 800a0b8:	2309      	movs	r3, #9
 800a0ba:	e06a      	b.n	800a192 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a0c0:	f107 010c 	add.w	r1, r7, #12
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7ff f86f 	bl	80091ac <find_volume>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d14f      	bne.n	800a178 <f_opendir+0xd0>
		obj->fs = fs;
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7fe ff52 	bl	8008f8c <follow_path>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d13d      	bne.n	800a16e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a0f8:	b25b      	sxtb	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	db12      	blt.n	800a124 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	799b      	ldrb	r3, [r3, #6]
 800a102:	f003 0310 	and.w	r3, r3, #16
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f7fe fd05 	bl	8008b22 <ld_clust>
 800a118:	4602      	mov	r2, r0
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	609a      	str	r2, [r3, #8]
 800a11e:	e001      	b.n	800a124 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a120:	2305      	movs	r3, #5
 800a122:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d121      	bne.n	800a16e <f_opendir+0xc6>
				obj->id = fs->id;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	88da      	ldrh	r2, [r3, #6]
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a132:	2100      	movs	r1, #0
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7fe fb4e 	bl	80087d6 <dir_sdi>
 800a13a:	4603      	mov	r3, r0
 800a13c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d114      	bne.n	800a16e <f_opendir+0xc6>
					if (obj->sclust) {
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00d      	beq.n	800a168 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a14c:	2100      	movs	r1, #0
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7fd fe30 	bl	8007db4 <inc_lock>
 800a154:	4602      	mov	r2, r0
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d105      	bne.n	800a16e <f_opendir+0xc6>
 800a162:	2312      	movs	r3, #18
 800a164:	75fb      	strb	r3, [r7, #23]
 800a166:	e002      	b.n	800a16e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2200      	movs	r2, #0
 800a16c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b04      	cmp	r3, #4
 800a172:	d101      	bne.n	800a178 <f_opendir+0xd0>
 800a174:	2305      	movs	r3, #5
 800a176:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <f_opendir+0xdc>
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	7dfa      	ldrb	r2, [r7, #23]
 800a188:	4611      	mov	r1, r2
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fd fd78 	bl	8007c80 <unlock_fs>
 800a190:	7dfb      	ldrb	r3, [r7, #23]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f107 0208 	add.w	r2, r7, #8
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff fa86 	bl	80096bc <validate>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d115      	bne.n	800a1e6 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fd fe82 	bl	8007ed0 <dec_lock>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d102      	bne.n	800a1dc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fd fd4d 	bl	8007c80 <unlock_fs>
#endif
	}
	return res;
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f107 0208 	add.w	r2, r7, #8
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fa5a 	bl	80096bc <validate>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d126      	bne.n	800a260 <f_readdir+0x70>
		if (!fno) {
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a218:	2100      	movs	r1, #0
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7fe fadb 	bl	80087d6 <dir_sdi>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
 800a224:	e01c      	b.n	800a260 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a226:	2100      	movs	r1, #0
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7fe fcb9 	bl	8008ba0 <dir_read>
 800a22e:	4603      	mov	r3, r0
 800a230:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	2b04      	cmp	r3, #4
 800a236:	d101      	bne.n	800a23c <f_readdir+0x4c>
 800a238:	2300      	movs	r3, #0
 800a23a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10e      	bne.n	800a260 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7fe fdad 	bl	8008da4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a24a:	2100      	movs	r1, #0
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7fe fb4b 	bl	80088e8 <dir_next>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	2b04      	cmp	r3, #4
 800a25a:	d101      	bne.n	800a260 <f_readdir+0x70>
 800a25c:	2300      	movs	r3, #0
 800a25e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	7bfa      	ldrb	r2, [r7, #15]
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f7fd fd0a 	bl	8007c80 <unlock_fs>
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b090      	sub	sp, #64	@ 0x40
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a280:	f107 010c 	add.w	r1, r7, #12
 800a284:	1d3b      	adds	r3, r7, #4
 800a286:	2200      	movs	r2, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe ff8f 	bl	80091ac <find_volume>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800a294:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d11f      	bne.n	800a2dc <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	f107 030c 	add.w	r3, r7, #12
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fe fe71 	bl	8008f8c <follow_path>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800a2b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d111      	bne.n	800a2dc <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a2b8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a2bc:	b25b      	sxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da03      	bge.n	800a2ca <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a2c2:	2306      	movs	r3, #6
 800a2c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a2c8:	e008      	b.n	800a2dc <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <f_stat+0x66>
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fd64 	bl	8008da4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fd fccb 	bl	8007c80 <unlock_fs>
 800a2ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3740      	adds	r7, #64	@ 0x40
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b092      	sub	sp, #72	@ 0x48
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a302:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a306:	f107 030c 	add.w	r3, r7, #12
 800a30a:	2200      	movs	r2, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe ff4d 	bl	80091ac <find_volume>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a318:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 8099 	bne.w	800a454 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	699a      	ldr	r2, [r3, #24]
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	3b02      	subs	r3, #2
 800a332:	429a      	cmp	r2, r3
 800a334:	d804      	bhi.n	800a340 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	699a      	ldr	r2, [r3, #24]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	e089      	b.n	800a454 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d128      	bne.n	800a39e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a34c:	2302      	movs	r3, #2
 800a34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a352:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fd ff19 	bl	8008192 <get_fat>
 800a360:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a368:	d103      	bne.n	800a372 <f_getfree+0x7c>
 800a36a:	2301      	movs	r3, #1
 800a36c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a370:	e063      	b.n	800a43a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a374:	2b01      	cmp	r3, #1
 800a376:	d103      	bne.n	800a380 <f_getfree+0x8a>
 800a378:	2302      	movs	r3, #2
 800a37a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a37e:	e05c      	b.n	800a43a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d102      	bne.n	800a38c <f_getfree+0x96>
 800a386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a388:	3301      	adds	r3, #1
 800a38a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38e:	3301      	adds	r3, #1
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a398:	429a      	cmp	r2, r3
 800a39a:	d3db      	bcc.n	800a354 <f_getfree+0x5e>
 800a39c:	e04d      	b.n	800a43a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d113      	bne.n	800a3e0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a3b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f7fd fe29 	bl	8008018 <move_window>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a3cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d131      	bne.n	800a438 <f_getfree+0x142>
							p = fs->win;
 800a3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d6:	3338      	adds	r3, #56	@ 0x38
 800a3d8:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	899b      	ldrh	r3, [r3, #12]
 800a3de:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d10f      	bne.n	800a408 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a3e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3ea:	f7fd fb33 	bl	8007a54 <ld_word>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <f_getfree+0x104>
 800a3f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a402:	3b02      	subs	r3, #2
 800a404:	637b      	str	r3, [r7, #52]	@ 0x34
 800a406:	e010      	b.n	800a42a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a40a:	f7fd fb3b 	bl	8007a84 <ld_dword>
 800a40e:	4603      	mov	r3, r0
 800a410:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <f_getfree+0x128>
 800a418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a41a:	3301      	adds	r3, #1
 800a41c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	3304      	adds	r3, #4
 800a422:	633b      	str	r3, [r7, #48]	@ 0x30
 800a424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a426:	3b04      	subs	r3, #4
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a42c:	3b01      	subs	r3, #1
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1bd      	bne.n	800a3b2 <f_getfree+0xbc>
 800a436:	e000      	b.n	800a43a <f_getfree+0x144>
							if (res != FR_OK) break;
 800a438:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a43e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a444:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a448:	791a      	ldrb	r2, [r3, #4]
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	f042 0201 	orr.w	r2, r2, #1
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fd fc0f 	bl	8007c80 <unlock_fs>
 800a462:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a466:	4618      	mov	r0, r3
 800a468:	3748      	adds	r7, #72	@ 0x48
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b09e      	sub	sp, #120	@ 0x78
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a47a:	f107 010c 	add.w	r1, r7, #12
 800a47e:	1d3b      	adds	r3, r7, #4
 800a480:	2202      	movs	r2, #2
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe fe92 	bl	80091ac <find_volume>
 800a488:	4603      	mov	r3, r0
 800a48a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800a492:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 808e 	bne.w	800a5b8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fd71 	bl	8008f8c <follow_path>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a4b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d108      	bne.n	800a4ca <f_unlink+0x5c>
 800a4b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4bc:	2102      	movs	r1, #2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fd fbfa 	bl	8007cb8 <chk_lock>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a4ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d172      	bne.n	800a5b8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a4d2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da03      	bge.n	800a4e4 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a4dc:	2306      	movs	r3, #6
 800a4de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a4e2:	e008      	b.n	800a4f6 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a4e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a4f0:	2307      	movs	r3, #7
 800a4f2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800a4f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d134      	bne.n	800a568 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fb0c 	bl	8008b22 <ld_clust>
 800a50a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a50c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	d027      	beq.n	800a568 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a51c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a51e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a520:	f107 0310 	add.w	r3, r7, #16
 800a524:	2100      	movs	r1, #0
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe f955 	bl	80087d6 <dir_sdi>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800a532:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a536:	2b00      	cmp	r3, #0
 800a538:	d116      	bne.n	800a568 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fb2d 	bl	8008ba0 <dir_read>
 800a546:	4603      	mov	r3, r0
 800a548:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a54c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <f_unlink+0xec>
 800a554:	2307      	movs	r3, #7
 800a556:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a55a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d102      	bne.n	800a568 <f_unlink+0xfa>
 800a562:	2300      	movs	r3, #0
 800a564:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a568:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d123      	bne.n	800a5b8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fbf7 	bl	8008d68 <dir_remove>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a580:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10c      	bne.n	800a5a2 <f_unlink+0x134>
 800a588:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a58e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a592:	2200      	movs	r2, #0
 800a594:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a596:	4618      	mov	r0, r3
 800a598:	f7fd ffe8 	bl	800856c <remove_chain>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a5a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <f_unlink+0x14a>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fd fd61 	bl	8008074 <sync_fs>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fd fb5d 	bl	8007c80 <unlock_fs>
 800a5c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3778      	adds	r7, #120	@ 0x78
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a5ea:	4b1f      	ldr	r3, [pc, #124]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a5ec:	7a5b      	ldrb	r3, [r3, #9]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d131      	bne.n	800a658 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a5f6:	7a5b      	ldrb	r3, [r3, #9]
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a5fe:	2100      	movs	r1, #0
 800a600:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a602:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a604:	7a5b      	ldrb	r3, [r3, #9]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	4a17      	ldr	r2, [pc, #92]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a612:	4b15      	ldr	r3, [pc, #84]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a614:	7a5b      	ldrb	r3, [r3, #9]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	461a      	mov	r2, r3
 800a61a:	4b13      	ldr	r3, [pc, #76]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a61c:	4413      	add	r3, r2
 800a61e:	79fa      	ldrb	r2, [r7, #7]
 800a620:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a622:	4b11      	ldr	r3, [pc, #68]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a624:	7a5b      	ldrb	r3, [r3, #9]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	b2d1      	uxtb	r1, r2
 800a62c:	4a0e      	ldr	r2, [pc, #56]	@ (800a668 <FATFS_LinkDriverEx+0x94>)
 800a62e:	7251      	strb	r1, [r2, #9]
 800a630:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a632:	7dbb      	ldrb	r3, [r7, #22]
 800a634:	3330      	adds	r3, #48	@ 0x30
 800a636:	b2da      	uxtb	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	3301      	adds	r3, #1
 800a640:	223a      	movs	r2, #58	@ 0x3a
 800a642:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	3302      	adds	r3, #2
 800a648:	222f      	movs	r2, #47	@ 0x2f
 800a64a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	3303      	adds	r3, #3
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20002764 	.word	0x20002764

0800a66c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a676:	2200      	movs	r2, #0
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff ffaa 	bl	800a5d4 <FATFS_LinkDriverEx>
 800a680:	4603      	mov	r3, r0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b086      	sub	sp, #24
 800a68e:	af00      	add	r7, sp, #0
 800a690:	4603      	mov	r3, r0
 800a692:	6039      	str	r1, [r7, #0]
 800a694:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	2300      	movs	r3, #0
 800a69c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a69e:	f107 030c 	add.w	r3, r7, #12
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 f8d5 	bl	800a854 <osSemaphoreCreate>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bf14      	ite	ne
 800a6b8:	2301      	movne	r3, #1
 800a6ba:	2300      	moveq	r3, #0
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	617b      	str	r3, [r7, #20]

    return ret;
 800a6c0:	697b      	ldr	r3, [r7, #20]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3718      	adds	r7, #24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f974 	bl	800a9c0 <osSemaphoreDelete>
#endif
    return 1;
 800a6d8:	2301      	movs	r3, #1
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a6ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f8e0 	bl	800a8b8 <osSemaphoreWait>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800a6fe:	2301      	movs	r3, #1
 800a700:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a702:	68fb      	ldr	r3, [r7, #12]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f91d 	bl	800a954 <osSemaphoreRelease>
#endif
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	4603      	mov	r3, r0
 800a72a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a734:	2b84      	cmp	r3, #132	@ 0x84
 800a736:	d005      	beq.n	800a744 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a738:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	3303      	adds	r3, #3
 800a742:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a744:	68fb      	ldr	r3, [r7, #12]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a758:	f3ef 8305 	mrs	r3, IPSR
 800a75c:	607b      	str	r3, [r7, #4]
  return(result);
 800a75e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a760:	2b00      	cmp	r3, #0
 800a762:	bf14      	ite	ne
 800a764:	2301      	movne	r3, #1
 800a766:	2300      	moveq	r3, #0
 800a768:	b2db      	uxtb	r3, r3
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a77a:	f001 fc19 	bl	800bfb0 <vTaskStartScheduler>
  
  return osOK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	bd80      	pop	{r7, pc}

0800a784 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a788:	f002 f868 	bl	800c85c <xTaskGetSchedulerState>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <osKernelRunning+0x12>
    return 0;
 800a792:	2300      	movs	r3, #0
 800a794:	e000      	b.n	800a798 <osKernelRunning+0x14>
  else
    return 1;
 800a796:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a798:	4618      	mov	r0, r3
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a7a0:	f7ff ffd7 	bl	800a752 <inHandlerMode>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a7aa:	f001 fd2d 	bl	800c208 <xTaskGetTickCountFromISR>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	e002      	b.n	800a7b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a7b2:	f001 fd19 	bl	800c1e8 <xTaskGetTickCount>
 800a7b6:	4603      	mov	r3, r0
  }
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7be:	b089      	sub	sp, #36	@ 0x24
 800a7c0:	af04      	add	r7, sp, #16
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d020      	beq.n	800a810 <osThreadCreate+0x54>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d01c      	beq.n	800a810 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685c      	ldr	r4, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691e      	ldr	r6, [r3, #16]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff ff9a 	bl	800a722 <makeFreeRtosPriority>
 800a7ee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7f8:	9202      	str	r2, [sp, #8]
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	9100      	str	r1, [sp, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	4632      	mov	r2, r6
 800a802:	4629      	mov	r1, r5
 800a804:	4620      	mov	r0, r4
 800a806:	f001 fa1b 	bl	800bc40 <xTaskCreateStatic>
 800a80a:	4603      	mov	r3, r0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e01c      	b.n	800a84a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685c      	ldr	r4, [r3, #4]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a81c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff ff7c 	bl	800a722 <makeFreeRtosPriority>
 800a82a:	4602      	mov	r2, r0
 800a82c:	f107 030c 	add.w	r3, r7, #12
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	9200      	str	r2, [sp, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	4632      	mov	r2, r6
 800a838:	4629      	mov	r1, r5
 800a83a:	4620      	mov	r0, r4
 800a83c:	f001 fa66 	bl	800bd0c <xTaskCreate>
 800a840:	4603      	mov	r3, r0
 800a842:	2b01      	cmp	r3, #1
 800a844:	d001      	beq.n	800a84a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a846:	2300      	movs	r3, #0
 800a848:	e000      	b.n	800a84c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a84a:	68fb      	ldr	r3, [r7, #12]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a854 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af02      	add	r7, sp, #8
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00f      	beq.n	800a886 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d10a      	bne.n	800a882 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2203      	movs	r2, #3
 800a872:	9200      	str	r2, [sp, #0]
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	2001      	movs	r0, #1
 800a87a:	f000 fab1 	bl	800ade0 <xQueueGenericCreateStatic>
 800a87e:	4603      	mov	r3, r0
 800a880:	e016      	b.n	800a8b0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	e014      	b.n	800a8b0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d110      	bne.n	800a8ae <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a88c:	2203      	movs	r2, #3
 800a88e:	2100      	movs	r1, #0
 800a890:	2001      	movs	r0, #1
 800a892:	f000 fb2c 	bl	800aeee <xQueueGenericCreate>
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d005      	beq.n	800a8aa <osSemaphoreCreate+0x56>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fb85 	bl	800afb4 <xQueueGenericSend>
      return sema;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	e000      	b.n	800a8b0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a8ae:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a8cc:	2380      	movs	r3, #128	@ 0x80
 800a8ce:	e03a      	b.n	800a946 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d103      	bne.n	800a8e4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	e009      	b.n	800a8f8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <osSemaphoreWait+0x40>
      ticks = 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a8f8:	f7ff ff2b 	bl	800a752 <inHandlerMode>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d017      	beq.n	800a932 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	461a      	mov	r2, r3
 800a908:	2100      	movs	r1, #0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 ff98 	bl	800b840 <xQueueReceiveFromISR>
 800a910:	4603      	mov	r3, r0
 800a912:	2b01      	cmp	r3, #1
 800a914:	d001      	beq.n	800a91a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a916:	23ff      	movs	r3, #255	@ 0xff
 800a918:	e015      	b.n	800a946 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d011      	beq.n	800a944 <osSemaphoreWait+0x8c>
 800a920:	4b0b      	ldr	r3, [pc, #44]	@ (800a950 <osSemaphoreWait+0x98>)
 800a922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	e008      	b.n	800a944 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a932:	68f9      	ldr	r1, [r7, #12]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fe6b 	bl	800b610 <xQueueSemaphoreTake>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d001      	beq.n	800a944 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a940:	23ff      	movs	r3, #255	@ 0xff
 800a942:	e000      	b.n	800a946 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a960:	2300      	movs	r3, #0
 800a962:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a964:	f7ff fef5 	bl	800a752 <inHandlerMode>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a96e:	f107 0308 	add.w	r3, r7, #8
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fcca 	bl	800b30e <xQueueGiveFromISR>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d001      	beq.n	800a984 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a980:	23ff      	movs	r3, #255	@ 0xff
 800a982:	e017      	b.n	800a9b4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d013      	beq.n	800a9b2 <osSemaphoreRelease+0x5e>
 800a98a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9bc <osSemaphoreRelease+0x68>)
 800a98c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	e00a      	b.n	800a9b2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a99c:	2300      	movs	r3, #0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fb06 	bl	800afb4 <xQueueGenericSend>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d001      	beq.n	800a9b2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a9ae:	23ff      	movs	r3, #255	@ 0xff
 800a9b0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a9c8:	f7ff fec3 	bl	800a752 <inHandlerMode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a9d2:	2382      	movs	r3, #130	@ 0x82
 800a9d4:	e003      	b.n	800a9de <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 ffba 	bl	800b950 <vQueueDelete>

  return osOK; 
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a9e6:	b590      	push	{r4, r7, lr}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	af02      	add	r7, sp, #8
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d011      	beq.n	800aa1c <osMessageCreate+0x36>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00d      	beq.n	800aa1c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6859      	ldr	r1, [r3, #4]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2400      	movs	r4, #0
 800aa12:	9400      	str	r4, [sp, #0]
 800aa14:	f000 f9e4 	bl	800ade0 <xQueueGenericCreateStatic>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	e008      	b.n	800aa2e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	4619      	mov	r1, r3
 800aa28:	f000 fa61 	bl	800aeee <xQueueGenericCreate>
 800aa2c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd90      	pop	{r4, r7, pc}
	...

0800aa38 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <osMessagePut+0x1e>
    ticks = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800aa56:	f7ff fe7c 	bl	800a752 <inHandlerMode>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d018      	beq.n	800aa92 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800aa60:	f107 0210 	add.w	r2, r7, #16
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	2300      	movs	r3, #0
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fbac 	bl	800b1c8 <xQueueGenericSendFromISR>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d001      	beq.n	800aa7a <osMessagePut+0x42>
      return osErrorOS;
 800aa76:	23ff      	movs	r3, #255	@ 0xff
 800aa78:	e018      	b.n	800aaac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d014      	beq.n	800aaaa <osMessagePut+0x72>
 800aa80:	4b0c      	ldr	r3, [pc, #48]	@ (800aab4 <osMessagePut+0x7c>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	e00b      	b.n	800aaaa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aa92:	f107 0108 	add.w	r1, r7, #8
 800aa96:	2300      	movs	r3, #0
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 fa8a 	bl	800afb4 <xQueueGenericSend>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d001      	beq.n	800aaaa <osMessagePut+0x72>
      return osErrorOS;
 800aaa6:	23ff      	movs	r3, #255	@ 0xff
 800aaa8:	e000      	b.n	800aaac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aab8:	b590      	push	{r4, r7, lr}
 800aaba:	b08b      	sub	sp, #44	@ 0x2c
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aad2:	2380      	movs	r3, #128	@ 0x80
 800aad4:	617b      	str	r3, [r7, #20]
    return event;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	461c      	mov	r4, r3
 800aada:	f107 0314 	add.w	r3, r7, #20
 800aade:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aae6:	e054      	b.n	800ab92 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d103      	bne.n	800ab00 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295
 800aafc:	627b      	str	r3, [r7, #36]	@ 0x24
 800aafe:	e009      	b.n	800ab14 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d101      	bne.n	800ab14 <osMessageGet+0x5c>
      ticks = 1;
 800ab10:	2301      	movs	r3, #1
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ab14:	f7ff fe1d 	bl	800a752 <inHandlerMode>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01c      	beq.n	800ab58 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ab1e:	f107 0220 	add.w	r2, r7, #32
 800ab22:	f107 0314 	add.w	r3, r7, #20
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	68b8      	ldr	r0, [r7, #8]
 800ab2c:	f000 fe88 	bl	800b840 <xQueueReceiveFromISR>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d102      	bne.n	800ab3c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ab36:	2310      	movs	r3, #16
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	e001      	b.n	800ab40 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01d      	beq.n	800ab82 <osMessageGet+0xca>
 800ab46:	4b15      	ldr	r3, [pc, #84]	@ (800ab9c <osMessageGet+0xe4>)
 800ab48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	e014      	b.n	800ab82 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ab58:	f107 0314 	add.w	r3, r7, #20
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab60:	4619      	mov	r1, r3
 800ab62:	68b8      	ldr	r0, [r7, #8]
 800ab64:	f000 fc6c 	bl	800b440 <xQueueReceive>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d102      	bne.n	800ab74 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ab6e:	2310      	movs	r3, #16
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	e006      	b.n	800ab82 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <osMessageGet+0xc6>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e000      	b.n	800ab80 <osMessageGet+0xc8>
 800ab7e:	2340      	movs	r3, #64	@ 0x40
 800ab80:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	461c      	mov	r4, r3
 800ab86:	f107 0314 	add.w	r3, r7, #20
 800ab8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	372c      	adds	r7, #44	@ 0x2c
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd90      	pop	{r4, r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f103 0208 	add.w	r2, r3, #8
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f103 0208 	add.w	r2, r3, #8
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f103 0208 	add.w	r2, r3, #8
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abfa:	b480      	push	{r7}
 800abfc:	b085      	sub	sp, #20
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
}
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac58:	d103      	bne.n	800ac62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e00c      	b.n	800ac7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3308      	adds	r3, #8
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	e002      	b.n	800ac70 <vListInsert+0x2e>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d2f6      	bcs.n	800ac6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	601a      	str	r2, [r3, #0]
}
 800aca8:	bf00      	nop
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6892      	ldr	r2, [r2, #8]
 800acca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6852      	ldr	r2, [r2, #4]
 800acd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d103      	bne.n	800ace8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10d      	bne.n	800ad38 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad20:	b672      	cpsid	i
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	b662      	cpsie	i
 800ad30:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	e7fd      	b.n	800ad34 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ad38:	f002 f8e0 	bl	800cefc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad44:	68f9      	ldr	r1, [r7, #12]
 800ad46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	441a      	add	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad6e:	fb01 f303 	mul.w	r3, r1, r3
 800ad72:	441a      	add	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	22ff      	movs	r2, #255	@ 0xff
 800ad7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	22ff      	movs	r2, #255	@ 0xff
 800ad84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d114      	bne.n	800adb8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d01a      	beq.n	800adcc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3310      	adds	r3, #16
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f001 fb90 	bl	800c4c0 <xTaskRemoveFromEventList>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d012      	beq.n	800adcc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <xQueueGenericReset+0xd4>)
 800ada8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	e009      	b.n	800adcc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	3310      	adds	r3, #16
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff feef 	bl	800aba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3324      	adds	r3, #36	@ 0x24
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff feea 	bl	800aba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adcc:	f002 f8cc 	bl	800cf68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800add0:	2301      	movs	r3, #1
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08e      	sub	sp, #56	@ 0x38
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10d      	bne.n	800ae10 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf8:	b672      	cpsid	i
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	b662      	cpsie	i
 800ae08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae0a:	bf00      	nop
 800ae0c:	bf00      	nop
 800ae0e:	e7fd      	b.n	800ae0c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10d      	bne.n	800ae32 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1a:	b672      	cpsid	i
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	b662      	cpsie	i
 800ae2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	e7fd      	b.n	800ae2e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <xQueueGenericCreateStatic+0x5e>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <xQueueGenericCreateStatic+0x62>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e000      	b.n	800ae44 <xQueueGenericCreateStatic+0x64>
 800ae42:	2300      	movs	r3, #0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10d      	bne.n	800ae64 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4c:	b672      	cpsid	i
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	b662      	cpsie	i
 800ae5c:	623b      	str	r3, [r7, #32]
}
 800ae5e:	bf00      	nop
 800ae60:	bf00      	nop
 800ae62:	e7fd      	b.n	800ae60 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d102      	bne.n	800ae70 <xQueueGenericCreateStatic+0x90>
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <xQueueGenericCreateStatic+0x94>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e000      	b.n	800ae76 <xQueueGenericCreateStatic+0x96>
 800ae74:	2300      	movs	r3, #0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10d      	bne.n	800ae96 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7e:	b672      	cpsid	i
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	b662      	cpsie	i
 800ae8e:	61fb      	str	r3, [r7, #28]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae96:	2348      	movs	r3, #72	@ 0x48
 800ae98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b48      	cmp	r3, #72	@ 0x48
 800ae9e:	d00d      	beq.n	800aebc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea4:	b672      	cpsid	i
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	b662      	cpsie	i
 800aeb4:	61bb      	str	r3, [r7, #24]
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	e7fd      	b.n	800aeb8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aebc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00d      	beq.n	800aee4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aed0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	4613      	mov	r3, r2
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f848 	bl	800af74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3730      	adds	r7, #48	@ 0x30
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b08a      	sub	sp, #40	@ 0x28
 800aef2:	af02      	add	r7, sp, #8
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	4613      	mov	r3, r2
 800aefa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10d      	bne.n	800af1e <xQueueGenericCreate+0x30>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af06:	b672      	cpsid	i
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	b662      	cpsie	i
 800af16:	613b      	str	r3, [r7, #16]
}
 800af18:	bf00      	nop
 800af1a:	bf00      	nop
 800af1c:	e7fd      	b.n	800af1a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	e004      	b.n	800af34 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	fb02 f303 	mul.w	r3, r2, r3
 800af32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	3348      	adds	r3, #72	@ 0x48
 800af38:	4618      	mov	r0, r3
 800af3a:	f002 f90d 	bl	800d158 <pvPortMalloc>
 800af3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d011      	beq.n	800af6a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	3348      	adds	r3, #72	@ 0x48
 800af4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af58:	79fa      	ldrb	r2, [r7, #7]
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	4613      	mov	r3, r2
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f805 	bl	800af74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af6a:	69bb      	ldr	r3, [r7, #24]
	}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d103      	bne.n	800af90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	69ba      	ldr	r2, [r7, #24]
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	e002      	b.n	800af96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afa2:	2101      	movs	r1, #1
 800afa4:	69b8      	ldr	r0, [r7, #24]
 800afa6:	f7ff feaf 	bl	800ad08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08e      	sub	sp, #56	@ 0x38
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afc2:	2300      	movs	r3, #0
 800afc4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800afca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <xQueueGenericSend+0x38>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	b672      	cpsid	i
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	b662      	cpsie	i
 800afe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	e7fd      	b.n	800afe8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d103      	bne.n	800affa <xQueueGenericSend+0x46>
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <xQueueGenericSend+0x4a>
 800affa:	2301      	movs	r3, #1
 800affc:	e000      	b.n	800b000 <xQueueGenericSend+0x4c>
 800affe:	2300      	movs	r3, #0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10d      	bne.n	800b020 <xQueueGenericSend+0x6c>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b008:	b672      	cpsid	i
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	b662      	cpsie	i
 800b018:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b01a:	bf00      	nop
 800b01c:	bf00      	nop
 800b01e:	e7fd      	b.n	800b01c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d103      	bne.n	800b02e <xQueueGenericSend+0x7a>
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d101      	bne.n	800b032 <xQueueGenericSend+0x7e>
 800b02e:	2301      	movs	r3, #1
 800b030:	e000      	b.n	800b034 <xQueueGenericSend+0x80>
 800b032:	2300      	movs	r3, #0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10d      	bne.n	800b054 <xQueueGenericSend+0xa0>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03c:	b672      	cpsid	i
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	b662      	cpsie	i
 800b04c:	623b      	str	r3, [r7, #32]
}
 800b04e:	bf00      	nop
 800b050:	bf00      	nop
 800b052:	e7fd      	b.n	800b050 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b054:	f001 fc02 	bl	800c85c <xTaskGetSchedulerState>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <xQueueGenericSend+0xb0>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <xQueueGenericSend+0xb4>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <xQueueGenericSend+0xb6>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10d      	bne.n	800b08a <xQueueGenericSend+0xd6>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	b672      	cpsid	i
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	b662      	cpsie	i
 800b082:	61fb      	str	r3, [r7, #28]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b08a:	f001 ff37 	bl	800cefc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b096:	429a      	cmp	r2, r3
 800b098:	d302      	bcc.n	800b0a0 <xQueueGenericSend+0xec>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d129      	bne.n	800b0f4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	68b9      	ldr	r1, [r7, #8]
 800b0a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0a6:	f000 fc91 	bl	800b9cc <prvCopyDataToQueue>
 800b0aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d010      	beq.n	800b0d6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b6:	3324      	adds	r3, #36	@ 0x24
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 fa01 	bl	800c4c0 <xTaskRemoveFromEventList>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d013      	beq.n	800b0ec <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1c4 <xQueueGenericSend+0x210>)
 800b0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	e00a      	b.n	800b0ec <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d007      	beq.n	800b0ec <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0dc:	4b39      	ldr	r3, [pc, #228]	@ (800b1c4 <xQueueGenericSend+0x210>)
 800b0de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0ec:	f001 ff3c 	bl	800cf68 <vPortExitCritical>
				return pdPASS;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e063      	b.n	800b1bc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d103      	bne.n	800b102 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0fa:	f001 ff35 	bl	800cf68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e05c      	b.n	800b1bc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b108:	f107 0314 	add.w	r3, r7, #20
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 fa3d 	bl	800c58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b112:	2301      	movs	r3, #1
 800b114:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b116:	f001 ff27 	bl	800cf68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b11a:	f000 ffb7 	bl	800c08c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b11e:	f001 feed 	bl	800cefc <vPortEnterCritical>
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b128:	b25b      	sxtb	r3, r3
 800b12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12e:	d103      	bne.n	800b138 <xQueueGenericSend+0x184>
 800b130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b13e:	b25b      	sxtb	r3, r3
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d103      	bne.n	800b14e <xQueueGenericSend+0x19a>
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b14e:	f001 ff0b 	bl	800cf68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b152:	1d3a      	adds	r2, r7, #4
 800b154:	f107 0314 	add.w	r3, r7, #20
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f001 fa2c 	bl	800c5b8 <xTaskCheckForTimeOut>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d124      	bne.n	800b1b0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b168:	f000 fd28 	bl	800bbbc <prvIsQueueFull>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d018      	beq.n	800b1a4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	3310      	adds	r3, #16
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f001 f978 	bl	800c470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b182:	f000 fcb3 	bl	800baec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b186:	f000 ff8f 	bl	800c0a8 <xTaskResumeAll>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f47f af7c 	bne.w	800b08a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b192:	4b0c      	ldr	r3, [pc, #48]	@ (800b1c4 <xQueueGenericSend+0x210>)
 800b194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	e772      	b.n	800b08a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1a6:	f000 fca1 	bl	800baec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1aa:	f000 ff7d 	bl	800c0a8 <xTaskResumeAll>
 800b1ae:	e76c      	b.n	800b08a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1b2:	f000 fc9b 	bl	800baec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1b6:	f000 ff77 	bl	800c0a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3738      	adds	r7, #56	@ 0x38
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	e000ed04 	.word	0xe000ed04

0800b1c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b08e      	sub	sp, #56	@ 0x38
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10d      	bne.n	800b1fc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	b672      	cpsid	i
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	b662      	cpsie	i
 800b1f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	e7fd      	b.n	800b1f8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d103      	bne.n	800b20a <xQueueGenericSendFromISR+0x42>
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <xQueueGenericSendFromISR+0x46>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e000      	b.n	800b210 <xQueueGenericSendFromISR+0x48>
 800b20e:	2300      	movs	r3, #0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10d      	bne.n	800b230 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b218:	b672      	cpsid	i
 800b21a:	f383 8811 	msr	BASEPRI, r3
 800b21e:	f3bf 8f6f 	isb	sy
 800b222:	f3bf 8f4f 	dsb	sy
 800b226:	b662      	cpsie	i
 800b228:	623b      	str	r3, [r7, #32]
}
 800b22a:	bf00      	nop
 800b22c:	bf00      	nop
 800b22e:	e7fd      	b.n	800b22c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d103      	bne.n	800b23e <xQueueGenericSendFromISR+0x76>
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d101      	bne.n	800b242 <xQueueGenericSendFromISR+0x7a>
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <xQueueGenericSendFromISR+0x7c>
 800b242:	2300      	movs	r3, #0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10d      	bne.n	800b264 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24c:	b672      	cpsid	i
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	b662      	cpsie	i
 800b25c:	61fb      	str	r3, [r7, #28]
}
 800b25e:	bf00      	nop
 800b260:	bf00      	nop
 800b262:	e7fd      	b.n	800b260 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b264:	f001 ff32 	bl	800d0cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b268:	f3ef 8211 	mrs	r2, BASEPRI
 800b26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b270:	b672      	cpsid	i
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	b662      	cpsie	i
 800b280:	61ba      	str	r2, [r7, #24]
 800b282:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b284:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b286:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b290:	429a      	cmp	r2, r3
 800b292:	d302      	bcc.n	800b29a <xQueueGenericSendFromISR+0xd2>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d12c      	bne.n	800b2f4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	68b9      	ldr	r1, [r7, #8]
 800b2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2aa:	f000 fb8f 	bl	800b9cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b6:	d112      	bne.n	800b2de <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d016      	beq.n	800b2ee <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c2:	3324      	adds	r3, #36	@ 0x24
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f001 f8fb 	bl	800c4c0 <xTaskRemoveFromEventList>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00e      	beq.n	800b2ee <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	e007      	b.n	800b2ee <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	b25a      	sxtb	r2, r3
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b2f2:	e001      	b.n	800b2f8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b302:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b306:	4618      	mov	r0, r3
 800b308:	3738      	adds	r7, #56	@ 0x38
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b08e      	sub	sp, #56	@ 0x38
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10d      	bne.n	800b33e <xQueueGiveFromISR+0x30>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b326:	b672      	cpsid	i
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	b662      	cpsie	i
 800b336:	623b      	str	r3, [r7, #32]
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	e7fd      	b.n	800b33a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00d      	beq.n	800b362 <xQueueGiveFromISR+0x54>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34a:	b672      	cpsid	i
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	b662      	cpsie	i
 800b35a:	61fb      	str	r3, [r7, #28]
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	e7fd      	b.n	800b35e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d103      	bne.n	800b372 <xQueueGiveFromISR+0x64>
 800b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <xQueueGiveFromISR+0x68>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <xQueueGiveFromISR+0x6a>
 800b376:	2300      	movs	r3, #0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10d      	bne.n	800b398 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	b672      	cpsid	i
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	b662      	cpsie	i
 800b390:	61bb      	str	r3, [r7, #24]
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	e7fd      	b.n	800b394 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b398:	f001 fe98 	bl	800d0cc <vPortValidateInterruptPriority>
	__asm volatile
 800b39c:	f3ef 8211 	mrs	r2, BASEPRI
 800b3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a4:	b672      	cpsid	i
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	b662      	cpsie	i
 800b3b4:	617a      	str	r2, [r7, #20]
 800b3b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b3b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d22b      	bcs.n	800b424 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e6:	d112      	bne.n	800b40e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d016      	beq.n	800b41e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	3324      	adds	r3, #36	@ 0x24
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 f863 	bl	800c4c0 <xTaskRemoveFromEventList>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00b      	beq.n	800b41e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	e007      	b.n	800b41e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b40e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b412:	3301      	adds	r3, #1
 800b414:	b2db      	uxtb	r3, r3
 800b416:	b25a      	sxtb	r2, r3
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b41e:	2301      	movs	r3, #1
 800b420:	637b      	str	r3, [r7, #52]	@ 0x34
 800b422:	e001      	b.n	800b428 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b424:	2300      	movs	r3, #0
 800b426:	637b      	str	r3, [r7, #52]	@ 0x34
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f383 8811 	msr	BASEPRI, r3
}
 800b432:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b436:	4618      	mov	r0, r3
 800b438:	3738      	adds	r7, #56	@ 0x38
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	@ 0x30
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10d      	bne.n	800b476 <xQueueReceive+0x36>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	b672      	cpsid	i
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	b662      	cpsie	i
 800b46e:	623b      	str	r3, [r7, #32]
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d103      	bne.n	800b484 <xQueueReceive+0x44>
 800b47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <xQueueReceive+0x48>
 800b484:	2301      	movs	r3, #1
 800b486:	e000      	b.n	800b48a <xQueueReceive+0x4a>
 800b488:	2300      	movs	r3, #0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10d      	bne.n	800b4aa <xQueueReceive+0x6a>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	b672      	cpsid	i
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	b662      	cpsie	i
 800b4a2:	61fb      	str	r3, [r7, #28]
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
 800b4a8:	e7fd      	b.n	800b4a6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4aa:	f001 f9d7 	bl	800c85c <xTaskGetSchedulerState>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <xQueueReceive+0x7a>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <xQueueReceive+0x7e>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e000      	b.n	800b4c0 <xQueueReceive+0x80>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10d      	bne.n	800b4e0 <xQueueReceive+0xa0>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c8:	b672      	cpsid	i
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	b662      	cpsie	i
 800b4d8:	61bb      	str	r3, [r7, #24]
}
 800b4da:	bf00      	nop
 800b4dc:	bf00      	nop
 800b4de:	e7fd      	b.n	800b4dc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4e0:	f001 fd0c 	bl	800cefc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01f      	beq.n	800b530 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4f0:	68b9      	ldr	r1, [r7, #8]
 800b4f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f4:	f000 fad4 	bl	800baa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	1e5a      	subs	r2, r3, #1
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00f      	beq.n	800b528 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	3310      	adds	r3, #16
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 ffd7 	bl	800c4c0 <xTaskRemoveFromEventList>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b518:	4b3c      	ldr	r3, [pc, #240]	@ (800b60c <xQueueReceive+0x1cc>)
 800b51a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b528:	f001 fd1e 	bl	800cf68 <vPortExitCritical>
				return pdPASS;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e069      	b.n	800b604 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d103      	bne.n	800b53e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b536:	f001 fd17 	bl	800cf68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e062      	b.n	800b604 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b544:	f107 0310 	add.w	r3, r7, #16
 800b548:	4618      	mov	r0, r3
 800b54a:	f001 f81f 	bl	800c58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b54e:	2301      	movs	r3, #1
 800b550:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b552:	f001 fd09 	bl	800cf68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b556:	f000 fd99 	bl	800c08c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b55a:	f001 fccf 	bl	800cefc <vPortEnterCritical>
 800b55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b564:	b25b      	sxtb	r3, r3
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	d103      	bne.n	800b574 <xQueueReceive+0x134>
 800b56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b57a:	b25b      	sxtb	r3, r3
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b580:	d103      	bne.n	800b58a <xQueueReceive+0x14a>
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b58a:	f001 fced 	bl	800cf68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b58e:	1d3a      	adds	r2, r7, #4
 800b590:	f107 0310 	add.w	r3, r7, #16
 800b594:	4611      	mov	r1, r2
 800b596:	4618      	mov	r0, r3
 800b598:	f001 f80e 	bl	800c5b8 <xTaskCheckForTimeOut>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d123      	bne.n	800b5ea <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a4:	f000 faf4 	bl	800bb90 <prvIsQueueEmpty>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d017      	beq.n	800b5de <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	3324      	adds	r3, #36	@ 0x24
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 ff5a 	bl	800c470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5be:	f000 fa95 	bl	800baec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5c2:	f000 fd71 	bl	800c0a8 <xTaskResumeAll>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d189      	bne.n	800b4e0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b60c <xQueueReceive+0x1cc>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	e780      	b.n	800b4e0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5e0:	f000 fa84 	bl	800baec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5e4:	f000 fd60 	bl	800c0a8 <xTaskResumeAll>
 800b5e8:	e77a      	b.n	800b4e0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5ec:	f000 fa7e 	bl	800baec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5f0:	f000 fd5a 	bl	800c0a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5f6:	f000 facb 	bl	800bb90 <prvIsQueueEmpty>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f43f af6f 	beq.w	800b4e0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b602:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b604:	4618      	mov	r0, r3
 800b606:	3730      	adds	r7, #48	@ 0x30
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	e000ed04 	.word	0xe000ed04

0800b610 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08e      	sub	sp, #56	@ 0x38
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10d      	bne.n	800b648 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b630:	b672      	cpsid	i
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	b662      	cpsie	i
 800b640:	623b      	str	r3, [r7, #32]
}
 800b642:	bf00      	nop
 800b644:	bf00      	nop
 800b646:	e7fd      	b.n	800b644 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00d      	beq.n	800b66c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b654:	b672      	cpsid	i
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	b662      	cpsie	i
 800b664:	61fb      	str	r3, [r7, #28]
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	e7fd      	b.n	800b668 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b66c:	f001 f8f6 	bl	800c85c <xTaskGetSchedulerState>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d102      	bne.n	800b67c <xQueueSemaphoreTake+0x6c>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <xQueueSemaphoreTake+0x70>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <xQueueSemaphoreTake+0x72>
 800b680:	2300      	movs	r3, #0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10d      	bne.n	800b6a2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	b672      	cpsid	i
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	b662      	cpsie	i
 800b69a:	61bb      	str	r3, [r7, #24]
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	e7fd      	b.n	800b69e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6a2:	f001 fc2b 	bl	800cefc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d024      	beq.n	800b6fc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b4:	1e5a      	subs	r2, r3, #1
 800b6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d104      	bne.n	800b6cc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b6c2:	f001 fa95 	bl	800cbf0 <pvTaskIncrementMutexHeldCount>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00f      	beq.n	800b6f4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d6:	3310      	adds	r3, #16
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fef1 	bl	800c4c0 <xTaskRemoveFromEventList>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d007      	beq.n	800b6f4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6e4:	4b55      	ldr	r3, [pc, #340]	@ (800b83c <xQueueSemaphoreTake+0x22c>)
 800b6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6f4:	f001 fc38 	bl	800cf68 <vPortExitCritical>
				return pdPASS;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e09a      	b.n	800b832 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d114      	bne.n	800b72c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00d      	beq.n	800b724 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70c:	b672      	cpsid	i
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	b662      	cpsie	i
 800b71c:	617b      	str	r3, [r7, #20]
}
 800b71e:	bf00      	nop
 800b720:	bf00      	nop
 800b722:	e7fd      	b.n	800b720 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b724:	f001 fc20 	bl	800cf68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b728:	2300      	movs	r3, #0
 800b72a:	e082      	b.n	800b832 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b732:	f107 030c 	add.w	r3, r7, #12
 800b736:	4618      	mov	r0, r3
 800b738:	f000 ff28 	bl	800c58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b740:	f001 fc12 	bl	800cf68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b744:	f000 fca2 	bl	800c08c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b748:	f001 fbd8 	bl	800cefc <vPortEnterCritical>
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b752:	b25b      	sxtb	r3, r3
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d103      	bne.n	800b762 <xQueueSemaphoreTake+0x152>
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d103      	bne.n	800b778 <xQueueSemaphoreTake+0x168>
 800b770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b778:	f001 fbf6 	bl	800cf68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b77c:	463a      	mov	r2, r7
 800b77e:	f107 030c 	add.w	r3, r7, #12
 800b782:	4611      	mov	r1, r2
 800b784:	4618      	mov	r0, r3
 800b786:	f000 ff17 	bl	800c5b8 <xTaskCheckForTimeOut>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d132      	bne.n	800b7f6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b792:	f000 f9fd 	bl	800bb90 <prvIsQueueEmpty>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d026      	beq.n	800b7ea <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d109      	bne.n	800b7b8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800b7a4:	f001 fbaa 	bl	800cefc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 f873 	bl	800c898 <xTaskPriorityInherit>
 800b7b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b7b4:	f001 fbd8 	bl	800cf68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ba:	3324      	adds	r3, #36	@ 0x24
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 fe55 	bl	800c470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7c8:	f000 f990 	bl	800baec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7cc:	f000 fc6c 	bl	800c0a8 <xTaskResumeAll>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f47f af65 	bne.w	800b6a2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800b7d8:	4b18      	ldr	r3, [pc, #96]	@ (800b83c <xQueueSemaphoreTake+0x22c>)
 800b7da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	e75b      	b.n	800b6a2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b7ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7ec:	f000 f97e 	bl	800baec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7f0:	f000 fc5a 	bl	800c0a8 <xTaskResumeAll>
 800b7f4:	e755      	b.n	800b6a2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b7f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7f8:	f000 f978 	bl	800baec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7fc:	f000 fc54 	bl	800c0a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b802:	f000 f9c5 	bl	800bb90 <prvIsQueueEmpty>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f43f af4a 	beq.w	800b6a2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00d      	beq.n	800b830 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800b814:	f001 fb72 	bl	800cefc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b81a:	f000 f8bf 	bl	800b99c <prvGetDisinheritPriorityAfterTimeout>
 800b81e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b826:	4618      	mov	r0, r3
 800b828:	f001 f942 	bl	800cab0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b82c:	f001 fb9c 	bl	800cf68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b832:	4618      	mov	r0, r3
 800b834:	3738      	adds	r7, #56	@ 0x38
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08e      	sub	sp, #56	@ 0x38
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10d      	bne.n	800b872 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	b672      	cpsid	i
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	b662      	cpsie	i
 800b86a:	623b      	str	r3, [r7, #32]
}
 800b86c:	bf00      	nop
 800b86e:	bf00      	nop
 800b870:	e7fd      	b.n	800b86e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d103      	bne.n	800b880 <xQueueReceiveFromISR+0x40>
 800b878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <xQueueReceiveFromISR+0x44>
 800b880:	2301      	movs	r3, #1
 800b882:	e000      	b.n	800b886 <xQueueReceiveFromISR+0x46>
 800b884:	2300      	movs	r3, #0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10d      	bne.n	800b8a6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88e:	b672      	cpsid	i
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	b662      	cpsie	i
 800b89e:	61fb      	str	r3, [r7, #28]
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	e7fd      	b.n	800b8a2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8a6:	f001 fc11 	bl	800d0cc <vPortValidateInterruptPriority>
	__asm volatile
 800b8aa:	f3ef 8211 	mrs	r2, BASEPRI
 800b8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b2:	b672      	cpsid	i
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	b662      	cpsie	i
 800b8c2:	61ba      	str	r2, [r7, #24]
 800b8c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b8c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d02f      	beq.n	800b936 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8e4:	f000 f8dc 	bl	800baa0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ea:	1e5a      	subs	r2, r3, #1
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b8f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f8:	d112      	bne.n	800b920 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d016      	beq.n	800b930 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	3310      	adds	r3, #16
 800b906:	4618      	mov	r0, r3
 800b908:	f000 fdda 	bl	800c4c0 <xTaskRemoveFromEventList>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00e      	beq.n	800b930 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00b      	beq.n	800b930 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	e007      	b.n	800b930 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b924:	3301      	adds	r3, #1
 800b926:	b2db      	uxtb	r3, r3
 800b928:	b25a      	sxtb	r2, r3
 800b92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b930:	2301      	movs	r3, #1
 800b932:	637b      	str	r3, [r7, #52]	@ 0x34
 800b934:	e001      	b.n	800b93a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800b936:	2300      	movs	r3, #0
 800b938:	637b      	str	r3, [r7, #52]	@ 0x34
 800b93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f383 8811 	msr	BASEPRI, r3
}
 800b944:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3738      	adds	r7, #56	@ 0x38
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10d      	bne.n	800b97e <vQueueDelete+0x2e>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	b672      	cpsid	i
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	b662      	cpsie	i
 800b976:	60bb      	str	r3, [r7, #8]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 f934 	bl	800bbec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d102      	bne.n	800b994 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f001 fcb0 	bl	800d2f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b994:	bf00      	nop
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d006      	beq.n	800b9ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f1c3 0307 	rsb	r3, r3, #7
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	e001      	b.n	800b9be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b9be:	68fb      	ldr	r3, [r7, #12]
	}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10d      	bne.n	800ba06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d14d      	bne.n	800ba8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 ffce 	bl	800c998 <xTaskPriorityDisinherit>
 800b9fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	609a      	str	r2, [r3, #8]
 800ba04:	e043      	b.n	800ba8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d119      	bne.n	800ba40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6858      	ldr	r0, [r3, #4]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba14:	461a      	mov	r2, r3
 800ba16:	68b9      	ldr	r1, [r7, #8]
 800ba18:	f002 f961 	bl	800dcde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba24:	441a      	add	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d32b      	bcc.n	800ba8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	605a      	str	r2, [r3, #4]
 800ba3e:	e026      	b.n	800ba8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68d8      	ldr	r0, [r3, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba48:	461a      	mov	r2, r3
 800ba4a:	68b9      	ldr	r1, [r7, #8]
 800ba4c:	f002 f947 	bl	800dcde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba58:	425b      	negs	r3, r3
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d207      	bcs.n	800ba7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba74:	425b      	negs	r3, r3
 800ba76:	441a      	add	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d105      	bne.n	800ba8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	1c5a      	adds	r2, r3, #1
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ba96:	697b      	ldr	r3, [r7, #20]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d018      	beq.n	800bae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baba:	441a      	add	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d303      	bcc.n	800bad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68d9      	ldr	r1, [r3, #12]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800badc:	461a      	mov	r2, r3
 800bade:	6838      	ldr	r0, [r7, #0]
 800bae0:	f002 f8fd 	bl	800dcde <memcpy>
	}
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800baf4:	f001 fa02 	bl	800cefc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bafe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb00:	e011      	b.n	800bb26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d012      	beq.n	800bb30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3324      	adds	r3, #36	@ 0x24
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fcd6 	bl	800c4c0 <xTaskRemoveFromEventList>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb1a:	f000 fdb5 	bl	800c688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	dce9      	bgt.n	800bb02 <prvUnlockQueue+0x16>
 800bb2e:	e000      	b.n	800bb32 <prvUnlockQueue+0x46>
					break;
 800bb30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	22ff      	movs	r2, #255	@ 0xff
 800bb36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bb3a:	f001 fa15 	bl	800cf68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb3e:	f001 f9dd 	bl	800cefc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb4a:	e011      	b.n	800bb70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d012      	beq.n	800bb7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3310      	adds	r3, #16
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fcb1 	bl	800c4c0 <xTaskRemoveFromEventList>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb64:	f000 fd90 	bl	800c688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dce9      	bgt.n	800bb4c <prvUnlockQueue+0x60>
 800bb78:	e000      	b.n	800bb7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	22ff      	movs	r2, #255	@ 0xff
 800bb80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bb84:	f001 f9f0 	bl	800cf68 <vPortExitCritical>
}
 800bb88:	bf00      	nop
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb98:	f001 f9b0 	bl	800cefc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bba4:	2301      	movs	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e001      	b.n	800bbae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbae:	f001 f9db 	bl	800cf68 <vPortExitCritical>

	return xReturn;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbc4:	f001 f99a 	bl	800cefc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d102      	bne.n	800bbda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	e001      	b.n	800bbde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbde:	f001 f9c3 	bl	800cf68 <vPortExitCritical>

	return xReturn;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	e016      	b.n	800bc28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bbfa:	4a10      	ldr	r2, [pc, #64]	@ (800bc3c <vQueueUnregisterQueue+0x50>)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d10b      	bne.n	800bc22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bc0a:	4a0c      	ldr	r2, [pc, #48]	@ (800bc3c <vQueueUnregisterQueue+0x50>)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2100      	movs	r1, #0
 800bc10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bc14:	4a09      	ldr	r2, [pc, #36]	@ (800bc3c <vQueueUnregisterQueue+0x50>)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	4413      	add	r3, r2
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	605a      	str	r2, [r3, #4]
				break;
 800bc20:	e006      	b.n	800bc30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3301      	adds	r3, #1
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b07      	cmp	r3, #7
 800bc2c:	d9e5      	bls.n	800bbfa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	20002770 	.word	0x20002770

0800bc40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08e      	sub	sp, #56	@ 0x38
 800bc44:	af04      	add	r7, sp, #16
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10d      	bne.n	800bc70 <xTaskCreateStatic+0x30>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	b672      	cpsid	i
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	b662      	cpsie	i
 800bc68:	623b      	str	r3, [r7, #32]
}
 800bc6a:	bf00      	nop
 800bc6c:	bf00      	nop
 800bc6e:	e7fd      	b.n	800bc6c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10d      	bne.n	800bc92 <xTaskCreateStatic+0x52>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	b672      	cpsid	i
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	b662      	cpsie	i
 800bc8a:	61fb      	str	r3, [r7, #28]
}
 800bc8c:	bf00      	nop
 800bc8e:	bf00      	nop
 800bc90:	e7fd      	b.n	800bc8e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc92:	23a0      	movs	r3, #160	@ 0xa0
 800bc94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2ba0      	cmp	r3, #160	@ 0xa0
 800bc9a:	d00d      	beq.n	800bcb8 <xTaskCreateStatic+0x78>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca0:	b672      	cpsid	i
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	b662      	cpsie	i
 800bcb0:	61bb      	str	r3, [r7, #24]
}
 800bcb2:	bf00      	nop
 800bcb4:	bf00      	nop
 800bcb6:	e7fd      	b.n	800bcb4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01e      	beq.n	800bcfe <xTaskCreateStatic+0xbe>
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d01b      	beq.n	800bcfe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcd8:	2300      	movs	r3, #0
 800bcda:	9303      	str	r3, [sp, #12]
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	9302      	str	r3, [sp, #8]
 800bce0:	f107 0314 	add.w	r3, r7, #20
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 f851 	bl	800bd98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcf8:	f000 f8f0 	bl	800bedc <prvAddNewTaskToReadyList>
 800bcfc:	e001      	b.n	800bd02 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd02:	697b      	ldr	r3, [r7, #20]
	}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3728      	adds	r7, #40	@ 0x28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08c      	sub	sp, #48	@ 0x30
 800bd10:	af04      	add	r7, sp, #16
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f001 fa19 	bl	800d158 <pvPortMalloc>
 800bd26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00e      	beq.n	800bd4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd2e:	20a0      	movs	r0, #160	@ 0xa0
 800bd30:	f001 fa12 	bl	800d158 <pvPortMalloc>
 800bd34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd42:	e005      	b.n	800bd50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd44:	6978      	ldr	r0, [r7, #20]
 800bd46:	f001 fad5 	bl	800d2f4 <vPortFree>
 800bd4a:	e001      	b.n	800bd50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d017      	beq.n	800bd86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd5e:	88fa      	ldrh	r2, [r7, #6]
 800bd60:	2300      	movs	r3, #0
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f000 f80f 	bl	800bd98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd7a:	69f8      	ldr	r0, [r7, #28]
 800bd7c:	f000 f8ae 	bl	800bedc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd80:	2301      	movs	r3, #1
 800bd82:	61bb      	str	r3, [r7, #24]
 800bd84:	e002      	b.n	800bd8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd86:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd8c:	69bb      	ldr	r3, [r7, #24]
	}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bdb0:	440b      	add	r3, r1
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	f023 0307 	bic.w	r3, r3, #7
 800bdbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdce:	b672      	cpsid	i
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	b662      	cpsie	i
 800bdde:	617b      	str	r3, [r7, #20]
}
 800bde0:	bf00      	nop
 800bde2:	bf00      	nop
 800bde4:	e7fd      	b.n	800bde2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d01f      	beq.n	800be2c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdec:	2300      	movs	r3, #0
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	e012      	b.n	800be18 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	7819      	ldrb	r1, [r3, #0]
 800bdfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	4413      	add	r3, r2
 800be00:	3334      	adds	r3, #52	@ 0x34
 800be02:	460a      	mov	r2, r1
 800be04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	4413      	add	r3, r2
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d006      	beq.n	800be20 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	3301      	adds	r3, #1
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b0f      	cmp	r3, #15
 800be1c:	d9e9      	bls.n	800bdf2 <prvInitialiseNewTask+0x5a>
 800be1e:	e000      	b.n	800be22 <prvInitialiseNewTask+0x8a>
			{
				break;
 800be20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be2a:	e003      	b.n	800be34 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be36:	2b06      	cmp	r3, #6
 800be38:	d901      	bls.n	800be3e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be3a:	2306      	movs	r3, #6
 800be3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	2200      	movs	r2, #0
 800be4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be52:	3304      	adds	r3, #4
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe fec3 	bl	800abe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	3318      	adds	r3, #24
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fe febe 	bl	800abe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6c:	f1c3 0207 	rsb	r2, r3, #7
 800be70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	2200      	movs	r2, #0
 800be7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be84:	2200      	movs	r2, #0
 800be86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	334c      	adds	r3, #76	@ 0x4c
 800be8e:	224c      	movs	r2, #76	@ 0x4c
 800be90:	2100      	movs	r1, #0
 800be92:	4618      	mov	r0, r3
 800be94:	f001 fe32 	bl	800dafc <memset>
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	4a0d      	ldr	r2, [pc, #52]	@ (800bed0 <prvInitialiseNewTask+0x138>)
 800be9c:	651a      	str	r2, [r3, #80]	@ 0x50
 800be9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea0:	4a0c      	ldr	r2, [pc, #48]	@ (800bed4 <prvInitialiseNewTask+0x13c>)
 800bea2:	655a      	str	r2, [r3, #84]	@ 0x54
 800bea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea6:	4a0c      	ldr	r2, [pc, #48]	@ (800bed8 <prvInitialiseNewTask+0x140>)
 800bea8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	68f9      	ldr	r1, [r7, #12]
 800beae:	69b8      	ldr	r0, [r7, #24]
 800beb0:	f000 ff18 	bl	800cce4 <pxPortInitialiseStack>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800beba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bec6:	bf00      	nop
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20006504 	.word	0x20006504
 800bed4:	2000656c 	.word	0x2000656c
 800bed8:	200065d4 	.word	0x200065d4

0800bedc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bee4:	f001 f80a 	bl	800cefc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bee8:	4b2a      	ldr	r3, [pc, #168]	@ (800bf94 <prvAddNewTaskToReadyList+0xb8>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3301      	adds	r3, #1
 800beee:	4a29      	ldr	r2, [pc, #164]	@ (800bf94 <prvAddNewTaskToReadyList+0xb8>)
 800bef0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bef2:	4b29      	ldr	r3, [pc, #164]	@ (800bf98 <prvAddNewTaskToReadyList+0xbc>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d109      	bne.n	800bf0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800befa:	4a27      	ldr	r2, [pc, #156]	@ (800bf98 <prvAddNewTaskToReadyList+0xbc>)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf00:	4b24      	ldr	r3, [pc, #144]	@ (800bf94 <prvAddNewTaskToReadyList+0xb8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d110      	bne.n	800bf2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf08:	f000 fbe2 	bl	800c6d0 <prvInitialiseTaskLists>
 800bf0c:	e00d      	b.n	800bf2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf0e:	4b23      	ldr	r3, [pc, #140]	@ (800bf9c <prvAddNewTaskToReadyList+0xc0>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d109      	bne.n	800bf2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf16:	4b20      	ldr	r3, [pc, #128]	@ (800bf98 <prvAddNewTaskToReadyList+0xbc>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d802      	bhi.n	800bf2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf24:	4a1c      	ldr	r2, [pc, #112]	@ (800bf98 <prvAddNewTaskToReadyList+0xbc>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bfa0 <prvAddNewTaskToReadyList+0xc4>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	4a1b      	ldr	r2, [pc, #108]	@ (800bfa0 <prvAddNewTaskToReadyList+0xc4>)
 800bf32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf38:	2201      	movs	r2, #1
 800bf3a:	409a      	lsls	r2, r3
 800bf3c:	4b19      	ldr	r3, [pc, #100]	@ (800bfa4 <prvAddNewTaskToReadyList+0xc8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	4a18      	ldr	r2, [pc, #96]	@ (800bfa4 <prvAddNewTaskToReadyList+0xc8>)
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4a15      	ldr	r2, [pc, #84]	@ (800bfa8 <prvAddNewTaskToReadyList+0xcc>)
 800bf54:	441a      	add	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	f7fe fe4c 	bl	800abfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf62:	f001 f801 	bl	800cf68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf66:	4b0d      	ldr	r3, [pc, #52]	@ (800bf9c <prvAddNewTaskToReadyList+0xc0>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00e      	beq.n	800bf8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <prvAddNewTaskToReadyList+0xbc>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d207      	bcs.n	800bf8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bfac <prvAddNewTaskToReadyList+0xd0>)
 800bf7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	200028b0 	.word	0x200028b0
 800bf98:	200027b0 	.word	0x200027b0
 800bf9c:	200028bc 	.word	0x200028bc
 800bfa0:	200028cc 	.word	0x200028cc
 800bfa4:	200028b8 	.word	0x200028b8
 800bfa8:	200027b4 	.word	0x200027b4
 800bfac:	e000ed04 	.word	0xe000ed04

0800bfb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	@ 0x28
 800bfb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bfbe:	463a      	mov	r2, r7
 800bfc0:	1d39      	adds	r1, r7, #4
 800bfc2:	f107 0308 	add.w	r3, r7, #8
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7f5 f820 	bl	800100c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	9202      	str	r2, [sp, #8]
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	460a      	mov	r2, r1
 800bfde:	4923      	ldr	r1, [pc, #140]	@ (800c06c <vTaskStartScheduler+0xbc>)
 800bfe0:	4823      	ldr	r0, [pc, #140]	@ (800c070 <vTaskStartScheduler+0xc0>)
 800bfe2:	f7ff fe2d 	bl	800bc40 <xTaskCreateStatic>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4a22      	ldr	r2, [pc, #136]	@ (800c074 <vTaskStartScheduler+0xc4>)
 800bfea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfec:	4b21      	ldr	r3, [pc, #132]	@ (800c074 <vTaskStartScheduler+0xc4>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bff4:	2301      	movs	r3, #1
 800bff6:	617b      	str	r3, [r7, #20]
 800bff8:	e001      	b.n	800bffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d11d      	bne.n	800c040 <vTaskStartScheduler+0x90>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c008:	b672      	cpsid	i
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	b662      	cpsie	i
 800c018:	613b      	str	r3, [r7, #16]
}
 800c01a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c01c:	4b16      	ldr	r3, [pc, #88]	@ (800c078 <vTaskStartScheduler+0xc8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	334c      	adds	r3, #76	@ 0x4c
 800c022:	4a16      	ldr	r2, [pc, #88]	@ (800c07c <vTaskStartScheduler+0xcc>)
 800c024:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c026:	4b16      	ldr	r3, [pc, #88]	@ (800c080 <vTaskStartScheduler+0xd0>)
 800c028:	f04f 32ff 	mov.w	r2, #4294967295
 800c02c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c02e:	4b15      	ldr	r3, [pc, #84]	@ (800c084 <vTaskStartScheduler+0xd4>)
 800c030:	2201      	movs	r2, #1
 800c032:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c034:	4b14      	ldr	r3, [pc, #80]	@ (800c088 <vTaskStartScheduler+0xd8>)
 800c036:	2200      	movs	r2, #0
 800c038:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c03a:	f000 fee1 	bl	800ce00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c03e:	e011      	b.n	800c064 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d10d      	bne.n	800c064 <vTaskStartScheduler+0xb4>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04c:	b672      	cpsid	i
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	b662      	cpsie	i
 800c05c:	60fb      	str	r3, [r7, #12]
}
 800c05e:	bf00      	nop
 800c060:	bf00      	nop
 800c062:	e7fd      	b.n	800c060 <vTaskStartScheduler+0xb0>
}
 800c064:	bf00      	nop
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	0800ef28 	.word	0x0800ef28
 800c070:	0800c6a1 	.word	0x0800c6a1
 800c074:	200028d4 	.word	0x200028d4
 800c078:	200027b0 	.word	0x200027b0
 800c07c:	2000001c 	.word	0x2000001c
 800c080:	200028d0 	.word	0x200028d0
 800c084:	200028bc 	.word	0x200028bc
 800c088:	200028b4 	.word	0x200028b4

0800c08c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c090:	4b04      	ldr	r3, [pc, #16]	@ (800c0a4 <vTaskSuspendAll+0x18>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3301      	adds	r3, #1
 800c096:	4a03      	ldr	r2, [pc, #12]	@ (800c0a4 <vTaskSuspendAll+0x18>)
 800c098:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c09a:	bf00      	nop
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	200028d8 	.word	0x200028d8

0800c0a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0b6:	4b43      	ldr	r3, [pc, #268]	@ (800c1c4 <xTaskResumeAll+0x11c>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10d      	bne.n	800c0da <xTaskResumeAll+0x32>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c2:	b672      	cpsid	i
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	b662      	cpsie	i
 800c0d2:	603b      	str	r3, [r7, #0]
}
 800c0d4:	bf00      	nop
 800c0d6:	bf00      	nop
 800c0d8:	e7fd      	b.n	800c0d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0da:	f000 ff0f 	bl	800cefc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0de:	4b39      	ldr	r3, [pc, #228]	@ (800c1c4 <xTaskResumeAll+0x11c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	4a37      	ldr	r2, [pc, #220]	@ (800c1c4 <xTaskResumeAll+0x11c>)
 800c0e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e8:	4b36      	ldr	r3, [pc, #216]	@ (800c1c4 <xTaskResumeAll+0x11c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d161      	bne.n	800c1b4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0f0:	4b35      	ldr	r3, [pc, #212]	@ (800c1c8 <xTaskResumeAll+0x120>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d05d      	beq.n	800c1b4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0f8:	e02e      	b.n	800c158 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0fa:	4b34      	ldr	r3, [pc, #208]	@ (800c1cc <xTaskResumeAll+0x124>)
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3318      	adds	r3, #24
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fdd4 	bl	800acb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3304      	adds	r3, #4
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fdcf 	bl	800acb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11a:	2201      	movs	r2, #1
 800c11c:	409a      	lsls	r2, r3
 800c11e:	4b2c      	ldr	r3, [pc, #176]	@ (800c1d0 <xTaskResumeAll+0x128>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4313      	orrs	r3, r2
 800c124:	4a2a      	ldr	r2, [pc, #168]	@ (800c1d0 <xTaskResumeAll+0x128>)
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4a27      	ldr	r2, [pc, #156]	@ (800c1d4 <xTaskResumeAll+0x12c>)
 800c136:	441a      	add	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3304      	adds	r3, #4
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fe fd5b 	bl	800abfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c148:	4b23      	ldr	r3, [pc, #140]	@ (800c1d8 <xTaskResumeAll+0x130>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c14e:	429a      	cmp	r2, r3
 800c150:	d302      	bcc.n	800c158 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c152:	4b22      	ldr	r3, [pc, #136]	@ (800c1dc <xTaskResumeAll+0x134>)
 800c154:	2201      	movs	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c158:	4b1c      	ldr	r3, [pc, #112]	@ (800c1cc <xTaskResumeAll+0x124>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1cc      	bne.n	800c0fa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c166:	f000 fb59 	bl	800c81c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c16a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1e0 <xTaskResumeAll+0x138>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d010      	beq.n	800c198 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c176:	f000 f859 	bl	800c22c <xTaskIncrementTick>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c180:	4b16      	ldr	r3, [pc, #88]	@ (800c1dc <xTaskResumeAll+0x134>)
 800c182:	2201      	movs	r2, #1
 800c184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3b01      	subs	r3, #1
 800c18a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1f1      	bne.n	800c176 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c192:	4b13      	ldr	r3, [pc, #76]	@ (800c1e0 <xTaskResumeAll+0x138>)
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c198:	4b10      	ldr	r3, [pc, #64]	@ (800c1dc <xTaskResumeAll+0x134>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d009      	beq.n	800c1b4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e4 <xTaskResumeAll+0x13c>)
 800c1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1b4:	f000 fed8 	bl	800cf68 <vPortExitCritical>

	return xAlreadyYielded;
 800c1b8:	68bb      	ldr	r3, [r7, #8]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	200028d8 	.word	0x200028d8
 800c1c8:	200028b0 	.word	0x200028b0
 800c1cc:	20002870 	.word	0x20002870
 800c1d0:	200028b8 	.word	0x200028b8
 800c1d4:	200027b4 	.word	0x200027b4
 800c1d8:	200027b0 	.word	0x200027b0
 800c1dc:	200028c4 	.word	0x200028c4
 800c1e0:	200028c0 	.word	0x200028c0
 800c1e4:	e000ed04 	.word	0xe000ed04

0800c1e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1ee:	4b05      	ldr	r3, [pc, #20]	@ (800c204 <xTaskGetTickCount+0x1c>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1f4:	687b      	ldr	r3, [r7, #4]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	200028b4 	.word	0x200028b4

0800c208 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c20e:	f000 ff5d 	bl	800d0cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c212:	2300      	movs	r3, #0
 800c214:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c216:	4b04      	ldr	r3, [pc, #16]	@ (800c228 <xTaskGetTickCountFromISR+0x20>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c21c:	683b      	ldr	r3, [r7, #0]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200028b4 	.word	0x200028b4

0800c22c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c232:	2300      	movs	r3, #0
 800c234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c236:	4b50      	ldr	r3, [pc, #320]	@ (800c378 <xTaskIncrementTick+0x14c>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 808b 	bne.w	800c356 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c240:	4b4e      	ldr	r3, [pc, #312]	@ (800c37c <xTaskIncrementTick+0x150>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3301      	adds	r3, #1
 800c246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c248:	4a4c      	ldr	r2, [pc, #304]	@ (800c37c <xTaskIncrementTick+0x150>)
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d123      	bne.n	800c29c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c254:	4b4a      	ldr	r3, [pc, #296]	@ (800c380 <xTaskIncrementTick+0x154>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00d      	beq.n	800c27a <xTaskIncrementTick+0x4e>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	b672      	cpsid	i
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	b662      	cpsie	i
 800c272:	603b      	str	r3, [r7, #0]
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	e7fd      	b.n	800c276 <xTaskIncrementTick+0x4a>
 800c27a:	4b41      	ldr	r3, [pc, #260]	@ (800c380 <xTaskIncrementTick+0x154>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	4b40      	ldr	r3, [pc, #256]	@ (800c384 <xTaskIncrementTick+0x158>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a3e      	ldr	r2, [pc, #248]	@ (800c380 <xTaskIncrementTick+0x154>)
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	4a3e      	ldr	r2, [pc, #248]	@ (800c384 <xTaskIncrementTick+0x158>)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	4b3e      	ldr	r3, [pc, #248]	@ (800c388 <xTaskIncrementTick+0x15c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	4a3c      	ldr	r2, [pc, #240]	@ (800c388 <xTaskIncrementTick+0x15c>)
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	f000 fac0 	bl	800c81c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c29c:	4b3b      	ldr	r3, [pc, #236]	@ (800c38c <xTaskIncrementTick+0x160>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d348      	bcc.n	800c338 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2a6:	4b36      	ldr	r3, [pc, #216]	@ (800c380 <xTaskIncrementTick+0x154>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d104      	bne.n	800c2ba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b0:	4b36      	ldr	r3, [pc, #216]	@ (800c38c <xTaskIncrementTick+0x160>)
 800c2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b6:	601a      	str	r2, [r3, #0]
					break;
 800c2b8:	e03e      	b.n	800c338 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ba:	4b31      	ldr	r3, [pc, #196]	@ (800c380 <xTaskIncrementTick+0x154>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d203      	bcs.n	800c2da <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2d2:	4a2e      	ldr	r2, [pc, #184]	@ (800c38c <xTaskIncrementTick+0x160>)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2d8:	e02e      	b.n	800c338 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fce8 	bl	800acb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	3318      	adds	r3, #24
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe fcdf 	bl	800acb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	409a      	lsls	r2, r3
 800c2fe:	4b24      	ldr	r3, [pc, #144]	@ (800c390 <xTaskIncrementTick+0x164>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4313      	orrs	r3, r2
 800c304:	4a22      	ldr	r2, [pc, #136]	@ (800c390 <xTaskIncrementTick+0x164>)
 800c306:	6013      	str	r3, [r2, #0]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30c:	4613      	mov	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4413      	add	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4a1f      	ldr	r2, [pc, #124]	@ (800c394 <xTaskIncrementTick+0x168>)
 800c316:	441a      	add	r2, r3
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	3304      	adds	r3, #4
 800c31c:	4619      	mov	r1, r3
 800c31e:	4610      	mov	r0, r2
 800c320:	f7fe fc6b 	bl	800abfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c328:	4b1b      	ldr	r3, [pc, #108]	@ (800c398 <xTaskIncrementTick+0x16c>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32e:	429a      	cmp	r2, r3
 800c330:	d3b9      	bcc.n	800c2a6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c332:	2301      	movs	r3, #1
 800c334:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c336:	e7b6      	b.n	800c2a6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c338:	4b17      	ldr	r3, [pc, #92]	@ (800c398 <xTaskIncrementTick+0x16c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c33e:	4915      	ldr	r1, [pc, #84]	@ (800c394 <xTaskIncrementTick+0x168>)
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	440b      	add	r3, r1
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d907      	bls.n	800c360 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c350:	2301      	movs	r3, #1
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	e004      	b.n	800c360 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c356:	4b11      	ldr	r3, [pc, #68]	@ (800c39c <xTaskIncrementTick+0x170>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3301      	adds	r3, #1
 800c35c:	4a0f      	ldr	r2, [pc, #60]	@ (800c39c <xTaskIncrementTick+0x170>)
 800c35e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c360:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a0 <xTaskIncrementTick+0x174>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c368:	2301      	movs	r3, #1
 800c36a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c36c:	697b      	ldr	r3, [r7, #20]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	200028d8 	.word	0x200028d8
 800c37c:	200028b4 	.word	0x200028b4
 800c380:	20002868 	.word	0x20002868
 800c384:	2000286c 	.word	0x2000286c
 800c388:	200028c8 	.word	0x200028c8
 800c38c:	200028d0 	.word	0x200028d0
 800c390:	200028b8 	.word	0x200028b8
 800c394:	200027b4 	.word	0x200027b4
 800c398:	200027b0 	.word	0x200027b0
 800c39c:	200028c0 	.word	0x200028c0
 800c3a0:	200028c4 	.word	0x200028c4

0800c3a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c458 <vTaskSwitchContext+0xb4>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c45c <vTaskSwitchContext+0xb8>)
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3b8:	e047      	b.n	800c44a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c3ba:	4b28      	ldr	r3, [pc, #160]	@ (800c45c <vTaskSwitchContext+0xb8>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c0:	4b27      	ldr	r3, [pc, #156]	@ (800c460 <vTaskSwitchContext+0xbc>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	fab3 f383 	clz	r3, r3
 800c3cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c3ce:	7afb      	ldrb	r3, [r7, #11]
 800c3d0:	f1c3 031f 	rsb	r3, r3, #31
 800c3d4:	617b      	str	r3, [r7, #20]
 800c3d6:	4923      	ldr	r1, [pc, #140]	@ (800c464 <vTaskSwitchContext+0xc0>)
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10d      	bne.n	800c406 <vTaskSwitchContext+0x62>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ee:	b672      	cpsid	i
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	b662      	cpsie	i
 800c3fe:	607b      	str	r3, [r7, #4]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <vTaskSwitchContext+0x5e>
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	4613      	mov	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4a14      	ldr	r2, [pc, #80]	@ (800c464 <vTaskSwitchContext+0xc0>)
 800c412:	4413      	add	r3, r2
 800c414:	613b      	str	r3, [r7, #16]
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	605a      	str	r2, [r3, #4]
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	3308      	adds	r3, #8
 800c428:	429a      	cmp	r2, r3
 800c42a:	d104      	bne.n	800c436 <vTaskSwitchContext+0x92>
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	605a      	str	r2, [r3, #4]
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	4a0a      	ldr	r2, [pc, #40]	@ (800c468 <vTaskSwitchContext+0xc4>)
 800c43e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c440:	4b09      	ldr	r3, [pc, #36]	@ (800c468 <vTaskSwitchContext+0xc4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	334c      	adds	r3, #76	@ 0x4c
 800c446:	4a09      	ldr	r2, [pc, #36]	@ (800c46c <vTaskSwitchContext+0xc8>)
 800c448:	6013      	str	r3, [r2, #0]
}
 800c44a:	bf00      	nop
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	200028d8 	.word	0x200028d8
 800c45c:	200028c4 	.word	0x200028c4
 800c460:	200028b8 	.word	0x200028b8
 800c464:	200027b4 	.word	0x200027b4
 800c468:	200027b0 	.word	0x200027b0
 800c46c:	2000001c 	.word	0x2000001c

0800c470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10d      	bne.n	800c49c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	b672      	cpsid	i
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	b662      	cpsie	i
 800c494:	60fb      	str	r3, [r7, #12]
}
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	e7fd      	b.n	800c498 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c49c:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <vTaskPlaceOnEventList+0x4c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3318      	adds	r3, #24
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7fe fbcc 	bl	800ac42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	6838      	ldr	r0, [r7, #0]
 800c4ae:	f000 fbb3 	bl	800cc18 <prvAddCurrentTaskToDelayedList>
}
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200027b0 	.word	0x200027b0

0800c4c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10d      	bne.n	800c4f2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4da:	b672      	cpsid	i
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	b662      	cpsie	i
 800c4ea:	60fb      	str	r3, [r7, #12]
}
 800c4ec:	bf00      	nop
 800c4ee:	bf00      	nop
 800c4f0:	e7fd      	b.n	800c4ee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	3318      	adds	r3, #24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe fbdc 	bl	800acb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c574 <xTaskRemoveFromEventList+0xb4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d11c      	bne.n	800c53e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	3304      	adds	r3, #4
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fe fbd3 	bl	800acb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c512:	2201      	movs	r2, #1
 800c514:	409a      	lsls	r2, r3
 800c516:	4b18      	ldr	r3, [pc, #96]	@ (800c578 <xTaskRemoveFromEventList+0xb8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	4a16      	ldr	r2, [pc, #88]	@ (800c578 <xTaskRemoveFromEventList+0xb8>)
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4a13      	ldr	r2, [pc, #76]	@ (800c57c <xTaskRemoveFromEventList+0xbc>)
 800c52e:	441a      	add	r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	3304      	adds	r3, #4
 800c534:	4619      	mov	r1, r3
 800c536:	4610      	mov	r0, r2
 800c538:	f7fe fb5f 	bl	800abfa <vListInsertEnd>
 800c53c:	e005      	b.n	800c54a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	3318      	adds	r3, #24
 800c542:	4619      	mov	r1, r3
 800c544:	480e      	ldr	r0, [pc, #56]	@ (800c580 <xTaskRemoveFromEventList+0xc0>)
 800c546:	f7fe fb58 	bl	800abfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c54e:	4b0d      	ldr	r3, [pc, #52]	@ (800c584 <xTaskRemoveFromEventList+0xc4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c554:	429a      	cmp	r2, r3
 800c556:	d905      	bls.n	800c564 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c558:	2301      	movs	r3, #1
 800c55a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	@ (800c588 <xTaskRemoveFromEventList+0xc8>)
 800c55e:	2201      	movs	r2, #1
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	e001      	b.n	800c568 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c564:	2300      	movs	r3, #0
 800c566:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c568:	697b      	ldr	r3, [r7, #20]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	200028d8 	.word	0x200028d8
 800c578:	200028b8 	.word	0x200028b8
 800c57c:	200027b4 	.word	0x200027b4
 800c580:	20002870 	.word	0x20002870
 800c584:	200027b0 	.word	0x200027b0
 800c588:	200028c4 	.word	0x200028c4

0800c58c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <vTaskInternalSetTimeOutState+0x24>)
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c59c:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <vTaskInternalSetTimeOutState+0x28>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	605a      	str	r2, [r3, #4]
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	200028c8 	.word	0x200028c8
 800c5b4:	200028b4 	.word	0x200028b4

0800c5b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b088      	sub	sp, #32
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10d      	bne.n	800c5e4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5cc:	b672      	cpsid	i
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	b662      	cpsie	i
 800c5dc:	613b      	str	r3, [r7, #16]
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	e7fd      	b.n	800c5e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10d      	bne.n	800c606 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ee:	b672      	cpsid	i
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	b662      	cpsie	i
 800c5fe:	60fb      	str	r3, [r7, #12]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c606:	f000 fc79 	bl	800cefc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c60a:	4b1d      	ldr	r3, [pc, #116]	@ (800c680 <xTaskCheckForTimeOut+0xc8>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c622:	d102      	bne.n	800c62a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c624:	2300      	movs	r3, #0
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	e023      	b.n	800c672 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	4b15      	ldr	r3, [pc, #84]	@ (800c684 <xTaskCheckForTimeOut+0xcc>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	429a      	cmp	r2, r3
 800c634:	d007      	beq.n	800c646 <xTaskCheckForTimeOut+0x8e>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d302      	bcc.n	800c646 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c640:	2301      	movs	r3, #1
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	e015      	b.n	800c672 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d20b      	bcs.n	800c668 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	1ad2      	subs	r2, r2, r3
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff ff95 	bl	800c58c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	e004      	b.n	800c672 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c66e:	2301      	movs	r3, #1
 800c670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c672:	f000 fc79 	bl	800cf68 <vPortExitCritical>

	return xReturn;
 800c676:	69fb      	ldr	r3, [r7, #28]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	200028b4 	.word	0x200028b4
 800c684:	200028c8 	.word	0x200028c8

0800c688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c688:	b480      	push	{r7}
 800c68a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c68c:	4b03      	ldr	r3, [pc, #12]	@ (800c69c <vTaskMissedYield+0x14>)
 800c68e:	2201      	movs	r2, #1
 800c690:	601a      	str	r2, [r3, #0]
}
 800c692:	bf00      	nop
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	200028c4 	.word	0x200028c4

0800c6a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6a8:	f000 f852 	bl	800c750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6ac:	4b06      	ldr	r3, [pc, #24]	@ (800c6c8 <prvIdleTask+0x28>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d9f9      	bls.n	800c6a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6b4:	4b05      	ldr	r3, [pc, #20]	@ (800c6cc <prvIdleTask+0x2c>)
 800c6b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ba:	601a      	str	r2, [r3, #0]
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6c4:	e7f0      	b.n	800c6a8 <prvIdleTask+0x8>
 800c6c6:	bf00      	nop
 800c6c8:	200027b4 	.word	0x200027b4
 800c6cc:	e000ed04 	.word	0xe000ed04

0800c6d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	607b      	str	r3, [r7, #4]
 800c6da:	e00c      	b.n	800c6f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4a12      	ldr	r2, [pc, #72]	@ (800c730 <prvInitialiseTaskLists+0x60>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fe fa58 	bl	800aba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	607b      	str	r3, [r7, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b06      	cmp	r3, #6
 800c6fa:	d9ef      	bls.n	800c6dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6fc:	480d      	ldr	r0, [pc, #52]	@ (800c734 <prvInitialiseTaskLists+0x64>)
 800c6fe:	f7fe fa4f 	bl	800aba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c702:	480d      	ldr	r0, [pc, #52]	@ (800c738 <prvInitialiseTaskLists+0x68>)
 800c704:	f7fe fa4c 	bl	800aba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c708:	480c      	ldr	r0, [pc, #48]	@ (800c73c <prvInitialiseTaskLists+0x6c>)
 800c70a:	f7fe fa49 	bl	800aba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c70e:	480c      	ldr	r0, [pc, #48]	@ (800c740 <prvInitialiseTaskLists+0x70>)
 800c710:	f7fe fa46 	bl	800aba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c714:	480b      	ldr	r0, [pc, #44]	@ (800c744 <prvInitialiseTaskLists+0x74>)
 800c716:	f7fe fa43 	bl	800aba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c71a:	4b0b      	ldr	r3, [pc, #44]	@ (800c748 <prvInitialiseTaskLists+0x78>)
 800c71c:	4a05      	ldr	r2, [pc, #20]	@ (800c734 <prvInitialiseTaskLists+0x64>)
 800c71e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c720:	4b0a      	ldr	r3, [pc, #40]	@ (800c74c <prvInitialiseTaskLists+0x7c>)
 800c722:	4a05      	ldr	r2, [pc, #20]	@ (800c738 <prvInitialiseTaskLists+0x68>)
 800c724:	601a      	str	r2, [r3, #0]
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	200027b4 	.word	0x200027b4
 800c734:	20002840 	.word	0x20002840
 800c738:	20002854 	.word	0x20002854
 800c73c:	20002870 	.word	0x20002870
 800c740:	20002884 	.word	0x20002884
 800c744:	2000289c 	.word	0x2000289c
 800c748:	20002868 	.word	0x20002868
 800c74c:	2000286c 	.word	0x2000286c

0800c750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c756:	e019      	b.n	800c78c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c758:	f000 fbd0 	bl	800cefc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c75c:	4b10      	ldr	r3, [pc, #64]	@ (800c7a0 <prvCheckTasksWaitingTermination+0x50>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3304      	adds	r3, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe faa3 	bl	800acb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c76e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a4 <prvCheckTasksWaitingTermination+0x54>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3b01      	subs	r3, #1
 800c774:	4a0b      	ldr	r2, [pc, #44]	@ (800c7a4 <prvCheckTasksWaitingTermination+0x54>)
 800c776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c778:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a8 <prvCheckTasksWaitingTermination+0x58>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	4a0a      	ldr	r2, [pc, #40]	@ (800c7a8 <prvCheckTasksWaitingTermination+0x58>)
 800c780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c782:	f000 fbf1 	bl	800cf68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f810 	bl	800c7ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c78c:	4b06      	ldr	r3, [pc, #24]	@ (800c7a8 <prvCheckTasksWaitingTermination+0x58>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e1      	bne.n	800c758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20002884 	.word	0x20002884
 800c7a4:	200028b0 	.word	0x200028b0
 800c7a8:	20002898 	.word	0x20002898

0800c7ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	334c      	adds	r3, #76	@ 0x4c
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f001 f9c7 	bl	800db4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d108      	bne.n	800c7da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fd91 	bl	800d2f4 <vPortFree>
				vPortFree( pxTCB );
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fd8e 	bl	800d2f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7d8:	e01b      	b.n	800c812 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d103      	bne.n	800c7ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fd85 	bl	800d2f4 <vPortFree>
	}
 800c7ea:	e012      	b.n	800c812 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d00d      	beq.n	800c812 <prvDeleteTCB+0x66>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fa:	b672      	cpsid	i
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	b662      	cpsie	i
 800c80a:	60fb      	str	r3, [r7, #12]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <prvDeleteTCB+0x62>
	}
 800c812:	bf00      	nop
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c822:	4b0c      	ldr	r3, [pc, #48]	@ (800c854 <prvResetNextTaskUnblockTime+0x38>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <prvResetNextTaskUnblockTime+0x3c>)
 800c82e:	f04f 32ff 	mov.w	r2, #4294967295
 800c832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c834:	e008      	b.n	800c848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c836:	4b07      	ldr	r3, [pc, #28]	@ (800c854 <prvResetNextTaskUnblockTime+0x38>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4a04      	ldr	r2, [pc, #16]	@ (800c858 <prvResetNextTaskUnblockTime+0x3c>)
 800c846:	6013      	str	r3, [r2, #0]
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	20002868 	.word	0x20002868
 800c858:	200028d0 	.word	0x200028d0

0800c85c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c862:	4b0b      	ldr	r3, [pc, #44]	@ (800c890 <xTaskGetSchedulerState+0x34>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d102      	bne.n	800c870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c86a:	2301      	movs	r3, #1
 800c86c:	607b      	str	r3, [r7, #4]
 800c86e:	e008      	b.n	800c882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c870:	4b08      	ldr	r3, [pc, #32]	@ (800c894 <xTaskGetSchedulerState+0x38>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c878:	2302      	movs	r3, #2
 800c87a:	607b      	str	r3, [r7, #4]
 800c87c:	e001      	b.n	800c882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c87e:	2300      	movs	r3, #0
 800c880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c882:	687b      	ldr	r3, [r7, #4]
	}
 800c884:	4618      	mov	r0, r3
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	200028bc 	.word	0x200028bc
 800c894:	200028d8 	.word	0x200028d8

0800c898 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d069      	beq.n	800c982 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b2:	4b36      	ldr	r3, [pc, #216]	@ (800c98c <xTaskPriorityInherit+0xf4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d259      	bcs.n	800c970 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	db06      	blt.n	800c8d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8c4:	4b31      	ldr	r3, [pc, #196]	@ (800c98c <xTaskPriorityInherit+0xf4>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ca:	f1c3 0207 	rsb	r2, r3, #7
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6959      	ldr	r1, [r3, #20]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8da:	4613      	mov	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4a2b      	ldr	r2, [pc, #172]	@ (800c990 <xTaskPriorityInherit+0xf8>)
 800c8e4:	4413      	add	r3, r2
 800c8e6:	4299      	cmp	r1, r3
 800c8e8:	d13a      	bne.n	800c960 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	3304      	adds	r3, #4
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fe f9e0 	bl	800acb4 <uxListRemove>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d115      	bne.n	800c926 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8fe:	4924      	ldr	r1, [pc, #144]	@ (800c990 <xTaskPriorityInherit+0xf8>)
 800c900:	4613      	mov	r3, r2
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	440b      	add	r3, r1
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10a      	bne.n	800c926 <xTaskPriorityInherit+0x8e>
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c914:	2201      	movs	r2, #1
 800c916:	fa02 f303 	lsl.w	r3, r2, r3
 800c91a:	43da      	mvns	r2, r3
 800c91c:	4b1d      	ldr	r3, [pc, #116]	@ (800c994 <xTaskPriorityInherit+0xfc>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4013      	ands	r3, r2
 800c922:	4a1c      	ldr	r2, [pc, #112]	@ (800c994 <xTaskPriorityInherit+0xfc>)
 800c924:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c926:	4b19      	ldr	r3, [pc, #100]	@ (800c98c <xTaskPriorityInherit+0xf4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c934:	2201      	movs	r2, #1
 800c936:	409a      	lsls	r2, r3
 800c938:	4b16      	ldr	r3, [pc, #88]	@ (800c994 <xTaskPriorityInherit+0xfc>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	4a15      	ldr	r2, [pc, #84]	@ (800c994 <xTaskPriorityInherit+0xfc>)
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c946:	4613      	mov	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4413      	add	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4a10      	ldr	r2, [pc, #64]	@ (800c990 <xTaskPriorityInherit+0xf8>)
 800c950:	441a      	add	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3304      	adds	r3, #4
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f7fe f94e 	bl	800abfa <vListInsertEnd>
 800c95e:	e004      	b.n	800c96a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c960:	4b0a      	ldr	r3, [pc, #40]	@ (800c98c <xTaskPriorityInherit+0xf4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c96a:	2301      	movs	r3, #1
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e008      	b.n	800c982 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c974:	4b05      	ldr	r3, [pc, #20]	@ (800c98c <xTaskPriorityInherit+0xf4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d201      	bcs.n	800c982 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c97e:	2301      	movs	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c982:	68fb      	ldr	r3, [r7, #12]
	}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	200027b0 	.word	0x200027b0
 800c990:	200027b4 	.word	0x200027b4
 800c994:	200028b8 	.word	0x200028b8

0800c998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d074      	beq.n	800ca98 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c9ae:	4b3d      	ldr	r3, [pc, #244]	@ (800caa4 <xTaskPriorityDisinherit+0x10c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d00d      	beq.n	800c9d4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9bc:	b672      	cpsid	i
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	b662      	cpsie	i
 800c9cc:	60fb      	str	r3, [r7, #12]
}
 800c9ce:	bf00      	nop
 800c9d0:	bf00      	nop
 800c9d2:	e7fd      	b.n	800c9d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10d      	bne.n	800c9f8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e0:	b672      	cpsid	i
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	b662      	cpsie	i
 800c9f0:	60bb      	str	r3, [r7, #8]
}
 800c9f2:	bf00      	nop
 800c9f4:	bf00      	nop
 800c9f6:	e7fd      	b.n	800c9f4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9fc:	1e5a      	subs	r2, r3, #1
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d044      	beq.n	800ca98 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d140      	bne.n	800ca98 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe f94a 	bl	800acb4 <uxListRemove>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d115      	bne.n	800ca52 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca2a:	491f      	ldr	r1, [pc, #124]	@ (800caa8 <xTaskPriorityDisinherit+0x110>)
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	440b      	add	r3, r1
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10a      	bne.n	800ca52 <xTaskPriorityDisinherit+0xba>
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca40:	2201      	movs	r2, #1
 800ca42:	fa02 f303 	lsl.w	r3, r2, r3
 800ca46:	43da      	mvns	r2, r3
 800ca48:	4b18      	ldr	r3, [pc, #96]	@ (800caac <xTaskPriorityDisinherit+0x114>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	4a17      	ldr	r2, [pc, #92]	@ (800caac <xTaskPriorityDisinherit+0x114>)
 800ca50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5e:	f1c3 0207 	rsb	r2, r3, #7
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	409a      	lsls	r2, r3
 800ca6e:	4b0f      	ldr	r3, [pc, #60]	@ (800caac <xTaskPriorityDisinherit+0x114>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	4a0d      	ldr	r2, [pc, #52]	@ (800caac <xTaskPriorityDisinherit+0x114>)
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4a08      	ldr	r2, [pc, #32]	@ (800caa8 <xTaskPriorityDisinherit+0x110>)
 800ca86:	441a      	add	r2, r3
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7fe f8b3 	bl	800abfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca94:	2301      	movs	r3, #1
 800ca96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca98:	697b      	ldr	r3, [r7, #20]
	}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	200027b0 	.word	0x200027b0
 800caa8:	200027b4 	.word	0x200027b4
 800caac:	200028b8 	.word	0x200028b8

0800cab0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cabe:	2301      	movs	r3, #1
 800cac0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 8089 	beq.w	800cbdc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10d      	bne.n	800caee <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad6:	b672      	cpsid	i
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	b662      	cpsie	i
 800cae6:	60fb      	str	r3, [r7, #12]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d902      	bls.n	800cafe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	61fb      	str	r3, [r7, #28]
 800cafc:	e002      	b.n	800cb04 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb08:	69fa      	ldr	r2, [r7, #28]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d066      	beq.n	800cbdc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d161      	bne.n	800cbdc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cb18:	4b32      	ldr	r3, [pc, #200]	@ (800cbe4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	69ba      	ldr	r2, [r7, #24]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d10d      	bne.n	800cb3e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800cb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb26:	b672      	cpsid	i
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	b662      	cpsie	i
 800cb36:	60bb      	str	r3, [r7, #8]
}
 800cb38:	bf00      	nop
 800cb3a:	bf00      	nop
 800cb3c:	e7fd      	b.n	800cb3a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb42:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	69fa      	ldr	r2, [r7, #28]
 800cb48:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	db04      	blt.n	800cb5c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	f1c3 0207 	rsb	r2, r3, #7
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	6959      	ldr	r1, [r3, #20]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	4613      	mov	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4a1f      	ldr	r2, [pc, #124]	@ (800cbe8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cb6c:	4413      	add	r3, r2
 800cb6e:	4299      	cmp	r1, r3
 800cb70:	d134      	bne.n	800cbdc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	3304      	adds	r3, #4
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe f89c 	bl	800acb4 <uxListRemove>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d115      	bne.n	800cbae <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb86:	4918      	ldr	r1, [pc, #96]	@ (800cbe8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cb88:	4613      	mov	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	440b      	add	r3, r1
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cba2:	43da      	mvns	r2, r3
 800cba4:	4b11      	ldr	r3, [pc, #68]	@ (800cbec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4013      	ands	r3, r2
 800cbaa:	4a10      	ldr	r2, [pc, #64]	@ (800cbec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cbac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	409a      	lsls	r2, r3
 800cbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cbec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	4a0b      	ldr	r2, [pc, #44]	@ (800cbec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4a06      	ldr	r2, [pc, #24]	@ (800cbe8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cbce:	441a      	add	r2, r3
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7fe f80f 	bl	800abfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbdc:	bf00      	nop
 800cbde:	3720      	adds	r7, #32
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	200027b0 	.word	0x200027b0
 800cbe8:	200027b4 	.word	0x200027b4
 800cbec:	200028b8 	.word	0x200028b8

0800cbf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cbf4:	4b07      	ldr	r3, [pc, #28]	@ (800cc14 <pvTaskIncrementMutexHeldCount+0x24>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d004      	beq.n	800cc06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cbfc:	4b05      	ldr	r3, [pc, #20]	@ (800cc14 <pvTaskIncrementMutexHeldCount+0x24>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc02:	3201      	adds	r2, #1
 800cc04:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800cc06:	4b03      	ldr	r3, [pc, #12]	@ (800cc14 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc08:	681b      	ldr	r3, [r3, #0]
	}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	200027b0 	.word	0x200027b0

0800cc18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc22:	4b29      	ldr	r3, [pc, #164]	@ (800ccc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc28:	4b28      	ldr	r3, [pc, #160]	@ (800cccc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe f840 	bl	800acb4 <uxListRemove>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10b      	bne.n	800cc52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cc3a:	4b24      	ldr	r3, [pc, #144]	@ (800cccc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc40:	2201      	movs	r2, #1
 800cc42:	fa02 f303 	lsl.w	r3, r2, r3
 800cc46:	43da      	mvns	r2, r3
 800cc48:	4b21      	ldr	r3, [pc, #132]	@ (800ccd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	4a20      	ldr	r2, [pc, #128]	@ (800ccd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d10a      	bne.n	800cc70 <prvAddCurrentTaskToDelayedList+0x58>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d007      	beq.n	800cc70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc60:	4b1a      	ldr	r3, [pc, #104]	@ (800cccc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3304      	adds	r3, #4
 800cc66:	4619      	mov	r1, r3
 800cc68:	481a      	ldr	r0, [pc, #104]	@ (800ccd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc6a:	f7fd ffc6 	bl	800abfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc6e:	e026      	b.n	800ccbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4413      	add	r3, r2
 800cc76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc78:	4b14      	ldr	r3, [pc, #80]	@ (800cccc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d209      	bcs.n	800cc9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc88:	4b13      	ldr	r3, [pc, #76]	@ (800ccd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	4b0f      	ldr	r3, [pc, #60]	@ (800cccc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3304      	adds	r3, #4
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f7fd ffd4 	bl	800ac42 <vListInsert>
}
 800cc9a:	e010      	b.n	800ccbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc9c:	4b0f      	ldr	r3, [pc, #60]	@ (800ccdc <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	4b0a      	ldr	r3, [pc, #40]	@ (800cccc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3304      	adds	r3, #4
 800cca6:	4619      	mov	r1, r3
 800cca8:	4610      	mov	r0, r2
 800ccaa:	f7fd ffca 	bl	800ac42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccae:	4b0c      	ldr	r3, [pc, #48]	@ (800cce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d202      	bcs.n	800ccbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ccb8:	4a09      	ldr	r2, [pc, #36]	@ (800cce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	6013      	str	r3, [r2, #0]
}
 800ccbe:	bf00      	nop
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200028b4 	.word	0x200028b4
 800cccc:	200027b0 	.word	0x200027b0
 800ccd0:	200028b8 	.word	0x200028b8
 800ccd4:	2000289c 	.word	0x2000289c
 800ccd8:	2000286c 	.word	0x2000286c
 800ccdc:	20002868 	.word	0x20002868
 800cce0:	200028d0 	.word	0x200028d0

0800cce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3b04      	subs	r3, #4
 800ccf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ccfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3b04      	subs	r3, #4
 800cd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	f023 0201 	bic.w	r2, r3, #1
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3b04      	subs	r3, #4
 800cd12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd14:	4a0c      	ldr	r2, [pc, #48]	@ (800cd48 <pxPortInitialiseStack+0x64>)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	3b14      	subs	r3, #20
 800cd1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3b04      	subs	r3, #4
 800cd2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f06f 0202 	mvn.w	r2, #2
 800cd32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	3b20      	subs	r3, #32
 800cd38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	0800cd4d 	.word	0x0800cd4d

0800cd4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd56:	4b15      	ldr	r3, [pc, #84]	@ (800cdac <prvTaskExitError+0x60>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5e:	d00d      	beq.n	800cd7c <prvTaskExitError+0x30>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd64:	b672      	cpsid	i
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	b662      	cpsie	i
 800cd74:	60fb      	str	r3, [r7, #12]
}
 800cd76:	bf00      	nop
 800cd78:	bf00      	nop
 800cd7a:	e7fd      	b.n	800cd78 <prvTaskExitError+0x2c>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd80:	b672      	cpsid	i
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	b662      	cpsie	i
 800cd90:	60bb      	str	r3, [r7, #8]
}
 800cd92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd94:	bf00      	nop
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d0fc      	beq.n	800cd96 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd9c:	bf00      	nop
 800cd9e:	bf00      	nop
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	2000000c 	.word	0x2000000c

0800cdb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cdb0:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <pxCurrentTCBConst2>)
 800cdb2:	6819      	ldr	r1, [r3, #0]
 800cdb4:	6808      	ldr	r0, [r1, #0]
 800cdb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdba:	f380 8809 	msr	PSP, r0
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f04f 0000 	mov.w	r0, #0
 800cdc6:	f380 8811 	msr	BASEPRI, r0
 800cdca:	4770      	bx	lr
 800cdcc:	f3af 8000 	nop.w

0800cdd0 <pxCurrentTCBConst2>:
 800cdd0:	200027b0 	.word	0x200027b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cdd4:	bf00      	nop
 800cdd6:	bf00      	nop

0800cdd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cdd8:	4808      	ldr	r0, [pc, #32]	@ (800cdfc <prvPortStartFirstTask+0x24>)
 800cdda:	6800      	ldr	r0, [r0, #0]
 800cddc:	6800      	ldr	r0, [r0, #0]
 800cdde:	f380 8808 	msr	MSP, r0
 800cde2:	f04f 0000 	mov.w	r0, #0
 800cde6:	f380 8814 	msr	CONTROL, r0
 800cdea:	b662      	cpsie	i
 800cdec:	b661      	cpsie	f
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	df00      	svc	0
 800cdf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdfa:	bf00      	nop
 800cdfc:	e000ed08 	.word	0xe000ed08

0800ce00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce06:	4b37      	ldr	r3, [pc, #220]	@ (800cee4 <xPortStartScheduler+0xe4>)
 800ce08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	22ff      	movs	r2, #255	@ 0xff
 800ce16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	4b2f      	ldr	r3, [pc, #188]	@ (800cee8 <xPortStartScheduler+0xe8>)
 800ce2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce2e:	4b2f      	ldr	r3, [pc, #188]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce30:	2207      	movs	r2, #7
 800ce32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce34:	e009      	b.n	800ce4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ce36:	4b2d      	ldr	r3, [pc, #180]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	4a2b      	ldr	r2, [pc, #172]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce40:	78fb      	ldrb	r3, [r7, #3]
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce4a:	78fb      	ldrb	r3, [r7, #3]
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce52:	2b80      	cmp	r3, #128	@ 0x80
 800ce54:	d0ef      	beq.n	800ce36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce56:	4b25      	ldr	r3, [pc, #148]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f1c3 0307 	rsb	r3, r3, #7
 800ce5e:	2b04      	cmp	r3, #4
 800ce60:	d00d      	beq.n	800ce7e <xPortStartScheduler+0x7e>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce66:	b672      	cpsid	i
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	b662      	cpsie	i
 800ce76:	60bb      	str	r3, [r7, #8]
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	e7fd      	b.n	800ce7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce7e:	4b1b      	ldr	r3, [pc, #108]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	4a19      	ldr	r2, [pc, #100]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce88:	4b18      	ldr	r3, [pc, #96]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce90:	4a16      	ldr	r2, [pc, #88]	@ (800ceec <xPortStartScheduler+0xec>)
 800ce92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce9c:	4b14      	ldr	r3, [pc, #80]	@ (800cef0 <xPortStartScheduler+0xf0>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a13      	ldr	r2, [pc, #76]	@ (800cef0 <xPortStartScheduler+0xf0>)
 800cea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cea8:	4b11      	ldr	r3, [pc, #68]	@ (800cef0 <xPortStartScheduler+0xf0>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a10      	ldr	r2, [pc, #64]	@ (800cef0 <xPortStartScheduler+0xf0>)
 800ceae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ceb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ceb4:	f000 f8dc 	bl	800d070 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cef4 <xPortStartScheduler+0xf4>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cebe:	f000 f8fb 	bl	800d0b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cec2:	4b0d      	ldr	r3, [pc, #52]	@ (800cef8 <xPortStartScheduler+0xf8>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a0c      	ldr	r2, [pc, #48]	@ (800cef8 <xPortStartScheduler+0xf8>)
 800cec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cece:	f7ff ff83 	bl	800cdd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ced2:	f7ff fa67 	bl	800c3a4 <vTaskSwitchContext>
	prvTaskExitError();
 800ced6:	f7ff ff39 	bl	800cd4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	e000e400 	.word	0xe000e400
 800cee8:	200028dc 	.word	0x200028dc
 800ceec:	200028e0 	.word	0x200028e0
 800cef0:	e000ed20 	.word	0xe000ed20
 800cef4:	2000000c 	.word	0x2000000c
 800cef8:	e000ef34 	.word	0xe000ef34

0800cefc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf06:	b672      	cpsid	i
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	b662      	cpsie	i
 800cf16:	607b      	str	r3, [r7, #4]
}
 800cf18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf1a:	4b11      	ldr	r3, [pc, #68]	@ (800cf60 <vPortEnterCritical+0x64>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	4a0f      	ldr	r2, [pc, #60]	@ (800cf60 <vPortEnterCritical+0x64>)
 800cf22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf24:	4b0e      	ldr	r3, [pc, #56]	@ (800cf60 <vPortEnterCritical+0x64>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d112      	bne.n	800cf52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf64 <vPortEnterCritical+0x68>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00d      	beq.n	800cf52 <vPortEnterCritical+0x56>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3a:	b672      	cpsid	i
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	b662      	cpsie	i
 800cf4a:	603b      	str	r3, [r7, #0]
}
 800cf4c:	bf00      	nop
 800cf4e:	bf00      	nop
 800cf50:	e7fd      	b.n	800cf4e <vPortEnterCritical+0x52>
	}
}
 800cf52:	bf00      	nop
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	2000000c 	.word	0x2000000c
 800cf64:	e000ed04 	.word	0xe000ed04

0800cf68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf6e:	4b13      	ldr	r3, [pc, #76]	@ (800cfbc <vPortExitCritical+0x54>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10d      	bne.n	800cf92 <vPortExitCritical+0x2a>
	__asm volatile
 800cf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7a:	b672      	cpsid	i
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	b662      	cpsie	i
 800cf8a:	607b      	str	r3, [r7, #4]
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	e7fd      	b.n	800cf8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cf92:	4b0a      	ldr	r3, [pc, #40]	@ (800cfbc <vPortExitCritical+0x54>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3b01      	subs	r3, #1
 800cf98:	4a08      	ldr	r2, [pc, #32]	@ (800cfbc <vPortExitCritical+0x54>)
 800cf9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf9c:	4b07      	ldr	r3, [pc, #28]	@ (800cfbc <vPortExitCritical+0x54>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d105      	bne.n	800cfb0 <vPortExitCritical+0x48>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f383 8811 	msr	BASEPRI, r3
}
 800cfae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	2000000c 	.word	0x2000000c

0800cfc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfc0:	f3ef 8009 	mrs	r0, PSP
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	4b15      	ldr	r3, [pc, #84]	@ (800d020 <pxCurrentTCBConst>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	f01e 0f10 	tst.w	lr, #16
 800cfd0:	bf08      	it	eq
 800cfd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfda:	6010      	str	r0, [r2, #0]
 800cfdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cfe4:	b672      	cpsid	i
 800cfe6:	f380 8811 	msr	BASEPRI, r0
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	b662      	cpsie	i
 800cff4:	f7ff f9d6 	bl	800c3a4 <vTaskSwitchContext>
 800cff8:	f04f 0000 	mov.w	r0, #0
 800cffc:	f380 8811 	msr	BASEPRI, r0
 800d000:	bc09      	pop	{r0, r3}
 800d002:	6819      	ldr	r1, [r3, #0]
 800d004:	6808      	ldr	r0, [r1, #0]
 800d006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	f01e 0f10 	tst.w	lr, #16
 800d00e:	bf08      	it	eq
 800d010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d014:	f380 8809 	msr	PSP, r0
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop

0800d020 <pxCurrentTCBConst>:
 800d020:	200027b0 	.word	0x200027b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop

0800d028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	b672      	cpsid	i
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	b662      	cpsie	i
 800d042:	607b      	str	r3, [r7, #4]
}
 800d044:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d046:	f7ff f8f1 	bl	800c22c <xTaskIncrementTick>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d003      	beq.n	800d058 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d050:	4b06      	ldr	r3, [pc, #24]	@ (800d06c <SysTick_Handler+0x44>)
 800d052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	2300      	movs	r3, #0
 800d05a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	f383 8811 	msr	BASEPRI, r3
}
 800d062:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d064:	bf00      	nop
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	e000ed04 	.word	0xe000ed04

0800d070 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d074:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a4 <vPortSetupTimerInterrupt+0x34>)
 800d076:	2200      	movs	r2, #0
 800d078:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d07a:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a8 <vPortSetupTimerInterrupt+0x38>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d080:	4b0a      	ldr	r3, [pc, #40]	@ (800d0ac <vPortSetupTimerInterrupt+0x3c>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a0a      	ldr	r2, [pc, #40]	@ (800d0b0 <vPortSetupTimerInterrupt+0x40>)
 800d086:	fba2 2303 	umull	r2, r3, r2, r3
 800d08a:	099b      	lsrs	r3, r3, #6
 800d08c:	4a09      	ldr	r2, [pc, #36]	@ (800d0b4 <vPortSetupTimerInterrupt+0x44>)
 800d08e:	3b01      	subs	r3, #1
 800d090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d092:	4b04      	ldr	r3, [pc, #16]	@ (800d0a4 <vPortSetupTimerInterrupt+0x34>)
 800d094:	2207      	movs	r2, #7
 800d096:	601a      	str	r2, [r3, #0]
}
 800d098:	bf00      	nop
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	e000e010 	.word	0xe000e010
 800d0a8:	e000e018 	.word	0xe000e018
 800d0ac:	20000000 	.word	0x20000000
 800d0b0:	10624dd3 	.word	0x10624dd3
 800d0b4:	e000e014 	.word	0xe000e014

0800d0b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d0b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d0c8 <vPortEnableVFP+0x10>
 800d0bc:	6801      	ldr	r1, [r0, #0]
 800d0be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d0c2:	6001      	str	r1, [r0, #0]
 800d0c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0c6:	bf00      	nop
 800d0c8:	e000ed88 	.word	0xe000ed88

0800d0cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0d2:	f3ef 8305 	mrs	r3, IPSR
 800d0d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b0f      	cmp	r3, #15
 800d0dc:	d917      	bls.n	800d10e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0de:	4a1a      	ldr	r2, [pc, #104]	@ (800d148 <vPortValidateInterruptPriority+0x7c>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0e8:	4b18      	ldr	r3, [pc, #96]	@ (800d14c <vPortValidateInterruptPriority+0x80>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	7afa      	ldrb	r2, [r7, #11]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d20d      	bcs.n	800d10e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800d0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f6:	b672      	cpsid	i
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	b662      	cpsie	i
 800d106:	607b      	str	r3, [r7, #4]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d10e:	4b10      	ldr	r3, [pc, #64]	@ (800d150 <vPortValidateInterruptPriority+0x84>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d116:	4b0f      	ldr	r3, [pc, #60]	@ (800d154 <vPortValidateInterruptPriority+0x88>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d90d      	bls.n	800d13a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d122:	b672      	cpsid	i
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	b662      	cpsie	i
 800d132:	603b      	str	r3, [r7, #0]
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop
 800d138:	e7fd      	b.n	800d136 <vPortValidateInterruptPriority+0x6a>
	}
 800d13a:	bf00      	nop
 800d13c:	3714      	adds	r7, #20
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	e000e3f0 	.word	0xe000e3f0
 800d14c:	200028dc 	.word	0x200028dc
 800d150:	e000ed0c 	.word	0xe000ed0c
 800d154:	200028e0 	.word	0x200028e0

0800d158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	@ 0x28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d164:	f7fe ff92 	bl	800c08c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d168:	4b5d      	ldr	r3, [pc, #372]	@ (800d2e0 <pvPortMalloc+0x188>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d170:	f000 f920 	bl	800d3b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d174:	4b5b      	ldr	r3, [pc, #364]	@ (800d2e4 <pvPortMalloc+0x18c>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4013      	ands	r3, r2
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f040 8094 	bne.w	800d2aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d020      	beq.n	800d1ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d188:	2208      	movs	r2, #8
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f003 0307 	and.w	r3, r3, #7
 800d196:	2b00      	cmp	r3, #0
 800d198:	d017      	beq.n	800d1ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f023 0307 	bic.w	r3, r3, #7
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00d      	beq.n	800d1ca <pvPortMalloc+0x72>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b2:	b672      	cpsid	i
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	b662      	cpsie	i
 800d1c2:	617b      	str	r3, [r7, #20]
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop
 800d1c8:	e7fd      	b.n	800d1c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d06c      	beq.n	800d2aa <pvPortMalloc+0x152>
 800d1d0:	4b45      	ldr	r3, [pc, #276]	@ (800d2e8 <pvPortMalloc+0x190>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d867      	bhi.n	800d2aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1da:	4b44      	ldr	r3, [pc, #272]	@ (800d2ec <pvPortMalloc+0x194>)
 800d1dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1de:	4b43      	ldr	r3, [pc, #268]	@ (800d2ec <pvPortMalloc+0x194>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1e4:	e004      	b.n	800d1f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d903      	bls.n	800d202 <pvPortMalloc+0xaa>
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1f1      	bne.n	800d1e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d202:	4b37      	ldr	r3, [pc, #220]	@ (800d2e0 <pvPortMalloc+0x188>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d208:	429a      	cmp	r2, r3
 800d20a:	d04e      	beq.n	800d2aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d20c:	6a3b      	ldr	r3, [r7, #32]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2208      	movs	r2, #8
 800d212:	4413      	add	r3, r2
 800d214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	1ad2      	subs	r2, r2, r3
 800d226:	2308      	movs	r3, #8
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d922      	bls.n	800d274 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4413      	add	r3, r2
 800d234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	f003 0307 	and.w	r3, r3, #7
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00d      	beq.n	800d25c <pvPortMalloc+0x104>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d244:	b672      	cpsid	i
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	b662      	cpsie	i
 800d254:	613b      	str	r3, [r7, #16]
}
 800d256:	bf00      	nop
 800d258:	bf00      	nop
 800d25a:	e7fd      	b.n	800d258 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	1ad2      	subs	r2, r2, r3
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d26e:	69b8      	ldr	r0, [r7, #24]
 800d270:	f000 f902 	bl	800d478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d274:	4b1c      	ldr	r3, [pc, #112]	@ (800d2e8 <pvPortMalloc+0x190>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	4a1a      	ldr	r2, [pc, #104]	@ (800d2e8 <pvPortMalloc+0x190>)
 800d280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d282:	4b19      	ldr	r3, [pc, #100]	@ (800d2e8 <pvPortMalloc+0x190>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f0 <pvPortMalloc+0x198>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d203      	bcs.n	800d296 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d28e:	4b16      	ldr	r3, [pc, #88]	@ (800d2e8 <pvPortMalloc+0x190>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a17      	ldr	r2, [pc, #92]	@ (800d2f0 <pvPortMalloc+0x198>)
 800d294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	4b12      	ldr	r3, [pc, #72]	@ (800d2e4 <pvPortMalloc+0x18c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2aa:	f7fe fefd 	bl	800c0a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	f003 0307 	and.w	r3, r3, #7
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00d      	beq.n	800d2d4 <pvPortMalloc+0x17c>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2bc:	b672      	cpsid	i
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	b662      	cpsie	i
 800d2cc:	60fb      	str	r3, [r7, #12]
}
 800d2ce:	bf00      	nop
 800d2d0:	bf00      	nop
 800d2d2:	e7fd      	b.n	800d2d0 <pvPortMalloc+0x178>
	return pvReturn;
 800d2d4:	69fb      	ldr	r3, [r7, #28]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3728      	adds	r7, #40	@ 0x28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	200064ec 	.word	0x200064ec
 800d2e4:	200064f8 	.word	0x200064f8
 800d2e8:	200064f0 	.word	0x200064f0
 800d2ec:	200064e4 	.word	0x200064e4
 800d2f0:	200064f4 	.word	0x200064f4

0800d2f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d04e      	beq.n	800d3a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d306:	2308      	movs	r3, #8
 800d308:	425b      	negs	r3, r3
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	4413      	add	r3, r2
 800d30e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	685a      	ldr	r2, [r3, #4]
 800d318:	4b24      	ldr	r3, [pc, #144]	@ (800d3ac <vPortFree+0xb8>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4013      	ands	r3, r2
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10d      	bne.n	800d33e <vPortFree+0x4a>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d326:	b672      	cpsid	i
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	b662      	cpsie	i
 800d336:	60fb      	str	r3, [r7, #12]
}
 800d338:	bf00      	nop
 800d33a:	bf00      	nop
 800d33c:	e7fd      	b.n	800d33a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00d      	beq.n	800d362 <vPortFree+0x6e>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34a:	b672      	cpsid	i
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	b662      	cpsie	i
 800d35a:	60bb      	str	r3, [r7, #8]
}
 800d35c:	bf00      	nop
 800d35e:	bf00      	nop
 800d360:	e7fd      	b.n	800d35e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	4b11      	ldr	r3, [pc, #68]	@ (800d3ac <vPortFree+0xb8>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4013      	ands	r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d019      	beq.n	800d3a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d115      	bne.n	800d3a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	4b0b      	ldr	r3, [pc, #44]	@ (800d3ac <vPortFree+0xb8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	43db      	mvns	r3, r3
 800d382:	401a      	ands	r2, r3
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d388:	f7fe fe80 	bl	800c08c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	685a      	ldr	r2, [r3, #4]
 800d390:	4b07      	ldr	r3, [pc, #28]	@ (800d3b0 <vPortFree+0xbc>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4413      	add	r3, r2
 800d396:	4a06      	ldr	r2, [pc, #24]	@ (800d3b0 <vPortFree+0xbc>)
 800d398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d39a:	6938      	ldr	r0, [r7, #16]
 800d39c:	f000 f86c 	bl	800d478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d3a0:	f7fe fe82 	bl	800c0a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3a4:	bf00      	nop
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	200064f8 	.word	0x200064f8
 800d3b0:	200064f0 	.word	0x200064f0

0800d3b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d3be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3c0:	4b27      	ldr	r3, [pc, #156]	@ (800d460 <prvHeapInit+0xac>)
 800d3c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00c      	beq.n	800d3e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3307      	adds	r3, #7
 800d3d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f023 0307 	bic.w	r3, r3, #7
 800d3da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	4a1f      	ldr	r2, [pc, #124]	@ (800d460 <prvHeapInit+0xac>)
 800d3e4:	4413      	add	r3, r2
 800d3e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3ec:	4a1d      	ldr	r2, [pc, #116]	@ (800d464 <prvHeapInit+0xb0>)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3f2:	4b1c      	ldr	r3, [pc, #112]	@ (800d464 <prvHeapInit+0xb0>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d400:	2208      	movs	r2, #8
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	1a9b      	subs	r3, r3, r2
 800d406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a15      	ldr	r2, [pc, #84]	@ (800d468 <prvHeapInit+0xb4>)
 800d414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d416:	4b14      	ldr	r3, [pc, #80]	@ (800d468 <prvHeapInit+0xb4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2200      	movs	r2, #0
 800d41c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d41e:	4b12      	ldr	r3, [pc, #72]	@ (800d468 <prvHeapInit+0xb4>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	1ad2      	subs	r2, r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d434:	4b0c      	ldr	r3, [pc, #48]	@ (800d468 <prvHeapInit+0xb4>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	4a0a      	ldr	r2, [pc, #40]	@ (800d46c <prvHeapInit+0xb8>)
 800d442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	4a09      	ldr	r2, [pc, #36]	@ (800d470 <prvHeapInit+0xbc>)
 800d44a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d44c:	4b09      	ldr	r3, [pc, #36]	@ (800d474 <prvHeapInit+0xc0>)
 800d44e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d452:	601a      	str	r2, [r3, #0]
}
 800d454:	bf00      	nop
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	200028e4 	.word	0x200028e4
 800d464:	200064e4 	.word	0x200064e4
 800d468:	200064ec 	.word	0x200064ec
 800d46c:	200064f4 	.word	0x200064f4
 800d470:	200064f0 	.word	0x200064f0
 800d474:	200064f8 	.word	0x200064f8

0800d478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d480:	4b28      	ldr	r3, [pc, #160]	@ (800d524 <prvInsertBlockIntoFreeList+0xac>)
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	e002      	b.n	800d48c <prvInsertBlockIntoFreeList+0x14>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	429a      	cmp	r2, r3
 800d494:	d8f7      	bhi.n	800d486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d108      	bne.n	800d4ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	441a      	add	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	441a      	add	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d118      	bne.n	800d500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	4b15      	ldr	r3, [pc, #84]	@ (800d528 <prvInsertBlockIntoFreeList+0xb0>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d00d      	beq.n	800d4f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685a      	ldr	r2, [r3, #4]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	441a      	add	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	e008      	b.n	800d508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d528 <prvInsertBlockIntoFreeList+0xb0>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	e003      	b.n	800d508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d002      	beq.n	800d516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d516:	bf00      	nop
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	200064e4 	.word	0x200064e4
 800d528:	200064ec 	.word	0x200064ec

0800d52c <malloc>:
 800d52c:	4b02      	ldr	r3, [pc, #8]	@ (800d538 <malloc+0xc>)
 800d52e:	4601      	mov	r1, r0
 800d530:	6818      	ldr	r0, [r3, #0]
 800d532:	f000 b82d 	b.w	800d590 <_malloc_r>
 800d536:	bf00      	nop
 800d538:	2000001c 	.word	0x2000001c

0800d53c <free>:
 800d53c:	4b02      	ldr	r3, [pc, #8]	@ (800d548 <free+0xc>)
 800d53e:	4601      	mov	r1, r0
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	f000 bbdb 	b.w	800dcfc <_free_r>
 800d546:	bf00      	nop
 800d548:	2000001c 	.word	0x2000001c

0800d54c <sbrk_aligned>:
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	4e0f      	ldr	r6, [pc, #60]	@ (800d58c <sbrk_aligned+0x40>)
 800d550:	460c      	mov	r4, r1
 800d552:	6831      	ldr	r1, [r6, #0]
 800d554:	4605      	mov	r5, r0
 800d556:	b911      	cbnz	r1, 800d55e <sbrk_aligned+0x12>
 800d558:	f000 fb72 	bl	800dc40 <_sbrk_r>
 800d55c:	6030      	str	r0, [r6, #0]
 800d55e:	4621      	mov	r1, r4
 800d560:	4628      	mov	r0, r5
 800d562:	f000 fb6d 	bl	800dc40 <_sbrk_r>
 800d566:	1c43      	adds	r3, r0, #1
 800d568:	d103      	bne.n	800d572 <sbrk_aligned+0x26>
 800d56a:	f04f 34ff 	mov.w	r4, #4294967295
 800d56e:	4620      	mov	r0, r4
 800d570:	bd70      	pop	{r4, r5, r6, pc}
 800d572:	1cc4      	adds	r4, r0, #3
 800d574:	f024 0403 	bic.w	r4, r4, #3
 800d578:	42a0      	cmp	r0, r4
 800d57a:	d0f8      	beq.n	800d56e <sbrk_aligned+0x22>
 800d57c:	1a21      	subs	r1, r4, r0
 800d57e:	4628      	mov	r0, r5
 800d580:	f000 fb5e 	bl	800dc40 <_sbrk_r>
 800d584:	3001      	adds	r0, #1
 800d586:	d1f2      	bne.n	800d56e <sbrk_aligned+0x22>
 800d588:	e7ef      	b.n	800d56a <sbrk_aligned+0x1e>
 800d58a:	bf00      	nop
 800d58c:	200064fc 	.word	0x200064fc

0800d590 <_malloc_r>:
 800d590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d594:	1ccd      	adds	r5, r1, #3
 800d596:	f025 0503 	bic.w	r5, r5, #3
 800d59a:	3508      	adds	r5, #8
 800d59c:	2d0c      	cmp	r5, #12
 800d59e:	bf38      	it	cc
 800d5a0:	250c      	movcc	r5, #12
 800d5a2:	2d00      	cmp	r5, #0
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	db01      	blt.n	800d5ac <_malloc_r+0x1c>
 800d5a8:	42a9      	cmp	r1, r5
 800d5aa:	d904      	bls.n	800d5b6 <_malloc_r+0x26>
 800d5ac:	230c      	movs	r3, #12
 800d5ae:	6033      	str	r3, [r6, #0]
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d68c <_malloc_r+0xfc>
 800d5ba:	f000 f869 	bl	800d690 <__malloc_lock>
 800d5be:	f8d8 3000 	ldr.w	r3, [r8]
 800d5c2:	461c      	mov	r4, r3
 800d5c4:	bb44      	cbnz	r4, 800d618 <_malloc_r+0x88>
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f7ff ffbf 	bl	800d54c <sbrk_aligned>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	d158      	bne.n	800d686 <_malloc_r+0xf6>
 800d5d4:	f8d8 4000 	ldr.w	r4, [r8]
 800d5d8:	4627      	mov	r7, r4
 800d5da:	2f00      	cmp	r7, #0
 800d5dc:	d143      	bne.n	800d666 <_malloc_r+0xd6>
 800d5de:	2c00      	cmp	r4, #0
 800d5e0:	d04b      	beq.n	800d67a <_malloc_r+0xea>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	eb04 0903 	add.w	r9, r4, r3
 800d5ec:	f000 fb28 	bl	800dc40 <_sbrk_r>
 800d5f0:	4581      	cmp	r9, r0
 800d5f2:	d142      	bne.n	800d67a <_malloc_r+0xea>
 800d5f4:	6821      	ldr	r1, [r4, #0]
 800d5f6:	1a6d      	subs	r5, r5, r1
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f7ff ffa6 	bl	800d54c <sbrk_aligned>
 800d600:	3001      	adds	r0, #1
 800d602:	d03a      	beq.n	800d67a <_malloc_r+0xea>
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	442b      	add	r3, r5
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	f8d8 3000 	ldr.w	r3, [r8]
 800d60e:	685a      	ldr	r2, [r3, #4]
 800d610:	bb62      	cbnz	r2, 800d66c <_malloc_r+0xdc>
 800d612:	f8c8 7000 	str.w	r7, [r8]
 800d616:	e00f      	b.n	800d638 <_malloc_r+0xa8>
 800d618:	6822      	ldr	r2, [r4, #0]
 800d61a:	1b52      	subs	r2, r2, r5
 800d61c:	d420      	bmi.n	800d660 <_malloc_r+0xd0>
 800d61e:	2a0b      	cmp	r2, #11
 800d620:	d917      	bls.n	800d652 <_malloc_r+0xc2>
 800d622:	1961      	adds	r1, r4, r5
 800d624:	42a3      	cmp	r3, r4
 800d626:	6025      	str	r5, [r4, #0]
 800d628:	bf18      	it	ne
 800d62a:	6059      	strne	r1, [r3, #4]
 800d62c:	6863      	ldr	r3, [r4, #4]
 800d62e:	bf08      	it	eq
 800d630:	f8c8 1000 	streq.w	r1, [r8]
 800d634:	5162      	str	r2, [r4, r5]
 800d636:	604b      	str	r3, [r1, #4]
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 f82f 	bl	800d69c <__malloc_unlock>
 800d63e:	f104 000b 	add.w	r0, r4, #11
 800d642:	1d23      	adds	r3, r4, #4
 800d644:	f020 0007 	bic.w	r0, r0, #7
 800d648:	1ac2      	subs	r2, r0, r3
 800d64a:	bf1c      	itt	ne
 800d64c:	1a1b      	subne	r3, r3, r0
 800d64e:	50a3      	strne	r3, [r4, r2]
 800d650:	e7af      	b.n	800d5b2 <_malloc_r+0x22>
 800d652:	6862      	ldr	r2, [r4, #4]
 800d654:	42a3      	cmp	r3, r4
 800d656:	bf0c      	ite	eq
 800d658:	f8c8 2000 	streq.w	r2, [r8]
 800d65c:	605a      	strne	r2, [r3, #4]
 800d65e:	e7eb      	b.n	800d638 <_malloc_r+0xa8>
 800d660:	4623      	mov	r3, r4
 800d662:	6864      	ldr	r4, [r4, #4]
 800d664:	e7ae      	b.n	800d5c4 <_malloc_r+0x34>
 800d666:	463c      	mov	r4, r7
 800d668:	687f      	ldr	r7, [r7, #4]
 800d66a:	e7b6      	b.n	800d5da <_malloc_r+0x4a>
 800d66c:	461a      	mov	r2, r3
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	42a3      	cmp	r3, r4
 800d672:	d1fb      	bne.n	800d66c <_malloc_r+0xdc>
 800d674:	2300      	movs	r3, #0
 800d676:	6053      	str	r3, [r2, #4]
 800d678:	e7de      	b.n	800d638 <_malloc_r+0xa8>
 800d67a:	230c      	movs	r3, #12
 800d67c:	6033      	str	r3, [r6, #0]
 800d67e:	4630      	mov	r0, r6
 800d680:	f000 f80c 	bl	800d69c <__malloc_unlock>
 800d684:	e794      	b.n	800d5b0 <_malloc_r+0x20>
 800d686:	6005      	str	r5, [r0, #0]
 800d688:	e7d6      	b.n	800d638 <_malloc_r+0xa8>
 800d68a:	bf00      	nop
 800d68c:	20006500 	.word	0x20006500

0800d690 <__malloc_lock>:
 800d690:	4801      	ldr	r0, [pc, #4]	@ (800d698 <__malloc_lock+0x8>)
 800d692:	f000 bb22 	b.w	800dcda <__retarget_lock_acquire_recursive>
 800d696:	bf00      	nop
 800d698:	20006644 	.word	0x20006644

0800d69c <__malloc_unlock>:
 800d69c:	4801      	ldr	r0, [pc, #4]	@ (800d6a4 <__malloc_unlock+0x8>)
 800d69e:	f000 bb1d 	b.w	800dcdc <__retarget_lock_release_recursive>
 800d6a2:	bf00      	nop
 800d6a4:	20006644 	.word	0x20006644

0800d6a8 <std>:
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	b510      	push	{r4, lr}
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6b6:	6083      	str	r3, [r0, #8]
 800d6b8:	8181      	strh	r1, [r0, #12]
 800d6ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800d6bc:	81c2      	strh	r2, [r0, #14]
 800d6be:	6183      	str	r3, [r0, #24]
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	2208      	movs	r2, #8
 800d6c4:	305c      	adds	r0, #92	@ 0x5c
 800d6c6:	f000 fa19 	bl	800dafc <memset>
 800d6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d700 <std+0x58>)
 800d6cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d704 <std+0x5c>)
 800d6d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d708 <std+0x60>)
 800d6d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d70c <std+0x64>)
 800d6d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6da:	4b0d      	ldr	r3, [pc, #52]	@ (800d710 <std+0x68>)
 800d6dc:	6224      	str	r4, [r4, #32]
 800d6de:	429c      	cmp	r4, r3
 800d6e0:	d006      	beq.n	800d6f0 <std+0x48>
 800d6e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6e6:	4294      	cmp	r4, r2
 800d6e8:	d002      	beq.n	800d6f0 <std+0x48>
 800d6ea:	33d0      	adds	r3, #208	@ 0xd0
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	d105      	bne.n	800d6fc <std+0x54>
 800d6f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6f8:	f000 baee 	b.w	800dcd8 <__retarget_lock_init_recursive>
 800d6fc:	bd10      	pop	{r4, pc}
 800d6fe:	bf00      	nop
 800d700:	0800d94d 	.word	0x0800d94d
 800d704:	0800d96f 	.word	0x0800d96f
 800d708:	0800d9a7 	.word	0x0800d9a7
 800d70c:	0800d9cb 	.word	0x0800d9cb
 800d710:	20006504 	.word	0x20006504

0800d714 <stdio_exit_handler>:
 800d714:	4a02      	ldr	r2, [pc, #8]	@ (800d720 <stdio_exit_handler+0xc>)
 800d716:	4903      	ldr	r1, [pc, #12]	@ (800d724 <stdio_exit_handler+0x10>)
 800d718:	4803      	ldr	r0, [pc, #12]	@ (800d728 <stdio_exit_handler+0x14>)
 800d71a:	f000 b869 	b.w	800d7f0 <_fwalk_sglue>
 800d71e:	bf00      	nop
 800d720:	20000010 	.word	0x20000010
 800d724:	0800e6e9 	.word	0x0800e6e9
 800d728:	20000020 	.word	0x20000020

0800d72c <cleanup_stdio>:
 800d72c:	6841      	ldr	r1, [r0, #4]
 800d72e:	4b0c      	ldr	r3, [pc, #48]	@ (800d760 <cleanup_stdio+0x34>)
 800d730:	4299      	cmp	r1, r3
 800d732:	b510      	push	{r4, lr}
 800d734:	4604      	mov	r4, r0
 800d736:	d001      	beq.n	800d73c <cleanup_stdio+0x10>
 800d738:	f000 ffd6 	bl	800e6e8 <_fflush_r>
 800d73c:	68a1      	ldr	r1, [r4, #8]
 800d73e:	4b09      	ldr	r3, [pc, #36]	@ (800d764 <cleanup_stdio+0x38>)
 800d740:	4299      	cmp	r1, r3
 800d742:	d002      	beq.n	800d74a <cleanup_stdio+0x1e>
 800d744:	4620      	mov	r0, r4
 800d746:	f000 ffcf 	bl	800e6e8 <_fflush_r>
 800d74a:	68e1      	ldr	r1, [r4, #12]
 800d74c:	4b06      	ldr	r3, [pc, #24]	@ (800d768 <cleanup_stdio+0x3c>)
 800d74e:	4299      	cmp	r1, r3
 800d750:	d004      	beq.n	800d75c <cleanup_stdio+0x30>
 800d752:	4620      	mov	r0, r4
 800d754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d758:	f000 bfc6 	b.w	800e6e8 <_fflush_r>
 800d75c:	bd10      	pop	{r4, pc}
 800d75e:	bf00      	nop
 800d760:	20006504 	.word	0x20006504
 800d764:	2000656c 	.word	0x2000656c
 800d768:	200065d4 	.word	0x200065d4

0800d76c <global_stdio_init.part.0>:
 800d76c:	b510      	push	{r4, lr}
 800d76e:	4b0b      	ldr	r3, [pc, #44]	@ (800d79c <global_stdio_init.part.0+0x30>)
 800d770:	4c0b      	ldr	r4, [pc, #44]	@ (800d7a0 <global_stdio_init.part.0+0x34>)
 800d772:	4a0c      	ldr	r2, [pc, #48]	@ (800d7a4 <global_stdio_init.part.0+0x38>)
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	4620      	mov	r0, r4
 800d778:	2200      	movs	r2, #0
 800d77a:	2104      	movs	r1, #4
 800d77c:	f7ff ff94 	bl	800d6a8 <std>
 800d780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d784:	2201      	movs	r2, #1
 800d786:	2109      	movs	r1, #9
 800d788:	f7ff ff8e 	bl	800d6a8 <std>
 800d78c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d790:	2202      	movs	r2, #2
 800d792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d796:	2112      	movs	r1, #18
 800d798:	f7ff bf86 	b.w	800d6a8 <std>
 800d79c:	2000663c 	.word	0x2000663c
 800d7a0:	20006504 	.word	0x20006504
 800d7a4:	0800d715 	.word	0x0800d715

0800d7a8 <__sfp_lock_acquire>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	@ (800d7b0 <__sfp_lock_acquire+0x8>)
 800d7aa:	f000 ba96 	b.w	800dcda <__retarget_lock_acquire_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	20006645 	.word	0x20006645

0800d7b4 <__sfp_lock_release>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	@ (800d7bc <__sfp_lock_release+0x8>)
 800d7b6:	f000 ba91 	b.w	800dcdc <__retarget_lock_release_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	20006645 	.word	0x20006645

0800d7c0 <__sinit>:
 800d7c0:	b510      	push	{r4, lr}
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	f7ff fff0 	bl	800d7a8 <__sfp_lock_acquire>
 800d7c8:	6a23      	ldr	r3, [r4, #32]
 800d7ca:	b11b      	cbz	r3, 800d7d4 <__sinit+0x14>
 800d7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d0:	f7ff bff0 	b.w	800d7b4 <__sfp_lock_release>
 800d7d4:	4b04      	ldr	r3, [pc, #16]	@ (800d7e8 <__sinit+0x28>)
 800d7d6:	6223      	str	r3, [r4, #32]
 800d7d8:	4b04      	ldr	r3, [pc, #16]	@ (800d7ec <__sinit+0x2c>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1f5      	bne.n	800d7cc <__sinit+0xc>
 800d7e0:	f7ff ffc4 	bl	800d76c <global_stdio_init.part.0>
 800d7e4:	e7f2      	b.n	800d7cc <__sinit+0xc>
 800d7e6:	bf00      	nop
 800d7e8:	0800d72d 	.word	0x0800d72d
 800d7ec:	2000663c 	.word	0x2000663c

0800d7f0 <_fwalk_sglue>:
 800d7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7f4:	4607      	mov	r7, r0
 800d7f6:	4688      	mov	r8, r1
 800d7f8:	4614      	mov	r4, r2
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d800:	f1b9 0901 	subs.w	r9, r9, #1
 800d804:	d505      	bpl.n	800d812 <_fwalk_sglue+0x22>
 800d806:	6824      	ldr	r4, [r4, #0]
 800d808:	2c00      	cmp	r4, #0
 800d80a:	d1f7      	bne.n	800d7fc <_fwalk_sglue+0xc>
 800d80c:	4630      	mov	r0, r6
 800d80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d812:	89ab      	ldrh	r3, [r5, #12]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d907      	bls.n	800d828 <_fwalk_sglue+0x38>
 800d818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d81c:	3301      	adds	r3, #1
 800d81e:	d003      	beq.n	800d828 <_fwalk_sglue+0x38>
 800d820:	4629      	mov	r1, r5
 800d822:	4638      	mov	r0, r7
 800d824:	47c0      	blx	r8
 800d826:	4306      	orrs	r6, r0
 800d828:	3568      	adds	r5, #104	@ 0x68
 800d82a:	e7e9      	b.n	800d800 <_fwalk_sglue+0x10>

0800d82c <iprintf>:
 800d82c:	b40f      	push	{r0, r1, r2, r3}
 800d82e:	b507      	push	{r0, r1, r2, lr}
 800d830:	4906      	ldr	r1, [pc, #24]	@ (800d84c <iprintf+0x20>)
 800d832:	ab04      	add	r3, sp, #16
 800d834:	6808      	ldr	r0, [r1, #0]
 800d836:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83a:	6881      	ldr	r1, [r0, #8]
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	f000 fc29 	bl	800e094 <_vfiprintf_r>
 800d842:	b003      	add	sp, #12
 800d844:	f85d eb04 	ldr.w	lr, [sp], #4
 800d848:	b004      	add	sp, #16
 800d84a:	4770      	bx	lr
 800d84c:	2000001c 	.word	0x2000001c

0800d850 <_puts_r>:
 800d850:	6a03      	ldr	r3, [r0, #32]
 800d852:	b570      	push	{r4, r5, r6, lr}
 800d854:	6884      	ldr	r4, [r0, #8]
 800d856:	4605      	mov	r5, r0
 800d858:	460e      	mov	r6, r1
 800d85a:	b90b      	cbnz	r3, 800d860 <_puts_r+0x10>
 800d85c:	f7ff ffb0 	bl	800d7c0 <__sinit>
 800d860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d862:	07db      	lsls	r3, r3, #31
 800d864:	d405      	bmi.n	800d872 <_puts_r+0x22>
 800d866:	89a3      	ldrh	r3, [r4, #12]
 800d868:	0598      	lsls	r0, r3, #22
 800d86a:	d402      	bmi.n	800d872 <_puts_r+0x22>
 800d86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d86e:	f000 fa34 	bl	800dcda <__retarget_lock_acquire_recursive>
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	0719      	lsls	r1, r3, #28
 800d876:	d502      	bpl.n	800d87e <_puts_r+0x2e>
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d135      	bne.n	800d8ea <_puts_r+0x9a>
 800d87e:	4621      	mov	r1, r4
 800d880:	4628      	mov	r0, r5
 800d882:	f000 f8e5 	bl	800da50 <__swsetup_r>
 800d886:	b380      	cbz	r0, 800d8ea <_puts_r+0x9a>
 800d888:	f04f 35ff 	mov.w	r5, #4294967295
 800d88c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d88e:	07da      	lsls	r2, r3, #31
 800d890:	d405      	bmi.n	800d89e <_puts_r+0x4e>
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	d402      	bmi.n	800d89e <_puts_r+0x4e>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f000 fa1f 	bl	800dcdc <__retarget_lock_release_recursive>
 800d89e:	4628      	mov	r0, r5
 800d8a0:	bd70      	pop	{r4, r5, r6, pc}
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	da04      	bge.n	800d8b0 <_puts_r+0x60>
 800d8a6:	69a2      	ldr	r2, [r4, #24]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	dc17      	bgt.n	800d8dc <_puts_r+0x8c>
 800d8ac:	290a      	cmp	r1, #10
 800d8ae:	d015      	beq.n	800d8dc <_puts_r+0x8c>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	6022      	str	r2, [r4, #0]
 800d8b6:	7019      	strb	r1, [r3, #0]
 800d8b8:	68a3      	ldr	r3, [r4, #8]
 800d8ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	60a3      	str	r3, [r4, #8]
 800d8c2:	2900      	cmp	r1, #0
 800d8c4:	d1ed      	bne.n	800d8a2 <_puts_r+0x52>
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	da11      	bge.n	800d8ee <_puts_r+0x9e>
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	210a      	movs	r1, #10
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f000 f87f 	bl	800d9d2 <__swbuf_r>
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d0d7      	beq.n	800d888 <_puts_r+0x38>
 800d8d8:	250a      	movs	r5, #10
 800d8da:	e7d7      	b.n	800d88c <_puts_r+0x3c>
 800d8dc:	4622      	mov	r2, r4
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 f877 	bl	800d9d2 <__swbuf_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d1e7      	bne.n	800d8b8 <_puts_r+0x68>
 800d8e8:	e7ce      	b.n	800d888 <_puts_r+0x38>
 800d8ea:	3e01      	subs	r6, #1
 800d8ec:	e7e4      	b.n	800d8b8 <_puts_r+0x68>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	6022      	str	r2, [r4, #0]
 800d8f4:	220a      	movs	r2, #10
 800d8f6:	701a      	strb	r2, [r3, #0]
 800d8f8:	e7ee      	b.n	800d8d8 <_puts_r+0x88>
	...

0800d8fc <puts>:
 800d8fc:	4b02      	ldr	r3, [pc, #8]	@ (800d908 <puts+0xc>)
 800d8fe:	4601      	mov	r1, r0
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	f7ff bfa5 	b.w	800d850 <_puts_r>
 800d906:	bf00      	nop
 800d908:	2000001c 	.word	0x2000001c

0800d90c <siprintf>:
 800d90c:	b40e      	push	{r1, r2, r3}
 800d90e:	b500      	push	{lr}
 800d910:	b09c      	sub	sp, #112	@ 0x70
 800d912:	ab1d      	add	r3, sp, #116	@ 0x74
 800d914:	9002      	str	r0, [sp, #8]
 800d916:	9006      	str	r0, [sp, #24]
 800d918:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d91c:	4809      	ldr	r0, [pc, #36]	@ (800d944 <siprintf+0x38>)
 800d91e:	9107      	str	r1, [sp, #28]
 800d920:	9104      	str	r1, [sp, #16]
 800d922:	4909      	ldr	r1, [pc, #36]	@ (800d948 <siprintf+0x3c>)
 800d924:	f853 2b04 	ldr.w	r2, [r3], #4
 800d928:	9105      	str	r1, [sp, #20]
 800d92a:	6800      	ldr	r0, [r0, #0]
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	a902      	add	r1, sp, #8
 800d930:	f000 fa8a 	bl	800de48 <_svfiprintf_r>
 800d934:	9b02      	ldr	r3, [sp, #8]
 800d936:	2200      	movs	r2, #0
 800d938:	701a      	strb	r2, [r3, #0]
 800d93a:	b01c      	add	sp, #112	@ 0x70
 800d93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d940:	b003      	add	sp, #12
 800d942:	4770      	bx	lr
 800d944:	2000001c 	.word	0x2000001c
 800d948:	ffff0208 	.word	0xffff0208

0800d94c <__sread>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	460c      	mov	r4, r1
 800d950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d954:	f000 f962 	bl	800dc1c <_read_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	bfab      	itete	ge
 800d95c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d95e:	89a3      	ldrhlt	r3, [r4, #12]
 800d960:	181b      	addge	r3, r3, r0
 800d962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d966:	bfac      	ite	ge
 800d968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d96a:	81a3      	strhlt	r3, [r4, #12]
 800d96c:	bd10      	pop	{r4, pc}

0800d96e <__swrite>:
 800d96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d972:	461f      	mov	r7, r3
 800d974:	898b      	ldrh	r3, [r1, #12]
 800d976:	05db      	lsls	r3, r3, #23
 800d978:	4605      	mov	r5, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	4616      	mov	r6, r2
 800d97e:	d505      	bpl.n	800d98c <__swrite+0x1e>
 800d980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d984:	2302      	movs	r3, #2
 800d986:	2200      	movs	r2, #0
 800d988:	f000 f936 	bl	800dbf8 <_lseek_r>
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	4632      	mov	r2, r6
 800d99a:	463b      	mov	r3, r7
 800d99c:	4628      	mov	r0, r5
 800d99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a2:	f000 b95d 	b.w	800dc60 <_write_r>

0800d9a6 <__sseek>:
 800d9a6:	b510      	push	{r4, lr}
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ae:	f000 f923 	bl	800dbf8 <_lseek_r>
 800d9b2:	1c43      	adds	r3, r0, #1
 800d9b4:	89a3      	ldrh	r3, [r4, #12]
 800d9b6:	bf15      	itete	ne
 800d9b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9c2:	81a3      	strheq	r3, [r4, #12]
 800d9c4:	bf18      	it	ne
 800d9c6:	81a3      	strhne	r3, [r4, #12]
 800d9c8:	bd10      	pop	{r4, pc}

0800d9ca <__sclose>:
 800d9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ce:	f000 b8ad 	b.w	800db2c <_close_r>

0800d9d2 <__swbuf_r>:
 800d9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d4:	460e      	mov	r6, r1
 800d9d6:	4614      	mov	r4, r2
 800d9d8:	4605      	mov	r5, r0
 800d9da:	b118      	cbz	r0, 800d9e4 <__swbuf_r+0x12>
 800d9dc:	6a03      	ldr	r3, [r0, #32]
 800d9de:	b90b      	cbnz	r3, 800d9e4 <__swbuf_r+0x12>
 800d9e0:	f7ff feee 	bl	800d7c0 <__sinit>
 800d9e4:	69a3      	ldr	r3, [r4, #24]
 800d9e6:	60a3      	str	r3, [r4, #8]
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	071a      	lsls	r2, r3, #28
 800d9ec:	d501      	bpl.n	800d9f2 <__swbuf_r+0x20>
 800d9ee:	6923      	ldr	r3, [r4, #16]
 800d9f0:	b943      	cbnz	r3, 800da04 <__swbuf_r+0x32>
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 f82b 	bl	800da50 <__swsetup_r>
 800d9fa:	b118      	cbz	r0, 800da04 <__swbuf_r+0x32>
 800d9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800da00:	4638      	mov	r0, r7
 800da02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	6922      	ldr	r2, [r4, #16]
 800da08:	1a98      	subs	r0, r3, r2
 800da0a:	6963      	ldr	r3, [r4, #20]
 800da0c:	b2f6      	uxtb	r6, r6
 800da0e:	4283      	cmp	r3, r0
 800da10:	4637      	mov	r7, r6
 800da12:	dc05      	bgt.n	800da20 <__swbuf_r+0x4e>
 800da14:	4621      	mov	r1, r4
 800da16:	4628      	mov	r0, r5
 800da18:	f000 fe66 	bl	800e6e8 <_fflush_r>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d1ed      	bne.n	800d9fc <__swbuf_r+0x2a>
 800da20:	68a3      	ldr	r3, [r4, #8]
 800da22:	3b01      	subs	r3, #1
 800da24:	60a3      	str	r3, [r4, #8]
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	6022      	str	r2, [r4, #0]
 800da2c:	701e      	strb	r6, [r3, #0]
 800da2e:	6962      	ldr	r2, [r4, #20]
 800da30:	1c43      	adds	r3, r0, #1
 800da32:	429a      	cmp	r2, r3
 800da34:	d004      	beq.n	800da40 <__swbuf_r+0x6e>
 800da36:	89a3      	ldrh	r3, [r4, #12]
 800da38:	07db      	lsls	r3, r3, #31
 800da3a:	d5e1      	bpl.n	800da00 <__swbuf_r+0x2e>
 800da3c:	2e0a      	cmp	r6, #10
 800da3e:	d1df      	bne.n	800da00 <__swbuf_r+0x2e>
 800da40:	4621      	mov	r1, r4
 800da42:	4628      	mov	r0, r5
 800da44:	f000 fe50 	bl	800e6e8 <_fflush_r>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d0d9      	beq.n	800da00 <__swbuf_r+0x2e>
 800da4c:	e7d6      	b.n	800d9fc <__swbuf_r+0x2a>
	...

0800da50 <__swsetup_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4b29      	ldr	r3, [pc, #164]	@ (800daf8 <__swsetup_r+0xa8>)
 800da54:	4605      	mov	r5, r0
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	460c      	mov	r4, r1
 800da5a:	b118      	cbz	r0, 800da64 <__swsetup_r+0x14>
 800da5c:	6a03      	ldr	r3, [r0, #32]
 800da5e:	b90b      	cbnz	r3, 800da64 <__swsetup_r+0x14>
 800da60:	f7ff feae 	bl	800d7c0 <__sinit>
 800da64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da68:	0719      	lsls	r1, r3, #28
 800da6a:	d422      	bmi.n	800dab2 <__swsetup_r+0x62>
 800da6c:	06da      	lsls	r2, r3, #27
 800da6e:	d407      	bmi.n	800da80 <__swsetup_r+0x30>
 800da70:	2209      	movs	r2, #9
 800da72:	602a      	str	r2, [r5, #0]
 800da74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	e033      	b.n	800dae8 <__swsetup_r+0x98>
 800da80:	0758      	lsls	r0, r3, #29
 800da82:	d512      	bpl.n	800daaa <__swsetup_r+0x5a>
 800da84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da86:	b141      	cbz	r1, 800da9a <__swsetup_r+0x4a>
 800da88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da8c:	4299      	cmp	r1, r3
 800da8e:	d002      	beq.n	800da96 <__swsetup_r+0x46>
 800da90:	4628      	mov	r0, r5
 800da92:	f000 f933 	bl	800dcfc <_free_r>
 800da96:	2300      	movs	r3, #0
 800da98:	6363      	str	r3, [r4, #52]	@ 0x34
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	2300      	movs	r3, #0
 800daa4:	6063      	str	r3, [r4, #4]
 800daa6:	6923      	ldr	r3, [r4, #16]
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	f043 0308 	orr.w	r3, r3, #8
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	b94b      	cbnz	r3, 800daca <__swsetup_r+0x7a>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dabc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dac0:	d003      	beq.n	800daca <__swsetup_r+0x7a>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4628      	mov	r0, r5
 800dac6:	f000 fe5d 	bl	800e784 <__smakebuf_r>
 800daca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dace:	f013 0201 	ands.w	r2, r3, #1
 800dad2:	d00a      	beq.n	800daea <__swsetup_r+0x9a>
 800dad4:	2200      	movs	r2, #0
 800dad6:	60a2      	str	r2, [r4, #8]
 800dad8:	6962      	ldr	r2, [r4, #20]
 800dada:	4252      	negs	r2, r2
 800dadc:	61a2      	str	r2, [r4, #24]
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	b942      	cbnz	r2, 800daf4 <__swsetup_r+0xa4>
 800dae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dae6:	d1c5      	bne.n	800da74 <__swsetup_r+0x24>
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	0799      	lsls	r1, r3, #30
 800daec:	bf58      	it	pl
 800daee:	6962      	ldrpl	r2, [r4, #20]
 800daf0:	60a2      	str	r2, [r4, #8]
 800daf2:	e7f4      	b.n	800dade <__swsetup_r+0x8e>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7f7      	b.n	800dae8 <__swsetup_r+0x98>
 800daf8:	2000001c 	.word	0x2000001c

0800dafc <memset>:
 800dafc:	4402      	add	r2, r0
 800dafe:	4603      	mov	r3, r0
 800db00:	4293      	cmp	r3, r2
 800db02:	d100      	bne.n	800db06 <memset+0xa>
 800db04:	4770      	bx	lr
 800db06:	f803 1b01 	strb.w	r1, [r3], #1
 800db0a:	e7f9      	b.n	800db00 <memset+0x4>

0800db0c <strcat>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	4602      	mov	r2, r0
 800db10:	7814      	ldrb	r4, [r2, #0]
 800db12:	4613      	mov	r3, r2
 800db14:	3201      	adds	r2, #1
 800db16:	2c00      	cmp	r4, #0
 800db18:	d1fa      	bne.n	800db10 <strcat+0x4>
 800db1a:	3b01      	subs	r3, #1
 800db1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db24:	2a00      	cmp	r2, #0
 800db26:	d1f9      	bne.n	800db1c <strcat+0x10>
 800db28:	bd10      	pop	{r4, pc}
	...

0800db2c <_close_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d06      	ldr	r5, [pc, #24]	@ (800db48 <_close_r+0x1c>)
 800db30:	2300      	movs	r3, #0
 800db32:	4604      	mov	r4, r0
 800db34:	4608      	mov	r0, r1
 800db36:	602b      	str	r3, [r5, #0]
 800db38:	f7f4 f88d 	bl	8001c56 <_close>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_close_r+0x1a>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_close_r+0x1a>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	20006640 	.word	0x20006640

0800db4c <_reclaim_reent>:
 800db4c:	4b29      	ldr	r3, [pc, #164]	@ (800dbf4 <_reclaim_reent+0xa8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4283      	cmp	r3, r0
 800db52:	b570      	push	{r4, r5, r6, lr}
 800db54:	4604      	mov	r4, r0
 800db56:	d04b      	beq.n	800dbf0 <_reclaim_reent+0xa4>
 800db58:	69c3      	ldr	r3, [r0, #28]
 800db5a:	b1ab      	cbz	r3, 800db88 <_reclaim_reent+0x3c>
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	b16b      	cbz	r3, 800db7c <_reclaim_reent+0x30>
 800db60:	2500      	movs	r5, #0
 800db62:	69e3      	ldr	r3, [r4, #28]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	5959      	ldr	r1, [r3, r5]
 800db68:	2900      	cmp	r1, #0
 800db6a:	d13b      	bne.n	800dbe4 <_reclaim_reent+0x98>
 800db6c:	3504      	adds	r5, #4
 800db6e:	2d80      	cmp	r5, #128	@ 0x80
 800db70:	d1f7      	bne.n	800db62 <_reclaim_reent+0x16>
 800db72:	69e3      	ldr	r3, [r4, #28]
 800db74:	4620      	mov	r0, r4
 800db76:	68d9      	ldr	r1, [r3, #12]
 800db78:	f000 f8c0 	bl	800dcfc <_free_r>
 800db7c:	69e3      	ldr	r3, [r4, #28]
 800db7e:	6819      	ldr	r1, [r3, #0]
 800db80:	b111      	cbz	r1, 800db88 <_reclaim_reent+0x3c>
 800db82:	4620      	mov	r0, r4
 800db84:	f000 f8ba 	bl	800dcfc <_free_r>
 800db88:	6961      	ldr	r1, [r4, #20]
 800db8a:	b111      	cbz	r1, 800db92 <_reclaim_reent+0x46>
 800db8c:	4620      	mov	r0, r4
 800db8e:	f000 f8b5 	bl	800dcfc <_free_r>
 800db92:	69e1      	ldr	r1, [r4, #28]
 800db94:	b111      	cbz	r1, 800db9c <_reclaim_reent+0x50>
 800db96:	4620      	mov	r0, r4
 800db98:	f000 f8b0 	bl	800dcfc <_free_r>
 800db9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db9e:	b111      	cbz	r1, 800dba6 <_reclaim_reent+0x5a>
 800dba0:	4620      	mov	r0, r4
 800dba2:	f000 f8ab 	bl	800dcfc <_free_r>
 800dba6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dba8:	b111      	cbz	r1, 800dbb0 <_reclaim_reent+0x64>
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f000 f8a6 	bl	800dcfc <_free_r>
 800dbb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dbb2:	b111      	cbz	r1, 800dbba <_reclaim_reent+0x6e>
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f000 f8a1 	bl	800dcfc <_free_r>
 800dbba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dbbc:	b111      	cbz	r1, 800dbc4 <_reclaim_reent+0x78>
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 f89c 	bl	800dcfc <_free_r>
 800dbc4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dbc6:	b111      	cbz	r1, 800dbce <_reclaim_reent+0x82>
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f000 f897 	bl	800dcfc <_free_r>
 800dbce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dbd0:	b111      	cbz	r1, 800dbd8 <_reclaim_reent+0x8c>
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 f892 	bl	800dcfc <_free_r>
 800dbd8:	6a23      	ldr	r3, [r4, #32]
 800dbda:	b14b      	cbz	r3, 800dbf0 <_reclaim_reent+0xa4>
 800dbdc:	4620      	mov	r0, r4
 800dbde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbe2:	4718      	bx	r3
 800dbe4:	680e      	ldr	r6, [r1, #0]
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f000 f888 	bl	800dcfc <_free_r>
 800dbec:	4631      	mov	r1, r6
 800dbee:	e7bb      	b.n	800db68 <_reclaim_reent+0x1c>
 800dbf0:	bd70      	pop	{r4, r5, r6, pc}
 800dbf2:	bf00      	nop
 800dbf4:	2000001c 	.word	0x2000001c

0800dbf8 <_lseek_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4d07      	ldr	r5, [pc, #28]	@ (800dc18 <_lseek_r+0x20>)
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	4608      	mov	r0, r1
 800dc00:	4611      	mov	r1, r2
 800dc02:	2200      	movs	r2, #0
 800dc04:	602a      	str	r2, [r5, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	f7f4 f84c 	bl	8001ca4 <_lseek>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_lseek_r+0x1e>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_lseek_r+0x1e>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	20006640 	.word	0x20006640

0800dc1c <_read_r>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4d07      	ldr	r5, [pc, #28]	@ (800dc3c <_read_r+0x20>)
 800dc20:	4604      	mov	r4, r0
 800dc22:	4608      	mov	r0, r1
 800dc24:	4611      	mov	r1, r2
 800dc26:	2200      	movs	r2, #0
 800dc28:	602a      	str	r2, [r5, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f7f3 fff6 	bl	8001c1c <_read>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d102      	bne.n	800dc3a <_read_r+0x1e>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b103      	cbz	r3, 800dc3a <_read_r+0x1e>
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	20006640 	.word	0x20006640

0800dc40 <_sbrk_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4d06      	ldr	r5, [pc, #24]	@ (800dc5c <_sbrk_r+0x1c>)
 800dc44:	2300      	movs	r3, #0
 800dc46:	4604      	mov	r4, r0
 800dc48:	4608      	mov	r0, r1
 800dc4a:	602b      	str	r3, [r5, #0]
 800dc4c:	f7f4 f838 	bl	8001cc0 <_sbrk>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d102      	bne.n	800dc5a <_sbrk_r+0x1a>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	b103      	cbz	r3, 800dc5a <_sbrk_r+0x1a>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	20006640 	.word	0x20006640

0800dc60 <_write_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4d07      	ldr	r5, [pc, #28]	@ (800dc80 <_write_r+0x20>)
 800dc64:	4604      	mov	r4, r0
 800dc66:	4608      	mov	r0, r1
 800dc68:	4611      	mov	r1, r2
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	602a      	str	r2, [r5, #0]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f7f3 fa0d 	bl	800108e <_write>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_write_r+0x1e>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_write_r+0x1e>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	20006640 	.word	0x20006640

0800dc84 <__errno>:
 800dc84:	4b01      	ldr	r3, [pc, #4]	@ (800dc8c <__errno+0x8>)
 800dc86:	6818      	ldr	r0, [r3, #0]
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	2000001c 	.word	0x2000001c

0800dc90 <__libc_init_array>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	4d0d      	ldr	r5, [pc, #52]	@ (800dcc8 <__libc_init_array+0x38>)
 800dc94:	4c0d      	ldr	r4, [pc, #52]	@ (800dccc <__libc_init_array+0x3c>)
 800dc96:	1b64      	subs	r4, r4, r5
 800dc98:	10a4      	asrs	r4, r4, #2
 800dc9a:	2600      	movs	r6, #0
 800dc9c:	42a6      	cmp	r6, r4
 800dc9e:	d109      	bne.n	800dcb4 <__libc_init_array+0x24>
 800dca0:	4d0b      	ldr	r5, [pc, #44]	@ (800dcd0 <__libc_init_array+0x40>)
 800dca2:	4c0c      	ldr	r4, [pc, #48]	@ (800dcd4 <__libc_init_array+0x44>)
 800dca4:	f000 fe1c 	bl	800e8e0 <_init>
 800dca8:	1b64      	subs	r4, r4, r5
 800dcaa:	10a4      	asrs	r4, r4, #2
 800dcac:	2600      	movs	r6, #0
 800dcae:	42a6      	cmp	r6, r4
 800dcb0:	d105      	bne.n	800dcbe <__libc_init_array+0x2e>
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb8:	4798      	blx	r3
 800dcba:	3601      	adds	r6, #1
 800dcbc:	e7ee      	b.n	800dc9c <__libc_init_array+0xc>
 800dcbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc2:	4798      	blx	r3
 800dcc4:	3601      	adds	r6, #1
 800dcc6:	e7f2      	b.n	800dcae <__libc_init_array+0x1e>
 800dcc8:	0800f020 	.word	0x0800f020
 800dccc:	0800f020 	.word	0x0800f020
 800dcd0:	0800f020 	.word	0x0800f020
 800dcd4:	0800f024 	.word	0x0800f024

0800dcd8 <__retarget_lock_init_recursive>:
 800dcd8:	4770      	bx	lr

0800dcda <__retarget_lock_acquire_recursive>:
 800dcda:	4770      	bx	lr

0800dcdc <__retarget_lock_release_recursive>:
 800dcdc:	4770      	bx	lr

0800dcde <memcpy>:
 800dcde:	440a      	add	r2, r1
 800dce0:	4291      	cmp	r1, r2
 800dce2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dce6:	d100      	bne.n	800dcea <memcpy+0xc>
 800dce8:	4770      	bx	lr
 800dcea:	b510      	push	{r4, lr}
 800dcec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcf4:	4291      	cmp	r1, r2
 800dcf6:	d1f9      	bne.n	800dcec <memcpy+0xe>
 800dcf8:	bd10      	pop	{r4, pc}
	...

0800dcfc <_free_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	4605      	mov	r5, r0
 800dd00:	2900      	cmp	r1, #0
 800dd02:	d041      	beq.n	800dd88 <_free_r+0x8c>
 800dd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd08:	1f0c      	subs	r4, r1, #4
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bfb8      	it	lt
 800dd0e:	18e4      	addlt	r4, r4, r3
 800dd10:	f7ff fcbe 	bl	800d690 <__malloc_lock>
 800dd14:	4a1d      	ldr	r2, [pc, #116]	@ (800dd8c <_free_r+0x90>)
 800dd16:	6813      	ldr	r3, [r2, #0]
 800dd18:	b933      	cbnz	r3, 800dd28 <_free_r+0x2c>
 800dd1a:	6063      	str	r3, [r4, #4]
 800dd1c:	6014      	str	r4, [r2, #0]
 800dd1e:	4628      	mov	r0, r5
 800dd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd24:	f7ff bcba 	b.w	800d69c <__malloc_unlock>
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	d908      	bls.n	800dd3e <_free_r+0x42>
 800dd2c:	6820      	ldr	r0, [r4, #0]
 800dd2e:	1821      	adds	r1, r4, r0
 800dd30:	428b      	cmp	r3, r1
 800dd32:	bf01      	itttt	eq
 800dd34:	6819      	ldreq	r1, [r3, #0]
 800dd36:	685b      	ldreq	r3, [r3, #4]
 800dd38:	1809      	addeq	r1, r1, r0
 800dd3a:	6021      	streq	r1, [r4, #0]
 800dd3c:	e7ed      	b.n	800dd1a <_free_r+0x1e>
 800dd3e:	461a      	mov	r2, r3
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	b10b      	cbz	r3, 800dd48 <_free_r+0x4c>
 800dd44:	42a3      	cmp	r3, r4
 800dd46:	d9fa      	bls.n	800dd3e <_free_r+0x42>
 800dd48:	6811      	ldr	r1, [r2, #0]
 800dd4a:	1850      	adds	r0, r2, r1
 800dd4c:	42a0      	cmp	r0, r4
 800dd4e:	d10b      	bne.n	800dd68 <_free_r+0x6c>
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	4401      	add	r1, r0
 800dd54:	1850      	adds	r0, r2, r1
 800dd56:	4283      	cmp	r3, r0
 800dd58:	6011      	str	r1, [r2, #0]
 800dd5a:	d1e0      	bne.n	800dd1e <_free_r+0x22>
 800dd5c:	6818      	ldr	r0, [r3, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	6053      	str	r3, [r2, #4]
 800dd62:	4408      	add	r0, r1
 800dd64:	6010      	str	r0, [r2, #0]
 800dd66:	e7da      	b.n	800dd1e <_free_r+0x22>
 800dd68:	d902      	bls.n	800dd70 <_free_r+0x74>
 800dd6a:	230c      	movs	r3, #12
 800dd6c:	602b      	str	r3, [r5, #0]
 800dd6e:	e7d6      	b.n	800dd1e <_free_r+0x22>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	1821      	adds	r1, r4, r0
 800dd74:	428b      	cmp	r3, r1
 800dd76:	bf04      	itt	eq
 800dd78:	6819      	ldreq	r1, [r3, #0]
 800dd7a:	685b      	ldreq	r3, [r3, #4]
 800dd7c:	6063      	str	r3, [r4, #4]
 800dd7e:	bf04      	itt	eq
 800dd80:	1809      	addeq	r1, r1, r0
 800dd82:	6021      	streq	r1, [r4, #0]
 800dd84:	6054      	str	r4, [r2, #4]
 800dd86:	e7ca      	b.n	800dd1e <_free_r+0x22>
 800dd88:	bd38      	pop	{r3, r4, r5, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20006500 	.word	0x20006500

0800dd90 <__ssputs_r>:
 800dd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd94:	688e      	ldr	r6, [r1, #8]
 800dd96:	461f      	mov	r7, r3
 800dd98:	42be      	cmp	r6, r7
 800dd9a:	680b      	ldr	r3, [r1, #0]
 800dd9c:	4682      	mov	sl, r0
 800dd9e:	460c      	mov	r4, r1
 800dda0:	4690      	mov	r8, r2
 800dda2:	d82d      	bhi.n	800de00 <__ssputs_r+0x70>
 800dda4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dda8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddac:	d026      	beq.n	800ddfc <__ssputs_r+0x6c>
 800ddae:	6965      	ldr	r5, [r4, #20]
 800ddb0:	6909      	ldr	r1, [r1, #16]
 800ddb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddb6:	eba3 0901 	sub.w	r9, r3, r1
 800ddba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddbe:	1c7b      	adds	r3, r7, #1
 800ddc0:	444b      	add	r3, r9
 800ddc2:	106d      	asrs	r5, r5, #1
 800ddc4:	429d      	cmp	r5, r3
 800ddc6:	bf38      	it	cc
 800ddc8:	461d      	movcc	r5, r3
 800ddca:	0553      	lsls	r3, r2, #21
 800ddcc:	d527      	bpl.n	800de1e <__ssputs_r+0x8e>
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7ff fbde 	bl	800d590 <_malloc_r>
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	b360      	cbz	r0, 800de32 <__ssputs_r+0xa2>
 800ddd8:	6921      	ldr	r1, [r4, #16]
 800ddda:	464a      	mov	r2, r9
 800dddc:	f7ff ff7f 	bl	800dcde <memcpy>
 800dde0:	89a3      	ldrh	r3, [r4, #12]
 800dde2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dde6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	6126      	str	r6, [r4, #16]
 800ddee:	6165      	str	r5, [r4, #20]
 800ddf0:	444e      	add	r6, r9
 800ddf2:	eba5 0509 	sub.w	r5, r5, r9
 800ddf6:	6026      	str	r6, [r4, #0]
 800ddf8:	60a5      	str	r5, [r4, #8]
 800ddfa:	463e      	mov	r6, r7
 800ddfc:	42be      	cmp	r6, r7
 800ddfe:	d900      	bls.n	800de02 <__ssputs_r+0x72>
 800de00:	463e      	mov	r6, r7
 800de02:	6820      	ldr	r0, [r4, #0]
 800de04:	4632      	mov	r2, r6
 800de06:	4641      	mov	r1, r8
 800de08:	f000 fcf8 	bl	800e7fc <memmove>
 800de0c:	68a3      	ldr	r3, [r4, #8]
 800de0e:	1b9b      	subs	r3, r3, r6
 800de10:	60a3      	str	r3, [r4, #8]
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	4433      	add	r3, r6
 800de16:	6023      	str	r3, [r4, #0]
 800de18:	2000      	movs	r0, #0
 800de1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de1e:	462a      	mov	r2, r5
 800de20:	f000 fd28 	bl	800e874 <_realloc_r>
 800de24:	4606      	mov	r6, r0
 800de26:	2800      	cmp	r0, #0
 800de28:	d1e0      	bne.n	800ddec <__ssputs_r+0x5c>
 800de2a:	6921      	ldr	r1, [r4, #16]
 800de2c:	4650      	mov	r0, sl
 800de2e:	f7ff ff65 	bl	800dcfc <_free_r>
 800de32:	230c      	movs	r3, #12
 800de34:	f8ca 3000 	str.w	r3, [sl]
 800de38:	89a3      	ldrh	r3, [r4, #12]
 800de3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de3e:	81a3      	strh	r3, [r4, #12]
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	e7e9      	b.n	800de1a <__ssputs_r+0x8a>
	...

0800de48 <_svfiprintf_r>:
 800de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4c:	4698      	mov	r8, r3
 800de4e:	898b      	ldrh	r3, [r1, #12]
 800de50:	061b      	lsls	r3, r3, #24
 800de52:	b09d      	sub	sp, #116	@ 0x74
 800de54:	4607      	mov	r7, r0
 800de56:	460d      	mov	r5, r1
 800de58:	4614      	mov	r4, r2
 800de5a:	d510      	bpl.n	800de7e <_svfiprintf_r+0x36>
 800de5c:	690b      	ldr	r3, [r1, #16]
 800de5e:	b973      	cbnz	r3, 800de7e <_svfiprintf_r+0x36>
 800de60:	2140      	movs	r1, #64	@ 0x40
 800de62:	f7ff fb95 	bl	800d590 <_malloc_r>
 800de66:	6028      	str	r0, [r5, #0]
 800de68:	6128      	str	r0, [r5, #16]
 800de6a:	b930      	cbnz	r0, 800de7a <_svfiprintf_r+0x32>
 800de6c:	230c      	movs	r3, #12
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	f04f 30ff 	mov.w	r0, #4294967295
 800de74:	b01d      	add	sp, #116	@ 0x74
 800de76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7a:	2340      	movs	r3, #64	@ 0x40
 800de7c:	616b      	str	r3, [r5, #20]
 800de7e:	2300      	movs	r3, #0
 800de80:	9309      	str	r3, [sp, #36]	@ 0x24
 800de82:	2320      	movs	r3, #32
 800de84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de88:	f8cd 800c 	str.w	r8, [sp, #12]
 800de8c:	2330      	movs	r3, #48	@ 0x30
 800de8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e02c <_svfiprintf_r+0x1e4>
 800de92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de96:	f04f 0901 	mov.w	r9, #1
 800de9a:	4623      	mov	r3, r4
 800de9c:	469a      	mov	sl, r3
 800de9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dea2:	b10a      	cbz	r2, 800dea8 <_svfiprintf_r+0x60>
 800dea4:	2a25      	cmp	r2, #37	@ 0x25
 800dea6:	d1f9      	bne.n	800de9c <_svfiprintf_r+0x54>
 800dea8:	ebba 0b04 	subs.w	fp, sl, r4
 800deac:	d00b      	beq.n	800dec6 <_svfiprintf_r+0x7e>
 800deae:	465b      	mov	r3, fp
 800deb0:	4622      	mov	r2, r4
 800deb2:	4629      	mov	r1, r5
 800deb4:	4638      	mov	r0, r7
 800deb6:	f7ff ff6b 	bl	800dd90 <__ssputs_r>
 800deba:	3001      	adds	r0, #1
 800debc:	f000 80a7 	beq.w	800e00e <_svfiprintf_r+0x1c6>
 800dec0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dec2:	445a      	add	r2, fp
 800dec4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dec6:	f89a 3000 	ldrb.w	r3, [sl]
 800deca:	2b00      	cmp	r3, #0
 800decc:	f000 809f 	beq.w	800e00e <_svfiprintf_r+0x1c6>
 800ded0:	2300      	movs	r3, #0
 800ded2:	f04f 32ff 	mov.w	r2, #4294967295
 800ded6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deda:	f10a 0a01 	add.w	sl, sl, #1
 800dede:	9304      	str	r3, [sp, #16]
 800dee0:	9307      	str	r3, [sp, #28]
 800dee2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dee6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dee8:	4654      	mov	r4, sl
 800deea:	2205      	movs	r2, #5
 800deec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def0:	484e      	ldr	r0, [pc, #312]	@ (800e02c <_svfiprintf_r+0x1e4>)
 800def2:	f7f2 f9a5 	bl	8000240 <memchr>
 800def6:	9a04      	ldr	r2, [sp, #16]
 800def8:	b9d8      	cbnz	r0, 800df32 <_svfiprintf_r+0xea>
 800defa:	06d0      	lsls	r0, r2, #27
 800defc:	bf44      	itt	mi
 800defe:	2320      	movmi	r3, #32
 800df00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df04:	0711      	lsls	r1, r2, #28
 800df06:	bf44      	itt	mi
 800df08:	232b      	movmi	r3, #43	@ 0x2b
 800df0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df0e:	f89a 3000 	ldrb.w	r3, [sl]
 800df12:	2b2a      	cmp	r3, #42	@ 0x2a
 800df14:	d015      	beq.n	800df42 <_svfiprintf_r+0xfa>
 800df16:	9a07      	ldr	r2, [sp, #28]
 800df18:	4654      	mov	r4, sl
 800df1a:	2000      	movs	r0, #0
 800df1c:	f04f 0c0a 	mov.w	ip, #10
 800df20:	4621      	mov	r1, r4
 800df22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df26:	3b30      	subs	r3, #48	@ 0x30
 800df28:	2b09      	cmp	r3, #9
 800df2a:	d94b      	bls.n	800dfc4 <_svfiprintf_r+0x17c>
 800df2c:	b1b0      	cbz	r0, 800df5c <_svfiprintf_r+0x114>
 800df2e:	9207      	str	r2, [sp, #28]
 800df30:	e014      	b.n	800df5c <_svfiprintf_r+0x114>
 800df32:	eba0 0308 	sub.w	r3, r0, r8
 800df36:	fa09 f303 	lsl.w	r3, r9, r3
 800df3a:	4313      	orrs	r3, r2
 800df3c:	9304      	str	r3, [sp, #16]
 800df3e:	46a2      	mov	sl, r4
 800df40:	e7d2      	b.n	800dee8 <_svfiprintf_r+0xa0>
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	1d19      	adds	r1, r3, #4
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	9103      	str	r1, [sp, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	bfbb      	ittet	lt
 800df4e:	425b      	neglt	r3, r3
 800df50:	f042 0202 	orrlt.w	r2, r2, #2
 800df54:	9307      	strge	r3, [sp, #28]
 800df56:	9307      	strlt	r3, [sp, #28]
 800df58:	bfb8      	it	lt
 800df5a:	9204      	strlt	r2, [sp, #16]
 800df5c:	7823      	ldrb	r3, [r4, #0]
 800df5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800df60:	d10a      	bne.n	800df78 <_svfiprintf_r+0x130>
 800df62:	7863      	ldrb	r3, [r4, #1]
 800df64:	2b2a      	cmp	r3, #42	@ 0x2a
 800df66:	d132      	bne.n	800dfce <_svfiprintf_r+0x186>
 800df68:	9b03      	ldr	r3, [sp, #12]
 800df6a:	1d1a      	adds	r2, r3, #4
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	9203      	str	r2, [sp, #12]
 800df70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df74:	3402      	adds	r4, #2
 800df76:	9305      	str	r3, [sp, #20]
 800df78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e03c <_svfiprintf_r+0x1f4>
 800df7c:	7821      	ldrb	r1, [r4, #0]
 800df7e:	2203      	movs	r2, #3
 800df80:	4650      	mov	r0, sl
 800df82:	f7f2 f95d 	bl	8000240 <memchr>
 800df86:	b138      	cbz	r0, 800df98 <_svfiprintf_r+0x150>
 800df88:	9b04      	ldr	r3, [sp, #16]
 800df8a:	eba0 000a 	sub.w	r0, r0, sl
 800df8e:	2240      	movs	r2, #64	@ 0x40
 800df90:	4082      	lsls	r2, r0
 800df92:	4313      	orrs	r3, r2
 800df94:	3401      	adds	r4, #1
 800df96:	9304      	str	r3, [sp, #16]
 800df98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9c:	4824      	ldr	r0, [pc, #144]	@ (800e030 <_svfiprintf_r+0x1e8>)
 800df9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfa2:	2206      	movs	r2, #6
 800dfa4:	f7f2 f94c 	bl	8000240 <memchr>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d036      	beq.n	800e01a <_svfiprintf_r+0x1d2>
 800dfac:	4b21      	ldr	r3, [pc, #132]	@ (800e034 <_svfiprintf_r+0x1ec>)
 800dfae:	bb1b      	cbnz	r3, 800dff8 <_svfiprintf_r+0x1b0>
 800dfb0:	9b03      	ldr	r3, [sp, #12]
 800dfb2:	3307      	adds	r3, #7
 800dfb4:	f023 0307 	bic.w	r3, r3, #7
 800dfb8:	3308      	adds	r3, #8
 800dfba:	9303      	str	r3, [sp, #12]
 800dfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfbe:	4433      	add	r3, r6
 800dfc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfc2:	e76a      	b.n	800de9a <_svfiprintf_r+0x52>
 800dfc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfc8:	460c      	mov	r4, r1
 800dfca:	2001      	movs	r0, #1
 800dfcc:	e7a8      	b.n	800df20 <_svfiprintf_r+0xd8>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	3401      	adds	r4, #1
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	f04f 0c0a 	mov.w	ip, #10
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfe0:	3a30      	subs	r2, #48	@ 0x30
 800dfe2:	2a09      	cmp	r2, #9
 800dfe4:	d903      	bls.n	800dfee <_svfiprintf_r+0x1a6>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d0c6      	beq.n	800df78 <_svfiprintf_r+0x130>
 800dfea:	9105      	str	r1, [sp, #20]
 800dfec:	e7c4      	b.n	800df78 <_svfiprintf_r+0x130>
 800dfee:	fb0c 2101 	mla	r1, ip, r1, r2
 800dff2:	4604      	mov	r4, r0
 800dff4:	2301      	movs	r3, #1
 800dff6:	e7f0      	b.n	800dfda <_svfiprintf_r+0x192>
 800dff8:	ab03      	add	r3, sp, #12
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	462a      	mov	r2, r5
 800dffe:	4b0e      	ldr	r3, [pc, #56]	@ (800e038 <_svfiprintf_r+0x1f0>)
 800e000:	a904      	add	r1, sp, #16
 800e002:	4638      	mov	r0, r7
 800e004:	f3af 8000 	nop.w
 800e008:	1c42      	adds	r2, r0, #1
 800e00a:	4606      	mov	r6, r0
 800e00c:	d1d6      	bne.n	800dfbc <_svfiprintf_r+0x174>
 800e00e:	89ab      	ldrh	r3, [r5, #12]
 800e010:	065b      	lsls	r3, r3, #25
 800e012:	f53f af2d 	bmi.w	800de70 <_svfiprintf_r+0x28>
 800e016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e018:	e72c      	b.n	800de74 <_svfiprintf_r+0x2c>
 800e01a:	ab03      	add	r3, sp, #12
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	462a      	mov	r2, r5
 800e020:	4b05      	ldr	r3, [pc, #20]	@ (800e038 <_svfiprintf_r+0x1f0>)
 800e022:	a904      	add	r1, sp, #16
 800e024:	4638      	mov	r0, r7
 800e026:	f000 f9bb 	bl	800e3a0 <_printf_i>
 800e02a:	e7ed      	b.n	800e008 <_svfiprintf_r+0x1c0>
 800e02c:	0800efe4 	.word	0x0800efe4
 800e030:	0800efee 	.word	0x0800efee
 800e034:	00000000 	.word	0x00000000
 800e038:	0800dd91 	.word	0x0800dd91
 800e03c:	0800efea 	.word	0x0800efea

0800e040 <__sfputc_r>:
 800e040:	6893      	ldr	r3, [r2, #8]
 800e042:	3b01      	subs	r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	b410      	push	{r4}
 800e048:	6093      	str	r3, [r2, #8]
 800e04a:	da08      	bge.n	800e05e <__sfputc_r+0x1e>
 800e04c:	6994      	ldr	r4, [r2, #24]
 800e04e:	42a3      	cmp	r3, r4
 800e050:	db01      	blt.n	800e056 <__sfputc_r+0x16>
 800e052:	290a      	cmp	r1, #10
 800e054:	d103      	bne.n	800e05e <__sfputc_r+0x1e>
 800e056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e05a:	f7ff bcba 	b.w	800d9d2 <__swbuf_r>
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	1c58      	adds	r0, r3, #1
 800e062:	6010      	str	r0, [r2, #0]
 800e064:	7019      	strb	r1, [r3, #0]
 800e066:	4608      	mov	r0, r1
 800e068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <__sfputs_r>:
 800e06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e070:	4606      	mov	r6, r0
 800e072:	460f      	mov	r7, r1
 800e074:	4614      	mov	r4, r2
 800e076:	18d5      	adds	r5, r2, r3
 800e078:	42ac      	cmp	r4, r5
 800e07a:	d101      	bne.n	800e080 <__sfputs_r+0x12>
 800e07c:	2000      	movs	r0, #0
 800e07e:	e007      	b.n	800e090 <__sfputs_r+0x22>
 800e080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e084:	463a      	mov	r2, r7
 800e086:	4630      	mov	r0, r6
 800e088:	f7ff ffda 	bl	800e040 <__sfputc_r>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d1f3      	bne.n	800e078 <__sfputs_r+0xa>
 800e090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e094 <_vfiprintf_r>:
 800e094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e098:	460d      	mov	r5, r1
 800e09a:	b09d      	sub	sp, #116	@ 0x74
 800e09c:	4614      	mov	r4, r2
 800e09e:	4698      	mov	r8, r3
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	b118      	cbz	r0, 800e0ac <_vfiprintf_r+0x18>
 800e0a4:	6a03      	ldr	r3, [r0, #32]
 800e0a6:	b90b      	cbnz	r3, 800e0ac <_vfiprintf_r+0x18>
 800e0a8:	f7ff fb8a 	bl	800d7c0 <__sinit>
 800e0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0ae:	07d9      	lsls	r1, r3, #31
 800e0b0:	d405      	bmi.n	800e0be <_vfiprintf_r+0x2a>
 800e0b2:	89ab      	ldrh	r3, [r5, #12]
 800e0b4:	059a      	lsls	r2, r3, #22
 800e0b6:	d402      	bmi.n	800e0be <_vfiprintf_r+0x2a>
 800e0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ba:	f7ff fe0e 	bl	800dcda <__retarget_lock_acquire_recursive>
 800e0be:	89ab      	ldrh	r3, [r5, #12]
 800e0c0:	071b      	lsls	r3, r3, #28
 800e0c2:	d501      	bpl.n	800e0c8 <_vfiprintf_r+0x34>
 800e0c4:	692b      	ldr	r3, [r5, #16]
 800e0c6:	b99b      	cbnz	r3, 800e0f0 <_vfiprintf_r+0x5c>
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f7ff fcc0 	bl	800da50 <__swsetup_r>
 800e0d0:	b170      	cbz	r0, 800e0f0 <_vfiprintf_r+0x5c>
 800e0d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0d4:	07dc      	lsls	r4, r3, #31
 800e0d6:	d504      	bpl.n	800e0e2 <_vfiprintf_r+0x4e>
 800e0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0dc:	b01d      	add	sp, #116	@ 0x74
 800e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e2:	89ab      	ldrh	r3, [r5, #12]
 800e0e4:	0598      	lsls	r0, r3, #22
 800e0e6:	d4f7      	bmi.n	800e0d8 <_vfiprintf_r+0x44>
 800e0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ea:	f7ff fdf7 	bl	800dcdc <__retarget_lock_release_recursive>
 800e0ee:	e7f3      	b.n	800e0d8 <_vfiprintf_r+0x44>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f4:	2320      	movs	r3, #32
 800e0f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0fe:	2330      	movs	r3, #48	@ 0x30
 800e100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2b0 <_vfiprintf_r+0x21c>
 800e104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e108:	f04f 0901 	mov.w	r9, #1
 800e10c:	4623      	mov	r3, r4
 800e10e:	469a      	mov	sl, r3
 800e110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e114:	b10a      	cbz	r2, 800e11a <_vfiprintf_r+0x86>
 800e116:	2a25      	cmp	r2, #37	@ 0x25
 800e118:	d1f9      	bne.n	800e10e <_vfiprintf_r+0x7a>
 800e11a:	ebba 0b04 	subs.w	fp, sl, r4
 800e11e:	d00b      	beq.n	800e138 <_vfiprintf_r+0xa4>
 800e120:	465b      	mov	r3, fp
 800e122:	4622      	mov	r2, r4
 800e124:	4629      	mov	r1, r5
 800e126:	4630      	mov	r0, r6
 800e128:	f7ff ffa1 	bl	800e06e <__sfputs_r>
 800e12c:	3001      	adds	r0, #1
 800e12e:	f000 80a7 	beq.w	800e280 <_vfiprintf_r+0x1ec>
 800e132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e134:	445a      	add	r2, fp
 800e136:	9209      	str	r2, [sp, #36]	@ 0x24
 800e138:	f89a 3000 	ldrb.w	r3, [sl]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 809f 	beq.w	800e280 <_vfiprintf_r+0x1ec>
 800e142:	2300      	movs	r3, #0
 800e144:	f04f 32ff 	mov.w	r2, #4294967295
 800e148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e14c:	f10a 0a01 	add.w	sl, sl, #1
 800e150:	9304      	str	r3, [sp, #16]
 800e152:	9307      	str	r3, [sp, #28]
 800e154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e158:	931a      	str	r3, [sp, #104]	@ 0x68
 800e15a:	4654      	mov	r4, sl
 800e15c:	2205      	movs	r2, #5
 800e15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e162:	4853      	ldr	r0, [pc, #332]	@ (800e2b0 <_vfiprintf_r+0x21c>)
 800e164:	f7f2 f86c 	bl	8000240 <memchr>
 800e168:	9a04      	ldr	r2, [sp, #16]
 800e16a:	b9d8      	cbnz	r0, 800e1a4 <_vfiprintf_r+0x110>
 800e16c:	06d1      	lsls	r1, r2, #27
 800e16e:	bf44      	itt	mi
 800e170:	2320      	movmi	r3, #32
 800e172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e176:	0713      	lsls	r3, r2, #28
 800e178:	bf44      	itt	mi
 800e17a:	232b      	movmi	r3, #43	@ 0x2b
 800e17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e180:	f89a 3000 	ldrb.w	r3, [sl]
 800e184:	2b2a      	cmp	r3, #42	@ 0x2a
 800e186:	d015      	beq.n	800e1b4 <_vfiprintf_r+0x120>
 800e188:	9a07      	ldr	r2, [sp, #28]
 800e18a:	4654      	mov	r4, sl
 800e18c:	2000      	movs	r0, #0
 800e18e:	f04f 0c0a 	mov.w	ip, #10
 800e192:	4621      	mov	r1, r4
 800e194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e198:	3b30      	subs	r3, #48	@ 0x30
 800e19a:	2b09      	cmp	r3, #9
 800e19c:	d94b      	bls.n	800e236 <_vfiprintf_r+0x1a2>
 800e19e:	b1b0      	cbz	r0, 800e1ce <_vfiprintf_r+0x13a>
 800e1a0:	9207      	str	r2, [sp, #28]
 800e1a2:	e014      	b.n	800e1ce <_vfiprintf_r+0x13a>
 800e1a4:	eba0 0308 	sub.w	r3, r0, r8
 800e1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	9304      	str	r3, [sp, #16]
 800e1b0:	46a2      	mov	sl, r4
 800e1b2:	e7d2      	b.n	800e15a <_vfiprintf_r+0xc6>
 800e1b4:	9b03      	ldr	r3, [sp, #12]
 800e1b6:	1d19      	adds	r1, r3, #4
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	9103      	str	r1, [sp, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	bfbb      	ittet	lt
 800e1c0:	425b      	neglt	r3, r3
 800e1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1c6:	9307      	strge	r3, [sp, #28]
 800e1c8:	9307      	strlt	r3, [sp, #28]
 800e1ca:	bfb8      	it	lt
 800e1cc:	9204      	strlt	r2, [sp, #16]
 800e1ce:	7823      	ldrb	r3, [r4, #0]
 800e1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1d2:	d10a      	bne.n	800e1ea <_vfiprintf_r+0x156>
 800e1d4:	7863      	ldrb	r3, [r4, #1]
 800e1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d8:	d132      	bne.n	800e240 <_vfiprintf_r+0x1ac>
 800e1da:	9b03      	ldr	r3, [sp, #12]
 800e1dc:	1d1a      	adds	r2, r3, #4
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	9203      	str	r2, [sp, #12]
 800e1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1e6:	3402      	adds	r4, #2
 800e1e8:	9305      	str	r3, [sp, #20]
 800e1ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2c0 <_vfiprintf_r+0x22c>
 800e1ee:	7821      	ldrb	r1, [r4, #0]
 800e1f0:	2203      	movs	r2, #3
 800e1f2:	4650      	mov	r0, sl
 800e1f4:	f7f2 f824 	bl	8000240 <memchr>
 800e1f8:	b138      	cbz	r0, 800e20a <_vfiprintf_r+0x176>
 800e1fa:	9b04      	ldr	r3, [sp, #16]
 800e1fc:	eba0 000a 	sub.w	r0, r0, sl
 800e200:	2240      	movs	r2, #64	@ 0x40
 800e202:	4082      	lsls	r2, r0
 800e204:	4313      	orrs	r3, r2
 800e206:	3401      	adds	r4, #1
 800e208:	9304      	str	r3, [sp, #16]
 800e20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20e:	4829      	ldr	r0, [pc, #164]	@ (800e2b4 <_vfiprintf_r+0x220>)
 800e210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e214:	2206      	movs	r2, #6
 800e216:	f7f2 f813 	bl	8000240 <memchr>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d03f      	beq.n	800e29e <_vfiprintf_r+0x20a>
 800e21e:	4b26      	ldr	r3, [pc, #152]	@ (800e2b8 <_vfiprintf_r+0x224>)
 800e220:	bb1b      	cbnz	r3, 800e26a <_vfiprintf_r+0x1d6>
 800e222:	9b03      	ldr	r3, [sp, #12]
 800e224:	3307      	adds	r3, #7
 800e226:	f023 0307 	bic.w	r3, r3, #7
 800e22a:	3308      	adds	r3, #8
 800e22c:	9303      	str	r3, [sp, #12]
 800e22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e230:	443b      	add	r3, r7
 800e232:	9309      	str	r3, [sp, #36]	@ 0x24
 800e234:	e76a      	b.n	800e10c <_vfiprintf_r+0x78>
 800e236:	fb0c 3202 	mla	r2, ip, r2, r3
 800e23a:	460c      	mov	r4, r1
 800e23c:	2001      	movs	r0, #1
 800e23e:	e7a8      	b.n	800e192 <_vfiprintf_r+0xfe>
 800e240:	2300      	movs	r3, #0
 800e242:	3401      	adds	r4, #1
 800e244:	9305      	str	r3, [sp, #20]
 800e246:	4619      	mov	r1, r3
 800e248:	f04f 0c0a 	mov.w	ip, #10
 800e24c:	4620      	mov	r0, r4
 800e24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e252:	3a30      	subs	r2, #48	@ 0x30
 800e254:	2a09      	cmp	r2, #9
 800e256:	d903      	bls.n	800e260 <_vfiprintf_r+0x1cc>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d0c6      	beq.n	800e1ea <_vfiprintf_r+0x156>
 800e25c:	9105      	str	r1, [sp, #20]
 800e25e:	e7c4      	b.n	800e1ea <_vfiprintf_r+0x156>
 800e260:	fb0c 2101 	mla	r1, ip, r1, r2
 800e264:	4604      	mov	r4, r0
 800e266:	2301      	movs	r3, #1
 800e268:	e7f0      	b.n	800e24c <_vfiprintf_r+0x1b8>
 800e26a:	ab03      	add	r3, sp, #12
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	462a      	mov	r2, r5
 800e270:	4b12      	ldr	r3, [pc, #72]	@ (800e2bc <_vfiprintf_r+0x228>)
 800e272:	a904      	add	r1, sp, #16
 800e274:	4630      	mov	r0, r6
 800e276:	f3af 8000 	nop.w
 800e27a:	4607      	mov	r7, r0
 800e27c:	1c78      	adds	r0, r7, #1
 800e27e:	d1d6      	bne.n	800e22e <_vfiprintf_r+0x19a>
 800e280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e282:	07d9      	lsls	r1, r3, #31
 800e284:	d405      	bmi.n	800e292 <_vfiprintf_r+0x1fe>
 800e286:	89ab      	ldrh	r3, [r5, #12]
 800e288:	059a      	lsls	r2, r3, #22
 800e28a:	d402      	bmi.n	800e292 <_vfiprintf_r+0x1fe>
 800e28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e28e:	f7ff fd25 	bl	800dcdc <__retarget_lock_release_recursive>
 800e292:	89ab      	ldrh	r3, [r5, #12]
 800e294:	065b      	lsls	r3, r3, #25
 800e296:	f53f af1f 	bmi.w	800e0d8 <_vfiprintf_r+0x44>
 800e29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e29c:	e71e      	b.n	800e0dc <_vfiprintf_r+0x48>
 800e29e:	ab03      	add	r3, sp, #12
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	4b05      	ldr	r3, [pc, #20]	@ (800e2bc <_vfiprintf_r+0x228>)
 800e2a6:	a904      	add	r1, sp, #16
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f000 f879 	bl	800e3a0 <_printf_i>
 800e2ae:	e7e4      	b.n	800e27a <_vfiprintf_r+0x1e6>
 800e2b0:	0800efe4 	.word	0x0800efe4
 800e2b4:	0800efee 	.word	0x0800efee
 800e2b8:	00000000 	.word	0x00000000
 800e2bc:	0800e06f 	.word	0x0800e06f
 800e2c0:	0800efea 	.word	0x0800efea

0800e2c4 <_printf_common>:
 800e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	4616      	mov	r6, r2
 800e2ca:	4698      	mov	r8, r3
 800e2cc:	688a      	ldr	r2, [r1, #8]
 800e2ce:	690b      	ldr	r3, [r1, #16]
 800e2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	bfb8      	it	lt
 800e2d8:	4613      	movlt	r3, r2
 800e2da:	6033      	str	r3, [r6, #0]
 800e2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2e0:	4607      	mov	r7, r0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	b10a      	cbz	r2, 800e2ea <_printf_common+0x26>
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	6033      	str	r3, [r6, #0]
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	0699      	lsls	r1, r3, #26
 800e2ee:	bf42      	ittt	mi
 800e2f0:	6833      	ldrmi	r3, [r6, #0]
 800e2f2:	3302      	addmi	r3, #2
 800e2f4:	6033      	strmi	r3, [r6, #0]
 800e2f6:	6825      	ldr	r5, [r4, #0]
 800e2f8:	f015 0506 	ands.w	r5, r5, #6
 800e2fc:	d106      	bne.n	800e30c <_printf_common+0x48>
 800e2fe:	f104 0a19 	add.w	sl, r4, #25
 800e302:	68e3      	ldr	r3, [r4, #12]
 800e304:	6832      	ldr	r2, [r6, #0]
 800e306:	1a9b      	subs	r3, r3, r2
 800e308:	42ab      	cmp	r3, r5
 800e30a:	dc26      	bgt.n	800e35a <_printf_common+0x96>
 800e30c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e310:	6822      	ldr	r2, [r4, #0]
 800e312:	3b00      	subs	r3, #0
 800e314:	bf18      	it	ne
 800e316:	2301      	movne	r3, #1
 800e318:	0692      	lsls	r2, r2, #26
 800e31a:	d42b      	bmi.n	800e374 <_printf_common+0xb0>
 800e31c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e320:	4641      	mov	r1, r8
 800e322:	4638      	mov	r0, r7
 800e324:	47c8      	blx	r9
 800e326:	3001      	adds	r0, #1
 800e328:	d01e      	beq.n	800e368 <_printf_common+0xa4>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	6922      	ldr	r2, [r4, #16]
 800e32e:	f003 0306 	and.w	r3, r3, #6
 800e332:	2b04      	cmp	r3, #4
 800e334:	bf02      	ittt	eq
 800e336:	68e5      	ldreq	r5, [r4, #12]
 800e338:	6833      	ldreq	r3, [r6, #0]
 800e33a:	1aed      	subeq	r5, r5, r3
 800e33c:	68a3      	ldr	r3, [r4, #8]
 800e33e:	bf0c      	ite	eq
 800e340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e344:	2500      	movne	r5, #0
 800e346:	4293      	cmp	r3, r2
 800e348:	bfc4      	itt	gt
 800e34a:	1a9b      	subgt	r3, r3, r2
 800e34c:	18ed      	addgt	r5, r5, r3
 800e34e:	2600      	movs	r6, #0
 800e350:	341a      	adds	r4, #26
 800e352:	42b5      	cmp	r5, r6
 800e354:	d11a      	bne.n	800e38c <_printf_common+0xc8>
 800e356:	2000      	movs	r0, #0
 800e358:	e008      	b.n	800e36c <_printf_common+0xa8>
 800e35a:	2301      	movs	r3, #1
 800e35c:	4652      	mov	r2, sl
 800e35e:	4641      	mov	r1, r8
 800e360:	4638      	mov	r0, r7
 800e362:	47c8      	blx	r9
 800e364:	3001      	adds	r0, #1
 800e366:	d103      	bne.n	800e370 <_printf_common+0xac>
 800e368:	f04f 30ff 	mov.w	r0, #4294967295
 800e36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e370:	3501      	adds	r5, #1
 800e372:	e7c6      	b.n	800e302 <_printf_common+0x3e>
 800e374:	18e1      	adds	r1, r4, r3
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	2030      	movs	r0, #48	@ 0x30
 800e37a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e37e:	4422      	add	r2, r4
 800e380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e388:	3302      	adds	r3, #2
 800e38a:	e7c7      	b.n	800e31c <_printf_common+0x58>
 800e38c:	2301      	movs	r3, #1
 800e38e:	4622      	mov	r2, r4
 800e390:	4641      	mov	r1, r8
 800e392:	4638      	mov	r0, r7
 800e394:	47c8      	blx	r9
 800e396:	3001      	adds	r0, #1
 800e398:	d0e6      	beq.n	800e368 <_printf_common+0xa4>
 800e39a:	3601      	adds	r6, #1
 800e39c:	e7d9      	b.n	800e352 <_printf_common+0x8e>
	...

0800e3a0 <_printf_i>:
 800e3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a4:	7e0f      	ldrb	r7, [r1, #24]
 800e3a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3a8:	2f78      	cmp	r7, #120	@ 0x78
 800e3aa:	4691      	mov	r9, r2
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	469a      	mov	sl, r3
 800e3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3b6:	d807      	bhi.n	800e3c8 <_printf_i+0x28>
 800e3b8:	2f62      	cmp	r7, #98	@ 0x62
 800e3ba:	d80a      	bhi.n	800e3d2 <_printf_i+0x32>
 800e3bc:	2f00      	cmp	r7, #0
 800e3be:	f000 80d2 	beq.w	800e566 <_printf_i+0x1c6>
 800e3c2:	2f58      	cmp	r7, #88	@ 0x58
 800e3c4:	f000 80b9 	beq.w	800e53a <_printf_i+0x19a>
 800e3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3d0:	e03a      	b.n	800e448 <_printf_i+0xa8>
 800e3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3d6:	2b15      	cmp	r3, #21
 800e3d8:	d8f6      	bhi.n	800e3c8 <_printf_i+0x28>
 800e3da:	a101      	add	r1, pc, #4	@ (adr r1, 800e3e0 <_printf_i+0x40>)
 800e3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3e0:	0800e439 	.word	0x0800e439
 800e3e4:	0800e44d 	.word	0x0800e44d
 800e3e8:	0800e3c9 	.word	0x0800e3c9
 800e3ec:	0800e3c9 	.word	0x0800e3c9
 800e3f0:	0800e3c9 	.word	0x0800e3c9
 800e3f4:	0800e3c9 	.word	0x0800e3c9
 800e3f8:	0800e44d 	.word	0x0800e44d
 800e3fc:	0800e3c9 	.word	0x0800e3c9
 800e400:	0800e3c9 	.word	0x0800e3c9
 800e404:	0800e3c9 	.word	0x0800e3c9
 800e408:	0800e3c9 	.word	0x0800e3c9
 800e40c:	0800e54d 	.word	0x0800e54d
 800e410:	0800e477 	.word	0x0800e477
 800e414:	0800e507 	.word	0x0800e507
 800e418:	0800e3c9 	.word	0x0800e3c9
 800e41c:	0800e3c9 	.word	0x0800e3c9
 800e420:	0800e56f 	.word	0x0800e56f
 800e424:	0800e3c9 	.word	0x0800e3c9
 800e428:	0800e477 	.word	0x0800e477
 800e42c:	0800e3c9 	.word	0x0800e3c9
 800e430:	0800e3c9 	.word	0x0800e3c9
 800e434:	0800e50f 	.word	0x0800e50f
 800e438:	6833      	ldr	r3, [r6, #0]
 800e43a:	1d1a      	adds	r2, r3, #4
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6032      	str	r2, [r6, #0]
 800e440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e448:	2301      	movs	r3, #1
 800e44a:	e09d      	b.n	800e588 <_printf_i+0x1e8>
 800e44c:	6833      	ldr	r3, [r6, #0]
 800e44e:	6820      	ldr	r0, [r4, #0]
 800e450:	1d19      	adds	r1, r3, #4
 800e452:	6031      	str	r1, [r6, #0]
 800e454:	0606      	lsls	r6, r0, #24
 800e456:	d501      	bpl.n	800e45c <_printf_i+0xbc>
 800e458:	681d      	ldr	r5, [r3, #0]
 800e45a:	e003      	b.n	800e464 <_printf_i+0xc4>
 800e45c:	0645      	lsls	r5, r0, #25
 800e45e:	d5fb      	bpl.n	800e458 <_printf_i+0xb8>
 800e460:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e464:	2d00      	cmp	r5, #0
 800e466:	da03      	bge.n	800e470 <_printf_i+0xd0>
 800e468:	232d      	movs	r3, #45	@ 0x2d
 800e46a:	426d      	negs	r5, r5
 800e46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e470:	4859      	ldr	r0, [pc, #356]	@ (800e5d8 <_printf_i+0x238>)
 800e472:	230a      	movs	r3, #10
 800e474:	e011      	b.n	800e49a <_printf_i+0xfa>
 800e476:	6821      	ldr	r1, [r4, #0]
 800e478:	6833      	ldr	r3, [r6, #0]
 800e47a:	0608      	lsls	r0, r1, #24
 800e47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e480:	d402      	bmi.n	800e488 <_printf_i+0xe8>
 800e482:	0649      	lsls	r1, r1, #25
 800e484:	bf48      	it	mi
 800e486:	b2ad      	uxthmi	r5, r5
 800e488:	2f6f      	cmp	r7, #111	@ 0x6f
 800e48a:	4853      	ldr	r0, [pc, #332]	@ (800e5d8 <_printf_i+0x238>)
 800e48c:	6033      	str	r3, [r6, #0]
 800e48e:	bf14      	ite	ne
 800e490:	230a      	movne	r3, #10
 800e492:	2308      	moveq	r3, #8
 800e494:	2100      	movs	r1, #0
 800e496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e49a:	6866      	ldr	r6, [r4, #4]
 800e49c:	60a6      	str	r6, [r4, #8]
 800e49e:	2e00      	cmp	r6, #0
 800e4a0:	bfa2      	ittt	ge
 800e4a2:	6821      	ldrge	r1, [r4, #0]
 800e4a4:	f021 0104 	bicge.w	r1, r1, #4
 800e4a8:	6021      	strge	r1, [r4, #0]
 800e4aa:	b90d      	cbnz	r5, 800e4b0 <_printf_i+0x110>
 800e4ac:	2e00      	cmp	r6, #0
 800e4ae:	d04b      	beq.n	800e548 <_printf_i+0x1a8>
 800e4b0:	4616      	mov	r6, r2
 800e4b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4b6:	fb03 5711 	mls	r7, r3, r1, r5
 800e4ba:	5dc7      	ldrb	r7, [r0, r7]
 800e4bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4c0:	462f      	mov	r7, r5
 800e4c2:	42bb      	cmp	r3, r7
 800e4c4:	460d      	mov	r5, r1
 800e4c6:	d9f4      	bls.n	800e4b2 <_printf_i+0x112>
 800e4c8:	2b08      	cmp	r3, #8
 800e4ca:	d10b      	bne.n	800e4e4 <_printf_i+0x144>
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	07df      	lsls	r7, r3, #31
 800e4d0:	d508      	bpl.n	800e4e4 <_printf_i+0x144>
 800e4d2:	6923      	ldr	r3, [r4, #16]
 800e4d4:	6861      	ldr	r1, [r4, #4]
 800e4d6:	4299      	cmp	r1, r3
 800e4d8:	bfde      	ittt	le
 800e4da:	2330      	movle	r3, #48	@ 0x30
 800e4dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4e4:	1b92      	subs	r2, r2, r6
 800e4e6:	6122      	str	r2, [r4, #16]
 800e4e8:	f8cd a000 	str.w	sl, [sp]
 800e4ec:	464b      	mov	r3, r9
 800e4ee:	aa03      	add	r2, sp, #12
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	f7ff fee6 	bl	800e2c4 <_printf_common>
 800e4f8:	3001      	adds	r0, #1
 800e4fa:	d14a      	bne.n	800e592 <_printf_i+0x1f2>
 800e4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e500:	b004      	add	sp, #16
 800e502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	f043 0320 	orr.w	r3, r3, #32
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	4833      	ldr	r0, [pc, #204]	@ (800e5dc <_printf_i+0x23c>)
 800e510:	2778      	movs	r7, #120	@ 0x78
 800e512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	6831      	ldr	r1, [r6, #0]
 800e51a:	061f      	lsls	r7, r3, #24
 800e51c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e520:	d402      	bmi.n	800e528 <_printf_i+0x188>
 800e522:	065f      	lsls	r7, r3, #25
 800e524:	bf48      	it	mi
 800e526:	b2ad      	uxthmi	r5, r5
 800e528:	6031      	str	r1, [r6, #0]
 800e52a:	07d9      	lsls	r1, r3, #31
 800e52c:	bf44      	itt	mi
 800e52e:	f043 0320 	orrmi.w	r3, r3, #32
 800e532:	6023      	strmi	r3, [r4, #0]
 800e534:	b11d      	cbz	r5, 800e53e <_printf_i+0x19e>
 800e536:	2310      	movs	r3, #16
 800e538:	e7ac      	b.n	800e494 <_printf_i+0xf4>
 800e53a:	4827      	ldr	r0, [pc, #156]	@ (800e5d8 <_printf_i+0x238>)
 800e53c:	e7e9      	b.n	800e512 <_printf_i+0x172>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	f023 0320 	bic.w	r3, r3, #32
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	e7f6      	b.n	800e536 <_printf_i+0x196>
 800e548:	4616      	mov	r6, r2
 800e54a:	e7bd      	b.n	800e4c8 <_printf_i+0x128>
 800e54c:	6833      	ldr	r3, [r6, #0]
 800e54e:	6825      	ldr	r5, [r4, #0]
 800e550:	6961      	ldr	r1, [r4, #20]
 800e552:	1d18      	adds	r0, r3, #4
 800e554:	6030      	str	r0, [r6, #0]
 800e556:	062e      	lsls	r6, r5, #24
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0x1c0>
 800e55c:	6019      	str	r1, [r3, #0]
 800e55e:	e002      	b.n	800e566 <_printf_i+0x1c6>
 800e560:	0668      	lsls	r0, r5, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0x1bc>
 800e564:	8019      	strh	r1, [r3, #0]
 800e566:	2300      	movs	r3, #0
 800e568:	6123      	str	r3, [r4, #16]
 800e56a:	4616      	mov	r6, r2
 800e56c:	e7bc      	b.n	800e4e8 <_printf_i+0x148>
 800e56e:	6833      	ldr	r3, [r6, #0]
 800e570:	1d1a      	adds	r2, r3, #4
 800e572:	6032      	str	r2, [r6, #0]
 800e574:	681e      	ldr	r6, [r3, #0]
 800e576:	6862      	ldr	r2, [r4, #4]
 800e578:	2100      	movs	r1, #0
 800e57a:	4630      	mov	r0, r6
 800e57c:	f7f1 fe60 	bl	8000240 <memchr>
 800e580:	b108      	cbz	r0, 800e586 <_printf_i+0x1e6>
 800e582:	1b80      	subs	r0, r0, r6
 800e584:	6060      	str	r0, [r4, #4]
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	6123      	str	r3, [r4, #16]
 800e58a:	2300      	movs	r3, #0
 800e58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e590:	e7aa      	b.n	800e4e8 <_printf_i+0x148>
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	4632      	mov	r2, r6
 800e596:	4649      	mov	r1, r9
 800e598:	4640      	mov	r0, r8
 800e59a:	47d0      	blx	sl
 800e59c:	3001      	adds	r0, #1
 800e59e:	d0ad      	beq.n	800e4fc <_printf_i+0x15c>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	079b      	lsls	r3, r3, #30
 800e5a4:	d413      	bmi.n	800e5ce <_printf_i+0x22e>
 800e5a6:	68e0      	ldr	r0, [r4, #12]
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	bfb8      	it	lt
 800e5ae:	4618      	movlt	r0, r3
 800e5b0:	e7a6      	b.n	800e500 <_printf_i+0x160>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	47d0      	blx	sl
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d09d      	beq.n	800e4fc <_printf_i+0x15c>
 800e5c0:	3501      	adds	r5, #1
 800e5c2:	68e3      	ldr	r3, [r4, #12]
 800e5c4:	9903      	ldr	r1, [sp, #12]
 800e5c6:	1a5b      	subs	r3, r3, r1
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	dcf2      	bgt.n	800e5b2 <_printf_i+0x212>
 800e5cc:	e7eb      	b.n	800e5a6 <_printf_i+0x206>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	f104 0619 	add.w	r6, r4, #25
 800e5d4:	e7f5      	b.n	800e5c2 <_printf_i+0x222>
 800e5d6:	bf00      	nop
 800e5d8:	0800eff5 	.word	0x0800eff5
 800e5dc:	0800f006 	.word	0x0800f006

0800e5e0 <__sflush_r>:
 800e5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e8:	0716      	lsls	r6, r2, #28
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	460c      	mov	r4, r1
 800e5ee:	d454      	bmi.n	800e69a <__sflush_r+0xba>
 800e5f0:	684b      	ldr	r3, [r1, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	dc02      	bgt.n	800e5fc <__sflush_r+0x1c>
 800e5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dd48      	ble.n	800e68e <__sflush_r+0xae>
 800e5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5fe:	2e00      	cmp	r6, #0
 800e600:	d045      	beq.n	800e68e <__sflush_r+0xae>
 800e602:	2300      	movs	r3, #0
 800e604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e608:	682f      	ldr	r7, [r5, #0]
 800e60a:	6a21      	ldr	r1, [r4, #32]
 800e60c:	602b      	str	r3, [r5, #0]
 800e60e:	d030      	beq.n	800e672 <__sflush_r+0x92>
 800e610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	0759      	lsls	r1, r3, #29
 800e616:	d505      	bpl.n	800e624 <__sflush_r+0x44>
 800e618:	6863      	ldr	r3, [r4, #4]
 800e61a:	1ad2      	subs	r2, r2, r3
 800e61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e61e:	b10b      	cbz	r3, 800e624 <__sflush_r+0x44>
 800e620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e622:	1ad2      	subs	r2, r2, r3
 800e624:	2300      	movs	r3, #0
 800e626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e628:	6a21      	ldr	r1, [r4, #32]
 800e62a:	4628      	mov	r0, r5
 800e62c:	47b0      	blx	r6
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	d106      	bne.n	800e642 <__sflush_r+0x62>
 800e634:	6829      	ldr	r1, [r5, #0]
 800e636:	291d      	cmp	r1, #29
 800e638:	d82b      	bhi.n	800e692 <__sflush_r+0xb2>
 800e63a:	4a2a      	ldr	r2, [pc, #168]	@ (800e6e4 <__sflush_r+0x104>)
 800e63c:	410a      	asrs	r2, r1
 800e63e:	07d6      	lsls	r6, r2, #31
 800e640:	d427      	bmi.n	800e692 <__sflush_r+0xb2>
 800e642:	2200      	movs	r2, #0
 800e644:	6062      	str	r2, [r4, #4]
 800e646:	04d9      	lsls	r1, r3, #19
 800e648:	6922      	ldr	r2, [r4, #16]
 800e64a:	6022      	str	r2, [r4, #0]
 800e64c:	d504      	bpl.n	800e658 <__sflush_r+0x78>
 800e64e:	1c42      	adds	r2, r0, #1
 800e650:	d101      	bne.n	800e656 <__sflush_r+0x76>
 800e652:	682b      	ldr	r3, [r5, #0]
 800e654:	b903      	cbnz	r3, 800e658 <__sflush_r+0x78>
 800e656:	6560      	str	r0, [r4, #84]	@ 0x54
 800e658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e65a:	602f      	str	r7, [r5, #0]
 800e65c:	b1b9      	cbz	r1, 800e68e <__sflush_r+0xae>
 800e65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e662:	4299      	cmp	r1, r3
 800e664:	d002      	beq.n	800e66c <__sflush_r+0x8c>
 800e666:	4628      	mov	r0, r5
 800e668:	f7ff fb48 	bl	800dcfc <_free_r>
 800e66c:	2300      	movs	r3, #0
 800e66e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e670:	e00d      	b.n	800e68e <__sflush_r+0xae>
 800e672:	2301      	movs	r3, #1
 800e674:	4628      	mov	r0, r5
 800e676:	47b0      	blx	r6
 800e678:	4602      	mov	r2, r0
 800e67a:	1c50      	adds	r0, r2, #1
 800e67c:	d1c9      	bne.n	800e612 <__sflush_r+0x32>
 800e67e:	682b      	ldr	r3, [r5, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d0c6      	beq.n	800e612 <__sflush_r+0x32>
 800e684:	2b1d      	cmp	r3, #29
 800e686:	d001      	beq.n	800e68c <__sflush_r+0xac>
 800e688:	2b16      	cmp	r3, #22
 800e68a:	d11e      	bne.n	800e6ca <__sflush_r+0xea>
 800e68c:	602f      	str	r7, [r5, #0]
 800e68e:	2000      	movs	r0, #0
 800e690:	e022      	b.n	800e6d8 <__sflush_r+0xf8>
 800e692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e696:	b21b      	sxth	r3, r3
 800e698:	e01b      	b.n	800e6d2 <__sflush_r+0xf2>
 800e69a:	690f      	ldr	r7, [r1, #16]
 800e69c:	2f00      	cmp	r7, #0
 800e69e:	d0f6      	beq.n	800e68e <__sflush_r+0xae>
 800e6a0:	0793      	lsls	r3, r2, #30
 800e6a2:	680e      	ldr	r6, [r1, #0]
 800e6a4:	bf08      	it	eq
 800e6a6:	694b      	ldreq	r3, [r1, #20]
 800e6a8:	600f      	str	r7, [r1, #0]
 800e6aa:	bf18      	it	ne
 800e6ac:	2300      	movne	r3, #0
 800e6ae:	eba6 0807 	sub.w	r8, r6, r7
 800e6b2:	608b      	str	r3, [r1, #8]
 800e6b4:	f1b8 0f00 	cmp.w	r8, #0
 800e6b8:	dde9      	ble.n	800e68e <__sflush_r+0xae>
 800e6ba:	6a21      	ldr	r1, [r4, #32]
 800e6bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6be:	4643      	mov	r3, r8
 800e6c0:	463a      	mov	r2, r7
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	47b0      	blx	r6
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	dc08      	bgt.n	800e6dc <__sflush_r+0xfc>
 800e6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d2:	81a3      	strh	r3, [r4, #12]
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6dc:	4407      	add	r7, r0
 800e6de:	eba8 0800 	sub.w	r8, r8, r0
 800e6e2:	e7e7      	b.n	800e6b4 <__sflush_r+0xd4>
 800e6e4:	dfbffffe 	.word	0xdfbffffe

0800e6e8 <_fflush_r>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	690b      	ldr	r3, [r1, #16]
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	b913      	cbnz	r3, 800e6f8 <_fflush_r+0x10>
 800e6f2:	2500      	movs	r5, #0
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	b118      	cbz	r0, 800e702 <_fflush_r+0x1a>
 800e6fa:	6a03      	ldr	r3, [r0, #32]
 800e6fc:	b90b      	cbnz	r3, 800e702 <_fflush_r+0x1a>
 800e6fe:	f7ff f85f 	bl	800d7c0 <__sinit>
 800e702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0f3      	beq.n	800e6f2 <_fflush_r+0xa>
 800e70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e70c:	07d0      	lsls	r0, r2, #31
 800e70e:	d404      	bmi.n	800e71a <_fflush_r+0x32>
 800e710:	0599      	lsls	r1, r3, #22
 800e712:	d402      	bmi.n	800e71a <_fflush_r+0x32>
 800e714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e716:	f7ff fae0 	bl	800dcda <__retarget_lock_acquire_recursive>
 800e71a:	4628      	mov	r0, r5
 800e71c:	4621      	mov	r1, r4
 800e71e:	f7ff ff5f 	bl	800e5e0 <__sflush_r>
 800e722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e724:	07da      	lsls	r2, r3, #31
 800e726:	4605      	mov	r5, r0
 800e728:	d4e4      	bmi.n	800e6f4 <_fflush_r+0xc>
 800e72a:	89a3      	ldrh	r3, [r4, #12]
 800e72c:	059b      	lsls	r3, r3, #22
 800e72e:	d4e1      	bmi.n	800e6f4 <_fflush_r+0xc>
 800e730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e732:	f7ff fad3 	bl	800dcdc <__retarget_lock_release_recursive>
 800e736:	e7dd      	b.n	800e6f4 <_fflush_r+0xc>

0800e738 <__swhatbuf_r>:
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	460c      	mov	r4, r1
 800e73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e740:	2900      	cmp	r1, #0
 800e742:	b096      	sub	sp, #88	@ 0x58
 800e744:	4615      	mov	r5, r2
 800e746:	461e      	mov	r6, r3
 800e748:	da0d      	bge.n	800e766 <__swhatbuf_r+0x2e>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e750:	f04f 0100 	mov.w	r1, #0
 800e754:	bf14      	ite	ne
 800e756:	2340      	movne	r3, #64	@ 0x40
 800e758:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e75c:	2000      	movs	r0, #0
 800e75e:	6031      	str	r1, [r6, #0]
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	b016      	add	sp, #88	@ 0x58
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	466a      	mov	r2, sp
 800e768:	f000 f862 	bl	800e830 <_fstat_r>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	dbec      	blt.n	800e74a <__swhatbuf_r+0x12>
 800e770:	9901      	ldr	r1, [sp, #4]
 800e772:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e776:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e77a:	4259      	negs	r1, r3
 800e77c:	4159      	adcs	r1, r3
 800e77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e782:	e7eb      	b.n	800e75c <__swhatbuf_r+0x24>

0800e784 <__smakebuf_r>:
 800e784:	898b      	ldrh	r3, [r1, #12]
 800e786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e788:	079d      	lsls	r5, r3, #30
 800e78a:	4606      	mov	r6, r0
 800e78c:	460c      	mov	r4, r1
 800e78e:	d507      	bpl.n	800e7a0 <__smakebuf_r+0x1c>
 800e790:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	6123      	str	r3, [r4, #16]
 800e798:	2301      	movs	r3, #1
 800e79a:	6163      	str	r3, [r4, #20]
 800e79c:	b003      	add	sp, #12
 800e79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a0:	ab01      	add	r3, sp, #4
 800e7a2:	466a      	mov	r2, sp
 800e7a4:	f7ff ffc8 	bl	800e738 <__swhatbuf_r>
 800e7a8:	9f00      	ldr	r7, [sp, #0]
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f7fe feee 	bl	800d590 <_malloc_r>
 800e7b4:	b948      	cbnz	r0, 800e7ca <__smakebuf_r+0x46>
 800e7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ba:	059a      	lsls	r2, r3, #22
 800e7bc:	d4ee      	bmi.n	800e79c <__smakebuf_r+0x18>
 800e7be:	f023 0303 	bic.w	r3, r3, #3
 800e7c2:	f043 0302 	orr.w	r3, r3, #2
 800e7c6:	81a3      	strh	r3, [r4, #12]
 800e7c8:	e7e2      	b.n	800e790 <__smakebuf_r+0xc>
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	6020      	str	r0, [r4, #0]
 800e7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7d2:	81a3      	strh	r3, [r4, #12]
 800e7d4:	9b01      	ldr	r3, [sp, #4]
 800e7d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7da:	b15b      	cbz	r3, 800e7f4 <__smakebuf_r+0x70>
 800e7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	f000 f837 	bl	800e854 <_isatty_r>
 800e7e6:	b128      	cbz	r0, 800e7f4 <__smakebuf_r+0x70>
 800e7e8:	89a3      	ldrh	r3, [r4, #12]
 800e7ea:	f023 0303 	bic.w	r3, r3, #3
 800e7ee:	f043 0301 	orr.w	r3, r3, #1
 800e7f2:	81a3      	strh	r3, [r4, #12]
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	431d      	orrs	r5, r3
 800e7f8:	81a5      	strh	r5, [r4, #12]
 800e7fa:	e7cf      	b.n	800e79c <__smakebuf_r+0x18>

0800e7fc <memmove>:
 800e7fc:	4288      	cmp	r0, r1
 800e7fe:	b510      	push	{r4, lr}
 800e800:	eb01 0402 	add.w	r4, r1, r2
 800e804:	d902      	bls.n	800e80c <memmove+0x10>
 800e806:	4284      	cmp	r4, r0
 800e808:	4623      	mov	r3, r4
 800e80a:	d807      	bhi.n	800e81c <memmove+0x20>
 800e80c:	1e43      	subs	r3, r0, #1
 800e80e:	42a1      	cmp	r1, r4
 800e810:	d008      	beq.n	800e824 <memmove+0x28>
 800e812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e81a:	e7f8      	b.n	800e80e <memmove+0x12>
 800e81c:	4402      	add	r2, r0
 800e81e:	4601      	mov	r1, r0
 800e820:	428a      	cmp	r2, r1
 800e822:	d100      	bne.n	800e826 <memmove+0x2a>
 800e824:	bd10      	pop	{r4, pc}
 800e826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e82e:	e7f7      	b.n	800e820 <memmove+0x24>

0800e830 <_fstat_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d07      	ldr	r5, [pc, #28]	@ (800e850 <_fstat_r+0x20>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	4611      	mov	r1, r2
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	f7f3 fa16 	bl	8001c6e <_fstat>
 800e842:	1c43      	adds	r3, r0, #1
 800e844:	d102      	bne.n	800e84c <_fstat_r+0x1c>
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	b103      	cbz	r3, 800e84c <_fstat_r+0x1c>
 800e84a:	6023      	str	r3, [r4, #0]
 800e84c:	bd38      	pop	{r3, r4, r5, pc}
 800e84e:	bf00      	nop
 800e850:	20006640 	.word	0x20006640

0800e854 <_isatty_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4d06      	ldr	r5, [pc, #24]	@ (800e870 <_isatty_r+0x1c>)
 800e858:	2300      	movs	r3, #0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	f7f3 fa15 	bl	8001c8e <_isatty>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_isatty_r+0x1a>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_isatty_r+0x1a>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	20006640 	.word	0x20006640

0800e874 <_realloc_r>:
 800e874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e878:	4680      	mov	r8, r0
 800e87a:	4615      	mov	r5, r2
 800e87c:	460c      	mov	r4, r1
 800e87e:	b921      	cbnz	r1, 800e88a <_realloc_r+0x16>
 800e880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e884:	4611      	mov	r1, r2
 800e886:	f7fe be83 	b.w	800d590 <_malloc_r>
 800e88a:	b92a      	cbnz	r2, 800e898 <_realloc_r+0x24>
 800e88c:	f7ff fa36 	bl	800dcfc <_free_r>
 800e890:	2400      	movs	r4, #0
 800e892:	4620      	mov	r0, r4
 800e894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e898:	f000 f81a 	bl	800e8d0 <_malloc_usable_size_r>
 800e89c:	4285      	cmp	r5, r0
 800e89e:	4606      	mov	r6, r0
 800e8a0:	d802      	bhi.n	800e8a8 <_realloc_r+0x34>
 800e8a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8a6:	d8f4      	bhi.n	800e892 <_realloc_r+0x1e>
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	f7fe fe70 	bl	800d590 <_malloc_r>
 800e8b0:	4607      	mov	r7, r0
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d0ec      	beq.n	800e890 <_realloc_r+0x1c>
 800e8b6:	42b5      	cmp	r5, r6
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	4621      	mov	r1, r4
 800e8bc:	bf28      	it	cs
 800e8be:	4632      	movcs	r2, r6
 800e8c0:	f7ff fa0d 	bl	800dcde <memcpy>
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4640      	mov	r0, r8
 800e8c8:	f7ff fa18 	bl	800dcfc <_free_r>
 800e8cc:	463c      	mov	r4, r7
 800e8ce:	e7e0      	b.n	800e892 <_realloc_r+0x1e>

0800e8d0 <_malloc_usable_size_r>:
 800e8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d4:	1f18      	subs	r0, r3, #4
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfbc      	itt	lt
 800e8da:	580b      	ldrlt	r3, [r1, r0]
 800e8dc:	18c0      	addlt	r0, r0, r3
 800e8de:	4770      	bx	lr

0800e8e0 <_init>:
 800e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e2:	bf00      	nop
 800e8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8e6:	bc08      	pop	{r3}
 800e8e8:	469e      	mov	lr, r3
 800e8ea:	4770      	bx	lr

0800e8ec <_fini>:
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	bf00      	nop
 800e8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8f2:	bc08      	pop	{r3}
 800e8f4:	469e      	mov	lr, r3
 800e8f6:	4770      	bx	lr
