
UART_DataLogger_SDcard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007968  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08007b38  08007b38  00008b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e68  08007e68  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007e68  08007e68  00008e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e70  08007e70  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e70  08007e70  00008e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007e78  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b0  20000068  08007ee0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002318  08007ee0  00009318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d04b  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273e  00000000  00000000  000160e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00018828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000909  00000000  00000000  00019458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ec9  00000000  00000000  00019d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ab  00000000  00000000  00041c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9512  00000000  00000000  000534d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c9e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  0013ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d9  00000000  00000000  001403a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b20 	.word	0x08007b20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007b20 	.word	0x08007b20

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Mount_SD>:
DWORD fre_clust;
uint32_t total, free_space;

//<---- --------------- Functions --------------- ---->
void Mount_SD(const TCHAR* path)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <Mount_SD+0x48>)
 80005ce:	f005 fc67 	bl	8005ea0 <f_mount>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <Mount_SD+0x4c>)
 80005d8:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Mounting => %d \n", fresult);
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <Mount_SD+0x4c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <Mount_SD+0x50>)
 80005e2:	f006 faa9 	bl	8006b38 <iprintf>

	if(fresult == FR_OK)
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <Mount_SD+0x4c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <Mount_SD+0x36>
		printf("SD_CARD mounted successfully...\n");
 80005ee:	4809      	ldr	r0, [pc, #36]	@ (8000614 <Mount_SD+0x54>)
 80005f0:	f006 fb0a 	bl	8006c08 <puts>
	else
	{
		printf("Error! in mounting SD_CARD...\n");
		Error_Handler();
	}
}
 80005f4:	e004      	b.n	8000600 <Mount_SD+0x40>
		printf("Error! in mounting SD_CARD...\n");
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <Mount_SD+0x58>)
 80005f8:	f006 fb06 	bl	8006c08 <puts>
		Error_Handler();
 80005fc:	f000 fa4e 	bl	8000a9c <Error_Handler>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	20002100 	.word	0x20002100
 8000610:	08007b38 	.word	0x08007b38
 8000614:	08007b54 	.word	0x08007b54
 8000618:	08007b74 	.word	0x08007b74

0800061c <Unmount_SD>:

//<---- -------------------------------------------------------- ---->
void Unmount_SD(const TCHAR* path)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	2000      	movs	r0, #0
 800062a:	f005 fc39 	bl	8005ea0 <f_mount>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <Unmount_SD+0x48>)
 8000634:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Unmounting => %d \n", fresult);
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <Unmount_SD+0x48>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	480a      	ldr	r0, [pc, #40]	@ (8000668 <Unmount_SD+0x4c>)
 800063e:	f006 fa7b 	bl	8006b38 <iprintf>

	if(fresult == FR_OK)
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <Unmount_SD+0x48>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d103      	bne.n	8000652 <Unmount_SD+0x36>
		printf("SD_CARD unmounted successfully...\n");
 800064a:	4808      	ldr	r0, [pc, #32]	@ (800066c <Unmount_SD+0x50>)
 800064c:	f006 fadc 	bl	8006c08 <puts>
	else
	{
		printf("Error! in unmounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000650:	e004      	b.n	800065c <Unmount_SD+0x40>
		printf("Error! in unmounting SD_CARD...\n");
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <Unmount_SD+0x54>)
 8000654:	f006 fad8 	bl	8006c08 <puts>
		Error_Handler();
 8000658:	f000 fa20 	bl	8000a9c <Error_Handler>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20002100 	.word	0x20002100
 8000668:	08007b94 	.word	0x08007b94
 800066c:	08007bb4 	.word	0x08007bb4
 8000670:	08007bd8 	.word	0x08007bd8

08000674 <Format_SD>:
//<---- -------------------------------------------------------- ---->

FRESULT Format_SD(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	@ 0x38
 8000678:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20 * sizeof(char));
 800067a:	2014      	movs	r0, #20
 800067c:	f006 f8dc 	bl	8006838 <malloc>
 8000680:	4603      	mov	r3, r0
 8000682:	637b      	str	r3, [r7, #52]	@ 0x34
    sprintf(path, "%s", "/");
 8000684:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <Format_SD+0xc0>)
 8000686:	492c      	ldr	r1, [pc, #176]	@ (8000738 <Format_SD+0xc4>)
 8000688:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800068a:	f006 fac5 	bl	8006c18 <siprintf>

    fresult = f_opendir(&dir, path);							// Open the directory
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000692:	4618      	mov	r0, r3
 8000694:	f005 feba 	bl	800640c <f_opendir>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <Format_SD+0xc8>)
 800069e:	701a      	strb	r2, [r3, #0]
    printf("Fresult in Opening Directory => %d \n", fresult);
 80006a0:	4b26      	ldr	r3, [pc, #152]	@ (800073c <Format_SD+0xc8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4826      	ldr	r0, [pc, #152]	@ (8000740 <Format_SD+0xcc>)
 80006a8:	f006 fa46 	bl	8006b38 <iprintf>

    if(fresult == FR_OK)
 80006ac:	4b23      	ldr	r3, [pc, #140]	@ (800073c <Format_SD+0xc8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d136      	bne.n	8000722 <Format_SD+0xae>
    {
        for(;;)
        {
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4923      	ldr	r1, [pc, #140]	@ (8000744 <Format_SD+0xd0>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 ff40 	bl	800653e <f_readdir>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <Format_SD+0xc8>)
 80006c4:	701a      	strb	r2, [r3, #0]
            if(fresult != FR_OK || fno.fname[0] == 0)
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <Format_SD+0xc8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d125      	bne.n	800071a <Format_SD+0xa6>
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <Format_SD+0xd0>)
 80006d0:	7a5b      	ldrb	r3, [r3, #9]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d021      	beq.n	800071a <Format_SD+0xa6>
            	break;  										// Break on error or end of dir

            if(fno.fattrib & AM_DIR)     						// It is a directory
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <Format_SD+0xd0>)
 80006d8:	7a1b      	ldrb	r3, [r3, #8]
 80006da:	f003 0310 	and.w	r3, r3, #16
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d011      	beq.n	8000706 <Format_SD+0x92>
            {
            	if(!(strcmp("SYSTEM~1", fno.fname)))
 80006e2:	4919      	ldr	r1, [pc, #100]	@ (8000748 <Format_SD+0xd4>)
 80006e4:	4819      	ldr	r0, [pc, #100]	@ (800074c <Format_SD+0xd8>)
 80006e6:	f7ff fd93 	bl	8000210 <strcmp>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d012      	beq.n	8000716 <Format_SD+0xa2>
            		continue;

            	fresult = f_unlink(fno.fname);
 80006f0:	4815      	ldr	r0, [pc, #84]	@ (8000748 <Format_SD+0xd4>)
 80006f2:	f005 ff9a 	bl	800662a <f_unlink>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <Format_SD+0xc8>)
 80006fc:	701a      	strb	r2, [r3, #0]
            	if(fresult == FR_DENIED)
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <Format_SD+0xc8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b07      	cmp	r3, #7
 8000704:	e7d6      	b.n	80006b4 <Format_SD+0x40>
            		continue;
            }
            else
            {
               fresult = f_unlink(fno.fname);					// It is a file.
 8000706:	4810      	ldr	r0, [pc, #64]	@ (8000748 <Format_SD+0xd4>)
 8000708:	f005 ff8f 	bl	800662a <f_unlink>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <Format_SD+0xc8>)
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e7ce      	b.n	80006b4 <Format_SD+0x40>
            		continue;
 8000716:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000718:	e7cc      	b.n	80006b4 <Format_SD+0x40>
            }
        }
        f_closedir(&dir);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f005 fee8 	bl	80064f2 <f_closedir>
    }
    free(path);
 8000722:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000724:	f006 f890 	bl	8006848 <free>
    return fresult;
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <Format_SD+0xc8>)
 800072a:	781b      	ldrb	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3738      	adds	r7, #56	@ 0x38
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08007bf8 	.word	0x08007bf8
 8000738:	08007bfc 	.word	0x08007bfc
 800073c:	20002100 	.word	0x20002100
 8000740:	08007c00 	.word	0x08007c00
 8000744:	200020e8 	.word	0x200020e8
 8000748:	200020f1 	.word	0x200020f1
 800074c:	08007c28 	.word	0x08007c28

08000750 <Create_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Create_File(char *name)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8000758:	4928      	ldr	r1, [pc, #160]	@ (80007fc <Create_File+0xac>)
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f005 ff2c 	bl	80065b8 <f_stat>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <Create_File+0xb0>)
 8000766:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000768:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <Create_File+0xb0>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4825      	ldr	r0, [pc, #148]	@ (8000804 <Create_File+0xb4>)
 8000770:	f006 f9e2 	bl	8006b38 <iprintf>

	if(fresult == FR_OK)
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <Create_File+0xb0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d106      	bne.n	800078a <Create_File+0x3a>
	{
		printf("Error! *%s* already exists!\n use Update_File Function \n", name);
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4822      	ldr	r0, [pc, #136]	@ (8000808 <Create_File+0xb8>)
 8000780:	f006 f9da 	bl	8006b38 <iprintf>
	    return fresult;
 8000784:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <Create_File+0xb0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	e034      	b.n	80007f4 <Create_File+0xa4>
	}
	else
	{
		fresult = f_open(&fil, name, (FA_CREATE_ALWAYS | FA_READ | FA_WRITE));
 800078a:	220b      	movs	r2, #11
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	481f      	ldr	r0, [pc, #124]	@ (800080c <Create_File+0xbc>)
 8000790:	f005 fbcc 	bl	8005f2c <f_open>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <Create_File+0xb0>)
 800079a:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <Create_File+0xb0>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10f      	bne.n	80007c4 <Create_File+0x74>
			printf("*%s* created successfully\n Now use Write_File to write data\n", name);
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	481a      	ldr	r0, [pc, #104]	@ (8000810 <Create_File+0xc0>)
 80007a8:	f006 f9c6 	bl	8006b38 <iprintf>
		{
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
		    return fresult;
		}

		fresult = f_close(&fil);
 80007ac:	4817      	ldr	r0, [pc, #92]	@ (800080c <Create_File+0xbc>)
 80007ae:	f005 fe03 	bl	80063b8 <f_close>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <Create_File+0xb0>)
 80007b8:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <Create_File+0xb0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d10f      	bne.n	80007e2 <Create_File+0x92>
 80007c2:	e009      	b.n	80007d8 <Create_File+0x88>
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <Create_File+0xb0>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4811      	ldr	r0, [pc, #68]	@ (8000814 <Create_File+0xc4>)
 80007ce:	f006 f9b3 	bl	8006b38 <iprintf>
		    return fresult;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <Create_File+0xb0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	e00d      	b.n	80007f4 <Create_File+0xa4>
			printf("File *%s* Closed Successfully\n", name);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	480f      	ldr	r0, [pc, #60]	@ (8000818 <Create_File+0xc8>)
 80007dc:	f006 f9ac 	bl	8006b38 <iprintf>
 80007e0:	e006      	b.n	80007f0 <Create_File+0xa0>
		else
			printf("Error! No. %d in closing file *%s* \n", fresult, name);
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <Create_File+0xb0>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <Create_File+0xcc>)
 80007ec:	f006 f9a4 	bl	8006b38 <iprintf>
	}
    return fresult;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <Create_File+0xb0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200020e8 	.word	0x200020e8
 8000800:	20002100 	.word	0x20002100
 8000804:	08007c34 	.word	0x08007c34
 8000808:	08007c54 	.word	0x08007c54
 800080c:	200010b8 	.word	0x200010b8
 8000810:	08007c8c 	.word	0x08007c8c
 8000814:	08007ccc 	.word	0x08007ccc
 8000818:	08007cf4 	.word	0x08007cf4
 800081c:	08007d14 	.word	0x08007d14

08000820 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000828:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800082c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d013      	beq.n	8000860 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000838:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800083c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000840:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00b      	beq.n	8000860 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000848:	e000      	b.n	800084c <ITM_SendChar+0x2c>
    {
      __NOP();
 800084a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800084c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000856:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
	int i = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	e009      	b.n	8000898 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ffc7 	bl	8000820 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf1      	blt.n	8000884 <_write+0x16>
	}
	return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b0:	f000 fa95 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b4:	f000 f81c 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f000 f8a0 	bl	80009fc <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80008bc:	f000 f87e 	bl	80009bc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008c0:	f003 fac0 	bl	8003e44 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD(SDPath);
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <main+0x38>)
 80008c6:	f7ff fe7b 	bl	80005c0 <Mount_SD>
  Format_SD();
 80008ca:	f7ff fed3 	bl	8000674 <Format_SD>
  Create_File("MRL");
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <main+0x3c>)
 80008d0:	f7ff ff3e 	bl	8000750 <Create_File>
  Unmount_SD(SDPath);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <main+0x38>)
 80008d6:	f7ff fea1 	bl	800061c <Unmount_SD>
  printf("Fresult =>");
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <main+0x40>)
 80008dc:	f006 f92c 	bl	8006b38 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <main+0x34>
 80008e4:	20002194 	.word	0x20002194
 80008e8:	08007d3c 	.word	0x08007d3c
 80008ec:	08007d40 	.word	0x08007d40

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	@ 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f006 fa82 	bl	8006e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <SystemClock_Config+0xc4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a26      	ldr	r2, [pc, #152]	@ (80009b4 <SystemClock_Config+0xc4>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000920:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <SystemClock_Config+0xc4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <SystemClock_Config+0xc8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <SystemClock_Config+0xc8>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <SystemClock_Config+0xc8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	2302      	movs	r3, #2
 8000950:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000952:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000958:	230f      	movs	r3, #15
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800095c:	23d8      	movs	r3, #216	@ 0xd8
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000964:	230f      	movs	r3, #15
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fd61 	bl	8001434 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000978:	f000 f890 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f000 ffee 	bl	800197c <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009a6:	f000 f879 	bl	8000a9c <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	@ 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009c2:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <MX_SDMMC1_SD_Init+0x3c>)
 80009c4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <MX_SDMMC1_SD_Init+0x38>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20002104 	.word	0x20002104
 80009f8:	40012c00 	.word	0x40012c00

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a13      	ldr	r2, [pc, #76]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_GPIO_Init+0x98>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SDMMC1_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC1_Detect_Pin;
 8000a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x9c>)
 8000a88:	f000 fb10 	bl	80010ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x44>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ac      	sub	sp, #176	@ 0xb0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	2284      	movs	r2, #132	@ 0x84
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 f979 	bl	8006e08 <memset>
  if(hsd->Instance==SDMMC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a34      	ldr	r2, [pc, #208]	@ (8000bec <HAL_SD_MspInit+0xfc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d161      	bne.n	8000be4 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000b20:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8000b24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f8d2 	bl	8001ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000b42:	f7ff ffab 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b46:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a29      	ldr	r2, [pc, #164]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_SD_MspInit+0x100>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000b8e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480f      	ldr	r0, [pc, #60]	@ (8000bf4 <HAL_SD_MspInit+0x104>)
 8000bb6:	f000 fa79 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <HAL_SD_MspInit+0x108>)
 8000be0:	f000 fa64 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000be4:	bf00      	nop
 8000be6:	37b0      	adds	r7, #176	@ 0xb0
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40012c00 	.word	0x40012c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <NMI_Handler+0x4>

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <MemManage_Handler+0x4>

08000c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c52:	f000 f901 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e00a      	b.n	8000c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6c:	f3af 8000 	nop.w
 8000c70:	4601      	mov	r1, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	60ba      	str	r2, [r7, #8]
 8000c78:	b2ca      	uxtb	r2, r1
 8000c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dbf0      	blt.n	8000c6c <_read+0x12>
  }

  return len;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_isatty>:

int _isatty(int file)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f006 f8ca 	bl	8006ec4 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20050000 	.word	0x20050000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	20002188 	.word	0x20002188
 8000d64:	20002318 	.word	0x20002318

08000d68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 f889 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fd75 	bl	80008ac <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dd0:	08007e78 	.word	0x08007e78
  ldr r2, =_sbss
 8000dd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dd8:	20002318 	.word	0x20002318

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>

08000dde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f92e 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de8:	200f      	movs	r0, #15
 8000dea:	f000 f805 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fe5b 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f93b 	bl	8001092 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f911 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	2000218c 	.word	0x2000218c

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000218c 	.word	0x2000218c

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_SetPriority>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff47 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff5c 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffb0 	bl	8001000 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e175      	b.n	80013b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8164 	bne.w	80013b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x56>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80be 	beq.w	80013b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b66      	ldr	r3, [pc, #408]	@ (80013d0 <HAL_GPIO_Init+0x324>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a65      	ldr	r2, [pc, #404]	@ (80013d0 <HAL_GPIO_Init+0x324>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b63      	ldr	r3, [pc, #396]	@ (80013d0 <HAL_GPIO_Init+0x324>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800124e:	4a61      	ldr	r2, [pc, #388]	@ (80013d4 <HAL_GPIO_Init+0x328>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a58      	ldr	r2, [pc, #352]	@ (80013d8 <HAL_GPIO_Init+0x32c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d037      	beq.n	80012ea <HAL_GPIO_Init+0x23e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a57      	ldr	r2, [pc, #348]	@ (80013dc <HAL_GPIO_Init+0x330>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_GPIO_Init+0x23a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d02b      	beq.n	80012e2 <HAL_GPIO_Init+0x236>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a55      	ldr	r2, [pc, #340]	@ (80013e4 <HAL_GPIO_Init+0x338>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x232>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a54      	ldr	r2, [pc, #336]	@ (80013e8 <HAL_GPIO_Init+0x33c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a53      	ldr	r2, [pc, #332]	@ (80013ec <HAL_GPIO_Init+0x340>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x22a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a52      	ldr	r2, [pc, #328]	@ (80013f0 <HAL_GPIO_Init+0x344>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a51      	ldr	r2, [pc, #324]	@ (80013f4 <HAL_GPIO_Init+0x348>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a50      	ldr	r2, [pc, #320]	@ (80013f8 <HAL_GPIO_Init+0x34c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	@ (80013fc <HAL_GPIO_Init+0x350>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x21a>
 80012c2:	2309      	movs	r3, #9
 80012c4:	e012      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012c6:	230a      	movs	r3, #10
 80012c8:	e010      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e00e      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	@ (80013d4 <HAL_GPIO_Init+0x328>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b3d      	ldr	r3, [pc, #244]	@ (8001400 <HAL_GPIO_Init+0x354>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <HAL_GPIO_Init+0x354>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <HAL_GPIO_Init+0x354>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a29      	ldr	r2, [pc, #164]	@ (8001400 <HAL_GPIO_Init+0x354>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <HAL_GPIO_Init+0x354>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_GPIO_Init+0x354>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <HAL_GPIO_Init+0x354>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <HAL_GPIO_Init+0x354>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae86 	bls.w	80010cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40021c00 	.word	0x40021c00
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40022400 	.word	0x40022400
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e291      	b.n	800196e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8087 	beq.w	8001566 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001458:	4b96      	ldr	r3, [pc, #600]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b04      	cmp	r3, #4
 8001462:	d00c      	beq.n	800147e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001464:	4b93      	ldr	r3, [pc, #588]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d112      	bne.n	8001496 <HAL_RCC_OscConfig+0x62>
 8001470:	4b90      	ldr	r3, [pc, #576]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800147c:	d10b      	bne.n	8001496 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	4b8d      	ldr	r3, [pc, #564]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <HAL_RCC_OscConfig+0x130>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d168      	bne.n	8001564 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e26b      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x7a>
 80014a0:	4b84      	ldr	r3, [pc, #528]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a83      	ldr	r2, [pc, #524]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e02e      	b.n	800150c <HAL_RCC_OscConfig+0xd8>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x9c>
 80014b6:	4b7f      	ldr	r3, [pc, #508]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7e      	ldr	r2, [pc, #504]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7b      	ldr	r2, [pc, #492]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xd8>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 80014da:	4b76      	ldr	r3, [pc, #472]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a75      	ldr	r2, [pc, #468]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b73      	ldr	r3, [pc, #460]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a72      	ldr	r2, [pc, #456]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xd8>
 80014f4:	4b6f      	ldr	r3, [pc, #444]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a6e      	ldr	r2, [pc, #440]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b6c      	ldr	r3, [pc, #432]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6b      	ldr	r2, [pc, #428]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fcb4 	bl	8000e80 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fcb0 	bl	8000e80 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e21f      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fca0 	bl	8000e80 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc9c 	bl	8000e80 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e20b      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x110>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d069      	beq.n	8001646 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001572:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x190>
 800158a:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x17a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1df      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	493d      	ldr	r1, [pc, #244]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e040      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d023      	beq.n	8001614 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a38      	ldr	r2, [pc, #224]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc52 	bl	8000e80 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc4e 	bl	8000e80 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1bd      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4929      	ldr	r1, [pc, #164]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
 8001612:	e018      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fc2e 	bl	8000e80 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fc2a 	bl	8000e80 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e199      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d038      	beq.n	80016c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165e:	4a15      	ldr	r2, [pc, #84]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fc0b 	bl	8000e80 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fc07 	bl	8000e80 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e176      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x23a>
 800168c:	e01a      	b.n	80016c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_RCC_OscConfig+0x280>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fbf1 	bl	8000e80 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fbed 	bl	8000e80 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d903      	bls.n	80016b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e15c      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
 80016b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b91      	ldr	r3, [pc, #580]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80016ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a4 	beq.w	800181a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b88      	ldr	r3, [pc, #544]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a87      	ldr	r2, [pc, #540]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b85      	ldr	r3, [pc, #532]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4b82      	ldr	r3, [pc, #520]	@ (8001904 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001706:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7e      	ldr	r2, [pc, #504]	@ (8001904 <HAL_RCC_OscConfig+0x4d0>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbb5 	bl	8000e80 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fbb1 	bl	8000e80 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	@ 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e120      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172c:	4b75      	ldr	r3, [pc, #468]	@ (8001904 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x31a>
 8001740:	4b6f      	ldr	r3, [pc, #444]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a6e      	ldr	r2, [pc, #440]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
 800174c:	e02d      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x33c>
 8001756:	4b6a      	ldr	r3, [pc, #424]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175a:	4a69      	ldr	r2, [pc, #420]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6713      	str	r3, [r2, #112]	@ 0x70
 8001762:	4b67      	ldr	r3, [pc, #412]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a66      	ldr	r2, [pc, #408]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	e01c      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x35e>
 8001778:	4b61      	ldr	r3, [pc, #388]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	4a60      	ldr	r2, [pc, #384]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6713      	str	r3, [r2, #112]	@ 0x70
 8001784:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a5d      	ldr	r2, [pc, #372]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	4a5a      	ldr	r2, [pc, #360]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6713      	str	r3, [r2, #112]	@ 0x70
 800179e:	4b58      	ldr	r3, [pc, #352]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a57      	ldr	r2, [pc, #348]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb65 	bl	8000e80 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fb61 	bl	8000e80 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0ce      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ee      	beq.n	80017ba <HAL_RCC_OscConfig+0x386>
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fb4f 	bl	8000e80 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fb4b 	bl	8000e80 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180e:	4b3c      	ldr	r3, [pc, #240]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a3b      	ldr	r2, [pc, #236]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80a4 	beq.w	800196c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	4b36      	ldr	r3, [pc, #216]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d06b      	beq.n	8001908 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d149      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a30      	ldr	r2, [pc, #192]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800183e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fb1c 	bl	8000e80 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb18 	bl	8000e80 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e087      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	019b      	lsls	r3, r3, #6
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	3b01      	subs	r3, #1
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4313      	orrs	r3, r2
 8001890:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001896:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff faec 	bl	8000e80 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fae8 	bl	8000e80 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e057      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x478>
 80018ca:	e04f      	b.n	800196c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80018d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fad2 	bl	8000e80 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff face 	bl	8000e80 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e03d      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4ac>
 80018fe:	e035      	b.n	800196c <HAL_RCC_OscConfig+0x538>
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x544>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d028      	beq.n	8001968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d121      	bne.n	8001968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11a      	bne.n	8001968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800193e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001940:	4293      	cmp	r3, r2
 8001942:	d111      	bne.n	8001968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d107      	bne.n	8001968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0d0      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b6a      	ldr	r3, [pc, #424]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d910      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b67      	ldr	r3, [pc, #412]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 020f 	bic.w	r2, r3, #15
 80019aa:	4965      	ldr	r1, [pc, #404]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b8      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4b59      	ldr	r3, [pc, #356]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a58      	ldr	r2, [pc, #352]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b50      	ldr	r3, [pc, #320]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	494d      	ldr	r1, [pc, #308]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d040      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d115      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e073      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06b      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4936      	ldr	r1, [pc, #216]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a70:	f7ff fa06 	bl	8000e80 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff fa02 	bl	8000e80 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e053      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d210      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 020f 	bic.w	r2, r3, #15
 8001ab6:	4922      	ldr	r1, [pc, #136]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e032      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4916      	ldr	r1, [pc, #88]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490e      	ldr	r1, [pc, #56]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f821 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490a      	ldr	r1, [pc, #40]	@ (8001b48 <HAL_RCC_ClockConfig+0x1cc>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	@ (8001b4c <HAL_RCC_ClockConfig+0x1d0>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_ClockConfig+0x1d4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f962 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08007d90 	.word	0x08007d90
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b58:	b090      	sub	sp, #64	@ 0x40
 8001b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6c:	4b59      	ldr	r3, [pc, #356]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d00d      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x40>
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	f200 80a1 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x34>
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b86:	e09b      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b8c:	e09b      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8e:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b92:	e098      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	fb03 f201 	mul.w	r2, r3, r1
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	fb00 f303 	mul.w	r3, r0, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a43      	ldr	r2, [pc, #268]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bce:	fba0 1202 	umull	r1, r2, r0, r2
 8001bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bda:	4413      	add	r3, r2
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be0:	2200      	movs	r2, #0
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	61fa      	str	r2, [r7, #28]
 8001be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bee:	f7fe fb6f 	bl	80002d0 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bfa:	e053      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	2200      	movs	r2, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	617a      	str	r2, [r7, #20]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c0e:	f04f 0b00 	mov.w	fp, #0
 8001c12:	4652      	mov	r2, sl
 8001c14:	465b      	mov	r3, fp
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0159      	lsls	r1, r3, #5
 8001c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c24:	0150      	lsls	r0, r2, #5
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c46:	ebb2 0408 	subs.w	r4, r2, r8
 8001c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	00eb      	lsls	r3, r5, #3
 8001c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5c:	00e2      	lsls	r2, r4, #3
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	eb14 030a 	adds.w	r3, r4, sl
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	eb45 030b 	adc.w	r3, r5, fp
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	028b      	lsls	r3, r1, #10
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c84:	4621      	mov	r1, r4
 8001c86:	028a      	lsls	r2, r1, #10
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	60fa      	str	r2, [r7, #12]
 8001c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c98:	f7fe fb1a 	bl	80002d0 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3740      	adds	r7, #64	@ 0x40
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	017d7840 	.word	0x017d7840

08001ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a68      	ldr	r2, [pc, #416]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	4b66      	ldr	r3, [pc, #408]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1c:	4964      	ldr	r1, [pc, #400]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d017      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d48:	4959      	ldr	r1, [pc, #356]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d58:	d101      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d017      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d76:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	494a      	ldr	r1, [pc, #296]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d94:	d101      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 808b 	beq.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a39      	ldr	r2, [pc, #228]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd0:	4b37      	ldr	r3, [pc, #220]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ddc:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a34      	ldr	r2, [pc, #208]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff f84a 	bl	8000e80 <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7ff f846 	bl	8000e80 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e357      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e02:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e0e:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d035      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d02e      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d114      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f80e 	bl	8000e80 <HAL_GetTick>
 8001e64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f80a 	bl	8000e80 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e319      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e96:	d111      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	4901      	ldr	r1, [pc, #4]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	0ffffcff 	.word	0x0ffffcff
 8001ebc:	4baa      	ldr	r3, [pc, #680]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4aa9      	ldr	r2, [pc, #676]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	4ba7      	ldr	r3, [pc, #668]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	49a4      	ldr	r1, [pc, #656]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d010      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ee6:	4ba0      	ldr	r3, [pc, #640]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eec:	4a9e      	ldr	r2, [pc, #632]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ef6:	4b9c      	ldr	r3, [pc, #624]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f00:	4999      	ldr	r1, [pc, #612]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f14:	4b94      	ldr	r3, [pc, #592]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f22:	4991      	ldr	r1, [pc, #580]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f36:	4b8c      	ldr	r3, [pc, #560]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f44:	4988      	ldr	r1, [pc, #544]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f58:	4b83      	ldr	r3, [pc, #524]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f66:	4980      	ldr	r1, [pc, #512]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f88:	4977      	ldr	r1, [pc, #476]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9c:	4b72      	ldr	r3, [pc, #456]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	496f      	ldr	r1, [pc, #444]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc4:	f023 020c 	bic.w	r2, r3, #12
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fcc:	4966      	ldr	r1, [pc, #408]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe0:	4b61      	ldr	r3, [pc, #388]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	495e      	ldr	r1, [pc, #376]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002002:	4b59      	ldr	r3, [pc, #356]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002010:	4955      	ldr	r1, [pc, #340]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002024:	4b50      	ldr	r3, [pc, #320]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	494d      	ldr	r1, [pc, #308]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002046:	4b48      	ldr	r3, [pc, #288]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	4944      	ldr	r1, [pc, #272]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002068:	4b3f      	ldr	r3, [pc, #252]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	493c      	ldr	r1, [pc, #240]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800208a:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002098:	4933      	ldr	r1, [pc, #204]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020ba:	492b      	ldr	r1, [pc, #172]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d011      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020dc:	4922      	ldr	r1, [pc, #136]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002114:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211c:	4912      	ldr	r1, [pc, #72]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002130:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002140:	4909      	ldr	r1, [pc, #36]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d006      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80d9 	beq.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800215c:	4b02      	ldr	r3, [pc, #8]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a01      	ldr	r2, [pc, #4]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002166:	e001      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002168:	40023800 	.word	0x40023800
 800216c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800216e:	f7fe fe87 	bl	8000e80 <HAL_GetTick>
 8002172:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002176:	f7fe fe83 	bl	8000e80 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	@ 0x64
 8002182:	d901      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e194      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002188:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d021      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11d      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a8:	4b64      	ldr	r3, [pc, #400]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021b6:	4b61      	ldr	r3, [pc, #388]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021bc:	0e1b      	lsrs	r3, r3, #24
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	019a      	lsls	r2, r3, #6
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	071b      	lsls	r3, r3, #28
 80021dc:	4957      	ldr	r1, [pc, #348]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800220e:	d129      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002210:	4b4a      	ldr	r3, [pc, #296]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800221e:	4b47      	ldr	r3, [pc, #284]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002224:	0f1b      	lsrs	r3, r3, #28
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	019a      	lsls	r2, r3, #6
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	431a      	orrs	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	071b      	lsls	r3, r3, #28
 8002244:	493d      	ldr	r1, [pc, #244]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800224c:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002252:	f023 021f 	bic.w	r2, r3, #31
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	3b01      	subs	r3, #1
 800225c:	4937      	ldr	r1, [pc, #220]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01d      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002270:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002276:	0e1b      	lsrs	r3, r3, #24
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002284:	0f1b      	lsrs	r3, r3, #28
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	019a      	lsls	r2, r3, #6
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	431a      	orrs	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	431a      	orrs	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	071b      	lsls	r3, r3, #28
 80022a4:	4925      	ldr	r1, [pc, #148]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d011      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	019a      	lsls	r2, r3, #6
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	071b      	lsls	r3, r3, #28
 80022d4:	4919      	ldr	r1, [pc, #100]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a16      	ldr	r2, [pc, #88]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e8:	f7fe fdca 	bl	8000e80 <HAL_GetTick>
 80022ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022f0:	f7fe fdc6 	bl	8000e80 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	@ 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0d7      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 80cd 	bne.w	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002322:	f7fe fdad 	bl	8000e80 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800232a:	f7fe fda9 	bl	8000e80 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	@ 0x64
 8002336:	d903      	bls.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0ba      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800233c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002340:	4b5e      	ldr	r3, [pc, #376]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800234c:	d0ed      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800236a:	2b00      	cmp	r3, #0
 800236c:	d02e      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d12a      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002376:	4b51      	ldr	r3, [pc, #324]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002384:	4b4d      	ldr	r3, [pc, #308]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	0f1b      	lsrs	r3, r3, #28
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	019a      	lsls	r2, r3, #6
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	041b      	lsls	r3, r3, #16
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	071b      	lsls	r3, r3, #28
 80023aa:	4944      	ldr	r1, [pc, #272]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023b2:	4b42      	ldr	r3, [pc, #264]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	493d      	ldr	r1, [pc, #244]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d022      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e0:	d11d      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023e2:	4b36      	ldr	r3, [pc, #216]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	0e1b      	lsrs	r3, r3, #24
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023f0:	4b32      	ldr	r3, [pc, #200]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	0f1b      	lsrs	r3, r3, #28
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	019a      	lsls	r2, r3, #6
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	071b      	lsls	r3, r3, #28
 8002416:	4929      	ldr	r1, [pc, #164]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d028      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002430:	0e1b      	lsrs	r3, r3, #24
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002438:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	019a      	lsls	r2, r3, #6
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	4917      	ldr	r1, [pc, #92]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800246c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4911      	ldr	r1, [pc, #68]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800247c:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002488:	f7fe fcfa 	bl	8000e80 <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002490:	f7fe fcf6 	bl	8000e80 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e007      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ae:	d1ef      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e022      	b.n	8002518 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe fb03 	bl	8000af0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f814 	bl	8002520 <HAL_SD_InitCard>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00a      	b.n	8002518 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b08e      	sub	sp, #56	@ 0x38
 8002524:	af04      	add	r7, sp, #16
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800253c:	2376      	movs	r3, #118	@ 0x76
 800253e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681d      	ldr	r5, [r3, #0]
 8002544:	466c      	mov	r4, sp
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800254e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	4628      	mov	r0, r5
 800255a:	f000 ff41 	bl	80033e0 <SDMMC_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e059      	b.n	8002624 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800257e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 ff75 	bl	8003474 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002598:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800259a:	2002      	movs	r0, #2
 800259c:	f7fe fc7c 	bl	8000e98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fe67 	bl	8003274 <SD_PowerON>
 80025a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02e      	b.n	8002624 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fd86 	bl	80030d8 <SD_InitCard>
 80025cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e01b      	b.n	8002624 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 ffcf 	bl	8003598 <SDMMC_CmdBlockLength>
 80025fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00f      	beq.n	8002622 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a09      	ldr	r2, [pc, #36]	@ (800262c <HAL_SD_InitCard+0x10c>)
 8002608:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3728      	adds	r7, #40	@ 0x28
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	004005ff 	.word	0x004005ff

08002630 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b092      	sub	sp, #72	@ 0x48
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800263e:	f7fe fc1f 	bl	8000e80 <HAL_GetTick>
 8002642:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002656:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1bd      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 81b0 	bne.w	80029d0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	441a      	add	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	429a      	cmp	r2, r3
 8002682:	d907      	bls.n	8002694 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e1a4      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2203      	movs	r2, #3
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d002      	beq.n	80026b2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80026ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	025b      	lsls	r3, r3, #9
 80026bc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80026be:	2390      	movs	r3, #144	@ 0x90
 80026c0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80026c2:	2302      	movs	r3, #2
 80026c4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f107 0214 	add.w	r2, r7, #20
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 ff31 	bl	8003540 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d90a      	bls.n	80026fa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2202      	movs	r2, #2
 80026e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 ff95 	bl	8003620 <SDMMC_CmdReadMultiBlock>
 80026f6:	6478      	str	r0, [r7, #68]	@ 0x44
 80026f8:	e009      	b.n	800270e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f000 ff68 	bl	80035dc <SDMMC_CmdReadSingleBlock>
 800270c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800270e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002710:	2b00      	cmp	r3, #0
 8002712:	d012      	beq.n	800273a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a7a      	ldr	r2, [pc, #488]	@ (8002904 <HAL_SD_ReadBlocks+0x2d4>)
 800271a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e151      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800273e:	e061      	b.n	8002804 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03c      	beq.n	80027c8 <HAL_SD_ReadBlocks+0x198>
 800274e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d039      	beq.n	80027c8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002754:	2300      	movs	r3, #0
 8002756:	643b      	str	r3, [r7, #64]	@ 0x40
 8002758:	e033      	b.n	80027c2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fe6a 	bl	8003438 <SDMMC_ReadFIFO>
 8002764:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002768:	b2da      	uxtb	r2, r3
 800276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800276e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002770:	3301      	adds	r3, #1
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002776:	3b01      	subs	r3, #1
 8002778:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800277a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	b2da      	uxtb	r2, r3
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002786:	3301      	adds	r3, #1
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800278a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278c:	3b01      	subs	r3, #1
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2da      	uxtb	r2, r3
 8002796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002798:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279c:	3301      	adds	r3, #1
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a2:	3b01      	subs	r3, #1
 80027a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80027a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b2:	3301      	adds	r3, #1
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b8:	3b01      	subs	r3, #1
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80027bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027be:	3301      	adds	r3, #1
 80027c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80027c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c4:	2b07      	cmp	r3, #7
 80027c6:	d9c8      	bls.n	800275a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80027c8:	f7fe fb5a 	bl	8000e80 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d902      	bls.n	80027de <HAL_SD_ReadBlocks+0x1ae>
 80027d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d112      	bne.n	8002804 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a48      	ldr	r2, [pc, #288]	@ (8002904 <HAL_SD_ReadBlocks+0x2d4>)
 80027e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0ec      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800280e:	2b00      	cmp	r3, #0
 8002810:	d096      	beq.n	8002740 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d022      	beq.n	8002866 <HAL_SD_ReadBlocks+0x236>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d91f      	bls.n	8002866 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	2b03      	cmp	r3, #3
 800282c:	d01b      	beq.n	8002866 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 ff5a 	bl	80036ec <SDMMC_CmdStopTransfer>
 8002838:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800283a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2f      	ldr	r2, [pc, #188]	@ (8002904 <HAL_SD_ReadBlocks+0x2d4>)
 8002846:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800284c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0bb      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <HAL_SD_ReadBlocks+0x2d4>)
 800287a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	f043 0208 	orr.w	r2, r3, #8
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0a1      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_SD_ReadBlocks+0x2d4>)
 80028ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	f043 0202 	orr.w	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e087      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d064      	beq.n	80029a6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <HAL_SD_ReadBlocks+0x2d4>)
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06d      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
 8002902:	bf00      	nop
 8002904:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fd93 	bl	8003438 <SDMMC_ReadFIFO>
 8002912:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002916:	b2da      	uxtb	r2, r3
 8002918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	3301      	adds	r3, #1
 8002920:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002924:	3b01      	subs	r3, #1
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b2da      	uxtb	r2, r3
 800292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002930:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002934:	3301      	adds	r3, #1
 8002936:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800293a:	3b01      	subs	r3, #1
 800293c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2da      	uxtb	r2, r3
 8002944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002946:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	3301      	adds	r3, #1
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800294e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002950:	3b01      	subs	r3, #1
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002956:	0e1b      	lsrs	r3, r3, #24
 8002958:	b2da      	uxtb	r2, r3
 800295a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002960:	3301      	adds	r3, #1
 8002962:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002966:	3b01      	subs	r3, #1
 8002968:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800296a:	f7fe fa89 	bl	8000e80 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002976:	429a      	cmp	r2, r3
 8002978:	d902      	bls.n	8002980 <HAL_SD_ReadBlocks+0x350>
 800297a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800297c:	2b00      	cmp	r3, #0
 800297e:	d112      	bne.n	80029a6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a18      	ldr	r2, [pc, #96]	@ (80029e8 <HAL_SD_ReadBlocks+0x3b8>)
 8002986:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e01b      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_SD_ReadBlocks+0x38a>
 80029b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1a6      	bne.n	8002908 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e006      	b.n	80029de <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3748      	adds	r7, #72	@ 0x48
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	004005ff 	.word	0x004005ff

080029ec <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b092      	sub	sp, #72	@ 0x48
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80029fa:	f7fe fa41 	bl	8000e80 <HAL_GetTick>
 80029fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e165      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 8158 	bne.w	8002cdc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	441a      	add	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d907      	bls.n	8002a50 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a44:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e14c      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2203      	movs	r2, #3
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d002      	beq.n	8002a6e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	025b      	lsls	r3, r3, #9
 8002a78:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002a7a:	2390      	movs	r3, #144	@ 0x90
 8002a7c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f107 0218 	add.w	r2, r7, #24
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fd53 	bl	8003540 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d90a      	bls.n	8002ab6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fdfb 	bl	80036a8 <SDMMC_CmdWriteMultiBlock>
 8002ab2:	6478      	str	r0, [r7, #68]	@ 0x44
 8002ab4:	e009      	b.n	8002aca <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fdce 	bl	8003664 <SDMMC_CmdWriteSingleBlock>
 8002ac8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a87      	ldr	r2, [pc, #540]	@ (8002cf4 <HAL_SD_WriteBlocks+0x308>)
 8002ad6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0f9      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002afa:	e065      	b.n	8002bc8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d040      	beq.n	8002b8c <HAL_SD_WriteBlocks+0x1a0>
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03d      	beq.n	8002b8c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b14:	e037      	b.n	8002b86 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1e:	3301      	adds	r3, #1
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b24:	3b01      	subs	r3, #1
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b36:	3301      	adds	r3, #1
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4e:	3301      	adds	r3, #1
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b54:	3b01      	subs	r3, #1
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	061a      	lsls	r2, r3, #24
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b66:	3301      	adds	r3, #1
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f107 0214 	add.w	r2, r7, #20
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fc69 	bl	8003452 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b82:	3301      	adds	r3, #1
 8002b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b88:	2b07      	cmp	r3, #7
 8002b8a:	d9c4      	bls.n	8002b16 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002b8c:	f7fe f978 	bl	8000e80 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d902      	bls.n	8002ba2 <HAL_SD_WriteBlocks+0x1b6>
 8002b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d112      	bne.n	8002bc8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a53      	ldr	r2, [pc, #332]	@ (8002cf4 <HAL_SD_WriteBlocks+0x308>)
 8002ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e090      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d092      	beq.n	8002afc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d022      	beq.n	8002c2a <HAL_SD_WriteBlocks+0x23e>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d91f      	bls.n	8002c2a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d01b      	beq.n	8002c2a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fd78 	bl	80036ec <SDMMC_CmdStopTransfer>
 8002bfc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf4 <HAL_SD_WriteBlocks+0x308>)
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e05f      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf4 <HAL_SD_WriteBlocks+0x308>)
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c44:	f043 0208 	orr.w	r2, r3, #8
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e045      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a20      	ldr	r2, [pc, #128]	@ (8002cf4 <HAL_SD_WriteBlocks+0x308>)
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	f043 0202 	orr.w	r2, r3, #2
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e02b      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d012      	beq.n	8002cc6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <HAL_SD_WriteBlocks+0x308>)
 8002ca6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e011      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e006      	b.n	8002cea <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3748      	adds	r7, #72	@ 0x48
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	004005ff 	.word	0x004005ff

08002cf8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d06:	0f9b      	lsrs	r3, r3, #30
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d24:	0e1b      	lsrs	r3, r3, #24
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d58:	0d1b      	lsrs	r3, r3, #20
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d76:	0bdb      	lsrs	r3, r3, #15
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d88:	0b9b      	lsrs	r3, r3, #14
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d9a:	0b5b      	lsrs	r3, r3, #13
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dac:	0b1b      	lsrs	r3, r3, #12
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d163      	bne.n	8002e90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002dd8:	0f92      	lsrs	r2, r2, #30
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002de4:	0edb      	lsrs	r3, r3, #27
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df6:	0e1b      	lsrs	r3, r3, #24
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e08:	0d5b      	lsrs	r3, r3, #21
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e2c:	0bdb      	lsrs	r3, r3, #15
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	3302      	adds	r3, #2
 8002e50:	2201      	movs	r2, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002e5a:	fb03 f202 	mul.w	r2, r3, r2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	7a1b      	ldrb	r3, [r3, #8]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e7c:	0a52      	lsrs	r2, r2, #9
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e8e:	e031      	b.n	8002ef4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d11d      	bne.n	8002ed4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea6:	0c1b      	lsrs	r3, r3, #16
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	029a      	lsls	r2, r3, #10
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ed2:	e00f      	b.n	8002ef4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	@ (800303c <HAL_SD_GetCardCSD+0x344>)
 8002eda:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e09d      	b.n	8003030 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef8:	0b9b      	lsrs	r3, r3, #14
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0a:	09db      	lsrs	r3, r3, #7
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	0fdb      	lsrs	r3, r3, #31
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	0f5b      	lsrs	r3, r3, #29
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	0d9b      	lsrs	r3, r3, #22
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6e:	0d5b      	lsrs	r3, r3, #21
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	0bdb      	lsrs	r3, r3, #15
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	0b9b      	lsrs	r3, r3, #14
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	0b5b      	lsrs	r3, r3, #13
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	0b1b      	lsrs	r3, r3, #12
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	0a9b      	lsrs	r3, r3, #10
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	b2da      	uxtb	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	004005ff 	.word	0x004005ff

08003040 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f970 	bl	8003390 <SD_SendStatus>
 80030b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	0a5b      	lsrs	r3, r3, #9
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80030ce:	693b      	ldr	r3, [r7, #16]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b094      	sub	sp, #80	@ 0x50
 80030dc:	af04      	add	r7, sp, #16
 80030de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80030e0:	2301      	movs	r3, #1
 80030e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f9d1 	bl	8003490 <SDMMC_GetPowerState>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80030f8:	e0b8      	b.n	800326c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d02f      	beq.n	8003162 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fbb8 	bl	800387c <SDMMC_CmdSendCID>
 800310c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800310e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <SD_InitCard+0x40>
    {
      return errorstate;
 8003114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003116:	e0a9      	b.n	800326c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f9fb 	bl	800351a <SDMMC_GetResponse>
 8003124:	4602      	mov	r2, r0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2104      	movs	r1, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f9f2 	bl	800351a <SDMMC_GetResponse>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2108      	movs	r1, #8
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f9e9 	bl	800351a <SDMMC_GetResponse>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	210c      	movs	r1, #12
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f9e0 	bl	800351a <SDMMC_GetResponse>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	2b03      	cmp	r3, #3
 8003168:	d00d      	beq.n	8003186 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f107 020e 	add.w	r2, r7, #14
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fbbe 	bl	80038f6 <SDMMC_CmdSetRelAdd>
 800317a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800317c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <SD_InitCard+0xae>
    {
      return errorstate;
 8003182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003184:	e072      	b.n	800326c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	2b03      	cmp	r3, #3
 800318c:	d036      	beq.n	80031fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800318e:	89fb      	ldrh	r3, [r7, #14]
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fb88 	bl	80038b8 <SDMMC_CmdSendCSD>
 80031a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80031b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b2:	e05b      	b.n	800326c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f9ad 	bl	800351a <SDMMC_GetResponse>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2104      	movs	r1, #4
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f9a4 	bl	800351a <SDMMC_GetResponse>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2108      	movs	r1, #8
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f99b 	bl	800351a <SDMMC_GetResponse>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	210c      	movs	r1, #12
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f992 	bl	800351a <SDMMC_GetResponse>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2104      	movs	r1, #4
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f989 	bl	800351a <SDMMC_GetResponse>
 8003208:	4603      	mov	r3, r0
 800320a:	0d1a      	lsrs	r2, r3, #20
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fd6e 	bl	8002cf8 <HAL_SD_GetCardCSD>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003222:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003226:	e021      	b.n	800326c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	2200      	movs	r2, #0
 8003234:	461c      	mov	r4, r3
 8003236:	4615      	mov	r5, r2
 8003238:	4622      	mov	r2, r4
 800323a:	462b      	mov	r3, r5
 800323c:	4608      	mov	r0, r1
 800323e:	f000 fa77 	bl	8003730 <SDMMC_CmdSelDesel>
 8003242:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <SD_InitCard+0x176>
  {
    return errorstate;
 800324a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324c:	e00e      	b.n	800326c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681d      	ldr	r5, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	466c      	mov	r4, sp
 8003256:	f103 0210 	add.w	r2, r3, #16
 800325a:	ca07      	ldmia	r2, {r0, r1, r2}
 800325c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003260:	3304      	adds	r3, #4
 8003262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f8bb 	bl	80033e0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3740      	adds	r7, #64	@ 0x40
 8003270:	46bd      	mov	sp, r7
 8003272:	bdb0      	pop	{r4, r5, r7, pc}

08003274 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fa72 	bl	8003776 <SDMMC_CmdGoIdleState>
 8003292:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SD_PowerON+0x2a>
  {
    return errorstate;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	e072      	b.n	8003384 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fa85 	bl	80037b2 <SDMMC_CmdOperCond>
 80032a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa5b 	bl	8003776 <SDMMC_CmdGoIdleState>
 80032c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	e05b      	b.n	8003384 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d137      	bne.n	800334a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fa85 	bl	80037f0 <SDMMC_CmdAppCommand>
 80032e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02d      	beq.n	800334a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80032f2:	e047      	b.n	8003384 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa78 	bl	80037f0 <SDMMC_CmdAppCommand>
 8003300:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <SD_PowerON+0x98>
    {
      return errorstate;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	e03b      	b.n	8003384 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	491e      	ldr	r1, [pc, #120]	@ (800338c <SD_PowerON+0x118>)
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fa8e 	bl	8003834 <SDMMC_CmdAppOperCommand>
 8003318:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003320:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003324:	e02e      	b.n	8003384 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f8f4 	bl	800351a <SDMMC_GetResponse>
 8003332:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	0fdb      	lsrs	r3, r3, #31
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <SD_PowerON+0xcc>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <SD_PowerON+0xce>
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]

    count++;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3301      	adds	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003350:	4293      	cmp	r3, r2
 8003352:	d802      	bhi.n	800335a <SD_PowerON+0xe6>
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0cc      	beq.n	80032f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003360:	4293      	cmp	r3, r2
 8003362:	d902      	bls.n	800336a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003364:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003368:	e00c      	b.n	8003384 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
 800337a:	e002      	b.n	8003382 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	c1100000 	.word	0xc1100000

08003390 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80033a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033a4:	e018      	b.n	80033d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 fac0 	bl	8003938 <SDMMC_CmdSendStatus>
 80033b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	e009      	b.n	80033d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f8a5 	bl	800351a <SDMMC_GetResponse>
 80033d0:	4602      	mov	r2, r0
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80033e0:	b084      	sub	sp, #16
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	f107 001c 	add.w	r0, r7, #28
 80033ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80033f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80033f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80033fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80033fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003402:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003406:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800340a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <SDMMC_Init+0x54>)
 8003418:	4013      	ands	r3, r2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	b004      	add	sp, #16
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	ffff8100 	.word	0xffff8100

08003438 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2203      	movs	r2, #3
 8003480:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0303 	and.w	r3, r3, #3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80034ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80034d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80034d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <SDMMC_SendCommand+0x50>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	fffff000 	.word	0xfffff000

08003500 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	b2db      	uxtb	r3, r3
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3314      	adds	r3, #20
 8003528:	461a      	mov	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	4413      	add	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
}  
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003566:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800356c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003572:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800358a:	2300      	movs	r3, #0

}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80035a6:	2310      	movs	r3, #16
 80035a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80035aa:	2340      	movs	r3, #64	@ 0x40
 80035ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80035b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80035b8:	f107 0308 	add.w	r3, r7, #8
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff74 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80035c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c8:	2110      	movs	r1, #16
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9d6 	bl	800397c <SDMMC_GetCmdResp1>
 80035d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035d2:	69fb      	ldr	r3, [r7, #28]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80035ea:	2311      	movs	r3, #17
 80035ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80035ee:	2340      	movs	r3, #64	@ 0x40
 80035f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80035f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80035fc:	f107 0308 	add.w	r3, r7, #8
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff52 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	2111      	movs	r1, #17
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9b4 	bl	800397c <SDMMC_GetCmdResp1>
 8003614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003616:	69fb      	ldr	r3, [r7, #28]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800362e:	2312      	movs	r3, #18
 8003630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003632:	2340      	movs	r3, #64	@ 0x40
 8003634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800363a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800363e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003640:	f107 0308 	add.w	r3, r7, #8
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff30 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800364c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003650:	2112      	movs	r1, #18
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f992 	bl	800397c <SDMMC_GetCmdResp1>
 8003658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800365a:	69fb      	ldr	r3, [r7, #28]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003672:	2318      	movs	r3, #24
 8003674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003676:	2340      	movs	r3, #64	@ 0x40
 8003678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800367e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff0e 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003694:	2118      	movs	r1, #24
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f970 	bl	800397c <SDMMC_GetCmdResp1>
 800369c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800369e:	69fb      	ldr	r3, [r7, #28]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80036b6:	2319      	movs	r3, #25
 80036b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80036ba:	2340      	movs	r3, #64	@ 0x40
 80036bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80036c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80036c8:	f107 0308 	add.w	r3, r7, #8
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff feec 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80036d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d8:	2119      	movs	r1, #25
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f94e 	bl	800397c <SDMMC_GetCmdResp1>
 80036e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036e2:	69fb      	ldr	r3, [r7, #28]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80036f8:	230c      	movs	r3, #12
 80036fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80036fc:	2340      	movs	r3, #64	@ 0x40
 80036fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003708:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fecb 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8003716:	4a05      	ldr	r2, [pc, #20]	@ (800372c <SDMMC_CmdStopTransfer+0x40>)
 8003718:	210c      	movs	r1, #12
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f92e 	bl	800397c <SDMMC_GetCmdResp1>
 8003720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003722:	69fb      	ldr	r3, [r7, #28]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	05f5e100 	.word	0x05f5e100

08003730 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	@ 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003740:	2307      	movs	r3, #7
 8003742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003744:	2340      	movs	r3, #64	@ 0x40
 8003746:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800374c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003750:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003752:	f107 0310 	add.w	r3, r7, #16
 8003756:	4619      	mov	r1, r3
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fea7 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	2107      	movs	r1, #7
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f909 	bl	800397c <SDMMC_GetCmdResp1>
 800376a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800376e:	4618      	mov	r0, r3
 8003770:	3728      	adds	r7, #40	@ 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800378e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003794:	f107 0308 	add.w	r3, r7, #8
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fe86 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb23 	bl	8003dec <SDMMC_GetCmdError>
 80037a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037a8:	69fb      	ldr	r3, [r7, #28]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b088      	sub	sp, #32
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80037ba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80037be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80037c0:	2308      	movs	r3, #8
 80037c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80037c4:	2340      	movs	r3, #64	@ 0x40
 80037c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80037cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fe67 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fab6 	bl	8003d50 <SDMMC_GetCmdResp7>
 80037e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037e6:	69fb      	ldr	r3, [r7, #28]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80037fe:	2337      	movs	r3, #55	@ 0x37
 8003800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003802:	2340      	movs	r3, #64	@ 0x40
 8003804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800380a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800380e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003810:	f107 0308 	add.w	r3, r7, #8
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe48 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800381c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003820:	2137      	movs	r1, #55	@ 0x37
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8aa 	bl	800397c <SDMMC_GetCmdResp1>
 8003828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800382a:	69fb      	ldr	r3, [r7, #28]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <SDMMC_CmdAppOperCommand+0x44>)
 8003842:	4313      	orrs	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003846:	2329      	movs	r3, #41	@ 0x29
 8003848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800384a:	2340      	movs	r3, #64	@ 0x40
 800384c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003858:	f107 0308 	add.w	r3, r7, #8
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fe24 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f9bf 	bl	8003be8 <SDMMC_GetCmdResp3>
 800386a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800386c:	69fb      	ldr	r3, [r7, #28]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	80100000 	.word	0x80100000

0800387c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003888:	2302      	movs	r3, #2
 800388a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800388c:	23c0      	movs	r3, #192	@ 0xc0
 800388e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003898:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800389a:	f107 0308 	add.w	r3, r7, #8
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fe03 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f956 	bl	8003b58 <SDMMC_GetCmdResp2>
 80038ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038ae:	69fb      	ldr	r3, [r7, #28]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80038c6:	2309      	movs	r3, #9
 80038c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80038ca:	23c0      	movs	r3, #192	@ 0xc0
 80038cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80038d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fde4 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f937 	bl	8003b58 <SDMMC_GetCmdResp2>
 80038ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038ec:	69fb      	ldr	r3, [r7, #28]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b088      	sub	sp, #32
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003904:	2303      	movs	r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003908:	2340      	movs	r3, #64	@ 0x40
 800390a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fdc5 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	2103      	movs	r1, #3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f99c 	bl	8003c64 <SDMMC_GetCmdResp6>
 800392c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800392e:	69fb      	ldr	r3, [r7, #28]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003946:	230d      	movs	r3, #13
 8003948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800394a:	2340      	movs	r3, #64	@ 0x40
 800394c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fda4 	bl	80034ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8003964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003968:	210d      	movs	r1, #13
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f806 	bl	800397c <SDMMC_GetCmdResp1>
 8003970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003972:	69fb      	ldr	r3, [r7, #28]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	460b      	mov	r3, r1
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800398a:	4b70      	ldr	r3, [pc, #448]	@ (8003b4c <SDMMC_GetCmdResp1+0x1d0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a70      	ldr	r2, [pc, #448]	@ (8003b50 <SDMMC_GetCmdResp1+0x1d4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	0a5a      	lsrs	r2, r3, #9
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	61fa      	str	r2, [r7, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80039a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80039ac:	e0c9      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ef      	beq.n	800399e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ea      	bne.n	800399e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2204      	movs	r2, #4
 80039d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80039da:	2304      	movs	r3, #4
 80039dc:	e0b1      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0a6      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	22c5      	movs	r2, #197	@ 0xc5
 80039f8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff fd80 	bl	8003500 <SDMMC_GetCommandResponse>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d001      	beq.n	8003a0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e099      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003a0e:	2100      	movs	r1, #0
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff fd82 	bl	800351a <SDMMC_GetResponse>
 8003a16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b54 <SDMMC_GetCmdResp1+0x1d8>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e08d      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da02      	bge.n	8003a32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a30:	e087      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003a3c:	2340      	movs	r3, #64	@ 0x40
 8003a3e:	e080      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	e079      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a5c:	e071      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a6c:	e069      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a7c:	e061      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003a88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a8c:	e059      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a9c:	e051      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aac:	e049      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003ab8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003abc:	e041      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003acc:	e039      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003adc:	e031      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ae8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003aec:	e029      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003af8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003afc:	e021      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003b08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b0c:	e019      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003b18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b1c:	e011      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003b28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b2c:	e009      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003b38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003b3c:	e001      	b.n	8003b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	10624dd3 	.word	0x10624dd3
 8003b54:	fdffe008 	.word	0xfdffe008

08003b58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b60:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <SDMMC_GetCmdResp2+0x88>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1f      	ldr	r2, [pc, #124]	@ (8003be4 <SDMMC_GetCmdResp2+0x8c>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b84:	e026      	b.n	8003bd4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ef      	beq.n	8003b76 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ea      	bne.n	8003b76 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e00e      	b.n	8003bd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e003      	b.n	8003bd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	22c5      	movs	r2, #197	@ 0xc5
 8003bd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	20000000 	.word	0x20000000
 8003be4:	10624dd3 	.word	0x10624dd3

08003be8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <SDMMC_GetCmdResp3+0x74>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <SDMMC_GetCmdResp3+0x78>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0a5b      	lsrs	r3, r3, #9
 8003bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1e5a      	subs	r2, r3, #1
 8003c0a:	60fa      	str	r2, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c14:	e01b      	b.n	8003c4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ef      	beq.n	8003c06 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ea      	bne.n	8003c06 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c42:	2304      	movs	r3, #4
 8003c44:	e003      	b.n	8003c4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	22c5      	movs	r2, #197	@ 0xc5
 8003c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	10624dd3 	.word	0x10624dd3

08003c64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c72:	4b35      	ldr	r3, [pc, #212]	@ (8003d48 <SDMMC_GetCmdResp6+0xe4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a35      	ldr	r2, [pc, #212]	@ (8003d4c <SDMMC_GetCmdResp6+0xe8>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	0a5b      	lsrs	r3, r3, #9
 8003c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	61fa      	str	r2, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c96:	e052      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1ea      	bne.n	8003c88 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e03a      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e02f      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff fc0e 	bl	8003500 <SDMMC_GetCommandResponse>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d001      	beq.n	8003cf2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e025      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22c5      	movs	r2, #197	@ 0xc5
 8003cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff fc0d 	bl	800351a <SDMMC_GetResponse>
 8003d00:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e011      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d28:	e009      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d38:	e001      	b.n	8003d3e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	10624dd3 	.word	0x10624dd3

08003d50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d58:	4b22      	ldr	r3, [pc, #136]	@ (8003de4 <SDMMC_GetCmdResp7+0x94>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	@ (8003de8 <SDMMC_GetCmdResp7+0x98>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a5b      	lsrs	r3, r3, #9
 8003d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	60fa      	str	r2, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d7c:	e02c      	b.n	8003dd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ef      	beq.n	8003d6e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ea      	bne.n	8003d6e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2204      	movs	r2, #4
 8003da8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003daa:	2304      	movs	r3, #4
 8003dac:	e014      	b.n	8003dd8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e009      	b.n	8003dd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003dd6:	2300      	movs	r3, #0
  
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000000 	.word	0x20000000
 8003de8:	10624dd3 	.word	0x10624dd3

08003dec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <SDMMC_GetCmdError+0x50>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <SDMMC_GetCmdError+0x54>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0a5b      	lsrs	r3, r3, #9
 8003e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	60fa      	str	r2, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e18:	e009      	b.n	8003e2e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f1      	beq.n	8003e0a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	22c5      	movs	r2, #197	@ 0xc5
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003e48:	4904      	ldr	r1, [pc, #16]	@ (8003e5c <MX_FATFS_Init+0x18>)
 8003e4a:	4805      	ldr	r0, [pc, #20]	@ (8003e60 <MX_FATFS_Init+0x1c>)
 8003e4c:	f002 fce4 	bl	8006818 <FATFS_LinkDriver>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b03      	ldr	r3, [pc, #12]	@ (8003e64 <MX_FATFS_Init+0x20>)
 8003e56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20002194 	.word	0x20002194
 8003e60:	08007da0 	.word	0x08007da0
 8003e64:	20002190 	.word	0x20002190

08003e68 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e6c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003e82:	f000 f86b 	bl	8003f5c <BSP_SD_IsDetected>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d001      	beq.n	8003e90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e005      	b.n	8003e9c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8003e90:	4804      	ldr	r0, [pc, #16]	@ (8003ea4 <BSP_SD_Init+0x2c>)
 8003e92:	f7fe fb15 	bl	80024c0 <HAL_SD_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20002104 	.word	0x20002104

08003ea8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	4806      	ldr	r0, [pc, #24]	@ (8003ee0 <BSP_SD_ReadBlocks+0x38>)
 8003ec6:	f7fe fbb3 	bl	8002630 <HAL_SD_ReadBlocks>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20002104 	.word	0x20002104

08003ee4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	4806      	ldr	r0, [pc, #24]	@ (8003f1c <BSP_SD_WriteBlocks+0x38>)
 8003f02:	f7fe fd73 	bl	80029ec <HAL_SD_WriteBlocks>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20002104 	.word	0x20002104

08003f20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003f24:	4805      	ldr	r0, [pc, #20]	@ (8003f3c <BSP_SD_GetCardState+0x1c>)
 8003f26:	f7ff f8b7 	bl	8003098 <HAL_SD_GetCardState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20002104 	.word	0x20002104

08003f40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4803      	ldr	r0, [pc, #12]	@ (8003f58 <BSP_SD_GetCardInfo+0x18>)
 8003f4c:	f7ff f878 	bl	8003040 <HAL_SD_GetCardInfo>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20002104 	.word	0x20002104

08003f5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003f62:	2301      	movs	r3, #1
 8003f64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8003f66:	f000 f80b 	bl	8003f80 <BSP_PlatformIsDetected>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8003f70:	2300      	movs	r3, #0
 8003f72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	b2db      	uxtb	r3, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8003f86:	2301      	movs	r3, #1
 8003f88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8003f8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f8e:	4806      	ldr	r0, [pc, #24]	@ (8003fa8 <BSP_PlatformIsDetected+0x28>)
 8003f90:	f7fd fa38 	bl	8001404 <HAL_GPIO_ReadPin>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40020800 	.word	0x40020800

08003fac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <SD_CheckStatus+0x38>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003fbc:	f7ff ffb0 	bl	8003f20 <BSP_SD_GetCardState>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003fc6:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <SD_CheckStatus+0x38>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <SD_CheckStatus+0x38>)
 8003fd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003fd6:	4b03      	ldr	r3, [pc, #12]	@ (8003fe4 <SD_CheckStatus+0x38>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b2db      	uxtb	r3, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000009 	.word	0x20000009

08003fe8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <SD_initialize+0x38>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003ff8:	f7ff ff3e 	bl	8003e78 <BSP_SD_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ffd1 	bl	8003fac <SD_CheckStatus>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <SD_initialize+0x38>)
 8004010:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004012:	4b03      	ldr	r3, [pc, #12]	@ (8004020 <SD_initialize+0x38>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000009 	.word	0x20000009

08004024 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ffbb 	bl	8003fac <SD_CheckStatus>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68b8      	ldr	r0, [r7, #8]
 800405e:	f7ff ff23 	bl	8003ea8 <BSP_SD_ReadBlocks>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004068:	bf00      	nop
 800406a:	f7ff ff59 	bl	8003f20 <BSP_SD_GetCardState>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1fa      	bne.n	800406a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4603      	mov	r3, r0
 8004090:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	68b8      	ldr	r0, [r7, #8]
 80040a0:	f7ff ff20 	bl	8003ee4 <BSP_SD_WriteBlocks>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d107      	bne.n	80040ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80040aa:	bf00      	nop
 80040ac:	f7ff ff38 	bl	8003f20 <BSP_SD_GetCardState>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1fa      	bne.n	80040ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	@ 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	603a      	str	r2, [r7, #0]
 80040ce:	71fb      	strb	r3, [r7, #7]
 80040d0:	460b      	mov	r3, r1
 80040d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80040da:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <SD_ioctl+0xac>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <SD_ioctl+0x28>
 80040e8:	2303      	movs	r3, #3
 80040ea:	e03c      	b.n	8004166 <SD_ioctl+0xa2>

  switch (cmd)
 80040ec:	79bb      	ldrb	r3, [r7, #6]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d834      	bhi.n	800415c <SD_ioctl+0x98>
 80040f2:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <SD_ioctl+0x34>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004109 	.word	0x08004109
 80040fc:	08004111 	.word	0x08004111
 8004100:	08004129 	.word	0x08004129
 8004104:	08004143 	.word	0x08004143
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800410e:	e028      	b.n	8004162 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff13 	bl	8003f40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004126:	e01c      	b.n	8004162 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff07 	bl	8003f40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	b29a      	uxth	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004140:	e00f      	b.n	8004162 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fefa 	bl	8003f40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800414c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414e:	0a5a      	lsrs	r2, r3, #9
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800415a:	e002      	b.n	8004162 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800415c:	2304      	movs	r3, #4
 800415e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004166:	4618      	mov	r0, r3
 8004168:	3730      	adds	r7, #48	@ 0x30
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000009 	.word	0x20000009

08004174 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	4a08      	ldr	r2, [pc, #32]	@ (80041a4 <disk_status+0x30>)
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	79fa      	ldrb	r2, [r7, #7]
 800418c:	4905      	ldr	r1, [pc, #20]	@ (80041a4 <disk_status+0x30>)
 800418e:	440a      	add	r2, r1
 8004190:	7a12      	ldrb	r2, [r2, #8]
 8004192:	4610      	mov	r0, r2
 8004194:	4798      	blx	r3
 8004196:	4603      	mov	r3, r0
 8004198:	73fb      	strb	r3, [r7, #15]
  return stat;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200021c0 	.word	0x200021c0

080041a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <disk_initialize+0x48>)
 80041ba:	5cd3      	ldrb	r3, [r2, r3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d111      	bne.n	80041e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <disk_initialize+0x48>)
 80041c4:	2101      	movs	r1, #1
 80041c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	4a09      	ldr	r2, [pc, #36]	@ (80041f0 <disk_initialize+0x48>)
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	79fa      	ldrb	r2, [r7, #7]
 80041d6:	4906      	ldr	r1, [pc, #24]	@ (80041f0 <disk_initialize+0x48>)
 80041d8:	440a      	add	r2, r1
 80041da:	7a12      	ldrb	r2, [r2, #8]
 80041dc:	4610      	mov	r0, r2
 80041de:	4798      	blx	r3
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200021c0 	.word	0x200021c0

080041f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <disk_read+0x3c>)
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	689c      	ldr	r4, [r3, #8]
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	4a07      	ldr	r2, [pc, #28]	@ (8004230 <disk_read+0x3c>)
 8004214:	4413      	add	r3, r2
 8004216:	7a18      	ldrb	r0, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	47a0      	blx	r4
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]
  return res;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}
 800422e:	bf00      	nop
 8004230:	200021c0 	.word	0x200021c0

08004234 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4603      	mov	r3, r0
 8004242:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <disk_write+0x3c>)
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	68dc      	ldr	r4, [r3, #12]
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	4a07      	ldr	r2, [pc, #28]	@ (8004270 <disk_write+0x3c>)
 8004254:	4413      	add	r3, r2
 8004256:	7a18      	ldrb	r0, [r3, #8]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	47a0      	blx	r4
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]
  return res;
 8004264:	7dfb      	ldrb	r3, [r7, #23]
}
 8004266:	4618      	mov	r0, r3
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}
 800426e:	bf00      	nop
 8004270:	200021c0 	.word	0x200021c0

08004274 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	603a      	str	r2, [r7, #0]
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	460b      	mov	r3, r1
 8004282:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <disk_ioctl+0x38>)
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	79fa      	ldrb	r2, [r7, #7]
 8004292:	4906      	ldr	r1, [pc, #24]	@ (80042ac <disk_ioctl+0x38>)
 8004294:	440a      	add	r2, r1
 8004296:	7a10      	ldrb	r0, [r2, #8]
 8004298:	79b9      	ldrb	r1, [r7, #6]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4798      	blx	r3
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200021c0 	.word	0x200021c0

080042b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3301      	adds	r3, #1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80042c0:	89fb      	ldrh	r3, [r7, #14]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	b21a      	sxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b21b      	sxth	r3, r3
 80042cc:	4313      	orrs	r3, r2
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80042d2:	89fb      	ldrh	r3, [r7, #14]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3303      	adds	r3, #3
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	3202      	adds	r2, #2
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	3201      	adds	r2, #1
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
	return rv;
 8004318:	68fb      	ldr	r3, [r7, #12]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	887a      	ldrh	r2, [r7, #2]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	1c53      	adds	r3, r2, #1
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1c59      	adds	r1, r3, #1
 80043d8:	6179      	str	r1, [r7, #20]
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f1      	bne.n	80043ce <mem_cpy+0x1a>
	}
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	617a      	str	r2, [r7, #20]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3b01      	subs	r3, #1
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f3      	bne.n	8004406 <mem_set+0x10>
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800442c:	b480      	push	{r7}
 800442e:	b089      	sub	sp, #36	@ 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	61fa      	str	r2, [r7, #28]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	61ba      	str	r2, [r7, #24]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3b01      	subs	r3, #1
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <mem_cmp+0x40>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0eb      	beq.n	8004444 <mem_cmp+0x18>

	return r;
 800446c:	697b      	ldr	r3, [r7, #20]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	@ 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004484:	e002      	b.n	800448c <chk_chr+0x12>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3301      	adds	r3, #1
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <chk_chr+0x26>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	4293      	cmp	r3, r2
 800449e:	d1f2      	bne.n	8004486 <chk_chr+0xc>
	return *str;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	781b      	ldrb	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e029      	b.n	8004518 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80044c4:	4a27      	ldr	r2, [pc, #156]	@ (8004564 <chk_lock+0xb4>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4413      	add	r3, r2
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01d      	beq.n	800450e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80044d2:	4a24      	ldr	r2, [pc, #144]	@ (8004564 <chk_lock+0xb4>)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	4413      	add	r3, r2
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d116      	bne.n	8004512 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80044e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004564 <chk_lock+0xb4>)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	4413      	add	r3, r2
 80044ec:	3304      	adds	r3, #4
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d10c      	bne.n	8004512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80044f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004564 <chk_lock+0xb4>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	3308      	adds	r3, #8
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004508:	429a      	cmp	r2, r3
 800450a:	d102      	bne.n	8004512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800450c:	e007      	b.n	800451e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d9d2      	bls.n	80044c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d109      	bne.n	8004538 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <chk_lock+0x80>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d101      	bne.n	8004534 <chk_lock+0x84>
 8004530:	2300      	movs	r3, #0
 8004532:	e010      	b.n	8004556 <chk_lock+0xa6>
 8004534:	2312      	movs	r3, #18
 8004536:	e00e      	b.n	8004556 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <chk_lock+0xa0>
 800453e:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <chk_lock+0xb4>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	330c      	adds	r3, #12
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454e:	d101      	bne.n	8004554 <chk_lock+0xa4>
 8004550:	2310      	movs	r3, #16
 8004552:	e000      	b.n	8004556 <chk_lock+0xa6>
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200021a0 	.word	0x200021a0

08004568 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	e002      	b.n	800457a <enq_lock+0x12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3301      	adds	r3, #1
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d806      	bhi.n	800458e <enq_lock+0x26>
 8004580:	4a09      	ldr	r2, [pc, #36]	@ (80045a8 <enq_lock+0x40>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4413      	add	r3, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f2      	bne.n	8004574 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b02      	cmp	r3, #2
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	200021a0 	.word	0x200021a0

080045ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e01f      	b.n	80045fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80045bc:	4a41      	ldr	r2, [pc, #260]	@ (80046c4 <inc_lock+0x118>)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4413      	add	r3, r2
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d113      	bne.n	80045f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80045ce:	4a3d      	ldr	r2, [pc, #244]	@ (80046c4 <inc_lock+0x118>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	3304      	adds	r3, #4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80045de:	429a      	cmp	r2, r3
 80045e0:	d109      	bne.n	80045f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80045e2:	4a38      	ldr	r2, [pc, #224]	@ (80046c4 <inc_lock+0x118>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	3308      	adds	r3, #8
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d006      	beq.n	8004604 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d9dc      	bls.n	80045bc <inc_lock+0x10>
 8004602:	e000      	b.n	8004606 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004604:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d132      	bne.n	8004672 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <inc_lock+0x6c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d806      	bhi.n	800462c <inc_lock+0x80>
 800461e:	4a29      	ldr	r2, [pc, #164]	@ (80046c4 <inc_lock+0x118>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	4413      	add	r3, r2
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f2      	bne.n	8004612 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d101      	bne.n	8004636 <inc_lock+0x8a>
 8004632:	2300      	movs	r3, #0
 8004634:	e040      	b.n	80046b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4922      	ldr	r1, [pc, #136]	@ (80046c4 <inc_lock+0x118>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	440b      	add	r3, r1
 8004642:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	491e      	ldr	r1, [pc, #120]	@ (80046c4 <inc_lock+0x118>)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	440b      	add	r3, r1
 8004650:	3304      	adds	r3, #4
 8004652:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	491a      	ldr	r1, [pc, #104]	@ (80046c4 <inc_lock+0x118>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	440b      	add	r3, r1
 8004660:	3308      	adds	r3, #8
 8004662:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004664:	4a17      	ldr	r2, [pc, #92]	@ (80046c4 <inc_lock+0x118>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	4413      	add	r3, r2
 800466c:	330c      	adds	r3, #12
 800466e:	2200      	movs	r2, #0
 8004670:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <inc_lock+0xe0>
 8004678:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <inc_lock+0x118>)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4413      	add	r3, r2
 8004680:	330c      	adds	r3, #12
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <inc_lock+0xe0>
 8004688:	2300      	movs	r3, #0
 800468a:	e015      	b.n	80046b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d108      	bne.n	80046a4 <inc_lock+0xf8>
 8004692:	4a0c      	ldr	r2, [pc, #48]	@ (80046c4 <inc_lock+0x118>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4413      	add	r3, r2
 800469a:	330c      	adds	r3, #12
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	e001      	b.n	80046a8 <inc_lock+0xfc>
 80046a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046a8:	4906      	ldr	r1, [pc, #24]	@ (80046c4 <inc_lock+0x118>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	440b      	add	r3, r1
 80046b0:	330c      	adds	r3, #12
 80046b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	200021a0 	.word	0x200021a0

080046c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d825      	bhi.n	8004728 <dec_lock+0x60>
		n = Files[i].ctr;
 80046dc:	4a17      	ldr	r2, [pc, #92]	@ (800473c <dec_lock+0x74>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	4413      	add	r3, r2
 80046e4:	330c      	adds	r3, #12
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f0:	d101      	bne.n	80046f6 <dec_lock+0x2e>
 80046f2:	2300      	movs	r3, #0
 80046f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80046f6:	89fb      	ldrh	r3, [r7, #14]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <dec_lock+0x3a>
 80046fc:	89fb      	ldrh	r3, [r7, #14]
 80046fe:	3b01      	subs	r3, #1
 8004700:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004702:	4a0e      	ldr	r2, [pc, #56]	@ (800473c <dec_lock+0x74>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	4413      	add	r3, r2
 800470a:	330c      	adds	r3, #12
 800470c:	89fa      	ldrh	r2, [r7, #14]
 800470e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004710:	89fb      	ldrh	r3, [r7, #14]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <dec_lock+0x5a>
 8004716:	4a09      	ldr	r2, [pc, #36]	@ (800473c <dec_lock+0x74>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	4413      	add	r3, r2
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	737b      	strb	r3, [r7, #13]
 8004726:	e001      	b.n	800472c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004728:	2302      	movs	r3, #2
 800472a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800472c:	7b7b      	ldrb	r3, [r7, #13]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	200021a0 	.word	0x200021a0

08004740 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	e010      	b.n	8004770 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800474e:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <clear_lock+0x44>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	4413      	add	r3, r2
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d105      	bne.n	800476a <clear_lock+0x2a>
 800475e:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <clear_lock+0x44>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	4413      	add	r3, r2
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d9eb      	bls.n	800474e <clear_lock+0xe>
	}
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	200021a0 	.word	0x200021a0

08004788 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	78db      	ldrb	r3, [r3, #3]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d034      	beq.n	8004806 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7858      	ldrb	r0, [r3, #1]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80047ac:	2301      	movs	r3, #1
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	f7ff fd40 	bl	8004234 <disk_write>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	e022      	b.n	8004806 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	1ad2      	subs	r2, r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d217      	bcs.n	8004806 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	789b      	ldrb	r3, [r3, #2]
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e010      	b.n	8004800 <sync_window+0x78>
					wsect += fs->fsize;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7858      	ldrb	r0, [r3, #1]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80047f2:	2301      	movs	r3, #1
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	f7ff fd1d 	bl	8004234 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d8eb      	bhi.n	80047de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d01b      	beq.n	8004860 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ffad 	bl	8004788 <sync_window>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d113      	bne.n	8004860 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7858      	ldrb	r0, [r3, #1]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004842:	2301      	movs	r3, #1
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	f7ff fcd5 	bl	80041f4 <disk_read>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff87 	bl	8004788 <sync_window>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d159      	bne.n	8004938 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d149      	bne.n	8004920 <sync_fs+0xb4>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	791b      	ldrb	r3, [r3, #4]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d145      	bne.n	8004920 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	899b      	ldrh	r3, [r3, #12]
 800489e:	461a      	mov	r2, r3
 80048a0:	2100      	movs	r1, #0
 80048a2:	f7ff fda8 	bl	80043f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3334      	adds	r3, #52	@ 0x34
 80048aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80048ae:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fd37 	bl	8004326 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3334      	adds	r3, #52	@ 0x34
 80048bc:	4921      	ldr	r1, [pc, #132]	@ (8004944 <sync_fs+0xd8>)
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fd4c 	bl	800435c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3334      	adds	r3, #52	@ 0x34
 80048c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80048cc:	491e      	ldr	r1, [pc, #120]	@ (8004948 <sync_fs+0xdc>)
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fd44 	bl	800435c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3334      	adds	r3, #52	@ 0x34
 80048d8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7ff fd3a 	bl	800435c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3334      	adds	r3, #52	@ 0x34
 80048ec:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7ff fd30 	bl	800435c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7858      	ldrb	r0, [r3, #1]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004914:	2301      	movs	r3, #1
 8004916:	f7ff fc8d 	bl	8004234 <disk_write>
			fs->fsi_flag = 0;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2200      	movs	r2, #0
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fca3 	bl	8004274 <disk_ioctl>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <sync_fs+0xcc>
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	41615252 	.word	0x41615252
 8004948:	61417272 	.word	0x61417272

0800494c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	3b02      	subs	r3, #2
 800495a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	3b02      	subs	r3, #2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d301      	bcc.n	800496c <clust2sect+0x20>
 8004968:	2300      	movs	r3, #0
 800496a:	e008      	b.n	800497e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	895b      	ldrh	r3, [r3, #10]
 8004970:	461a      	mov	r2, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	fb03 f202 	mul.w	r2, r3, r2
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	4413      	add	r3, r2
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d904      	bls.n	80049aa <get_fat+0x20>
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80049aa:	2301      	movs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e0ba      	b.n	8004b26 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	f000 8082 	beq.w	8004ac4 <get_fat+0x13a>
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	f300 80a6 	bgt.w	8004b12 <get_fat+0x188>
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d002      	beq.n	80049d0 <get_fat+0x46>
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d055      	beq.n	8004a7a <get_fat+0xf0>
 80049ce:	e0a0      	b.n	8004b12 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	899b      	ldrh	r3, [r3, #12]
 80049e6:	4619      	mov	r1, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ee:	4413      	add	r3, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	6938      	ldr	r0, [r7, #16]
 80049f4:	f7ff ff0c 	bl	8004810 <move_window>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f040 808c 	bne.w	8004b18 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	60fa      	str	r2, [r7, #12]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	8992      	ldrh	r2, [r2, #12]
 8004a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a0e:	fb01 f202 	mul.w	r2, r1, r2
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a1c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	899b      	ldrh	r3, [r3, #12]
 8004a26:	4619      	mov	r1, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a2e:	4413      	add	r3, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	6938      	ldr	r0, [r7, #16]
 8004a34:	f7ff feec 	bl	8004810 <move_window>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d16e      	bne.n	8004b1c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	899b      	ldrh	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a4a:	fb01 f202 	mul.w	r2, r1, r2
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <get_fat+0xe6>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	e002      	b.n	8004a76 <get_fat+0xec>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	617b      	str	r3, [r7, #20]
			break;
 8004a78:	e055      	b.n	8004b26 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	899b      	ldrh	r3, [r3, #12]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4619      	mov	r1, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a8e:	4413      	add	r3, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	6938      	ldr	r0, [r7, #16]
 8004a94:	f7ff febc 	bl	8004810 <move_window>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d140      	bne.n	8004b20 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	8992      	ldrh	r2, [r2, #12]
 8004aac:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ab0:	fb00 f202 	mul.w	r2, r0, r2
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fbf9 	bl	80042b0 <ld_word>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	617b      	str	r3, [r7, #20]
			break;
 8004ac2:	e030      	b.n	8004b26 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	899b      	ldrh	r3, [r3, #12]
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ad8:	4413      	add	r3, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6938      	ldr	r0, [r7, #16]
 8004ade:	f7ff fe97 	bl	8004810 <move_window>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11d      	bne.n	8004b24 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	8992      	ldrh	r2, [r2, #12]
 8004af6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004afa:	fb00 f202 	mul.w	r2, r0, r2
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fbec 	bl	80042e0 <ld_dword>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b0e:	617b      	str	r3, [r7, #20]
			break;
 8004b10:	e009      	b.n	8004b26 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004b12:	2301      	movs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e006      	b.n	8004b26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b18:	bf00      	nop
 8004b1a:	e004      	b.n	8004b26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b1c:	bf00      	nop
 8004b1e:	e002      	b.n	8004b26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b24:	bf00      	nop
		}
	}

	return val;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b089      	sub	sp, #36	@ 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	f240 8109 	bls.w	8004d5a <put_fat+0x22a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	f080 8103 	bcs.w	8004d5a <put_fat+0x22a>
		switch (fs->fs_type) {
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	f000 80b6 	beq.w	8004cca <put_fat+0x19a>
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	f300 80fb 	bgt.w	8004d5a <put_fat+0x22a>
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d003      	beq.n	8004b70 <put_fat+0x40>
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	f000 8083 	beq.w	8004c74 <put_fat+0x144>
 8004b6e:	e0f4      	b.n	8004d5a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	899b      	ldrh	r3, [r3, #12]
 8004b86:	4619      	mov	r1, r3
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b8e:	4413      	add	r3, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff fe3c 	bl	8004810 <move_window>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b9c:	7ffb      	ldrb	r3, [r7, #31]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 80d4 	bne.w	8004d4c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	61ba      	str	r2, [r7, #24]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	8992      	ldrh	r2, [r2, #12]
 8004bb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bb8:	fb00 f202 	mul.w	r2, r0, r2
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <put_fat+0xb8>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	b25a      	sxtb	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	b25b      	sxtb	r3, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e001      	b.n	8004bec <put_fat+0xbc>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	899b      	ldrh	r3, [r3, #12]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c06:	4413      	add	r3, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fe00 	bl	8004810 <move_window>
 8004c10:	4603      	mov	r3, r0
 8004c12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 809a 	bne.w	8004d50 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	899b      	ldrh	r3, [r3, #12]
 8004c26:	461a      	mov	r2, r3
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c2e:	fb00 f202 	mul.w	r2, r0, r2
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <put_fat+0x11a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e00e      	b.n	8004c68 <put_fat+0x138>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	f023 030f 	bic.w	r3, r3, #15
 8004c54:	b25a      	sxtb	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	70da      	strb	r2, [r3, #3]
			break;
 8004c72:	e072      	b.n	8004d5a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	899b      	ldrh	r3, [r3, #12]
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c88:	4413      	add	r3, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff fdbf 	bl	8004810 <move_window>
 8004c92:	4603      	mov	r3, r0
 8004c94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c96:	7ffb      	ldrb	r3, [r7, #31]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d15b      	bne.n	8004d54 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	8992      	ldrh	r2, [r2, #12]
 8004caa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004cae:	fb00 f202 	mul.w	r2, r0, r2
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fb32 	bl	8004326 <st_word>
			fs->wflag = 1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	70da      	strb	r2, [r3, #3]
			break;
 8004cc8:	e047      	b.n	8004d5a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	899b      	ldrh	r3, [r3, #12]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cde:	4413      	add	r3, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff fd94 	bl	8004810 <move_window>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cec:	7ffb      	ldrb	r3, [r7, #31]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d132      	bne.n	8004d58 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	8992      	ldrh	r2, [r2, #12]
 8004d06:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d0a:	fb00 f202 	mul.w	r2, r0, r2
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	440b      	add	r3, r1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fae4 	bl	80042e0 <ld_dword>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004d1e:	4323      	orrs	r3, r4
 8004d20:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	8992      	ldrh	r2, [r2, #12]
 8004d30:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d34:	fb00 f202 	mul.w	r2, r0, r2
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fb0c 	bl	800435c <st_dword>
			fs->wflag = 1;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	70da      	strb	r2, [r3, #3]
			break;
 8004d4a:	e006      	b.n	8004d5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004d4c:	bf00      	nop
 8004d4e:	e004      	b.n	8004d5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004d50:	bf00      	nop
 8004d52:	e002      	b.n	8004d5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8004d58:	bf00      	nop
		}
	}
	return res;
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3724      	adds	r7, #36	@ 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d904      	bls.n	8004d8a <remove_chain+0x26>
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d301      	bcc.n	8004d8e <remove_chain+0x2a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e04b      	b.n	8004e26 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f7ff fec8 	bl	8004b30 <put_fat>
 8004da0:	4603      	mov	r3, r0
 8004da2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004da4:	7ffb      	ldrb	r3, [r7, #31]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <remove_chain+0x4a>
 8004daa:	7ffb      	ldrb	r3, [r7, #31]
 8004dac:	e03b      	b.n	8004e26 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fdea 	bl	800498a <get_fat>
 8004db6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d031      	beq.n	8004e22 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <remove_chain+0x64>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e02e      	b.n	8004e26 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d101      	bne.n	8004dd4 <remove_chain+0x70>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e028      	b.n	8004e26 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	69b8      	ldr	r0, [r7, #24]
 8004dda:	f7ff fea9 	bl	8004b30 <put_fat>
 8004dde:	4603      	mov	r3, r0
 8004de0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004de2:	7ffb      	ldrb	r3, [r7, #31]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <remove_chain+0x88>
 8004de8:	7ffb      	ldrb	r3, [r7, #31]
 8004dea:	e01c      	b.n	8004e26 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	3b02      	subs	r3, #2
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d20b      	bcs.n	8004e12 <remove_chain+0xae>
			fs->free_clst++;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	791b      	ldrb	r3, [r3, #4]
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3c6      	bcc.n	8004dae <remove_chain+0x4a>
 8004e20:	e000      	b.n	8004e24 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004e22:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <create_chain+0x2c>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d31b      	bcc.n	8004e92 <create_chain+0x64>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	e018      	b.n	8004e92 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fd91 	bl	800498a <get_fat>
 8004e68:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d801      	bhi.n	8004e74 <create_chain+0x46>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e070      	b.n	8004f56 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d101      	bne.n	8004e80 <create_chain+0x52>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	e06a      	b.n	8004f56 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d201      	bcs.n	8004e8e <create_chain+0x60>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	e063      	b.n	8004f56 <create_chain+0x128>
		scl = clst;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d307      	bcc.n	8004eb6 <create_chain+0x88>
				ncl = 2;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d901      	bls.n	8004eb6 <create_chain+0x88>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e04f      	b.n	8004f56 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004eb6:	69f9      	ldr	r1, [r7, #28]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fd66 	bl	800498a <get_fat>
 8004ebe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d003      	beq.n	8004ed4 <create_chain+0xa6>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d101      	bne.n	8004ed8 <create_chain+0xaa>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	e03e      	b.n	8004f56 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d1da      	bne.n	8004e96 <create_chain+0x68>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e038      	b.n	8004f56 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ee4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	69f9      	ldr	r1, [r7, #28]
 8004eec:	6938      	ldr	r0, [r7, #16]
 8004eee:	f7ff fe1f 	bl	8004b30 <put_fat>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <create_chain+0xe2>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6938      	ldr	r0, [r7, #16]
 8004f08:	f7ff fe12 	bl	8004b30 <put_fat>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d116      	bne.n	8004f44 <create_chain+0x116>
		fs->last_clst = ncl;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	3b02      	subs	r3, #2
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d804      	bhi.n	8004f34 <create_chain+0x106>
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	791b      	ldrb	r3, [r3, #4]
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	711a      	strb	r2, [r3, #4]
 8004f42:	e007      	b.n	8004f54 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d102      	bne.n	8004f50 <create_chain+0x122>
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	e000      	b.n	8004f52 <create_chain+0x124>
 8004f50:	2301      	movs	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004f54:	69fb      	ldr	r3, [r7, #28]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f74:	d204      	bcs.n	8004f80 <dir_sdi+0x22>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004f80:	2302      	movs	r3, #2
 8004f82:	e071      	b.n	8005068 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <dir_sdi+0x46>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d902      	bls.n	8004fa4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10c      	bne.n	8004fc4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	8912      	ldrh	r2, [r2, #8]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d301      	bcc.n	8004fba <dir_sdi+0x5c>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e056      	b.n	8005068 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	61da      	str	r2, [r3, #28]
 8004fc2:	e02d      	b.n	8005020 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	895b      	ldrh	r3, [r3, #10]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	899b      	ldrh	r3, [r3, #12]
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004fd4:	e019      	b.n	800500a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fcd5 	bl	800498a <get_fat>
 8004fe0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d101      	bne.n	8004fee <dir_sdi+0x90>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e03c      	b.n	8005068 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d904      	bls.n	8004ffe <dir_sdi+0xa0>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d301      	bcc.n	8005002 <dir_sdi+0xa4>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e032      	b.n	8005068 <dir_sdi+0x10a>
			ofs -= csz;
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	429a      	cmp	r2, r3
 8005010:	d2e1      	bcs.n	8004fd6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	6938      	ldr	r0, [r7, #16]
 8005016:	f7ff fc99 	bl	800494c <clust2sect>
 800501a:	4602      	mov	r2, r0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <dir_sdi+0xd4>
 800502e:	2302      	movs	r3, #2
 8005030:	e01a      	b.n	8005068 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	899b      	ldrh	r3, [r3, #12]
 800503a:	4619      	mov	r1, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	899b      	ldrh	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	fbb3 f0f2 	udiv	r0, r3, r2
 800505a:	fb00 f202 	mul.w	r2, r0, r2
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	18ca      	adds	r2, r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	3320      	adds	r3, #32
 8005086:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <dir_next+0x28>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005096:	d301      	bcc.n	800509c <dir_next+0x2c>
 8005098:	2304      	movs	r3, #4
 800509a:	e0bb      	b.n	8005214 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	899b      	ldrh	r3, [r3, #12]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050a8:	fb01 f202 	mul.w	r2, r1, r2
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f040 809d 	bne.w	80051ee <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	8912      	ldrh	r2, [r2, #8]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f0c0 808d 	bcc.w	80051ee <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	61da      	str	r2, [r3, #28]
 80050da:	2304      	movs	r3, #4
 80050dc:	e09a      	b.n	8005214 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	899b      	ldrh	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	8952      	ldrh	r2, [r2, #10]
 80050ee:	3a01      	subs	r2, #1
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d17b      	bne.n	80051ee <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7ff fc43 	bl	800498a <get_fat>
 8005104:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d801      	bhi.n	8005110 <dir_next+0xa0>
 800510c:	2302      	movs	r3, #2
 800510e:	e081      	b.n	8005214 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d101      	bne.n	800511c <dir_next+0xac>
 8005118:	2301      	movs	r3, #1
 800511a:	e07b      	b.n	8005214 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	429a      	cmp	r2, r3
 8005124:	d359      	bcc.n	80051da <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	61da      	str	r2, [r3, #28]
 8005132:	2304      	movs	r3, #4
 8005134:	e06e      	b.n	8005214 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7ff fe75 	bl	8004e2e <create_chain>
 8005144:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <dir_next+0xe0>
 800514c:	2307      	movs	r3, #7
 800514e:	e061      	b.n	8005214 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <dir_next+0xea>
 8005156:	2302      	movs	r3, #2
 8005158:	e05c      	b.n	8005214 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d101      	bne.n	8005166 <dir_next+0xf6>
 8005162:	2301      	movs	r3, #1
 8005164:	e056      	b.n	8005214 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff fb0e 	bl	8004788 <sync_window>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <dir_next+0x106>
 8005172:	2301      	movs	r3, #1
 8005174:	e04e      	b.n	8005214 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	899b      	ldrh	r3, [r3, #12]
 8005180:	461a      	mov	r2, r3
 8005182:	2100      	movs	r1, #0
 8005184:	f7ff f937 	bl	80043f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	6979      	ldr	r1, [r7, #20]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff fbdc 	bl	800494c <clust2sect>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
 800519a:	e012      	b.n	80051c2 <dir_next+0x152>
						fs->wflag = 1;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff faf0 	bl	8004788 <sync_window>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <dir_next+0x142>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e030      	b.n	8005214 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3301      	adds	r3, #1
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	895b      	ldrh	r3, [r3, #10]
 80051c6:	461a      	mov	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d3e6      	bcc.n	800519c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff fbb2 	bl	800494c <clust2sect>
 80051e8:	4602      	mov	r2, r0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	899b      	ldrh	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	fbb3 f0f2 	udiv	r0, r3, r2
 8005206:	fb00 f202 	mul.w	r2, r0, r2
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	18ca      	adds	r2, r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800522c:	2100      	movs	r1, #0
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fe95 	bl	8004f5e <dir_sdi>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d12b      	bne.n	8005296 <dir_alloc+0x7a>
		n = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4619      	mov	r1, r3
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fae1 	bl	8004810 <move_window>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11d      	bne.n	8005294 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2be5      	cmp	r3, #229	@ 0xe5
 8005260:	d004      	beq.n	800526c <dir_alloc+0x50>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	3301      	adds	r3, #1
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d102      	bne.n	8005280 <dir_alloc+0x64>
 800527a:	e00c      	b.n	8005296 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005280:	2101      	movs	r1, #1
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fef4 	bl	8005070 <dir_next>
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0d7      	beq.n	8005242 <dir_alloc+0x26>
 8005292:	e000      	b.n	8005296 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005294:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d101      	bne.n	80052a0 <dir_alloc+0x84>
 800529c:	2307      	movs	r3, #7
 800529e:	75fb      	strb	r3, [r7, #23]
	return res;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	331a      	adds	r3, #26
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fe fff9 	bl	80042b0 <ld_word>
 80052be:	4603      	mov	r3, r0
 80052c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d109      	bne.n	80052de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe ffee 	bl	80042b0 <ld_word>
 80052d4:	4603      	mov	r3, r0
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	331a      	adds	r3, #26
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	b292      	uxth	r2, r2
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff f811 	bl	8004326 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d109      	bne.n	8005320 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f103 0214 	add.w	r2, r3, #20
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	b29b      	uxth	r3, r3
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7ff f803 	bl	8004326 <st_word>
	}
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005332:	2304      	movs	r3, #4
 8005334:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800533c:	e03c      	b.n	80053b8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	4619      	mov	r1, r3
 8005344:	6938      	ldr	r0, [r7, #16]
 8005346:	f7ff fa63 	bl	8004810 <move_window>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d136      	bne.n	80053c2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005362:	2304      	movs	r3, #4
 8005364:	75fb      	strb	r3, [r7, #23]
 8005366:	e031      	b.n	80053cc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	330b      	adds	r3, #11
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005374:	73bb      	strb	r3, [r7, #14]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7bba      	ldrb	r2, [r7, #14]
 800537a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2be5      	cmp	r3, #229	@ 0xe5
 8005380:	d011      	beq.n	80053a6 <dir_read+0x7e>
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b2e      	cmp	r3, #46	@ 0x2e
 8005386:	d00e      	beq.n	80053a6 <dir_read+0x7e>
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	2b0f      	cmp	r3, #15
 800538c:	d00b      	beq.n	80053a6 <dir_read+0x7e>
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	f023 0320 	bic.w	r3, r3, #32
 8005394:	2b08      	cmp	r3, #8
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80053a6:	2100      	movs	r1, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe61 	bl	8005070 <dir_next>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d108      	bne.n	80053ca <dir_read+0xa2>
	while (dp->sect) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1be      	bne.n	800533e <dir_read+0x16>
 80053c0:	e004      	b.n	80053cc <dir_read+0xa4>
		if (res != FR_OK) break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <dir_read+0xa4>
				break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <dir_read+0xa4>
		if (res != FR_OK) break;
 80053ca:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <dir_read+0xb0>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	61da      	str	r2, [r3, #28]
	return res;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fdb3 	bl	8004f5e <dir_sdi>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <dir_find+0x24>
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	e03e      	b.n	8005484 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4619      	mov	r1, r3
 800540c:	6938      	ldr	r0, [r7, #16]
 800540e:	f7ff f9ff 	bl	8004810 <move_window>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d12f      	bne.n	800547c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <dir_find+0x4e>
 800542a:	2304      	movs	r3, #4
 800542c:	75fb      	strb	r3, [r7, #23]
 800542e:	e028      	b.n	8005482 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	330b      	adds	r3, #11
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800543c:	b2da      	uxtb	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	330b      	adds	r3, #11
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <dir_find+0x86>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a18      	ldr	r0, [r3, #32]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3324      	adds	r3, #36	@ 0x24
 800545a:	220b      	movs	r2, #11
 800545c:	4619      	mov	r1, r3
 800545e:	f7fe ffe5 	bl	800442c <mem_cmp>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005468:	2100      	movs	r1, #0
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fe00 	bl	8005070 <dir_next>
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0c5      	beq.n	8005406 <dir_find+0x24>
 800547a:	e002      	b.n	8005482 <dir_find+0xa0>
		if (res != FR_OK) break;
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005480:	bf00      	nop

	return res;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800549a:	2101      	movs	r1, #1
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff febd 	bl	800521c <dir_alloc>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11c      	bne.n	80054e6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4619      	mov	r1, r3
 80054b2:	68b8      	ldr	r0, [r7, #8]
 80054b4:	f7ff f9ac 	bl	8004810 <move_window>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d111      	bne.n	80054e6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	2220      	movs	r2, #32
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe ff93 	bl	80043f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a18      	ldr	r0, [r3, #32]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3324      	adds	r3, #36	@ 0x24
 80054d8:	220b      	movs	r2, #11
 80054da:	4619      	mov	r1, r3
 80054dc:	f7fe ff6a 	bl	80043b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2201      	movs	r2, #1
 80054e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4619      	mov	r1, r3
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff f983 	bl	8004810 <move_window>
 800550a:	4603      	mov	r3, r0
 800550c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800550e:	7afb      	ldrb	r3, [r7, #11]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	22e5      	movs	r2, #229	@ 0xe5
 800551a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8005522:	7afb      	ldrb	r3, [r7, #11]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2200      	movs	r2, #0
 800553a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d04f      	beq.n	80055e4 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800554c:	e022      	b.n	8005594 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	6179      	str	r1, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b20      	cmp	r3, #32
 8005562:	d016      	beq.n	8005592 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b05      	cmp	r3, #5
 8005568:	d101      	bne.n	800556e <get_fileinfo+0x42>
 800556a:	23e5      	movs	r3, #229	@ 0xe5
 800556c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b09      	cmp	r3, #9
 8005572:	d106      	bne.n	8005582 <get_fileinfo+0x56>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	613a      	str	r2, [r7, #16]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	4413      	add	r3, r2
 800557e:	222e      	movs	r2, #46	@ 0x2e
 8005580:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	613a      	str	r2, [r7, #16]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	4413      	add	r3, r2
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	725a      	strb	r2, [r3, #9]
 8005590:	e000      	b.n	8005594 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8005592:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b0a      	cmp	r3, #10
 8005598:	d9d9      	bls.n	800554e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	3309      	adds	r3, #9
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	7ada      	ldrb	r2, [r3, #11]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	331c      	adds	r3, #28
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fe92 	bl	80042e0 <ld_dword>
 80055bc:	4602      	mov	r2, r0
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	3316      	adds	r3, #22
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fe89 	bl	80042e0 <ld_dword>
 80055ce:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	80da      	strh	r2, [r3, #6]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	b29a      	uxth	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	809a      	strh	r2, [r3, #4]
 80055e2:	e000      	b.n	80055e6 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80055e4:	bf00      	nop
}
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3324      	adds	r3, #36	@ 0x24
 8005600:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005602:	220b      	movs	r2, #11
 8005604:	2120      	movs	r1, #32
 8005606:	68b8      	ldr	r0, [r7, #8]
 8005608:	f7fe fef5 	bl	80043f6 <mem_set>
	si = i = 0; ni = 8;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	2308      	movs	r3, #8
 8005616:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	61fa      	str	r2, [r7, #28]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005626:	7efb      	ldrb	r3, [r7, #27]
 8005628:	2b20      	cmp	r3, #32
 800562a:	d94e      	bls.n	80056ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800562c:	7efb      	ldrb	r3, [r7, #27]
 800562e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005630:	d006      	beq.n	8005640 <create_name+0x54>
 8005632:	7efb      	ldrb	r3, [r7, #27]
 8005634:	2b5c      	cmp	r3, #92	@ 0x5c
 8005636:	d110      	bne.n	800565a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005638:	e002      	b.n	8005640 <create_name+0x54>
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3301      	adds	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b2f      	cmp	r3, #47	@ 0x2f
 800564a:	d0f6      	beq.n	800563a <create_name+0x4e>
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b5c      	cmp	r3, #92	@ 0x5c
 8005656:	d0f0      	beq.n	800563a <create_name+0x4e>
			break;
 8005658:	e038      	b.n	80056cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800565a:	7efb      	ldrb	r3, [r7, #27]
 800565c:	2b2e      	cmp	r3, #46	@ 0x2e
 800565e:	d003      	beq.n	8005668 <create_name+0x7c>
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	d30c      	bcc.n	8005682 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b0b      	cmp	r3, #11
 800566c:	d002      	beq.n	8005674 <create_name+0x88>
 800566e:	7efb      	ldrb	r3, [r7, #27]
 8005670:	2b2e      	cmp	r3, #46	@ 0x2e
 8005672:	d001      	beq.n	8005678 <create_name+0x8c>
 8005674:	2306      	movs	r3, #6
 8005676:	e044      	b.n	8005702 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005678:	2308      	movs	r3, #8
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	230b      	movs	r3, #11
 800567e:	617b      	str	r3, [r7, #20]
			continue;
 8005680:	e022      	b.n	80056c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005682:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005686:	2b00      	cmp	r3, #0
 8005688:	da04      	bge.n	8005694 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800568a:	7efb      	ldrb	r3, [r7, #27]
 800568c:	3b80      	subs	r3, #128	@ 0x80
 800568e:	4a1f      	ldr	r2, [pc, #124]	@ (800570c <create_name+0x120>)
 8005690:	5cd3      	ldrb	r3, [r2, r3]
 8005692:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005694:	7efb      	ldrb	r3, [r7, #27]
 8005696:	4619      	mov	r1, r3
 8005698:	481d      	ldr	r0, [pc, #116]	@ (8005710 <create_name+0x124>)
 800569a:	f7fe feee 	bl	800447a <chk_chr>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <create_name+0xbc>
 80056a4:	2306      	movs	r3, #6
 80056a6:	e02c      	b.n	8005702 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80056a8:	7efb      	ldrb	r3, [r7, #27]
 80056aa:	2b60      	cmp	r3, #96	@ 0x60
 80056ac:	d905      	bls.n	80056ba <create_name+0xce>
 80056ae:	7efb      	ldrb	r3, [r7, #27]
 80056b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80056b2:	d802      	bhi.n	80056ba <create_name+0xce>
 80056b4:	7efb      	ldrb	r3, [r7, #27]
 80056b6:	3b20      	subs	r3, #32
 80056b8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	613a      	str	r2, [r7, #16]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4413      	add	r3, r2
 80056c4:	7efa      	ldrb	r2, [r7, #27]
 80056c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80056c8:	e7a6      	b.n	8005618 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80056ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	441a      	add	r2, r3
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <create_name+0xf4>
 80056dc:	2306      	movs	r3, #6
 80056de:	e010      	b.n	8005702 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2be5      	cmp	r3, #229	@ 0xe5
 80056e6:	d102      	bne.n	80056ee <create_name+0x102>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2205      	movs	r2, #5
 80056ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80056ee:	7efb      	ldrb	r3, [r7, #27]
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d801      	bhi.n	80056f8 <create_name+0x10c>
 80056f4:	2204      	movs	r2, #4
 80056f6:	e000      	b.n	80056fa <create_name+0x10e>
 80056f8:	2200      	movs	r2, #0
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	330b      	adds	r3, #11
 80056fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005700:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	08007db4 	.word	0x08007db4
 8005710:	08007d4c 	.word	0x08007d4c

08005714 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005728:	e002      	b.n	8005730 <follow_path+0x1c>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b2f      	cmp	r3, #47	@ 0x2f
 8005736:	d0f8      	beq.n	800572a <follow_path+0x16>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b5c      	cmp	r3, #92	@ 0x5c
 800573e:	d0f4      	beq.n	800572a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2200      	movs	r2, #0
 8005744:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b1f      	cmp	r3, #31
 800574c:	d80a      	bhi.n	8005764 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2280      	movs	r2, #128	@ 0x80
 8005752:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005756:	2100      	movs	r1, #0
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fc00 	bl	8004f5e <dir_sdi>
 800575e:	4603      	mov	r3, r0
 8005760:	75fb      	strb	r3, [r7, #23]
 8005762:	e048      	b.n	80057f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005764:	463b      	mov	r3, r7
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff3f 	bl	80055ec <create_name>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d139      	bne.n	80057ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fe32 	bl	80053e2 <dir_find>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005788:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d12c      	bne.n	80057f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d127      	bne.n	80057f0 <follow_path+0xdc>
 80057a0:	2305      	movs	r3, #5
 80057a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80057a4:	e024      	b.n	80057f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057a6:	7afb      	ldrb	r3, [r7, #11]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d121      	bne.n	80057f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	799b      	ldrb	r3, [r3, #6]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80057bc:	2305      	movs	r3, #5
 80057be:	75fb      	strb	r3, [r7, #23]
 80057c0:	e019      	b.n	80057f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	8992      	ldrh	r2, [r2, #12]
 80057d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80057d4:	fb00 f202 	mul.w	r2, r0, r2
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	440b      	add	r3, r1
 80057dc:	4619      	mov	r1, r3
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fd63 	bl	80052aa <ld_clust>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057ea:	e7bb      	b.n	8005764 <follow_path+0x50>
			if (res != FR_OK) break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <follow_path+0xe2>
				break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057f4:	bf00      	nop
			}
		}
	}

	return res;
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005808:	f04f 33ff 	mov.w	r3, #4294967295
 800580c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d031      	beq.n	800587a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e002      	b.n	8005824 <get_ldnumber+0x24>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	3301      	adds	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b20      	cmp	r3, #32
 800582a:	d903      	bls.n	8005834 <get_ldnumber+0x34>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b3a      	cmp	r3, #58	@ 0x3a
 8005832:	d1f4      	bne.n	800581e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b3a      	cmp	r3, #58	@ 0x3a
 800583a:	d11c      	bne.n	8005876 <get_ldnumber+0x76>
			tp = *path;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	60fa      	str	r2, [r7, #12]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	3b30      	subs	r3, #48	@ 0x30
 800584c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b09      	cmp	r3, #9
 8005852:	d80e      	bhi.n	8005872 <get_ldnumber+0x72>
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	429a      	cmp	r2, r3
 800585a:	d10a      	bne.n	8005872 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <get_ldnumber+0x72>
					vol = (int)i;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	e002      	b.n	800587c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800587a:	693b      	ldr	r3, [r7, #16]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	70da      	strb	r2, [r3, #3]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f04f 32ff 	mov.w	r2, #4294967295
 800589e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fe ffb4 	bl	8004810 <move_window>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <check_fs+0x2a>
 80058ae:	2304      	movs	r3, #4
 80058b0:	e038      	b.n	8005924 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3334      	adds	r3, #52	@ 0x34
 80058b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fcf8 	bl	80042b0 <ld_word>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <check_fs+0x48>
 80058cc:	2303      	movs	r3, #3
 80058ce:	e029      	b.n	8005924 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058d6:	2be9      	cmp	r3, #233	@ 0xe9
 80058d8:	d009      	beq.n	80058ee <check_fs+0x66>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058e0:	2beb      	cmp	r3, #235	@ 0xeb
 80058e2:	d11e      	bne.n	8005922 <check_fs+0x9a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80058ea:	2b90      	cmp	r3, #144	@ 0x90
 80058ec:	d119      	bne.n	8005922 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3334      	adds	r3, #52	@ 0x34
 80058f2:	3336      	adds	r3, #54	@ 0x36
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe fcf3 	bl	80042e0 <ld_dword>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005900:	4a0a      	ldr	r2, [pc, #40]	@ (800592c <check_fs+0xa4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <check_fs+0x82>
 8005906:	2300      	movs	r3, #0
 8005908:	e00c      	b.n	8005924 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3334      	adds	r3, #52	@ 0x34
 800590e:	3352      	adds	r3, #82	@ 0x52
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fce5 	bl	80042e0 <ld_dword>
 8005916:	4603      	mov	r3, r0
 8005918:	4a05      	ldr	r2, [pc, #20]	@ (8005930 <check_fs+0xa8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <check_fs+0x9a>
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005922:	2302      	movs	r3, #2
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	00544146 	.word	0x00544146
 8005930:	33544146 	.word	0x33544146

08005934 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b096      	sub	sp, #88	@ 0x58
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7ff ff59 	bl	8005800 <get_ldnumber>
 800594e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005952:	2b00      	cmp	r3, #0
 8005954:	da01      	bge.n	800595a <find_volume+0x26>
 8005956:	230b      	movs	r3, #11
 8005958:	e262      	b.n	8005e20 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800595a:	4a9f      	ldr	r2, [pc, #636]	@ (8005bd8 <find_volume+0x2a4>)
 800595c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005962:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <find_volume+0x3a>
 800596a:	230c      	movs	r3, #12
 800596c:	e258      	b.n	8005e20 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005972:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe fbf3 	bl	8004174 <disk_status>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005994:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10c      	bne.n	80059ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <find_volume+0x82>
 80059a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059b2:	230a      	movs	r3, #10
 80059b4:	e234      	b.n	8005e20 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80059b6:	2300      	movs	r3, #0
 80059b8:	e232      	b.n	8005e20 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fbeb 	bl	80041a8 <disk_initialize>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80059d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059e4:	2303      	movs	r3, #3
 80059e6:	e21b      	b.n	8005e20 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <find_volume+0xca>
 80059ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80059fa:	230a      	movs	r3, #10
 80059fc:	e210      	b.n	8005e20 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	7858      	ldrb	r0, [r3, #1]
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	330c      	adds	r3, #12
 8005a06:	461a      	mov	r2, r3
 8005a08:	2102      	movs	r1, #2
 8005a0a:	f7fe fc33 	bl	8004274 <disk_ioctl>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <find_volume+0xe4>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e203      	b.n	8005e20 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	899b      	ldrh	r3, [r3, #12]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a20:	d80d      	bhi.n	8005a3e <find_volume+0x10a>
 8005a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a24:	899b      	ldrh	r3, [r3, #12]
 8005a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a2a:	d308      	bcc.n	8005a3e <find_volume+0x10a>
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	899b      	ldrh	r3, [r3, #12]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	899b      	ldrh	r3, [r3, #12]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <find_volume+0x10e>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e1ee      	b.n	8005e20 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a4a:	f7ff ff1d 	bl	8005888 <check_fs>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d149      	bne.n	8005af0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a60:	e01e      	b.n	8005aa0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005a70:	4413      	add	r3, r2
 8005a72:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	3304      	adds	r3, #4
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <find_volume+0x158>
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	3308      	adds	r3, #8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fc2c 	bl	80042e0 <ld_dword>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	e000      	b.n	8005a8e <find_volume+0x15a>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	3358      	adds	r3, #88	@ 0x58
 8005a94:	443b      	add	r3, r7
 8005a96:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d9dd      	bls.n	8005a62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <find_volume+0x182>
 8005ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3358      	adds	r3, #88	@ 0x58
 8005abc:	443b      	add	r3, r7
 8005abe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005ac2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <find_volume+0x1a2>
 8005aca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005acc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ace:	f7ff fedb 	bl	8005888 <check_fs>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	e000      	b.n	8005ad8 <find_volume+0x1a4>
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005adc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d905      	bls.n	8005af0 <find_volume+0x1bc>
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d9e2      	bls.n	8005ab6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005af0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d101      	bne.n	8005afc <find_volume+0x1c8>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e191      	b.n	8005e20 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005afc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d901      	bls.n	8005b08 <find_volume+0x1d4>
 8005b04:	230d      	movs	r3, #13
 8005b06:	e18b      	b.n	8005e20 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0a:	3334      	adds	r3, #52	@ 0x34
 8005b0c:	330b      	adds	r3, #11
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fbce 	bl	80042b0 <ld_word>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	899b      	ldrh	r3, [r3, #12]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <find_volume+0x1f0>
 8005b20:	230d      	movs	r3, #13
 8005b22:	e17d      	b.n	8005e20 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	3334      	adds	r3, #52	@ 0x34
 8005b28:	3316      	adds	r3, #22
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fbc0 	bl	80042b0 <ld_word>
 8005b30:	4603      	mov	r3, r0
 8005b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <find_volume+0x214>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	3334      	adds	r3, #52	@ 0x34
 8005b3e:	3324      	adds	r3, #36	@ 0x24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fbcd 	bl	80042e0 <ld_dword>
 8005b46:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b4c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	789b      	ldrb	r3, [r3, #2]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d005      	beq.n	8005b6c <find_volume+0x238>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b62:	789b      	ldrb	r3, [r3, #2]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d001      	beq.n	8005b6c <find_volume+0x238>
 8005b68:	230d      	movs	r3, #13
 8005b6a:	e159      	b.n	8005e20 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	789b      	ldrb	r3, [r3, #2]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b80:	461a      	mov	r2, r3
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	895b      	ldrh	r3, [r3, #10]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <find_volume+0x26c>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	895b      	ldrh	r3, [r3, #10]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	895b      	ldrh	r3, [r3, #10]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <find_volume+0x270>
 8005ba0:	230d      	movs	r3, #13
 8005ba2:	e13d      	b.n	8005e20 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	3334      	adds	r3, #52	@ 0x34
 8005ba8:	3311      	adds	r3, #17
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fb80 	bl	80042b0 <ld_word>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	891b      	ldrh	r3, [r3, #8]
 8005bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bbe:	8992      	ldrh	r2, [r2, #12]
 8005bc0:	0952      	lsrs	r2, r2, #5
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bc8:	fb01 f202 	mul.w	r2, r1, r2
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <find_volume+0x2a8>
 8005bd4:	230d      	movs	r3, #13
 8005bd6:	e123      	b.n	8005e20 <find_volume+0x4ec>
 8005bd8:	20002198 	.word	0x20002198

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bde:	3334      	adds	r3, #52	@ 0x34
 8005be0:	3313      	adds	r3, #19
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fb64 	bl	80042b0 <ld_word>
 8005be8:	4603      	mov	r3, r0
 8005bea:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <find_volume+0x2cc>
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf4:	3334      	adds	r3, #52	@ 0x34
 8005bf6:	3320      	adds	r3, #32
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fb71 	bl	80042e0 <ld_dword>
 8005bfe:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	3334      	adds	r3, #52	@ 0x34
 8005c04:	330e      	adds	r3, #14
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fb52 	bl	80042b0 <ld_word>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c10:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <find_volume+0x2e6>
 8005c16:	230d      	movs	r3, #13
 8005c18:	e102      	b.n	8005e20 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c1a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1e:	4413      	add	r3, r2
 8005c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c22:	8911      	ldrh	r1, [r2, #8]
 8005c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c26:	8992      	ldrh	r2, [r2, #12]
 8005c28:	0952      	lsrs	r2, r2, #5
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	fbb1 f2f2 	udiv	r2, r1, r2
 8005c30:	b292      	uxth	r2, r2
 8005c32:	4413      	add	r3, r2
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d201      	bcs.n	8005c42 <find_volume+0x30e>
 8005c3e:	230d      	movs	r3, #13
 8005c40:	e0ee      	b.n	8005e20 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c4a:	8952      	ldrh	r2, [r2, #10]
 8005c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <find_volume+0x328>
 8005c58:	230d      	movs	r3, #13
 8005c5a:	e0e1      	b.n	8005e20 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d802      	bhi.n	8005c72 <find_volume+0x33e>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d802      	bhi.n	8005c82 <find_volume+0x34e>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	1c9a      	adds	r2, r3, #2
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c8e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c94:	441a      	add	r2, r3
 8005c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005c9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9e:	441a      	add	r2, r3
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8005ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d11e      	bne.n	8005cea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	3334      	adds	r3, #52	@ 0x34
 8005cb0:	332a      	adds	r3, #42	@ 0x2a
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fafc 	bl	80042b0 <ld_word>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <find_volume+0x38e>
 8005cbe:	230d      	movs	r3, #13
 8005cc0:	e0ae      	b.n	8005e20 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	891b      	ldrh	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <find_volume+0x39a>
 8005cca:	230d      	movs	r3, #13
 8005ccc:	e0a8      	b.n	8005e20 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	3334      	adds	r3, #52	@ 0x34
 8005cd2:	332c      	adds	r3, #44	@ 0x2c
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe fb03 	bl	80042e0 <ld_dword>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce8:	e01f      	b.n	8005d2a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	891b      	ldrh	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <find_volume+0x3c2>
 8005cf2:	230d      	movs	r3, #13
 8005cf4:	e094      	b.n	8005e20 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfc:	441a      	add	r2, r3
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d103      	bne.n	8005d12 <find_volume+0x3de>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	e00a      	b.n	8005d28 <find_volume+0x3f4>
 8005d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	4613      	mov	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	085a      	lsrs	r2, r3, #1
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d28:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	899b      	ldrh	r3, [r3, #12]
 8005d32:	4619      	mov	r1, r3
 8005d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d36:	440b      	add	r3, r1
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d3c:	8989      	ldrh	r1, [r1, #12]
 8005d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d201      	bcs.n	8005d4a <find_volume+0x416>
 8005d46:	230d      	movs	r3, #13
 8005d48:	e06a      	b.n	8005e20 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	615a      	str	r2, [r3, #20]
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	2280      	movs	r2, #128	@ 0x80
 8005d5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d149      	bne.n	8005dfc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	3334      	adds	r3, #52	@ 0x34
 8005d6c:	3330      	adds	r3, #48	@ 0x30
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fa9e 	bl	80042b0 <ld_word>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d140      	bne.n	8005dfc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d82:	f7fe fd45 	bl	8004810 <move_window>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d137      	bne.n	8005dfc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8e:	2200      	movs	r2, #0
 8005d90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	3334      	adds	r3, #52	@ 0x34
 8005d96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe fa88 	bl	80042b0 <ld_word>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d127      	bne.n	8005dfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	3334      	adds	r3, #52	@ 0x34
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fa95 	bl	80042e0 <ld_dword>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <find_volume+0x4f4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d11e      	bne.n	8005dfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc0:	3334      	adds	r3, #52	@ 0x34
 8005dc2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fa8a 	bl	80042e0 <ld_dword>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4a17      	ldr	r2, [pc, #92]	@ (8005e2c <find_volume+0x4f8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	3334      	adds	r3, #52	@ 0x34
 8005dd8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fa7f 	bl	80042e0 <ld_dword>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dea:	3334      	adds	r3, #52	@ 0x34
 8005dec:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe fa75 	bl	80042e0 <ld_dword>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005e02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005e04:	4b0a      	ldr	r3, [pc, #40]	@ (8005e30 <find_volume+0x4fc>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	4b08      	ldr	r3, [pc, #32]	@ (8005e30 <find_volume+0x4fc>)
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <find_volume+0x4fc>)
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e1a:	f7fe fc91 	bl	8004740 <clear_lock>
#endif
	return FR_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3758      	adds	r7, #88	@ 0x58
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	41615252 	.word	0x41615252
 8005e2c:	61417272 	.word	0x61417272
 8005e30:	2000219c 	.word	0x2000219c

08005e34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e3e:	2309      	movs	r3, #9
 8005e40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01c      	beq.n	8005e82 <validate+0x4e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d018      	beq.n	8005e82 <validate+0x4e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <validate+0x4e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	889a      	ldrh	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	88db      	ldrh	r3, [r3, #6]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d10c      	bne.n	8005e82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe f980 	bl	8004174 <disk_status>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <validate+0x4e>
			res = FR_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <validate+0x5a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	e000      	b.n	8005e90 <validate+0x5c>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	6013      	str	r3, [r2, #0]
	return res;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005eb2:	f107 0310 	add.w	r3, r7, #16
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fca2 	bl	8005800 <get_ldnumber>
 8005ebc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da01      	bge.n	8005ec8 <f_mount+0x28>
 8005ec4:	230b      	movs	r3, #11
 8005ec6:	e02b      	b.n	8005f20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ec8:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <f_mount+0x88>)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ed8:	69b8      	ldr	r0, [r7, #24]
 8005eda:	f7fe fc31 	bl	8004740 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	490d      	ldr	r1, [pc, #52]	@ (8005f28 <f_mount+0x88>)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <f_mount+0x66>
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d001      	beq.n	8005f0a <f_mount+0x6a>
 8005f06:	2300      	movs	r3, #0
 8005f08:	e00a      	b.n	8005f20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005f0a:	f107 010c 	add.w	r1, r7, #12
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	2200      	movs	r2, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fd0d 	bl	8005934 <find_volume>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20002198 	.word	0x20002198

08005f2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b098      	sub	sp, #96	@ 0x60
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <f_open+0x18>
 8005f40:	2309      	movs	r3, #9
 8005f42:	e1b7      	b.n	80062b4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f4c:	79fa      	ldrb	r2, [r7, #7]
 8005f4e:	f107 0110 	add.w	r1, r7, #16
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fcec 	bl	8005934 <find_volume>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005f62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 819b 	bne.w	80062a2 <f_open+0x376>
		dj.obj.fs = fs;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	f107 0314 	add.w	r3, r7, #20
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fbcb 	bl	8005714 <follow_path>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d118      	bne.n	8005fbe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	da03      	bge.n	8005f9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005f96:	2306      	movs	r3, #6
 8005f98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005f9c:	e00f      	b.n	8005fbe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf8c      	ite	hi
 8005fa4:	2301      	movhi	r3, #1
 8005fa6:	2300      	movls	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fa7c 	bl	80044b0 <chk_lock>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	f003 031c 	and.w	r3, r3, #28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d07f      	beq.n	80060c8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d017      	beq.n	8006000 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005fd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d10e      	bne.n	8005ff6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fd8:	f7fe fac6 	bl	8004568 <enq_lock>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d006      	beq.n	8005ff0 <f_open+0xc4>
 8005fe2:	f107 0314 	add.w	r3, r7, #20
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fa50 	bl	800548c <dir_register>
 8005fec:	4603      	mov	r3, r0
 8005fee:	e000      	b.n	8005ff2 <f_open+0xc6>
 8005ff0:	2312      	movs	r3, #18
 8005ff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	f043 0308 	orr.w	r3, r3, #8
 8005ffc:	71fb      	strb	r3, [r7, #7]
 8005ffe:	e010      	b.n	8006022 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006000:	7ebb      	ldrb	r3, [r7, #26]
 8006002:	f003 0311 	and.w	r3, r3, #17
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <f_open+0xe6>
					res = FR_DENIED;
 800600a:	2307      	movs	r3, #7
 800600c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006010:	e007      	b.n	8006022 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <f_open+0xf6>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006022:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d168      	bne.n	80060fc <f_open+0x1d0>
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d063      	beq.n	80060fc <f_open+0x1d0>
				dw = GET_FATTIME();
 8006034:	f7fd ff18 	bl	8003e68 <get_fattime>
 8006038:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800603a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603c:	330e      	adds	r3, #14
 800603e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe f98b 	bl	800435c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006048:	3316      	adds	r3, #22
 800604a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe f985 	bl	800435c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006054:	330b      	adds	r3, #11
 8006056:	2220      	movs	r2, #32
 8006058:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f922 	bl	80052aa <ld_clust>
 8006066:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800606c:	2200      	movs	r2, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff f93a 	bl	80052e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006076:	331c      	adds	r3, #28
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe f96e 	bl	800435c <st_dword>
					fs->wflag = 1;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2201      	movs	r2, #1
 8006084:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d037      	beq.n	80060fc <f_open+0x1d0>
						dw = fs->winsect;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006092:	f107 0314 	add.w	r3, r7, #20
 8006096:	2200      	movs	r2, #0
 8006098:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fe62 	bl	8004d64 <remove_chain>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80060a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d126      	bne.n	80060fc <f_open+0x1d0>
							res = move_window(fs, dw);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fbac 	bl	8004810 <move_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060c2:	3a01      	subs	r2, #1
 80060c4:	611a      	str	r2, [r3, #16]
 80060c6:	e019      	b.n	80060fc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80060c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d115      	bne.n	80060fc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80060d0:	7ebb      	ldrb	r3, [r7, #26]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80060da:	2304      	movs	r3, #4
 80060dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80060e0:	e00c      	b.n	80060fc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <f_open+0x1d0>
 80060ec:	7ebb      	ldrb	r3, [r7, #26]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <f_open+0x1d0>
						res = FR_DENIED;
 80060f6:	2307      	movs	r3, #7
 80060f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80060fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006100:	2b00      	cmp	r3, #0
 8006102:	d126      	bne.n	8006152 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006114:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800611e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf8c      	ite	hi
 800612a:	2301      	movhi	r3, #1
 800612c:	2300      	movls	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe fa37 	bl	80045ac <inc_lock>
 800613e:	4602      	mov	r2, r0
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <f_open+0x226>
 800614c:	2302      	movs	r3, #2
 800614e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006152:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 80a3 	bne.w	80062a2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff f8a1 	bl	80052aa <ld_clust>
 8006168:	4602      	mov	r2, r0
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800616e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006170:	331c      	adds	r3, #28
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe f8b4 	bl	80042e0 <ld_dword>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	88da      	ldrh	r2, [r3, #6]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	79fa      	ldrb	r2, [r7, #7]
 8006196:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3330      	adds	r3, #48	@ 0x30
 80061ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe f91e 	bl	80043f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d06e      	beq.n	80062a2 <f_open+0x376>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d06a      	beq.n	80062a2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	895b      	ldrh	r3, [r3, #10]
 80061d8:	461a      	mov	r2, r3
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	899b      	ldrh	r3, [r3, #12]
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80061f0:	e016      	b.n	8006220 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fbc7 	bl	800498a <get_fat>
 80061fc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80061fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006200:	2b01      	cmp	r3, #1
 8006202:	d802      	bhi.n	800620a <f_open+0x2de>
 8006204:	2302      	movs	r3, #2
 8006206:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800620a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d102      	bne.n	8006218 <f_open+0x2ec>
 8006212:	2301      	movs	r3, #1
 8006214:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006218:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800621a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <f_open+0x304>
 8006228:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800622a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800622c:	429a      	cmp	r2, r3
 800622e:	d8e0      	bhi.n	80061f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006234:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800623a:	2b00      	cmp	r3, #0
 800623c:	d131      	bne.n	80062a2 <f_open+0x376>
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	899b      	ldrh	r3, [r3, #12]
 8006242:	461a      	mov	r2, r3
 8006244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006246:	fbb3 f1f2 	udiv	r1, r3, r2
 800624a:	fb01 f202 	mul.w	r2, r1, r2
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d026      	beq.n	80062a2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fb77 	bl	800494c <clust2sect>
 800625e:	6478      	str	r0, [r7, #68]	@ 0x44
 8006260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <f_open+0x342>
						res = FR_INT_ERR;
 8006266:	2302      	movs	r3, #2
 8006268:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800626c:	e019      	b.n	80062a2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	899b      	ldrh	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006276:	fbb3 f2f2 	udiv	r2, r3, r2
 800627a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627c:	441a      	add	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	7858      	ldrb	r0, [r3, #1]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	2301      	movs	r3, #1
 8006292:	f7fd ffaf 	bl	80041f4 <disk_read>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <f_open+0x376>
 800629c:	2301      	movs	r3, #1
 800629e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80062a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <f_open+0x384>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80062b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3760      	adds	r7, #96	@ 0x60
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f107 0208 	add.w	r2, r7, #8
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fdb1 	bl	8005e34 <validate>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d168      	bne.n	80063ae <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	7d1b      	ldrb	r3, [r3, #20]
 80062e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d062      	beq.n	80063ae <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7d1b      	ldrb	r3, [r3, #20]
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da15      	bge.n	800631e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	7858      	ldrb	r0, [r3, #1]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	2301      	movs	r3, #1
 8006302:	f7fd ff97 	bl	8004234 <disk_write>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <f_sync+0x54>
 800630c:	2301      	movs	r3, #1
 800630e:	e04f      	b.n	80063b0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7d1b      	ldrb	r3, [r3, #20]
 8006314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006318:	b2da      	uxtb	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800631e:	f7fd fda3 	bl	8003e68 <get_fattime>
 8006322:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7fe fa6f 	bl	8004810 <move_window>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d138      	bne.n	80063ae <f_sync+0xf2>
					dir = fp->dir_ptr;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006340:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	330b      	adds	r3, #11
 8006346:	781a      	ldrb	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	330b      	adds	r3, #11
 800634c:	f042 0220 	orr.w	r2, r2, #32
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	461a      	mov	r2, r3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f7fe ffc2 	bl	80052e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f103 021c 	add.w	r2, r3, #28
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f7fd fff3 	bl	800435c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3316      	adds	r3, #22
 800637a:	6939      	ldr	r1, [r7, #16]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd ffed 	bl	800435c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3312      	adds	r3, #18
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f7fd ffcc 	bl	8004326 <st_word>
					fs->wflag = 1;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2201      	movs	r2, #1
 8006392:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fa68 	bl	800486c <sync_fs>
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7d1b      	ldrb	r3, [r3, #20]
 80063a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff7b 	bl	80062bc <f_sync>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d118      	bne.n	8006402 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f107 0208 	add.w	r2, r7, #8
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fd2b 	bl	8005e34 <validate>
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10c      	bne.n	8006402 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe f96b 	bl	80046c8 <dec_lock>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <f_opendir+0x14>
 800641c:	2309      	movs	r3, #9
 800641e:	e064      	b.n	80064ea <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006424:	f107 010c 	add.w	r1, r7, #12
 8006428:	463b      	mov	r3, r7
 800642a:	2200      	movs	r2, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fa81 	bl	8005934 <find_volume>
 8006432:	4603      	mov	r3, r0
 8006434:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d14f      	bne.n	80064dc <f_opendir+0xd0>
		obj->fs = fs;
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff f964 	bl	8005714 <follow_path>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d13d      	bne.n	80064d2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800645c:	b25b      	sxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	db12      	blt.n	8006488 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	799b      	ldrb	r3, [r3, #6]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f7fe ff17 	bl	80052aa <ld_clust>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	609a      	str	r2, [r3, #8]
 8006482:	e001      	b.n	8006488 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8006484:	2305      	movs	r3, #5
 8006486:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d121      	bne.n	80064d2 <f_opendir+0xc6>
				obj->id = fs->id;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88da      	ldrh	r2, [r3, #6]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006496:	2100      	movs	r1, #0
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7fe fd60 	bl	8004f5e <dir_sdi>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d114      	bne.n	80064d2 <f_opendir+0xc6>
					if (obj->sclust) {
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fe f87a 	bl	80045ac <inc_lock>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d105      	bne.n	80064d2 <f_opendir+0xc6>
 80064c6:	2312      	movs	r3, #18
 80064c8:	75fb      	strb	r3, [r7, #23]
 80064ca:	e002      	b.n	80064d2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2200      	movs	r2, #0
 80064d0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d101      	bne.n	80064dc <f_opendir+0xd0>
 80064d8:	2305      	movs	r3, #5
 80064da:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <f_opendir+0xdc>
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f107 0208 	add.w	r2, r7, #8
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fc96 	bl	8005e34 <validate>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d110      	bne.n	8006534 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f8d2 	bl	80046c8 <dec_lock>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f107 0208 	add.w	r2, r7, #8
 800654e:	4611      	mov	r1, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fc6f 	bl	8005e34 <validate>
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d126      	bne.n	80065ae <f_readdir+0x70>
		if (!fno) {
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006566:	2100      	movs	r1, #0
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe fcf8 	bl	8004f5e <dir_sdi>
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	e01c      	b.n	80065ae <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006574:	2100      	movs	r1, #0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fe fed6 	bl	8005328 <dir_read>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d101      	bne.n	800658a <f_readdir+0x4c>
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10e      	bne.n	80065ae <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe ffca 	bl	800552c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006598:	2100      	movs	r1, #0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fe fd68 	bl	8005070 <dir_next>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d101      	bne.n	80065ae <f_readdir+0x70>
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b090      	sub	sp, #64	@ 0x40
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80065c2:	f107 010c 	add.w	r1, r7, #12
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	2200      	movs	r2, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff f9b2 	bl	8005934 <find_volume>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 80065d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11f      	bne.n	800661e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	f107 030c 	add.w	r3, r7, #12
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff f894 	bl	8005714 <follow_path>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80065f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d111      	bne.n	800661e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80065fa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80065fe:	b25b      	sxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	da03      	bge.n	800660c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8006604:	2306      	movs	r3, #6
 8006606:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800660a:	e008      	b.n	800661e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <f_stat+0x66>
 8006612:	f107 030c 	add.w	r3, r7, #12
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe ff87 	bl	800552c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800661e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006622:	4618      	mov	r0, r3
 8006624:	3740      	adds	r7, #64	@ 0x40
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b09e      	sub	sp, #120	@ 0x78
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8006636:	f107 010c 	add.w	r1, r7, #12
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	2202      	movs	r2, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff f978 	bl	8005934 <find_volume>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800664e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 808e 	bne.w	8006774 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff f857 	bl	8005714 <follow_path>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800666c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <f_unlink+0x5c>
 8006674:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006678:	2102      	movs	r1, #2
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd ff18 	bl	80044b0 <chk_lock>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006686:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800668a:	2b00      	cmp	r3, #0
 800668c:	d172      	bne.n	8006774 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800668e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006692:	b25b      	sxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	da03      	bge.n	80066a0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006698:	2306      	movs	r3, #6
 800669a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800669e:	e008      	b.n	80066b2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80066a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80066ac:	2307      	movs	r3, #7
 80066ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 80066b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d134      	bne.n	8006724 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fdf2 	bl	80052aa <ld_clust>
 80066c6:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80066c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d027      	beq.n	8006724 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80066d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066da:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80066dc:	f107 0310 	add.w	r3, r7, #16
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe fc3b 	bl	8004f5e <dir_sdi>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80066ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d116      	bne.n	8006724 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80066f6:	f107 0310 	add.w	r3, r7, #16
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fe13 	bl	8005328 <dir_read>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006708:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <f_unlink+0xec>
 8006710:	2307      	movs	r3, #7
 8006712:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006716:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800671a:	2b04      	cmp	r3, #4
 800671c:	d102      	bne.n	8006724 <f_unlink+0xfa>
 800671e:	2300      	movs	r3, #0
 8006720:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8006724:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006728:	2b00      	cmp	r3, #0
 800672a:	d123      	bne.n	8006774 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800672c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe fedd 	bl	80054f0 <dir_remove>
 8006736:	4603      	mov	r3, r0
 8006738:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800673c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <f_unlink+0x134>
 8006744:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800674a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800674e:	2200      	movs	r2, #0
 8006750:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fb06 	bl	8004d64 <remove_chain>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800675e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <f_unlink+0x14a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe f87f 	bl	800486c <sync_fs>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006774:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006778:	4618      	mov	r0, r3
 800677a:	3778      	adds	r7, #120	@ 0x78
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800678e:	2301      	movs	r3, #1
 8006790:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006796:	4b1f      	ldr	r3, [pc, #124]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 8006798:	7a5b      	ldrb	r3, [r3, #9]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d131      	bne.n	8006804 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80067a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067a2:	7a5b      	ldrb	r3, [r3, #9]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067aa:	2100      	movs	r1, #0
 80067ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80067ae:	4b19      	ldr	r3, [pc, #100]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067b0:	7a5b      	ldrb	r3, [r3, #9]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	4a17      	ldr	r2, [pc, #92]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80067be:	4b15      	ldr	r3, [pc, #84]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067c0:	7a5b      	ldrb	r3, [r3, #9]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b13      	ldr	r3, [pc, #76]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067c8:	4413      	add	r3, r2
 80067ca:	79fa      	ldrb	r2, [r7, #7]
 80067cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80067ce:	4b11      	ldr	r3, [pc, #68]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067d0:	7a5b      	ldrb	r3, [r3, #9]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	b2d1      	uxtb	r1, r2
 80067d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006814 <FATFS_LinkDriverEx+0x94>)
 80067da:	7251      	strb	r1, [r2, #9]
 80067dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80067de:	7dbb      	ldrb	r3, [r7, #22]
 80067e0:	3330      	adds	r3, #48	@ 0x30
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3301      	adds	r3, #1
 80067ec:	223a      	movs	r2, #58	@ 0x3a
 80067ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	3302      	adds	r3, #2
 80067f4:	222f      	movs	r2, #47	@ 0x2f
 80067f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	3303      	adds	r3, #3
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	200021c0 	.word	0x200021c0

08006818 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006822:	2200      	movs	r2, #0
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffaa 	bl	8006780 <FATFS_LinkDriverEx>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <malloc>:
 8006838:	4b02      	ldr	r3, [pc, #8]	@ (8006844 <malloc+0xc>)
 800683a:	4601      	mov	r1, r0
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	f000 b82d 	b.w	800689c <_malloc_r>
 8006842:	bf00      	nop
 8006844:	20000018 	.word	0x20000018

08006848 <free>:
 8006848:	4b02      	ldr	r3, [pc, #8]	@ (8006854 <free+0xc>)
 800684a:	4601      	mov	r1, r0
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	f000 bb67 	b.w	8006f20 <_free_r>
 8006852:	bf00      	nop
 8006854:	20000018 	.word	0x20000018

08006858 <sbrk_aligned>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4e0f      	ldr	r6, [pc, #60]	@ (8006898 <sbrk_aligned+0x40>)
 800685c:	460c      	mov	r4, r1
 800685e:	6831      	ldr	r1, [r6, #0]
 8006860:	4605      	mov	r5, r0
 8006862:	b911      	cbnz	r1, 800686a <sbrk_aligned+0x12>
 8006864:	f000 fb0c 	bl	8006e80 <_sbrk_r>
 8006868:	6030      	str	r0, [r6, #0]
 800686a:	4621      	mov	r1, r4
 800686c:	4628      	mov	r0, r5
 800686e:	f000 fb07 	bl	8006e80 <_sbrk_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d103      	bne.n	800687e <sbrk_aligned+0x26>
 8006876:	f04f 34ff 	mov.w	r4, #4294967295
 800687a:	4620      	mov	r0, r4
 800687c:	bd70      	pop	{r4, r5, r6, pc}
 800687e:	1cc4      	adds	r4, r0, #3
 8006880:	f024 0403 	bic.w	r4, r4, #3
 8006884:	42a0      	cmp	r0, r4
 8006886:	d0f8      	beq.n	800687a <sbrk_aligned+0x22>
 8006888:	1a21      	subs	r1, r4, r0
 800688a:	4628      	mov	r0, r5
 800688c:	f000 faf8 	bl	8006e80 <_sbrk_r>
 8006890:	3001      	adds	r0, #1
 8006892:	d1f2      	bne.n	800687a <sbrk_aligned+0x22>
 8006894:	e7ef      	b.n	8006876 <sbrk_aligned+0x1e>
 8006896:	bf00      	nop
 8006898:	200021cc 	.word	0x200021cc

0800689c <_malloc_r>:
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	1ccd      	adds	r5, r1, #3
 80068a2:	f025 0503 	bic.w	r5, r5, #3
 80068a6:	3508      	adds	r5, #8
 80068a8:	2d0c      	cmp	r5, #12
 80068aa:	bf38      	it	cc
 80068ac:	250c      	movcc	r5, #12
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	4606      	mov	r6, r0
 80068b2:	db01      	blt.n	80068b8 <_malloc_r+0x1c>
 80068b4:	42a9      	cmp	r1, r5
 80068b6:	d904      	bls.n	80068c2 <_malloc_r+0x26>
 80068b8:	230c      	movs	r3, #12
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	2000      	movs	r0, #0
 80068be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006998 <_malloc_r+0xfc>
 80068c6:	f000 f869 	bl	800699c <__malloc_lock>
 80068ca:	f8d8 3000 	ldr.w	r3, [r8]
 80068ce:	461c      	mov	r4, r3
 80068d0:	bb44      	cbnz	r4, 8006924 <_malloc_r+0x88>
 80068d2:	4629      	mov	r1, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff ffbf 	bl	8006858 <sbrk_aligned>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	4604      	mov	r4, r0
 80068de:	d158      	bne.n	8006992 <_malloc_r+0xf6>
 80068e0:	f8d8 4000 	ldr.w	r4, [r8]
 80068e4:	4627      	mov	r7, r4
 80068e6:	2f00      	cmp	r7, #0
 80068e8:	d143      	bne.n	8006972 <_malloc_r+0xd6>
 80068ea:	2c00      	cmp	r4, #0
 80068ec:	d04b      	beq.n	8006986 <_malloc_r+0xea>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	4639      	mov	r1, r7
 80068f2:	4630      	mov	r0, r6
 80068f4:	eb04 0903 	add.w	r9, r4, r3
 80068f8:	f000 fac2 	bl	8006e80 <_sbrk_r>
 80068fc:	4581      	cmp	r9, r0
 80068fe:	d142      	bne.n	8006986 <_malloc_r+0xea>
 8006900:	6821      	ldr	r1, [r4, #0]
 8006902:	1a6d      	subs	r5, r5, r1
 8006904:	4629      	mov	r1, r5
 8006906:	4630      	mov	r0, r6
 8006908:	f7ff ffa6 	bl	8006858 <sbrk_aligned>
 800690c:	3001      	adds	r0, #1
 800690e:	d03a      	beq.n	8006986 <_malloc_r+0xea>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	442b      	add	r3, r5
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	f8d8 3000 	ldr.w	r3, [r8]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	bb62      	cbnz	r2, 8006978 <_malloc_r+0xdc>
 800691e:	f8c8 7000 	str.w	r7, [r8]
 8006922:	e00f      	b.n	8006944 <_malloc_r+0xa8>
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	1b52      	subs	r2, r2, r5
 8006928:	d420      	bmi.n	800696c <_malloc_r+0xd0>
 800692a:	2a0b      	cmp	r2, #11
 800692c:	d917      	bls.n	800695e <_malloc_r+0xc2>
 800692e:	1961      	adds	r1, r4, r5
 8006930:	42a3      	cmp	r3, r4
 8006932:	6025      	str	r5, [r4, #0]
 8006934:	bf18      	it	ne
 8006936:	6059      	strne	r1, [r3, #4]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	bf08      	it	eq
 800693c:	f8c8 1000 	streq.w	r1, [r8]
 8006940:	5162      	str	r2, [r4, r5]
 8006942:	604b      	str	r3, [r1, #4]
 8006944:	4630      	mov	r0, r6
 8006946:	f000 f82f 	bl	80069a8 <__malloc_unlock>
 800694a:	f104 000b 	add.w	r0, r4, #11
 800694e:	1d23      	adds	r3, r4, #4
 8006950:	f020 0007 	bic.w	r0, r0, #7
 8006954:	1ac2      	subs	r2, r0, r3
 8006956:	bf1c      	itt	ne
 8006958:	1a1b      	subne	r3, r3, r0
 800695a:	50a3      	strne	r3, [r4, r2]
 800695c:	e7af      	b.n	80068be <_malloc_r+0x22>
 800695e:	6862      	ldr	r2, [r4, #4]
 8006960:	42a3      	cmp	r3, r4
 8006962:	bf0c      	ite	eq
 8006964:	f8c8 2000 	streq.w	r2, [r8]
 8006968:	605a      	strne	r2, [r3, #4]
 800696a:	e7eb      	b.n	8006944 <_malloc_r+0xa8>
 800696c:	4623      	mov	r3, r4
 800696e:	6864      	ldr	r4, [r4, #4]
 8006970:	e7ae      	b.n	80068d0 <_malloc_r+0x34>
 8006972:	463c      	mov	r4, r7
 8006974:	687f      	ldr	r7, [r7, #4]
 8006976:	e7b6      	b.n	80068e6 <_malloc_r+0x4a>
 8006978:	461a      	mov	r2, r3
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	42a3      	cmp	r3, r4
 800697e:	d1fb      	bne.n	8006978 <_malloc_r+0xdc>
 8006980:	2300      	movs	r3, #0
 8006982:	6053      	str	r3, [r2, #4]
 8006984:	e7de      	b.n	8006944 <_malloc_r+0xa8>
 8006986:	230c      	movs	r3, #12
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	4630      	mov	r0, r6
 800698c:	f000 f80c 	bl	80069a8 <__malloc_unlock>
 8006990:	e794      	b.n	80068bc <_malloc_r+0x20>
 8006992:	6005      	str	r5, [r0, #0]
 8006994:	e7d6      	b.n	8006944 <_malloc_r+0xa8>
 8006996:	bf00      	nop
 8006998:	200021d0 	.word	0x200021d0

0800699c <__malloc_lock>:
 800699c:	4801      	ldr	r0, [pc, #4]	@ (80069a4 <__malloc_lock+0x8>)
 800699e:	f000 babc 	b.w	8006f1a <__retarget_lock_acquire_recursive>
 80069a2:	bf00      	nop
 80069a4:	20002314 	.word	0x20002314

080069a8 <__malloc_unlock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	@ (80069b0 <__malloc_unlock+0x8>)
 80069aa:	f000 bab7 	b.w	8006f1c <__retarget_lock_release_recursive>
 80069ae:	bf00      	nop
 80069b0:	20002314 	.word	0x20002314

080069b4 <std>:
 80069b4:	2300      	movs	r3, #0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	e9c0 3300 	strd	r3, r3, [r0]
 80069be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069c2:	6083      	str	r3, [r0, #8]
 80069c4:	8181      	strh	r1, [r0, #12]
 80069c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069c8:	81c2      	strh	r2, [r0, #14]
 80069ca:	6183      	str	r3, [r0, #24]
 80069cc:	4619      	mov	r1, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	305c      	adds	r0, #92	@ 0x5c
 80069d2:	f000 fa19 	bl	8006e08 <memset>
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x58>)
 80069d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <std+0x5c>)
 80069dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069de:	4b0d      	ldr	r3, [pc, #52]	@ (8006a14 <std+0x60>)
 80069e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <std+0x64>)
 80069e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <std+0x68>)
 80069e8:	6224      	str	r4, [r4, #32]
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d006      	beq.n	80069fc <std+0x48>
 80069ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069f2:	4294      	cmp	r4, r2
 80069f4:	d002      	beq.n	80069fc <std+0x48>
 80069f6:	33d0      	adds	r3, #208	@ 0xd0
 80069f8:	429c      	cmp	r4, r3
 80069fa:	d105      	bne.n	8006a08 <std+0x54>
 80069fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f000 ba88 	b.w	8006f18 <__retarget_lock_init_recursive>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006c59 	.word	0x08006c59
 8006a10:	08006c7b 	.word	0x08006c7b
 8006a14:	08006cb3 	.word	0x08006cb3
 8006a18:	08006cd7 	.word	0x08006cd7
 8006a1c:	200021d4 	.word	0x200021d4

08006a20 <stdio_exit_handler>:
 8006a20:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <stdio_exit_handler+0xc>)
 8006a22:	4903      	ldr	r1, [pc, #12]	@ (8006a30 <stdio_exit_handler+0x10>)
 8006a24:	4803      	ldr	r0, [pc, #12]	@ (8006a34 <stdio_exit_handler+0x14>)
 8006a26:	f000 b869 	b.w	8006afc <_fwalk_sglue>
 8006a2a:	bf00      	nop
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	0800790d 	.word	0x0800790d
 8006a34:	2000001c 	.word	0x2000001c

08006a38 <cleanup_stdio>:
 8006a38:	6841      	ldr	r1, [r0, #4]
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <cleanup_stdio+0x34>)
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	d001      	beq.n	8006a48 <cleanup_stdio+0x10>
 8006a44:	f000 ff62 	bl	800790c <_fflush_r>
 8006a48:	68a1      	ldr	r1, [r4, #8]
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <cleanup_stdio+0x38>)
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <cleanup_stdio+0x1e>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 ff5b 	bl	800790c <_fflush_r>
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <cleanup_stdio+0x3c>)
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d004      	beq.n	8006a68 <cleanup_stdio+0x30>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f000 bf52 	b.w	800790c <_fflush_r>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200021d4 	.word	0x200021d4
 8006a70:	2000223c 	.word	0x2000223c
 8006a74:	200022a4 	.word	0x200022a4

08006a78 <global_stdio_init.part.0>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <global_stdio_init.part.0+0x30>)
 8006a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006aac <global_stdio_init.part.0+0x34>)
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <global_stdio_init.part.0+0x38>)
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	2200      	movs	r2, #0
 8006a86:	2104      	movs	r1, #4
 8006a88:	f7ff ff94 	bl	80069b4 <std>
 8006a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a90:	2201      	movs	r2, #1
 8006a92:	2109      	movs	r1, #9
 8006a94:	f7ff ff8e 	bl	80069b4 <std>
 8006a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	f7ff bf86 	b.w	80069b4 <std>
 8006aa8:	2000230c 	.word	0x2000230c
 8006aac:	200021d4 	.word	0x200021d4
 8006ab0:	08006a21 	.word	0x08006a21

08006ab4 <__sfp_lock_acquire>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_acquire+0x8>)
 8006ab6:	f000 ba30 	b.w	8006f1a <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	20002315 	.word	0x20002315

08006ac0 <__sfp_lock_release>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__sfp_lock_release+0x8>)
 8006ac2:	f000 ba2b 	b.w	8006f1c <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20002315 	.word	0x20002315

08006acc <__sinit>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f7ff fff0 	bl	8006ab4 <__sfp_lock_acquire>
 8006ad4:	6a23      	ldr	r3, [r4, #32]
 8006ad6:	b11b      	cbz	r3, 8006ae0 <__sinit+0x14>
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f7ff bff0 	b.w	8006ac0 <__sfp_lock_release>
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <__sinit+0x28>)
 8006ae2:	6223      	str	r3, [r4, #32]
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <__sinit+0x2c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <__sinit+0xc>
 8006aec:	f7ff ffc4 	bl	8006a78 <global_stdio_init.part.0>
 8006af0:	e7f2      	b.n	8006ad8 <__sinit+0xc>
 8006af2:	bf00      	nop
 8006af4:	08006a39 	.word	0x08006a39
 8006af8:	2000230c 	.word	0x2000230c

08006afc <_fwalk_sglue>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4607      	mov	r7, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	2600      	movs	r6, #0
 8006b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b10:	d505      	bpl.n	8006b1e <_fwalk_sglue+0x22>
 8006b12:	6824      	ldr	r4, [r4, #0]
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d1f7      	bne.n	8006b08 <_fwalk_sglue+0xc>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d907      	bls.n	8006b34 <_fwalk_sglue+0x38>
 8006b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <_fwalk_sglue+0x38>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	4306      	orrs	r6, r0
 8006b34:	3568      	adds	r5, #104	@ 0x68
 8006b36:	e7e9      	b.n	8006b0c <_fwalk_sglue+0x10>

08006b38 <iprintf>:
 8006b38:	b40f      	push	{r0, r1, r2, r3}
 8006b3a:	b507      	push	{r0, r1, r2, lr}
 8006b3c:	4906      	ldr	r1, [pc, #24]	@ (8006b58 <iprintf+0x20>)
 8006b3e:	ab04      	add	r3, sp, #16
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b46:	6881      	ldr	r1, [r0, #8]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	f000 fbb5 	bl	80072b8 <_vfiprintf_r>
 8006b4e:	b003      	add	sp, #12
 8006b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr
 8006b58:	20000018 	.word	0x20000018

08006b5c <_puts_r>:
 8006b5c:	6a03      	ldr	r3, [r0, #32]
 8006b5e:	b570      	push	{r4, r5, r6, lr}
 8006b60:	6884      	ldr	r4, [r0, #8]
 8006b62:	4605      	mov	r5, r0
 8006b64:	460e      	mov	r6, r1
 8006b66:	b90b      	cbnz	r3, 8006b6c <_puts_r+0x10>
 8006b68:	f7ff ffb0 	bl	8006acc <__sinit>
 8006b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b6e:	07db      	lsls	r3, r3, #31
 8006b70:	d405      	bmi.n	8006b7e <_puts_r+0x22>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	0598      	lsls	r0, r3, #22
 8006b76:	d402      	bmi.n	8006b7e <_puts_r+0x22>
 8006b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b7a:	f000 f9ce 	bl	8006f1a <__retarget_lock_acquire_recursive>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	0719      	lsls	r1, r3, #28
 8006b82:	d502      	bpl.n	8006b8a <_puts_r+0x2e>
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d135      	bne.n	8006bf6 <_puts_r+0x9a>
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 f8e5 	bl	8006d5c <__swsetup_r>
 8006b92:	b380      	cbz	r0, 8006bf6 <_puts_r+0x9a>
 8006b94:	f04f 35ff 	mov.w	r5, #4294967295
 8006b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b9a:	07da      	lsls	r2, r3, #31
 8006b9c:	d405      	bmi.n	8006baa <_puts_r+0x4e>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	059b      	lsls	r3, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_puts_r+0x4e>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ba6:	f000 f9b9 	bl	8006f1c <__retarget_lock_release_recursive>
 8006baa:	4628      	mov	r0, r5
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da04      	bge.n	8006bbc <_puts_r+0x60>
 8006bb2:	69a2      	ldr	r2, [r4, #24]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	dc17      	bgt.n	8006be8 <_puts_r+0x8c>
 8006bb8:	290a      	cmp	r1, #10
 8006bba:	d015      	beq.n	8006be8 <_puts_r+0x8c>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	6022      	str	r2, [r4, #0]
 8006bc2:	7019      	strb	r1, [r3, #0]
 8006bc4:	68a3      	ldr	r3, [r4, #8]
 8006bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	60a3      	str	r3, [r4, #8]
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	d1ed      	bne.n	8006bae <_puts_r+0x52>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da11      	bge.n	8006bfa <_puts_r+0x9e>
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	210a      	movs	r1, #10
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f000 f87f 	bl	8006cde <__swbuf_r>
 8006be0:	3001      	adds	r0, #1
 8006be2:	d0d7      	beq.n	8006b94 <_puts_r+0x38>
 8006be4:	250a      	movs	r5, #10
 8006be6:	e7d7      	b.n	8006b98 <_puts_r+0x3c>
 8006be8:	4622      	mov	r2, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f877 	bl	8006cde <__swbuf_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d1e7      	bne.n	8006bc4 <_puts_r+0x68>
 8006bf4:	e7ce      	b.n	8006b94 <_puts_r+0x38>
 8006bf6:	3e01      	subs	r6, #1
 8006bf8:	e7e4      	b.n	8006bc4 <_puts_r+0x68>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	220a      	movs	r2, #10
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e7ee      	b.n	8006be4 <_puts_r+0x88>
	...

08006c08 <puts>:
 8006c08:	4b02      	ldr	r3, [pc, #8]	@ (8006c14 <puts+0xc>)
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	f7ff bfa5 	b.w	8006b5c <_puts_r>
 8006c12:	bf00      	nop
 8006c14:	20000018 	.word	0x20000018

08006c18 <siprintf>:
 8006c18:	b40e      	push	{r1, r2, r3}
 8006c1a:	b500      	push	{lr}
 8006c1c:	b09c      	sub	sp, #112	@ 0x70
 8006c1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c20:	9002      	str	r0, [sp, #8]
 8006c22:	9006      	str	r0, [sp, #24]
 8006c24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c28:	4809      	ldr	r0, [pc, #36]	@ (8006c50 <siprintf+0x38>)
 8006c2a:	9107      	str	r1, [sp, #28]
 8006c2c:	9104      	str	r1, [sp, #16]
 8006c2e:	4909      	ldr	r1, [pc, #36]	@ (8006c54 <siprintf+0x3c>)
 8006c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c34:	9105      	str	r1, [sp, #20]
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	a902      	add	r1, sp, #8
 8006c3c:	f000 fa16 	bl	800706c <_svfiprintf_r>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	b01c      	add	sp, #112	@ 0x70
 8006c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c4c:	b003      	add	sp, #12
 8006c4e:	4770      	bx	lr
 8006c50:	20000018 	.word	0x20000018
 8006c54:	ffff0208 	.word	0xffff0208

08006c58 <__sread>:
 8006c58:	b510      	push	{r4, lr}
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c60:	f000 f8fc 	bl	8006e5c <_read_r>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	bfab      	itete	ge
 8006c68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c6c:	181b      	addge	r3, r3, r0
 8006c6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c72:	bfac      	ite	ge
 8006c74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c76:	81a3      	strhlt	r3, [r4, #12]
 8006c78:	bd10      	pop	{r4, pc}

08006c7a <__swrite>:
 8006c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7e:	461f      	mov	r7, r3
 8006c80:	898b      	ldrh	r3, [r1, #12]
 8006c82:	05db      	lsls	r3, r3, #23
 8006c84:	4605      	mov	r5, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	4616      	mov	r6, r2
 8006c8a:	d505      	bpl.n	8006c98 <__swrite+0x1e>
 8006c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c90:	2302      	movs	r3, #2
 8006c92:	2200      	movs	r2, #0
 8006c94:	f000 f8d0 	bl	8006e38 <_lseek_r>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ca2:	81a3      	strh	r3, [r4, #12]
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	4628      	mov	r0, r5
 8006caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cae:	f000 b8f7 	b.w	8006ea0 <_write_r>

08006cb2 <__sseek>:
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cba:	f000 f8bd 	bl	8006e38 <_lseek_r>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	bf15      	itete	ne
 8006cc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cce:	81a3      	strheq	r3, [r4, #12]
 8006cd0:	bf18      	it	ne
 8006cd2:	81a3      	strhne	r3, [r4, #12]
 8006cd4:	bd10      	pop	{r4, pc}

08006cd6 <__sclose>:
 8006cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cda:	f000 b89d 	b.w	8006e18 <_close_r>

08006cde <__swbuf_r>:
 8006cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	4614      	mov	r4, r2
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	b118      	cbz	r0, 8006cf0 <__swbuf_r+0x12>
 8006ce8:	6a03      	ldr	r3, [r0, #32]
 8006cea:	b90b      	cbnz	r3, 8006cf0 <__swbuf_r+0x12>
 8006cec:	f7ff feee 	bl	8006acc <__sinit>
 8006cf0:	69a3      	ldr	r3, [r4, #24]
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	071a      	lsls	r2, r3, #28
 8006cf8:	d501      	bpl.n	8006cfe <__swbuf_r+0x20>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	b943      	cbnz	r3, 8006d10 <__swbuf_r+0x32>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f82b 	bl	8006d5c <__swsetup_r>
 8006d06:	b118      	cbz	r0, 8006d10 <__swbuf_r+0x32>
 8006d08:	f04f 37ff 	mov.w	r7, #4294967295
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	6922      	ldr	r2, [r4, #16]
 8006d14:	1a98      	subs	r0, r3, r2
 8006d16:	6963      	ldr	r3, [r4, #20]
 8006d18:	b2f6      	uxtb	r6, r6
 8006d1a:	4283      	cmp	r3, r0
 8006d1c:	4637      	mov	r7, r6
 8006d1e:	dc05      	bgt.n	8006d2c <__swbuf_r+0x4e>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fdf2 	bl	800790c <_fflush_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d1ed      	bne.n	8006d08 <__swbuf_r+0x2a>
 8006d2c:	68a3      	ldr	r3, [r4, #8]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	60a3      	str	r3, [r4, #8]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	6022      	str	r2, [r4, #0]
 8006d38:	701e      	strb	r6, [r3, #0]
 8006d3a:	6962      	ldr	r2, [r4, #20]
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d004      	beq.n	8006d4c <__swbuf_r+0x6e>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	07db      	lsls	r3, r3, #31
 8006d46:	d5e1      	bpl.n	8006d0c <__swbuf_r+0x2e>
 8006d48:	2e0a      	cmp	r6, #10
 8006d4a:	d1df      	bne.n	8006d0c <__swbuf_r+0x2e>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 fddc 	bl	800790c <_fflush_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d0d9      	beq.n	8006d0c <__swbuf_r+0x2e>
 8006d58:	e7d6      	b.n	8006d08 <__swbuf_r+0x2a>
	...

08006d5c <__swsetup_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4b29      	ldr	r3, [pc, #164]	@ (8006e04 <__swsetup_r+0xa8>)
 8006d60:	4605      	mov	r5, r0
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	460c      	mov	r4, r1
 8006d66:	b118      	cbz	r0, 8006d70 <__swsetup_r+0x14>
 8006d68:	6a03      	ldr	r3, [r0, #32]
 8006d6a:	b90b      	cbnz	r3, 8006d70 <__swsetup_r+0x14>
 8006d6c:	f7ff feae 	bl	8006acc <__sinit>
 8006d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d74:	0719      	lsls	r1, r3, #28
 8006d76:	d422      	bmi.n	8006dbe <__swsetup_r+0x62>
 8006d78:	06da      	lsls	r2, r3, #27
 8006d7a:	d407      	bmi.n	8006d8c <__swsetup_r+0x30>
 8006d7c:	2209      	movs	r2, #9
 8006d7e:	602a      	str	r2, [r5, #0]
 8006d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	e033      	b.n	8006df4 <__swsetup_r+0x98>
 8006d8c:	0758      	lsls	r0, r3, #29
 8006d8e:	d512      	bpl.n	8006db6 <__swsetup_r+0x5a>
 8006d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d92:	b141      	cbz	r1, 8006da6 <__swsetup_r+0x4a>
 8006d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d002      	beq.n	8006da2 <__swsetup_r+0x46>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 f8bf 	bl	8006f20 <_free_r>
 8006da2:	2300      	movs	r3, #0
 8006da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	2300      	movs	r3, #0
 8006db0:	6063      	str	r3, [r4, #4]
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f043 0308 	orr.w	r3, r3, #8
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	b94b      	cbnz	r3, 8006dd6 <__swsetup_r+0x7a>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dcc:	d003      	beq.n	8006dd6 <__swsetup_r+0x7a>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f000 fde9 	bl	80079a8 <__smakebuf_r>
 8006dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dda:	f013 0201 	ands.w	r2, r3, #1
 8006dde:	d00a      	beq.n	8006df6 <__swsetup_r+0x9a>
 8006de0:	2200      	movs	r2, #0
 8006de2:	60a2      	str	r2, [r4, #8]
 8006de4:	6962      	ldr	r2, [r4, #20]
 8006de6:	4252      	negs	r2, r2
 8006de8:	61a2      	str	r2, [r4, #24]
 8006dea:	6922      	ldr	r2, [r4, #16]
 8006dec:	b942      	cbnz	r2, 8006e00 <__swsetup_r+0xa4>
 8006dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006df2:	d1c5      	bne.n	8006d80 <__swsetup_r+0x24>
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	0799      	lsls	r1, r3, #30
 8006df8:	bf58      	it	pl
 8006dfa:	6962      	ldrpl	r2, [r4, #20]
 8006dfc:	60a2      	str	r2, [r4, #8]
 8006dfe:	e7f4      	b.n	8006dea <__swsetup_r+0x8e>
 8006e00:	2000      	movs	r0, #0
 8006e02:	e7f7      	b.n	8006df4 <__swsetup_r+0x98>
 8006e04:	20000018 	.word	0x20000018

08006e08 <memset>:
 8006e08:	4402      	add	r2, r0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d100      	bne.n	8006e12 <memset+0xa>
 8006e10:	4770      	bx	lr
 8006e12:	f803 1b01 	strb.w	r1, [r3], #1
 8006e16:	e7f9      	b.n	8006e0c <memset+0x4>

08006e18 <_close_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d06      	ldr	r5, [pc, #24]	@ (8006e34 <_close_r+0x1c>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7f9 ff36 	bl	8000c94 <_close>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_close_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_close_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20002310 	.word	0x20002310

08006e38 <_lseek_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4d07      	ldr	r5, [pc, #28]	@ (8006e58 <_lseek_r+0x20>)
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	4608      	mov	r0, r1
 8006e40:	4611      	mov	r1, r2
 8006e42:	2200      	movs	r2, #0
 8006e44:	602a      	str	r2, [r5, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f7f9 ff4b 	bl	8000ce2 <_lseek>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_lseek_r+0x1e>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_lseek_r+0x1e>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	20002310 	.word	0x20002310

08006e5c <_read_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d07      	ldr	r5, [pc, #28]	@ (8006e7c <_read_r+0x20>)
 8006e60:	4604      	mov	r4, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	4611      	mov	r1, r2
 8006e66:	2200      	movs	r2, #0
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f7f9 fef5 	bl	8000c5a <_read>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_read_r+0x1e>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_read_r+0x1e>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	20002310 	.word	0x20002310

08006e80 <_sbrk_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d06      	ldr	r5, [pc, #24]	@ (8006e9c <_sbrk_r+0x1c>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	f7f9 ff36 	bl	8000cfc <_sbrk>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_sbrk_r+0x1a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_sbrk_r+0x1a>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20002310 	.word	0x20002310

08006ea0 <_write_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	@ (8006ec0 <_write_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7f9 fcdd 	bl	800086e <_write>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_write_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_write_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20002310 	.word	0x20002310

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	@ (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000018 	.word	0x20000018

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f000 fe1c 	bl	8007b20 <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08007e70 	.word	0x08007e70
 8006f0c:	08007e70 	.word	0x08007e70
 8006f10:	08007e70 	.word	0x08007e70
 8006f14:	08007e74 	.word	0x08007e74

08006f18 <__retarget_lock_init_recursive>:
 8006f18:	4770      	bx	lr

08006f1a <__retarget_lock_acquire_recursive>:
 8006f1a:	4770      	bx	lr

08006f1c <__retarget_lock_release_recursive>:
 8006f1c:	4770      	bx	lr
	...

08006f20 <_free_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d041      	beq.n	8006fac <_free_r+0x8c>
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f0c      	subs	r4, r1, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfb8      	it	lt
 8006f32:	18e4      	addlt	r4, r4, r3
 8006f34:	f7ff fd32 	bl	800699c <__malloc_lock>
 8006f38:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <_free_r+0x90>)
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	b933      	cbnz	r3, 8006f4c <_free_r+0x2c>
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6014      	str	r4, [r2, #0]
 8006f42:	4628      	mov	r0, r5
 8006f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f48:	f7ff bd2e 	b.w	80069a8 <__malloc_unlock>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d908      	bls.n	8006f62 <_free_r+0x42>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	1821      	adds	r1, r4, r0
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf01      	itttt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	1809      	addeq	r1, r1, r0
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	e7ed      	b.n	8006f3e <_free_r+0x1e>
 8006f62:	461a      	mov	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	b10b      	cbz	r3, 8006f6c <_free_r+0x4c>
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d9fa      	bls.n	8006f62 <_free_r+0x42>
 8006f6c:	6811      	ldr	r1, [r2, #0]
 8006f6e:	1850      	adds	r0, r2, r1
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d10b      	bne.n	8006f8c <_free_r+0x6c>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	4401      	add	r1, r0
 8006f78:	1850      	adds	r0, r2, r1
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	d1e0      	bne.n	8006f42 <_free_r+0x22>
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6053      	str	r3, [r2, #4]
 8006f86:	4408      	add	r0, r1
 8006f88:	6010      	str	r0, [r2, #0]
 8006f8a:	e7da      	b.n	8006f42 <_free_r+0x22>
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x74>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	e7d6      	b.n	8006f42 <_free_r+0x22>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	1821      	adds	r1, r4, r0
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf04      	itt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	bf04      	itt	eq
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	6054      	str	r4, [r2, #4]
 8006faa:	e7ca      	b.n	8006f42 <_free_r+0x22>
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
 8006fae:	bf00      	nop
 8006fb0:	200021d0 	.word	0x200021d0

08006fb4 <__ssputs_r>:
 8006fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	688e      	ldr	r6, [r1, #8]
 8006fba:	461f      	mov	r7, r3
 8006fbc:	42be      	cmp	r6, r7
 8006fbe:	680b      	ldr	r3, [r1, #0]
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	4690      	mov	r8, r2
 8006fc6:	d82d      	bhi.n	8007024 <__ssputs_r+0x70>
 8006fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fd0:	d026      	beq.n	8007020 <__ssputs_r+0x6c>
 8006fd2:	6965      	ldr	r5, [r4, #20]
 8006fd4:	6909      	ldr	r1, [r1, #16]
 8006fd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fda:	eba3 0901 	sub.w	r9, r3, r1
 8006fde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe2:	1c7b      	adds	r3, r7, #1
 8006fe4:	444b      	add	r3, r9
 8006fe6:	106d      	asrs	r5, r5, #1
 8006fe8:	429d      	cmp	r5, r3
 8006fea:	bf38      	it	cc
 8006fec:	461d      	movcc	r5, r3
 8006fee:	0553      	lsls	r3, r2, #21
 8006ff0:	d527      	bpl.n	8007042 <__ssputs_r+0x8e>
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f7ff fc52 	bl	800689c <_malloc_r>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	b360      	cbz	r0, 8007056 <__ssputs_r+0xa2>
 8006ffc:	6921      	ldr	r1, [r4, #16]
 8006ffe:	464a      	mov	r2, r9
 8007000:	f000 fd4a 	bl	8007a98 <memcpy>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	6126      	str	r6, [r4, #16]
 8007012:	6165      	str	r5, [r4, #20]
 8007014:	444e      	add	r6, r9
 8007016:	eba5 0509 	sub.w	r5, r5, r9
 800701a:	6026      	str	r6, [r4, #0]
 800701c:	60a5      	str	r5, [r4, #8]
 800701e:	463e      	mov	r6, r7
 8007020:	42be      	cmp	r6, r7
 8007022:	d900      	bls.n	8007026 <__ssputs_r+0x72>
 8007024:	463e      	mov	r6, r7
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	4632      	mov	r2, r6
 800702a:	4641      	mov	r1, r8
 800702c:	f000 fcf8 	bl	8007a20 <memmove>
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	1b9b      	subs	r3, r3, r6
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	4433      	add	r3, r6
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	2000      	movs	r0, #0
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007042:	462a      	mov	r2, r5
 8007044:	f000 fd36 	bl	8007ab4 <_realloc_r>
 8007048:	4606      	mov	r6, r0
 800704a:	2800      	cmp	r0, #0
 800704c:	d1e0      	bne.n	8007010 <__ssputs_r+0x5c>
 800704e:	6921      	ldr	r1, [r4, #16]
 8007050:	4650      	mov	r0, sl
 8007052:	f7ff ff65 	bl	8006f20 <_free_r>
 8007056:	230c      	movs	r3, #12
 8007058:	f8ca 3000 	str.w	r3, [sl]
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e7e9      	b.n	800703e <__ssputs_r+0x8a>
	...

0800706c <_svfiprintf_r>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	4698      	mov	r8, r3
 8007072:	898b      	ldrh	r3, [r1, #12]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	b09d      	sub	sp, #116	@ 0x74
 8007078:	4607      	mov	r7, r0
 800707a:	460d      	mov	r5, r1
 800707c:	4614      	mov	r4, r2
 800707e:	d510      	bpl.n	80070a2 <_svfiprintf_r+0x36>
 8007080:	690b      	ldr	r3, [r1, #16]
 8007082:	b973      	cbnz	r3, 80070a2 <_svfiprintf_r+0x36>
 8007084:	2140      	movs	r1, #64	@ 0x40
 8007086:	f7ff fc09 	bl	800689c <_malloc_r>
 800708a:	6028      	str	r0, [r5, #0]
 800708c:	6128      	str	r0, [r5, #16]
 800708e:	b930      	cbnz	r0, 800709e <_svfiprintf_r+0x32>
 8007090:	230c      	movs	r3, #12
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	b01d      	add	sp, #116	@ 0x74
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709e:	2340      	movs	r3, #64	@ 0x40
 80070a0:	616b      	str	r3, [r5, #20]
 80070a2:	2300      	movs	r3, #0
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	2320      	movs	r3, #32
 80070a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b0:	2330      	movs	r3, #48	@ 0x30
 80070b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007250 <_svfiprintf_r+0x1e4>
 80070b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070ba:	f04f 0901 	mov.w	r9, #1
 80070be:	4623      	mov	r3, r4
 80070c0:	469a      	mov	sl, r3
 80070c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c6:	b10a      	cbz	r2, 80070cc <_svfiprintf_r+0x60>
 80070c8:	2a25      	cmp	r2, #37	@ 0x25
 80070ca:	d1f9      	bne.n	80070c0 <_svfiprintf_r+0x54>
 80070cc:	ebba 0b04 	subs.w	fp, sl, r4
 80070d0:	d00b      	beq.n	80070ea <_svfiprintf_r+0x7e>
 80070d2:	465b      	mov	r3, fp
 80070d4:	4622      	mov	r2, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	4638      	mov	r0, r7
 80070da:	f7ff ff6b 	bl	8006fb4 <__ssputs_r>
 80070de:	3001      	adds	r0, #1
 80070e0:	f000 80a7 	beq.w	8007232 <_svfiprintf_r+0x1c6>
 80070e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070e6:	445a      	add	r2, fp
 80070e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80070ea:	f89a 3000 	ldrb.w	r3, [sl]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 809f 	beq.w	8007232 <_svfiprintf_r+0x1c6>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070fe:	f10a 0a01 	add.w	sl, sl, #1
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800710a:	931a      	str	r3, [sp, #104]	@ 0x68
 800710c:	4654      	mov	r4, sl
 800710e:	2205      	movs	r2, #5
 8007110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007114:	484e      	ldr	r0, [pc, #312]	@ (8007250 <_svfiprintf_r+0x1e4>)
 8007116:	f7f9 f88b 	bl	8000230 <memchr>
 800711a:	9a04      	ldr	r2, [sp, #16]
 800711c:	b9d8      	cbnz	r0, 8007156 <_svfiprintf_r+0xea>
 800711e:	06d0      	lsls	r0, r2, #27
 8007120:	bf44      	itt	mi
 8007122:	2320      	movmi	r3, #32
 8007124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007128:	0711      	lsls	r1, r2, #28
 800712a:	bf44      	itt	mi
 800712c:	232b      	movmi	r3, #43	@ 0x2b
 800712e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007132:	f89a 3000 	ldrb.w	r3, [sl]
 8007136:	2b2a      	cmp	r3, #42	@ 0x2a
 8007138:	d015      	beq.n	8007166 <_svfiprintf_r+0xfa>
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4654      	mov	r4, sl
 800713e:	2000      	movs	r0, #0
 8007140:	f04f 0c0a 	mov.w	ip, #10
 8007144:	4621      	mov	r1, r4
 8007146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714a:	3b30      	subs	r3, #48	@ 0x30
 800714c:	2b09      	cmp	r3, #9
 800714e:	d94b      	bls.n	80071e8 <_svfiprintf_r+0x17c>
 8007150:	b1b0      	cbz	r0, 8007180 <_svfiprintf_r+0x114>
 8007152:	9207      	str	r2, [sp, #28]
 8007154:	e014      	b.n	8007180 <_svfiprintf_r+0x114>
 8007156:	eba0 0308 	sub.w	r3, r0, r8
 800715a:	fa09 f303 	lsl.w	r3, r9, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	46a2      	mov	sl, r4
 8007164:	e7d2      	b.n	800710c <_svfiprintf_r+0xa0>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	9103      	str	r1, [sp, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfbb      	ittet	lt
 8007172:	425b      	neglt	r3, r3
 8007174:	f042 0202 	orrlt.w	r2, r2, #2
 8007178:	9307      	strge	r3, [sp, #28]
 800717a:	9307      	strlt	r3, [sp, #28]
 800717c:	bfb8      	it	lt
 800717e:	9204      	strlt	r2, [sp, #16]
 8007180:	7823      	ldrb	r3, [r4, #0]
 8007182:	2b2e      	cmp	r3, #46	@ 0x2e
 8007184:	d10a      	bne.n	800719c <_svfiprintf_r+0x130>
 8007186:	7863      	ldrb	r3, [r4, #1]
 8007188:	2b2a      	cmp	r3, #42	@ 0x2a
 800718a:	d132      	bne.n	80071f2 <_svfiprintf_r+0x186>
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	1d1a      	adds	r2, r3, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	9203      	str	r2, [sp, #12]
 8007194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007198:	3402      	adds	r4, #2
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007260 <_svfiprintf_r+0x1f4>
 80071a0:	7821      	ldrb	r1, [r4, #0]
 80071a2:	2203      	movs	r2, #3
 80071a4:	4650      	mov	r0, sl
 80071a6:	f7f9 f843 	bl	8000230 <memchr>
 80071aa:	b138      	cbz	r0, 80071bc <_svfiprintf_r+0x150>
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	eba0 000a 	sub.w	r0, r0, sl
 80071b2:	2240      	movs	r2, #64	@ 0x40
 80071b4:	4082      	lsls	r2, r0
 80071b6:	4313      	orrs	r3, r2
 80071b8:	3401      	adds	r4, #1
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c0:	4824      	ldr	r0, [pc, #144]	@ (8007254 <_svfiprintf_r+0x1e8>)
 80071c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071c6:	2206      	movs	r2, #6
 80071c8:	f7f9 f832 	bl	8000230 <memchr>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d036      	beq.n	800723e <_svfiprintf_r+0x1d2>
 80071d0:	4b21      	ldr	r3, [pc, #132]	@ (8007258 <_svfiprintf_r+0x1ec>)
 80071d2:	bb1b      	cbnz	r3, 800721c <_svfiprintf_r+0x1b0>
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	3307      	adds	r3, #7
 80071d8:	f023 0307 	bic.w	r3, r3, #7
 80071dc:	3308      	adds	r3, #8
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e2:	4433      	add	r3, r6
 80071e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e6:	e76a      	b.n	80070be <_svfiprintf_r+0x52>
 80071e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ec:	460c      	mov	r4, r1
 80071ee:	2001      	movs	r0, #1
 80071f0:	e7a8      	b.n	8007144 <_svfiprintf_r+0xd8>
 80071f2:	2300      	movs	r3, #0
 80071f4:	3401      	adds	r4, #1
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	4619      	mov	r1, r3
 80071fa:	f04f 0c0a 	mov.w	ip, #10
 80071fe:	4620      	mov	r0, r4
 8007200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007204:	3a30      	subs	r2, #48	@ 0x30
 8007206:	2a09      	cmp	r2, #9
 8007208:	d903      	bls.n	8007212 <_svfiprintf_r+0x1a6>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0c6      	beq.n	800719c <_svfiprintf_r+0x130>
 800720e:	9105      	str	r1, [sp, #20]
 8007210:	e7c4      	b.n	800719c <_svfiprintf_r+0x130>
 8007212:	fb0c 2101 	mla	r1, ip, r1, r2
 8007216:	4604      	mov	r4, r0
 8007218:	2301      	movs	r3, #1
 800721a:	e7f0      	b.n	80071fe <_svfiprintf_r+0x192>
 800721c:	ab03      	add	r3, sp, #12
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	462a      	mov	r2, r5
 8007222:	4b0e      	ldr	r3, [pc, #56]	@ (800725c <_svfiprintf_r+0x1f0>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	4638      	mov	r0, r7
 8007228:	f3af 8000 	nop.w
 800722c:	1c42      	adds	r2, r0, #1
 800722e:	4606      	mov	r6, r0
 8007230:	d1d6      	bne.n	80071e0 <_svfiprintf_r+0x174>
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	065b      	lsls	r3, r3, #25
 8007236:	f53f af2d 	bmi.w	8007094 <_svfiprintf_r+0x28>
 800723a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800723c:	e72c      	b.n	8007098 <_svfiprintf_r+0x2c>
 800723e:	ab03      	add	r3, sp, #12
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	462a      	mov	r2, r5
 8007244:	4b05      	ldr	r3, [pc, #20]	@ (800725c <_svfiprintf_r+0x1f0>)
 8007246:	a904      	add	r1, sp, #16
 8007248:	4638      	mov	r0, r7
 800724a:	f000 f9bb 	bl	80075c4 <_printf_i>
 800724e:	e7ed      	b.n	800722c <_svfiprintf_r+0x1c0>
 8007250:	08007e34 	.word	0x08007e34
 8007254:	08007e3e 	.word	0x08007e3e
 8007258:	00000000 	.word	0x00000000
 800725c:	08006fb5 	.word	0x08006fb5
 8007260:	08007e3a 	.word	0x08007e3a

08007264 <__sfputc_r>:
 8007264:	6893      	ldr	r3, [r2, #8]
 8007266:	3b01      	subs	r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	b410      	push	{r4}
 800726c:	6093      	str	r3, [r2, #8]
 800726e:	da08      	bge.n	8007282 <__sfputc_r+0x1e>
 8007270:	6994      	ldr	r4, [r2, #24]
 8007272:	42a3      	cmp	r3, r4
 8007274:	db01      	blt.n	800727a <__sfputc_r+0x16>
 8007276:	290a      	cmp	r1, #10
 8007278:	d103      	bne.n	8007282 <__sfputc_r+0x1e>
 800727a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800727e:	f7ff bd2e 	b.w	8006cde <__swbuf_r>
 8007282:	6813      	ldr	r3, [r2, #0]
 8007284:	1c58      	adds	r0, r3, #1
 8007286:	6010      	str	r0, [r2, #0]
 8007288:	7019      	strb	r1, [r3, #0]
 800728a:	4608      	mov	r0, r1
 800728c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007290:	4770      	bx	lr

08007292 <__sfputs_r>:
 8007292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007294:	4606      	mov	r6, r0
 8007296:	460f      	mov	r7, r1
 8007298:	4614      	mov	r4, r2
 800729a:	18d5      	adds	r5, r2, r3
 800729c:	42ac      	cmp	r4, r5
 800729e:	d101      	bne.n	80072a4 <__sfputs_r+0x12>
 80072a0:	2000      	movs	r0, #0
 80072a2:	e007      	b.n	80072b4 <__sfputs_r+0x22>
 80072a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a8:	463a      	mov	r2, r7
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff ffda 	bl	8007264 <__sfputc_r>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d1f3      	bne.n	800729c <__sfputs_r+0xa>
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072b8 <_vfiprintf_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	460d      	mov	r5, r1
 80072be:	b09d      	sub	sp, #116	@ 0x74
 80072c0:	4614      	mov	r4, r2
 80072c2:	4698      	mov	r8, r3
 80072c4:	4606      	mov	r6, r0
 80072c6:	b118      	cbz	r0, 80072d0 <_vfiprintf_r+0x18>
 80072c8:	6a03      	ldr	r3, [r0, #32]
 80072ca:	b90b      	cbnz	r3, 80072d0 <_vfiprintf_r+0x18>
 80072cc:	f7ff fbfe 	bl	8006acc <__sinit>
 80072d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_vfiprintf_r+0x2a>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	059a      	lsls	r2, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_vfiprintf_r+0x2a>
 80072dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072de:	f7ff fe1c 	bl	8006f1a <__retarget_lock_acquire_recursive>
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	071b      	lsls	r3, r3, #28
 80072e6:	d501      	bpl.n	80072ec <_vfiprintf_r+0x34>
 80072e8:	692b      	ldr	r3, [r5, #16]
 80072ea:	b99b      	cbnz	r3, 8007314 <_vfiprintf_r+0x5c>
 80072ec:	4629      	mov	r1, r5
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff fd34 	bl	8006d5c <__swsetup_r>
 80072f4:	b170      	cbz	r0, 8007314 <_vfiprintf_r+0x5c>
 80072f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072f8:	07dc      	lsls	r4, r3, #31
 80072fa:	d504      	bpl.n	8007306 <_vfiprintf_r+0x4e>
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	b01d      	add	sp, #116	@ 0x74
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	0598      	lsls	r0, r3, #22
 800730a:	d4f7      	bmi.n	80072fc <_vfiprintf_r+0x44>
 800730c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800730e:	f7ff fe05 	bl	8006f1c <__retarget_lock_release_recursive>
 8007312:	e7f3      	b.n	80072fc <_vfiprintf_r+0x44>
 8007314:	2300      	movs	r3, #0
 8007316:	9309      	str	r3, [sp, #36]	@ 0x24
 8007318:	2320      	movs	r3, #32
 800731a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800731e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007322:	2330      	movs	r3, #48	@ 0x30
 8007324:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074d4 <_vfiprintf_r+0x21c>
 8007328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800732c:	f04f 0901 	mov.w	r9, #1
 8007330:	4623      	mov	r3, r4
 8007332:	469a      	mov	sl, r3
 8007334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007338:	b10a      	cbz	r2, 800733e <_vfiprintf_r+0x86>
 800733a:	2a25      	cmp	r2, #37	@ 0x25
 800733c:	d1f9      	bne.n	8007332 <_vfiprintf_r+0x7a>
 800733e:	ebba 0b04 	subs.w	fp, sl, r4
 8007342:	d00b      	beq.n	800735c <_vfiprintf_r+0xa4>
 8007344:	465b      	mov	r3, fp
 8007346:	4622      	mov	r2, r4
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f7ff ffa1 	bl	8007292 <__sfputs_r>
 8007350:	3001      	adds	r0, #1
 8007352:	f000 80a7 	beq.w	80074a4 <_vfiprintf_r+0x1ec>
 8007356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007358:	445a      	add	r2, fp
 800735a:	9209      	str	r2, [sp, #36]	@ 0x24
 800735c:	f89a 3000 	ldrb.w	r3, [sl]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 809f 	beq.w	80074a4 <_vfiprintf_r+0x1ec>
 8007366:	2300      	movs	r3, #0
 8007368:	f04f 32ff 	mov.w	r2, #4294967295
 800736c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007370:	f10a 0a01 	add.w	sl, sl, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	9307      	str	r3, [sp, #28]
 8007378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800737c:	931a      	str	r3, [sp, #104]	@ 0x68
 800737e:	4654      	mov	r4, sl
 8007380:	2205      	movs	r2, #5
 8007382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007386:	4853      	ldr	r0, [pc, #332]	@ (80074d4 <_vfiprintf_r+0x21c>)
 8007388:	f7f8 ff52 	bl	8000230 <memchr>
 800738c:	9a04      	ldr	r2, [sp, #16]
 800738e:	b9d8      	cbnz	r0, 80073c8 <_vfiprintf_r+0x110>
 8007390:	06d1      	lsls	r1, r2, #27
 8007392:	bf44      	itt	mi
 8007394:	2320      	movmi	r3, #32
 8007396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800739a:	0713      	lsls	r3, r2, #28
 800739c:	bf44      	itt	mi
 800739e:	232b      	movmi	r3, #43	@ 0x2b
 80073a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a4:	f89a 3000 	ldrb.w	r3, [sl]
 80073a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073aa:	d015      	beq.n	80073d8 <_vfiprintf_r+0x120>
 80073ac:	9a07      	ldr	r2, [sp, #28]
 80073ae:	4654      	mov	r4, sl
 80073b0:	2000      	movs	r0, #0
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	4621      	mov	r1, r4
 80073b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073bc:	3b30      	subs	r3, #48	@ 0x30
 80073be:	2b09      	cmp	r3, #9
 80073c0:	d94b      	bls.n	800745a <_vfiprintf_r+0x1a2>
 80073c2:	b1b0      	cbz	r0, 80073f2 <_vfiprintf_r+0x13a>
 80073c4:	9207      	str	r2, [sp, #28]
 80073c6:	e014      	b.n	80073f2 <_vfiprintf_r+0x13a>
 80073c8:	eba0 0308 	sub.w	r3, r0, r8
 80073cc:	fa09 f303 	lsl.w	r3, r9, r3
 80073d0:	4313      	orrs	r3, r2
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	46a2      	mov	sl, r4
 80073d6:	e7d2      	b.n	800737e <_vfiprintf_r+0xc6>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1d19      	adds	r1, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	9103      	str	r1, [sp, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfbb      	ittet	lt
 80073e4:	425b      	neglt	r3, r3
 80073e6:	f042 0202 	orrlt.w	r2, r2, #2
 80073ea:	9307      	strge	r3, [sp, #28]
 80073ec:	9307      	strlt	r3, [sp, #28]
 80073ee:	bfb8      	it	lt
 80073f0:	9204      	strlt	r2, [sp, #16]
 80073f2:	7823      	ldrb	r3, [r4, #0]
 80073f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f6:	d10a      	bne.n	800740e <_vfiprintf_r+0x156>
 80073f8:	7863      	ldrb	r3, [r4, #1]
 80073fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80073fc:	d132      	bne.n	8007464 <_vfiprintf_r+0x1ac>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9203      	str	r2, [sp, #12]
 8007406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800740a:	3402      	adds	r4, #2
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074e4 <_vfiprintf_r+0x22c>
 8007412:	7821      	ldrb	r1, [r4, #0]
 8007414:	2203      	movs	r2, #3
 8007416:	4650      	mov	r0, sl
 8007418:	f7f8 ff0a 	bl	8000230 <memchr>
 800741c:	b138      	cbz	r0, 800742e <_vfiprintf_r+0x176>
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	eba0 000a 	sub.w	r0, r0, sl
 8007424:	2240      	movs	r2, #64	@ 0x40
 8007426:	4082      	lsls	r2, r0
 8007428:	4313      	orrs	r3, r2
 800742a:	3401      	adds	r4, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007432:	4829      	ldr	r0, [pc, #164]	@ (80074d8 <_vfiprintf_r+0x220>)
 8007434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007438:	2206      	movs	r2, #6
 800743a:	f7f8 fef9 	bl	8000230 <memchr>
 800743e:	2800      	cmp	r0, #0
 8007440:	d03f      	beq.n	80074c2 <_vfiprintf_r+0x20a>
 8007442:	4b26      	ldr	r3, [pc, #152]	@ (80074dc <_vfiprintf_r+0x224>)
 8007444:	bb1b      	cbnz	r3, 800748e <_vfiprintf_r+0x1d6>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	3307      	adds	r3, #7
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	3308      	adds	r3, #8
 8007450:	9303      	str	r3, [sp, #12]
 8007452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007454:	443b      	add	r3, r7
 8007456:	9309      	str	r3, [sp, #36]	@ 0x24
 8007458:	e76a      	b.n	8007330 <_vfiprintf_r+0x78>
 800745a:	fb0c 3202 	mla	r2, ip, r2, r3
 800745e:	460c      	mov	r4, r1
 8007460:	2001      	movs	r0, #1
 8007462:	e7a8      	b.n	80073b6 <_vfiprintf_r+0xfe>
 8007464:	2300      	movs	r3, #0
 8007466:	3401      	adds	r4, #1
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	4619      	mov	r1, r3
 800746c:	f04f 0c0a 	mov.w	ip, #10
 8007470:	4620      	mov	r0, r4
 8007472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007476:	3a30      	subs	r2, #48	@ 0x30
 8007478:	2a09      	cmp	r2, #9
 800747a:	d903      	bls.n	8007484 <_vfiprintf_r+0x1cc>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0c6      	beq.n	800740e <_vfiprintf_r+0x156>
 8007480:	9105      	str	r1, [sp, #20]
 8007482:	e7c4      	b.n	800740e <_vfiprintf_r+0x156>
 8007484:	fb0c 2101 	mla	r1, ip, r1, r2
 8007488:	4604      	mov	r4, r0
 800748a:	2301      	movs	r3, #1
 800748c:	e7f0      	b.n	8007470 <_vfiprintf_r+0x1b8>
 800748e:	ab03      	add	r3, sp, #12
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	462a      	mov	r2, r5
 8007494:	4b12      	ldr	r3, [pc, #72]	@ (80074e0 <_vfiprintf_r+0x228>)
 8007496:	a904      	add	r1, sp, #16
 8007498:	4630      	mov	r0, r6
 800749a:	f3af 8000 	nop.w
 800749e:	4607      	mov	r7, r0
 80074a0:	1c78      	adds	r0, r7, #1
 80074a2:	d1d6      	bne.n	8007452 <_vfiprintf_r+0x19a>
 80074a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d405      	bmi.n	80074b6 <_vfiprintf_r+0x1fe>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	059a      	lsls	r2, r3, #22
 80074ae:	d402      	bmi.n	80074b6 <_vfiprintf_r+0x1fe>
 80074b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b2:	f7ff fd33 	bl	8006f1c <__retarget_lock_release_recursive>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	065b      	lsls	r3, r3, #25
 80074ba:	f53f af1f 	bmi.w	80072fc <_vfiprintf_r+0x44>
 80074be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074c0:	e71e      	b.n	8007300 <_vfiprintf_r+0x48>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <_vfiprintf_r+0x228>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f879 	bl	80075c4 <_printf_i>
 80074d2:	e7e4      	b.n	800749e <_vfiprintf_r+0x1e6>
 80074d4:	08007e34 	.word	0x08007e34
 80074d8:	08007e3e 	.word	0x08007e3e
 80074dc:	00000000 	.word	0x00000000
 80074e0:	08007293 	.word	0x08007293
 80074e4:	08007e3a 	.word	0x08007e3a

080074e8 <_printf_common>:
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	4616      	mov	r6, r2
 80074ee:	4698      	mov	r8, r3
 80074f0:	688a      	ldr	r2, [r1, #8]
 80074f2:	690b      	ldr	r3, [r1, #16]
 80074f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfb8      	it	lt
 80074fc:	4613      	movlt	r3, r2
 80074fe:	6033      	str	r3, [r6, #0]
 8007500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007504:	4607      	mov	r7, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b10a      	cbz	r2, 800750e <_printf_common+0x26>
 800750a:	3301      	adds	r3, #1
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	0699      	lsls	r1, r3, #26
 8007512:	bf42      	ittt	mi
 8007514:	6833      	ldrmi	r3, [r6, #0]
 8007516:	3302      	addmi	r3, #2
 8007518:	6033      	strmi	r3, [r6, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d106      	bne.n	8007530 <_printf_common+0x48>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	42ab      	cmp	r3, r5
 800752e:	dc26      	bgt.n	800757e <_printf_common+0x96>
 8007530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	3b00      	subs	r3, #0
 8007538:	bf18      	it	ne
 800753a:	2301      	movne	r3, #1
 800753c:	0692      	lsls	r2, r2, #26
 800753e:	d42b      	bmi.n	8007598 <_printf_common+0xb0>
 8007540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007544:	4641      	mov	r1, r8
 8007546:	4638      	mov	r0, r7
 8007548:	47c8      	blx	r9
 800754a:	3001      	adds	r0, #1
 800754c:	d01e      	beq.n	800758c <_printf_common+0xa4>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	f003 0306 	and.w	r3, r3, #6
 8007556:	2b04      	cmp	r3, #4
 8007558:	bf02      	ittt	eq
 800755a:	68e5      	ldreq	r5, [r4, #12]
 800755c:	6833      	ldreq	r3, [r6, #0]
 800755e:	1aed      	subeq	r5, r5, r3
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	bf0c      	ite	eq
 8007564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007568:	2500      	movne	r5, #0
 800756a:	4293      	cmp	r3, r2
 800756c:	bfc4      	itt	gt
 800756e:	1a9b      	subgt	r3, r3, r2
 8007570:	18ed      	addgt	r5, r5, r3
 8007572:	2600      	movs	r6, #0
 8007574:	341a      	adds	r4, #26
 8007576:	42b5      	cmp	r5, r6
 8007578:	d11a      	bne.n	80075b0 <_printf_common+0xc8>
 800757a:	2000      	movs	r0, #0
 800757c:	e008      	b.n	8007590 <_printf_common+0xa8>
 800757e:	2301      	movs	r3, #1
 8007580:	4652      	mov	r2, sl
 8007582:	4641      	mov	r1, r8
 8007584:	4638      	mov	r0, r7
 8007586:	47c8      	blx	r9
 8007588:	3001      	adds	r0, #1
 800758a:	d103      	bne.n	8007594 <_printf_common+0xac>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007594:	3501      	adds	r5, #1
 8007596:	e7c6      	b.n	8007526 <_printf_common+0x3e>
 8007598:	18e1      	adds	r1, r4, r3
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	2030      	movs	r0, #48	@ 0x30
 800759e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075a2:	4422      	add	r2, r4
 80075a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075ac:	3302      	adds	r3, #2
 80075ae:	e7c7      	b.n	8007540 <_printf_common+0x58>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4622      	mov	r2, r4
 80075b4:	4641      	mov	r1, r8
 80075b6:	4638      	mov	r0, r7
 80075b8:	47c8      	blx	r9
 80075ba:	3001      	adds	r0, #1
 80075bc:	d0e6      	beq.n	800758c <_printf_common+0xa4>
 80075be:	3601      	adds	r6, #1
 80075c0:	e7d9      	b.n	8007576 <_printf_common+0x8e>
	...

080075c4 <_printf_i>:
 80075c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	7e0f      	ldrb	r7, [r1, #24]
 80075ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075cc:	2f78      	cmp	r7, #120	@ 0x78
 80075ce:	4691      	mov	r9, r2
 80075d0:	4680      	mov	r8, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	469a      	mov	sl, r3
 80075d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075da:	d807      	bhi.n	80075ec <_printf_i+0x28>
 80075dc:	2f62      	cmp	r7, #98	@ 0x62
 80075de:	d80a      	bhi.n	80075f6 <_printf_i+0x32>
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	f000 80d2 	beq.w	800778a <_printf_i+0x1c6>
 80075e6:	2f58      	cmp	r7, #88	@ 0x58
 80075e8:	f000 80b9 	beq.w	800775e <_printf_i+0x19a>
 80075ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075f4:	e03a      	b.n	800766c <_printf_i+0xa8>
 80075f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075fa:	2b15      	cmp	r3, #21
 80075fc:	d8f6      	bhi.n	80075ec <_printf_i+0x28>
 80075fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007604 <_printf_i+0x40>)
 8007600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007604:	0800765d 	.word	0x0800765d
 8007608:	08007671 	.word	0x08007671
 800760c:	080075ed 	.word	0x080075ed
 8007610:	080075ed 	.word	0x080075ed
 8007614:	080075ed 	.word	0x080075ed
 8007618:	080075ed 	.word	0x080075ed
 800761c:	08007671 	.word	0x08007671
 8007620:	080075ed 	.word	0x080075ed
 8007624:	080075ed 	.word	0x080075ed
 8007628:	080075ed 	.word	0x080075ed
 800762c:	080075ed 	.word	0x080075ed
 8007630:	08007771 	.word	0x08007771
 8007634:	0800769b 	.word	0x0800769b
 8007638:	0800772b 	.word	0x0800772b
 800763c:	080075ed 	.word	0x080075ed
 8007640:	080075ed 	.word	0x080075ed
 8007644:	08007793 	.word	0x08007793
 8007648:	080075ed 	.word	0x080075ed
 800764c:	0800769b 	.word	0x0800769b
 8007650:	080075ed 	.word	0x080075ed
 8007654:	080075ed 	.word	0x080075ed
 8007658:	08007733 	.word	0x08007733
 800765c:	6833      	ldr	r3, [r6, #0]
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6032      	str	r2, [r6, #0]
 8007664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800766c:	2301      	movs	r3, #1
 800766e:	e09d      	b.n	80077ac <_printf_i+0x1e8>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	1d19      	adds	r1, r3, #4
 8007676:	6031      	str	r1, [r6, #0]
 8007678:	0606      	lsls	r6, r0, #24
 800767a:	d501      	bpl.n	8007680 <_printf_i+0xbc>
 800767c:	681d      	ldr	r5, [r3, #0]
 800767e:	e003      	b.n	8007688 <_printf_i+0xc4>
 8007680:	0645      	lsls	r5, r0, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0xb8>
 8007684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007688:	2d00      	cmp	r5, #0
 800768a:	da03      	bge.n	8007694 <_printf_i+0xd0>
 800768c:	232d      	movs	r3, #45	@ 0x2d
 800768e:	426d      	negs	r5, r5
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007694:	4859      	ldr	r0, [pc, #356]	@ (80077fc <_printf_i+0x238>)
 8007696:	230a      	movs	r3, #10
 8007698:	e011      	b.n	80076be <_printf_i+0xfa>
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	0608      	lsls	r0, r1, #24
 80076a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80076a4:	d402      	bmi.n	80076ac <_printf_i+0xe8>
 80076a6:	0649      	lsls	r1, r1, #25
 80076a8:	bf48      	it	mi
 80076aa:	b2ad      	uxthmi	r5, r5
 80076ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ae:	4853      	ldr	r0, [pc, #332]	@ (80077fc <_printf_i+0x238>)
 80076b0:	6033      	str	r3, [r6, #0]
 80076b2:	bf14      	ite	ne
 80076b4:	230a      	movne	r3, #10
 80076b6:	2308      	moveq	r3, #8
 80076b8:	2100      	movs	r1, #0
 80076ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076be:	6866      	ldr	r6, [r4, #4]
 80076c0:	60a6      	str	r6, [r4, #8]
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	bfa2      	ittt	ge
 80076c6:	6821      	ldrge	r1, [r4, #0]
 80076c8:	f021 0104 	bicge.w	r1, r1, #4
 80076cc:	6021      	strge	r1, [r4, #0]
 80076ce:	b90d      	cbnz	r5, 80076d4 <_printf_i+0x110>
 80076d0:	2e00      	cmp	r6, #0
 80076d2:	d04b      	beq.n	800776c <_printf_i+0x1a8>
 80076d4:	4616      	mov	r6, r2
 80076d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076da:	fb03 5711 	mls	r7, r3, r1, r5
 80076de:	5dc7      	ldrb	r7, [r0, r7]
 80076e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076e4:	462f      	mov	r7, r5
 80076e6:	42bb      	cmp	r3, r7
 80076e8:	460d      	mov	r5, r1
 80076ea:	d9f4      	bls.n	80076d6 <_printf_i+0x112>
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d10b      	bne.n	8007708 <_printf_i+0x144>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	07df      	lsls	r7, r3, #31
 80076f4:	d508      	bpl.n	8007708 <_printf_i+0x144>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6861      	ldr	r1, [r4, #4]
 80076fa:	4299      	cmp	r1, r3
 80076fc:	bfde      	ittt	le
 80076fe:	2330      	movle	r3, #48	@ 0x30
 8007700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007704:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007708:	1b92      	subs	r2, r2, r6
 800770a:	6122      	str	r2, [r4, #16]
 800770c:	f8cd a000 	str.w	sl, [sp]
 8007710:	464b      	mov	r3, r9
 8007712:	aa03      	add	r2, sp, #12
 8007714:	4621      	mov	r1, r4
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff fee6 	bl	80074e8 <_printf_common>
 800771c:	3001      	adds	r0, #1
 800771e:	d14a      	bne.n	80077b6 <_printf_i+0x1f2>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	b004      	add	sp, #16
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	f043 0320 	orr.w	r3, r3, #32
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	4833      	ldr	r0, [pc, #204]	@ (8007800 <_printf_i+0x23c>)
 8007734:	2778      	movs	r7, #120	@ 0x78
 8007736:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	6831      	ldr	r1, [r6, #0]
 800773e:	061f      	lsls	r7, r3, #24
 8007740:	f851 5b04 	ldr.w	r5, [r1], #4
 8007744:	d402      	bmi.n	800774c <_printf_i+0x188>
 8007746:	065f      	lsls	r7, r3, #25
 8007748:	bf48      	it	mi
 800774a:	b2ad      	uxthmi	r5, r5
 800774c:	6031      	str	r1, [r6, #0]
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	bf44      	itt	mi
 8007752:	f043 0320 	orrmi.w	r3, r3, #32
 8007756:	6023      	strmi	r3, [r4, #0]
 8007758:	b11d      	cbz	r5, 8007762 <_printf_i+0x19e>
 800775a:	2310      	movs	r3, #16
 800775c:	e7ac      	b.n	80076b8 <_printf_i+0xf4>
 800775e:	4827      	ldr	r0, [pc, #156]	@ (80077fc <_printf_i+0x238>)
 8007760:	e7e9      	b.n	8007736 <_printf_i+0x172>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0320 	bic.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	e7f6      	b.n	800775a <_printf_i+0x196>
 800776c:	4616      	mov	r6, r2
 800776e:	e7bd      	b.n	80076ec <_printf_i+0x128>
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	6825      	ldr	r5, [r4, #0]
 8007774:	6961      	ldr	r1, [r4, #20]
 8007776:	1d18      	adds	r0, r3, #4
 8007778:	6030      	str	r0, [r6, #0]
 800777a:	062e      	lsls	r6, r5, #24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	d501      	bpl.n	8007784 <_printf_i+0x1c0>
 8007780:	6019      	str	r1, [r3, #0]
 8007782:	e002      	b.n	800778a <_printf_i+0x1c6>
 8007784:	0668      	lsls	r0, r5, #25
 8007786:	d5fb      	bpl.n	8007780 <_printf_i+0x1bc>
 8007788:	8019      	strh	r1, [r3, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	4616      	mov	r6, r2
 8007790:	e7bc      	b.n	800770c <_printf_i+0x148>
 8007792:	6833      	ldr	r3, [r6, #0]
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	6032      	str	r2, [r6, #0]
 8007798:	681e      	ldr	r6, [r3, #0]
 800779a:	6862      	ldr	r2, [r4, #4]
 800779c:	2100      	movs	r1, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	f7f8 fd46 	bl	8000230 <memchr>
 80077a4:	b108      	cbz	r0, 80077aa <_printf_i+0x1e6>
 80077a6:	1b80      	subs	r0, r0, r6
 80077a8:	6060      	str	r0, [r4, #4]
 80077aa:	6863      	ldr	r3, [r4, #4]
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	2300      	movs	r3, #0
 80077b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b4:	e7aa      	b.n	800770c <_printf_i+0x148>
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	4632      	mov	r2, r6
 80077ba:	4649      	mov	r1, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	47d0      	blx	sl
 80077c0:	3001      	adds	r0, #1
 80077c2:	d0ad      	beq.n	8007720 <_printf_i+0x15c>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	079b      	lsls	r3, r3, #30
 80077c8:	d413      	bmi.n	80077f2 <_printf_i+0x22e>
 80077ca:	68e0      	ldr	r0, [r4, #12]
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	4298      	cmp	r0, r3
 80077d0:	bfb8      	it	lt
 80077d2:	4618      	movlt	r0, r3
 80077d4:	e7a6      	b.n	8007724 <_printf_i+0x160>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4632      	mov	r2, r6
 80077da:	4649      	mov	r1, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	47d0      	blx	sl
 80077e0:	3001      	adds	r0, #1
 80077e2:	d09d      	beq.n	8007720 <_printf_i+0x15c>
 80077e4:	3501      	adds	r5, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	9903      	ldr	r1, [sp, #12]
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	dcf2      	bgt.n	80077d6 <_printf_i+0x212>
 80077f0:	e7eb      	b.n	80077ca <_printf_i+0x206>
 80077f2:	2500      	movs	r5, #0
 80077f4:	f104 0619 	add.w	r6, r4, #25
 80077f8:	e7f5      	b.n	80077e6 <_printf_i+0x222>
 80077fa:	bf00      	nop
 80077fc:	08007e45 	.word	0x08007e45
 8007800:	08007e56 	.word	0x08007e56

08007804 <__sflush_r>:
 8007804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800780c:	0716      	lsls	r6, r2, #28
 800780e:	4605      	mov	r5, r0
 8007810:	460c      	mov	r4, r1
 8007812:	d454      	bmi.n	80078be <__sflush_r+0xba>
 8007814:	684b      	ldr	r3, [r1, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dc02      	bgt.n	8007820 <__sflush_r+0x1c>
 800781a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	dd48      	ble.n	80078b2 <__sflush_r+0xae>
 8007820:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007822:	2e00      	cmp	r6, #0
 8007824:	d045      	beq.n	80078b2 <__sflush_r+0xae>
 8007826:	2300      	movs	r3, #0
 8007828:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800782c:	682f      	ldr	r7, [r5, #0]
 800782e:	6a21      	ldr	r1, [r4, #32]
 8007830:	602b      	str	r3, [r5, #0]
 8007832:	d030      	beq.n	8007896 <__sflush_r+0x92>
 8007834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	0759      	lsls	r1, r3, #29
 800783a:	d505      	bpl.n	8007848 <__sflush_r+0x44>
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007842:	b10b      	cbz	r3, 8007848 <__sflush_r+0x44>
 8007844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	2300      	movs	r3, #0
 800784a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800784c:	6a21      	ldr	r1, [r4, #32]
 800784e:	4628      	mov	r0, r5
 8007850:	47b0      	blx	r6
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	d106      	bne.n	8007866 <__sflush_r+0x62>
 8007858:	6829      	ldr	r1, [r5, #0]
 800785a:	291d      	cmp	r1, #29
 800785c:	d82b      	bhi.n	80078b6 <__sflush_r+0xb2>
 800785e:	4a2a      	ldr	r2, [pc, #168]	@ (8007908 <__sflush_r+0x104>)
 8007860:	410a      	asrs	r2, r1
 8007862:	07d6      	lsls	r6, r2, #31
 8007864:	d427      	bmi.n	80078b6 <__sflush_r+0xb2>
 8007866:	2200      	movs	r2, #0
 8007868:	6062      	str	r2, [r4, #4]
 800786a:	04d9      	lsls	r1, r3, #19
 800786c:	6922      	ldr	r2, [r4, #16]
 800786e:	6022      	str	r2, [r4, #0]
 8007870:	d504      	bpl.n	800787c <__sflush_r+0x78>
 8007872:	1c42      	adds	r2, r0, #1
 8007874:	d101      	bne.n	800787a <__sflush_r+0x76>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b903      	cbnz	r3, 800787c <__sflush_r+0x78>
 800787a:	6560      	str	r0, [r4, #84]	@ 0x54
 800787c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800787e:	602f      	str	r7, [r5, #0]
 8007880:	b1b9      	cbz	r1, 80078b2 <__sflush_r+0xae>
 8007882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007886:	4299      	cmp	r1, r3
 8007888:	d002      	beq.n	8007890 <__sflush_r+0x8c>
 800788a:	4628      	mov	r0, r5
 800788c:	f7ff fb48 	bl	8006f20 <_free_r>
 8007890:	2300      	movs	r3, #0
 8007892:	6363      	str	r3, [r4, #52]	@ 0x34
 8007894:	e00d      	b.n	80078b2 <__sflush_r+0xae>
 8007896:	2301      	movs	r3, #1
 8007898:	4628      	mov	r0, r5
 800789a:	47b0      	blx	r6
 800789c:	4602      	mov	r2, r0
 800789e:	1c50      	adds	r0, r2, #1
 80078a0:	d1c9      	bne.n	8007836 <__sflush_r+0x32>
 80078a2:	682b      	ldr	r3, [r5, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0c6      	beq.n	8007836 <__sflush_r+0x32>
 80078a8:	2b1d      	cmp	r3, #29
 80078aa:	d001      	beq.n	80078b0 <__sflush_r+0xac>
 80078ac:	2b16      	cmp	r3, #22
 80078ae:	d11e      	bne.n	80078ee <__sflush_r+0xea>
 80078b0:	602f      	str	r7, [r5, #0]
 80078b2:	2000      	movs	r0, #0
 80078b4:	e022      	b.n	80078fc <__sflush_r+0xf8>
 80078b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ba:	b21b      	sxth	r3, r3
 80078bc:	e01b      	b.n	80078f6 <__sflush_r+0xf2>
 80078be:	690f      	ldr	r7, [r1, #16]
 80078c0:	2f00      	cmp	r7, #0
 80078c2:	d0f6      	beq.n	80078b2 <__sflush_r+0xae>
 80078c4:	0793      	lsls	r3, r2, #30
 80078c6:	680e      	ldr	r6, [r1, #0]
 80078c8:	bf08      	it	eq
 80078ca:	694b      	ldreq	r3, [r1, #20]
 80078cc:	600f      	str	r7, [r1, #0]
 80078ce:	bf18      	it	ne
 80078d0:	2300      	movne	r3, #0
 80078d2:	eba6 0807 	sub.w	r8, r6, r7
 80078d6:	608b      	str	r3, [r1, #8]
 80078d8:	f1b8 0f00 	cmp.w	r8, #0
 80078dc:	dde9      	ble.n	80078b2 <__sflush_r+0xae>
 80078de:	6a21      	ldr	r1, [r4, #32]
 80078e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078e2:	4643      	mov	r3, r8
 80078e4:	463a      	mov	r2, r7
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b0      	blx	r6
 80078ea:	2800      	cmp	r0, #0
 80078ec:	dc08      	bgt.n	8007900 <__sflush_r+0xfc>
 80078ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007900:	4407      	add	r7, r0
 8007902:	eba8 0800 	sub.w	r8, r8, r0
 8007906:	e7e7      	b.n	80078d8 <__sflush_r+0xd4>
 8007908:	dfbffffe 	.word	0xdfbffffe

0800790c <_fflush_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	690b      	ldr	r3, [r1, #16]
 8007910:	4605      	mov	r5, r0
 8007912:	460c      	mov	r4, r1
 8007914:	b913      	cbnz	r3, 800791c <_fflush_r+0x10>
 8007916:	2500      	movs	r5, #0
 8007918:	4628      	mov	r0, r5
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	b118      	cbz	r0, 8007926 <_fflush_r+0x1a>
 800791e:	6a03      	ldr	r3, [r0, #32]
 8007920:	b90b      	cbnz	r3, 8007926 <_fflush_r+0x1a>
 8007922:	f7ff f8d3 	bl	8006acc <__sinit>
 8007926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f3      	beq.n	8007916 <_fflush_r+0xa>
 800792e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d404      	bmi.n	800793e <_fflush_r+0x32>
 8007934:	0599      	lsls	r1, r3, #22
 8007936:	d402      	bmi.n	800793e <_fflush_r+0x32>
 8007938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800793a:	f7ff faee 	bl	8006f1a <__retarget_lock_acquire_recursive>
 800793e:	4628      	mov	r0, r5
 8007940:	4621      	mov	r1, r4
 8007942:	f7ff ff5f 	bl	8007804 <__sflush_r>
 8007946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007948:	07da      	lsls	r2, r3, #31
 800794a:	4605      	mov	r5, r0
 800794c:	d4e4      	bmi.n	8007918 <_fflush_r+0xc>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	059b      	lsls	r3, r3, #22
 8007952:	d4e1      	bmi.n	8007918 <_fflush_r+0xc>
 8007954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007956:	f7ff fae1 	bl	8006f1c <__retarget_lock_release_recursive>
 800795a:	e7dd      	b.n	8007918 <_fflush_r+0xc>

0800795c <__swhatbuf_r>:
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	460c      	mov	r4, r1
 8007960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007964:	2900      	cmp	r1, #0
 8007966:	b096      	sub	sp, #88	@ 0x58
 8007968:	4615      	mov	r5, r2
 800796a:	461e      	mov	r6, r3
 800796c:	da0d      	bge.n	800798a <__swhatbuf_r+0x2e>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007974:	f04f 0100 	mov.w	r1, #0
 8007978:	bf14      	ite	ne
 800797a:	2340      	movne	r3, #64	@ 0x40
 800797c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007980:	2000      	movs	r0, #0
 8007982:	6031      	str	r1, [r6, #0]
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	b016      	add	sp, #88	@ 0x58
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	466a      	mov	r2, sp
 800798c:	f000 f862 	bl	8007a54 <_fstat_r>
 8007990:	2800      	cmp	r0, #0
 8007992:	dbec      	blt.n	800796e <__swhatbuf_r+0x12>
 8007994:	9901      	ldr	r1, [sp, #4]
 8007996:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800799a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800799e:	4259      	negs	r1, r3
 80079a0:	4159      	adcs	r1, r3
 80079a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079a6:	e7eb      	b.n	8007980 <__swhatbuf_r+0x24>

080079a8 <__smakebuf_r>:
 80079a8:	898b      	ldrh	r3, [r1, #12]
 80079aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ac:	079d      	lsls	r5, r3, #30
 80079ae:	4606      	mov	r6, r0
 80079b0:	460c      	mov	r4, r1
 80079b2:	d507      	bpl.n	80079c4 <__smakebuf_r+0x1c>
 80079b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	2301      	movs	r3, #1
 80079be:	6163      	str	r3, [r4, #20]
 80079c0:	b003      	add	sp, #12
 80079c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c4:	ab01      	add	r3, sp, #4
 80079c6:	466a      	mov	r2, sp
 80079c8:	f7ff ffc8 	bl	800795c <__swhatbuf_r>
 80079cc:	9f00      	ldr	r7, [sp, #0]
 80079ce:	4605      	mov	r5, r0
 80079d0:	4639      	mov	r1, r7
 80079d2:	4630      	mov	r0, r6
 80079d4:	f7fe ff62 	bl	800689c <_malloc_r>
 80079d8:	b948      	cbnz	r0, 80079ee <__smakebuf_r+0x46>
 80079da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079de:	059a      	lsls	r2, r3, #22
 80079e0:	d4ee      	bmi.n	80079c0 <__smakebuf_r+0x18>
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	f043 0302 	orr.w	r3, r3, #2
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	e7e2      	b.n	80079b4 <__smakebuf_r+0xc>
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	6020      	str	r0, [r4, #0]
 80079f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079fe:	b15b      	cbz	r3, 8007a18 <__smakebuf_r+0x70>
 8007a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a04:	4630      	mov	r0, r6
 8007a06:	f000 f837 	bl	8007a78 <_isatty_r>
 8007a0a:	b128      	cbz	r0, 8007a18 <__smakebuf_r+0x70>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	431d      	orrs	r5, r3
 8007a1c:	81a5      	strh	r5, [r4, #12]
 8007a1e:	e7cf      	b.n	80079c0 <__smakebuf_r+0x18>

08007a20 <memmove>:
 8007a20:	4288      	cmp	r0, r1
 8007a22:	b510      	push	{r4, lr}
 8007a24:	eb01 0402 	add.w	r4, r1, r2
 8007a28:	d902      	bls.n	8007a30 <memmove+0x10>
 8007a2a:	4284      	cmp	r4, r0
 8007a2c:	4623      	mov	r3, r4
 8007a2e:	d807      	bhi.n	8007a40 <memmove+0x20>
 8007a30:	1e43      	subs	r3, r0, #1
 8007a32:	42a1      	cmp	r1, r4
 8007a34:	d008      	beq.n	8007a48 <memmove+0x28>
 8007a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a3e:	e7f8      	b.n	8007a32 <memmove+0x12>
 8007a40:	4402      	add	r2, r0
 8007a42:	4601      	mov	r1, r0
 8007a44:	428a      	cmp	r2, r1
 8007a46:	d100      	bne.n	8007a4a <memmove+0x2a>
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a52:	e7f7      	b.n	8007a44 <memmove+0x24>

08007a54 <_fstat_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d07      	ldr	r5, [pc, #28]	@ (8007a74 <_fstat_r+0x20>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	f7f9 f923 	bl	8000cac <_fstat>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d102      	bne.n	8007a70 <_fstat_r+0x1c>
 8007a6a:	682b      	ldr	r3, [r5, #0]
 8007a6c:	b103      	cbz	r3, 8007a70 <_fstat_r+0x1c>
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	bd38      	pop	{r3, r4, r5, pc}
 8007a72:	bf00      	nop
 8007a74:	20002310 	.word	0x20002310

08007a78 <_isatty_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d06      	ldr	r5, [pc, #24]	@ (8007a94 <_isatty_r+0x1c>)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	f7f9 f922 	bl	8000ccc <_isatty>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_isatty_r+0x1a>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_isatty_r+0x1a>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	20002310 	.word	0x20002310

08007a98 <memcpy>:
 8007a98:	440a      	add	r2, r1
 8007a9a:	4291      	cmp	r1, r2
 8007a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa0:	d100      	bne.n	8007aa4 <memcpy+0xc>
 8007aa2:	4770      	bx	lr
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	d1f9      	bne.n	8007aa6 <memcpy+0xe>
 8007ab2:	bd10      	pop	{r4, pc}

08007ab4 <_realloc_r>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	4680      	mov	r8, r0
 8007aba:	4615      	mov	r5, r2
 8007abc:	460c      	mov	r4, r1
 8007abe:	b921      	cbnz	r1, 8007aca <_realloc_r+0x16>
 8007ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	f7fe bee9 	b.w	800689c <_malloc_r>
 8007aca:	b92a      	cbnz	r2, 8007ad8 <_realloc_r+0x24>
 8007acc:	f7ff fa28 	bl	8006f20 <_free_r>
 8007ad0:	2400      	movs	r4, #0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	f000 f81a 	bl	8007b10 <_malloc_usable_size_r>
 8007adc:	4285      	cmp	r5, r0
 8007ade:	4606      	mov	r6, r0
 8007ae0:	d802      	bhi.n	8007ae8 <_realloc_r+0x34>
 8007ae2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ae6:	d8f4      	bhi.n	8007ad2 <_realloc_r+0x1e>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4640      	mov	r0, r8
 8007aec:	f7fe fed6 	bl	800689c <_malloc_r>
 8007af0:	4607      	mov	r7, r0
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d0ec      	beq.n	8007ad0 <_realloc_r+0x1c>
 8007af6:	42b5      	cmp	r5, r6
 8007af8:	462a      	mov	r2, r5
 8007afa:	4621      	mov	r1, r4
 8007afc:	bf28      	it	cs
 8007afe:	4632      	movcs	r2, r6
 8007b00:	f7ff ffca 	bl	8007a98 <memcpy>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4640      	mov	r0, r8
 8007b08:	f7ff fa0a 	bl	8006f20 <_free_r>
 8007b0c:	463c      	mov	r4, r7
 8007b0e:	e7e0      	b.n	8007ad2 <_realloc_r+0x1e>

08007b10 <_malloc_usable_size_r>:
 8007b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b14:	1f18      	subs	r0, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfbc      	itt	lt
 8007b1a:	580b      	ldrlt	r3, [r1, r0]
 8007b1c:	18c0      	addlt	r0, r0, r3
 8007b1e:	4770      	bx	lr

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
