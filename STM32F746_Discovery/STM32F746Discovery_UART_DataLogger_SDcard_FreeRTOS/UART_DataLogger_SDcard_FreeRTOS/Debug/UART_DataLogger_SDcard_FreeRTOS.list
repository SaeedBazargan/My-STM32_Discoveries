
UART_DataLogger_SDcard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008bc4  08008bc4  00009bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c38  08008c38  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c38  08008c38  00009c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c3c  08008c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008c40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000432c  20000060  08008ca0  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000438c  08008ca0  0000a38c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2a9  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040df  00000000  00000000  00026339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  0002a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e2  00000000  00000000  0002bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044df  00000000  00000000  0002cd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d604  00000000  00000000  000311f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe9b4  00000000  00000000  0004e7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d1b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062fc  00000000  00000000  0014d1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  001534f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008bac 	.word	0x08008bac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08008bac 	.word	0x08008bac

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000007c 	.word	0x2000007c
 8000530:	2000011c 	.word	0x2000011c

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fb8c 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f835 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f8e9 	bl	8000718 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000546:	f000 f897 	bl	8000678 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800054a:	f005 f939 	bl	80057c0 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800054e:	f000 f8b3 	bl	80006b8 <MX_USART6_UART_Init>
//  Create_File("MRL.txt");
//  sprintf(sd_buffer, "Hello MRL \n Hello Maryam \n");
//  Update_File("MRL.txt", sd_buffer);
//  Unmount_SD(SDPath);

  HAL_UART_Receive_IT(&huart6, &uart_rec, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4910      	ldr	r1, [pc, #64]	@ (8000598 <main+0x64>)
 8000556:	4811      	ldr	r0, [pc, #68]	@ (800059c <main+0x68>)
 8000558:	f003 fa0c 	bl	8003974 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  simpleSemaphore = xSemaphoreCreateBinary();
 800055c:	2203      	movs	r2, #3
 800055e:	2100      	movs	r1, #0
 8000560:	2001      	movs	r0, #1
 8000562:	f005 ff6a 	bl	800643a <xQueueGenericCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <main+0x6c>)
 800056a:	6013      	str	r3, [r2, #0]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 128);
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <main+0x70>)
 800056e:	1d3c      	adds	r4, r7, #4
 8000570:	461d      	mov	r5, r3
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fc06 	bl	8005d94 <osThreadCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <main+0x74>)
 800058c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058e:	f005 fbde 	bl	8005d4e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x5e>
 8000596:	bf00      	nop
 8000598:	20000430 	.word	0x20000430
 800059c:	200003a0 	.word	0x200003a0
 80005a0:	2000042c 	.word	0x2000042c
 80005a4:	08008bd0 	.word	0x08008bd0
 80005a8:	20000428 	.word	0x20000428

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f008 fa1a 	bl	80089f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xc4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a26      	ldr	r2, [pc, #152]	@ (8000670 <SystemClock_Config+0xc4>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <SystemClock_Config+0xc4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xc8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xc8>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xc8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000614:	230f      	movs	r3, #15
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000618:	23d8      	movs	r3, #216	@ 0xd8
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000620:	230f      	movs	r3, #15
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ff37 	bl	800149c <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000634:	f000 f910 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f9c4 	bl	80019e4 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000662:	f000 f8f9 	bl	8000858 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 800067e:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <MX_SDMMC1_SD_Init+0x3c>)
 8000680:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <MX_SDMMC1_SD_Init+0x38>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	2000031c 	.word	0x2000031c
 80006b4:	40012c00 	.word	0x40012c00

080006b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	@ (8000714 <MX_USART6_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_USART6_UART_Init+0x58>)
 80006fc:	f003 f8ec 	bl	80038d8 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f8a7 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200003a0 	.word	0x200003a0
 8000714:	40011400 	.word	0x40011400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_GPIO_Init+0x98>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_GPIO_Init+0x98>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_GPIO_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0d      	ldr	r2, [pc, #52]	@ (80007b0 <MX_GPIO_Init+0x98>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_GPIO_Init+0x98>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SDMMC1_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC1_Detect_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_Detect_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_GPIO_Init+0x9c>)
 80007a4:	f000 fcb6 	bl	8001114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020800 	.word	0x40020800

080007b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <HAL_UART_RxCpltCallback+0x24>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d104      	bne.n	80007d4 <HAL_UART_RxCpltCallback+0x1c>
	{
		osSemaphoreRelease(simpleSemaphore);
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_UART_RxCpltCallback+0x28>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 fb7a 	bl	8005ec8 <osSemaphoreRelease>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40011400 	.word	0x40011400
 80007e0:	2000042c 	.word	0x2000042c

080007e4 <StartMainTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartMainTask(void const * argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreWait(simpleSemaphore, osWaitForever);
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <StartMainTask+0x3c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fb19 	bl	8005e2c <osSemaphoreWait>
		HAL_UART_Receive_IT(&huart6, &uart_rec, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	4909      	ldr	r1, [pc, #36]	@ (8000824 <StartMainTask+0x40>)
 80007fe:	480a      	ldr	r0, [pc, #40]	@ (8000828 <StartMainTask+0x44>)
 8000800:	f003 f8b8 	bl	8003974 <HAL_UART_Receive_IT>
		uart_recBuffer[uart_recCount++] = uart_rec;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <StartMainTask+0x48>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	b2d1      	uxtb	r1, r2
 800080c:	4a07      	ldr	r2, [pc, #28]	@ (800082c <StartMainTask+0x48>)
 800080e:	7011      	strb	r1, [r2, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <StartMainTask+0x40>)
 8000814:	7819      	ldrb	r1, [r3, #0]
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <StartMainTask+0x4c>)
 8000818:	5499      	strb	r1, [r3, r2]
		osSemaphoreWait(simpleSemaphore, osWaitForever);
 800081a:	bf00      	nop
 800081c:	e7e6      	b.n	80007ec <StartMainTask+0x8>
 800081e:	bf00      	nop
 8000820:	2000042c 	.word	0x2000042c
 8000824:	20000430 	.word	0x20000430
 8000828:	200003a0 	.word	0x200003a0
 800082c:	20000431 	.word	0x20000431
 8000830:	20000434 	.word	0x20000434

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 fa13 	bl	8000c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40001000 	.word	0x40001000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	f06f 0001 	mvn.w	r0, #1
 80008a2:	f000 fae1 	bl	8000e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0ac      	sub	sp, #176	@ 0xb0
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	2284      	movs	r2, #132	@ 0x84
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f008 f88d 	bl	80089f4 <memset>
  if(hsd->Instance==SDMMC1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a34      	ldr	r2, [pc, #208]	@ (80009b0 <HAL_SD_MspInit+0xfc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d161      	bne.n	80009a8 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80008e4:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80008e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fa8a 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000906:	f7ff ffa7 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800090a:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a29      	ldr	r2, [pc, #164]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000910:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a1d      	ldr	r2, [pc, #116]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <HAL_SD_MspInit+0x100>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000952:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800096c:	230c      	movs	r3, #12
 800096e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	480f      	ldr	r0, [pc, #60]	@ (80009b8 <HAL_SD_MspInit+0x104>)
 800097a:	f000 fbcb 	bl	8001114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000996:	230c      	movs	r3, #12
 8000998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	@ (80009bc <HAL_SD_MspInit+0x108>)
 80009a4:	f000 fbb6 	bl	8001114 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80009a8:	bf00      	nop
 80009aa:	37b0      	adds	r7, #176	@ 0xb0
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0aa      	sub	sp, #168	@ 0xa8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2284      	movs	r2, #132	@ 0x84
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f008 f807 	bl	80089f4 <memset>
  if(huart->Instance==USART6)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <HAL_UART_MspInit+0xc0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d143      	bne.n	8000a78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80009f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80009f6:	2300      	movs	r3, #0
 80009f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fa08 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a0a:	f7ff ff25 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_UART_MspInit+0xc4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a3e:	23c0      	movs	r3, #192	@ 0xc0
 8000a40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a56:	2308      	movs	r3, #8
 8000a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a60:	4619      	mov	r1, r3
 8000a62:	4809      	ldr	r0, [pc, #36]	@ (8000a88 <HAL_UART_MspInit+0xc8>)
 8000a64:	f000 fb56 	bl	8001114 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	2047      	movs	r0, #71	@ 0x47
 8000a6e:	f000 f9fb 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a72:	2047      	movs	r0, #71	@ 0x47
 8000a74:	f000 fa14 	bl	8000ea0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8000a78:	bf00      	nop
 8000a7a:	37a8      	adds	r7, #168	@ 0xa8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40011400 	.word	0x40011400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	@ 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	4a32      	ldr	r2, [pc, #200]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa8:	4b30      	ldr	r3, [pc, #192]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab4:	f107 0210 	add.w	r2, r7, #16
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 f976 	bl	8001db0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d103      	bne.n	8000ad6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ace:	f001 f947 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000ad2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ad4:	e004      	b.n	8000ae0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ad6:	f001 f943 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000ada:	4603      	mov	r3, r0
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae2:	4a23      	ldr	r2, [pc, #140]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	0c9b      	lsrs	r3, r3, #18
 8000aea:	3b01      	subs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000af0:	4a21      	ldr	r2, [pc, #132]	@ (8000b78 <HAL_InitTick+0xec>)
 8000af2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000af6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000afa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000afc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b16:	f002 fc0b 	bl	8003330 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11b      	bne.n	8000b60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b28:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b2a:	f002 fc63 	bl	80033f4 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d111      	bne.n	8000b60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b3c:	2036      	movs	r0, #54	@ 0x36
 8000b3e:	f000 f9af 	bl	8000ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d808      	bhi.n	8000b5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2036      	movs	r0, #54	@ 0x36
 8000b4e:	f000 f98b 	bl	8000e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_InitTick+0xf0>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e002      	b.n	8000b60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3738      	adds	r7, #56	@ 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	431bde83 	.word	0x431bde83
 8000b74:	20000498 	.word	0x20000498
 8000b78:	40001000 	.word	0x40001000
 8000b7c:	20000004 	.word	0x20000004

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <TIM6_DAC_IRQHandler+0x10>)
 8000bbe:	f002 fc91 	bl	80034e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000498 	.word	0x20000498

08000bcc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <USART6_IRQHandler+0x10>)
 8000bd2:	f002 ff13 	bl	80039fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200003a0 	.word	0x200003a0

08000be0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	@ (8000c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f007 ff3d 	bl	8008ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fc7d 	bl	8000534 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c48:	08008c40 	.word	0x08008c40
  ldr r2, =_sbss
 8000c4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c50:	2000438c 	.word	0x2000438c

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>

08000c56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f8f9 	bl	8000e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c60:	200f      	movs	r0, #15
 8000c62:	f7ff ff13 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c66:	f7ff fdfd 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200004e4 	.word	0x200004e4

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200004e4 	.word	0x200004e4

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x40>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	05fa0000 	.word	0x05fa0000

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff4c 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7a:	f7ff ff61 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	6978      	ldr	r0, [r7, #20]
 8000e86:	f7ff ffb1 	bl	8000dec <NVIC_EncodePriority>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff80 	bl	8000d98 <__NVIC_SetPriority>
}
 8000e98:	bf00      	nop
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff54 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Start_IT+0x26>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e048      	b.n	8000f74 <HAL_DMA_Start_IT+0xb8>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d137      	bne.n	8000f66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2202      	movs	r2, #2
 8000efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f000 f8d4 	bl	80010b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f14:	223f      	movs	r2, #63	@ 0x3f
 8000f16:	409a      	lsls	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0216 	orr.w	r2, r2, #22
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f3a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0208 	orr.w	r2, r2, #8
 8000f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e005      	b.n	8000f72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f8a:	f7ff fe85 	bl	8000c98 <HAL_GetTick>
 8000f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e052      	b.n	8001054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0216 	bic.w	r2, r2, #22
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <HAL_DMA_Abort+0x62>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0208 	bic.w	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ffe:	e013      	b.n	8001028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001000:	f7ff fe4a 	bl	8000c98 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b05      	cmp	r3, #5
 800100c:	d90c      	bls.n	8001028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2220      	movs	r2, #32
 8001012:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e015      	b.n	8001054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1e4      	bne.n	8001000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800103a:	223f      	movs	r2, #63	@ 0x3f
 800103c:	409a      	lsls	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d004      	beq.n	800107a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00c      	b.n	8001094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0201 	bic.w	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80010d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b40      	cmp	r3, #64	@ 0x40
 80010e4:	d108      	bne.n	80010f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80010f6:	e007      	b.n	8001108 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e175      	b.n	8001420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8164 	bne.w	800141a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x56>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80be 	beq.w	800141a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b66      	ldr	r3, [pc, #408]	@ (8001438 <HAL_GPIO_Init+0x324>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	4a65      	ldr	r2, [pc, #404]	@ (8001438 <HAL_GPIO_Init+0x324>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012aa:	4b63      	ldr	r3, [pc, #396]	@ (8001438 <HAL_GPIO_Init+0x324>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012b6:	4a61      	ldr	r2, [pc, #388]	@ (800143c <HAL_GPIO_Init+0x328>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a58      	ldr	r2, [pc, #352]	@ (8001440 <HAL_GPIO_Init+0x32c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d037      	beq.n	8001352 <HAL_GPIO_Init+0x23e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a57      	ldr	r2, [pc, #348]	@ (8001444 <HAL_GPIO_Init+0x330>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d031      	beq.n	800134e <HAL_GPIO_Init+0x23a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a56      	ldr	r2, [pc, #344]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x236>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a55      	ldr	r2, [pc, #340]	@ (800144c <HAL_GPIO_Init+0x338>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x232>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a54      	ldr	r2, [pc, #336]	@ (8001450 <HAL_GPIO_Init+0x33c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x22e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a53      	ldr	r2, [pc, #332]	@ (8001454 <HAL_GPIO_Init+0x340>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x22a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	@ (8001458 <HAL_GPIO_Init+0x344>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	@ (800145c <HAL_GPIO_Init+0x348>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	@ (8001460 <HAL_GPIO_Init+0x34c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	@ (8001464 <HAL_GPIO_Init+0x350>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x21a>
 800132a:	2309      	movs	r3, #9
 800132c:	e012      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800132e:	230a      	movs	r3, #10
 8001330:	e010      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001332:	2308      	movs	r3, #8
 8001334:	e00e      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001336:	2307      	movs	r3, #7
 8001338:	e00c      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800133a:	2306      	movs	r3, #6
 800133c:	e00a      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800133e:	2305      	movs	r3, #5
 8001340:	e008      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001342:	2304      	movs	r3, #4
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001346:	2303      	movs	r3, #3
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001352:	2300      	movs	r3, #0
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f002 0203 	and.w	r2, r2, #3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	@ (800143c <HAL_GPIO_Init+0x328>)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <HAL_GPIO_Init+0x354>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001396:	4a34      	ldr	r2, [pc, #208]	@ (8001468 <HAL_GPIO_Init+0x354>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <HAL_GPIO_Init+0x354>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c0:	4a29      	ldr	r2, [pc, #164]	@ (8001468 <HAL_GPIO_Init+0x354>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <HAL_GPIO_Init+0x354>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_GPIO_Init+0x354>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001414:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f67f ae86 	bls.w	8001134 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40021400 	.word	0x40021400
 8001458:	40021800 	.word	0x40021800
 800145c:	40021c00 	.word	0x40021c00
 8001460:	40022000 	.word	0x40022000
 8001464:	40022400 	.word	0x40022400
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e001      	b.n	800148e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e291      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8087 	beq.w	80015ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c0:	4b96      	ldr	r3, [pc, #600]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d00c      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014cc:	4b93      	ldr	r3, [pc, #588]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d112      	bne.n	80014fe <HAL_RCC_OscConfig+0x62>
 80014d8:	4b90      	ldr	r3, [pc, #576]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014e4:	d10b      	bne.n	80014fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	4b8d      	ldr	r3, [pc, #564]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d06c      	beq.n	80015cc <HAL_RCC_OscConfig+0x130>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d168      	bne.n	80015cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e26b      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x7a>
 8001508:	4b84      	ldr	r3, [pc, #528]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a83      	ldr	r2, [pc, #524]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e02e      	b.n	8001574 <HAL_RCC_OscConfig+0xd8>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x9c>
 800151e:	4b7f      	ldr	r3, [pc, #508]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a7e      	ldr	r2, [pc, #504]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b7c      	ldr	r3, [pc, #496]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7b      	ldr	r2, [pc, #492]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xd8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0xc0>
 8001542:	4b76      	ldr	r3, [pc, #472]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a75      	ldr	r2, [pc, #468]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b73      	ldr	r3, [pc, #460]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xd8>
 800155c:	4b6f      	ldr	r3, [pc, #444]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6e      	ldr	r2, [pc, #440]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b6c      	ldr	r3, [pc, #432]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6b      	ldr	r2, [pc, #428]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb8c 	bl	8000c98 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb88 	bl	8000c98 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e21f      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b61      	ldr	r3, [pc, #388]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xe8>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb78 	bl	8000c98 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fb74 	bl	8000c98 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e20b      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b57      	ldr	r3, [pc, #348]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x110>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d069      	beq.n	80016ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	4b50      	ldr	r3, [pc, #320]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x190>
 80015f2:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b47      	ldr	r3, [pc, #284]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x17a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1df      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	493d      	ldr	r1, [pc, #244]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e040      	b.n	80016ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a38      	ldr	r2, [pc, #224]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fb2a 	bl	8000c98 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fb26 	bl	8000c98 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1bd      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b30      	ldr	r3, [pc, #192]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4929      	ldr	r1, [pc, #164]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
 800167a:	e018      	b.n	80016ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a26      	ldr	r2, [pc, #152]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb06 	bl	8000c98 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fb02 	bl	8000c98 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e199      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d038      	beq.n	800172c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff fae3 	bl	8000c98 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff fadf 	bl	8000c98 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e176      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80016ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x23a>
 80016f4:	e01a      	b.n	800172c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80016f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016fa:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_RCC_OscConfig+0x280>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fac9 	bl	8000c98 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fac5 	bl	8000c98 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d903      	bls.n	8001720 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e15c      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
 800171c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b91      	ldr	r3, [pc, #580]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a4 	beq.w	8001882 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b8b      	ldr	r3, [pc, #556]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a87      	ldr	r2, [pc, #540]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b85      	ldr	r3, [pc, #532]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001762:	4b82      	ldr	r3, [pc, #520]	@ (800196c <HAL_RCC_OscConfig+0x4d0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800176e:	4b7f      	ldr	r3, [pc, #508]	@ (800196c <HAL_RCC_OscConfig+0x4d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7e      	ldr	r2, [pc, #504]	@ (800196c <HAL_RCC_OscConfig+0x4d0>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fa8d 	bl	8000c98 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fa89 	bl	8000c98 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	@ 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e120      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001794:	4b75      	ldr	r3, [pc, #468]	@ (800196c <HAL_RCC_OscConfig+0x4d0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x31a>
 80017a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b4:	e02d      	b.n	8001812 <HAL_RCC_OscConfig+0x376>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x33c>
 80017be:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	4a69      	ldr	r2, [pc, #420]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d6:	e01c      	b.n	8001812 <HAL_RCC_OscConfig+0x376>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x35e>
 80017e0:	4b61      	ldr	r3, [pc, #388]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e4:	4a60      	ldr	r2, [pc, #384]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x376>
 80017fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	@ 0x70
 8001806:	4b58      	ldr	r3, [pc, #352]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	4a57      	ldr	r2, [pc, #348]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa3d 	bl	8000c98 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa39 	bl	8000c98 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0ce      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ee      	beq.n	8001822 <HAL_RCC_OscConfig+0x386>
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa27 	bl	8000c98 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fa23 	bl	8000c98 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d105      	bne.n	8001882 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b3c      	ldr	r3, [pc, #240]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a3b      	ldr	r2, [pc, #236]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a4 	beq.w	80019d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d06b      	beq.n	8001970 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d149      	bne.n	8001934 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b31      	ldr	r3, [pc, #196]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80018a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f9f4 	bl	8000c98 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f9f0 	bl	8000c98 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e087      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	3b01      	subs	r3, #1
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	4313      	orrs	r3, r2
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80018fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a18      	ldr	r2, [pc, #96]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff f9c4 	bl	8000c98 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f9c0 	bl	8000c98 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e057      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x478>
 8001932:	e04f      	b.n	80019d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f9aa 	bl	8000c98 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f9a6 	bl	8000c98 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e03d      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x4ac>
 8001966:	e035      	b.n	80019d4 <HAL_RCC_OscConfig+0x538>
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_RCC_OscConfig+0x544>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d028      	beq.n	80019d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d121      	bne.n	80019d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d11a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d111      	bne.n	80019d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	3b01      	subs	r3, #1
 80019ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d0      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d910      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 020f 	bic.w	r2, r3, #15
 8001a12:	4965      	ldr	r1, [pc, #404]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d040      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d115      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e073      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4936      	ldr	r1, [pc, #216]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f8de 	bl	8000c98 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f8da 	bl	8000c98 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e053      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d210      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4922      	ldr	r1, [pc, #136]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1d4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ff78 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08008c04 	.word	0x08008c04
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b090      	sub	sp, #64	@ 0x40
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc8:	2300      	movs	r3, #0
 8001bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd4:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d00d      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	f200 80a1 	bhi.w	8001d28 <HAL_RCC_GetSysClockFreq+0x16c>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bee:	e09b      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bf4:	e09b      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b53      	ldr	r3, [pc, #332]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bfa:	e098      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c06:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d028      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c24:	2100      	movs	r1, #0
 8001c26:	4b47      	ldr	r3, [pc, #284]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c28:	fb03 f201 	mul.w	r2, r3, r1
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	fb00 f303 	mul.w	r3, r0, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	4a43      	ldr	r2, [pc, #268]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c36:	fba0 1202 	umull	r1, r2, r0, r2
 8001c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c42:	4413      	add	r3, r2
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	61fa      	str	r2, [r7, #28]
 8001c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c56:	f7fe fadb 	bl	8000210 <__aeabi_uldivmod>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4613      	mov	r3, r2
 8001c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c62:	e053      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	617a      	str	r2, [r7, #20]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c76:	f04f 0b00 	mov.w	fp, #0
 8001c7a:	4652      	mov	r2, sl
 8001c7c:	465b      	mov	r3, fp
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	ebb2 080a 	subs.w	r8, r2, sl
 8001c96:	eb63 090b 	sbc.w	r9, r3, fp
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ca6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001caa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cae:	ebb2 0408 	subs.w	r4, r2, r8
 8001cb2:	eb63 0509 	sbc.w	r5, r3, r9
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	00eb      	lsls	r3, r5, #3
 8001cc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc4:	00e2      	lsls	r2, r4, #3
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
 8001cca:	eb14 030a 	adds.w	r3, r4, sl
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	eb45 030b 	adc.w	r3, r5, fp
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	028b      	lsls	r3, r1, #10
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cec:	4621      	mov	r1, r4
 8001cee:	028a      	lsls	r2, r1, #10
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	60fa      	str	r2, [r7, #12]
 8001cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d00:	f7fe fa86 	bl	8000210 <__aeabi_uldivmod>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	3301      	adds	r3, #1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d26:	e002      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3740      	adds	r7, #64	@ 0x40
 8001d34:	46bd      	mov	sp, r7
 8001d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	017d7840 	.word	0x017d7840

08001d48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08008c14 	.word	0x08008c14

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffdc 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08008c14 	.word	0x08008c14

08001db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001df2:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <HAL_RCC_GetClockConfig+0x60>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d012      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e3c:	4b69      	ldr	r3, [pc, #420]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a68      	ldr	r2, [pc, #416]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e46:	6093      	str	r3, [r2, #8]
 8001e48:	4b66      	ldr	r3, [pc, #408]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	4964      	ldr	r1, [pc, #400]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d017      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7c:	4959      	ldr	r1, [pc, #356]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d017      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	494a      	ldr	r1, [pc, #296]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ec8:	d101      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 808b 	beq.w	800200e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	4a39      	ldr	r2, [pc, #228]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f04:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f10:	4b35      	ldr	r3, [pc, #212]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a34      	ldr	r2, [pc, #208]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1c:	f7fe febc 	bl	8000c98 <HAL_GetTick>
 8001f20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f24:	f7fe feb8 	bl	8000c98 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e357      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f36:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f42:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d035      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d02e      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f60:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f82:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d114      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe fe80 	bl	8000c98 <HAL_GetTick>
 8001f98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fe7c 	bl	8000c98 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e319      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ee      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001fca:	d111      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fda:	400b      	ands	r3, r1
 8001fdc:	4901      	ldr	r1, [pc, #4]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	0ffffcff 	.word	0x0ffffcff
 8001ff0:	4baa      	ldr	r3, [pc, #680]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4aa9      	ldr	r2, [pc, #676]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ffa:	6093      	str	r3, [r2, #8]
 8001ffc:	4ba7      	ldr	r3, [pc, #668]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	49a4      	ldr	r1, [pc, #656]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200a:	4313      	orrs	r3, r2
 800200c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800201a:	4ba0      	ldr	r3, [pc, #640]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002020:	4a9e      	ldr	r2, [pc, #632]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002026:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800202a:	4b9c      	ldr	r3, [pc, #624]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002034:	4999      	ldr	r1, [pc, #612]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002048:	4b94      	ldr	r3, [pc, #592]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002056:	4991      	ldr	r1, [pc, #580]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800206a:	4b8c      	ldr	r3, [pc, #560]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002078:	4988      	ldr	r1, [pc, #544]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800208c:	4b83      	ldr	r3, [pc, #524]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209a:	4980      	ldr	r1, [pc, #512]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020ae:	4b7b      	ldr	r3, [pc, #492]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020bc:	4977      	ldr	r1, [pc, #476]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d0:	4b72      	ldr	r3, [pc, #456]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	496f      	ldr	r1, [pc, #444]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f2:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f8:	f023 020c 	bic.w	r2, r3, #12
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002100:	4966      	ldr	r1, [pc, #408]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002114:	4b61      	ldr	r3, [pc, #388]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	495e      	ldr	r1, [pc, #376]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002136:	4b59      	ldr	r3, [pc, #356]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002144:	4955      	ldr	r1, [pc, #340]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002158:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002166:	494d      	ldr	r1, [pc, #308]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800217a:	4b48      	ldr	r3, [pc, #288]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002180:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	4944      	ldr	r1, [pc, #272]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800219c:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	493c      	ldr	r1, [pc, #240]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021be:	4b37      	ldr	r3, [pc, #220]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021cc:	4933      	ldr	r1, [pc, #204]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021e0:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ee:	492b      	ldr	r1, [pc, #172]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d011      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002202:	4b26      	ldr	r3, [pc, #152]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002208:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002210:	4922      	ldr	r1, [pc, #136]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800221c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002220:	d101      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002248:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002250:	4912      	ldr	r1, [pc, #72]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002264:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002274:	4909      	ldr	r1, [pc, #36]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d006      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d9 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002290:	4b02      	ldr	r3, [pc, #8]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a01      	ldr	r2, [pc, #4]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800229a:	e001      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800229c:	40023800 	.word	0x40023800
 80022a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a2:	f7fe fcf9 	bl	8000c98 <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022aa:	f7fe fcf5 	bl	8000c98 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	@ 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e194      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11d      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022dc:	4b64      	ldr	r3, [pc, #400]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022ea:	4b61      	ldr	r3, [pc, #388]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022f0:	0e1b      	lsrs	r3, r3, #24
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	019a      	lsls	r2, r3, #6
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	071b      	lsls	r3, r3, #28
 8002310:	4957      	ldr	r1, [pc, #348]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02e      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002342:	d129      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002344:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002358:	0f1b      	lsrs	r3, r3, #28
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	019a      	lsls	r2, r3, #6
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	431a      	orrs	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	071b      	lsls	r3, r3, #28
 8002378:	493d      	ldr	r1, [pc, #244]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002380:	4b3b      	ldr	r3, [pc, #236]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002386:	f023 021f 	bic.w	r2, r3, #31
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	4937      	ldr	r1, [pc, #220]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01d      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023a4:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023aa:	0e1b      	lsrs	r3, r3, #24
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b8:	0f1b      	lsrs	r3, r3, #28
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	019a      	lsls	r2, r3, #6
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	431a      	orrs	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	431a      	orrs	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	071b      	lsls	r3, r3, #28
 80023d8:	4925      	ldr	r1, [pc, #148]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d011      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	019a      	lsls	r2, r3, #6
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	071b      	lsls	r3, r3, #28
 8002408:	4919      	ldr	r1, [pc, #100]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a16      	ldr	r2, [pc, #88]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800241a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7fe fc3c 	bl	8000c98 <HAL_GetTick>
 8002420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002424:	f7fe fc38 	bl	8000c98 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0d7      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002436:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 80cd 	bne.w	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002456:	f7fe fc1f 	bl	8000c98 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800245e:	f7fe fc1b 	bl	8000c98 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	@ 0x64
 800246a:	d903      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0ba      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002474:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002480:	d0ed      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d02e      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d12a      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024aa:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	0f1b      	lsrs	r3, r3, #28
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	019a      	lsls	r2, r3, #6
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	431a      	orrs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	071b      	lsls	r3, r3, #28
 80024de:	4944      	ldr	r1, [pc, #272]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024e6:	4b42      	ldr	r3, [pc, #264]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	493d      	ldr	r1, [pc, #244]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d022      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002514:	d11d      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002516:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	0e1b      	lsrs	r3, r3, #24
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002524:	4b32      	ldr	r3, [pc, #200]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	0f1b      	lsrs	r3, r3, #28
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	019a      	lsls	r2, r3, #6
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	4929      	ldr	r1, [pc, #164]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d028      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	0e1b      	lsrs	r3, r3, #24
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800256c:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002572:	0c1b      	lsrs	r3, r3, #16
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	019a      	lsls	r2, r3, #6
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	431a      	orrs	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	071b      	lsls	r3, r3, #28
 8002592:	4917      	ldr	r1, [pc, #92]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	4911      	ldr	r1, [pc, #68]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025b0:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe fb6c 	bl	8000c98 <HAL_GetTick>
 80025c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c4:	f7fe fb68 	bl	8000c98 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e007      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e2:	d1ef      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e022      	b.n	800264c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe f94b 	bl	80008b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f814 	bl	8002654 <HAL_SD_InitCard>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00a      	b.n	800264c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	b08e      	sub	sp, #56	@ 0x38
 8002658:	af04      	add	r7, sp, #16
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002670:	2376      	movs	r3, #118	@ 0x76
 8002672:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681d      	ldr	r5, [r3, #0]
 8002678:	466c      	mov	r4, sp
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268c:	4628      	mov	r0, r5
 800268e:	f002 fb83 	bl	8004d98 <SDMMC_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e059      	b.n	8002758 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 fb99 	bl	8004df0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026cc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7fe faee 	bl	8000cb0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fd75 	bl	80031c4 <SD_PowerON>
 80026da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e02e      	b.n	8002758 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fc94 	bl	8003028 <SD_InitCard>
 8002700:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e01b      	b.n	8002758 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fbf3 	bl	8004f14 <SDMMC_CmdBlockLength>
 800272e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00f      	beq.n	8002756 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_SD_InitCard+0x10c>)
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3728      	adds	r7, #40	@ 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bdb0      	pop	{r4, r5, r7, pc}
 8002760:	004005ff 	.word	0x004005ff

08002764 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	@ 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0c3      	b.n	8002914 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	f040 80bc 	bne.w	8002912 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	441a      	add	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d907      	bls.n	80027be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0aa      	b.n	8002914 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80027dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	4a4e      	ldr	r2, [pc, #312]	@ (800291c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80027e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002920 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80027ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2200      	movs	r2, #0
 80027f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3380      	adds	r3, #128	@ 0x80
 8002824:	4619      	mov	r1, r3
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	f7fe fb45 	bl	8000ebc <HAL_DMA_Start_IT>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d017      	beq.n	8002868 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8002846:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a35      	ldr	r2, [pc, #212]	@ (8002924 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800284e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e055      	b.n	8002914 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0208 	orr.w	r2, r2, #8
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	2b01      	cmp	r3, #1
 800287e:	d002      	beq.n	8002886 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	025b      	lsls	r3, r3, #9
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002892:	2390      	movs	r3, #144	@ 0x90
 8002894:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002896:	2302      	movs	r3, #2
 8002898:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f107 0210 	add.w	r2, r7, #16
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 fb05 	bl	8004ebc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d90a      	bls.n	80028ce <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2282      	movs	r2, #130	@ 0x82
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 fb69 	bl	8004f9c <SDMMC_CmdReadMultiBlock>
 80028ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80028cc:	e009      	b.n	80028e2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2281      	movs	r2, #129	@ 0x81
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fb3c 	bl	8004f58 <SDMMC_CmdReadSingleBlock>
 80028e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80028ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e002      	b.n	8002914 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3730      	adds	r7, #48	@ 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	08002f13 	.word	0x08002f13
 8002920:	08002f85 	.word	0x08002f85
 8002924:	004005ff 	.word	0x004005ff

08002928 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	@ 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0c6      	b.n	8002ade <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 80bf 	bne.w	8002adc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	429a      	cmp	r2, r3
 8002970:	d907      	bls.n	8002982 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0ad      	b.n	8002ade <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2203      	movs	r2, #3
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 021a 	orr.w	r2, r2, #26
 80029a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	4a50      	ldr	r2, [pc, #320]	@ (8002ae8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80029a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	4a4f      	ldr	r2, [pc, #316]	@ (8002aec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80029b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b6:	2200      	movs	r2, #0
 80029b8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d002      	beq.n	80029c8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d90a      	bls.n	80029e4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	22a0      	movs	r2, #160	@ 0xa0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fb22 	bl	8005024 <SDMMC_CmdWriteMultiBlock>
 80029e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80029e2:	e009      	b.n	80029f8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2290      	movs	r2, #144	@ 0x90
 80029e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 faf5 	bl	8004fe0 <SDMMC_CmdWriteSingleBlock>
 80029f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80029f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d012      	beq.n	8002a24 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3b      	ldr	r2, [pc, #236]	@ (8002af0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002a04:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e05c      	b.n	8002ade <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0208 	orr.w	r2, r2, #8
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	2240      	movs	r2, #64	@ 0x40
 8002a3a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3380      	adds	r3, #128	@ 0x80
 8002a64:	461a      	mov	r2, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	025b      	lsls	r3, r3, #9
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	f7fe fa26 	bl	8000ebc <HAL_DMA_Start_IT>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01a      	beq.n	8002aac <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 021a 	bic.w	r2, r2, #26
 8002a84:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e018      	b.n	8002ade <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002ab8:	2390      	movs	r3, #144	@ 0x90
 8002aba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f107 0210 	add.w	r2, r7, #16
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 f9f2 	bl	8004ebc <SDMMC_ConfigData>

      return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3730      	adds	r7, #48	@ 0x30
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08002ee9 	.word	0x08002ee9
 8002aec:	08002f85 	.word	0x08002f85
 8002af0:	004005ff 	.word	0x004005ff

08002af4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b16:	0f9b      	lsrs	r3, r3, #30
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b34:	0e1b      	lsrs	r3, r3, #24
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b68:	0d1b      	lsrs	r3, r3, #20
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b86:	0bdb      	lsrs	r3, r3, #15
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b98:	0b9b      	lsrs	r3, r3, #14
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002baa:	0b5b      	lsrs	r3, r3, #13
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bbc:	0b1b      	lsrs	r3, r3, #12
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d163      	bne.n	8002ca0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bdc:	009a      	lsls	r2, r3, #2
 8002bde:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002be2:	4013      	ands	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002be8:	0f92      	lsrs	r2, r2, #30
 8002bea:	431a      	orrs	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf4:	0edb      	lsrs	r3, r3, #27
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c06:	0e1b      	lsrs	r3, r3, #24
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c18:	0d5b      	lsrs	r3, r3, #21
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c3c:	0bdb      	lsrs	r3, r3, #15
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	3302      	adds	r3, #2
 8002c60:	2201      	movs	r2, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002c6a:	fb03 f202 	mul.w	r2, r3, r2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	7a1b      	ldrb	r3, [r3, #8]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002c8c:	0a52      	lsrs	r2, r2, #9
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c9e:	e031      	b.n	8002d04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d11d      	bne.n	8002ce4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb6:	0c1b      	lsrs	r3, r3, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	029a      	lsls	r2, r3, #10
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ce2:	e00f      	b.n	8002d04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	@ (8002e4c <HAL_SD_GetCardCSD+0x344>)
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e09d      	b.n	8002e40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d08:	0b9b      	lsrs	r3, r3, #14
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d1a:	09db      	lsrs	r3, r3, #7
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	0fdb      	lsrs	r3, r3, #31
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	0f5b      	lsrs	r3, r3, #29
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	0d9b      	lsrs	r3, r3, #22
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	0d5b      	lsrs	r3, r3, #21
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	0bdb      	lsrs	r3, r3, #15
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc2:	0b9b      	lsrs	r3, r3, #14
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	0b5b      	lsrs	r3, r3, #13
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	0b1b      	lsrs	r3, r3, #12
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	004005ff 	.word	0x004005ff

08002e50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa10 	bl	80032e0 <SD_SendStatus>
 8002ec0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002ede:	693b      	ldr	r3, [r7, #16]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f04:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	2b82      	cmp	r3, #130	@ 0x82
 8002f26:	d111      	bne.n	8002f4c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 f89b 	bl	8005068 <SDMMC_CmdStopTransfer>
 8002f32:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff fdd4 	bl	8002af4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0208 	bic.w	r2, r2, #8
 8002f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002f64:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f002 fc9f 	bl	80058b8 <HAL_SD_RxCpltCallback>
#endif
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f90:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe f884 	bl	80010a0 <HAL_DMA_GetError>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d03e      	beq.n	800301c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d002      	beq.n	8002fba <SD_DMAError+0x36>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d12d      	bne.n	8003016 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <SD_DMAError+0xa0>)
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f7ff ff62 	bl	8002ea8 <HAL_SD_GetCardState>
 8002fe4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d002      	beq.n	8002ff2 <SD_DMAError+0x6e>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10a      	bne.n	8003008 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 f836 	bl	8005068 <SDMMC_CmdStopTransfer>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	431a      	orrs	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff fd6c 	bl	8002af4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	004005ff 	.word	0x004005ff

08003028 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b094      	sub	sp, #80	@ 0x50
 800302c:	af04      	add	r7, sp, #16
 800302e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003030:	2301      	movs	r3, #1
 8003032:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f001 fee7 	bl	8004e0c <SDMMC_GetPowerState>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003044:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003048:	e0b8      	b.n	80031bc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	2b03      	cmp	r3, #3
 8003050:	d02f      	beq.n	80030b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f002 f8ce 	bl	80051f8 <SDMMC_CmdSendCID>
 800305c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800305e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <SD_InitCard+0x40>
    {
      return errorstate;
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	e0a9      	b.n	80031bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f001 ff11 	bl	8004e96 <SDMMC_GetResponse>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2104      	movs	r1, #4
 8003080:	4618      	mov	r0, r3
 8003082:	f001 ff08 	bl	8004e96 <SDMMC_GetResponse>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2108      	movs	r1, #8
 8003092:	4618      	mov	r0, r3
 8003094:	f001 feff 	bl	8004e96 <SDMMC_GetResponse>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	210c      	movs	r1, #12
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fef6 	bl	8004e96 <SDMMC_GetResponse>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d00d      	beq.n	80030d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f107 020e 	add.w	r2, r7, #14
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 f8d4 	bl	8005272 <SDMMC_CmdSetRelAdd>
 80030ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <SD_InitCard+0xae>
    {
      return errorstate;
 80030d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d4:	e072      	b.n	80031bc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d036      	beq.n	800314c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f002 f89e 	bl	8005234 <SDMMC_CmdSendCSD>
 80030f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003102:	e05b      	b.n	80031bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fec3 	bl	8004e96 <SDMMC_GetResponse>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2104      	movs	r1, #4
 800311c:	4618      	mov	r0, r3
 800311e:	f001 feba 	bl	8004e96 <SDMMC_GetResponse>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2108      	movs	r1, #8
 800312e:	4618      	mov	r0, r3
 8003130:	f001 feb1 	bl	8004e96 <SDMMC_GetResponse>
 8003134:	4602      	mov	r2, r0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	210c      	movs	r1, #12
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fea8 	bl	8004e96 <SDMMC_GetResponse>
 8003146:	4602      	mov	r2, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2104      	movs	r1, #4
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fe9f 	bl	8004e96 <SDMMC_GetResponse>
 8003158:	4603      	mov	r3, r0
 800315a:	0d1a      	lsrs	r2, r3, #20
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003160:	f107 0310 	add.w	r3, r7, #16
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fcce 	bl	8002b08 <HAL_SD_GetCardCSD>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003172:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003176:	e021      	b.n	80031bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	2200      	movs	r2, #0
 8003184:	461c      	mov	r4, r3
 8003186:	4615      	mov	r5, r2
 8003188:	4622      	mov	r2, r4
 800318a:	462b      	mov	r3, r5
 800318c:	4608      	mov	r0, r1
 800318e:	f001 ff8d 	bl	80050ac <SDMMC_CmdSelDesel>
 8003192:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <SD_InitCard+0x176>
  {
    return errorstate;
 800319a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319c:	e00e      	b.n	80031bc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681d      	ldr	r5, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	466c      	mov	r4, sp
 80031a6:	f103 0210 	add.w	r2, r3, #16
 80031aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031b0:	3304      	adds	r3, #4
 80031b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b4:	4628      	mov	r0, r5
 80031b6:	f001 fdef 	bl	8004d98 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3740      	adds	r7, #64	@ 0x40
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bdb0      	pop	{r4, r5, r7, pc}

080031c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 ff88 	bl	80050f2 <SDMMC_CmdGoIdleState>
 80031e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	e072      	b.n	80032d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 ff9b 	bl	800512e <SDMMC_CmdOperCond>
 80031f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f001 ff71 	bl	80050f2 <SDMMC_CmdGoIdleState>
 8003210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	e05b      	b.n	80032d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003226:	2b01      	cmp	r3, #1
 8003228:	d137      	bne.n	800329a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f001 ff9b 	bl	800516c <SDMMC_CmdAppCommand>
 8003236:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02d      	beq.n	800329a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800323e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003242:	e047      	b.n	80032d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f001 ff8e 	bl	800516c <SDMMC_CmdAppCommand>
 8003250:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <SD_PowerON+0x98>
    {
      return errorstate;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	e03b      	b.n	80032d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	491e      	ldr	r1, [pc, #120]	@ (80032dc <SD_PowerON+0x118>)
 8003262:	4618      	mov	r0, r3
 8003264:	f001 ffa4 	bl	80051b0 <SDMMC_CmdAppOperCommand>
 8003268:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003270:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003274:	e02e      	b.n	80032d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f001 fe0a 	bl	8004e96 <SDMMC_GetResponse>
 8003282:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	0fdb      	lsrs	r3, r3, #31
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <SD_PowerON+0xcc>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <SD_PowerON+0xce>
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]

    count++;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3301      	adds	r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d802      	bhi.n	80032aa <SD_PowerON+0xe6>
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0cc      	beq.n	8003244 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d902      	bls.n	80032ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80032b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032b8:	e00c      	b.n	80032d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80032ca:	e002      	b.n	80032d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	c1100000 	.word	0xc1100000

080032e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80032f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80032f4:	e018      	b.n	8003328 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f001 ffd6 	bl	80052b4 <SDMMC_CmdSendStatus>
 8003308:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	e009      	b.n	8003328 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f001 fdbb 	bl	8004e96 <SDMMC_GetResponse>
 8003320:	4602      	mov	r2, r0
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e049      	b.n	80033d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f841 	bl	80033de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f000 f9e8 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d001      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e054      	b.n	80034b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a26      	ldr	r2, [pc, #152]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003436:	d01d      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a22      	ldr	r2, [pc, #136]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a21      	ldr	r2, [pc, #132]	@ (80034cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x80>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <HAL_TIM_Base_Start_IT+0xe8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d115      	bne.n	80034a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_TIM_Base_Start_IT+0xec>)
 800347c:	4013      	ands	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b06      	cmp	r3, #6
 8003484:	d015      	beq.n	80034b2 <HAL_TIM_Base_Start_IT+0xbe>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800348c:	d011      	beq.n	80034b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	e008      	b.n	80034b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e000      	b.n	80034b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40001800 	.word	0x40001800
 80034e0:	00010007 	.word	0x00010007

080034e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8e9 	bl	8003706 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8db 	bl	80036f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8ec 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0204 	mvn.w	r2, #4
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8c3 	bl	8003706 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8b5 	bl	80036f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8c6 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0208 	mvn.w	r2, #8
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f89d 	bl	8003706 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f88f 	bl	80036f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8a0 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0210 	mvn.w	r2, #16
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2208      	movs	r2, #8
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f877 	bl	8003706 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f869 	bl	80036f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f87a 	bl	800371a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0201 	mvn.w	r2, #1
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd f8f2 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00c      	beq.n	800367e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f919 	bl	80038b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f911 	bl	80038c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f834 	bl	800372e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00c      	beq.n	80036ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0220 	mvn.w	r2, #32
 80036e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8d9 	bl	800389c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a46      	ldr	r2, [pc, #280]	@ (8003870 <TIM_Base_SetConfig+0x12c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003762:	d00f      	beq.n	8003784 <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a43      	ldr	r2, [pc, #268]	@ (8003874 <TIM_Base_SetConfig+0x130>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00b      	beq.n	8003784 <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a42      	ldr	r2, [pc, #264]	@ (8003878 <TIM_Base_SetConfig+0x134>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a41      	ldr	r2, [pc, #260]	@ (800387c <TIM_Base_SetConfig+0x138>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a40      	ldr	r2, [pc, #256]	@ (8003880 <TIM_Base_SetConfig+0x13c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d108      	bne.n	8003796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a35      	ldr	r2, [pc, #212]	@ (8003870 <TIM_Base_SetConfig+0x12c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d02b      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a4:	d027      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a32      	ldr	r2, [pc, #200]	@ (8003874 <TIM_Base_SetConfig+0x130>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d023      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <TIM_Base_SetConfig+0x134>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a30      	ldr	r2, [pc, #192]	@ (800387c <TIM_Base_SetConfig+0x138>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01b      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003880 <TIM_Base_SetConfig+0x13c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d017      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003884 <TIM_Base_SetConfig+0x140>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <TIM_Base_SetConfig+0x144>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00f      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2c      	ldr	r2, [pc, #176]	@ (800388c <TIM_Base_SetConfig+0x148>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003890 <TIM_Base_SetConfig+0x14c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003894 <TIM_Base_SetConfig+0x150>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a29      	ldr	r2, [pc, #164]	@ (8003898 <TIM_Base_SetConfig+0x154>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <TIM_Base_SetConfig+0x12c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0xf8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <TIM_Base_SetConfig+0x13c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d103      	bne.n	8003844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
  }
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40000c00 	.word	0x40000c00
 8003880:	40010400 	.word	0x40010400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800
 8003890:	40001800 	.word	0x40001800
 8003894:	40001c00 	.word	0x40001c00
 8003898:	40002000 	.word	0x40002000

0800389c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e040      	b.n	800396c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd f860 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	@ 0x24
 8003904:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fdc2 	bl	80044a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fb5b 	bl	8003fe0 <UART_SetConfig>
 800392a:	4603      	mov	r3, r0
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e01b      	b.n	800396c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fe41 	bl	80045ec <UART_CheckIdleState>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	@ 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	4613      	mov	r3, r2
 8003980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003988:	2b20      	cmp	r3, #32
 800398a:	d132      	bne.n	80039f2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_UART_Receive_IT+0x24>
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e02b      	b.n	80039f4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d018      	beq.n	80039e2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	613b      	str	r3, [r7, #16]
   return(result);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	69f9      	ldr	r1, [r7, #28]
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	61bb      	str	r3, [r7, #24]
   return(result);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e6      	bne.n	80039b0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fec3 	bl	8004774 <UART_Start_Receive_IT>
 80039ee:	4603      	mov	r3, r0
 80039f0:	e000      	b.n	80039f4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	@ 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003a26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00f      	beq.n	8003a64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8297 	beq.w	8003f88 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      }
      return;
 8003a62:	e291      	b.n	8003f88 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8117 	beq.w	8003c9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003a7e:	4b85      	ldr	r3, [pc, #532]	@ (8003c94 <HAL_UART_IRQHandler+0x298>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 810a 	beq.w	8003c9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d011      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xbc>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d011      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xec>
 8003ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d011      	beq.n	8003b18 <HAL_UART_IRQHandler+0x11c>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2204      	movs	r2, #4
 8003b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2208      	movs	r2, #8
 8003b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_UART_IRQHandler+0x18a>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 81fd 	beq.w	8003f8c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b40      	cmp	r3, #64	@ 0x40
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04f      	beq.n	8003c7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fe8e 	bl	8004900 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b40      	cmp	r3, #64	@ 0x40
 8003bf0:	d141      	bne.n	8003c76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <HAL_UART_IRQHandler+0x29c>)
 8003c4c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd fa02 	bl	800105c <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00f      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9a0 	bl	8003fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00b      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f99c 	bl	8003fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e007      	b.n	8003c8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f998 	bl	8003fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003c8c:	e17e      	b.n	8003f8c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8e:	bf00      	nop
    return;
 8003c90:	e17c      	b.n	8003f8c <HAL_UART_IRQHandler+0x590>
 8003c92:	bf00      	nop
 8003c94:	04000120 	.word	0x04000120
 8003c98:	080049c9 	.word	0x080049c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 814c 	bne.w	8003f3e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8145 	beq.w	8003f3e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 813e 	beq.w	8003f3e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	f040 80b6 	bne.w	8003e46 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8150 	beq.w	8003f90 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f080 8148 	bcs.w	8003f90 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d14:	f000 8086 	beq.w	8003e24 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1da      	bne.n	8003d18 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e1      	bne.n	8003d62 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e4      	bne.n	8003de4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f8ac 	bl	8000f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8c2 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e44:	e0a4      	b.n	8003f90 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8096 	beq.w	8003f94 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8091 	beq.w	8003f94 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e4      	bne.n	8003e72 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ecc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e3      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	617b      	str	r3, [r7, #20]
   return(result);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e4      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f846 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f3c:	e02a      	b.n	8003f94 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01c      	beq.n	8003f98 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
    }
    return;
 8003f66:	e017      	b.n	8003f98 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d012      	beq.n	8003f9a <HAL_UART_IRQHandler+0x59e>
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00c      	beq.n	8003f9a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fd37 	bl	80049f4 <UART_EndTransmit_IT>
    return;
 8003f86:	e008      	b.n	8003f9a <HAL_UART_IRQHandler+0x59e>
      return;
 8003f88:	bf00      	nop
 8003f8a:	e006      	b.n	8003f9a <HAL_UART_IRQHandler+0x59e>
    return;
 8003f8c:	bf00      	nop
 8003f8e:	e004      	b.n	8003f9a <HAL_UART_IRQHandler+0x59e>
      return;
 8003f90:	bf00      	nop
 8003f92:	e002      	b.n	8003f9a <HAL_UART_IRQHandler+0x59e>
      return;
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <HAL_UART_IRQHandler+0x59e>
    return;
 8003f98:	bf00      	nop
  }

}
 8003f9a:	37e8      	adds	r7, #232	@ 0xe8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4ba6      	ldr	r3, [pc, #664]	@ (80042a4 <UART_SetConfig+0x2c4>)
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	430b      	orrs	r3, r1
 8004016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a94      	ldr	r2, [pc, #592]	@ (80042a8 <UART_SetConfig+0x2c8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d120      	bne.n	800409e <UART_SetConfig+0xbe>
 800405c:	4b93      	ldr	r3, [pc, #588]	@ (80042ac <UART_SetConfig+0x2cc>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b03      	cmp	r3, #3
 8004068:	d816      	bhi.n	8004098 <UART_SetConfig+0xb8>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <UART_SetConfig+0x90>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004081 	.word	0x08004081
 8004074:	0800408d 	.word	0x0800408d
 8004078:	08004087 	.word	0x08004087
 800407c:	08004093 	.word	0x08004093
 8004080:	2301      	movs	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e150      	b.n	8004328 <UART_SetConfig+0x348>
 8004086:	2302      	movs	r3, #2
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e14d      	b.n	8004328 <UART_SetConfig+0x348>
 800408c:	2304      	movs	r3, #4
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e14a      	b.n	8004328 <UART_SetConfig+0x348>
 8004092:	2308      	movs	r3, #8
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e147      	b.n	8004328 <UART_SetConfig+0x348>
 8004098:	2310      	movs	r3, #16
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e144      	b.n	8004328 <UART_SetConfig+0x348>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a83      	ldr	r2, [pc, #524]	@ (80042b0 <UART_SetConfig+0x2d0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d132      	bne.n	800410e <UART_SetConfig+0x12e>
 80040a8:	4b80      	ldr	r3, [pc, #512]	@ (80042ac <UART_SetConfig+0x2cc>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d828      	bhi.n	8004108 <UART_SetConfig+0x128>
 80040b6:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <UART_SetConfig+0xdc>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	08004109 	.word	0x08004109
 80040c4:	08004109 	.word	0x08004109
 80040c8:	08004109 	.word	0x08004109
 80040cc:	080040fd 	.word	0x080040fd
 80040d0:	08004109 	.word	0x08004109
 80040d4:	08004109 	.word	0x08004109
 80040d8:	08004109 	.word	0x08004109
 80040dc:	080040f7 	.word	0x080040f7
 80040e0:	08004109 	.word	0x08004109
 80040e4:	08004109 	.word	0x08004109
 80040e8:	08004109 	.word	0x08004109
 80040ec:	08004103 	.word	0x08004103
 80040f0:	2300      	movs	r3, #0
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e118      	b.n	8004328 <UART_SetConfig+0x348>
 80040f6:	2302      	movs	r3, #2
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e115      	b.n	8004328 <UART_SetConfig+0x348>
 80040fc:	2304      	movs	r3, #4
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e112      	b.n	8004328 <UART_SetConfig+0x348>
 8004102:	2308      	movs	r3, #8
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e10f      	b.n	8004328 <UART_SetConfig+0x348>
 8004108:	2310      	movs	r3, #16
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e10c      	b.n	8004328 <UART_SetConfig+0x348>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a68      	ldr	r2, [pc, #416]	@ (80042b4 <UART_SetConfig+0x2d4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d120      	bne.n	800415a <UART_SetConfig+0x17a>
 8004118:	4b64      	ldr	r3, [pc, #400]	@ (80042ac <UART_SetConfig+0x2cc>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004122:	2b30      	cmp	r3, #48	@ 0x30
 8004124:	d013      	beq.n	800414e <UART_SetConfig+0x16e>
 8004126:	2b30      	cmp	r3, #48	@ 0x30
 8004128:	d814      	bhi.n	8004154 <UART_SetConfig+0x174>
 800412a:	2b20      	cmp	r3, #32
 800412c:	d009      	beq.n	8004142 <UART_SetConfig+0x162>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d810      	bhi.n	8004154 <UART_SetConfig+0x174>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <UART_SetConfig+0x15c>
 8004136:	2b10      	cmp	r3, #16
 8004138:	d006      	beq.n	8004148 <UART_SetConfig+0x168>
 800413a:	e00b      	b.n	8004154 <UART_SetConfig+0x174>
 800413c:	2300      	movs	r3, #0
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e0f2      	b.n	8004328 <UART_SetConfig+0x348>
 8004142:	2302      	movs	r3, #2
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e0ef      	b.n	8004328 <UART_SetConfig+0x348>
 8004148:	2304      	movs	r3, #4
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e0ec      	b.n	8004328 <UART_SetConfig+0x348>
 800414e:	2308      	movs	r3, #8
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e0e9      	b.n	8004328 <UART_SetConfig+0x348>
 8004154:	2310      	movs	r3, #16
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e0e6      	b.n	8004328 <UART_SetConfig+0x348>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a56      	ldr	r2, [pc, #344]	@ (80042b8 <UART_SetConfig+0x2d8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d120      	bne.n	80041a6 <UART_SetConfig+0x1c6>
 8004164:	4b51      	ldr	r3, [pc, #324]	@ (80042ac <UART_SetConfig+0x2cc>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800416e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004170:	d013      	beq.n	800419a <UART_SetConfig+0x1ba>
 8004172:	2bc0      	cmp	r3, #192	@ 0xc0
 8004174:	d814      	bhi.n	80041a0 <UART_SetConfig+0x1c0>
 8004176:	2b80      	cmp	r3, #128	@ 0x80
 8004178:	d009      	beq.n	800418e <UART_SetConfig+0x1ae>
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d810      	bhi.n	80041a0 <UART_SetConfig+0x1c0>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <UART_SetConfig+0x1a8>
 8004182:	2b40      	cmp	r3, #64	@ 0x40
 8004184:	d006      	beq.n	8004194 <UART_SetConfig+0x1b4>
 8004186:	e00b      	b.n	80041a0 <UART_SetConfig+0x1c0>
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0cc      	b.n	8004328 <UART_SetConfig+0x348>
 800418e:	2302      	movs	r3, #2
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e0c9      	b.n	8004328 <UART_SetConfig+0x348>
 8004194:	2304      	movs	r3, #4
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e0c6      	b.n	8004328 <UART_SetConfig+0x348>
 800419a:	2308      	movs	r3, #8
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e0c3      	b.n	8004328 <UART_SetConfig+0x348>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e0c0      	b.n	8004328 <UART_SetConfig+0x348>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a44      	ldr	r2, [pc, #272]	@ (80042bc <UART_SetConfig+0x2dc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d125      	bne.n	80041fc <UART_SetConfig+0x21c>
 80041b0:	4b3e      	ldr	r3, [pc, #248]	@ (80042ac <UART_SetConfig+0x2cc>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041be:	d017      	beq.n	80041f0 <UART_SetConfig+0x210>
 80041c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041c4:	d817      	bhi.n	80041f6 <UART_SetConfig+0x216>
 80041c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ca:	d00b      	beq.n	80041e4 <UART_SetConfig+0x204>
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d0:	d811      	bhi.n	80041f6 <UART_SetConfig+0x216>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <UART_SetConfig+0x1fe>
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041da:	d006      	beq.n	80041ea <UART_SetConfig+0x20a>
 80041dc:	e00b      	b.n	80041f6 <UART_SetConfig+0x216>
 80041de:	2300      	movs	r3, #0
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e0a1      	b.n	8004328 <UART_SetConfig+0x348>
 80041e4:	2302      	movs	r3, #2
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e09e      	b.n	8004328 <UART_SetConfig+0x348>
 80041ea:	2304      	movs	r3, #4
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e09b      	b.n	8004328 <UART_SetConfig+0x348>
 80041f0:	2308      	movs	r3, #8
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e098      	b.n	8004328 <UART_SetConfig+0x348>
 80041f6:	2310      	movs	r3, #16
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e095      	b.n	8004328 <UART_SetConfig+0x348>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a2f      	ldr	r2, [pc, #188]	@ (80042c0 <UART_SetConfig+0x2e0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d125      	bne.n	8004252 <UART_SetConfig+0x272>
 8004206:	4b29      	ldr	r3, [pc, #164]	@ (80042ac <UART_SetConfig+0x2cc>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004214:	d017      	beq.n	8004246 <UART_SetConfig+0x266>
 8004216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800421a:	d817      	bhi.n	800424c <UART_SetConfig+0x26c>
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d00b      	beq.n	800423a <UART_SetConfig+0x25a>
 8004222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004226:	d811      	bhi.n	800424c <UART_SetConfig+0x26c>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <UART_SetConfig+0x254>
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004230:	d006      	beq.n	8004240 <UART_SetConfig+0x260>
 8004232:	e00b      	b.n	800424c <UART_SetConfig+0x26c>
 8004234:	2301      	movs	r3, #1
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e076      	b.n	8004328 <UART_SetConfig+0x348>
 800423a:	2302      	movs	r3, #2
 800423c:	77fb      	strb	r3, [r7, #31]
 800423e:	e073      	b.n	8004328 <UART_SetConfig+0x348>
 8004240:	2304      	movs	r3, #4
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e070      	b.n	8004328 <UART_SetConfig+0x348>
 8004246:	2308      	movs	r3, #8
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e06d      	b.n	8004328 <UART_SetConfig+0x348>
 800424c:	2310      	movs	r3, #16
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e06a      	b.n	8004328 <UART_SetConfig+0x348>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <UART_SetConfig+0x2e4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d138      	bne.n	80042ce <UART_SetConfig+0x2ee>
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <UART_SetConfig+0x2cc>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004266:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800426a:	d017      	beq.n	800429c <UART_SetConfig+0x2bc>
 800426c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004270:	d82a      	bhi.n	80042c8 <UART_SetConfig+0x2e8>
 8004272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004276:	d00b      	beq.n	8004290 <UART_SetConfig+0x2b0>
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d824      	bhi.n	80042c8 <UART_SetConfig+0x2e8>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <UART_SetConfig+0x2aa>
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004286:	d006      	beq.n	8004296 <UART_SetConfig+0x2b6>
 8004288:	e01e      	b.n	80042c8 <UART_SetConfig+0x2e8>
 800428a:	2300      	movs	r3, #0
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e04b      	b.n	8004328 <UART_SetConfig+0x348>
 8004290:	2302      	movs	r3, #2
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e048      	b.n	8004328 <UART_SetConfig+0x348>
 8004296:	2304      	movs	r3, #4
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e045      	b.n	8004328 <UART_SetConfig+0x348>
 800429c:	2308      	movs	r3, #8
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e042      	b.n	8004328 <UART_SetConfig+0x348>
 80042a2:	bf00      	nop
 80042a4:	efff69f3 	.word	0xefff69f3
 80042a8:	40011000 	.word	0x40011000
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40004400 	.word	0x40004400
 80042b4:	40004800 	.word	0x40004800
 80042b8:	40004c00 	.word	0x40004c00
 80042bc:	40005000 	.word	0x40005000
 80042c0:	40011400 	.word	0x40011400
 80042c4:	40007800 	.word	0x40007800
 80042c8:	2310      	movs	r3, #16
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e02c      	b.n	8004328 <UART_SetConfig+0x348>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a72      	ldr	r2, [pc, #456]	@ (800449c <UART_SetConfig+0x4bc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d125      	bne.n	8004324 <UART_SetConfig+0x344>
 80042d8:	4b71      	ldr	r3, [pc, #452]	@ (80044a0 <UART_SetConfig+0x4c0>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042e6:	d017      	beq.n	8004318 <UART_SetConfig+0x338>
 80042e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042ec:	d817      	bhi.n	800431e <UART_SetConfig+0x33e>
 80042ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f2:	d00b      	beq.n	800430c <UART_SetConfig+0x32c>
 80042f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f8:	d811      	bhi.n	800431e <UART_SetConfig+0x33e>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <UART_SetConfig+0x326>
 80042fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004302:	d006      	beq.n	8004312 <UART_SetConfig+0x332>
 8004304:	e00b      	b.n	800431e <UART_SetConfig+0x33e>
 8004306:	2300      	movs	r3, #0
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e00d      	b.n	8004328 <UART_SetConfig+0x348>
 800430c:	2302      	movs	r3, #2
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e00a      	b.n	8004328 <UART_SetConfig+0x348>
 8004312:	2304      	movs	r3, #4
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e007      	b.n	8004328 <UART_SetConfig+0x348>
 8004318:	2308      	movs	r3, #8
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e004      	b.n	8004328 <UART_SetConfig+0x348>
 800431e:	2310      	movs	r3, #16
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e001      	b.n	8004328 <UART_SetConfig+0x348>
 8004324:	2310      	movs	r3, #16
 8004326:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004330:	d15b      	bne.n	80043ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d828      	bhi.n	800438a <UART_SetConfig+0x3aa>
 8004338:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <UART_SetConfig+0x360>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004375 	.word	0x08004375
 800434c:	0800438b 	.word	0x0800438b
 8004350:	0800437b 	.word	0x0800437b
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800438b 	.word	0x0800438b
 800435c:	0800438b 	.word	0x0800438b
 8004360:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fd fcfc 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8004368:	61b8      	str	r0, [r7, #24]
        break;
 800436a:	e013      	b.n	8004394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fd fd0c 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8004370:	61b8      	str	r0, [r7, #24]
        break;
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <UART_SetConfig+0x4c4>)
 8004376:	61bb      	str	r3, [r7, #24]
        break;
 8004378:	e00c      	b.n	8004394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fd fc1f 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 800437e:	61b8      	str	r0, [r7, #24]
        break;
 8004380:	e008      	b.n	8004394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004386:	61bb      	str	r3, [r7, #24]
        break;
 8004388:	e004      	b.n	8004394 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	77bb      	strb	r3, [r7, #30]
        break;
 8004392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d074      	beq.n	8004484 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	005a      	lsls	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	d916      	bls.n	80043e4 <UART_SetConfig+0x404>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043bc:	d212      	bcs.n	80043e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f023 030f 	bic.w	r3, r3, #15
 80043c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	89fb      	ldrh	r3, [r7, #14]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	89fa      	ldrh	r2, [r7, #14]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e04f      	b.n	8004484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	77bb      	strb	r3, [r7, #30]
 80043e8:	e04c      	b.n	8004484 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d828      	bhi.n	8004442 <UART_SetConfig+0x462>
 80043f0:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <UART_SetConfig+0x418>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004443 	.word	0x08004443
 8004408:	08004433 	.word	0x08004433
 800440c:	08004443 	.word	0x08004443
 8004410:	08004443 	.word	0x08004443
 8004414:	08004443 	.word	0x08004443
 8004418:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fd fca0 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8004420:	61b8      	str	r0, [r7, #24]
        break;
 8004422:	e013      	b.n	800444c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fd fcb0 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8004428:	61b8      	str	r0, [r7, #24]
        break;
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <UART_SetConfig+0x4c4>)
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e00c      	b.n	800444c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fd fbc3 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8004436:	61b8      	str	r0, [r7, #24]
        break;
 8004438:	e008      	b.n	800444c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	77bb      	strb	r3, [r7, #30]
        break;
 800444a:	bf00      	nop
    }

    if (pclk != 0U)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	085a      	lsrs	r2, r3, #1
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d909      	bls.n	8004480 <UART_SetConfig+0x4a0>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004472:	d205      	bcs.n	8004480 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	e001      	b.n	8004484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004490:	7fbb      	ldrb	r3, [r7, #30]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40007c00 	.word	0x40007c00
 80044a0:	40023800 	.word	0x40023800
 80044a4:	00f42400 	.word	0x00f42400

080044a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045a6:	d10a      	bne.n	80045be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	@ 0x30
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045fc:	f7fc fb4c 	bl	8000c98 <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d12e      	bne.n	800466e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f83b 	bl	800469a <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d021      	beq.n	800466e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	60fb      	str	r3, [r7, #12]
   return(result);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	617b      	str	r3, [r7, #20]
   return(result);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e011      	b.n	8004692 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	@ 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046aa:	e04f      	b.n	800474c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d04b      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fc faf0 	bl	8000c98 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <UART_WaitOnFlagUntilTimeout+0x30>
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04e      	b.n	800476c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d037      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0xb2>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b80      	cmp	r3, #128	@ 0x80
 80046e0:	d034      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0xb2>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	d031      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d110      	bne.n	8004718 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2208      	movs	r2, #8
 80046fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f8fe 	bl	8004900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2208      	movs	r2, #8
 8004708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e029      	b.n	800476c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004726:	d111      	bne.n	800474c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f8e4 	bl	8004900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e00f      	b.n	800476c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	d0a0      	beq.n	80046ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004774:	b480      	push	{r7}
 8004776:	b097      	sub	sp, #92	@ 0x5c
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a6:	d10e      	bne.n	80047c6 <UART_Start_Receive_IT+0x52>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <UART_Start_Receive_IT+0x48>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80047b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047ba:	e02d      	b.n	8004818 <UART_Start_Receive_IT+0xa4>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	22ff      	movs	r2, #255	@ 0xff
 80047c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047c4:	e028      	b.n	8004818 <UART_Start_Receive_IT+0xa4>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10d      	bne.n	80047ea <UART_Start_Receive_IT+0x76>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <UART_Start_Receive_IT+0x6c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	@ 0xff
 80047da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047de:	e01b      	b.n	8004818 <UART_Start_Receive_IT+0xa4>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	227f      	movs	r2, #127	@ 0x7f
 80047e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047e8:	e016      	b.n	8004818 <UART_Start_Receive_IT+0xa4>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047f2:	d10d      	bne.n	8004810 <UART_Start_Receive_IT+0x9c>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <UART_Start_Receive_IT+0x92>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	227f      	movs	r2, #127	@ 0x7f
 8004800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004804:	e008      	b.n	8004818 <UART_Start_Receive_IT+0xa4>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	223f      	movs	r2, #63	@ 0x3f
 800480a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800480e:	e003      	b.n	8004818 <UART_Start_Receive_IT+0xa4>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2222      	movs	r2, #34	@ 0x22
 8004824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3308      	adds	r3, #8
 800482e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004848:	64ba      	str	r2, [r7, #72]	@ 0x48
 800484a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800484e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004864:	d107      	bne.n	8004876 <UART_Start_Receive_IT+0x102>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a21      	ldr	r2, [pc, #132]	@ (80048f8 <UART_Start_Receive_IT+0x184>)
 8004872:	669a      	str	r2, [r3, #104]	@ 0x68
 8004874:	e002      	b.n	800487c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a20      	ldr	r2, [pc, #128]	@ (80048fc <UART_Start_Receive_IT+0x188>)
 800487a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d019      	beq.n	80048b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_Start_Receive_IT+0x110>
 80048b6:	e018      	b.n	80048ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f043 0320 	orr.w	r3, r3, #32
 80048cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e6      	bne.n	80048b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	375c      	adds	r7, #92	@ 0x5c
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	08004bf1 	.word	0x08004bf1
 80048fc:	08004a49 	.word	0x08004a49

08004900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b095      	sub	sp, #84	@ 0x54
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004926:	643b      	str	r3, [r7, #64]	@ 0x40
 8004928:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800492c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	61fb      	str	r3, [r7, #28]
   return(result);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004972:	2b01      	cmp	r3, #1
 8004974:	d118      	bne.n	80049a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	60bb      	str	r3, [r7, #8]
   return(result);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f023 0310 	bic.w	r3, r3, #16
 800498a:	647b      	str	r3, [r7, #68]	@ 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	613b      	str	r3, [r7, #16]
   return(result);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049bc:	bf00      	nop
 80049be:	3754      	adds	r7, #84	@ 0x54
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fae4 	bl	8003fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6979      	ldr	r1, [r7, #20]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	613b      	str	r3, [r7, #16]
   return(result);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fab0 	bl	8003fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a40:	bf00      	nop
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b09c      	sub	sp, #112	@ 0x70
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a60:	2b22      	cmp	r3, #34	@ 0x22
 8004a62:	f040 80b9 	bne.w	8004bd8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a74:	b2d9      	uxtb	r1, r3
 8004a76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	400a      	ands	r2, r1
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 809c 	bne.w	8004be8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ace:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ad0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e6      	bne.n	8004ab0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b02:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e5      	bne.n	8004ae2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d018      	beq.n	8004b6a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	623b      	str	r3, [r7, #32]
   return(result);
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e6      	bne.n	8004b38 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d12e      	bne.n	8004bd0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0310 	bic.w	r3, r3, #16
 8004b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	69b9      	ldr	r1, [r7, #24]
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e6      	bne.n	8004b78 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d103      	bne.n	8004bc0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff f9fd 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bce:	e00b      	b.n	8004be8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fb fdf1 	bl	80007b8 <HAL_UART_RxCpltCallback>
}
 8004bd6:	e007      	b.n	8004be8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0208 	orr.w	r2, r2, #8
 8004be6:	619a      	str	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	3770      	adds	r7, #112	@ 0x70
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b09c      	sub	sp, #112	@ 0x70
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bfe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c08:	2b22      	cmp	r3, #34	@ 0x22
 8004c0a:	f040 80b9 	bne.w	8004d80 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004c22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c26:	4013      	ands	r3, r2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 809c 	bne.w	8004d90 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e6      	bne.n	8004c58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004caa:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e5      	bne.n	8004c8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d018      	beq.n	8004d12 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d00:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e6      	bne.n	8004ce0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d12e      	bne.n	8004d78 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e6      	bne.n	8004d20 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d103      	bne.n	8004d68 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2210      	movs	r2, #16
 8004d66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff f929 	bl	8003fc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d76:	e00b      	b.n	8004d90 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fb fd1d 	bl	80007b8 <HAL_UART_RxCpltCallback>
}
 8004d7e:	e007      	b.n	8004d90 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	619a      	str	r2, [r3, #24]
}
 8004d90:	bf00      	nop
 8004d92:	3770      	adds	r7, #112	@ 0x70
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004d98:	b084      	sub	sp, #16
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	f107 001c 	add.w	r0, r7, #28
 8004da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004dae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004db0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004db2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004db6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004dba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004dbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004dc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <SDMMC_Init+0x54>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	b004      	add	sp, #16
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	ffff8100 	.word	0xffff8100

08004df0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0303 	and.w	r3, r3, #3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <SDMMC_SendCommand+0x50>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	fffff000 	.word	0xfffff000

08004e7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	b2db      	uxtb	r3, r3
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
}  
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ee2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004ee8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004eee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0

}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f22:	2310      	movs	r3, #16
 8004f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f26:	2340      	movs	r3, #64	@ 0x40
 8004f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f34:	f107 0308 	add.w	r3, r7, #8
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff ff74 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f44:	2110      	movs	r1, #16
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9d6 	bl	80052f8 <SDMMC_GetCmdResp1>
 8004f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f66:	2311      	movs	r3, #17
 8004f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f6a:	2340      	movs	r3, #64	@ 0x40
 8004f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ff52 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f88:	2111      	movs	r1, #17
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f9b4 	bl	80052f8 <SDMMC_GetCmdResp1>
 8004f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f92:	69fb      	ldr	r3, [r7, #28]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004faa:	2312      	movs	r3, #18
 8004fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fae:	2340      	movs	r3, #64	@ 0x40
 8004fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ff30 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fcc:	2112      	movs	r1, #18
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f992 	bl	80052f8 <SDMMC_GetCmdResp1>
 8004fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fee:	2318      	movs	r3, #24
 8004ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ff2:	2340      	movs	r3, #64	@ 0x40
 8004ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ff0e 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800500c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005010:	2118      	movs	r1, #24
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f970 	bl	80052f8 <SDMMC_GetCmdResp1>
 8005018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501a:	69fb      	ldr	r3, [r7, #28]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005032:	2319      	movs	r3, #25
 8005034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005036:	2340      	movs	r3, #64	@ 0x40
 8005038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800503e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005044:	f107 0308 	add.w	r3, r7, #8
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff feec 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005054:	2119      	movs	r1, #25
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f94e 	bl	80052f8 <SDMMC_GetCmdResp1>
 800505c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800505e:	69fb      	ldr	r3, [r7, #28]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005074:	230c      	movs	r3, #12
 8005076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005078:	2340      	movs	r3, #64	@ 0x40
 800507a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fecb 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005092:	4a05      	ldr	r2, [pc, #20]	@ (80050a8 <SDMMC_CmdStopTransfer+0x40>)
 8005094:	210c      	movs	r1, #12
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f92e 	bl	80052f8 <SDMMC_GetCmdResp1>
 800509c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800509e:	69fb      	ldr	r3, [r7, #28]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	05f5e100 	.word	0x05f5e100

080050ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	@ 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050bc:	2307      	movs	r3, #7
 80050be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050c0:	2340      	movs	r3, #64	@ 0x40
 80050c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	4619      	mov	r1, r3
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fea7 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80050da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050de:	2107      	movs	r1, #7
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f909 	bl	80052f8 <SDMMC_GetCmdResp1>
 80050e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3728      	adds	r7, #40	@ 0x28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b088      	sub	sp, #32
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800510a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800510e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005110:	f107 0308 	add.w	r3, r7, #8
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fe86 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb23 	bl	8005768 <SDMMC_GetCmdError>
 8005122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005124:	69fb      	ldr	r3, [r7, #28]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005136:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800513a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800513c:	2308      	movs	r3, #8
 800513e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005140:	2340      	movs	r3, #64	@ 0x40
 8005142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800514c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fe67 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fab6 	bl	80056cc <SDMMC_GetCmdResp7>
 8005160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005162:	69fb      	ldr	r3, [r7, #28]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800517a:	2337      	movs	r3, #55	@ 0x37
 800517c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800517e:	2340      	movs	r3, #64	@ 0x40
 8005180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800518a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe48 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519c:	2137      	movs	r1, #55	@ 0x37
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f8aa 	bl	80052f8 <SDMMC_GetCmdResp1>
 80051a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <SDMMC_CmdAppOperCommand+0x44>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051c2:	2329      	movs	r3, #41	@ 0x29
 80051c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051c6:	2340      	movs	r3, #64	@ 0x40
 80051c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051d4:	f107 0308 	add.w	r3, r7, #8
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fe24 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f9bf 	bl	8005564 <SDMMC_GetCmdResp3>
 80051e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	80100000 	.word	0x80100000

080051f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005204:	2302      	movs	r3, #2
 8005206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005208:	23c0      	movs	r3, #192	@ 0xc0
 800520a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe03 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f956 	bl	80054d4 <SDMMC_GetCmdResp2>
 8005228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800522a:	69fb      	ldr	r3, [r7, #28]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005242:	2309      	movs	r3, #9
 8005244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005246:	23c0      	movs	r3, #192	@ 0xc0
 8005248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800524e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005252:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fde4 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f937 	bl	80054d4 <SDMMC_GetCmdResp2>
 8005266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005268:	69fb      	ldr	r3, [r7, #28]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b088      	sub	sp, #32
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005280:	2303      	movs	r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005284:	2340      	movs	r3, #64	@ 0x40
 8005286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800528c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff fdc5 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	2103      	movs	r1, #3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f99c 	bl	80055e0 <SDMMC_GetCmdResp6>
 80052a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052aa:	69fb      	ldr	r3, [r7, #28]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80052c2:	230d      	movs	r3, #13
 80052c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052c6:	2340      	movs	r3, #64	@ 0x40
 80052c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052d4:	f107 0308 	add.w	r3, r7, #8
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fda4 	bl	8004e28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80052e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e4:	210d      	movs	r1, #13
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f806 	bl	80052f8 <SDMMC_GetCmdResp1>
 80052ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ee:	69fb      	ldr	r3, [r7, #28]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	460b      	mov	r3, r1
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005306:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <SDMMC_GetCmdResp1+0x1d0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a70      	ldr	r2, [pc, #448]	@ (80054cc <SDMMC_GetCmdResp1+0x1d4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	0a5a      	lsrs	r2, r3, #9
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	61fa      	str	r2, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005324:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005328:	e0c9      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ef      	beq.n	800531a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2204      	movs	r2, #4
 8005354:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005356:	2304      	movs	r3, #4
 8005358:	e0b1      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800536c:	2301      	movs	r3, #1
 800536e:	e0a6      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	22c5      	movs	r2, #197	@ 0xc5
 8005374:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff fd80 	bl	8004e7c <SDMMC_GetCommandResponse>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	4293      	cmp	r3, r2
 8005384:	d001      	beq.n	800538a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005386:	2301      	movs	r3, #1
 8005388:	e099      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800538a:	2100      	movs	r1, #0
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fd82 	bl	8004e96 <SDMMC_GetResponse>
 8005392:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4b4e      	ldr	r3, [pc, #312]	@ (80054d0 <SDMMC_GetCmdResp1+0x1d8>)
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
 80053a0:	e08d      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da02      	bge.n	80053ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80053a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ac:	e087      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80053b8:	2340      	movs	r3, #64	@ 0x40
 80053ba:	e080      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80053c6:	2380      	movs	r3, #128	@ 0x80
 80053c8:	e079      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80053d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053d8:	e071      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80053e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053e8:	e069      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80053f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053f8:	e061      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005404:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005408:	e059      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005418:	e051      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005424:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005428:	e049      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005434:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005438:	e041      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005448:	e039      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005458:	e031      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005464:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005468:	e029      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005474:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005478:	e021      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005484:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005488:	e019      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005494:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005498:	e011      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80054a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054a8:	e009      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80054b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80054b8:	e001      	b.n	80054be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000000 	.word	0x20000000
 80054cc:	10624dd3 	.word	0x10624dd3
 80054d0:	fdffe008 	.word	0xfdffe008

080054d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054dc:	4b1f      	ldr	r3, [pc, #124]	@ (800555c <SDMMC_GetCmdResp2+0x88>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005560 <SDMMC_GetCmdResp2+0x8c>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	0a5b      	lsrs	r3, r3, #9
 80054e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ec:	fb02 f303 	mul.w	r3, r2, r3
 80054f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	60fa      	str	r2, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005500:	e026      	b.n	8005550 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ef      	beq.n	80054f2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ea      	bne.n	80054f2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2204      	movs	r2, #4
 800552c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800552e:	2304      	movs	r3, #4
 8005530:	e00e      	b.n	8005550 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005544:	2301      	movs	r3, #1
 8005546:	e003      	b.n	8005550 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	22c5      	movs	r2, #197	@ 0xc5
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20000000 	.word	0x20000000
 8005560:	10624dd3 	.word	0x10624dd3

08005564 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800556c:	4b1a      	ldr	r3, [pc, #104]	@ (80055d8 <SDMMC_GetCmdResp3+0x74>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1a      	ldr	r2, [pc, #104]	@ (80055dc <SDMMC_GetCmdResp3+0x78>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	0a5b      	lsrs	r3, r3, #9
 8005578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1e5a      	subs	r2, r3, #1
 8005586:	60fa      	str	r2, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800558c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005590:	e01b      	b.n	80055ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005596:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0ef      	beq.n	8005582 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ea      	bne.n	8005582 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2204      	movs	r2, #4
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055be:	2304      	movs	r3, #4
 80055c0:	e003      	b.n	80055ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	22c5      	movs	r2, #197	@ 0xc5
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000
 80055dc:	10624dd3 	.word	0x10624dd3

080055e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	460b      	mov	r3, r1
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055ee:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <SDMMC_GetCmdResp6+0xe4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a35      	ldr	r2, [pc, #212]	@ (80056c8 <SDMMC_GetCmdResp6+0xe8>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	0a5b      	lsrs	r3, r3, #9
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1e5a      	subs	r2, r3, #1
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800560e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005612:	e052      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005618:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ef      	beq.n	8005604 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ea      	bne.n	8005604 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2204      	movs	r2, #4
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005640:	2304      	movs	r3, #4
 8005642:	e03a      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005656:	2301      	movs	r3, #1
 8005658:	e02f      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fc0e 	bl	8004e7c <SDMMC_GetCommandResponse>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	4293      	cmp	r3, r2
 8005668:	d001      	beq.n	800566e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800566a:	2301      	movs	r3, #1
 800566c:	e025      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	22c5      	movs	r2, #197	@ 0xc5
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fc0d 	bl	8004e96 <SDMMC_GetResponse>
 800567c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005692:	2300      	movs	r3, #0
 8005694:	e011      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056a4:	e009      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056b4:	e001      	b.n	80056ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000
 80056c8:	10624dd3 	.word	0x10624dd3

080056cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056d4:	4b22      	ldr	r3, [pc, #136]	@ (8005760 <SDMMC_GetCmdResp7+0x94>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a22      	ldr	r2, [pc, #136]	@ (8005764 <SDMMC_GetCmdResp7+0x98>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	0a5b      	lsrs	r3, r3, #9
 80056e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	60fa      	str	r2, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80056f8:	e02c      	b.n	8005754 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0ef      	beq.n	80056ea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1ea      	bne.n	80056ea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2204      	movs	r2, #4
 8005724:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005726:	2304      	movs	r3, #4
 8005728:	e014      	b.n	8005754 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d004      	beq.n	8005740 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800573c:	2301      	movs	r3, #1
 800573e:	e009      	b.n	8005754 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
  
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000000 	.word	0x20000000
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005770:	4b11      	ldr	r3, [pc, #68]	@ (80057b8 <SDMMC_GetCmdError+0x50>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a11      	ldr	r2, [pc, #68]	@ (80057bc <SDMMC_GetCmdError+0x54>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	0a5b      	lsrs	r3, r3, #9
 800577c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	60fa      	str	r2, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005790:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005794:	e009      	b.n	80057aa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f1      	beq.n	8005786 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	22c5      	movs	r2, #197	@ 0xc5
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000000 	.word	0x20000000
 80057bc:	10624dd3 	.word	0x10624dd3

080057c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80057c4:	4904      	ldr	r1, [pc, #16]	@ (80057d8 <MX_FATFS_Init+0x18>)
 80057c6:	4805      	ldr	r0, [pc, #20]	@ (80057dc <MX_FATFS_Init+0x1c>)
 80057c8:	f000 fa88 	bl	8005cdc <FATFS_LinkDriver>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <MX_FATFS_Init+0x20>)
 80057d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80057d4:	bf00      	nop
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	200004ec 	.word	0x200004ec
 80057dc:	08008c1c 	.word	0x08008c1c
 80057e0:	200004e8 	.word	0x200004e8

080057e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80057ee:	f000 f86d 	bl	80058cc <BSP_SD_IsDetected>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80057f8:	2302      	movs	r3, #2
 80057fa:	e005      	b.n	8005808 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80057fc:	4804      	ldr	r0, [pc, #16]	@ (8005810 <BSP_SD_Init+0x2c>)
 80057fe:	f7fc fef9 	bl	80025f4 <HAL_SD_Init>
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005806:	79fb      	ldrb	r3, [r7, #7]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2000031c 	.word	0x2000031c

08005814 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	4806      	ldr	r0, [pc, #24]	@ (8005844 <BSP_SD_ReadBlocks_DMA+0x30>)
 800582c:	f7fc ff9a 	bl	8002764 <HAL_SD_ReadBlocks_DMA>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	2000031c 	.word	0x2000031c

08005848 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	4806      	ldr	r0, [pc, #24]	@ (8005878 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005860:	f7fd f862 	bl	8002928 <HAL_SD_WriteBlocks_DMA>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	2000031c 	.word	0x2000031c

0800587c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005880:	4805      	ldr	r0, [pc, #20]	@ (8005898 <BSP_SD_GetCardState+0x1c>)
 8005882:	f7fd fb11 	bl	8002ea8 <HAL_SD_GetCardState>
 8005886:	4603      	mov	r3, r0
 8005888:	2b04      	cmp	r3, #4
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
}
 8005892:	4618      	mov	r0, r3
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000031c 	.word	0x2000031c

0800589c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4803      	ldr	r0, [pc, #12]	@ (80058b4 <BSP_SD_GetCardInfo+0x18>)
 80058a8:	f7fd fad2 	bl	8002e50 <HAL_SD_GetCardInfo>
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	2000031c 	.word	0x2000031c

080058b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80058c0:	f000 f9b2 	bl	8005c28 <BSP_SD_ReadCpltCallback>
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80058d2:	2301      	movs	r3, #1
 80058d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80058d6:	f000 f80b 	bl	80058f0 <BSP_PlatformIsDetected>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80058e0:	2300      	movs	r3, #0
 80058e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	b2db      	uxtb	r3, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80058f6:	2301      	movs	r3, #1
 80058f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80058fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80058fe:	4806      	ldr	r0, [pc, #24]	@ (8005918 <BSP_PlatformIsDetected+0x28>)
 8005900:	f7fb fdb4 	bl	800146c <HAL_GPIO_ReadPin>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800590a:	2300      	movs	r3, #0
 800590c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800590e:	79fb      	ldrb	r3, [r7, #7]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40020800 	.word	0x40020800

0800591c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8005924:	f000 fa26 	bl	8005d74 <osKernelSysTick>
 8005928:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800592a:	e006      	b.n	800593a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800592c:	f7ff ffa6 	bl	800587c <BSP_SD_GetCardState>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005936:	2300      	movs	r3, #0
 8005938:	e009      	b.n	800594e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800593a:	f000 fa1b 	bl	8005d74 <osKernelSysTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d8f0      	bhi.n	800592c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005962:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <SD_CheckStatus+0x38>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005968:	f7ff ff88 	bl	800587c <BSP_SD_GetCardState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d107      	bne.n	8005982 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005972:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <SD_CheckStatus+0x38>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <SD_CheckStatus+0x38>)
 8005980:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005982:	4b03      	ldr	r3, [pc, #12]	@ (8005990 <SD_CheckStatus+0x38>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000009 	.word	0x20000009

08005994 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800599e:	4b20      	ldr	r3, [pc, #128]	@ (8005a20 <SD_initialize+0x8c>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80059a4:	f000 f9da 	bl	8005d5c <osKernelRunning>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d030      	beq.n	8005a10 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80059ae:	f7ff ff19 	bl	80057e4 <BSP_SD_Init>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff ffcc 	bl	8005958 <SD_CheckStatus>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b16      	ldr	r3, [pc, #88]	@ (8005a20 <SD_initialize+0x8c>)
 80059c6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80059c8:	4b15      	ldr	r3, [pc, #84]	@ (8005a20 <SD_initialize+0x8c>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d01e      	beq.n	8005a10 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80059d2:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <SD_initialize+0x90>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10e      	bne.n	80059f8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80059da:	4b13      	ldr	r3, [pc, #76]	@ (8005a28 <SD_initialize+0x94>)
 80059dc:	f107 0408 	add.w	r4, r7, #8
 80059e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 faa1 	bl	8005f34 <osMessageCreate>
 80059f2:	4603      	mov	r3, r0
 80059f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a24 <SD_initialize+0x90>)
 80059f6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <SD_initialize+0x90>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8005a00:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <SD_initialize+0x8c>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <SD_initialize+0x8c>)
 8005a0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005a10:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <SD_initialize+0x8c>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd90      	pop	{r4, r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000009 	.word	0x20000009
 8005a24:	200004f0 	.word	0x200004f0
 8005a28:	08008bec 	.word	0x08008bec

08005a2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff8d 	bl	8005958 <SD_CheckStatus>
 8005a3e:	4603      	mov	r3, r0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	@ 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005a5e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005a62:	f7ff ff5b 	bl	800591c <SD_CheckStatusWithTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	da02      	bge.n	8005a72 <SD_read+0x2a>
  {
    return res;
 8005a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a70:	e032      	b.n	8005ad8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68b8      	ldr	r0, [r7, #8]
 8005a78:	f7ff fecc 	bl	8005814 <BSP_SD_ReadBlocks_DMA>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8005a82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d124      	bne.n	8005ad4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005a8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ae0 <SD_read+0x98>)
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	f107 0314 	add.w	r3, r7, #20
 8005a92:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fab4 	bl	8006004 <osMessageGet>

    if (event.status == osEventMessage)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d118      	bne.n	8005ad4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d115      	bne.n	8005ad4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8005aa8:	f000 f964 	bl	8005d74 <osKernelSysTick>
 8005aac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005aae:	e008      	b.n	8005ac2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ab0:	f7ff fee4 	bl	800587c <BSP_SD_GetCardState>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <SD_read+0x7a>
              {
                res = RES_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005ac0:	e008      	b.n	8005ad4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005ac2:	f000 f957 	bl	8005d74 <osKernelSysTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d9ed      	bls.n	8005ab0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3728      	adds	r7, #40	@ 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	200004f0 	.word	0x200004f0

08005ae4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	@ 0x28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005afa:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005afe:	f7ff ff0d 	bl	800591c <SD_CheckStatusWithTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da02      	bge.n	8005b0e <SD_write+0x2a>
  {
    return res;
 8005b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b0c:	e02e      	b.n	8005b6c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	68b8      	ldr	r0, [r7, #8]
 8005b14:	f7ff fe98 	bl	8005848 <BSP_SD_WriteBlocks_DMA>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d124      	bne.n	8005b68 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005b1e:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <SD_write+0x90>)
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	f107 0314 	add.w	r3, r7, #20
 8005b26:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fa6a 	bl	8006004 <osMessageGet>

    if (event.status == osEventMessage)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d118      	bne.n	8005b68 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d115      	bne.n	8005b68 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8005b3c:	f000 f91a 	bl	8005d74 <osKernelSysTick>
 8005b40:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005b42:	e008      	b.n	8005b56 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b44:	f7ff fe9a 	bl	800587c <BSP_SD_GetCardState>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <SD_write+0x72>
          {
            res = RES_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005b54:	e008      	b.n	8005b68 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005b56:	f000 f90d 	bl	8005d74 <osKernelSysTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d9ed      	bls.n	8005b44 <SD_write+0x60>
    }

  }
#endif

  return res;
 8005b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3728      	adds	r7, #40	@ 0x28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	200004f0 	.word	0x200004f0

08005b78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08c      	sub	sp, #48	@ 0x30
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	603a      	str	r2, [r7, #0]
 8005b82:	71fb      	strb	r3, [r7, #7]
 8005b84:	460b      	mov	r3, r1
 8005b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b8e:	4b25      	ldr	r3, [pc, #148]	@ (8005c24 <SD_ioctl+0xac>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <SD_ioctl+0x28>
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e03c      	b.n	8005c1a <SD_ioctl+0xa2>

  switch (cmd)
 8005ba0:	79bb      	ldrb	r3, [r7, #6]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d834      	bhi.n	8005c10 <SD_ioctl+0x98>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <SD_ioctl+0x34>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005bdd 	.word	0x08005bdd
 8005bb8:	08005bf7 	.word	0x08005bf7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005bc2:	e028      	b.n	8005c16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fe67 	bl	800589c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005bda:	e01c      	b.n	8005c16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fe5b 	bl	800589c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005bf4:	e00f      	b.n	8005c16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bf6:	f107 030c 	add.w	r3, r7, #12
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fe4e 	bl	800589c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	0a5a      	lsrs	r2, r3, #9
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005c0e:	e002      	b.n	8005c16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c10:	2304      	movs	r3, #4
 8005c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005c16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3730      	adds	r7, #48	@ 0x30
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000009 	.word	0x20000009

08005c28 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8005c2c:	4b04      	ldr	r3, [pc, #16]	@ (8005c40 <BSP_SD_ReadCpltCallback+0x18>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2101      	movs	r1, #1
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f9a5 	bl	8005f84 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200004f0 	.word	0x200004f0

08005c44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c5c:	7a5b      	ldrb	r3, [r3, #9]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d131      	bne.n	8005cc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005c64:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c66:	7a5b      	ldrb	r3, [r3, #9]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c6e:	2100      	movs	r1, #0
 8005c70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005c72:	4b19      	ldr	r3, [pc, #100]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c74:	7a5b      	ldrb	r3, [r3, #9]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005c82:	4b15      	ldr	r3, [pc, #84]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c84:	7a5b      	ldrb	r3, [r3, #9]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c8c:	4413      	add	r3, r2
 8005c8e:	79fa      	ldrb	r2, [r7, #7]
 8005c90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005c92:	4b11      	ldr	r3, [pc, #68]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c94:	7a5b      	ldrb	r3, [r3, #9]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	b2d1      	uxtb	r1, r2
 8005c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd8 <FATFS_LinkDriverEx+0x94>)
 8005c9e:	7251      	strb	r1, [r2, #9]
 8005ca0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005ca2:	7dbb      	ldrb	r3, [r7, #22]
 8005ca4:	3330      	adds	r3, #48	@ 0x30
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	223a      	movs	r2, #58	@ 0x3a
 8005cb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	222f      	movs	r2, #47	@ 0x2f
 8005cba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3303      	adds	r3, #3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	200004f4 	.word	0x200004f4

08005cdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ffaa 	bl	8005c44 <FATFS_LinkDriverEx>
 8005cf0:	4603      	mov	r3, r0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	4603      	mov	r3, r0
 8005d02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d0c:	2b84      	cmp	r3, #132	@ 0x84
 8005d0e:	d005      	beq.n	8005d1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	3303      	adds	r3, #3
 8005d1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d30:	f3ef 8305 	mrs	r3, IPSR
 8005d34:	607b      	str	r3, [r7, #4]
  return(result);
 8005d36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d52:	f001 fb83 	bl	800745c <vTaskStartScheduler>
  
  return osOK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8005d60:	f001 ffd2 	bl	8007d08 <xTaskGetSchedulerState>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <osKernelRunning+0x12>
    return 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <osKernelRunning+0x14>
  else
    return 1;
 8005d6e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005d78:	f7ff ffd7 	bl	8005d2a <inHandlerMode>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005d82:	f001 fc97 	bl	80076b4 <xTaskGetTickCountFromISR>
 8005d86:	4603      	mov	r3, r0
 8005d88:	e002      	b.n	8005d90 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005d8a:	f001 fc83 	bl	8007694 <xTaskGetTickCount>
 8005d8e:	4603      	mov	r3, r0
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d96:	b089      	sub	sp, #36	@ 0x24
 8005d98:	af04      	add	r7, sp, #16
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d020      	beq.n	8005de8 <osThreadCreate+0x54>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01c      	beq.n	8005de8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685c      	ldr	r4, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691e      	ldr	r6, [r3, #16]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff ff9a 	bl	8005cfa <makeFreeRtosPriority>
 8005dc6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dd0:	9202      	str	r2, [sp, #8]
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	9100      	str	r1, [sp, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f001 f985 	bl	80070ec <xTaskCreateStatic>
 8005de2:	4603      	mov	r3, r0
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e01c      	b.n	8005e22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685c      	ldr	r4, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005df4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ff7c 	bl	8005cfa <makeFreeRtosPriority>
 8005e02:	4602      	mov	r2, r0
 8005e04:	f107 030c 	add.w	r3, r7, #12
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	9200      	str	r2, [sp, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4632      	mov	r2, r6
 8005e10:	4629      	mov	r1, r5
 8005e12:	4620      	mov	r0, r4
 8005e14:	f001 f9d0 	bl	80071b8 <xTaskCreate>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d001      	beq.n	8005e22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005e40:	2380      	movs	r3, #128	@ 0x80
 8005e42:	e03a      	b.n	8005eba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d103      	bne.n	8005e58 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005e50:	f04f 33ff 	mov.w	r3, #4294967295
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e009      	b.n	8005e6c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <osSemaphoreWait+0x40>
      ticks = 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005e6c:	f7ff ff5d 	bl	8005d2a <inHandlerMode>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 ff84 	bl	8006d8c <xQueueReceiveFromISR>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <osSemaphoreWait+0x62>
      return osErrorOS;
 8005e8a:	23ff      	movs	r3, #255	@ 0xff
 8005e8c:	e015      	b.n	8005eba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d011      	beq.n	8005eb8 <osSemaphoreWait+0x8c>
 8005e94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <osSemaphoreWait+0x98>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	e008      	b.n	8005eb8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fe57 	bl	8006b5c <xQueueSemaphoreTake>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005eb4:	23ff      	movs	r3, #255	@ 0xff
 8005eb6:	e000      	b.n	8005eba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	e000ed04 	.word	0xe000ed04

08005ec8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005ed8:	f7ff ff27 	bl	8005d2a <inHandlerMode>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fcb6 	bl	800685a <xQueueGiveFromISR>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d001      	beq.n	8005ef8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005ef4:	23ff      	movs	r3, #255	@ 0xff
 8005ef6:	e017      	b.n	8005f28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d013      	beq.n	8005f26 <osSemaphoreRelease+0x5e>
 8005efe:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <osSemaphoreRelease+0x68>)
 8005f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	e00a      	b.n	8005f26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005f10:	2300      	movs	r3, #0
 8005f12:	2200      	movs	r2, #0
 8005f14:	2100      	movs	r1, #0
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 faf2 	bl	8006500 <xQueueGenericSend>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d001      	beq.n	8005f26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005f22:	23ff      	movs	r3, #255	@ 0xff
 8005f24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005f26:	68fb      	ldr	r3, [r7, #12]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <osMessageCreate+0x36>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00d      	beq.n	8005f6a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6859      	ldr	r1, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2400      	movs	r4, #0
 8005f60:	9400      	str	r4, [sp, #0]
 8005f62:	f000 f9e3 	bl	800632c <xQueueGenericCreateStatic>
 8005f66:	4603      	mov	r3, r0
 8005f68:	e008      	b.n	8005f7c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	4619      	mov	r1, r3
 8005f76:	f000 fa60 	bl	800643a <xQueueGenericCreate>
 8005f7a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <osMessagePut+0x1e>
    ticks = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005fa2:	f7ff fec2 	bl	8005d2a <inHandlerMode>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d018      	beq.n	8005fde <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005fac:	f107 0210 	add.w	r2, r7, #16
 8005fb0:	f107 0108 	add.w	r1, r7, #8
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fbac 	bl	8006714 <xQueueGenericSendFromISR>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <osMessagePut+0x42>
      return osErrorOS;
 8005fc2:	23ff      	movs	r3, #255	@ 0xff
 8005fc4:	e018      	b.n	8005ff8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d014      	beq.n	8005ff6 <osMessagePut+0x72>
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <osMessagePut+0x7c>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	e00b      	b.n	8005ff6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005fde:	f107 0108 	add.w	r1, r7, #8
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fa8a 	bl	8006500 <xQueueGenericSend>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <osMessagePut+0x72>
      return osErrorOS;
 8005ff2:	23ff      	movs	r3, #255	@ 0xff
 8005ff4:	e000      	b.n	8005ff8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b08b      	sub	sp, #44	@ 0x2c
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800601e:	2380      	movs	r3, #128	@ 0x80
 8006020:	617b      	str	r3, [r7, #20]
    return event;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	461c      	mov	r4, r3
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800602e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006032:	e054      	b.n	80060de <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d103      	bne.n	800604c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006044:	f04f 33ff 	mov.w	r3, #4294967295
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
 800604a:	e009      	b.n	8006060 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d006      	beq.n	8006060 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <osMessageGet+0x5c>
      ticks = 1;
 800605c:	2301      	movs	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006060:	f7ff fe63 	bl	8005d2a <inHandlerMode>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01c      	beq.n	80060a4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800606a:	f107 0220 	add.w	r2, r7, #32
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	68b8      	ldr	r0, [r7, #8]
 8006078:	f000 fe88 	bl	8006d8c <xQueueReceiveFromISR>
 800607c:	4603      	mov	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d102      	bne.n	8006088 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006082:	2310      	movs	r3, #16
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e001      	b.n	800608c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01d      	beq.n	80060ce <osMessageGet+0xca>
 8006092:	4b15      	ldr	r3, [pc, #84]	@ (80060e8 <osMessageGet+0xe4>)
 8006094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	e014      	b.n	80060ce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80060a4:	f107 0314 	add.w	r3, r7, #20
 80060a8:	3304      	adds	r3, #4
 80060aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ac:	4619      	mov	r1, r3
 80060ae:	68b8      	ldr	r0, [r7, #8]
 80060b0:	f000 fc6c 	bl	800698c <xQueueReceive>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d102      	bne.n	80060c0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80060ba:	2310      	movs	r3, #16
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e006      	b.n	80060ce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <osMessageGet+0xc6>
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <osMessageGet+0xc8>
 80060ca:	2340      	movs	r3, #64	@ 0x40
 80060cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	461c      	mov	r4, r3
 80060d2:	f107 0314 	add.w	r3, r7, #20
 80060d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	372c      	adds	r7, #44	@ 0x2c
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}
 80060e6:	bf00      	nop
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f103 0208 	add.w	r2, r3, #8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f04f 32ff 	mov.w	r2, #4294967295
 8006104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f103 0208 	add.w	r2, r3, #8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f103 0208 	add.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
}
 8006182:	bf00      	nop
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d103      	bne.n	80061ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e00c      	b.n	80061c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3308      	adds	r3, #8
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e002      	b.n	80061bc <vListInsert+0x2e>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d2f6      	bcs.n	80061b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6892      	ldr	r2, [r2, #8]
 8006216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6852      	ldr	r2, [r2, #4]
 8006220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d103      	bne.n	8006234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10d      	bne.n	8006284 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626c:	b672      	cpsid	i
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	b662      	cpsie	i
 800627c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006284:	f002 f892 	bl	80083ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b4:	3b01      	subs	r3, #1
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	441a      	add	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	22ff      	movs	r2, #255	@ 0xff
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	22ff      	movs	r2, #255	@ 0xff
 80062d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d114      	bne.n	8006304 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01a      	beq.n	8006318 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3310      	adds	r3, #16
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 fb40 	bl	800796c <xTaskRemoveFromEventList>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d012      	beq.n	8006318 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <xQueueGenericReset+0xd4>)
 80062f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	e009      	b.n	8006318 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3310      	adds	r3, #16
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff feef 	bl	80060ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3324      	adds	r3, #36	@ 0x24
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff feea 	bl	80060ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006318:	f002 f87e 	bl	8008418 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800631c:	2301      	movs	r3, #1
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08e      	sub	sp, #56	@ 0x38
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	b672      	cpsid	i
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	b662      	cpsie	i
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <xQueueGenericCreateStatic+0x5e>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <xQueueGenericCreateStatic+0x62>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <xQueueGenericCreateStatic+0x64>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10d      	bne.n	80063b0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	b672      	cpsid	i
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	b662      	cpsie	i
 80063a8:	623b      	str	r3, [r7, #32]
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <xQueueGenericCreateStatic+0x90>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <xQueueGenericCreateStatic+0x94>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <xQueueGenericCreateStatic+0x96>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	b672      	cpsid	i
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	b662      	cpsie	i
 80063da:	61fb      	str	r3, [r7, #28]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063e2:	2348      	movs	r3, #72	@ 0x48
 80063e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b48      	cmp	r3, #72	@ 0x48
 80063ea:	d00d      	beq.n	8006408 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	b672      	cpsid	i
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	b662      	cpsie	i
 8006400:	61bb      	str	r3, [r7, #24]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006408:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800640e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800641c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f848 	bl	80064c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3730      	adds	r7, #48	@ 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800643a:	b580      	push	{r7, lr}
 800643c:	b08a      	sub	sp, #40	@ 0x28
 800643e:	af02      	add	r7, sp, #8
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <xQueueGenericCreate+0x30>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	b672      	cpsid	i
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	b662      	cpsie	i
 8006462:	613b      	str	r3, [r7, #16]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	e004      	b.n	8006480 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	3348      	adds	r3, #72	@ 0x48
 8006484:	4618      	mov	r0, r3
 8006486:	f002 f8bf 	bl	8008608 <pvPortMalloc>
 800648a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d011      	beq.n	80064b6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3348      	adds	r3, #72	@ 0x48
 800649a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064a4:	79fa      	ldrb	r2, [r7, #7]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4613      	mov	r3, r2
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f805 	bl	80064c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064b6:	69bb      	ldr	r3, [r7, #24]
	}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e002      	b.n	80064e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064ee:	2101      	movs	r1, #1
 80064f0:	69b8      	ldr	r0, [r7, #24]
 80064f2:	f7ff feaf 	bl	8006254 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08e      	sub	sp, #56	@ 0x38
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10d      	bne.n	8006538 <xQueueGenericSend+0x38>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	b672      	cpsid	i
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	b662      	cpsie	i
 8006530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <xQueueGenericSend+0x46>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueGenericSend+0x4a>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueGenericSend+0x4c>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <xQueueGenericSend+0x6c>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	b672      	cpsid	i
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	b662      	cpsie	i
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d103      	bne.n	800657a <xQueueGenericSend+0x7a>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <xQueueGenericSend+0x7e>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericSend+0x80>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10d      	bne.n	80065a0 <xQueueGenericSend+0xa0>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	623b      	str	r3, [r7, #32]
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a0:	f001 fbb2 	bl	8007d08 <xTaskGetSchedulerState>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <xQueueGenericSend+0xb0>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <xQueueGenericSend+0xb4>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <xQueueGenericSend+0xb6>
 80065b4:	2300      	movs	r3, #0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <xQueueGenericSend+0xd6>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	b672      	cpsid	i
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	b662      	cpsie	i
 80065ce:	61fb      	str	r3, [r7, #28]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d6:	f001 fee9 	bl	80083ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <xQueueGenericSend+0xec>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d129      	bne.n	8006640 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065f2:	f000 fc6b 	bl	8006ecc <prvCopyDataToQueue>
 80065f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d010      	beq.n	8006622 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	3324      	adds	r3, #36	@ 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f9b1 	bl	800796c <xTaskRemoveFromEventList>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006610:	4b3f      	ldr	r3, [pc, #252]	@ (8006710 <xQueueGenericSend+0x210>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	e00a      	b.n	8006638 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006628:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <xQueueGenericSend+0x210>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006638:	f001 feee 	bl	8008418 <vPortExitCritical>
				return pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	e063      	b.n	8006708 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006646:	f001 fee7 	bl	8008418 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800664a:	2300      	movs	r3, #0
 800664c:	e05c      	b.n	8006708 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f9ed 	bl	8007a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006662:	f001 fed9 	bl	8008418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006666:	f000 ff67 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800666a:	f001 fe9f 	bl	80083ac <vPortEnterCritical>
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006674:	b25b      	sxtb	r3, r3
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d103      	bne.n	8006684 <xQueueGenericSend+0x184>
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800668a:	b25b      	sxtb	r3, r3
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d103      	bne.n	800669a <xQueueGenericSend+0x19a>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800669a:	f001 febd 	bl	8008418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800669e:	1d3a      	adds	r2, r7, #4
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f9dc 	bl	8007a64 <xTaskCheckForTimeOut>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d124      	bne.n	80066fc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066b4:	f000 fd02 	bl	80070bc <prvIsQueueFull>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	3310      	adds	r3, #16
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f928 	bl	800791c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ce:	f000 fc8d 	bl	8006fec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066d2:	f000 ff3f 	bl	8007554 <xTaskResumeAll>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f af7c 	bne.w	80065d6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80066de:	4b0c      	ldr	r3, [pc, #48]	@ (8006710 <xQueueGenericSend+0x210>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	e772      	b.n	80065d6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f2:	f000 fc7b 	bl	8006fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f6:	f000 ff2d 	bl	8007554 <xTaskResumeAll>
 80066fa:	e76c      	b.n	80065d6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066fe:	f000 fc75 	bl	8006fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006702:	f000 ff27 	bl	8007554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006708:	4618      	mov	r0, r3
 800670a:	3738      	adds	r7, #56	@ 0x38
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08e      	sub	sp, #56	@ 0x38
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10d      	bne.n	8006748 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	b672      	cpsid	i
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	b662      	cpsie	i
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d103      	bne.n	8006756 <xQueueGenericSendFromISR+0x42>
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <xQueueGenericSendFromISR+0x46>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <xQueueGenericSendFromISR+0x48>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10d      	bne.n	800677c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	623b      	str	r3, [r7, #32]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d103      	bne.n	800678a <xQueueGenericSendFromISR+0x76>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <xQueueGenericSendFromISR+0x7a>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueGenericSendFromISR+0x7c>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
 80067a8:	61fb      	str	r3, [r7, #28]
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067b0:	f001 fee4 	bl	800857c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067b4:	f3ef 8211 	mrs	r2, BASEPRI
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	b672      	cpsid	i
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	b662      	cpsie	i
 80067cc:	61ba      	str	r2, [r7, #24]
 80067ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067dc:	429a      	cmp	r2, r3
 80067de:	d302      	bcc.n	80067e6 <xQueueGenericSendFromISR+0xd2>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d12c      	bne.n	8006840 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067f6:	f000 fb69 	bl	8006ecc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d112      	bne.n	800682a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d016      	beq.n	800683a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	3324      	adds	r3, #36	@ 0x24
 8006810:	4618      	mov	r0, r3
 8006812:	f001 f8ab 	bl	800796c <xTaskRemoveFromEventList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e007      	b.n	800683a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800682a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800682e:	3301      	adds	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	b25a      	sxtb	r2, r3
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800683a:	2301      	movs	r3, #1
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800683e:	e001      	b.n	8006844 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006840:	2300      	movs	r3, #0
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
 8006844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006846:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800684e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006852:	4618      	mov	r0, r3
 8006854:	3738      	adds	r7, #56	@ 0x38
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b08e      	sub	sp, #56	@ 0x38
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <xQueueGiveFromISR+0x30>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	b672      	cpsid	i
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	b662      	cpsie	i
 8006882:	623b      	str	r3, [r7, #32]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <xQueueGiveFromISR+0x54>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	b672      	cpsid	i
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	b662      	cpsie	i
 80068a6:	61fb      	str	r3, [r7, #28]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <xQueueGiveFromISR+0x64>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <xQueueGiveFromISR+0x68>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <xQueueGiveFromISR+0x6a>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10d      	bne.n	80068e4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	b672      	cpsid	i
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	b662      	cpsie	i
 80068dc:	61bb      	str	r3, [r7, #24]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068e4:	f001 fe4a 	bl	800857c <vPortValidateInterruptPriority>
	__asm volatile
 80068e8:	f3ef 8211 	mrs	r2, BASEPRI
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	b672      	cpsid	i
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	b662      	cpsie	i
 8006900:	617a      	str	r2, [r7, #20]
 8006902:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006904:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006914:	429a      	cmp	r2, r3
 8006916:	d22b      	bcs.n	8006970 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800691e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800692a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d112      	bne.n	800695a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	3324      	adds	r3, #36	@ 0x24
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f813 	bl	800796c <xTaskRemoveFromEventList>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2201      	movs	r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e007      	b.n	800696a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800695a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800695e:	3301      	adds	r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	b25a      	sxtb	r2, r3
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800696a:	2301      	movs	r3, #1
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
 800696e:	e001      	b.n	8006974 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006970:	2300      	movs	r3, #0
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
 8006974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006976:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f383 8811 	msr	BASEPRI, r3
}
 800697e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006982:	4618      	mov	r0, r3
 8006984:	3738      	adds	r7, #56	@ 0x38
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	@ 0x30
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <xQueueReceive+0x36>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	b672      	cpsid	i
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	b662      	cpsie	i
 80069ba:	623b      	str	r3, [r7, #32]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d103      	bne.n	80069d0 <xQueueReceive+0x44>
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <xQueueReceive+0x48>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <xQueueReceive+0x4a>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <xQueueReceive+0x6a>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	b672      	cpsid	i
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	b662      	cpsie	i
 80069ee:	61fb      	str	r3, [r7, #28]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f6:	f001 f987 	bl	8007d08 <xTaskGetSchedulerState>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xQueueReceive+0x7a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <xQueueReceive+0x7e>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueReceive+0x80>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <xQueueReceive+0xa0>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	b672      	cpsid	i
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	b662      	cpsie	i
 8006a24:	61bb      	str	r3, [r7, #24]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a2c:	f001 fcbe 	bl	80083ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01f      	beq.n	8006a7c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a40:	f000 faae 	bl	8006fa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00f      	beq.n	8006a74 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	3310      	adds	r3, #16
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ff87 	bl	800796c <xTaskRemoveFromEventList>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a64:	4b3c      	ldr	r3, [pc, #240]	@ (8006b58 <xQueueReceive+0x1cc>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a74:	f001 fcd0 	bl	8008418 <vPortExitCritical>
				return pdPASS;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e069      	b.n	8006b50 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a82:	f001 fcc9 	bl	8008418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e062      	b.n	8006b50 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a90:	f107 0310 	add.w	r3, r7, #16
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 ffcf 	bl	8007a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a9e:	f001 fcbb 	bl	8008418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aa2:	f000 fd49 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aa6:	f001 fc81 	bl	80083ac <vPortEnterCritical>
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d103      	bne.n	8006ac0 <xQueueReceive+0x134>
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d103      	bne.n	8006ad6 <xQueueReceive+0x14a>
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ad6:	f001 fc9f 	bl	8008418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ada:	1d3a      	adds	r2, r7, #4
 8006adc:	f107 0310 	add.w	r3, r7, #16
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ffbe 	bl	8007a64 <xTaskCheckForTimeOut>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d123      	bne.n	8006b36 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af0:	f000 face 	bl	8007090 <prvIsQueueEmpty>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d017      	beq.n	8006b2a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	3324      	adds	r3, #36	@ 0x24
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 ff0a 	bl	800791c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b0a:	f000 fa6f 	bl	8006fec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b0e:	f000 fd21 	bl	8007554 <xTaskResumeAll>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d189      	bne.n	8006a2c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006b18:	4b0f      	ldr	r3, [pc, #60]	@ (8006b58 <xQueueReceive+0x1cc>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	e780      	b.n	8006a2c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b2c:	f000 fa5e 	bl	8006fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b30:	f000 fd10 	bl	8007554 <xTaskResumeAll>
 8006b34:	e77a      	b.n	8006a2c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b38:	f000 fa58 	bl	8006fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b3c:	f000 fd0a 	bl	8007554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b42:	f000 faa5 	bl	8007090 <prvIsQueueEmpty>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f af6f 	beq.w	8006a2c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3730      	adds	r7, #48	@ 0x30
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	@ 0x38
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7c:	b672      	cpsid	i
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	b662      	cpsie	i
 8006b8c:	623b      	str	r3, [r7, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	61fb      	str	r3, [r7, #28]
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	e7fd      	b.n	8006bb4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb8:	f001 f8a6 	bl	8007d08 <xTaskGetSchedulerState>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <xQueueSemaphoreTake+0x6c>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <xQueueSemaphoreTake+0x70>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <xQueueSemaphoreTake+0x72>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd6:	b672      	cpsid	i
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	b662      	cpsie	i
 8006be6:	61bb      	str	r3, [r7, #24]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bee:	f001 fbdd 	bl	80083ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d024      	beq.n	8006c48 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006c0e:	f001 fa45 	bl	800809c <pvTaskIncrementMutexHeldCount>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	3310      	adds	r3, #16
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fea1 	bl	800796c <xTaskRemoveFromEventList>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b55      	ldr	r3, [pc, #340]	@ (8006d88 <xQueueSemaphoreTake+0x22c>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c40:	f001 fbea 	bl	8008418 <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e09a      	b.n	8006d7e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d114      	bne.n	8006c78 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c58:	b672      	cpsid	i
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	b662      	cpsie	i
 8006c68:	617b      	str	r3, [r7, #20]
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	e7fd      	b.n	8006c6c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c70:	f001 fbd2 	bl	8008418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c74:	2300      	movs	r3, #0
 8006c76:	e082      	b.n	8006d7e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c7e:	f107 030c 	add.w	r3, r7, #12
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fed8 	bl	8007a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c8c:	f001 fbc4 	bl	8008418 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c90:	f000 fc52 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c94:	f001 fb8a 	bl	80083ac <vPortEnterCritical>
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d103      	bne.n	8006cae <xQueueSemaphoreTake+0x152>
 8006ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d103      	bne.n	8006cc4 <xQueueSemaphoreTake+0x168>
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc4:	f001 fba8 	bl	8008418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cc8:	463a      	mov	r2, r7
 8006cca:	f107 030c 	add.w	r3, r7, #12
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fec7 	bl	8007a64 <xTaskCheckForTimeOut>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d132      	bne.n	8006d42 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cde:	f000 f9d7 	bl	8007090 <prvIsQueueEmpty>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d026      	beq.n	8006d36 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006cf0:	f001 fb5c 	bl	80083ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f823 	bl	8007d44 <xTaskPriorityInherit>
 8006cfe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006d00:	f001 fb8a 	bl	8008418 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d06:	3324      	adds	r3, #36	@ 0x24
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fe05 	bl	800791c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d14:	f000 f96a 	bl	8006fec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d18:	f000 fc1c 	bl	8007554 <xTaskResumeAll>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f47f af65 	bne.w	8006bee <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006d24:	4b18      	ldr	r3, [pc, #96]	@ (8006d88 <xQueueSemaphoreTake+0x22c>)
 8006d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	e75b      	b.n	8006bee <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d38:	f000 f958 	bl	8006fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d3c:	f000 fc0a 	bl	8007554 <xTaskResumeAll>
 8006d40:	e755      	b.n	8006bee <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d44:	f000 f952 	bl	8006fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d48:	f000 fc04 	bl	8007554 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d4e:	f000 f99f 	bl	8007090 <prvIsQueueEmpty>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f43f af4a 	beq.w	8006bee <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00d      	beq.n	8006d7c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006d60:	f001 fb24 	bl	80083ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d66:	f000 f899 	bl	8006e9c <prvGetDisinheritPriorityAfterTimeout>
 8006d6a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 f8f2 	bl	8007f5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d78:	f001 fb4e 	bl	8008418 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3738      	adds	r7, #56	@ 0x38
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	@ 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	b672      	cpsid	i
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	b662      	cpsie	i
 8006db6:	623b      	str	r3, [r7, #32]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <xQueueReceiveFromISR+0x40>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <xQueueReceiveFromISR+0x44>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <xQueueReceiveFromISR+0x46>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	b672      	cpsid	i
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	b662      	cpsie	i
 8006dea:	61fb      	str	r3, [r7, #28]
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	e7fd      	b.n	8006dee <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006df2:	f001 fbc3 	bl	800857c <vPortValidateInterruptPriority>
	__asm volatile
 8006df6:	f3ef 8211 	mrs	r2, BASEPRI
 8006dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfe:	b672      	cpsid	i
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	b662      	cpsie	i
 8006e0e:	61ba      	str	r2, [r7, #24]
 8006e10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d02f      	beq.n	8006e82 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e30:	f000 f8b6 	bl	8006fa0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d112      	bne.n	8006e6c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	3310      	adds	r3, #16
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fd8a 	bl	800796c <xTaskRemoveFromEventList>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e007      	b.n	8006e7c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e70:	3301      	adds	r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	b25a      	sxtb	r2, r3
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e80:	e001      	b.n	8006e86 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f383 8811 	msr	BASEPRI, r3
}
 8006e90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3738      	adds	r7, #56	@ 0x38
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d006      	beq.n	8006eba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f1c3 0307 	rsb	r3, r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e001      	b.n	8006ebe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
	}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d14d      	bne.n	8006f8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 ffa4 	bl	8007e44 <xTaskPriorityDisinherit>
 8006efc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]
 8006f04:	e043      	b.n	8006f8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d119      	bne.n	8006f40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6858      	ldr	r0, [r3, #4]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f14:	461a      	mov	r2, r3
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	f001 fdf0 	bl	8008afc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d32b      	bcc.n	8006f8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	e026      	b.n	8006f8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68d8      	ldr	r0, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	f001 fdd6 	bl	8008afc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f58:	425b      	negs	r3, r3
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d207      	bcs.n	8006f7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f74:	425b      	negs	r3, r3
 8006f76:	441a      	add	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d105      	bne.n	8006f8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f96:	697b      	ldr	r3, [r7, #20]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d018      	beq.n	8006fe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	441a      	add	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d303      	bcc.n	8006fd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68d9      	ldr	r1, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6838      	ldr	r0, [r7, #0]
 8006fe0:	f001 fd8c 	bl	8008afc <memcpy>
	}
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ff4:	f001 f9da 	bl	80083ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ffe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007000:	e011      	b.n	8007026 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d012      	beq.n	8007030 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3324      	adds	r3, #36	@ 0x24
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fcac 	bl	800796c <xTaskRemoveFromEventList>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800701a:	f000 fd8b 	bl	8007b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	3b01      	subs	r3, #1
 8007022:	b2db      	uxtb	r3, r3
 8007024:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dce9      	bgt.n	8007002 <prvUnlockQueue+0x16>
 800702e:	e000      	b.n	8007032 <prvUnlockQueue+0x46>
					break;
 8007030:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	22ff      	movs	r2, #255	@ 0xff
 8007036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800703a:	f001 f9ed 	bl	8008418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800703e:	f001 f9b5 	bl	80083ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007048:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800704a:	e011      	b.n	8007070 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d012      	beq.n	800707a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3310      	adds	r3, #16
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fc87 	bl	800796c <xTaskRemoveFromEventList>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007064:	f000 fd66 	bl	8007b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	3b01      	subs	r3, #1
 800706c:	b2db      	uxtb	r3, r3
 800706e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	dce9      	bgt.n	800704c <prvUnlockQueue+0x60>
 8007078:	e000      	b.n	800707c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800707a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	22ff      	movs	r2, #255	@ 0xff
 8007080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007084:	f001 f9c8 	bl	8008418 <vPortExitCritical>
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007098:	f001 f988 	bl	80083ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e001      	b.n	80070ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ae:	f001 f9b3 	bl	8008418 <vPortExitCritical>

	return xReturn;
 80070b2:	68fb      	ldr	r3, [r7, #12]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070c4:	f001 f972 	bl	80083ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d102      	bne.n	80070da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070d4:	2301      	movs	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	e001      	b.n	80070de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070de:	f001 f99b 	bl	8008418 <vPortExitCritical>

	return xReturn;
 80070e2:	68fb      	ldr	r3, [r7, #12]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08e      	sub	sp, #56	@ 0x38
 80070f0:	af04      	add	r7, sp, #16
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10d      	bne.n	800711c <xTaskCreateStatic+0x30>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	b672      	cpsid	i
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	b662      	cpsie	i
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	bf00      	nop
 800711a:	e7fd      	b.n	8007118 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10d      	bne.n	800713e <xTaskCreateStatic+0x52>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007126:	b672      	cpsid	i
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	b662      	cpsie	i
 8007136:	61fb      	str	r3, [r7, #28]
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	e7fd      	b.n	800713a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800713e:	23a0      	movs	r3, #160	@ 0xa0
 8007140:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2ba0      	cmp	r3, #160	@ 0xa0
 8007146:	d00d      	beq.n	8007164 <xTaskCreateStatic+0x78>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714c:	b672      	cpsid	i
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	b662      	cpsie	i
 800715c:	61bb      	str	r3, [r7, #24]
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007164:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01e      	beq.n	80071aa <xTaskCreateStatic+0xbe>
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01b      	beq.n	80071aa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800717a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	2202      	movs	r2, #2
 8007180:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007184:	2300      	movs	r3, #0
 8007186:	9303      	str	r3, [sp, #12]
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	9302      	str	r3, [sp, #8]
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f851 	bl	8007244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071a4:	f000 f8f0 	bl	8007388 <prvAddNewTaskToReadyList>
 80071a8:	e001      	b.n	80071ae <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071ae:	697b      	ldr	r3, [r7, #20]
	}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3728      	adds	r7, #40	@ 0x28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	@ 0x30
 80071bc:	af04      	add	r7, sp, #16
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	4613      	mov	r3, r2
 80071c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fa1b 	bl	8008608 <pvPortMalloc>
 80071d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00e      	beq.n	80071f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071da:	20a0      	movs	r0, #160	@ 0xa0
 80071dc:	f001 fa14 	bl	8008608 <pvPortMalloc>
 80071e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ee:	e005      	b.n	80071fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071f0:	6978      	ldr	r0, [r7, #20]
 80071f2:	f001 fad7 	bl	80087a4 <vPortFree>
 80071f6:	e001      	b.n	80071fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d017      	beq.n	8007232 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800720a:	88fa      	ldrh	r2, [r7, #6]
 800720c:	2300      	movs	r3, #0
 800720e:	9303      	str	r3, [sp, #12]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	9302      	str	r3, [sp, #8]
 8007214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f80f 	bl	8007244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007226:	69f8      	ldr	r0, [r7, #28]
 8007228:	f000 f8ae 	bl	8007388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	e002      	b.n	8007238 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007232:	f04f 33ff 	mov.w	r3, #4294967295
 8007236:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007238:	69bb      	ldr	r3, [r7, #24]
	}
 800723a:	4618      	mov	r0, r3
 800723c:	3720      	adds	r7, #32
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800725c:	440b      	add	r3, r1
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f023 0307 	bic.w	r3, r3, #7
 800726a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	b672      	cpsid	i
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	b662      	cpsie	i
 800728a:	617b      	str	r3, [r7, #20]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01f      	beq.n	80072d8 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	e012      	b.n	80072c4 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	7819      	ldrb	r1, [r3, #0]
 80072a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	3334      	adds	r3, #52	@ 0x34
 80072ae:	460a      	mov	r2, r1
 80072b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d006      	beq.n	80072cc <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	3301      	adds	r3, #1
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d9e9      	bls.n	800729e <prvInitialiseNewTask+0x5a>
 80072ca:	e000      	b.n	80072ce <prvInitialiseNewTask+0x8a>
			{
				break;
 80072cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072d6:	e003      	b.n	80072e0 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e2:	2b06      	cmp	r3, #6
 80072e4:	d901      	bls.n	80072ea <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072e6:	2306      	movs	r3, #6
 80072e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072f4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	2200      	movs	r2, #0
 80072fa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	3304      	adds	r3, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe ff13 	bl	800612c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	3318      	adds	r3, #24
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe ff0e 	bl	800612c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007314:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	f1c3 0207 	rsb	r2, r3, #7
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007324:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	2200      	movs	r2, #0
 800732a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	2200      	movs	r2, #0
 8007332:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	334c      	adds	r3, #76	@ 0x4c
 800733a:	224c      	movs	r2, #76	@ 0x4c
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fb58 	bl	80089f4 <memset>
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	4a0d      	ldr	r2, [pc, #52]	@ (800737c <prvInitialiseNewTask+0x138>)
 8007348:	651a      	str	r2, [r3, #80]	@ 0x50
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	4a0c      	ldr	r2, [pc, #48]	@ (8007380 <prvInitialiseNewTask+0x13c>)
 800734e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	4a0c      	ldr	r2, [pc, #48]	@ (8007384 <prvInitialiseNewTask+0x140>)
 8007354:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	68f9      	ldr	r1, [r7, #12]
 800735a:	69b8      	ldr	r0, [r7, #24]
 800735c:	f000 ff18 	bl	8008190 <pxPortInitialiseStack>
 8007360:	4602      	mov	r2, r0
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007372:	bf00      	nop
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20004250 	.word	0x20004250
 8007380:	200042b8 	.word	0x200042b8
 8007384:	20004320 	.word	0x20004320

08007388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007390:	f001 f80c 	bl	80083ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007394:	4b2a      	ldr	r3, [pc, #168]	@ (8007440 <prvAddNewTaskToReadyList+0xb8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	4a29      	ldr	r2, [pc, #164]	@ (8007440 <prvAddNewTaskToReadyList+0xb8>)
 800739c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800739e:	4b29      	ldr	r3, [pc, #164]	@ (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073a6:	4a27      	ldr	r2, [pc, #156]	@ (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073ac:	4b24      	ldr	r3, [pc, #144]	@ (8007440 <prvAddNewTaskToReadyList+0xb8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d110      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073b4:	f000 fbe2 	bl	8007b7c <prvInitialiseTaskLists>
 80073b8:	e00d      	b.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ba:	4b23      	ldr	r3, [pc, #140]	@ (8007448 <prvAddNewTaskToReadyList+0xc0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073c2:	4b20      	ldr	r3, [pc, #128]	@ (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d802      	bhi.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073d6:	4b1d      	ldr	r3, [pc, #116]	@ (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3301      	adds	r3, #1
 80073dc:	4a1b      	ldr	r2, [pc, #108]	@ (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e4:	2201      	movs	r2, #1
 80073e6:	409a      	lsls	r2, r3
 80073e8:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <prvAddNewTaskToReadyList+0xc8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	4a18      	ldr	r2, [pc, #96]	@ (8007450 <prvAddNewTaskToReadyList+0xc8>)
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4a15      	ldr	r2, [pc, #84]	@ (8007454 <prvAddNewTaskToReadyList+0xcc>)
 8007400:	441a      	add	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7fe fe9c 	bl	8006146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800740e:	f001 f803 	bl	8008418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007412:	4b0d      	ldr	r3, [pc, #52]	@ (8007448 <prvAddNewTaskToReadyList+0xc0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800741a:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <prvAddNewTaskToReadyList+0xbc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	429a      	cmp	r2, r3
 8007426:	d207      	bcs.n	8007438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007428:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <prvAddNewTaskToReadyList+0xd0>)
 800742a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20000600 	.word	0x20000600
 8007444:	20000500 	.word	0x20000500
 8007448:	2000060c 	.word	0x2000060c
 800744c:	2000061c 	.word	0x2000061c
 8007450:	20000608 	.word	0x20000608
 8007454:	20000504 	.word	0x20000504
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	@ 0x28
 8007460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007466:	2300      	movs	r3, #0
 8007468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800746a:	463a      	mov	r2, r7
 800746c:	1d39      	adds	r1, r7, #4
 800746e:	f107 0308 	add.w	r3, r7, #8
 8007472:	4618      	mov	r0, r3
 8007474:	f7f9 f844 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	9202      	str	r2, [sp, #8]
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	2300      	movs	r3, #0
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	2300      	movs	r3, #0
 8007488:	460a      	mov	r2, r1
 800748a:	4923      	ldr	r1, [pc, #140]	@ (8007518 <vTaskStartScheduler+0xbc>)
 800748c:	4823      	ldr	r0, [pc, #140]	@ (800751c <vTaskStartScheduler+0xc0>)
 800748e:	f7ff fe2d 	bl	80070ec <xTaskCreateStatic>
 8007492:	4603      	mov	r3, r0
 8007494:	4a22      	ldr	r2, [pc, #136]	@ (8007520 <vTaskStartScheduler+0xc4>)
 8007496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007498:	4b21      	ldr	r3, [pc, #132]	@ (8007520 <vTaskStartScheduler+0xc4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e001      	b.n	80074aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d11d      	bne.n	80074ec <vTaskStartScheduler+0x90>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	b672      	cpsid	i
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	b662      	cpsie	i
 80074c4:	613b      	str	r3, [r7, #16]
}
 80074c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074c8:	4b16      	ldr	r3, [pc, #88]	@ (8007524 <vTaskStartScheduler+0xc8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	334c      	adds	r3, #76	@ 0x4c
 80074ce:	4a16      	ldr	r2, [pc, #88]	@ (8007528 <vTaskStartScheduler+0xcc>)
 80074d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074d2:	4b16      	ldr	r3, [pc, #88]	@ (800752c <vTaskStartScheduler+0xd0>)
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074da:	4b15      	ldr	r3, [pc, #84]	@ (8007530 <vTaskStartScheduler+0xd4>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074e0:	4b14      	ldr	r3, [pc, #80]	@ (8007534 <vTaskStartScheduler+0xd8>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074e6:	f000 fee3 	bl	80082b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074ea:	e011      	b.n	8007510 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d10d      	bne.n	8007510 <vTaskStartScheduler+0xb4>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	b672      	cpsid	i
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	b662      	cpsie	i
 8007508:	60fb      	str	r3, [r7, #12]
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <vTaskStartScheduler+0xb0>
}
 8007510:	bf00      	nop
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	08008bfc 	.word	0x08008bfc
 800751c:	08007b4d 	.word	0x08007b4d
 8007520:	20000624 	.word	0x20000624
 8007524:	20000500 	.word	0x20000500
 8007528:	20000010 	.word	0x20000010
 800752c:	20000620 	.word	0x20000620
 8007530:	2000060c 	.word	0x2000060c
 8007534:	20000604 	.word	0x20000604

08007538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800753c:	4b04      	ldr	r3, [pc, #16]	@ (8007550 <vTaskSuspendAll+0x18>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	4a03      	ldr	r2, [pc, #12]	@ (8007550 <vTaskSuspendAll+0x18>)
 8007544:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007546:	bf00      	nop
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000628 	.word	0x20000628

08007554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007562:	4b43      	ldr	r3, [pc, #268]	@ (8007670 <xTaskResumeAll+0x11c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10d      	bne.n	8007586 <xTaskResumeAll+0x32>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	b672      	cpsid	i
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	b662      	cpsie	i
 800757e:	603b      	str	r3, [r7, #0]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007586:	f000 ff11 	bl	80083ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800758a:	4b39      	ldr	r3, [pc, #228]	@ (8007670 <xTaskResumeAll+0x11c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a37      	ldr	r2, [pc, #220]	@ (8007670 <xTaskResumeAll+0x11c>)
 8007592:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007594:	4b36      	ldr	r3, [pc, #216]	@ (8007670 <xTaskResumeAll+0x11c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d161      	bne.n	8007660 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800759c:	4b35      	ldr	r3, [pc, #212]	@ (8007674 <xTaskResumeAll+0x120>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d05d      	beq.n	8007660 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075a4:	e02e      	b.n	8007604 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a6:	4b34      	ldr	r3, [pc, #208]	@ (8007678 <xTaskResumeAll+0x124>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3318      	adds	r3, #24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fe24 	bl	8006200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fe1f 	bl	8006200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	2201      	movs	r2, #1
 80075c8:	409a      	lsls	r2, r3
 80075ca:	4b2c      	ldr	r3, [pc, #176]	@ (800767c <xTaskResumeAll+0x128>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	4a2a      	ldr	r2, [pc, #168]	@ (800767c <xTaskResumeAll+0x128>)
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d8:	4613      	mov	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4a27      	ldr	r2, [pc, #156]	@ (8007680 <xTaskResumeAll+0x12c>)
 80075e2:	441a      	add	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7fe fdab 	bl	8006146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f4:	4b23      	ldr	r3, [pc, #140]	@ (8007684 <xTaskResumeAll+0x130>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d302      	bcc.n	8007604 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80075fe:	4b22      	ldr	r3, [pc, #136]	@ (8007688 <xTaskResumeAll+0x134>)
 8007600:	2201      	movs	r2, #1
 8007602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007604:	4b1c      	ldr	r3, [pc, #112]	@ (8007678 <xTaskResumeAll+0x124>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1cc      	bne.n	80075a6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007612:	f000 fb59 	bl	8007cc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007616:	4b1d      	ldr	r3, [pc, #116]	@ (800768c <xTaskResumeAll+0x138>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007622:	f000 f859 	bl	80076d8 <xTaskIncrementTick>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800762c:	4b16      	ldr	r3, [pc, #88]	@ (8007688 <xTaskResumeAll+0x134>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3b01      	subs	r3, #1
 8007636:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f1      	bne.n	8007622 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800763e:	4b13      	ldr	r3, [pc, #76]	@ (800768c <xTaskResumeAll+0x138>)
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007644:	4b10      	ldr	r3, [pc, #64]	@ (8007688 <xTaskResumeAll+0x134>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800764c:	2301      	movs	r3, #1
 800764e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007650:	4b0f      	ldr	r3, [pc, #60]	@ (8007690 <xTaskResumeAll+0x13c>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007660:	f000 feda 	bl	8008418 <vPortExitCritical>

	return xAlreadyYielded;
 8007664:	68bb      	ldr	r3, [r7, #8]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000628 	.word	0x20000628
 8007674:	20000600 	.word	0x20000600
 8007678:	200005c0 	.word	0x200005c0
 800767c:	20000608 	.word	0x20000608
 8007680:	20000504 	.word	0x20000504
 8007684:	20000500 	.word	0x20000500
 8007688:	20000614 	.word	0x20000614
 800768c:	20000610 	.word	0x20000610
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800769a:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <xTaskGetTickCount+0x1c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076a0:	687b      	ldr	r3, [r7, #4]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20000604 	.word	0x20000604

080076b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ba:	f000 ff5f 	bl	800857c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076c2:	4b04      	ldr	r3, [pc, #16]	@ (80076d4 <xTaskGetTickCountFromISR+0x20>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076c8:	683b      	ldr	r3, [r7, #0]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000604 	.word	0x20000604

080076d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e2:	4b50      	ldr	r3, [pc, #320]	@ (8007824 <xTaskIncrementTick+0x14c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 808b 	bne.w	8007802 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007828 <xTaskIncrementTick+0x150>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076f4:	4a4c      	ldr	r2, [pc, #304]	@ (8007828 <xTaskIncrementTick+0x150>)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d123      	bne.n	8007748 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007700:	4b4a      	ldr	r3, [pc, #296]	@ (800782c <xTaskIncrementTick+0x154>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <xTaskIncrementTick+0x4e>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	b672      	cpsid	i
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	b662      	cpsie	i
 800771e:	603b      	str	r3, [r7, #0]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <xTaskIncrementTick+0x4a>
 8007726:	4b41      	ldr	r3, [pc, #260]	@ (800782c <xTaskIncrementTick+0x154>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	4b40      	ldr	r3, [pc, #256]	@ (8007830 <xTaskIncrementTick+0x158>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a3e      	ldr	r2, [pc, #248]	@ (800782c <xTaskIncrementTick+0x154>)
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	4a3e      	ldr	r2, [pc, #248]	@ (8007830 <xTaskIncrementTick+0x158>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	4b3e      	ldr	r3, [pc, #248]	@ (8007834 <xTaskIncrementTick+0x15c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	4a3c      	ldr	r2, [pc, #240]	@ (8007834 <xTaskIncrementTick+0x15c>)
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	f000 fac0 	bl	8007cc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007748:	4b3b      	ldr	r3, [pc, #236]	@ (8007838 <xTaskIncrementTick+0x160>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	429a      	cmp	r2, r3
 8007750:	d348      	bcc.n	80077e4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007752:	4b36      	ldr	r3, [pc, #216]	@ (800782c <xTaskIncrementTick+0x154>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800775c:	4b36      	ldr	r3, [pc, #216]	@ (8007838 <xTaskIncrementTick+0x160>)
 800775e:	f04f 32ff 	mov.w	r2, #4294967295
 8007762:	601a      	str	r2, [r3, #0]
					break;
 8007764:	e03e      	b.n	80077e4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007766:	4b31      	ldr	r3, [pc, #196]	@ (800782c <xTaskIncrementTick+0x154>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d203      	bcs.n	8007786 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800777e:	4a2e      	ldr	r2, [pc, #184]	@ (8007838 <xTaskIncrementTick+0x160>)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007784:	e02e      	b.n	80077e4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fd38 	bl	8006200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	3318      	adds	r3, #24
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fd2f 	bl	8006200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a6:	2201      	movs	r2, #1
 80077a8:	409a      	lsls	r2, r3
 80077aa:	4b24      	ldr	r3, [pc, #144]	@ (800783c <xTaskIncrementTick+0x164>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	4a22      	ldr	r2, [pc, #136]	@ (800783c <xTaskIncrementTick+0x164>)
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007840 <xTaskIncrementTick+0x168>)
 80077c2:	441a      	add	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fe fcbb 	bl	8006146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007844 <xTaskIncrementTick+0x16c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d3b9      	bcc.n	8007752 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80077de:	2301      	movs	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077e2:	e7b6      	b.n	8007752 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077e4:	4b17      	ldr	r3, [pc, #92]	@ (8007844 <xTaskIncrementTick+0x16c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4915      	ldr	r1, [pc, #84]	@ (8007840 <xTaskIncrementTick+0x168>)
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d907      	bls.n	800780c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e004      	b.n	800780c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007802:	4b11      	ldr	r3, [pc, #68]	@ (8007848 <xTaskIncrementTick+0x170>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a0f      	ldr	r2, [pc, #60]	@ (8007848 <xTaskIncrementTick+0x170>)
 800780a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800780c:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <xTaskIncrementTick+0x174>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007818:	697b      	ldr	r3, [r7, #20]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000628 	.word	0x20000628
 8007828:	20000604 	.word	0x20000604
 800782c:	200005b8 	.word	0x200005b8
 8007830:	200005bc 	.word	0x200005bc
 8007834:	20000618 	.word	0x20000618
 8007838:	20000620 	.word	0x20000620
 800783c:	20000608 	.word	0x20000608
 8007840:	20000504 	.word	0x20000504
 8007844:	20000500 	.word	0x20000500
 8007848:	20000610 	.word	0x20000610
 800784c:	20000614 	.word	0x20000614

08007850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007856:	4b2b      	ldr	r3, [pc, #172]	@ (8007904 <vTaskSwitchContext+0xb4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800785e:	4b2a      	ldr	r3, [pc, #168]	@ (8007908 <vTaskSwitchContext+0xb8>)
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007864:	e047      	b.n	80078f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007866:	4b28      	ldr	r3, [pc, #160]	@ (8007908 <vTaskSwitchContext+0xb8>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786c:	4b27      	ldr	r3, [pc, #156]	@ (800790c <vTaskSwitchContext+0xbc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	fab3 f383 	clz	r3, r3
 8007878:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	f1c3 031f 	rsb	r3, r3, #31
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	4923      	ldr	r1, [pc, #140]	@ (8007910 <vTaskSwitchContext+0xc0>)
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10d      	bne.n	80078b2 <vTaskSwitchContext+0x62>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	607b      	str	r3, [r7, #4]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <vTaskSwitchContext+0x5e>
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4a14      	ldr	r2, [pc, #80]	@ (8007910 <vTaskSwitchContext+0xc0>)
 80078be:	4413      	add	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3308      	adds	r3, #8
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d104      	bne.n	80078e2 <vTaskSwitchContext+0x92>
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007914 <vTaskSwitchContext+0xc4>)
 80078ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078ec:	4b09      	ldr	r3, [pc, #36]	@ (8007914 <vTaskSwitchContext+0xc4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	334c      	adds	r3, #76	@ 0x4c
 80078f2:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <vTaskSwitchContext+0xc8>)
 80078f4:	6013      	str	r3, [r2, #0]
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000628 	.word	0x20000628
 8007908:	20000614 	.word	0x20000614
 800790c:	20000608 	.word	0x20000608
 8007910:	20000504 	.word	0x20000504
 8007914:	20000500 	.word	0x20000500
 8007918:	20000010 	.word	0x20000010

0800791c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	60fb      	str	r3, [r7, #12]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007948:	4b07      	ldr	r3, [pc, #28]	@ (8007968 <vTaskPlaceOnEventList+0x4c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3318      	adds	r3, #24
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fe fc1c 	bl	800618e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007956:	2101      	movs	r1, #1
 8007958:	6838      	ldr	r0, [r7, #0]
 800795a:	f000 fbb3 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
}
 800795e:	bf00      	nop
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000500 	.word	0x20000500

0800796c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	b672      	cpsid	i
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	b662      	cpsie	i
 8007996:	60fb      	str	r3, [r7, #12]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	3318      	adds	r3, #24
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fc2c 	bl	8006200 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a20 <xTaskRemoveFromEventList+0xb4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d11c      	bne.n	80079ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fc23 	bl	8006200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	2201      	movs	r2, #1
 80079c0:	409a      	lsls	r2, r3
 80079c2:	4b18      	ldr	r3, [pc, #96]	@ (8007a24 <xTaskRemoveFromEventList+0xb8>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	4a16      	ldr	r2, [pc, #88]	@ (8007a24 <xTaskRemoveFromEventList+0xb8>)
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a13      	ldr	r2, [pc, #76]	@ (8007a28 <xTaskRemoveFromEventList+0xbc>)
 80079da:	441a      	add	r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe fbaf 	bl	8006146 <vListInsertEnd>
 80079e8:	e005      	b.n	80079f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3318      	adds	r3, #24
 80079ee:	4619      	mov	r1, r3
 80079f0:	480e      	ldr	r0, [pc, #56]	@ (8007a2c <xTaskRemoveFromEventList+0xc0>)
 80079f2:	f7fe fba8 	bl	8006146 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <xTaskRemoveFromEventList+0xc4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d905      	bls.n	8007a10 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a08:	4b0a      	ldr	r3, [pc, #40]	@ (8007a34 <xTaskRemoveFromEventList+0xc8>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e001      	b.n	8007a14 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a14:	697b      	ldr	r3, [r7, #20]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000628 	.word	0x20000628
 8007a24:	20000608 	.word	0x20000608
 8007a28:	20000504 	.word	0x20000504
 8007a2c:	200005c0 	.word	0x200005c0
 8007a30:	20000500 	.word	0x20000500
 8007a34:	20000614 	.word	0x20000614

08007a38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a40:	4b06      	ldr	r3, [pc, #24]	@ (8007a5c <vTaskInternalSetTimeOutState+0x24>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a48:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <vTaskInternalSetTimeOutState+0x28>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	605a      	str	r2, [r3, #4]
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20000618 	.word	0x20000618
 8007a60:	20000604 	.word	0x20000604

08007a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10d      	bne.n	8007a90 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a78:	b672      	cpsid	i
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	b662      	cpsie	i
 8007a88:	613b      	str	r3, [r7, #16]
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10d      	bne.n	8007ab2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	b672      	cpsid	i
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	b662      	cpsie	i
 8007aaa:	60fb      	str	r3, [r7, #12]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007ab2:	f000 fc7b 	bl	80083ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b2c <xTaskCheckForTimeOut+0xc8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d102      	bne.n	8007ad6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	e023      	b.n	8007b1e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b15      	ldr	r3, [pc, #84]	@ (8007b30 <xTaskCheckForTimeOut+0xcc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d007      	beq.n	8007af2 <xTaskCheckForTimeOut+0x8e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d302      	bcc.n	8007af2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	61fb      	str	r3, [r7, #28]
 8007af0:	e015      	b.n	8007b1e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d20b      	bcs.n	8007b14 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ff95 	bl	8007a38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	e004      	b.n	8007b1e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b1e:	f000 fc7b 	bl	8008418 <vPortExitCritical>

	return xReturn;
 8007b22:	69fb      	ldr	r3, [r7, #28]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000604 	.word	0x20000604
 8007b30:	20000618 	.word	0x20000618

08007b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b38:	4b03      	ldr	r3, [pc, #12]	@ (8007b48 <vTaskMissedYield+0x14>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	20000614 	.word	0x20000614

08007b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b54:	f000 f852 	bl	8007bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <prvIdleTask+0x28>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d9f9      	bls.n	8007b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b60:	4b05      	ldr	r3, [pc, #20]	@ (8007b78 <prvIdleTask+0x2c>)
 8007b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b70:	e7f0      	b.n	8007b54 <prvIdleTask+0x8>
 8007b72:	bf00      	nop
 8007b74:	20000504 	.word	0x20000504
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b82:	2300      	movs	r3, #0
 8007b84:	607b      	str	r3, [r7, #4]
 8007b86:	e00c      	b.n	8007ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4a12      	ldr	r2, [pc, #72]	@ (8007bdc <prvInitialiseTaskLists+0x60>)
 8007b94:	4413      	add	r3, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fe faa8 	bl	80060ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	607b      	str	r3, [r7, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b06      	cmp	r3, #6
 8007ba6:	d9ef      	bls.n	8007b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ba8:	480d      	ldr	r0, [pc, #52]	@ (8007be0 <prvInitialiseTaskLists+0x64>)
 8007baa:	f7fe fa9f 	bl	80060ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bae:	480d      	ldr	r0, [pc, #52]	@ (8007be4 <prvInitialiseTaskLists+0x68>)
 8007bb0:	f7fe fa9c 	bl	80060ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bb4:	480c      	ldr	r0, [pc, #48]	@ (8007be8 <prvInitialiseTaskLists+0x6c>)
 8007bb6:	f7fe fa99 	bl	80060ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bba:	480c      	ldr	r0, [pc, #48]	@ (8007bec <prvInitialiseTaskLists+0x70>)
 8007bbc:	f7fe fa96 	bl	80060ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bc0:	480b      	ldr	r0, [pc, #44]	@ (8007bf0 <prvInitialiseTaskLists+0x74>)
 8007bc2:	f7fe fa93 	bl	80060ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <prvInitialiseTaskLists+0x78>)
 8007bc8:	4a05      	ldr	r2, [pc, #20]	@ (8007be0 <prvInitialiseTaskLists+0x64>)
 8007bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf8 <prvInitialiseTaskLists+0x7c>)
 8007bce:	4a05      	ldr	r2, [pc, #20]	@ (8007be4 <prvInitialiseTaskLists+0x68>)
 8007bd0:	601a      	str	r2, [r3, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000504 	.word	0x20000504
 8007be0:	20000590 	.word	0x20000590
 8007be4:	200005a4 	.word	0x200005a4
 8007be8:	200005c0 	.word	0x200005c0
 8007bec:	200005d4 	.word	0x200005d4
 8007bf0:	200005ec 	.word	0x200005ec
 8007bf4:	200005b8 	.word	0x200005b8
 8007bf8:	200005bc 	.word	0x200005bc

08007bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c02:	e019      	b.n	8007c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c04:	f000 fbd2 	bl	80083ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c08:	4b10      	ldr	r3, [pc, #64]	@ (8007c4c <prvCheckTasksWaitingTermination+0x50>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe faf3 	bl	8006200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <prvCheckTasksWaitingTermination+0x54>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	4a0b      	ldr	r2, [pc, #44]	@ (8007c50 <prvCheckTasksWaitingTermination+0x54>)
 8007c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c24:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <prvCheckTasksWaitingTermination+0x58>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c54 <prvCheckTasksWaitingTermination+0x58>)
 8007c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c2e:	f000 fbf3 	bl	8008418 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f810 	bl	8007c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c38:	4b06      	ldr	r3, [pc, #24]	@ (8007c54 <prvCheckTasksWaitingTermination+0x58>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e1      	bne.n	8007c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	200005d4 	.word	0x200005d4
 8007c50:	20000600 	.word	0x20000600
 8007c54:	200005e8 	.word	0x200005e8

08007c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	334c      	adds	r3, #76	@ 0x4c
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fecd 	bl	8008a04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d108      	bne.n	8007c86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fd93 	bl	80087a4 <vPortFree>
				vPortFree( pxTCB );
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fd90 	bl	80087a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c84:	e01b      	b.n	8007cbe <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d103      	bne.n	8007c98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fd87 	bl	80087a4 <vPortFree>
	}
 8007c96:	e012      	b.n	8007cbe <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d00d      	beq.n	8007cbe <prvDeleteTCB+0x66>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	b672      	cpsid	i
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	b662      	cpsie	i
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <prvDeleteTCB+0x62>
	}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cce:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <prvResetNextTaskUnblockTime+0x38>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d104      	bne.n	8007ce2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d04 <prvResetNextTaskUnblockTime+0x3c>)
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ce0:	e008      	b.n	8007cf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce2:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <prvResetNextTaskUnblockTime+0x38>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	4a04      	ldr	r2, [pc, #16]	@ (8007d04 <prvResetNextTaskUnblockTime+0x3c>)
 8007cf2:	6013      	str	r3, [r2, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	200005b8 	.word	0x200005b8
 8007d04:	20000620 	.word	0x20000620

08007d08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d3c <xTaskGetSchedulerState+0x34>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d16:	2301      	movs	r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	e008      	b.n	8007d2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1c:	4b08      	ldr	r3, [pc, #32]	@ (8007d40 <xTaskGetSchedulerState+0x38>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d24:	2302      	movs	r3, #2
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	e001      	b.n	8007d2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d2e:	687b      	ldr	r3, [r7, #4]
	}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	2000060c 	.word	0x2000060c
 8007d40:	20000628 	.word	0x20000628

08007d44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d069      	beq.n	8007e2e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4b36      	ldr	r3, [pc, #216]	@ (8007e38 <xTaskPriorityInherit+0xf4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d259      	bcs.n	8007e1c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	db06      	blt.n	8007d7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d70:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <xTaskPriorityInherit+0xf4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	f1c3 0207 	rsb	r2, r3, #7
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6959      	ldr	r1, [r3, #20]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8007e3c <xTaskPriorityInherit+0xf8>)
 8007d90:	4413      	add	r3, r2
 8007d92:	4299      	cmp	r1, r3
 8007d94:	d13a      	bne.n	8007e0c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fa30 	bl	8006200 <uxListRemove>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d115      	bne.n	8007dd2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007daa:	4924      	ldr	r1, [pc, #144]	@ (8007e3c <xTaskPriorityInherit+0xf8>)
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskPriorityInherit+0x8e>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43da      	mvns	r2, r3
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e40 <xTaskPriorityInherit+0xfc>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	4a1c      	ldr	r2, [pc, #112]	@ (8007e40 <xTaskPriorityInherit+0xfc>)
 8007dd0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dd2:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <xTaskPriorityInherit+0xf4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	2201      	movs	r2, #1
 8007de2:	409a      	lsls	r2, r3
 8007de4:	4b16      	ldr	r3, [pc, #88]	@ (8007e40 <xTaskPriorityInherit+0xfc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	4a15      	ldr	r2, [pc, #84]	@ (8007e40 <xTaskPriorityInherit+0xfc>)
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a10      	ldr	r2, [pc, #64]	@ (8007e3c <xTaskPriorityInherit+0xf8>)
 8007dfc:	441a      	add	r2, r3
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7fe f99e 	bl	8006146 <vListInsertEnd>
 8007e0a:	e004      	b.n	8007e16 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e38 <xTaskPriorityInherit+0xf4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	e008      	b.n	8007e2e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e20:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <xTaskPriorityInherit+0xf4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d201      	bcs.n	8007e2e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
	}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000500 	.word	0x20000500
 8007e3c:	20000504 	.word	0x20000504
 8007e40:	20000608 	.word	0x20000608

08007e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d074      	beq.n	8007f44 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8007f50 <xTaskPriorityDisinherit+0x10c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d00d      	beq.n	8007e80 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e68:	b672      	cpsid	i
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	b662      	cpsie	i
 8007e78:	60fb      	str	r3, [r7, #12]
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10d      	bne.n	8007ea4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	60bb      	str	r3, [r7, #8]
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	e7fd      	b.n	8007ea0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d044      	beq.n	8007f44 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d140      	bne.n	8007f44 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe f99a 	bl	8006200 <uxListRemove>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d115      	bne.n	8007efe <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed6:	491f      	ldr	r1, [pc, #124]	@ (8007f54 <xTaskPriorityDisinherit+0x110>)
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <xTaskPriorityDisinherit+0xba>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	2201      	movs	r2, #1
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	43da      	mvns	r2, r3
 8007ef4:	4b18      	ldr	r3, [pc, #96]	@ (8007f58 <xTaskPriorityDisinherit+0x114>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	4a17      	ldr	r2, [pc, #92]	@ (8007f58 <xTaskPriorityDisinherit+0x114>)
 8007efc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	f1c3 0207 	rsb	r2, r3, #7
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f16:	2201      	movs	r2, #1
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f58 <xTaskPriorityDisinherit+0x114>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	4a0d      	ldr	r2, [pc, #52]	@ (8007f58 <xTaskPriorityDisinherit+0x114>)
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4a08      	ldr	r2, [pc, #32]	@ (8007f54 <xTaskPriorityDisinherit+0x110>)
 8007f32:	441a      	add	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f7fe f903 	bl	8006146 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f44:	697b      	ldr	r3, [r7, #20]
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000500 	.word	0x20000500
 8007f54:	20000504 	.word	0x20000504
 8007f58:	20000608 	.word	0x20000608

08007f5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8089 	beq.w	8008088 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	b672      	cpsid	i
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	b662      	cpsie	i
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d902      	bls.n	8007faa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	e002      	b.n	8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d066      	beq.n	8008088 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d161      	bne.n	8008088 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fc4:	4b32      	ldr	r3, [pc, #200]	@ (8008090 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d10d      	bne.n	8007fea <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	b672      	cpsid	i
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	b662      	cpsie	i
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	db04      	blt.n	8008008 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f1c3 0207 	rsb	r2, r3, #7
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	6959      	ldr	r1, [r3, #20]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4a1f      	ldr	r2, [pc, #124]	@ (8008094 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008018:	4413      	add	r3, r2
 800801a:	4299      	cmp	r1, r3
 800801c:	d134      	bne.n	8008088 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe f8ec 	bl	8006200 <uxListRemove>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d115      	bne.n	800805a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008032:	4918      	ldr	r1, [pc, #96]	@ (8008094 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	2201      	movs	r2, #1
 800804a:	fa02 f303 	lsl.w	r3, r2, r3
 800804e:	43da      	mvns	r2, r3
 8008050:	4b11      	ldr	r3, [pc, #68]	@ (8008098 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4013      	ands	r3, r2
 8008056:	4a10      	ldr	r2, [pc, #64]	@ (8008098 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008058:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	2201      	movs	r2, #1
 8008060:	409a      	lsls	r2, r3
 8008062:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4313      	orrs	r3, r2
 8008068:	4a0b      	ldr	r2, [pc, #44]	@ (8008098 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a06      	ldr	r2, [pc, #24]	@ (8008094 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800807a:	441a      	add	r2, r3
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f7fe f85f 	bl	8006146 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008088:	bf00      	nop
 800808a:	3720      	adds	r7, #32
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000500 	.word	0x20000500
 8008094:	20000504 	.word	0x20000504
 8008098:	20000608 	.word	0x20000608

0800809c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080ae:	3201      	adds	r2, #1
 80080b0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80080b2:	4b03      	ldr	r3, [pc, #12]	@ (80080c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080b4:	681b      	ldr	r3, [r3, #0]
	}
 80080b6:	4618      	mov	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20000500 	.word	0x20000500

080080c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080ce:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <prvAddCurrentTaskToDelayedList+0xb0>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d4:	4b28      	ldr	r3, [pc, #160]	@ (8008178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe f890 	bl	8006200 <uxListRemove>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10b      	bne.n	80080fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80080e6:	4b24      	ldr	r3, [pc, #144]	@ (8008178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	2201      	movs	r2, #1
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43da      	mvns	r2, r3
 80080f4:	4b21      	ldr	r3, [pc, #132]	@ (800817c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4013      	ands	r3, r2
 80080fa:	4a20      	ldr	r2, [pc, #128]	@ (800817c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d10a      	bne.n	800811c <prvAddCurrentTaskToDelayedList+0x58>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800810c:	4b1a      	ldr	r3, [pc, #104]	@ (8008178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	481a      	ldr	r0, [pc, #104]	@ (8008180 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008116:	f7fe f816 	bl	8006146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800811a:	e026      	b.n	800816a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4413      	add	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008124:	4b14      	ldr	r3, [pc, #80]	@ (8008178 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	429a      	cmp	r2, r3
 8008132:	d209      	bcs.n	8008148 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008134:	4b13      	ldr	r3, [pc, #76]	@ (8008184 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	4b0f      	ldr	r3, [pc, #60]	@ (8008178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fe f824 	bl	800618e <vListInsert>
}
 8008146:	e010      	b.n	800816a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008148:	4b0f      	ldr	r3, [pc, #60]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xc4>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7fe f81a 	bl	800618e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800815a:	4b0c      	ldr	r3, [pc, #48]	@ (800818c <prvAddCurrentTaskToDelayedList+0xc8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	429a      	cmp	r2, r3
 8008162:	d202      	bcs.n	800816a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008164:	4a09      	ldr	r2, [pc, #36]	@ (800818c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6013      	str	r3, [r2, #0]
}
 800816a:	bf00      	nop
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000604 	.word	0x20000604
 8008178:	20000500 	.word	0x20000500
 800817c:	20000608 	.word	0x20000608
 8008180:	200005ec 	.word	0x200005ec
 8008184:	200005bc 	.word	0x200005bc
 8008188:	200005b8 	.word	0x200005b8
 800818c:	20000620 	.word	0x20000620

08008190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b04      	subs	r3, #4
 80081a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80081a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3b04      	subs	r3, #4
 80081ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 0201 	bic.w	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b04      	subs	r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081c0:	4a0c      	ldr	r2, [pc, #48]	@ (80081f4 <pxPortInitialiseStack+0x64>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3b14      	subs	r3, #20
 80081ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3b04      	subs	r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f06f 0202 	mvn.w	r2, #2
 80081de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3b20      	subs	r3, #32
 80081e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081e6:	68fb      	ldr	r3, [r7, #12]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	080081f9 	.word	0x080081f9

080081f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008202:	4b15      	ldr	r3, [pc, #84]	@ (8008258 <prvTaskExitError+0x60>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d00d      	beq.n	8008228 <prvTaskExitError+0x30>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	b672      	cpsid	i
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	b662      	cpsie	i
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <prvTaskExitError+0x2c>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822c:	b672      	cpsid	i
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	b662      	cpsie	i
 800823c:	60bb      	str	r3, [r7, #8]
}
 800823e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008240:	bf00      	nop
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0fc      	beq.n	8008242 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	2000000c 	.word	0x2000000c
 800825c:	00000000 	.word	0x00000000

08008260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008260:	4b07      	ldr	r3, [pc, #28]	@ (8008280 <pxCurrentTCBConst2>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f380 8809 	msr	PSP, r0
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f04f 0000 	mov.w	r0, #0
 8008276:	f380 8811 	msr	BASEPRI, r0
 800827a:	4770      	bx	lr
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst2>:
 8008280:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008288:	4808      	ldr	r0, [pc, #32]	@ (80082ac <prvPortStartFirstTask+0x24>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f380 8808 	msr	MSP, r0
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8814 	msr	CONTROL, r0
 800829a:	b662      	cpsie	i
 800829c:	b661      	cpsie	f
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	df00      	svc	0
 80082a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082aa:	bf00      	nop
 80082ac:	e000ed08 	.word	0xe000ed08

080082b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082b6:	4b37      	ldr	r3, [pc, #220]	@ (8008394 <xPortStartScheduler+0xe4>)
 80082b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	22ff      	movs	r2, #255	@ 0xff
 80082c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	4b2f      	ldr	r3, [pc, #188]	@ (8008398 <xPortStartScheduler+0xe8>)
 80082dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082de:	4b2f      	ldr	r3, [pc, #188]	@ (800839c <xPortStartScheduler+0xec>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082e4:	e009      	b.n	80082fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80082e6:	4b2d      	ldr	r3, [pc, #180]	@ (800839c <xPortStartScheduler+0xec>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	4a2b      	ldr	r2, [pc, #172]	@ (800839c <xPortStartScheduler+0xec>)
 80082ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008302:	2b80      	cmp	r3, #128	@ 0x80
 8008304:	d0ef      	beq.n	80082e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008306:	4b25      	ldr	r3, [pc, #148]	@ (800839c <xPortStartScheduler+0xec>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1c3 0307 	rsb	r3, r3, #7
 800830e:	2b04      	cmp	r3, #4
 8008310:	d00d      	beq.n	800832e <xPortStartScheduler+0x7e>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	b672      	cpsid	i
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	b662      	cpsie	i
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800832e:	4b1b      	ldr	r3, [pc, #108]	@ (800839c <xPortStartScheduler+0xec>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	4a19      	ldr	r2, [pc, #100]	@ (800839c <xPortStartScheduler+0xec>)
 8008336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008338:	4b18      	ldr	r3, [pc, #96]	@ (800839c <xPortStartScheduler+0xec>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008340:	4a16      	ldr	r2, [pc, #88]	@ (800839c <xPortStartScheduler+0xec>)
 8008342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	b2da      	uxtb	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800834c:	4b14      	ldr	r3, [pc, #80]	@ (80083a0 <xPortStartScheduler+0xf0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a13      	ldr	r2, [pc, #76]	@ (80083a0 <xPortStartScheduler+0xf0>)
 8008352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008358:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <xPortStartScheduler+0xf0>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a10      	ldr	r2, [pc, #64]	@ (80083a0 <xPortStartScheduler+0xf0>)
 800835e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008364:	f000 f8dc 	bl	8008520 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008368:	4b0e      	ldr	r3, [pc, #56]	@ (80083a4 <xPortStartScheduler+0xf4>)
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800836e:	f000 f8fb 	bl	8008568 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <xPortStartScheduler+0xf8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0c      	ldr	r2, [pc, #48]	@ (80083a8 <xPortStartScheduler+0xf8>)
 8008378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800837c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800837e:	f7ff ff83 	bl	8008288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008382:	f7ff fa65 	bl	8007850 <vTaskSwitchContext>
	prvTaskExitError();
 8008386:	f7ff ff37 	bl	80081f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	e000e400 	.word	0xe000e400
 8008398:	2000062c 	.word	0x2000062c
 800839c:	20000630 	.word	0x20000630
 80083a0:	e000ed20 	.word	0xe000ed20
 80083a4:	2000000c 	.word	0x2000000c
 80083a8:	e000ef34 	.word	0xe000ef34

080083ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	b672      	cpsid	i
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	b662      	cpsie	i
 80083c6:	607b      	str	r3, [r7, #4]
}
 80083c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083ca:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <vPortEnterCritical+0x64>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008410 <vPortEnterCritical+0x64>)
 80083d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008410 <vPortEnterCritical+0x64>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d112      	bne.n	8008402 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <vPortEnterCritical+0x68>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00d      	beq.n	8008402 <vPortEnterCritical+0x56>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	603b      	str	r3, [r7, #0]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <vPortEnterCritical+0x52>
	}
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	2000000c 	.word	0x2000000c
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800841e:	4b13      	ldr	r3, [pc, #76]	@ (800846c <vPortExitCritical+0x54>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <vPortExitCritical+0x2a>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
 800843a:	607b      	str	r3, [r7, #4]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <vPortExitCritical+0x54>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a08      	ldr	r2, [pc, #32]	@ (800846c <vPortExitCritical+0x54>)
 800844a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800844c:	4b07      	ldr	r3, [pc, #28]	@ (800846c <vPortExitCritical+0x54>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <vPortExitCritical+0x48>
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	2000000c 	.word	0x2000000c

08008470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008470:	f3ef 8009 	mrs	r0, PSP
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4b15      	ldr	r3, [pc, #84]	@ (80084d0 <pxCurrentTCBConst>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f01e 0f10 	tst.w	lr, #16
 8008480:	bf08      	it	eq
 8008482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008494:	b672      	cpsid	i
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	f7ff f9d4 	bl	8007850 <vTaskSwitchContext>
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f380 8811 	msr	BASEPRI, r0
 80084b0:	bc09      	pop	{r0, r3}
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f01e 0f10 	tst.w	lr, #16
 80084be:	bf08      	it	eq
 80084c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084c4:	f380 8809 	msr	PSP, r0
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <pxCurrentTCBConst>:
 80084d0:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	607b      	str	r3, [r7, #4]
}
 80084f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084f6:	f7ff f8ef 	bl	80076d8 <xTaskIncrementTick>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <SysTick_Handler+0x44>)
 8008502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	f383 8811 	msr	BASEPRI, r3
}
 8008512:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008524:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <vPortSetupTimerInterrupt+0x34>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <vPortSetupTimerInterrupt+0x38>)
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008530:	4b0a      	ldr	r3, [pc, #40]	@ (800855c <vPortSetupTimerInterrupt+0x3c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <vPortSetupTimerInterrupt+0x40>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	099b      	lsrs	r3, r3, #6
 800853c:	4a09      	ldr	r2, [pc, #36]	@ (8008564 <vPortSetupTimerInterrupt+0x44>)
 800853e:	3b01      	subs	r3, #1
 8008540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008542:	4b04      	ldr	r3, [pc, #16]	@ (8008554 <vPortSetupTimerInterrupt+0x34>)
 8008544:	2207      	movs	r2, #7
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	e000e010 	.word	0xe000e010
 8008558:	e000e018 	.word	0xe000e018
 800855c:	20000000 	.word	0x20000000
 8008560:	10624dd3 	.word	0x10624dd3
 8008564:	e000e014 	.word	0xe000e014

08008568 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008568:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008578 <vPortEnableVFP+0x10>
 800856c:	6801      	ldr	r1, [r0, #0]
 800856e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008572:	6001      	str	r1, [r0, #0]
 8008574:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008576:	bf00      	nop
 8008578:	e000ed88 	.word	0xe000ed88

0800857c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008582:	f3ef 8305 	mrs	r3, IPSR
 8008586:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b0f      	cmp	r3, #15
 800858c:	d917      	bls.n	80085be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800858e:	4a1a      	ldr	r2, [pc, #104]	@ (80085f8 <vPortValidateInterruptPriority+0x7c>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008598:	4b18      	ldr	r3, [pc, #96]	@ (80085fc <vPortValidateInterruptPriority+0x80>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	7afa      	ldrb	r2, [r7, #11]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d20d      	bcs.n	80085be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085be:	4b10      	ldr	r3, [pc, #64]	@ (8008600 <vPortValidateInterruptPriority+0x84>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80085c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <vPortValidateInterruptPriority+0x88>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d90d      	bls.n	80085ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	b672      	cpsid	i
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	b662      	cpsie	i
 80085e2:	603b      	str	r3, [r7, #0]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <vPortValidateInterruptPriority+0x6a>
	}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	e000e3f0 	.word	0xe000e3f0
 80085fc:	2000062c 	.word	0x2000062c
 8008600:	e000ed0c 	.word	0xe000ed0c
 8008604:	20000630 	.word	0x20000630

08008608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08a      	sub	sp, #40	@ 0x28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008614:	f7fe ff90 	bl	8007538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008618:	4b5d      	ldr	r3, [pc, #372]	@ (8008790 <pvPortMalloc+0x188>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008620:	f000 f920 	bl	8008864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008624:	4b5b      	ldr	r3, [pc, #364]	@ (8008794 <pvPortMalloc+0x18c>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4013      	ands	r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8094 	bne.w	800875a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d020      	beq.n	800867a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008638:	2208      	movs	r2, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <pvPortMalloc+0x72>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	617b      	str	r3, [r7, #20]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d06c      	beq.n	800875a <pvPortMalloc+0x152>
 8008680:	4b45      	ldr	r3, [pc, #276]	@ (8008798 <pvPortMalloc+0x190>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	429a      	cmp	r2, r3
 8008688:	d867      	bhi.n	800875a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800868a:	4b44      	ldr	r3, [pc, #272]	@ (800879c <pvPortMalloc+0x194>)
 800868c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800868e:	4b43      	ldr	r3, [pc, #268]	@ (800879c <pvPortMalloc+0x194>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008694:	e004      	b.n	80086a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d903      	bls.n	80086b2 <pvPortMalloc+0xaa>
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f1      	bne.n	8008696 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086b2:	4b37      	ldr	r3, [pc, #220]	@ (8008790 <pvPortMalloc+0x188>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d04e      	beq.n	800875a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2208      	movs	r2, #8
 80086c2:	4413      	add	r3, r2
 80086c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	2308      	movs	r3, #8
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	429a      	cmp	r2, r3
 80086dc:	d922      	bls.n	8008724 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <pvPortMalloc+0x104>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	613b      	str	r3, [r7, #16]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1ad2      	subs	r2, r2, r3
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800871e:	69b8      	ldr	r0, [r7, #24]
 8008720:	f000 f902 	bl	8008928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008724:	4b1c      	ldr	r3, [pc, #112]	@ (8008798 <pvPortMalloc+0x190>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	4a1a      	ldr	r2, [pc, #104]	@ (8008798 <pvPortMalloc+0x190>)
 8008730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008732:	4b19      	ldr	r3, [pc, #100]	@ (8008798 <pvPortMalloc+0x190>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b1a      	ldr	r3, [pc, #104]	@ (80087a0 <pvPortMalloc+0x198>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d203      	bcs.n	8008746 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800873e:	4b16      	ldr	r3, [pc, #88]	@ (8008798 <pvPortMalloc+0x190>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a17      	ldr	r2, [pc, #92]	@ (80087a0 <pvPortMalloc+0x198>)
 8008744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <pvPortMalloc+0x18c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	431a      	orrs	r2, r3
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800875a:	f7fe fefb 	bl	8007554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00d      	beq.n	8008784 <pvPortMalloc+0x17c>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	b672      	cpsid	i
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	b662      	cpsie	i
 800877c:	60fb      	str	r3, [r7, #12]
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <pvPortMalloc+0x178>
	return pvReturn;
 8008784:	69fb      	ldr	r3, [r7, #28]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3728      	adds	r7, #40	@ 0x28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	2000423c 	.word	0x2000423c
 8008794:	20004248 	.word	0x20004248
 8008798:	20004240 	.word	0x20004240
 800879c:	20004234 	.word	0x20004234
 80087a0:	20004244 	.word	0x20004244

080087a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04e      	beq.n	8008854 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087b6:	2308      	movs	r3, #8
 80087b8:	425b      	negs	r3, r3
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	4b24      	ldr	r3, [pc, #144]	@ (800885c <vPortFree+0xb8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4013      	ands	r3, r2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10d      	bne.n	80087ee <vPortFree+0x4a>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	b672      	cpsid	i
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	b662      	cpsie	i
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <vPortFree+0x6e>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	b672      	cpsid	i
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	b662      	cpsie	i
 800880a:	60bb      	str	r3, [r7, #8]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	4b11      	ldr	r3, [pc, #68]	@ (800885c <vPortFree+0xb8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d019      	beq.n	8008854 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d115      	bne.n	8008854 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4b0b      	ldr	r3, [pc, #44]	@ (800885c <vPortFree+0xb8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	43db      	mvns	r3, r3
 8008832:	401a      	ands	r2, r3
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008838:	f7fe fe7e 	bl	8007538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	4b07      	ldr	r3, [pc, #28]	@ (8008860 <vPortFree+0xbc>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4413      	add	r3, r2
 8008846:	4a06      	ldr	r2, [pc, #24]	@ (8008860 <vPortFree+0xbc>)
 8008848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800884a:	6938      	ldr	r0, [r7, #16]
 800884c:	f000 f86c 	bl	8008928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008850:	f7fe fe80 	bl	8007554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008854:	bf00      	nop
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20004248 	.word	0x20004248
 8008860:	20004240 	.word	0x20004240

08008864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800886a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800886e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008870:	4b27      	ldr	r3, [pc, #156]	@ (8008910 <prvHeapInit+0xac>)
 8008872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3307      	adds	r3, #7
 8008882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0307 	bic.w	r3, r3, #7
 800888a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	4a1f      	ldr	r2, [pc, #124]	@ (8008910 <prvHeapInit+0xac>)
 8008894:	4413      	add	r3, r2
 8008896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800889c:	4a1d      	ldr	r2, [pc, #116]	@ (8008914 <prvHeapInit+0xb0>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008914 <prvHeapInit+0xb0>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088b0:	2208      	movs	r2, #8
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <prvHeapInit+0xb4>)
 80088c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088c6:	4b14      	ldr	r3, [pc, #80]	@ (8008918 <prvHeapInit+0xb4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ce:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <prvHeapInit+0xb4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <prvHeapInit+0xb4>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	@ (800891c <prvHeapInit+0xb8>)
 80088f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4a09      	ldr	r2, [pc, #36]	@ (8008920 <prvHeapInit+0xbc>)
 80088fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088fc:	4b09      	ldr	r3, [pc, #36]	@ (8008924 <prvHeapInit+0xc0>)
 80088fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20000634 	.word	0x20000634
 8008914:	20004234 	.word	0x20004234
 8008918:	2000423c 	.word	0x2000423c
 800891c:	20004244 	.word	0x20004244
 8008920:	20004240 	.word	0x20004240
 8008924:	20004248 	.word	0x20004248

08008928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008930:	4b28      	ldr	r3, [pc, #160]	@ (80089d4 <prvInsertBlockIntoFreeList+0xac>)
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	e002      	b.n	800893c <prvInsertBlockIntoFreeList+0x14>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d8f7      	bhi.n	8008936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4413      	add	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d108      	bne.n	800896a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	441a      	add	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	441a      	add	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d118      	bne.n	80089b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d00d      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	441a      	add	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	e008      	b.n	80089b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089a6:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <prvInsertBlockIntoFreeList+0xb0>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e003      	b.n	80089b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d002      	beq.n	80089c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20004234 	.word	0x20004234
 80089d8:	2000423c 	.word	0x2000423c

080089dc <__malloc_lock>:
 80089dc:	4801      	ldr	r0, [pc, #4]	@ (80089e4 <__malloc_lock+0x8>)
 80089de:	f000 b88b 	b.w	8008af8 <__retarget_lock_acquire_recursive>
 80089e2:	bf00      	nop
 80089e4:	20004388 	.word	0x20004388

080089e8 <__malloc_unlock>:
 80089e8:	4801      	ldr	r0, [pc, #4]	@ (80089f0 <__malloc_unlock+0x8>)
 80089ea:	f000 b886 	b.w	8008afa <__retarget_lock_release_recursive>
 80089ee:	bf00      	nop
 80089f0:	20004388 	.word	0x20004388

080089f4 <memset>:
 80089f4:	4402      	add	r2, r0
 80089f6:	4603      	mov	r3, r0
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d100      	bne.n	80089fe <memset+0xa>
 80089fc:	4770      	bx	lr
 80089fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008a02:	e7f9      	b.n	80089f8 <memset+0x4>

08008a04 <_reclaim_reent>:
 8008a04:	4b29      	ldr	r3, [pc, #164]	@ (8008aac <_reclaim_reent+0xa8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4283      	cmp	r3, r0
 8008a0a:	b570      	push	{r4, r5, r6, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	d04b      	beq.n	8008aa8 <_reclaim_reent+0xa4>
 8008a10:	69c3      	ldr	r3, [r0, #28]
 8008a12:	b1ab      	cbz	r3, 8008a40 <_reclaim_reent+0x3c>
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	b16b      	cbz	r3, 8008a34 <_reclaim_reent+0x30>
 8008a18:	2500      	movs	r5, #0
 8008a1a:	69e3      	ldr	r3, [r4, #28]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	5959      	ldr	r1, [r3, r5]
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d13b      	bne.n	8008a9c <_reclaim_reent+0x98>
 8008a24:	3504      	adds	r5, #4
 8008a26:	2d80      	cmp	r5, #128	@ 0x80
 8008a28:	d1f7      	bne.n	8008a1a <_reclaim_reent+0x16>
 8008a2a:	69e3      	ldr	r3, [r4, #28]
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	68d9      	ldr	r1, [r3, #12]
 8008a30:	f000 f872 	bl	8008b18 <_free_r>
 8008a34:	69e3      	ldr	r3, [r4, #28]
 8008a36:	6819      	ldr	r1, [r3, #0]
 8008a38:	b111      	cbz	r1, 8008a40 <_reclaim_reent+0x3c>
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 f86c 	bl	8008b18 <_free_r>
 8008a40:	6961      	ldr	r1, [r4, #20]
 8008a42:	b111      	cbz	r1, 8008a4a <_reclaim_reent+0x46>
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 f867 	bl	8008b18 <_free_r>
 8008a4a:	69e1      	ldr	r1, [r4, #28]
 8008a4c:	b111      	cbz	r1, 8008a54 <_reclaim_reent+0x50>
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 f862 	bl	8008b18 <_free_r>
 8008a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a56:	b111      	cbz	r1, 8008a5e <_reclaim_reent+0x5a>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f85d 	bl	8008b18 <_free_r>
 8008a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a60:	b111      	cbz	r1, 8008a68 <_reclaim_reent+0x64>
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f858 	bl	8008b18 <_free_r>
 8008a68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008a6a:	b111      	cbz	r1, 8008a72 <_reclaim_reent+0x6e>
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f853 	bl	8008b18 <_free_r>
 8008a72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008a74:	b111      	cbz	r1, 8008a7c <_reclaim_reent+0x78>
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 f84e 	bl	8008b18 <_free_r>
 8008a7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008a7e:	b111      	cbz	r1, 8008a86 <_reclaim_reent+0x82>
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 f849 	bl	8008b18 <_free_r>
 8008a86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008a88:	b111      	cbz	r1, 8008a90 <_reclaim_reent+0x8c>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 f844 	bl	8008b18 <_free_r>
 8008a90:	6a23      	ldr	r3, [r4, #32]
 8008a92:	b14b      	cbz	r3, 8008aa8 <_reclaim_reent+0xa4>
 8008a94:	4620      	mov	r0, r4
 8008a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a9a:	4718      	bx	r3
 8008a9c:	680e      	ldr	r6, [r1, #0]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f83a 	bl	8008b18 <_free_r>
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	e7bb      	b.n	8008a20 <_reclaim_reent+0x1c>
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000010 	.word	0x20000010

08008ab0 <__libc_init_array>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ae8 <__libc_init_array+0x38>)
 8008ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8008aec <__libc_init_array+0x3c>)
 8008ab6:	1b64      	subs	r4, r4, r5
 8008ab8:	10a4      	asrs	r4, r4, #2
 8008aba:	2600      	movs	r6, #0
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	d109      	bne.n	8008ad4 <__libc_init_array+0x24>
 8008ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8008af0 <__libc_init_array+0x40>)
 8008ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8008af4 <__libc_init_array+0x44>)
 8008ac4:	f000 f872 	bl	8008bac <_init>
 8008ac8:	1b64      	subs	r4, r4, r5
 8008aca:	10a4      	asrs	r4, r4, #2
 8008acc:	2600      	movs	r6, #0
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	d105      	bne.n	8008ade <__libc_init_array+0x2e>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad8:	4798      	blx	r3
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7ee      	b.n	8008abc <__libc_init_array+0xc>
 8008ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae2:	4798      	blx	r3
 8008ae4:	3601      	adds	r6, #1
 8008ae6:	e7f2      	b.n	8008ace <__libc_init_array+0x1e>
 8008ae8:	08008c38 	.word	0x08008c38
 8008aec:	08008c38 	.word	0x08008c38
 8008af0:	08008c38 	.word	0x08008c38
 8008af4:	08008c3c 	.word	0x08008c3c

08008af8 <__retarget_lock_acquire_recursive>:
 8008af8:	4770      	bx	lr

08008afa <__retarget_lock_release_recursive>:
 8008afa:	4770      	bx	lr

08008afc <memcpy>:
 8008afc:	440a      	add	r2, r1
 8008afe:	4291      	cmp	r1, r2
 8008b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b04:	d100      	bne.n	8008b08 <memcpy+0xc>
 8008b06:	4770      	bx	lr
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b12:	4291      	cmp	r1, r2
 8008b14:	d1f9      	bne.n	8008b0a <memcpy+0xe>
 8008b16:	bd10      	pop	{r4, pc}

08008b18 <_free_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d041      	beq.n	8008ba4 <_free_r+0x8c>
 8008b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b24:	1f0c      	subs	r4, r1, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfb8      	it	lt
 8008b2a:	18e4      	addlt	r4, r4, r3
 8008b2c:	f7ff ff56 	bl	80089dc <__malloc_lock>
 8008b30:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba8 <_free_r+0x90>)
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	b933      	cbnz	r3, 8008b44 <_free_r+0x2c>
 8008b36:	6063      	str	r3, [r4, #4]
 8008b38:	6014      	str	r4, [r2, #0]
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b40:	f7ff bf52 	b.w	80089e8 <__malloc_unlock>
 8008b44:	42a3      	cmp	r3, r4
 8008b46:	d908      	bls.n	8008b5a <_free_r+0x42>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	1821      	adds	r1, r4, r0
 8008b4c:	428b      	cmp	r3, r1
 8008b4e:	bf01      	itttt	eq
 8008b50:	6819      	ldreq	r1, [r3, #0]
 8008b52:	685b      	ldreq	r3, [r3, #4]
 8008b54:	1809      	addeq	r1, r1, r0
 8008b56:	6021      	streq	r1, [r4, #0]
 8008b58:	e7ed      	b.n	8008b36 <_free_r+0x1e>
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	b10b      	cbz	r3, 8008b64 <_free_r+0x4c>
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d9fa      	bls.n	8008b5a <_free_r+0x42>
 8008b64:	6811      	ldr	r1, [r2, #0]
 8008b66:	1850      	adds	r0, r2, r1
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d10b      	bne.n	8008b84 <_free_r+0x6c>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	4401      	add	r1, r0
 8008b70:	1850      	adds	r0, r2, r1
 8008b72:	4283      	cmp	r3, r0
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	d1e0      	bne.n	8008b3a <_free_r+0x22>
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	6053      	str	r3, [r2, #4]
 8008b7e:	4408      	add	r0, r1
 8008b80:	6010      	str	r0, [r2, #0]
 8008b82:	e7da      	b.n	8008b3a <_free_r+0x22>
 8008b84:	d902      	bls.n	8008b8c <_free_r+0x74>
 8008b86:	230c      	movs	r3, #12
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	e7d6      	b.n	8008b3a <_free_r+0x22>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428b      	cmp	r3, r1
 8008b92:	bf04      	itt	eq
 8008b94:	6819      	ldreq	r1, [r3, #0]
 8008b96:	685b      	ldreq	r3, [r3, #4]
 8008b98:	6063      	str	r3, [r4, #4]
 8008b9a:	bf04      	itt	eq
 8008b9c:	1809      	addeq	r1, r1, r0
 8008b9e:	6021      	streq	r1, [r4, #0]
 8008ba0:	6054      	str	r4, [r2, #4]
 8008ba2:	e7ca      	b.n	8008b3a <_free_r+0x22>
 8008ba4:	bd38      	pop	{r3, r4, r5, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000424c 	.word	0x2000424c

08008bac <_init>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_fini>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr
