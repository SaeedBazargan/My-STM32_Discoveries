
Ethernet_RMII_FreeRTOS_Ping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da8  0801201c  0801201c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014dc4  08014dc4  000161cc  2**0
                  CONTENTS
  4 .ARM          00000008  08014dc4  08014dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014dcc  08014dcc  000161cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014dcc  08014dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014dd0  08014dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08014dd4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08014e60  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08014f00  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000be6c  200001cc  08014fa0  000161cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000c038  08014fa0  00017038  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000161cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020fc8  00000000  00000000  000161fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000063e2  00000000  00000000  000371c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001928  00000000  00000000  0003d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013b9  00000000  00000000  0003eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033a73  00000000  00000000  00040289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a223  00000000  00000000  00073cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104a12  00000000  00000000  0009df1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a2931  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ce8  00000000  00000000  001a2974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  001a965c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012004 	.word	0x08012004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08012004 	.word	0x08012004

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200001e8 	.word	0x200001e8
 80005d0:	2000023c 	.word	0x2000023c

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb3c 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f81b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f887 	bl	80006f4 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0x3c>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fc68 	bl	8003ed2 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <main+0x40>)
 8000606:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f003 fc4c 	bl	8003ea4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x38>
 8000610:	08012028 	.word	0x08012028
 8000614:	2000043c 	.word	0x2000043c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f010 fe47 	bl	80112ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a2a      	ldr	r2, [pc, #168]	@ (80006ec <SystemClock_Config+0xd4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xd4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <SystemClock_Config+0xd8>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000684:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f8ee 	bl	8002878 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f86d 	bl	8000780 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a6:	f002 f897 	bl	80027d8 <HAL_PWREx_EnableOverDrive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b0:	f000 f866 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2107      	movs	r1, #7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fb74 	bl	8002dc0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006de:	f000 f84f 	bl	8000780 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_GPIO_Init+0x74>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x74>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000774:	f002 fce2 	bl	800313c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f003 fc02 	bl	8003f82 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartDefaultTask+0xc>

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	@ 0x40
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fbac 	bl	8000f26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <NMI_Handler+0x4>

080007e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <MemManage_Handler+0x4>

080007f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <UsageFault_Handler+0x4>

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 fa5b 	bl	8000cd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800081a:	f005 fceb 	bl	80061f4 <xTaskGetSchedulerState>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d001      	beq.n	8000828 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000824:	f006 f8d0 	bl	80069c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <ETH_IRQHandler+0x10>)
 8000832:	f000 ff3d 	bl	80016b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20004e28 	.word	0x20004e28

08000840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return 1;
 8000844:	2301      	movs	r3, #1
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_kill>:

int _kill(int pid, int sig)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <_kill+0x20>)
 800085c:	2216      	movs	r2, #22
 800085e:	601a      	str	r2, [r3, #0]
  return -1;
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	2000bee8 	.word	0x2000bee8

08000874 <_exit>:

void _exit (int status)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ffe5 	bl	8000850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <_exit+0x12>

0800088a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e00a      	b.n	80008b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800089c:	f3af 8000 	nop.w
 80008a0:	4601      	mov	r1, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	60ba      	str	r2, [r7, #8]
 80008a8:	b2ca      	uxtb	r2, r1
 80008aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dbf0      	blt.n	800089c <_read+0x12>
  }

  return len;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e009      	b.n	80008ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3301      	adds	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbf1      	blt.n	80008d6 <_write+0x12>
  }
  return len;
 80008f2:	687b      	ldr	r3, [r7, #4]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <_close>:

int _close(int file)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000924:	605a      	str	r2, [r3, #4]
  return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_isatty>:

int _isatty(int file)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800093c:	2301      	movs	r3, #1
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d205      	bcs.n	80009a0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <_sbrk+0x6c>)
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	20050000 	.word	0x20050000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	20000440 	.word	0x20000440
 80009cc:	2000c038 	.word	0x2000c038
 80009d0:	2000bee8 	.word	0x2000bee8

080009d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fc:	f7ff ffea 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f010 fc97 	bl	8011358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fdd3 	bl	80005d4 <main>
  bx  lr    
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000a3c:	08014dd4 	.word	0x08014dd4
  ldr r2, =_sbss
 8000a40:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000a44:	2000c038 	.word	0x2000c038

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>

08000a4a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00b      	beq.n	8000a72 <LAN8742_RegisterBusIO+0x28>
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <LAN8742_RegisterBusIO+0x28>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <LAN8742_RegisterBusIO+0x28>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e014      	b.n	8000aa2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	691a      	ldr	r2, [r3, #16]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d139      	bne.n	8000b3e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2220      	movs	r2, #32
 8000adc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e01c      	b.n	8000b1e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f107 020c 	add.w	r2, r7, #12
 8000aec:	2112      	movs	r1, #18
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	4798      	blx	r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da03      	bge.n	8000b00 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000af8:	f06f 0304 	mvn.w	r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000afe:	e00b      	b.n	8000b18 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 031f 	and.w	r3, r3, #31
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d105      	bne.n	8000b18 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
         break;
 8000b16:	e005      	b.n	8000b24 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b1f      	cmp	r3, #31
 8000b22:	d9df      	bls.n	8000ae4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b1f      	cmp	r3, #31
 8000b2a:	d902      	bls.n	8000b32 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000b2c:	f06f 0302 	mvn.w	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000b3e:	693b      	ldr	r3, [r7, #16]
 }
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6810      	ldr	r0, [r2, #0]
 8000b5c:	f107 020c 	add.w	r2, r7, #12
 8000b60:	2101      	movs	r1, #1
 8000b62:	4798      	blx	r3
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da02      	bge.n	8000b70 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b6a:	f06f 0304 	mvn.w	r3, #4
 8000b6e:	e06e      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6810      	ldr	r0, [r2, #0]
 8000b78:	f107 020c 	add.w	r2, r7, #12
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4798      	blx	r3
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da02      	bge.n	8000b8c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b86:	f06f 0304 	mvn.w	r3, #4
 8000b8a:	e060      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e059      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6810      	ldr	r0, [r2, #0]
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4798      	blx	r3
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da02      	bge.n	8000bb6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000bb0:	f06f 0304 	mvn.w	r3, #4
 8000bb4:	e04b      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11b      	bne.n	8000bf8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <LAN8742_GetLinkState+0x90>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e03a      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e033      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e02c      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	e02a      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	6810      	ldr	r0, [r2, #0]
 8000c00:	f107 020c 	add.w	r2, r7, #12
 8000c04:	211f      	movs	r1, #31
 8000c06:	4798      	blx	r3
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da02      	bge.n	8000c14 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000c0e:	f06f 0304 	mvn.w	r3, #4
 8000c12:	e01c      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	e015      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f003 031c 	and.w	r3, r3, #28
 8000c28:	2b18      	cmp	r3, #24
 8000c2a:	d101      	bne.n	8000c30 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e00e      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 031c 	and.w	r3, r3, #28
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d101      	bne.n	8000c3e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e007      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f003 031c 	and.w	r3, r3, #28
 8000c44:	2b14      	cmp	r3, #20
 8000c46:	d101      	bne.n	8000c4c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e000      	b.n	8000c4e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000c4c:	2305      	movs	r3, #5
    }
  }
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f958 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c60:	200f      	movs	r0, #15
 8000c62:	f000 f805 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c66:	f7ff fd91 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f973 	bl	8000f7a <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f93b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000444 	.word	0x20000444

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000444 	.word	0x20000444

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetREVID+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0c1b      	lsrs	r3, r3, #16
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e0042000 	.word	0xe0042000

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0000 	.word	0x05fa0000

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e086      	b.n	80010b4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d106      	bne.n	8000fbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2223      	movs	r2, #35	@ 0x23
 8000fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f002 fd19 	bl	80039f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80010bc <HAL_ETH_Init+0x128>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80010bc <HAL_ETH_Init+0x128>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b3c      	ldr	r3, [pc, #240]	@ (80010bc <HAL_ETH_Init+0x128>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80010c0 <HAL_ETH_Init+0x12c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a39      	ldr	r2, [pc, #228]	@ (80010c0 <HAL_ETH_Init+0x12c>)
 8000fdc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000fe0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <HAL_ETH_Init+0x12c>)
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	4935      	ldr	r1, [pc, #212]	@ (80010c0 <HAL_ETH_Init+0x12c>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <HAL_ETH_Init+0x12c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800100a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100c:	f7ff fe74 	bl	8000cf8 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001012:	e011      	b.n	8001038 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001014:	f7ff fe70 	bl	8000cf8 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001022:	d909      	bls.n	8001038 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2204      	movs	r2, #4
 8001028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	22e0      	movs	r2, #224	@ 0xe0
 8001030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e03d      	b.n	80010b4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1e4      	bne.n	8001014 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 ff5c 	bl	8001f08 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 f807 	bl	8002064 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f001 f85d 	bl	8002116 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	461a      	mov	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 ffc5 	bl	8001ff4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_ETH_Init+0x130>)
 8001088:	430b      	orrs	r3, r1
 800108a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800109e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2210      	movs	r2, #16
 80010ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	00020060 	.word	0x00020060

080010c8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d15f      	bne.n	800119a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2223      	movs	r2, #35	@ 0x23
 80010de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2204      	movs	r2, #4
 80010ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f9f6 	bl	80014e0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fe07 	bl	8000d10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800111c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001120:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001138:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fd80 	bl	8001c40 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fdd9 	bl	8000d10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0204 	orr.w	r2, r2, #4
 8001174:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800117e:	69d9      	ldr	r1, [r3, #28]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_ETH_Start_IT+0xdc>)
 8001186:	430b      	orrs	r3, r1
 8001188:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800118c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2223      	movs	r2, #35	@ 0x23
 8001192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
  }
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0001a0c1 	.word	0x0001a0c1

080011a8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011b6:	2b23      	cmp	r3, #35	@ 0x23
 80011b8:	d16e      	bne.n	8001298 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2223      	movs	r2, #35	@ 0x23
 80011be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011ca:	69d9      	ldr	r1, [r3, #28]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <HAL_ETH_Stop_IT+0xfc>)
 80011d2:	400b      	ands	r3, r1
 80011d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011d8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80011ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011f0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	f023 0302 	bic.w	r3, r3, #2
 8001204:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001208:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0204 	bic.w	r2, r2, #4
 8001218:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fd74 	bl	8000d10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fd05 	bl	8001c40 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0208 	bic.w	r2, r2, #8
 8001244:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff fd5e 	bl	8000d10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e00e      	b.n	8001280 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	3212      	adds	r2, #18
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d9ed      	bls.n	8001262 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2210      	movs	r2, #16
 8001290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
  }
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	fffe5f3e 	.word	0xfffe5f3e

080012a8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d109      	bne.n	80012cc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e045      	b.n	8001358 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012d2:	2b23      	cmp	r3, #35	@ 0x23
 80012d4:	d13f      	bne.n	8001356 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80012de:	2201      	movs	r2, #1
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 ff86 	bl	80021f4 <ETH_Prepare_Tx_Descriptors>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f4:	f043 0202 	orr.w	r2, r3, #2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e02a      	b.n	8001358 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001302:	f3bf 8f4f 	dsb	sy
}
 8001306:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001316:	2b03      	cmp	r3, #3
 8001318:	d904      	bls.n	8001324 <HAL_ETH_Transmit_IT+0x7c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	1f1a      	subs	r2, r3, #4
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800133e:	461a      	mov	r2, r3
 8001340:	2304      	movs	r3, #4
 8001342:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134c:	461a      	mov	r2, r3
 800134e:	2300      	movs	r3, #0
 8001350:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d109      	bne.n	800138c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0a4      	b.n	80014d6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001392:	2b23      	cmp	r3, #35	@ 0x23
 8001394:	d001      	beq.n	800139a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e09d      	b.n	80014d6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	3212      	adds	r2, #18
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80013b0:	f1c3 0304 	rsb	r3, r3, #4
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80013b6:	e066      	b.n	8001486 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <HAL_ETH_ReadData+0x88>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d03c      	beq.n	8001462 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800140a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800143c:	461a      	mov	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	b29b      	uxth	r3, r3
 8001442:	f002 fc83 	bl	8003d4c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	441a      	add	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d902      	bls.n	8001474 <HAL_ETH_ReadData+0x114>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b04      	subs	r3, #4
 8001472:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	3212      	adds	r2, #18
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800148a:	2b00      	cmp	r3, #0
 800148c:	db06      	blt.n	800149c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	429a      	cmp	r2, r3
 8001494:	d202      	bcs.n	800149c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001496:	7cfb      	ldrb	r3, [r7, #19]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d08d      	beq.n	80013b8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	441a      	add	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f815 	bl	80014e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80014bc:	7cfb      	ldrb	r3, [r7, #19]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80014ec:	2301      	movs	r3, #1
 80014ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	3212      	adds	r2, #18
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001506:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001508:	e042      	b.n	8001590 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d112      	bne.n	8001538 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fbe8 	bl	8003cec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	74fb      	strb	r3, [r7, #19]
 8001526:	e007      	b.n	8001538 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	461a      	mov	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	461a      	mov	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d028      	beq.n	8001590 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <ETH_UpdateDescriptor+0x104>)
 800154c:	4313      	orrs	r3, r2
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	6053      	str	r3, [r2, #4]
 8001552:	e005      	b.n	8001560 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	3301      	adds	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d902      	bls.n	800157e <ETH_UpdateDescriptor+0x9e>
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	3b04      	subs	r3, #4
 800157c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	3212      	adds	r2, #18
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	617b      	str	r3, [r7, #20]
      desccount--;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	3b01      	subs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <ETH_UpdateDescriptor+0xbc>
 8001596:	7cfb      	ldrb	r3, [r7, #19]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1b6      	bne.n	800150a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d01a      	beq.n	80015dc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015b0:	f3bf 8f5f 	dmb	sy
}
 80015b4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	18ca      	adds	r2, r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ce:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	80004000 	.word	0x80004000

080015e8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3318      	adds	r3, #24
 80015f4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001606:	e047      	b.n	8001698 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001608:	2301      	movs	r3, #1
 800160a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3b01      	subs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3304      	adds	r3, #4
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10a      	bne.n	8001638 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	3301      	adds	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d902      	bls.n	8001634 <HAL_ETH_ReleaseTxPacket+0x4c>
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	3b04      	subs	r3, #4
 8001632:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02c      	beq.n	8001698 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db1f      	blt.n	8001694 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	3304      	adds	r3, #4
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fbb5 	bl	8003dd0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	3304      	adds	r3, #4
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	3301      	adds	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d902      	bls.n	8001686 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3b04      	subs	r3, #4
 8001684:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001692:	e001      	b.n	8001698 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_ETH_ReleaseTxPacket+0xbc>
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1b1      	bne.n	8001608 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016be:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80016d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001808 <HAL_ETH_IRQHandler+0x158>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00e      	beq.n	8001706 <HAL_ETH_IRQHandler+0x56>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b43      	ldr	r3, [pc, #268]	@ (800180c <HAL_ETH_IRQHandler+0x15c>)
 80016fe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 fe89 	bl	8003418 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00f      	beq.n	8001730 <HAL_ETH_IRQHandler+0x80>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001722:	461a      	mov	r2, r3
 8001724:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001728:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f001 fe84 	bl	8003438 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d042      	beq.n	80017c0 <HAL_ETH_IRQHandler+0x110>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03d      	beq.n	80017c0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174a:	f043 0208 	orr.w	r2, r3, #8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01a      	beq.n	8001794 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	4b29      	ldr	r3, [pc, #164]	@ (8001810 <HAL_ETH_IRQHandler+0x160>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001784:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001788:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	22e0      	movs	r2, #224	@ 0xe0
 800178e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001792:	e012      	b.n	80017ba <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	f248 6380 	movw	r3, #34432	@ 0x8680
 80017a2:	4013      	ands	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b2:	461a      	mov	r2, r3
 80017b4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80017b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f001 fe4c 	bl	8003458 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00e      	beq.n	80017e8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f81a 	bl	8001814 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_ETH_IRQHandler+0x158>)
 80017f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017f8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f814 	bl	8001828 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001800:	bf00      	nop
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40013c00 	.word	0x40013c00
 800180c:	00010040 	.word	0x00010040
 8001810:	007e2000 	.word	0x007e2000

08001814 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 031c 	and.w	r3, r3, #28
 8001858:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	02db      	lsls	r3, r3, #11
 800185e:	b29b      	uxth	r3, r3
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800188c:	f7ff fa34 	bl	8000cf8 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001892:	e00d      	b.n	80018b0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001894:	f7ff fa30 	bl	8000cf8 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a2:	d301      	bcc.n	80018a8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e010      	b.n	80018ca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ec      	bne.n	8001894 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 031c 	and.w	r3, r3, #28
 80018ee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	019b      	lsls	r3, r3, #6
 8001900:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800192c:	f7ff f9e4 	bl	8000cf8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001932:	e00d      	b.n	8001950 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001934:	f7ff f9e0 	bl	8000cf8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001942:	d301      	bcc.n	8001948 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e009      	b.n	800195c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ec      	bne.n	8001934 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0e6      	b.n	8001b46 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf14      	ite	ne
 8001986:	2301      	movne	r3, #1
 8001988:	2300      	moveq	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2301      	movne	r3, #1
 8001b1c:	2300      	moveq	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00b      	b.n	8001b7e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d105      	bne.n	8001b7c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f88a 	bl	8001c8c <ETH_SetMACConfig>

    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 031c 	bic.w	r3, r3, #28
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ba0:	f001 fac0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8001ba4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <HAL_ETH_SetMDIOClockRange+0x74>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d804      	bhi.n	8001bb8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e019      	b.n	8001bec <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d204      	bcs.n	8001bca <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f043 030c 	orr.w	r3, r3, #12
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e010      	b.n	8001bec <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d90c      	bls.n	8001bec <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d804      	bhi.n	8001be4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e003      	b.n	8001bec <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	02160ebf 	.word	0x02160ebf
 8001c00:	03938700 	.word	0x03938700
 8001c04:	05f5e0ff 	.word	0x05f5e0ff
 8001c08:	08f0d17f 	.word	0x08f0d17f

08001c0c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c62:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff f84d 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c80:	6193      	str	r3, [r2, #24]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <ETH_SetMACConfig+0x164>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7b9b      	ldrb	r3, [r3, #14]
 8001caa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	7c12      	ldrb	r2, [r2, #16]
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d102      	bne.n	8001cba <ETH_SetMACConfig+0x2e>
 8001cb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cb8:	e000      	b.n	8001cbc <ETH_SetMACConfig+0x30>
 8001cba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cbc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	7c52      	ldrb	r2, [r2, #17]
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	d102      	bne.n	8001ccc <ETH_SetMACConfig+0x40>
 8001cc6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cca:	e000      	b.n	8001cce <ETH_SetMACConfig+0x42>
 8001ccc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7fdb      	ldrb	r3, [r3, #31]
 8001cda:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cdc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ce2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	7f92      	ldrb	r2, [r2, #30]
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d102      	bne.n	8001cf2 <ETH_SetMACConfig+0x66>
 8001cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf0:	e000      	b.n	8001cf4 <ETH_SetMACConfig+0x68>
 8001cf2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cf4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	7f1b      	ldrb	r3, [r3, #28]
 8001cfa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cfc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	791b      	ldrb	r3, [r3, #4]
 8001d08:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d102      	bne.n	8001d1c <ETH_SetMACConfig+0x90>
 8001d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d1a:	e000      	b.n	8001d1e <ETH_SetMACConfig+0x92>
 8001d1c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	7bdb      	ldrb	r3, [r3, #15]
 8001d24:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d26:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d34:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7fe ffde 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d72:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d7a:	2a00      	cmp	r2, #0
 8001d7c:	d101      	bne.n	8001d82 <ETH_SetMACConfig+0xf6>
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	e000      	b.n	8001d84 <ETH_SetMACConfig+0xf8>
 8001d82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d84:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d92:	2a01      	cmp	r2, #1
 8001d94:	d101      	bne.n	8001d9a <ETH_SetMACConfig+0x10e>
 8001d96:	2208      	movs	r2, #8
 8001d98:	e000      	b.n	8001d9c <ETH_SetMACConfig+0x110>
 8001d9a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d9c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001da4:	2a01      	cmp	r2, #1
 8001da6:	d101      	bne.n	8001dac <ETH_SetMACConfig+0x120>
 8001da8:	2204      	movs	r2, #4
 8001daa:	e000      	b.n	8001dae <ETH_SetMACConfig+0x122>
 8001dac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001db6:	2a01      	cmp	r2, #1
 8001db8:	d101      	bne.n	8001dbe <ETH_SetMACConfig+0x132>
 8001dba:	2202      	movs	r2, #2
 8001dbc:	e000      	b.n	8001dc0 <ETH_SetMACConfig+0x134>
 8001dbe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7fe ff99 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	fd20810f 	.word	0xfd20810f

08001df4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <ETH_SetDMAConfig+0x110>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	7b1b      	ldrb	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <ETH_SetDMAConfig+0x2c>
 8001e1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e1e:	e000      	b.n	8001e22 <ETH_SetDMAConfig+0x2e>
 8001e20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7b5b      	ldrb	r3, [r3, #13]
 8001e26:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e28:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	7f52      	ldrb	r2, [r2, #29]
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	d102      	bne.n	8001e38 <ETH_SetDMAConfig+0x44>
 8001e32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e36:	e000      	b.n	8001e3a <ETH_SetDMAConfig+0x46>
 8001e38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	7b9b      	ldrb	r3, [r3, #14]
 8001e40:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e42:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	7f1b      	ldrb	r3, [r3, #28]
 8001e4e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	7f9b      	ldrb	r3, [r3, #30]
 8001e56:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e58:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e66:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7fe ff40 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	791b      	ldrb	r3, [r3, #4]
 8001ea2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ea8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001eae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eb4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ebc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ebe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ec6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ecc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eda:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7fe ff11 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f8de3f23 	.word	0xf8de3f23

08001f08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0a6      	sub	sp, #152	@ 0x98
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f74:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fe7f 	bl	8001c8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fc4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fc8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff05 	bl	8001df4 <ETH_SetDMAConfig>
}
 8001fea:	bf00      	nop
 8001fec:	3798      	adds	r7, #152	@ 0x98
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3305      	adds	r3, #5
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	3204      	adds	r2, #4
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <ETH_MACAddressConfig+0x68>)
 8002016:	4413      	add	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3303      	adds	r3, #3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	061a      	lsls	r2, r3, #24
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3302      	adds	r3, #2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	4313      	orrs	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <ETH_MACAddressConfig+0x6c>)
 8002046:	4413      	add	r3, r2
 8002048:	461a      	mov	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40028040 	.word	0x40028040
 8002060:	40028044 	.word	0x40028044

08002064 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e03e      	b.n	80020f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	3206      	adds	r2, #6
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d80c      	bhi.n	80020d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68d9      	ldr	r1, [r3, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	e004      	b.n	80020de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d9bd      	bls.n	8002072 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e048      	b.n	80021b6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002160:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	3212      	adds	r2, #18
 8002182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d80c      	bhi.n	80021a6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6919      	ldr	r1, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	e004      	b.n	80021b0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d9b3      	bls.n	8002124 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b091      	sub	sp, #68	@ 0x44
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3318      	adds	r3, #24
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002236:	d007      	beq.n	8002248 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	3304      	adds	r3, #4
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	e111      	b.n	8002470 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800224c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224e:	3301      	adds	r3, #1
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4b86      	ldr	r3, [pc, #536]	@ (800247c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002262:	4013      	ands	r3, r2
 8002264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002266:	6852      	ldr	r2, [r2, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	431a      	orrs	r2, r3
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80022ce:	e082      	b.n	80023d6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e005      	b.n	80022fc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fe:	3301      	adds	r3, #1
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002304:	2b03      	cmp	r3, #3
 8002306:	d902      	bls.n	800230e <ETH_Prepare_Tx_Descriptors+0x11a>
 8002308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230a:	3b04      	subs	r3, #4
 800230c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002324:	d007      	beq.n	8002336 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232a:	3304      	adds	r3, #4
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d029      	beq.n	800238a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002348:	e019      	b.n	800237e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800234a:	f3bf 8f5f 	dmb	sy
}
 800234e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800235c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800235e:	3301      	adds	r3, #1
 8002360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002364:	2b03      	cmp	r3, #3
 8002366:	d902      	bls.n	800236e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800236a:	3b04      	subs	r3, #4
 800236c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237a:	3301      	adds	r3, #1
 800237c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800237e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	429a      	cmp	r2, r3
 8002384:	d3e1      	bcc.n	800234a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	e072      	b.n	8002470 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002398:	3301      	adds	r3, #1
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4b32      	ldr	r3, [pc, #200]	@ (800247c <ETH_Prepare_Tx_Descriptors+0x288>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023b6:	6852      	ldr	r2, [r2, #4]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80023be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c0:	3301      	adds	r3, #1
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80023c4:	f3bf 8f5f 	dmb	sy
}
 80023c8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f47f af78 	bne.w	80022d0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e005      	b.n	8002400 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	6a3a      	ldr	r2, [r7, #32]
 8002410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002414:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002416:	f3bf 8f5f 	dmb	sy
}
 800241a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002426:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800242c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800242e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002430:	3304      	adds	r3, #4
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800243c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243e:	f3ef 8310 	mrs	r3, PRIMASK
 8002442:	613b      	str	r3, [r7, #16]
  return(result);
 8002444:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	2301      	movs	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f383 8810 	msr	PRIMASK, r3
}
 8002452:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245a:	4413      	add	r3, r2
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	629a      	str	r2, [r3, #40]	@ 0x28
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f383 8810 	msr	PRIMASK, r3
}
 800246c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3744      	adds	r7, #68	@ 0x44
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	ffffe000 	.word	0xffffe000

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	@ 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e175      	b.n	800278c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 8164 	bne.w	8002786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d005      	beq.n	80024d6 <HAL_GPIO_Init+0x56>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d130      	bne.n	8002538 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80be 	beq.w	8002786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	4b66      	ldr	r3, [pc, #408]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	4a65      	ldr	r2, [pc, #404]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002614:	6453      	str	r3, [r2, #68]	@ 0x44
 8002616:	4b63      	ldr	r3, [pc, #396]	@ (80027a4 <HAL_GPIO_Init+0x324>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002622:	4a61      	ldr	r2, [pc, #388]	@ (80027a8 <HAL_GPIO_Init+0x328>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a58      	ldr	r2, [pc, #352]	@ (80027ac <HAL_GPIO_Init+0x32c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d037      	beq.n	80026be <HAL_GPIO_Init+0x23e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a57      	ldr	r2, [pc, #348]	@ (80027b0 <HAL_GPIO_Init+0x330>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d031      	beq.n	80026ba <HAL_GPIO_Init+0x23a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a56      	ldr	r2, [pc, #344]	@ (80027b4 <HAL_GPIO_Init+0x334>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d02b      	beq.n	80026b6 <HAL_GPIO_Init+0x236>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a55      	ldr	r2, [pc, #340]	@ (80027b8 <HAL_GPIO_Init+0x338>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x232>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a54      	ldr	r2, [pc, #336]	@ (80027bc <HAL_GPIO_Init+0x33c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x22e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a53      	ldr	r2, [pc, #332]	@ (80027c0 <HAL_GPIO_Init+0x340>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x22a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <HAL_GPIO_Init+0x344>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x226>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a51      	ldr	r2, [pc, #324]	@ (80027c8 <HAL_GPIO_Init+0x348>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x222>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a50      	ldr	r2, [pc, #320]	@ (80027cc <HAL_GPIO_Init+0x34c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x21e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4f      	ldr	r2, [pc, #316]	@ (80027d0 <HAL_GPIO_Init+0x350>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x21a>
 8002696:	2309      	movs	r3, #9
 8002698:	e012      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 800269a:	230a      	movs	r3, #10
 800269c:	e010      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 800269e:	2308      	movs	r3, #8
 80026a0:	e00e      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00c      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026a6:	2306      	movs	r3, #6
 80026a8:	e00a      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026aa:	2305      	movs	r3, #5
 80026ac:	e008      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026b2:	2303      	movs	r3, #3
 80026b4:	e004      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e002      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026be:	2300      	movs	r3, #0
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f002 0203 	and.w	r2, r2, #3
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4093      	lsls	r3, r2
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026d0:	4935      	ldr	r1, [pc, #212]	@ (80027a8 <HAL_GPIO_Init+0x328>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026de:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002702:	4a34      	ldr	r2, [pc, #208]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002708:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800272c:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002732:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002756:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002780:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <HAL_GPIO_Init+0x354>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	f67f ae86 	bls.w	80024a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40013800 	.word	0x40013800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020400 	.word	0x40020400
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40020c00 	.word	0x40020c00
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40021400 	.word	0x40021400
 80027c4:	40021800 	.word	0x40021800
 80027c8:	40021c00 	.word	0x40021c00
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40022400 	.word	0x40022400
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b23      	ldr	r3, [pc, #140]	@ (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a22      	ldr	r2, [pc, #136]	@ (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002806:	f7fe fa77 	bl	8000cf8 <HAL_GetTick>
 800280a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800280c:	e009      	b.n	8002822 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800280e:	f7fe fa73 	bl	8000cf8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800281c:	d901      	bls.n	8002822 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e022      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282e:	d1ee      	bne.n	800280e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283c:	f7fe fa5c 	bl	8000cf8 <HAL_GetTick>
 8002840:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002842:	e009      	b.n	8002858 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002844:	f7fe fa58 	bl	8000cf8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002852:	d901      	bls.n	8002858 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e007      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002864:	d1ee      	bne.n	8002844 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e291      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8087 	beq.w	80029aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800289c:	4b96      	ldr	r3, [pc, #600]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a8:	4b93      	ldr	r3, [pc, #588]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d112      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
 80028b4:	4b90      	ldr	r3, [pc, #576]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b8d      	ldr	r3, [pc, #564]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x130>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d168      	bne.n	80029a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e26b      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x7a>
 80028e4:	4b84      	ldr	r3, [pc, #528]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a83      	ldr	r2, [pc, #524]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e02e      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x9c>
 80028fa:	4b7f      	ldr	r3, [pc, #508]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7e      	ldr	r2, [pc, #504]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7b      	ldr	r2, [pc, #492]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800290c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0xc0>
 800291e:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a72      	ldr	r2, [pc, #456]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 8002938:	4b6f      	ldr	r3, [pc, #444]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6e      	ldr	r2, [pc, #440]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe f9ce 	bl	8000cf8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe f9ca 	bl	8000cf8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	@ 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e21f      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe f9ba 	bl	8000cf8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe f9b6 	bl	8000cf8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e20b      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x110>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d069      	beq.n	8002a8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b6:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x190>
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e1df      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	493d      	ldr	r1, [pc, #244]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	e040      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe f96c 	bl	8000cf8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe f968 	bl	8000cf8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1bd      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b30      	ldr	r3, [pc, #192]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4929      	ldr	r1, [pc, #164]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
 8002a56:	e018      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a26      	ldr	r2, [pc, #152]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe f948 	bl	8000cf8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7fe f944 	bl	8000cf8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e199      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d038      	beq.n	8002b08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d019      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9e:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa2:	4a15      	ldr	r2, [pc, #84]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe f925 	bl	8000cf8 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7fe f921 	bl	8000cf8 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e176      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x23a>
 8002ad0:	e01a      	b.n	8002b08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe f90b 	bl	8000cf8 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe f907 	bl	8000cf8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d903      	bls.n	8002afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e15c      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
 8002af8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b91      	ldr	r3, [pc, #580]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a4 	beq.w	8002c5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b8b      	ldr	r3, [pc, #556]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4a87      	ldr	r2, [pc, #540]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2e:	4b85      	ldr	r3, [pc, #532]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3e:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe f8cf 	bl	8000cf8 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe f8cb 	bl	8000cf8 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	@ 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e120      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	4b75      	ldr	r3, [pc, #468]	@ (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x31a>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x33c>
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a69      	ldr	r2, [pc, #420]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba6:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	4a66      	ldr	r2, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x35e>
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc0:	4a60      	ldr	r2, [pc, #384]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a5a      	ldr	r2, [pc, #360]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	4b58      	ldr	r3, [pc, #352]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	4a57      	ldr	r2, [pc, #348]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe f87f 	bl	8000cf8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe f87b 	bl	8000cf8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0ce      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x386>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe f869 	bl	8000cf8 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe f865 	bl	8000cf8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a4 	beq.w	8002db0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d06b      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d149      	bne.n	8002d10 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe f836 	bl	8000cf8 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe f832 	bl	8000cf8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e087      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002cda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe f806 	bl	8000cf8 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe f802 	bl	8000cf8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e057      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x478>
 8002d0e:	e04f      	b.n	8002db0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0b      	ldr	r2, [pc, #44]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fd ffec 	bl	8000cf8 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fd ffe8 	bl	8000cf8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e03d      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4ac>
 8002d42:	e035      	b.n	8002db0 <HAL_RCC_OscConfig+0x538>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_RCC_OscConfig+0x544>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d028      	beq.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d121      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d111      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d0      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b67      	ldr	r3, [pc, #412]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4965      	ldr	r1, [pc, #404]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d040      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e073      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06b      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4936      	ldr	r1, [pc, #216]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fd ff20 	bl	8000cf8 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fd ff1c 	bl	8000cf8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e053      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d210      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 020f 	bic.w	r2, r3, #15
 8002efa:	4922      	ldr	r1, [pc, #136]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	@ (8002f8c <HAL_RCC_ClockConfig+0x1cc>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <HAL_RCC_ClockConfig+0x1d0>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <HAL_RCC_ClockConfig+0x1d4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fe7c 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08014b9c 	.word	0x08014b9c
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b090      	sub	sp, #64	@ 0x40
 8002f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fa8:	2300      	movs	r3, #0
 8002faa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	f200 80a1 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x34>
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fca:	e09b      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b53      	ldr	r3, [pc, #332]	@ (800311c <HAL_RCC_GetSysClockFreq+0x184>)
 8002fce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fd0:	e09b      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd2:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fd6:	e098      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fe0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003000:	2100      	movs	r1, #0
 8003002:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x188>)
 8003004:	fb03 f201 	mul.w	r2, r3, r1
 8003008:	2300      	movs	r3, #0
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	4413      	add	r3, r2
 8003010:	4a43      	ldr	r2, [pc, #268]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x188>)
 8003012:	fba0 1202 	umull	r1, r2, r0, r2
 8003016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003018:	460a      	mov	r2, r1
 800301a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800301c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800301e:	4413      	add	r3, r2
 8003020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003024:	2200      	movs	r2, #0
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	61fa      	str	r2, [r7, #28]
 800302a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800302e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003032:	f7fd f93d 	bl	80002b0 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4613      	mov	r3, r2
 800303c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303e:	e053      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003040:	4b35      	ldr	r3, [pc, #212]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	2200      	movs	r2, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	617a      	str	r2, [r7, #20]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003052:	f04f 0b00 	mov.w	fp, #0
 8003056:	4652      	mov	r2, sl
 8003058:	465b      	mov	r3, fp
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	0159      	lsls	r1, r3, #5
 8003064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003068:	0150      	lsls	r0, r2, #5
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	ebb2 080a 	subs.w	r8, r2, sl
 8003072:	eb63 090b 	sbc.w	r9, r3, fp
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003082:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003086:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800308a:	ebb2 0408 	subs.w	r4, r2, r8
 800308e:	eb63 0509 	sbc.w	r5, r3, r9
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	00eb      	lsls	r3, r5, #3
 800309c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a0:	00e2      	lsls	r2, r4, #3
 80030a2:	4614      	mov	r4, r2
 80030a4:	461d      	mov	r5, r3
 80030a6:	eb14 030a 	adds.w	r3, r4, sl
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	eb45 030b 	adc.w	r3, r5, fp
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030be:	4629      	mov	r1, r5
 80030c0:	028b      	lsls	r3, r1, #10
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c8:	4621      	mov	r1, r4
 80030ca:	028a      	lsls	r2, r1, #10
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d2:	2200      	movs	r2, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	60fa      	str	r2, [r7, #12]
 80030d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030dc:	f7fd f8e8 	bl	80002b0 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80030f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetSysClockFreq+0x184>)
 8003106:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800310c:	4618      	mov	r0, r3
 800310e:	3740      	adds	r7, #64	@ 0x40
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	00f42400 	.word	0x00f42400
 8003120:	017d7840 	.word	0x017d7840

08003124 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	b08c      	sub	sp, #48	@ 0x30
 8003140:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003142:	4b8f      	ldr	r3, [pc, #572]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003144:	22c0      	movs	r2, #192	@ 0xc0
 8003146:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003148:	4b8d      	ldr	r3, [pc, #564]	@ (8003380 <MX_LWIP_Init+0x244>)
 800314a:	22a8      	movs	r2, #168	@ 0xa8
 800314c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800314e:	4b8c      	ldr	r3, [pc, #560]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003150:	2201      	movs	r2, #1
 8003152:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 54;
 8003154:	4b8a      	ldr	r3, [pc, #552]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003156:	2236      	movs	r2, #54	@ 0x36
 8003158:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800315a:	4b8a      	ldr	r3, [pc, #552]	@ (8003384 <MX_LWIP_Init+0x248>)
 800315c:	22ff      	movs	r2, #255	@ 0xff
 800315e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003160:	4b88      	ldr	r3, [pc, #544]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003162:	22ff      	movs	r2, #255	@ 0xff
 8003164:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003166:	4b87      	ldr	r3, [pc, #540]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003168:	22ff      	movs	r2, #255	@ 0xff
 800316a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800316c:	4b85      	ldr	r3, [pc, #532]	@ (8003384 <MX_LWIP_Init+0x248>)
 800316e:	2200      	movs	r2, #0
 8003170:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003172:	4b85      	ldr	r3, [pc, #532]	@ (8003388 <MX_LWIP_Init+0x24c>)
 8003174:	22c0      	movs	r2, #192	@ 0xc0
 8003176:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003178:	4b83      	ldr	r3, [pc, #524]	@ (8003388 <MX_LWIP_Init+0x24c>)
 800317a:	22a8      	movs	r2, #168	@ 0xa8
 800317c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800317e:	4b82      	ldr	r3, [pc, #520]	@ (8003388 <MX_LWIP_Init+0x24c>)
 8003180:	2201      	movs	r2, #1
 8003182:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003184:	4b80      	ldr	r3, [pc, #512]	@ (8003388 <MX_LWIP_Init+0x24c>)
 8003186:	2201      	movs	r2, #1
 8003188:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800318a:	2100      	movs	r1, #0
 800318c:	2000      	movs	r0, #0
 800318e:	f003 fff5 	bl	800717c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003192:	4b7b      	ldr	r3, [pc, #492]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	061a      	lsls	r2, r3, #24
 8003198:	4b79      	ldr	r3, [pc, #484]	@ (8003380 <MX_LWIP_Init+0x244>)
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	4b77      	ldr	r3, [pc, #476]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	4313      	orrs	r3, r2
 80031a8:	4a75      	ldr	r2, [pc, #468]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031aa:	78d2      	ldrb	r2, [r2, #3]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	061a      	lsls	r2, r3, #24
 80031b0:	4b73      	ldr	r3, [pc, #460]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	0619      	lsls	r1, r3, #24
 80031b6:	4b72      	ldr	r3, [pc, #456]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	4319      	orrs	r1, r3
 80031be:	4b70      	ldr	r3, [pc, #448]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031c0:	789b      	ldrb	r3, [r3, #2]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	430b      	orrs	r3, r1
 80031c6:	496e      	ldr	r1, [pc, #440]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031c8:	78c9      	ldrb	r1, [r1, #3]
 80031ca:	430b      	orrs	r3, r1
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80031d2:	431a      	orrs	r2, r3
 80031d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	0619      	lsls	r1, r3, #24
 80031da:	4b69      	ldr	r3, [pc, #420]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	4319      	orrs	r1, r3
 80031e2:	4b67      	ldr	r3, [pc, #412]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031e4:	789b      	ldrb	r3, [r3, #2]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	430b      	orrs	r3, r1
 80031ea:	4965      	ldr	r1, [pc, #404]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031ec:	78c9      	ldrb	r1, [r1, #3]
 80031ee:	430b      	orrs	r3, r1
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80031f6:	431a      	orrs	r2, r3
 80031f8:	4b61      	ldr	r3, [pc, #388]	@ (8003380 <MX_LWIP_Init+0x244>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	0619      	lsls	r1, r3, #24
 80031fe:	4b60      	ldr	r3, [pc, #384]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	4319      	orrs	r1, r3
 8003206:	4b5e      	ldr	r3, [pc, #376]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003208:	789b      	ldrb	r3, [r3, #2]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	430b      	orrs	r3, r1
 800320e:	495c      	ldr	r1, [pc, #368]	@ (8003380 <MX_LWIP_Init+0x244>)
 8003210:	78c9      	ldrb	r1, [r1, #3]
 8003212:	430b      	orrs	r3, r1
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	4313      	orrs	r3, r2
 8003218:	4a5c      	ldr	r2, [pc, #368]	@ (800338c <MX_LWIP_Init+0x250>)
 800321a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <MX_LWIP_Init+0x248>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	061a      	lsls	r2, r3, #24
 8003222:	4b58      	ldr	r3, [pc, #352]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	4b56      	ldr	r3, [pc, #344]	@ (8003384 <MX_LWIP_Init+0x248>)
 800322c:	789b      	ldrb	r3, [r3, #2]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	4313      	orrs	r3, r2
 8003232:	4a54      	ldr	r2, [pc, #336]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003234:	78d2      	ldrb	r2, [r2, #3]
 8003236:	4313      	orrs	r3, r2
 8003238:	061a      	lsls	r2, r3, #24
 800323a:	4b52      	ldr	r3, [pc, #328]	@ (8003384 <MX_LWIP_Init+0x248>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	0619      	lsls	r1, r3, #24
 8003240:	4b50      	ldr	r3, [pc, #320]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	4319      	orrs	r1, r3
 8003248:	4b4e      	ldr	r3, [pc, #312]	@ (8003384 <MX_LWIP_Init+0x248>)
 800324a:	789b      	ldrb	r3, [r3, #2]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	430b      	orrs	r3, r1
 8003250:	494c      	ldr	r1, [pc, #304]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003252:	78c9      	ldrb	r1, [r1, #3]
 8003254:	430b      	orrs	r3, r1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800325c:	431a      	orrs	r2, r3
 800325e:	4b49      	ldr	r3, [pc, #292]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	0619      	lsls	r1, r3, #24
 8003264:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	4319      	orrs	r1, r3
 800326c:	4b45      	ldr	r3, [pc, #276]	@ (8003384 <MX_LWIP_Init+0x248>)
 800326e:	789b      	ldrb	r3, [r3, #2]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	430b      	orrs	r3, r1
 8003274:	4943      	ldr	r1, [pc, #268]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003276:	78c9      	ldrb	r1, [r1, #3]
 8003278:	430b      	orrs	r3, r1
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003280:	431a      	orrs	r2, r3
 8003282:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	0619      	lsls	r1, r3, #24
 8003288:	4b3e      	ldr	r3, [pc, #248]	@ (8003384 <MX_LWIP_Init+0x248>)
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	4319      	orrs	r1, r3
 8003290:	4b3c      	ldr	r3, [pc, #240]	@ (8003384 <MX_LWIP_Init+0x248>)
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	430b      	orrs	r3, r1
 8003298:	493a      	ldr	r1, [pc, #232]	@ (8003384 <MX_LWIP_Init+0x248>)
 800329a:	78c9      	ldrb	r1, [r1, #3]
 800329c:	430b      	orrs	r3, r1
 800329e:	0e1b      	lsrs	r3, r3, #24
 80032a0:	4313      	orrs	r3, r2
 80032a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003390 <MX_LWIP_Init+0x254>)
 80032a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80032a6:	4b38      	ldr	r3, [pc, #224]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	061a      	lsls	r2, r3, #24
 80032ac:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	4313      	orrs	r3, r2
 80032bc:	4a32      	ldr	r2, [pc, #200]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032be:	78d2      	ldrb	r2, [r2, #3]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	061a      	lsls	r2, r3, #24
 80032c4:	4b30      	ldr	r3, [pc, #192]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	0619      	lsls	r1, r3, #24
 80032ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	4319      	orrs	r1, r3
 80032d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032d4:	789b      	ldrb	r3, [r3, #2]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	430b      	orrs	r3, r1
 80032da:	492b      	ldr	r1, [pc, #172]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032dc:	78c9      	ldrb	r1, [r1, #3]
 80032de:	430b      	orrs	r3, r1
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80032e6:	431a      	orrs	r2, r3
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	0619      	lsls	r1, r3, #24
 80032ee:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	4319      	orrs	r1, r3
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <MX_LWIP_Init+0x24c>)
 80032f8:	789b      	ldrb	r3, [r3, #2]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	430b      	orrs	r3, r1
 80032fe:	4922      	ldr	r1, [pc, #136]	@ (8003388 <MX_LWIP_Init+0x24c>)
 8003300:	78c9      	ldrb	r1, [r1, #3]
 8003302:	430b      	orrs	r3, r1
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800330a:	431a      	orrs	r2, r3
 800330c:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <MX_LWIP_Init+0x24c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	0619      	lsls	r1, r3, #24
 8003312:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <MX_LWIP_Init+0x24c>)
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	4319      	orrs	r1, r3
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <MX_LWIP_Init+0x24c>)
 800331c:	789b      	ldrb	r3, [r3, #2]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	430b      	orrs	r3, r1
 8003322:	4919      	ldr	r1, [pc, #100]	@ (8003388 <MX_LWIP_Init+0x24c>)
 8003324:	78c9      	ldrb	r1, [r1, #3]
 8003326:	430b      	orrs	r3, r1
 8003328:	0e1b      	lsrs	r3, r3, #24
 800332a:	4313      	orrs	r3, r2
 800332c:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <MX_LWIP_Init+0x258>)
 800332e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <MX_LWIP_Init+0x25c>)
 8003332:	9302      	str	r3, [sp, #8]
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <MX_LWIP_Init+0x260>)
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2300      	movs	r3, #0
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <MX_LWIP_Init+0x258>)
 800333e:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <MX_LWIP_Init+0x254>)
 8003340:	4912      	ldr	r1, [pc, #72]	@ (800338c <MX_LWIP_Init+0x250>)
 8003342:	4817      	ldr	r0, [pc, #92]	@ (80033a0 <MX_LWIP_Init+0x264>)
 8003344:	f004 fce0 	bl	8007d08 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003348:	4815      	ldr	r0, [pc, #84]	@ (80033a0 <MX_LWIP_Init+0x264>)
 800334a:	f004 fe8f 	bl	800806c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800334e:	4814      	ldr	r0, [pc, #80]	@ (80033a0 <MX_LWIP_Init+0x264>)
 8003350:	f004 fe9c 	bl	800808c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003354:	4913      	ldr	r1, [pc, #76]	@ (80033a4 <MX_LWIP_Init+0x268>)
 8003356:	4812      	ldr	r0, [pc, #72]	@ (80033a0 <MX_LWIP_Init+0x264>)
 8003358:	f004 ff9a 	bl	8008290 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <MX_LWIP_Init+0x26c>)
 800335e:	1d3c      	adds	r4, r7, #4
 8003360:	461d      	mov	r5, r3
 8003362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800336a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	490b      	ldr	r1, [pc, #44]	@ (80033a0 <MX_LWIP_Init+0x264>)
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fdad 	bl	8003ed2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bdb0      	pop	{r4, r5, r7, pc}
 8003380:	20000488 	.word	0x20000488
 8003384:	2000048c 	.word	0x2000048c
 8003388:	20000490 	.word	0x20000490
 800338c:	2000047c 	.word	0x2000047c
 8003390:	20000480 	.word	0x20000480
 8003394:	20000484 	.word	0x20000484
 8003398:	080070b9 	.word	0x080070b9
 800339c:	08003945 	.word	0x08003945
 80033a0:	20000448 	.word	0x20000448
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	0801204c 	.word	0x0801204c

080033ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <SCB_InvalidateDCache_by_Addr>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80033d2:	2320      	movs	r3, #32
 80033d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80033d6:	f3bf 8f4f 	dsb	sy
}
 80033da:	bf00      	nop
    while (op_size > 0) {
 80033dc:	e00b      	b.n	80033f6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80033de:	4a0d      	ldr	r2, [pc, #52]	@ (8003414 <SCB_InvalidateDCache_by_Addr+0x54>)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dcf0      	bgt.n	80033de <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80033fc:	f3bf 8f4f 	dsb	sy
}
 8003400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003402:	f3bf 8f6f 	isb	sy
}
 8003406:	bf00      	nop
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003420:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <HAL_ETH_RxCpltCallback+0x1c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fedd 	bl	80041e4 <osSemaphoreRelease>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20004e20 	.word	0x20004e20

08003438 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <HAL_ETH_TxCpltCallback+0x1c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fecd 	bl	80041e4 <osSemaphoreRelease>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20004e24 	.word	0x20004e24

08003458 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fbe0 	bl	8001c26 <HAL_ETH_GetDMAError>
 8003466:	4603      	mov	r3, r0
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b80      	cmp	r3, #128	@ 0x80
 800346e:	d104      	bne.n	800347a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <HAL_ETH_ErrorCallback+0x2c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 feb5 	bl	80041e4 <osSemaphoreRelease>
  }
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20004e20 	.word	0x20004e20

08003488 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	b0b4      	sub	sp, #208	@ 0xd0
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 80034a2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80034a6:	2264      	movs	r2, #100	@ 0x64
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00d ff05 	bl	80112ba <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80034b0:	4b9f      	ldr	r3, [pc, #636]	@ (8003730 <low_level_init+0x2a8>)
 80034b2:	4aa0      	ldr	r2, [pc, #640]	@ (8003734 <low_level_init+0x2ac>)
 80034b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 80034c2:	23e1      	movs	r3, #225	@ 0xe1
 80034c4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 80034da:	4a95      	ldr	r2, [pc, #596]	@ (8003730 <low_level_init+0x2a8>)
 80034dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80034e2:	4b93      	ldr	r3, [pc, #588]	@ (8003730 <low_level_init+0x2a8>)
 80034e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034e8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80034ea:	4b91      	ldr	r3, [pc, #580]	@ (8003730 <low_level_init+0x2a8>)
 80034ec:	4a92      	ldr	r2, [pc, #584]	@ (8003738 <low_level_init+0x2b0>)
 80034ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80034f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003730 <low_level_init+0x2a8>)
 80034f2:	4a92      	ldr	r2, [pc, #584]	@ (800373c <low_level_init+0x2b4>)
 80034f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80034f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003730 <low_level_init+0x2a8>)
 80034f8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80034fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80034fe:	488c      	ldr	r0, [pc, #560]	@ (8003730 <low_level_init+0x2a8>)
 8003500:	f7fd fd48 	bl	8000f94 <HAL_ETH_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800350a:	2238      	movs	r2, #56	@ 0x38
 800350c:	2100      	movs	r1, #0
 800350e:	488c      	ldr	r0, [pc, #560]	@ (8003740 <low_level_init+0x2b8>)
 8003510:	f00d fed3 	bl	80112ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003514:	4b8a      	ldr	r3, [pc, #552]	@ (8003740 <low_level_init+0x2b8>)
 8003516:	2221      	movs	r2, #33	@ 0x21
 8003518:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800351a:	4b89      	ldr	r3, [pc, #548]	@ (8003740 <low_level_init+0x2b8>)
 800351c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003520:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003522:	4b87      	ldr	r3, [pc, #540]	@ (8003740 <low_level_init+0x2b8>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003528:	4886      	ldr	r0, [pc, #536]	@ (8003744 <low_level_init+0x2bc>)
 800352a:	f004 faa7 	bl	8007a7c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2206      	movs	r2, #6
 8003532:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003536:	4b7e      	ldr	r3, [pc, #504]	@ (8003730 <low_level_init+0x2a8>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003542:	4b7b      	ldr	r3, [pc, #492]	@ (8003730 <low_level_init+0x2a8>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	785a      	ldrb	r2, [r3, #1]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800354e:	4b78      	ldr	r3, [pc, #480]	@ (8003730 <low_level_init+0x2a8>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	789a      	ldrb	r2, [r3, #2]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800355a:	4b75      	ldr	r3, [pc, #468]	@ (8003730 <low_level_init+0x2a8>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	78da      	ldrb	r2, [r3, #3]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003566:	4b72      	ldr	r3, [pc, #456]	@ (8003730 <low_level_init+0x2a8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	791a      	ldrb	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003572:	4b6f      	ldr	r3, [pc, #444]	@ (8003730 <low_level_init+0x2a8>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	795a      	ldrb	r2, [r3, #5]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003584:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800358c:	f043 030a 	orr.w	r3, r3, #10
 8003590:	b2da      	uxtb	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8003598:	2300      	movs	r3, #0
 800359a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800359c:	2300      	movs	r3, #0
 800359e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80035a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd9c 	bl	80040e4 <osSemaphoreCreate>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4a66      	ldr	r2, [pc, #408]	@ (8003748 <low_level_init+0x2c0>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80035b2:	2300      	movs	r3, #0
 80035b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b6:	2300      	movs	r3, #0
 80035b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80035ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fd8f 	bl	80040e4 <osSemaphoreCreate>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a60      	ldr	r2, [pc, #384]	@ (800374c <low_level_init+0x2c4>)
 80035ca:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80035cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003748 <low_level_init+0x2c0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fdb8 	bl	8004148 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80035d8:	4b5c      	ldr	r3, [pc, #368]	@ (800374c <low_level_init+0x2c4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fdb2 	bl	8004148 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80035e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003750 <low_level_init+0x2c8>)
 80035e6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80035ea:	461d      	mov	r5, r3
 80035ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80035f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc67 	bl	8003ed2 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003604:	4953      	ldr	r1, [pc, #332]	@ (8003754 <low_level_init+0x2cc>)
 8003606:	4854      	ldr	r0, [pc, #336]	@ (8003758 <low_level_init+0x2d0>)
 8003608:	f7fd fa1f 	bl	8000a4a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800360c:	4852      	ldr	r0, [pc, #328]	@ (8003758 <low_level_init+0x2d0>)
 800360e:	f7fd fa4e 	bl	8000aae <LAN8742_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d006      	beq.n	8003626 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f004 fe09 	bl	8008230 <netif_set_link_down>
    netif_set_down(netif);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f004 fda0 	bl	8008164 <netif_set_down>
 8003624:	e081      	b.n	800372a <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003626:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800362a:	2b00      	cmp	r3, #0
 800362c:	d165      	bne.n	80036fa <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800362e:	484a      	ldr	r0, [pc, #296]	@ (8003758 <low_level_init+0x2d0>)
 8003630:	f7fd fa8a 	bl	8000b48 <LAN8742_GetLinkState>
 8003634:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800363c:	2b01      	cmp	r3, #1
 800363e:	dc06      	bgt.n	800364e <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f004 fdf5 	bl	8008230 <netif_set_link_down>
      netif_set_down(netif);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f004 fd8c 	bl	8008164 <netif_set_down>
 800364c:	e057      	b.n	80036fe <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 800364e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003652:	3b02      	subs	r3, #2
 8003654:	2b03      	cmp	r3, #3
 8003656:	d82b      	bhi.n	80036b0 <low_level_init+0x228>
 8003658:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <low_level_init+0x1d8>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	08003683 	.word	0x08003683
 8003668:	08003693 	.word	0x08003693
 800366c:	080036a3 	.word	0x080036a3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003670:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003674:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003678:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800367c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003680:	e01f      	b.n	80036c2 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003688:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800368c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003690:	e017      	b.n	80036c2 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003692:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003696:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80036a0:	e00f      	b.n	80036c2 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80036ae:	e008      	b.n	80036c2 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80036b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80036b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80036c0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80036c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80036c6:	4619      	mov	r1, r3
 80036c8:	4819      	ldr	r0, [pc, #100]	@ (8003730 <low_level_init+0x2a8>)
 80036ca:	f7fe f94b 	bl	8001964 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80036ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036d2:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 80036d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036d8:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80036da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80036de:	4619      	mov	r1, r3
 80036e0:	4813      	ldr	r0, [pc, #76]	@ (8003730 <low_level_init+0x2a8>)
 80036e2:	f7fe fa36 	bl	8001b52 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80036e6:	4812      	ldr	r0, [pc, #72]	@ (8003730 <low_level_init+0x2a8>)
 80036e8:	f7fd fcee 	bl	80010c8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f004 fccd 	bl	800808c <netif_set_up>
    netif_set_link_up(netif);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f004 fd68 	bl	80081c8 <netif_set_link_up>
 80036f8:	e001      	b.n	80036fe <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 80036fa:	f7fd f841 	bl	8000780 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 80036fe:	f7fd fb2b 	bl	8000d58 <HAL_GetREVID>
 8003702:	4603      	mov	r3, r0
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003708:	d10f      	bne.n	800372a <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800370a:	4b14      	ldr	r3, [pc, #80]	@ (800375c <low_level_init+0x2d4>)
 800370c:	f107 040c 	add.w	r4, r7, #12
 8003710:	461d      	mov	r5, r3
 8003712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003716:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800371a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fbd4 	bl	8003ed2 <osThreadCreate>
  }
}
 800372a:	37d0      	adds	r7, #208	@ 0xd0
 800372c:	46bd      	mov	sp, r7
 800372e:	bdb0      	pop	{r4, r5, r7, pc}
 8003730:	20004e28 	.word	0x20004e28
 8003734:	40028000 	.word	0x40028000
 8003738:	2000012c 	.word	0x2000012c
 800373c:	2000008c 	.word	0x2000008c
 8003740:	20004ed8 	.word	0x20004ed8
 8003744:	08014bac 	.word	0x08014bac
 8003748:	20004e20 	.word	0x20004e20
 800374c:	20004e24 	.word	0x20004e24
 8003750:	08012070 	.word	0x08012070
 8003754:	2000000c 	.word	0x2000000c
 8003758:	20004f10 	.word	0x20004f10
 800375c:	0801209c 	.word	0x0801209c

08003760 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b092      	sub	sp, #72	@ 0x48
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2230      	movs	r2, #48	@ 0x30
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f00d fd9a 	bl	80112ba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	2230      	movs	r2, #48	@ 0x30
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f00d fd93 	bl	80112ba <memset>

  for(q = p; q != NULL; q = q->next)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	643b      	str	r3, [r7, #64]	@ 0x40
 8003798:	e045      	b.n	8003826 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800379a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800379c:	2b03      	cmp	r3, #3
 800379e:	d902      	bls.n	80037a6 <low_level_output+0x46>
      return ERR_IF;
 80037a0:	f06f 030b 	mvn.w	r3, #11
 80037a4:	e07f      	b.n	80038a6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80037a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	3348      	adds	r3, #72	@ 0x48
 80037b6:	443b      	add	r3, r7
 80037b8:	3b3c      	subs	r3, #60	@ 0x3c
 80037ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80037bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037be:	895b      	ldrh	r3, [r3, #10]
 80037c0:	4619      	mov	r1, r3
 80037c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3348      	adds	r3, #72	@ 0x48
 80037ce:	443b      	add	r3, r7
 80037d0:	3b38      	subs	r3, #56	@ 0x38
 80037d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80037d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d011      	beq.n	80037fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80037da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	f107 000c 	add.w	r0, r7, #12
 80037e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037e4:	460b      	mov	r3, r1
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	440b      	add	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	18c1      	adds	r1, r0, r3
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	3348      	adds	r3, #72	@ 0x48
 80037f8:	443b      	add	r3, r7
 80037fa:	3b34      	subs	r3, #52	@ 0x34
 80037fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80037fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3348      	adds	r3, #72	@ 0x48
 8003812:	443b      	add	r3, r7
 8003814:	3b34      	subs	r3, #52	@ 0x34
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    }

    i++;
 800381a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381c:	3301      	adds	r3, #1
 800381e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	643b      	str	r3, [r7, #64]	@ 0x40
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1b6      	bne.n	800379a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	891b      	ldrh	r3, [r3, #8]
 8003830:	461a      	mov	r2, r3
 8003832:	4b1f      	ldr	r3, [pc, #124]	@ (80038b0 <low_level_output+0x150>)
 8003834:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003836:	4a1e      	ldr	r2, [pc, #120]	@ (80038b0 <low_level_output+0x150>)
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800383e:	4a1c      	ldr	r2, [pc, #112]	@ (80038b0 <low_level_output+0x150>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8003844:	6838      	ldr	r0, [r7, #0]
 8003846:	f005 f977 	bl	8008b38 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800384a:	4919      	ldr	r1, [pc, #100]	@ (80038b0 <low_level_output+0x150>)
 800384c:	4819      	ldr	r0, [pc, #100]	@ (80038b4 <low_level_output+0x154>)
 800384e:	f7fd fd2b 	bl	80012a8 <HAL_ETH_Transmit_IT>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800385e:	e01b      	b.n	8003898 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8003860:	4814      	ldr	r0, [pc, #80]	@ (80038b4 <low_level_output+0x154>)
 8003862:	f7fe f9d3 	bl	8001c0c <HAL_ETH_GetError>
 8003866:	4603      	mov	r3, r0
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8003870:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <low_level_output+0x158>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fc65 	bl	8004148 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800387e:	480d      	ldr	r0, [pc, #52]	@ (80038b4 <low_level_output+0x154>)
 8003880:	f7fd feb2 	bl	80015e8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8003884:	23fe      	movs	r3, #254	@ 0xfe
 8003886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800388a:	e005      	b.n	8003898 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f005 f8ad 	bl	80089ec <pbuf_free>
        errval =  ERR_IF;
 8003892:	23f4      	movs	r3, #244	@ 0xf4
 8003894:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8003898:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800389c:	f113 0f02 	cmn.w	r3, #2
 80038a0:	d0d3      	beq.n	800384a <low_level_output+0xea>

  return errval;
 80038a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3748      	adds	r7, #72	@ 0x48
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20004ed8 	.word	0x20004ed8
 80038b4:	20004e28 	.word	0x20004e28
 80038b8:	20004e24 	.word	0x20004e24

080038bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <low_level_input+0x2c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	4619      	mov	r1, r3
 80038d6:	4805      	ldr	r0, [pc, #20]	@ (80038ec <low_level_input+0x30>)
 80038d8:	f7fd fd42 	bl	8001360 <HAL_ETH_ReadData>
  }

  return p;
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20004e1c 	.word	0x20004e1c
 80038ec:	20004e28 	.word	0x20004e28

080038f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <ethernetif_input+0x50>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f04f 31ff 	mov.w	r1, #4294967295
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fc1d 	bl	8004148 <osSemaphoreWait>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f5      	bne.n	8003900 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f7ff ffd1 	bl	80038bc <low_level_input>
 800391a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	4798      	blx	r3
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f005 f85a 	bl	80089ec <pbuf_free>
          }
        }
      } while(p!=NULL);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ea      	bne.n	8003914 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800393e:	e7df      	b.n	8003900 <ethernetif_input+0x10>
 8003940:	20004e20 	.word	0x20004e20

08003944 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <ethernetif_init+0x1c>
 8003952:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <ethernetif_init+0x48>)
 8003954:	f240 2217 	movw	r2, #535	@ 0x217
 8003958:	490d      	ldr	r1, [pc, #52]	@ (8003990 <ethernetif_init+0x4c>)
 800395a:	480e      	ldr	r0, [pc, #56]	@ (8003994 <ethernetif_init+0x50>)
 800395c:	f00d fc48 	bl	80111f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2273      	movs	r2, #115	@ 0x73
 8003964:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2274      	movs	r2, #116	@ 0x74
 800396c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <ethernetif_init+0x54>)
 8003974:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a08      	ldr	r2, [pc, #32]	@ (800399c <ethernetif_init+0x58>)
 800397a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fd83 	bl	8003488 <low_level_init>

  return ERR_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	080120b8 	.word	0x080120b8
 8003990:	080120d4 	.word	0x080120d4
 8003994:	080120e4 	.word	0x080120e4
 8003998:	0800f0d1 	.word	0x0800f0d1
 800399c:	08003761 	.word	0x08003761

080039a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	4809      	ldr	r0, [pc, #36]	@ (80039d4 <pbuf_free_custom+0x34>)
 80039b0:	f004 f954 	bl	8007c5c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80039b4:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <pbuf_free_custom+0x38>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <pbuf_free_custom+0x38>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <pbuf_free_custom+0x3c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fc0c 	bl	80041e4 <osSemaphoreRelease>
  }
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	08014bac 	.word	0x08014bac
 80039d8:	20004e1c 	.word	0x20004e1c
 80039dc:	20004e20 	.word	0x20004e20

080039e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80039e4:	f7fd f988 	bl	8000cf8 <HAL_GetTick>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	@ 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a44      	ldr	r2, [pc, #272]	@ (8003b20 <HAL_ETH_MspInit+0x130>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f040 8081 	bne.w	8003b16 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003a14:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	4a42      	ldr	r2, [pc, #264]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a20:	4b40      	ldr	r3, [pc, #256]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	4a3c      	ldr	r2, [pc, #240]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a38:	4b3a      	ldr	r3, [pc, #232]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4b37      	ldr	r3, [pc, #220]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	4a36      	ldr	r2, [pc, #216]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a50:	4b34      	ldr	r3, [pc, #208]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a60:	4a30      	ldr	r2, [pc, #192]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a68:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a74:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	4a2a      	ldr	r2, [pc, #168]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8c:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a98:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <HAL_ETH_MspInit+0x134>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8003aa4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ab6:	230b      	movs	r3, #11
 8003ab8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4819      	ldr	r0, [pc, #100]	@ (8003b28 <HAL_ETH_MspInit+0x138>)
 8003ac2:	f7fe fcdd 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003ac6:	2332      	movs	r3, #50	@ 0x32
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ad6:	230b      	movs	r3, #11
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4812      	ldr	r0, [pc, #72]	@ (8003b2c <HAL_ETH_MspInit+0x13c>)
 8003ae2:	f7fe fccd 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003ae6:	2386      	movs	r3, #134	@ 0x86
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003af6:	230b      	movs	r3, #11
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003afe:	4619      	mov	r1, r3
 8003b00:	480b      	ldr	r0, [pc, #44]	@ (8003b30 <HAL_ETH_MspInit+0x140>)
 8003b02:	f7fe fcbd 	bl	8002480 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2105      	movs	r1, #5
 8003b0a:	203d      	movs	r0, #61	@ 0x3d
 8003b0c:	f7fd fa0b 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003b10:	203d      	movs	r0, #61	@ 0x3d
 8003b12:	f7fd fa24 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003b16:	bf00      	nop
 8003b18:	3738      	adds	r7, #56	@ 0x38
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40028000 	.word	0x40028000
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40021800 	.word	0x40021800
 8003b2c:	40020800 	.word	0x40020800
 8003b30:	40020000 	.word	0x40020000

08003b34 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003b38:	4802      	ldr	r0, [pc, #8]	@ (8003b44 <ETH_PHY_IO_Init+0x10>)
 8003b3a:	f7fe f825 	bl	8001b88 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20004e28 	.word	0x20004e28

08003b48 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return 0;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4807      	ldr	r0, [pc, #28]	@ (8003b88 <ETH_PHY_IO_ReadReg+0x30>)
 8003b6c:	f7fd fe66 	bl	800183c <HAL_ETH_ReadPHYRegister>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	e000      	b.n	8003b7e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20004e28 	.word	0x20004e28

08003b8c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	4807      	ldr	r0, [pc, #28]	@ (8003bbc <ETH_PHY_IO_WriteReg+0x30>)
 8003ba0:	f7fd fe97 	bl	80018d2 <HAL_ETH_WritePHYRegister>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e000      	b.n	8003bb2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20004e28 	.word	0x20004e28

08003bc0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003bc4:	f7fd f898 	bl	8000cf8 <HAL_GetTick>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b0a0      	sub	sp, #128	@ 0x80
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	2264      	movs	r2, #100	@ 0x64
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f00d fb6a 	bl	80112ba <memset>
  int32_t PHYLinkState = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bee:	2300      	movs	r3, #0
 8003bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003bfa:	483a      	ldr	r0, [pc, #232]	@ (8003ce4 <ethernet_link_thread+0x114>)
 8003bfc:	f7fc ffa4 	bl	8000b48 <LAN8742_GetLinkState>
 8003c00:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00c      	beq.n	8003c2e <ethernet_link_thread+0x5e>
 8003c14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	dc09      	bgt.n	8003c2e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8003c1a:	4833      	ldr	r0, [pc, #204]	@ (8003ce8 <ethernet_link_thread+0x118>)
 8003c1c:	f7fd fac4 	bl	80011a8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003c20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c22:	f004 fa9f 	bl	8008164 <netif_set_down>
    netif_set_link_down(netif);
 8003c26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c28:	f004 fb02 	bl	8008230 <netif_set_link_down>
 8003c2c:	e055      	b.n	8003cda <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d14e      	bne.n	8003cda <ethernet_link_thread+0x10a>
 8003c3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	dd4b      	ble.n	8003cda <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8003c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c44:	3b02      	subs	r3, #2
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d82a      	bhi.n	8003ca0 <ethernet_link_thread+0xd0>
 8003c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <ethernet_link_thread+0x80>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c73 	.word	0x08003c73
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c93 	.word	0x08003c93
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8003c60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c64:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003c66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003c70:	e017      	b.n	8003ca2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003c76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003c80:	e00f      	b.n	8003ca2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8003c82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c86:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003c90:	e007      	b.n	8003ca2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003c96:	2300      	movs	r3, #0
 8003c98:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003c9e:	e000      	b.n	8003ca2 <ethernet_link_thread+0xd2>
    default:
      break;
 8003ca0:	bf00      	nop
    }

    if(linkchanged)
 8003ca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d018      	beq.n	8003cda <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003ca8:	f107 0308 	add.w	r3, r7, #8
 8003cac:	4619      	mov	r1, r3
 8003cae:	480e      	ldr	r0, [pc, #56]	@ (8003ce8 <ethernet_link_thread+0x118>)
 8003cb0:	f7fd fe58 	bl	8001964 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8003cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cba:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4809      	ldr	r0, [pc, #36]	@ (8003ce8 <ethernet_link_thread+0x118>)
 8003cc4:	f7fd ff45 	bl	8001b52 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8003cc8:	4807      	ldr	r0, [pc, #28]	@ (8003ce8 <ethernet_link_thread+0x118>)
 8003cca:	f7fd f9fd 	bl	80010c8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8003cce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003cd0:	f004 f9dc 	bl	800808c <netif_set_up>
      netif_set_link_up(netif);
 8003cd4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003cd6:	f004 fa77 	bl	80081c8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8003cda:	2064      	movs	r0, #100	@ 0x64
 8003cdc:	f000 f951 	bl	8003f82 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003ce0:	e78b      	b.n	8003bfa <ethernet_link_thread+0x2a>
 8003ce2:	bf00      	nop
 8003ce4:	20004f10 	.word	0x20004f10
 8003ce8:	20004e28 	.word	0x20004e28

08003cec <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003cf4:	4812      	ldr	r0, [pc, #72]	@ (8003d40 <HAL_ETH_RxAllocateCallback+0x54>)
 8003cf6:	f003 ff3d 	bl	8007b74 <memp_malloc_pool>
 8003cfa:	60f8      	str	r0, [r7, #12]
  if (p)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d014      	beq.n	8003d2c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f103 0220 	add.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d44 <HAL_ETH_RxAllocateCallback+0x58>)
 8003d10:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2241      	movs	r2, #65	@ 0x41
 8003d22:	2100      	movs	r1, #0
 8003d24:	2000      	movs	r0, #0
 8003d26:	f004 fca7 	bl	8008678 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003d2a:	e005      	b.n	8003d38 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	08014bac 	.word	0x08014bac
 8003d44:	080039a1 	.word	0x080039a1
 8003d48:	20004e1c 	.word	0x20004e1c

08003d4c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3b20      	subs	r3, #32
 8003d6a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2200      	movs	r2, #0
 8003d76:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e003      	b.n	8003d96 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e009      	b.n	8003db8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	891a      	ldrh	r2, [r3, #8]
 8003da8:	887b      	ldrh	r3, [r7, #2]
 8003daa:	4413      	add	r3, r2
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f2      	bne.n	8003da4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fafc 	bl	80033c0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003dc8:	bf00      	nop
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f004 fe07 	bl	80089ec <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8003df0:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <RMII_Thread+0x60>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f000 f8b4 	bl	8003f6a <osThreadTerminate>
 8003e02:	e7f5      	b.n	8003df0 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <RMII_Thread+0x60>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003e0c:	2b0a      	cmp	r3, #10
 8003e0e:	d916      	bls.n	8003e3e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8003e10:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <RMII_Thread+0x64>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a0d      	ldr	r2, [pc, #52]	@ (8003e4c <RMII_Thread+0x64>)
 8003e16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e1a:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <RMII_Thread+0x64>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a0a      	ldr	r2, [pc, #40]	@ (8003e4c <RMII_Thread+0x64>)
 8003e22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e26:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8003e28:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <RMII_Thread+0x60>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <RMII_Thread+0x60>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003e3c:	e7d8      	b.n	8003df0 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8003e3e:	20c8      	movs	r0, #200	@ 0xc8
 8003e40:	f000 f89f 	bl	8003f82 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8003e44:	e7d4      	b.n	8003df0 <RMII_Thread+0x8>
 8003e46:	bf00      	nop
 8003e48:	20004e28 	.word	0x20004e28
 8003e4c:	40013800 	.word	0x40013800

08003e50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e62:	2b84      	cmp	r3, #132	@ 0x84
 8003e64:	d005      	beq.n	8003e72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3303      	adds	r3, #3
 8003e70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e86:	f3ef 8305 	mrs	r3, IPSR
 8003e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8003e8c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ea8:	f001 fd64 	bl	8005974 <vTaskStartScheduler>
  
  return osOK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003eb6:	f7ff ffe3 	bl	8003e80 <inHandlerMode>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003ec0:	f001 fe7c 	bl	8005bbc <xTaskGetTickCountFromISR>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	e002      	b.n	8003ece <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003ec8:	f001 fe68 	bl	8005b9c <xTaskGetTickCount>
 8003ecc:	4603      	mov	r3, r0
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed4:	b089      	sub	sp, #36	@ 0x24
 8003ed6:	af04      	add	r7, sp, #16
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <osThreadCreate+0x54>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01c      	beq.n	8003f26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685c      	ldr	r4, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691e      	ldr	r6, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ffa6 	bl	8003e50 <makeFreeRtosPriority>
 8003f04:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f0e:	9202      	str	r2, [sp, #8]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	9100      	str	r1, [sp, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4632      	mov	r2, r6
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f001 fac0 	bl	80054a0 <xTaskCreateStatic>
 8003f20:	4603      	mov	r3, r0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e01c      	b.n	8003f60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685c      	ldr	r4, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f32:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff88 	bl	8003e50 <makeFreeRtosPriority>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f107 030c 	add.w	r3, r7, #12
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	9200      	str	r2, [sp, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	4632      	mov	r2, r6
 8003f4e:	4629      	mov	r1, r5
 8003f50:	4620      	mov	r0, r4
 8003f52:	f001 fb0b 	bl	800556c <xTaskCreate>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f60:	68fb      	ldr	r3, [r7, #12]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f6a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f001 fc34 	bl	80057e0 <vTaskDelete>
  return osOK;
 8003f78:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <osDelay+0x16>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	e000      	b.n	8003f9a <osDelay+0x18>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fcb2 	bl	8005904 <vTaskDelay>
  
  return osOK;
 8003fa0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f000 fc5c 	bl	800487e <xQueueCreateMutexStatic>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	e003      	b.n	8003fd2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f000 fc3f 	bl	800484e <xQueueCreateMutex>
 8003fd0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <osMutexWait+0x18>
    return osErrorParameter;
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	e03a      	b.n	800406a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d103      	bne.n	8004008 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e009      	b.n	800401c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <osMutexWait+0x40>
      ticks = 1;
 8004018:	2301      	movs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800401c:	f7ff ff30 	bl	8003e80 <inHandlerMode>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004026:	f107 0308 	add.w	r3, r7, #8
 800402a:	461a      	mov	r2, r3
 800402c:	2100      	movs	r1, #0
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 f886 	bl	8005140 <xQueueReceiveFromISR>
 8004034:	4603      	mov	r3, r0
 8004036:	2b01      	cmp	r3, #1
 8004038:	d001      	beq.n	800403e <osMutexWait+0x62>
      return osErrorOS;
 800403a:	23ff      	movs	r3, #255	@ 0xff
 800403c:	e015      	b.n	800406a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d011      	beq.n	8004068 <osMutexWait+0x8c>
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <osMutexWait+0x98>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	e008      	b.n	8004068 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 ff59 	bl	8004f10 <xQueueSemaphoreTake>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <osMutexWait+0x8c>
    return osErrorOS;
 8004064:	23ff      	movs	r3, #255	@ 0xff
 8004066:	e000      	b.n	800406a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004088:	f7ff fefa 	bl	8003e80 <inHandlerMode>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fdb8 	bl	8004c0e <xQueueGiveFromISR>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d001      	beq.n	80040a8 <osMutexRelease+0x30>
      return osErrorOS;
 80040a4:	23ff      	movs	r3, #255	@ 0xff
 80040a6:	e017      	b.n	80040d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d013      	beq.n	80040d6 <osMutexRelease+0x5e>
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <osMutexRelease+0x68>)
 80040b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	e00a      	b.n	80040d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80040c0:	2300      	movs	r3, #0
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fbf4 	bl	80048b4 <xQueueGenericSend>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80040d2:	23ff      	movs	r3, #255	@ 0xff
 80040d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10a      	bne.n	8004112 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2203      	movs	r2, #3
 8004102:	9200      	str	r2, [sp, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	2100      	movs	r1, #0
 8004108:	2001      	movs	r0, #1
 800410a:	f000 fa9d 	bl	8004648 <xQueueGenericCreateStatic>
 800410e:	4603      	mov	r3, r0
 8004110:	e016      	b.n	8004140 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	e014      	b.n	8004140 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d110      	bne.n	800413e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800411c:	2203      	movs	r2, #3
 800411e:	2100      	movs	r1, #0
 8004120:	2001      	movs	r0, #1
 8004122:	f000 fb18 	bl	8004756 <xQueueGenericCreate>
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <osSemaphoreCreate+0x56>
 800412e:	2300      	movs	r3, #0
 8004130:	2200      	movs	r2, #0
 8004132:	2100      	movs	r1, #0
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fbbd 	bl	80048b4 <xQueueGenericSend>
      return sema;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	e000      	b.n	8004140 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800413e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	e03a      	b.n	80041d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d103      	bne.n	8004174 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e009      	b.n	8004188 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <osSemaphoreWait+0x40>
      ticks = 1;
 8004184:	2301      	movs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004188:	f7ff fe7a 	bl	8003e80 <inHandlerMode>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	461a      	mov	r2, r3
 8004198:	2100      	movs	r1, #0
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 ffd0 	bl	8005140 <xQueueReceiveFromISR>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d001      	beq.n	80041aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80041a6:	23ff      	movs	r3, #255	@ 0xff
 80041a8:	e015      	b.n	80041d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d011      	beq.n	80041d4 <osSemaphoreWait+0x8c>
 80041b0:	4b0b      	ldr	r3, [pc, #44]	@ (80041e0 <osSemaphoreWait+0x98>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	e008      	b.n	80041d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fea3 	bl	8004f10 <xQueueSemaphoreTake>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d001      	beq.n	80041d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80041d0:	23ff      	movs	r3, #255	@ 0xff
 80041d2:	e000      	b.n	80041d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80041f4:	f7ff fe44 	bl	8003e80 <inHandlerMode>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fd02 	bl	8004c0e <xQueueGiveFromISR>
 800420a:	4603      	mov	r3, r0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004210:	23ff      	movs	r3, #255	@ 0xff
 8004212:	e017      	b.n	8004244 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d013      	beq.n	8004242 <osSemaphoreRelease+0x5e>
 800421a:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <osSemaphoreRelease+0x68>)
 800421c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	e00a      	b.n	8004242 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800422c:	2300      	movs	r3, #0
 800422e:	2200      	movs	r2, #0
 8004230:	2100      	movs	r1, #0
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fb3e 	bl	80048b4 <xQueueGenericSend>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d001      	beq.n	8004242 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800423e:	23ff      	movs	r3, #255	@ 0xff
 8004240:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b085      	sub	sp, #20
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d011      	beq.n	8004286 <osMessageCreate+0x36>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2400      	movs	r4, #0
 800427c:	9400      	str	r4, [sp, #0]
 800427e:	f000 f9e3 	bl	8004648 <xQueueGenericCreateStatic>
 8004282:	4603      	mov	r3, r0
 8004284:	e008      	b.n	8004298 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	4619      	mov	r1, r3
 8004292:	f000 fa60 	bl	8004756 <xQueueGenericCreate>
 8004296:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <osMessagePut+0x1e>
    ticks = 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80042be:	f7ff fddf 	bl	8003e80 <inHandlerMode>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d018      	beq.n	80042fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80042c8:	f107 0210 	add.w	r2, r7, #16
 80042cc:	f107 0108 	add.w	r1, r7, #8
 80042d0:	2300      	movs	r3, #0
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fbf8 	bl	8004ac8 <xQueueGenericSendFromISR>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <osMessagePut+0x42>
      return osErrorOS;
 80042de:	23ff      	movs	r3, #255	@ 0xff
 80042e0:	e018      	b.n	8004314 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d014      	beq.n	8004312 <osMessagePut+0x72>
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <osMessagePut+0x7c>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	e00b      	b.n	8004312 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80042fa:	f107 0108 	add.w	r1, r7, #8
 80042fe:	2300      	movs	r3, #0
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fad6 	bl	80048b4 <xQueueGenericSend>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <osMessagePut+0x72>
      return osErrorOS;
 800430e:	23ff      	movs	r3, #255	@ 0xff
 8004310:	e000      	b.n	8004314 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08b      	sub	sp, #44	@ 0x2c
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	617b      	str	r3, [r7, #20]
    return event;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	461c      	mov	r4, r3
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800434a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800434e:	e054      	b.n	80043fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004350:	2300      	movs	r3, #0
 8004352:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d103      	bne.n	8004368 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
 8004366:	e009      	b.n	800437c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d006      	beq.n	800437c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <osMessageGet+0x5c>
      ticks = 1;
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800437c:	f7ff fd80 	bl	8003e80 <inHandlerMode>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01c      	beq.n	80043c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004386:	f107 0220 	add.w	r2, r7, #32
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	68b8      	ldr	r0, [r7, #8]
 8004394:	f000 fed4 	bl	8005140 <xQueueReceiveFromISR>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800439e:	2310      	movs	r3, #16
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e001      	b.n	80043a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <osMessageGet+0xca>
 80043ae:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <osMessageGet+0xe4>)
 80043b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	e014      	b.n	80043ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	3304      	adds	r3, #4
 80043c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c8:	4619      	mov	r1, r3
 80043ca:	68b8      	ldr	r0, [r7, #8]
 80043cc:	f000 fcb8 	bl	8004d40 <xQueueReceive>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80043d6:	2310      	movs	r3, #16
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e006      	b.n	80043ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <osMessageGet+0xc6>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e000      	b.n	80043e8 <osMessageGet+0xc8>
 80043e6:	2340      	movs	r3, #64	@ 0x40
 80043e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	461c      	mov	r4, r3
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	372c      	adds	r7, #44	@ 0x2c
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}
 8004402:	bf00      	nop
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f103 0208 	add.w	r2, r3, #8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f103 0208 	add.w	r2, r3, #8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 0208 	add.w	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d103      	bne.n	80044ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e00c      	b.n	80044e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3308      	adds	r3, #8
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e002      	b.n	80044d8 <vListInsert+0x2e>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d2f6      	bcs.n	80044d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d103      	bne.n	8004550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10d      	bne.n	80045a0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	b672      	cpsid	i
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	b662      	cpsie	i
 8004598:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80045a0:	f002 f97c 	bl	800689c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	68f9      	ldr	r1, [r7, #12]
 80045ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	441a      	add	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	3b01      	subs	r3, #1
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22ff      	movs	r2, #255	@ 0xff
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	22ff      	movs	r2, #255	@ 0xff
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d114      	bne.n	8004620 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01a      	beq.n	8004634 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3310      	adds	r3, #16
 8004602:	4618      	mov	r0, r3
 8004604:	f001 fc2e 	bl	8005e64 <xTaskRemoveFromEventList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <xQueueGenericReset+0xd4>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	e009      	b.n	8004634 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3310      	adds	r3, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff feef 	bl	8004408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3324      	adds	r3, #36	@ 0x24
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff feea 	bl	8004408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004634:	f002 f968 	bl	8006908 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004638:	2301      	movs	r3, #1
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	@ 0x38
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004660:	b672      	cpsid	i
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	b662      	cpsie	i
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	b672      	cpsid	i
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	b662      	cpsie	i
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <xQueueGenericCreateStatic+0x5e>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <xQueueGenericCreateStatic+0x62>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueGenericCreateStatic+0x64>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	b672      	cpsid	i
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	b662      	cpsie	i
 80046c4:	623b      	str	r3, [r7, #32]
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <xQueueGenericCreateStatic+0x90>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <xQueueGenericCreateStatic+0x94>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <xQueueGenericCreateStatic+0x96>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	b672      	cpsid	i
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	b662      	cpsie	i
 80046f6:	61fb      	str	r3, [r7, #28]
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	e7fd      	b.n	80046fa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046fe:	2348      	movs	r3, #72	@ 0x48
 8004700:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b48      	cmp	r3, #72	@ 0x48
 8004706:	d00d      	beq.n	8004724 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	b672      	cpsid	i
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	b662      	cpsie	i
 800471c:	61bb      	str	r3, [r7, #24]
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004724:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800472a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004738:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f848 	bl	80047dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800474e:	4618      	mov	r0, r3
 8004750:	3730      	adds	r7, #48	@ 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004756:	b580      	push	{r7, lr}
 8004758:	b08a      	sub	sp, #40	@ 0x28
 800475a:	af02      	add	r7, sp, #8
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <xQueueGenericCreate+0x30>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476e:	b672      	cpsid	i
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	b662      	cpsie	i
 800477e:	613b      	str	r3, [r7, #16]
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e004      	b.n	800479c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3348      	adds	r3, #72	@ 0x48
 80047a0:	4618      	mov	r0, r3
 80047a2:	f002 f9a9 	bl	8006af8 <pvPortMalloc>
 80047a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	3348      	adds	r3, #72	@ 0x48
 80047b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047c0:	79fa      	ldrb	r2, [r7, #7]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f805 	bl	80047dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047d2:	69bb      	ldr	r3, [r7, #24]
	}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e002      	b.n	80047fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800480a:	2101      	movs	r1, #1
 800480c:	69b8      	ldr	r0, [r7, #24]
 800480e:	f7ff feaf 	bl	8004570 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800483a:	2300      	movs	r3, #0
 800483c:	2200      	movs	r2, #0
 800483e:	2100      	movs	r1, #0
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f837 	bl	80048b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	461a      	mov	r2, r3
 8004864:	6939      	ldr	r1, [r7, #16]
 8004866:	6978      	ldr	r0, [r7, #20]
 8004868:	f7ff ff75 	bl	8004756 <xQueueGenericCreate>
 800486c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff ffd3 	bl	800481a <prvInitialiseMutex>

		return xNewQueue;
 8004874:	68fb      	ldr	r3, [r7, #12]
	}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800487e:	b580      	push	{r7, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af02      	add	r7, sp, #8
 8004884:	4603      	mov	r3, r0
 8004886:	6039      	str	r1, [r7, #0]
 8004888:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800488a:	2301      	movs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	6939      	ldr	r1, [r7, #16]
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f7ff fed3 	bl	8004648 <xQueueGenericCreateStatic>
 80048a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ffb8 	bl	800481a <prvInitialiseMutex>

		return xNewQueue;
 80048aa:	68fb      	ldr	r3, [r7, #12]
	}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	@ 0x38
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048c2:	2300      	movs	r3, #0
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10d      	bne.n	80048ec <xQueueGenericSend+0x38>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	b672      	cpsid	i
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	b662      	cpsie	i
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSend+0x46>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <xQueueGenericSend+0x4a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueGenericSend+0x4c>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <xQueueGenericSend+0x6c>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	b672      	cpsid	i
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	b662      	cpsie	i
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d103      	bne.n	800492e <xQueueGenericSend+0x7a>
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <xQueueGenericSend+0x7e>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <xQueueGenericSend+0x80>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <xQueueGenericSend+0xa0>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	b672      	cpsid	i
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	b662      	cpsie	i
 800494c:	623b      	str	r3, [r7, #32]
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	e7fd      	b.n	8004950 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004954:	f001 fc4e 	bl	80061f4 <xTaskGetSchedulerState>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <xQueueGenericSend+0xb0>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueGenericSend+0xb4>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueGenericSend+0xb6>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <xQueueGenericSend+0xd6>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	b672      	cpsid	i
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	b662      	cpsie	i
 8004982:	61fb      	str	r3, [r7, #28]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800498a:	f001 ff87 	bl	800689c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <xQueueGenericSend+0xec>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d129      	bne.n	80049f4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a6:	f000 fc6b 	bl	8005280 <prvCopyDataToQueue>
 80049aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	3324      	adds	r3, #36	@ 0x24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 fa53 	bl	8005e64 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049c4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <xQueueGenericSend+0x210>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	e00a      	b.n	80049ec <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049dc:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <xQueueGenericSend+0x210>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049ec:	f001 ff8c 	bl	8006908 <vPortExitCritical>
				return pdPASS;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e063      	b.n	8004abc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049fa:	f001 ff85 	bl	8006908 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e05c      	b.n	8004abc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 fa8f 	bl	8005f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a16:	f001 ff77 	bl	8006908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a1a:	f001 f811 	bl	8005a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1e:	f001 ff3d 	bl	800689c <vPortEnterCritical>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSend+0x184>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d103      	bne.n	8004a4e <xQueueGenericSend+0x19a>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a4e:	f001 ff5b 	bl	8006908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a52:	1d3a      	adds	r2, r7, #4
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fa7e 	bl	8005f5c <xTaskCheckForTimeOut>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d124      	bne.n	8004ab0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a68:	f000 fd02 	bl	8005470 <prvIsQueueFull>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d018      	beq.n	8004aa4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	3310      	adds	r3, #16
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 f9ca 	bl	8005e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a82:	f000 fc8d 	bl	80053a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a86:	f000 ffe9 	bl	8005a5c <xTaskResumeAll>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f af7c 	bne.w	800498a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <xQueueGenericSend+0x210>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	e772      	b.n	800498a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aa6:	f000 fc7b 	bl	80053a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aaa:	f000 ffd7 	bl	8005a5c <xTaskResumeAll>
 8004aae:	e76c      	b.n	800498a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ab2:	f000 fc75 	bl	80053a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab6:	f000 ffd1 	bl	8005a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004aba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3738      	adds	r7, #56	@ 0x38
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	@ 0x38
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10d      	bne.n	8004afc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	b672      	cpsid	i
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	b662      	cpsie	i
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSendFromISR+0x42>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericSendFromISR+0x46>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericSendFromISR+0x48>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	b672      	cpsid	i
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	b662      	cpsie	i
 8004b28:	623b      	str	r3, [r7, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	e7fd      	b.n	8004b2c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d103      	bne.n	8004b3e <xQueueGenericSendFromISR+0x76>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <xQueueGenericSendFromISR+0x7a>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericSendFromISR+0x7c>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10d      	bne.n	8004b64 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	b672      	cpsid	i
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	b662      	cpsie	i
 8004b5c:	61fb      	str	r3, [r7, #28]
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b64:	f001 ff82 	bl	8006a6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b68:	f3ef 8211 	mrs	r2, BASEPRI
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	b672      	cpsid	i
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	b662      	cpsie	i
 8004b80:	61ba      	str	r2, [r7, #24]
 8004b82:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b84:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <xQueueGenericSendFromISR+0xd2>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d12c      	bne.n	8004bf4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004baa:	f000 fb69 	bl	8005280 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d112      	bne.n	8004bde <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d016      	beq.n	8004bee <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc2:	3324      	adds	r3, #36	@ 0x24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 f94d 	bl	8005e64 <xTaskRemoveFromEventList>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e007      	b.n	8004bee <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	3301      	adds	r3, #1
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	b25a      	sxtb	r2, r3
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004bf2:	e001      	b.n	8004bf8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3738      	adds	r7, #56	@ 0x38
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08e      	sub	sp, #56	@ 0x38
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <xQueueGiveFromISR+0x30>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	b672      	cpsid	i
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	b662      	cpsie	i
 8004c36:	623b      	str	r3, [r7, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <xQueueGiveFromISR+0x54>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	b672      	cpsid	i
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	b662      	cpsie	i
 8004c5a:	61fb      	str	r3, [r7, #28]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <xQueueGiveFromISR+0x64>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <xQueueGiveFromISR+0x68>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <xQueueGiveFromISR+0x6a>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10d      	bne.n	8004c98 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	b672      	cpsid	i
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	b662      	cpsie	i
 8004c90:	61bb      	str	r3, [r7, #24]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c98:	f001 fee8 	bl	8006a6c <vPortValidateInterruptPriority>
	__asm volatile
 8004c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	b672      	cpsid	i
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	b662      	cpsie	i
 8004cb4:	617a      	str	r2, [r7, #20]
 8004cb6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004cb8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d22b      	bcs.n	8004d24 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d112      	bne.n	8004d0e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	3324      	adds	r3, #36	@ 0x24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 f8b5 	bl	8005e64 <xTaskRemoveFromEventList>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e007      	b.n	8004d1e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	b25a      	sxtb	r2, r3
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d22:	e001      	b.n	8004d28 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f383 8811 	msr	BASEPRI, r3
}
 8004d32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3738      	adds	r7, #56	@ 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	@ 0x30
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10d      	bne.n	8004d76 <xQueueReceive+0x36>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	b672      	cpsid	i
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	b662      	cpsie	i
 8004d6e:	623b      	str	r3, [r7, #32]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <xQueueReceive+0x44>
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <xQueueReceive+0x48>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <xQueueReceive+0x4a>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <xQueueReceive+0x6a>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	b672      	cpsid	i
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	b662      	cpsie	i
 8004da2:	61fb      	str	r3, [r7, #28]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004daa:	f001 fa23 	bl	80061f4 <xTaskGetSchedulerState>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <xQueueReceive+0x7a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <xQueueReceive+0x7e>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueReceive+0x80>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10d      	bne.n	8004de0 <xQueueReceive+0xa0>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	b672      	cpsid	i
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	b662      	cpsie	i
 8004dd8:	61bb      	str	r3, [r7, #24]
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004de0:	f001 fd5c 	bl	800689c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01f      	beq.n	8004e30 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004df4:	f000 faae 	bl	8005354 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	1e5a      	subs	r2, r3, #1
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00f      	beq.n	8004e28 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f829 	bl	8005e64 <xTaskRemoveFromEventList>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e18:	4b3c      	ldr	r3, [pc, #240]	@ (8004f0c <xQueueReceive+0x1cc>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e28:	f001 fd6e 	bl	8006908 <vPortExitCritical>
				return pdPASS;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e069      	b.n	8004f04 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e36:	f001 fd67 	bl	8006908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e062      	b.n	8004f04 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f871 	bl	8005f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e52:	f001 fd59 	bl	8006908 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e56:	f000 fdf3 	bl	8005a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e5a:	f001 fd1f 	bl	800689c <vPortEnterCritical>
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d103      	bne.n	8004e74 <xQueueReceive+0x134>
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e7a:	b25b      	sxtb	r3, r3
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d103      	bne.n	8004e8a <xQueueReceive+0x14a>
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e8a:	f001 fd3d 	bl	8006908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e8e:	1d3a      	adds	r2, r7, #4
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 f860 	bl	8005f5c <xTaskCheckForTimeOut>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d123      	bne.n	8004eea <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea4:	f000 face 	bl	8005444 <prvIsQueueEmpty>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d017      	beq.n	8004ede <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	3324      	adds	r3, #36	@ 0x24
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 ffac 	bl	8005e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ebe:	f000 fa6f 	bl	80053a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ec2:	f000 fdcb 	bl	8005a5c <xTaskResumeAll>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d189      	bne.n	8004de0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <xQueueReceive+0x1cc>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	e780      	b.n	8004de0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ee0:	f000 fa5e 	bl	80053a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ee4:	f000 fdba 	bl	8005a5c <xTaskResumeAll>
 8004ee8:	e77a      	b.n	8004de0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eec:	f000 fa58 	bl	80053a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef0:	f000 fdb4 	bl	8005a5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ef4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef6:	f000 faa5 	bl	8005444 <prvIsQueueEmpty>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f43f af6f 	beq.w	8004de0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3730      	adds	r7, #48	@ 0x30
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08e      	sub	sp, #56	@ 0x38
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	b672      	cpsid	i
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	b662      	cpsie	i
 8004f40:	623b      	str	r3, [r7, #32]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00d      	beq.n	8004f6c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	b672      	cpsid	i
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	b662      	cpsie	i
 8004f64:	61fb      	str	r3, [r7, #28]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f6c:	f001 f942 	bl	80061f4 <xTaskGetSchedulerState>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <xQueueSemaphoreTake+0x6c>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <xQueueSemaphoreTake+0x70>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <xQueueSemaphoreTake+0x72>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10d      	bne.n	8004fa2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	b672      	cpsid	i
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	b662      	cpsie	i
 8004f9a:	61bb      	str	r3, [r7, #24]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fa2:	f001 fc7b 	bl	800689c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d024      	beq.n	8004ffc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004fc2:	f001 fae1 	bl	8006588 <pvTaskIncrementMutexHeldCount>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00f      	beq.n	8004ff4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 ff43 	bl	8005e64 <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b55      	ldr	r3, [pc, #340]	@ (800513c <xQueueSemaphoreTake+0x22c>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ff4:	f001 fc88 	bl	8006908 <vPortExitCritical>
				return pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e09a      	b.n	8005132 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d114      	bne.n	800502c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	617b      	str	r3, [r7, #20]
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005024:	f001 fc70 	bl	8006908 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005028:	2300      	movs	r3, #0
 800502a:	e082      	b.n	8005132 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800502c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f000 ff7a 	bl	8005f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005040:	f001 fc62 	bl	8006908 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005044:	f000 fcfc 	bl	8005a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005048:	f001 fc28 	bl	800689c <vPortEnterCritical>
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005052:	b25b      	sxtb	r3, r3
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d103      	bne.n	8005062 <xQueueSemaphoreTake+0x152>
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005068:	b25b      	sxtb	r3, r3
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d103      	bne.n	8005078 <xQueueSemaphoreTake+0x168>
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005078:	f001 fc46 	bl	8006908 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507c:	463a      	mov	r2, r7
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f000 ff69 	bl	8005f5c <xTaskCheckForTimeOut>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d132      	bne.n	80050f6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005090:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005092:	f000 f9d7 	bl	8005444 <prvIsQueueEmpty>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d026      	beq.n	80050ea <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80050a4:	f001 fbfa 	bl	800689c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 f8bf 	bl	8006230 <xTaskPriorityInherit>
 80050b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80050b4:	f001 fc28 	bl	8006908 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ba:	3324      	adds	r3, #36	@ 0x24
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fea7 	bl	8005e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050c8:	f000 f96a 	bl	80053a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050cc:	f000 fcc6 	bl	8005a5c <xTaskResumeAll>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f47f af65 	bne.w	8004fa2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80050d8:	4b18      	ldr	r3, [pc, #96]	@ (800513c <xQueueSemaphoreTake+0x22c>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	e75b      	b.n	8004fa2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80050ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050ec:	f000 f958 	bl	80053a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050f0:	f000 fcb4 	bl	8005a5c <xTaskResumeAll>
 80050f4:	e755      	b.n	8004fa2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80050f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050f8:	f000 f952 	bl	80053a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050fc:	f000 fcae 	bl	8005a5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005100:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005102:	f000 f99f 	bl	8005444 <prvIsQueueEmpty>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	f43f af4a 	beq.w	8004fa2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005114:	f001 fbc2 	bl	800689c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005118:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800511a:	f000 f899 	bl	8005250 <prvGetDisinheritPriorityAfterTimeout>
 800511e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f98e 	bl	8006448 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800512c:	f001 fbec 	bl	8006908 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005132:	4618      	mov	r0, r3
 8005134:	3738      	adds	r7, #56	@ 0x38
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	@ 0x38
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	b672      	cpsid	i
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	b662      	cpsie	i
 800516a:	623b      	str	r3, [r7, #32]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d103      	bne.n	8005180 <xQueueReceiveFromISR+0x40>
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <xQueueReceiveFromISR+0x44>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <xQueueReceiveFromISR+0x46>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	b672      	cpsid	i
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	b662      	cpsie	i
 800519e:	61fb      	str	r3, [r7, #28]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051a6:	f001 fc61 	bl	8006a6c <vPortValidateInterruptPriority>
	__asm volatile
 80051aa:	f3ef 8211 	mrs	r2, BASEPRI
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	61ba      	str	r2, [r7, #24]
 80051c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02f      	beq.n	8005236 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051e4:	f000 f8b6 	bl	8005354 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	1e5a      	subs	r2, r3, #1
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d112      	bne.n	8005220 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	3310      	adds	r3, #16
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fe2c 	bl	8005e64 <xTaskRemoveFromEventList>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00e      	beq.n	8005230 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005224:	3301      	adds	r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	b25a      	sxtb	r2, r3
 800522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005230:	2301      	movs	r3, #1
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
 8005234:	e001      	b.n	800523a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
 800523a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f383 8811 	msr	BASEPRI, r3
}
 8005244:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005248:	4618      	mov	r0, r3
 800524a:	3738      	adds	r7, #56	@ 0x38
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1c3 0307 	rsb	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e001      	b.n	8005272 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005272:	68fb      	ldr	r3, [r7, #12]
	}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d14d      	bne.n	8005342 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 f840 	bl	8006330 <xTaskPriorityDisinherit>
 80052b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	e043      	b.n	8005342 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d119      	bne.n	80052f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6858      	ldr	r0, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	461a      	mov	r2, r3
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	f00c f86b 	bl	80113a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d32b      	bcc.n	8005342 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	e026      	b.n	8005342 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68d8      	ldr	r0, [r3, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	461a      	mov	r2, r3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	f00c f851 	bl	80113a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530c:	425b      	negs	r3, r3
 800530e:	441a      	add	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d207      	bcs.n	8005330 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	425b      	negs	r3, r3
 800532a:	441a      	add	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d105      	bne.n	8005342 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3b01      	subs	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800534a:	697b      	ldr	r3, [r7, #20]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d303      	bcc.n	8005388 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68d9      	ldr	r1, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	461a      	mov	r2, r3
 8005392:	6838      	ldr	r0, [r7, #0]
 8005394:	f00c f807 	bl	80113a6 <memcpy>
	}
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053a8:	f001 fa78 	bl	800689c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053b4:	e011      	b.n	80053da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d012      	beq.n	80053e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3324      	adds	r3, #36	@ 0x24
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fd4e 	bl	8005e64 <xTaskRemoveFromEventList>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053ce:	f000 fe2d 	bl	800602c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dce9      	bgt.n	80053b6 <prvUnlockQueue+0x16>
 80053e2:	e000      	b.n	80053e6 <prvUnlockQueue+0x46>
					break;
 80053e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	22ff      	movs	r2, #255	@ 0xff
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80053ee:	f001 fa8b 	bl	8006908 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053f2:	f001 fa53 	bl	800689c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053fe:	e011      	b.n	8005424 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d012      	beq.n	800542e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3310      	adds	r3, #16
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fd29 	bl	8005e64 <xTaskRemoveFromEventList>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005418:	f000 fe08 	bl	800602c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	3b01      	subs	r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005428:	2b00      	cmp	r3, #0
 800542a:	dce9      	bgt.n	8005400 <prvUnlockQueue+0x60>
 800542c:	e000      	b.n	8005430 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800542e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	22ff      	movs	r2, #255	@ 0xff
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005438:	f001 fa66 	bl	8006908 <vPortExitCritical>
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800544c:	f001 fa26 	bl	800689c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e001      	b.n	8005462 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005462:	f001 fa51 	bl	8006908 <vPortExitCritical>

	return xReturn;
 8005466:	68fb      	ldr	r3, [r7, #12]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005478:	f001 fa10 	bl	800689c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005484:	429a      	cmp	r2, r3
 8005486:	d102      	bne.n	800548e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e001      	b.n	8005492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005492:	f001 fa39 	bl	8006908 <vPortExitCritical>

	return xReturn;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	@ 0x38
 80054a4:	af04      	add	r7, sp, #16
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10d      	bne.n	80054d0 <xTaskCreateStatic+0x30>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	b672      	cpsid	i
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	b662      	cpsie	i
 80054c8:	623b      	str	r3, [r7, #32]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <xTaskCreateStatic+0x52>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	b672      	cpsid	i
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	b662      	cpsie	i
 80054ea:	61fb      	str	r3, [r7, #28]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054f2:	2354      	movs	r3, #84	@ 0x54
 80054f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b54      	cmp	r3, #84	@ 0x54
 80054fa:	d00d      	beq.n	8005518 <xTaskCreateStatic+0x78>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	b672      	cpsid	i
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	b662      	cpsie	i
 8005510:	61bb      	str	r3, [r7, #24]
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005518:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800551a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <xTaskCreateStatic+0xbe>
 8005520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01b      	beq.n	800555e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005538:	2300      	movs	r3, #0
 800553a:	9303      	str	r3, [sp, #12]
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	9302      	str	r3, [sp, #8]
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f850 	bl	80055f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005556:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005558:	f000 f8d8 	bl	800570c <prvAddNewTaskToReadyList>
 800555c:	e001      	b.n	8005562 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005562:	697b      	ldr	r3, [r7, #20]
	}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	@ 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	@ 0x30
 8005570:	af04      	add	r7, sp, #16
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fab9 	bl	8006af8 <pvPortMalloc>
 8005586:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00e      	beq.n	80055ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800558e:	2054      	movs	r0, #84	@ 0x54
 8005590:	f001 fab2 	bl	8006af8 <pvPortMalloc>
 8005594:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80055a2:	e005      	b.n	80055b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055a4:	6978      	ldr	r0, [r7, #20]
 80055a6:	f001 fb75 	bl	8006c94 <vPortFree>
 80055aa:	e001      	b.n	80055b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	2300      	movs	r3, #0
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	9302      	str	r3, [sp, #8]
 80055c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f80e 	bl	80055f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055da:	69f8      	ldr	r0, [r7, #28]
 80055dc:	f000 f896 	bl	800570c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055e0:	2301      	movs	r3, #1
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	e002      	b.n	80055ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055ec:	69bb      	ldr	r3, [r7, #24]
	}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b088      	sub	sp, #32
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800560e:	440b      	add	r3, r1
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00d      	beq.n	8005644 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	b672      	cpsid	i
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	b662      	cpsie	i
 800563c:	617b      	str	r3, [r7, #20]
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01f      	beq.n	800568a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e012      	b.n	8005676 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	7819      	ldrb	r1, [r3, #0]
 8005658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	3334      	adds	r3, #52	@ 0x34
 8005660:	460a      	mov	r2, r1
 8005662:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2b0f      	cmp	r3, #15
 800567a:	d9e9      	bls.n	8005650 <prvInitialiseNewTask+0x5a>
 800567c:	e000      	b.n	8005680 <prvInitialiseNewTask+0x8a>
			{
				break;
 800567e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005688:	e003      	b.n	8005692 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	2b06      	cmp	r3, #6
 8005696:	d901      	bls.n	800569c <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005698:	2306      	movs	r3, #6
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	2200      	movs	r2, #0
 80056ac:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	3304      	adds	r3, #4
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fec8 	bl	8004448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fec3 	bl	8004448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	f1c3 0207 	rsb	r2, r3, #7
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	68f9      	ldr	r1, [r7, #12]
 80056ea:	69b8      	ldr	r0, [r7, #24]
 80056ec:	f000 ffc6 	bl	800667c <pxPortInitialiseStack>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005714:	f001 f8c2 	bl	800689c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005718:	4b2a      	ldr	r3, [pc, #168]	@ (80057c4 <prvAddNewTaskToReadyList+0xb8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a29      	ldr	r2, [pc, #164]	@ (80057c4 <prvAddNewTaskToReadyList+0xb8>)
 8005720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005722:	4b29      	ldr	r3, [pc, #164]	@ (80057c8 <prvAddNewTaskToReadyList+0xbc>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800572a:	4a27      	ldr	r2, [pc, #156]	@ (80057c8 <prvAddNewTaskToReadyList+0xbc>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005730:	4b24      	ldr	r3, [pc, #144]	@ (80057c4 <prvAddNewTaskToReadyList+0xb8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d110      	bne.n	800575a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005738:	f000 fc9c 	bl	8006074 <prvInitialiseTaskLists>
 800573c:	e00d      	b.n	800575a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800573e:	4b23      	ldr	r3, [pc, #140]	@ (80057cc <prvAddNewTaskToReadyList+0xc0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005746:	4b20      	ldr	r3, [pc, #128]	@ (80057c8 <prvAddNewTaskToReadyList+0xbc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d802      	bhi.n	800575a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <prvAddNewTaskToReadyList+0xbc>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800575a:	4b1d      	ldr	r3, [pc, #116]	@ (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3301      	adds	r3, #1
 8005760:	4a1b      	ldr	r2, [pc, #108]	@ (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 8005762:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	2201      	movs	r2, #1
 800576a:	409a      	lsls	r2, r3
 800576c:	4b19      	ldr	r3, [pc, #100]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4313      	orrs	r3, r2
 8005772:	4a18      	ldr	r2, [pc, #96]	@ (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <prvAddNewTaskToReadyList+0xcc>)
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7fe fe68 	bl	8004462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005792:	f001 f8b9 	bl	8006908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <prvAddNewTaskToReadyList+0xc0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800579e:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <prvAddNewTaskToReadyList+0xbc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d207      	bcs.n	80057bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057ac:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <prvAddNewTaskToReadyList+0xd0>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20005030 	.word	0x20005030
 80057c8:	20004f30 	.word	0x20004f30
 80057cc:	2000503c 	.word	0x2000503c
 80057d0:	2000504c 	.word	0x2000504c
 80057d4:	20005038 	.word	0x20005038
 80057d8:	20004f34 	.word	0x20004f34
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80057e8:	f001 f858 	bl	800689c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <vTaskDelete+0x18>
 80057f2:	4b3a      	ldr	r3, [pc, #232]	@ (80058dc <vTaskDelete+0xfc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	e000      	b.n	80057fa <vTaskDelete+0x1a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fe8b 	bl	800451c <uxListRemove>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d115      	bne.n	8005838 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005810:	4933      	ldr	r1, [pc, #204]	@ (80058e0 <vTaskDelete+0x100>)
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <vTaskDelete+0x58>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005826:	2201      	movs	r2, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43da      	mvns	r2, r3
 800582e:	4b2d      	ldr	r3, [pc, #180]	@ (80058e4 <vTaskDelete+0x104>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4013      	ands	r3, r2
 8005834:	4a2b      	ldr	r2, [pc, #172]	@ (80058e4 <vTaskDelete+0x104>)
 8005836:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3318      	adds	r3, #24
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe fe69 	bl	800451c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800584a:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <vTaskDelete+0x108>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a25      	ldr	r2, [pc, #148]	@ (80058e8 <vTaskDelete+0x108>)
 8005852:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005854:	4b21      	ldr	r3, [pc, #132]	@ (80058dc <vTaskDelete+0xfc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	429a      	cmp	r2, r3
 800585c:	d10b      	bne.n	8005876 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4821      	ldr	r0, [pc, #132]	@ (80058ec <vTaskDelete+0x10c>)
 8005866:	f7fe fdfc 	bl	8004462 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800586a:	4b21      	ldr	r3, [pc, #132]	@ (80058f0 <vTaskDelete+0x110>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	4a1f      	ldr	r2, [pc, #124]	@ (80058f0 <vTaskDelete+0x110>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e009      	b.n	800588a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005876:	4b1f      	ldr	r3, [pc, #124]	@ (80058f4 <vTaskDelete+0x114>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3b01      	subs	r3, #1
 800587c:	4a1d      	ldr	r2, [pc, #116]	@ (80058f4 <vTaskDelete+0x114>)
 800587e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 fc65 	bl	8006150 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005886:	f000 fc95 	bl	80061b4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800588a:	f001 f83d 	bl	8006908 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800588e:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <vTaskDelete+0x118>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01e      	beq.n	80058d4 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8005896:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <vTaskDelete+0xfc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	429a      	cmp	r2, r3
 800589e:	d119      	bne.n	80058d4 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80058a0:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <vTaskDelete+0x11c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <vTaskDelete+0xe4>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	b672      	cpsid	i
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	b662      	cpsie	i
 80058bc:	60bb      	str	r3, [r7, #8]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 80058c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005900 <vTaskDelete+0x120>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20004f30 	.word	0x20004f30
 80058e0:	20004f34 	.word	0x20004f34
 80058e4:	20005038 	.word	0x20005038
 80058e8:	2000504c 	.word	0x2000504c
 80058ec:	20005004 	.word	0x20005004
 80058f0:	20005018 	.word	0x20005018
 80058f4:	20005030 	.word	0x20005030
 80058f8:	2000503c 	.word	0x2000503c
 80058fc:	20005058 	.word	0x20005058
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01a      	beq.n	800594c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <vTaskDelay+0x68>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <vTaskDelay+0x36>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	b672      	cpsid	i
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	b662      	cpsie	i
 8005932:	60bb      	str	r3, [r7, #8]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800593a:	f000 f881 	bl	8005a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800593e:	2100      	movs	r1, #0
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fe35 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005946:	f000 f889 	bl	8005a5c <xTaskResumeAll>
 800594a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005952:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <vTaskDelay+0x6c>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20005058 	.word	0x20005058
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	@ 0x28
 8005978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005982:	463a      	mov	r2, r7
 8005984:	1d39      	adds	r1, r7, #4
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f7fa fe08 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	9202      	str	r2, [sp, #8]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	2300      	movs	r3, #0
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	460a      	mov	r2, r1
 80059a2:	4921      	ldr	r1, [pc, #132]	@ (8005a28 <vTaskStartScheduler+0xb4>)
 80059a4:	4821      	ldr	r0, [pc, #132]	@ (8005a2c <vTaskStartScheduler+0xb8>)
 80059a6:	f7ff fd7b 	bl	80054a0 <xTaskCreateStatic>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4a20      	ldr	r2, [pc, #128]	@ (8005a30 <vTaskStartScheduler+0xbc>)
 80059ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a30 <vTaskStartScheduler+0xbc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e001      	b.n	80059c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d118      	bne.n	80059fa <vTaskStartScheduler+0x86>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	b672      	cpsid	i
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	b662      	cpsie	i
 80059dc:	613b      	str	r3, [r7, #16]
}
 80059de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059e0:	4b14      	ldr	r3, [pc, #80]	@ (8005a34 <vTaskStartScheduler+0xc0>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059e8:	4b13      	ldr	r3, [pc, #76]	@ (8005a38 <vTaskStartScheduler+0xc4>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059ee:	4b13      	ldr	r3, [pc, #76]	@ (8005a3c <vTaskStartScheduler+0xc8>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059f4:	f000 fed4 	bl	80067a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059f8:	e011      	b.n	8005a1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d10d      	bne.n	8005a1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	b672      	cpsid	i
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	b662      	cpsie	i
 8005a16:	60fb      	str	r3, [r7, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <vTaskStartScheduler+0xa6>
}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	0801210c 	.word	0x0801210c
 8005a2c:	08006045 	.word	0x08006045
 8005a30:	20005054 	.word	0x20005054
 8005a34:	20005050 	.word	0x20005050
 8005a38:	2000503c 	.word	0x2000503c
 8005a3c:	20005034 	.word	0x20005034

08005a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a44:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <vTaskSuspendAll+0x18>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	4a03      	ldr	r2, [pc, #12]	@ (8005a58 <vTaskSuspendAll+0x18>)
 8005a4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20005058 	.word	0x20005058

08005a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a6a:	4b43      	ldr	r3, [pc, #268]	@ (8005b78 <xTaskResumeAll+0x11c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <xTaskResumeAll+0x32>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	b672      	cpsid	i
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	b662      	cpsie	i
 8005a86:	603b      	str	r3, [r7, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a8e:	f000 ff05 	bl	800689c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a92:	4b39      	ldr	r3, [pc, #228]	@ (8005b78 <xTaskResumeAll+0x11c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4a37      	ldr	r2, [pc, #220]	@ (8005b78 <xTaskResumeAll+0x11c>)
 8005a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a9c:	4b36      	ldr	r3, [pc, #216]	@ (8005b78 <xTaskResumeAll+0x11c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d161      	bne.n	8005b68 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aa4:	4b35      	ldr	r3, [pc, #212]	@ (8005b7c <xTaskResumeAll+0x120>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05d      	beq.n	8005b68 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aac:	e02e      	b.n	8005b0c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aae:	4b34      	ldr	r3, [pc, #208]	@ (8005b80 <xTaskResumeAll+0x124>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fd2e 	bl	800451c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fd29 	bl	800451c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	2201      	movs	r2, #1
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8005b84 <xTaskResumeAll+0x128>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b84 <xTaskResumeAll+0x128>)
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4a27      	ldr	r2, [pc, #156]	@ (8005b88 <xTaskResumeAll+0x12c>)
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f7fe fcb5 	bl	8004462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	4b23      	ldr	r3, [pc, #140]	@ (8005b8c <xTaskResumeAll+0x130>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005b06:	4b22      	ldr	r3, [pc, #136]	@ (8005b90 <xTaskResumeAll+0x134>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005b80 <xTaskResumeAll+0x124>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1cc      	bne.n	8005aae <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b1a:	f000 fb4b 	bl	80061b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <xTaskResumeAll+0x138>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d010      	beq.n	8005b4c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b2a:	f000 f859 	bl	8005be0 <xTaskIncrementTick>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005b34:	4b16      	ldr	r3, [pc, #88]	@ (8005b90 <xTaskResumeAll+0x134>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f1      	bne.n	8005b2a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005b46:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <xTaskResumeAll+0x138>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b4c:	4b10      	ldr	r3, [pc, #64]	@ (8005b90 <xTaskResumeAll+0x134>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b58:	4b0f      	ldr	r3, [pc, #60]	@ (8005b98 <xTaskResumeAll+0x13c>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b68:	f000 fece 	bl	8006908 <vPortExitCritical>

	return xAlreadyYielded;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20005058 	.word	0x20005058
 8005b7c:	20005030 	.word	0x20005030
 8005b80:	20004ff0 	.word	0x20004ff0
 8005b84:	20005038 	.word	0x20005038
 8005b88:	20004f34 	.word	0x20004f34
 8005b8c:	20004f30 	.word	0x20004f30
 8005b90:	20005044 	.word	0x20005044
 8005b94:	20005040 	.word	0x20005040
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ba2:	4b05      	ldr	r3, [pc, #20]	@ (8005bb8 <xTaskGetTickCount+0x1c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ba8:	687b      	ldr	r3, [r7, #4]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20005034 	.word	0x20005034

08005bbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bc2:	f000 ff53 	bl	8006a6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <xTaskGetTickCountFromISR+0x20>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bd0:	683b      	ldr	r3, [r7, #0]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20005034 	.word	0x20005034

08005be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bea:	4b50      	ldr	r3, [pc, #320]	@ (8005d2c <xTaskIncrementTick+0x14c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 808b 	bne.w	8005d0a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8005d30 <xTaskIncrementTick+0x150>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8005d30 <xTaskIncrementTick+0x150>)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d123      	bne.n	8005c50 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c08:	4b4a      	ldr	r3, [pc, #296]	@ (8005d34 <xTaskIncrementTick+0x154>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <xTaskIncrementTick+0x4e>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	b672      	cpsid	i
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	b662      	cpsie	i
 8005c26:	603b      	str	r3, [r7, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <xTaskIncrementTick+0x4a>
 8005c2e:	4b41      	ldr	r3, [pc, #260]	@ (8005d34 <xTaskIncrementTick+0x154>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	4b40      	ldr	r3, [pc, #256]	@ (8005d38 <xTaskIncrementTick+0x158>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a3e      	ldr	r2, [pc, #248]	@ (8005d34 <xTaskIncrementTick+0x154>)
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d38 <xTaskIncrementTick+0x158>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b3e      	ldr	r3, [pc, #248]	@ (8005d3c <xTaskIncrementTick+0x15c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a3c      	ldr	r2, [pc, #240]	@ (8005d3c <xTaskIncrementTick+0x15c>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	f000 fab2 	bl	80061b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c50:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <xTaskIncrementTick+0x160>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d348      	bcc.n	8005cec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c5a:	4b36      	ldr	r3, [pc, #216]	@ (8005d34 <xTaskIncrementTick+0x154>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c64:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <xTaskIncrementTick+0x160>)
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6a:	601a      	str	r2, [r3, #0]
					break;
 8005c6c:	e03e      	b.n	8005cec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6e:	4b31      	ldr	r3, [pc, #196]	@ (8005d34 <xTaskIncrementTick+0x154>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d203      	bcs.n	8005c8e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c86:	4a2e      	ldr	r2, [pc, #184]	@ (8005d40 <xTaskIncrementTick+0x160>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c8c:	e02e      	b.n	8005cec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fc42 	bl	800451c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fc39 	bl	800451c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	2201      	movs	r2, #1
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <xTaskIncrementTick+0x164>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	4a22      	ldr	r2, [pc, #136]	@ (8005d44 <xTaskIncrementTick+0x164>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d48 <xTaskIncrementTick+0x168>)
 8005cca:	441a      	add	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe fbc5 	bl	8004462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d4c <xTaskIncrementTick+0x16c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d3b9      	bcc.n	8005c5a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cea:	e7b6      	b.n	8005c5a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cec:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <xTaskIncrementTick+0x16c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf2:	4915      	ldr	r1, [pc, #84]	@ (8005d48 <xTaskIncrementTick+0x168>)
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d907      	bls.n	8005d14 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e004      	b.n	8005d14 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d0a:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <xTaskIncrementTick+0x170>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	4a0f      	ldr	r2, [pc, #60]	@ (8005d50 <xTaskIncrementTick+0x170>)
 8005d12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d14:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <xTaskIncrementTick+0x174>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d20:	697b      	ldr	r3, [r7, #20]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20005058 	.word	0x20005058
 8005d30:	20005034 	.word	0x20005034
 8005d34:	20004fe8 	.word	0x20004fe8
 8005d38:	20004fec 	.word	0x20004fec
 8005d3c:	20005048 	.word	0x20005048
 8005d40:	20005050 	.word	0x20005050
 8005d44:	20005038 	.word	0x20005038
 8005d48:	20004f34 	.word	0x20004f34
 8005d4c:	20004f30 	.word	0x20004f30
 8005d50:	20005040 	.word	0x20005040
 8005d54:	20005044 	.word	0x20005044

08005d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d5e:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <vTaskSwitchContext+0xa8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d66:	4b27      	ldr	r3, [pc, #156]	@ (8005e04 <vTaskSwitchContext+0xac>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d6c:	e042      	b.n	8005df4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005d6e:	4b25      	ldr	r3, [pc, #148]	@ (8005e04 <vTaskSwitchContext+0xac>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d74:	4b24      	ldr	r3, [pc, #144]	@ (8005e08 <vTaskSwitchContext+0xb0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	fab3 f383 	clz	r3, r3
 8005d80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	f1c3 031f 	rsb	r3, r3, #31
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	4920      	ldr	r1, [pc, #128]	@ (8005e0c <vTaskSwitchContext+0xb4>)
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <vTaskSwitchContext+0x62>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	b672      	cpsid	i
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	b662      	cpsie	i
 8005db2:	607b      	str	r3, [r7, #4]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <vTaskSwitchContext+0x5e>
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a11      	ldr	r2, [pc, #68]	@ (8005e0c <vTaskSwitchContext+0xb4>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d104      	bne.n	8005dea <vTaskSwitchContext+0x92>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a07      	ldr	r2, [pc, #28]	@ (8005e10 <vTaskSwitchContext+0xb8>)
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20005058 	.word	0x20005058
 8005e04:	20005044 	.word	0x20005044
 8005e08:	20005038 	.word	0x20005038
 8005e0c:	20004f34 	.word	0x20004f34
 8005e10:	20004f30 	.word	0x20004f30

08005e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	b672      	cpsid	i
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	b662      	cpsie	i
 8005e38:	60fb      	str	r3, [r7, #12]
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e40:	4b07      	ldr	r3, [pc, #28]	@ (8005e60 <vTaskPlaceOnEventList+0x4c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3318      	adds	r3, #24
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fe fb2e 	bl	80044aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e4e:	2101      	movs	r1, #1
 8005e50:	6838      	ldr	r0, [r7, #0]
 8005e52:	f000 fbad 	bl	80065b0 <prvAddCurrentTaskToDelayedList>
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20004f30 	.word	0x20004f30

08005e64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	b672      	cpsid	i
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	b662      	cpsie	i
 8005e8e:	60fb      	str	r3, [r7, #12]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3318      	adds	r3, #24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fb3e 	bl	800451c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f18 <xTaskRemoveFromEventList+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11c      	bne.n	8005ee2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe fb35 	bl	800451c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	4b18      	ldr	r3, [pc, #96]	@ (8005f1c <xTaskRemoveFromEventList+0xb8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <xTaskRemoveFromEventList+0xb8>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <xTaskRemoveFromEventList+0xbc>)
 8005ed2:	441a      	add	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe fac1 	bl	8004462 <vListInsertEnd>
 8005ee0:	e005      	b.n	8005eee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	3318      	adds	r3, #24
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	480e      	ldr	r0, [pc, #56]	@ (8005f24 <xTaskRemoveFromEventList+0xc0>)
 8005eea:	f7fe faba 	bl	8004462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <xTaskRemoveFromEventList+0xc4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d905      	bls.n	8005f08 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f00:	4b0a      	ldr	r3, [pc, #40]	@ (8005f2c <xTaskRemoveFromEventList+0xc8>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e001      	b.n	8005f0c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f0c:	697b      	ldr	r3, [r7, #20]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20005058 	.word	0x20005058
 8005f1c:	20005038 	.word	0x20005038
 8005f20:	20004f34 	.word	0x20004f34
 8005f24:	20004ff0 	.word	0x20004ff0
 8005f28:	20004f30 	.word	0x20004f30
 8005f2c:	20005044 	.word	0x20005044

08005f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f38:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <vTaskInternalSetTimeOutState+0x24>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <vTaskInternalSetTimeOutState+0x28>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20005048 	.word	0x20005048
 8005f58:	20005034 	.word	0x20005034

08005f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	613b      	str	r3, [r7, #16]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f92:	b672      	cpsid	i
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	b662      	cpsie	i
 8005fa2:	60fb      	str	r3, [r7, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005faa:	f000 fc77 	bl	800689c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fae:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <xTaskCheckForTimeOut+0xc8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d102      	bne.n	8005fce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e023      	b.n	8006016 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <xTaskCheckForTimeOut+0xcc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d007      	beq.n	8005fea <xTaskCheckForTimeOut+0x8e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e015      	b.n	8006016 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d20b      	bcs.n	800600c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff95 	bl	8005f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	e004      	b.n	8006016 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006016:	f000 fc77 	bl	8006908 <vPortExitCritical>

	return xReturn;
 800601a:	69fb      	ldr	r3, [r7, #28]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20005034 	.word	0x20005034
 8006028:	20005048 	.word	0x20005048

0800602c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006030:	4b03      	ldr	r3, [pc, #12]	@ (8006040 <vTaskMissedYield+0x14>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20005044 	.word	0x20005044

08006044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800604c:	f000 f852 	bl	80060f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <prvIdleTask+0x28>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d9f9      	bls.n	800604c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <prvIdleTask+0x2c>)
 800605a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006068:	e7f0      	b.n	800604c <prvIdleTask+0x8>
 800606a:	bf00      	nop
 800606c:	20004f34 	.word	0x20004f34
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800607a:	2300      	movs	r3, #0
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	e00c      	b.n	800609a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4a12      	ldr	r2, [pc, #72]	@ (80060d4 <prvInitialiseTaskLists+0x60>)
 800608c:	4413      	add	r3, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe f9ba 	bl	8004408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3301      	adds	r3, #1
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b06      	cmp	r3, #6
 800609e:	d9ef      	bls.n	8006080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060a0:	480d      	ldr	r0, [pc, #52]	@ (80060d8 <prvInitialiseTaskLists+0x64>)
 80060a2:	f7fe f9b1 	bl	8004408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060a6:	480d      	ldr	r0, [pc, #52]	@ (80060dc <prvInitialiseTaskLists+0x68>)
 80060a8:	f7fe f9ae 	bl	8004408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060ac:	480c      	ldr	r0, [pc, #48]	@ (80060e0 <prvInitialiseTaskLists+0x6c>)
 80060ae:	f7fe f9ab 	bl	8004408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060b2:	480c      	ldr	r0, [pc, #48]	@ (80060e4 <prvInitialiseTaskLists+0x70>)
 80060b4:	f7fe f9a8 	bl	8004408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060b8:	480b      	ldr	r0, [pc, #44]	@ (80060e8 <prvInitialiseTaskLists+0x74>)
 80060ba:	f7fe f9a5 	bl	8004408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060be:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <prvInitialiseTaskLists+0x78>)
 80060c0:	4a05      	ldr	r2, [pc, #20]	@ (80060d8 <prvInitialiseTaskLists+0x64>)
 80060c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060c4:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <prvInitialiseTaskLists+0x7c>)
 80060c6:	4a05      	ldr	r2, [pc, #20]	@ (80060dc <prvInitialiseTaskLists+0x68>)
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20004f34 	.word	0x20004f34
 80060d8:	20004fc0 	.word	0x20004fc0
 80060dc:	20004fd4 	.word	0x20004fd4
 80060e0:	20004ff0 	.word	0x20004ff0
 80060e4:	20005004 	.word	0x20005004
 80060e8:	2000501c 	.word	0x2000501c
 80060ec:	20004fe8 	.word	0x20004fe8
 80060f0:	20004fec 	.word	0x20004fec

080060f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060fa:	e019      	b.n	8006130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060fc:	f000 fbce 	bl	800689c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <prvCheckTasksWaitingTermination+0x50>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fa05 	bl	800451c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <prvCheckTasksWaitingTermination+0x54>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a0b      	ldr	r2, [pc, #44]	@ (8006148 <prvCheckTasksWaitingTermination+0x54>)
 800611a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800611c:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <prvCheckTasksWaitingTermination+0x58>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <prvCheckTasksWaitingTermination+0x58>)
 8006124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006126:	f000 fbef 	bl	8006908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f810 	bl	8006150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006130:	4b06      	ldr	r3, [pc, #24]	@ (800614c <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e1      	bne.n	80060fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20005004 	.word	0x20005004
 8006148:	20005030 	.word	0x20005030
 800614c:	20005018 	.word	0x20005018

08006150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800615e:	2b00      	cmp	r3, #0
 8006160:	d108      	bne.n	8006174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fd94 	bl	8006c94 <vPortFree>
				vPortFree( pxTCB );
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fd91 	bl	8006c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006172:	e01b      	b.n	80061ac <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800617a:	2b01      	cmp	r3, #1
 800617c:	d103      	bne.n	8006186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fd88 	bl	8006c94 <vPortFree>
	}
 8006184:	e012      	b.n	80061ac <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800618c:	2b02      	cmp	r3, #2
 800618e:	d00d      	beq.n	80061ac <prvDeleteTCB+0x5c>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	60fb      	str	r3, [r7, #12]
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <prvDeleteTCB+0x58>
	}
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ba:	4b0c      	ldr	r3, [pc, #48]	@ (80061ec <prvResetNextTaskUnblockTime+0x38>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <prvResetNextTaskUnblockTime+0x3c>)
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061cc:	e008      	b.n	80061e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ce:	4b07      	ldr	r3, [pc, #28]	@ (80061ec <prvResetNextTaskUnblockTime+0x38>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a04      	ldr	r2, [pc, #16]	@ (80061f0 <prvResetNextTaskUnblockTime+0x3c>)
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20004fe8 	.word	0x20004fe8
 80061f0:	20005050 	.word	0x20005050

080061f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <xTaskGetSchedulerState+0x34>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006202:	2301      	movs	r3, #1
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	e008      	b.n	800621a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006208:	4b08      	ldr	r3, [pc, #32]	@ (800622c <xTaskGetSchedulerState+0x38>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006210:	2302      	movs	r3, #2
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	e001      	b.n	800621a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006216:	2300      	movs	r3, #0
 8006218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800621a:	687b      	ldr	r3, [r7, #4]
	}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	2000503c 	.word	0x2000503c
 800622c:	20005058 	.word	0x20005058

08006230 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d069      	beq.n	800631a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624a:	4b36      	ldr	r3, [pc, #216]	@ (8006324 <xTaskPriorityInherit+0xf4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d259      	bcs.n	8006308 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	db06      	blt.n	800626a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625c:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <xTaskPriorityInherit+0xf4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	f1c3 0207 	rsb	r2, r3, #7
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6959      	ldr	r1, [r3, #20]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <xTaskPriorityInherit+0xf8>)
 800627c:	4413      	add	r3, r2
 800627e:	4299      	cmp	r1, r3
 8006280:	d13a      	bne.n	80062f8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3304      	adds	r3, #4
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe f948 	bl	800451c <uxListRemove>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d115      	bne.n	80062be <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006296:	4924      	ldr	r1, [pc, #144]	@ (8006328 <xTaskPriorityInherit+0xf8>)
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTaskPriorityInherit+0x8e>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	2201      	movs	r2, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43da      	mvns	r2, r3
 80062b4:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <xTaskPriorityInherit+0xfc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4013      	ands	r3, r2
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <xTaskPriorityInherit+0xfc>)
 80062bc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062be:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <xTaskPriorityInherit+0xf4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	4b16      	ldr	r3, [pc, #88]	@ (800632c <xTaskPriorityInherit+0xfc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	4a15      	ldr	r2, [pc, #84]	@ (800632c <xTaskPriorityInherit+0xfc>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a10      	ldr	r2, [pc, #64]	@ (8006328 <xTaskPriorityInherit+0xf8>)
 80062e8:	441a      	add	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe f8b6 	bl	8004462 <vListInsertEnd>
 80062f6:	e004      	b.n	8006302 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <xTaskPriorityInherit+0xf4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006302:	2301      	movs	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e008      	b.n	800631a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800630c:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <xTaskPriorityInherit+0xf4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	429a      	cmp	r2, r3
 8006314:	d201      	bcs.n	800631a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800631a:	68fb      	ldr	r3, [r7, #12]
	}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20004f30 	.word	0x20004f30
 8006328:	20004f34 	.word	0x20004f34
 800632c:	20005038 	.word	0x20005038

08006330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d074      	beq.n	8006430 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006346:	4b3d      	ldr	r3, [pc, #244]	@ (800643c <xTaskPriorityDisinherit+0x10c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	d00d      	beq.n	800636c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	b672      	cpsid	i
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	b662      	cpsie	i
 8006364:	60fb      	str	r3, [r7, #12]
}
 8006366:	bf00      	nop
 8006368:	bf00      	nop
 800636a:	e7fd      	b.n	8006368 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10d      	bne.n	8006390 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	b672      	cpsid	i
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	b662      	cpsie	i
 8006388:	60bb      	str	r3, [r7, #8]
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006394:	1e5a      	subs	r2, r3, #1
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d044      	beq.n	8006430 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d140      	bne.n	8006430 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe f8b2 	bl	800451c <uxListRemove>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d115      	bne.n	80063ea <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	491f      	ldr	r1, [pc, #124]	@ (8006440 <xTaskPriorityDisinherit+0x110>)
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xTaskPriorityDisinherit+0xba>
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	2201      	movs	r2, #1
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43da      	mvns	r2, r3
 80063e0:	4b18      	ldr	r3, [pc, #96]	@ (8006444 <xTaskPriorityDisinherit+0x114>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4013      	ands	r3, r2
 80063e6:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <xTaskPriorityDisinherit+0x114>)
 80063e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	f1c3 0207 	rsb	r2, r3, #7
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	2201      	movs	r2, #1
 8006404:	409a      	lsls	r2, r3
 8006406:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <xTaskPriorityDisinherit+0x114>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4313      	orrs	r3, r2
 800640c:	4a0d      	ldr	r2, [pc, #52]	@ (8006444 <xTaskPriorityDisinherit+0x114>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4a08      	ldr	r2, [pc, #32]	@ (8006440 <xTaskPriorityDisinherit+0x110>)
 800641e:	441a      	add	r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fe f81b 	bl	8004462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006430:	697b      	ldr	r3, [r7, #20]
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20004f30 	.word	0x20004f30
 8006440:	20004f34 	.word	0x20004f34
 8006444:	20005038 	.word	0x20005038

08006448 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006456:	2301      	movs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8089 	beq.w	8006574 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10d      	bne.n	8006486 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	b672      	cpsid	i
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	b662      	cpsie	i
 800647e:	60fb      	str	r3, [r7, #12]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d902      	bls.n	8006496 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e002      	b.n	800649c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d066      	beq.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d161      	bne.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064b0:	4b32      	ldr	r3, [pc, #200]	@ (800657c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d10d      	bne.n	80064d6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	b672      	cpsid	i
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	b662      	cpsie	i
 80064ce:	60bb      	str	r3, [r7, #8]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	db04      	blt.n	80064f4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f1c3 0207 	rsb	r2, r3, #7
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	6959      	ldr	r1, [r3, #20]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006504:	4413      	add	r3, r2
 8006506:	4299      	cmp	r1, r3
 8006508:	d134      	bne.n	8006574 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe f804 	bl	800451c <uxListRemove>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d115      	bne.n	8006546 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651e:	4918      	ldr	r1, [pc, #96]	@ (8006580 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43da      	mvns	r2, r3
 800653c:	4b11      	ldr	r3, [pc, #68]	@ (8006584 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4013      	ands	r3, r2
 8006542:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006544:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	2201      	movs	r2, #1
 800654c:	409a      	lsls	r2, r3
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4313      	orrs	r3, r2
 8006554:	4a0b      	ldr	r2, [pc, #44]	@ (8006584 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a06      	ldr	r2, [pc, #24]	@ (8006580 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006566:	441a      	add	r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fd ff77 	bl	8004462 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006574:	bf00      	nop
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20004f30 	.word	0x20004f30
 8006580:	20004f34 	.word	0x20004f34
 8006584:	20005038 	.word	0x20005038

08006588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <pvTaskIncrementMutexHeldCount+0x24>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <pvTaskIncrementMutexHeldCount+0x24>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800659a:	3201      	adds	r2, #1
 800659c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800659e:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <pvTaskIncrementMutexHeldCount+0x24>)
 80065a0:	681b      	ldr	r3, [r3, #0]
	}
 80065a2:	4618      	mov	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20004f30 	.word	0x20004f30

080065b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ba:	4b29      	ldr	r3, [pc, #164]	@ (8006660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c0:	4b28      	ldr	r3, [pc, #160]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd ffa8 	bl	800451c <uxListRemove>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065d2:	4b24      	ldr	r3, [pc, #144]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	2201      	movs	r2, #1
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43da      	mvns	r2, r3
 80065e0:	4b21      	ldr	r3, [pc, #132]	@ (8006668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4013      	ands	r3, r2
 80065e6:	4a20      	ldr	r2, [pc, #128]	@ (8006668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d10a      	bne.n	8006608 <prvAddCurrentTaskToDelayedList+0x58>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	481a      	ldr	r0, [pc, #104]	@ (800666c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006602:	f7fd ff2e 	bl	8004462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006606:	e026      	b.n	8006656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006610:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d209      	bcs.n	8006634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006620:	4b13      	ldr	r3, [pc, #76]	@ (8006670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b0f      	ldr	r3, [pc, #60]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fd ff3c 	bl	80044aa <vListInsert>
}
 8006632:	e010      	b.n	8006656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006634:	4b0f      	ldr	r3, [pc, #60]	@ (8006674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b0a      	ldr	r3, [pc, #40]	@ (8006664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fd ff32 	bl	80044aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006646:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	d202      	bcs.n	8006656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006650:	4a09      	ldr	r2, [pc, #36]	@ (8006678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6013      	str	r3, [r2, #0]
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20005034 	.word	0x20005034
 8006664:	20004f30 	.word	0x20004f30
 8006668:	20005038 	.word	0x20005038
 800666c:	2000501c 	.word	0x2000501c
 8006670:	20004fec 	.word	0x20004fec
 8006674:	20004fe8 	.word	0x20004fe8
 8006678:	20005050 	.word	0x20005050

0800667c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3b04      	subs	r3, #4
 800668c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b04      	subs	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3b04      	subs	r3, #4
 80066aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066ac:	4a0c      	ldr	r2, [pc, #48]	@ (80066e0 <pxPortInitialiseStack+0x64>)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b14      	subs	r3, #20
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f06f 0202 	mvn.w	r2, #2
 80066ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b20      	subs	r3, #32
 80066d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066d2:	68fb      	ldr	r3, [r7, #12]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	080066e5 	.word	0x080066e5

080066e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ee:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <prvTaskExitError+0x60>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d00d      	beq.n	8006714 <prvTaskExitError+0x30>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fc:	b672      	cpsid	i
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	b662      	cpsie	i
 800670c:	60fb      	str	r3, [r7, #12]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <prvTaskExitError+0x2c>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	b672      	cpsid	i
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	b662      	cpsie	i
 8006728:	60bb      	str	r3, [r7, #8]
}
 800672a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800672c:	bf00      	nop
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0fc      	beq.n	800672e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000020 	.word	0x20000020
	...

08006750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <pxCurrentTCBConst2>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	f380 8809 	msr	PSP, r0
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	4770      	bx	lr
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst2>:
 8006770:	20004f30 	.word	0x20004f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop

08006778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006778:	4808      	ldr	r0, [pc, #32]	@ (800679c <prvPortStartFirstTask+0x24>)
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	6800      	ldr	r0, [r0, #0]
 800677e:	f380 8808 	msr	MSP, r0
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8814 	msr	CONTROL, r0
 800678a:	b662      	cpsie	i
 800678c:	b661      	cpsie	f
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	df00      	svc	0
 8006798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800679a:	bf00      	nop
 800679c:	e000ed08 	.word	0xe000ed08

080067a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067a6:	4b37      	ldr	r3, [pc, #220]	@ (8006884 <xPortStartScheduler+0xe4>)
 80067a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22ff      	movs	r2, #255	@ 0xff
 80067b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006888 <xPortStartScheduler+0xe8>)
 80067cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ce:	4b2f      	ldr	r3, [pc, #188]	@ (800688c <xPortStartScheduler+0xec>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d4:	e009      	b.n	80067ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067d6:	4b2d      	ldr	r3, [pc, #180]	@ (800688c <xPortStartScheduler+0xec>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a2b      	ldr	r2, [pc, #172]	@ (800688c <xPortStartScheduler+0xec>)
 80067de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f2:	2b80      	cmp	r3, #128	@ 0x80
 80067f4:	d0ef      	beq.n	80067d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067f6:	4b25      	ldr	r3, [pc, #148]	@ (800688c <xPortStartScheduler+0xec>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1c3 0307 	rsb	r3, r3, #7
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00d      	beq.n	800681e <xPortStartScheduler+0x7e>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	b672      	cpsid	i
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	b662      	cpsie	i
 8006816:	60bb      	str	r3, [r7, #8]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800681e:	4b1b      	ldr	r3, [pc, #108]	@ (800688c <xPortStartScheduler+0xec>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4a19      	ldr	r2, [pc, #100]	@ (800688c <xPortStartScheduler+0xec>)
 8006826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006828:	4b18      	ldr	r3, [pc, #96]	@ (800688c <xPortStartScheduler+0xec>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006830:	4a16      	ldr	r2, [pc, #88]	@ (800688c <xPortStartScheduler+0xec>)
 8006832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800683c:	4b14      	ldr	r3, [pc, #80]	@ (8006890 <xPortStartScheduler+0xf0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a13      	ldr	r2, [pc, #76]	@ (8006890 <xPortStartScheduler+0xf0>)
 8006842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006848:	4b11      	ldr	r3, [pc, #68]	@ (8006890 <xPortStartScheduler+0xf0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a10      	ldr	r2, [pc, #64]	@ (8006890 <xPortStartScheduler+0xf0>)
 800684e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006854:	f000 f8dc 	bl	8006a10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006858:	4b0e      	ldr	r3, [pc, #56]	@ (8006894 <xPortStartScheduler+0xf4>)
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800685e:	f000 f8fb 	bl	8006a58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <xPortStartScheduler+0xf8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a0c      	ldr	r2, [pc, #48]	@ (8006898 <xPortStartScheduler+0xf8>)
 8006868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800686c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800686e:	f7ff ff83 	bl	8006778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006872:	f7ff fa71 	bl	8005d58 <vTaskSwitchContext>
	prvTaskExitError();
 8006876:	f7ff ff35 	bl	80066e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000e400 	.word	0xe000e400
 8006888:	2000505c 	.word	0x2000505c
 800688c:	20005060 	.word	0x20005060
 8006890:	e000ed20 	.word	0xe000ed20
 8006894:	20000020 	.word	0x20000020
 8006898:	e000ef34 	.word	0xe000ef34

0800689c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	b672      	cpsid	i
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	b662      	cpsie	i
 80068b6:	607b      	str	r3, [r7, #4]
}
 80068b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ba:	4b11      	ldr	r3, [pc, #68]	@ (8006900 <vPortEnterCritical+0x64>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a0f      	ldr	r2, [pc, #60]	@ (8006900 <vPortEnterCritical+0x64>)
 80068c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006900 <vPortEnterCritical+0x64>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d112      	bne.n	80068f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <vPortEnterCritical+0x68>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <vPortEnterCritical+0x56>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	603b      	str	r3, [r7, #0]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <vPortEnterCritical+0x52>
	}
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000020 	.word	0x20000020
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800690e:	4b13      	ldr	r3, [pc, #76]	@ (800695c <vPortExitCritical+0x54>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10d      	bne.n	8006932 <vPortExitCritical+0x2a>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	b672      	cpsid	i
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	b662      	cpsie	i
 800692a:	607b      	str	r3, [r7, #4]
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006932:	4b0a      	ldr	r3, [pc, #40]	@ (800695c <vPortExitCritical+0x54>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3b01      	subs	r3, #1
 8006938:	4a08      	ldr	r2, [pc, #32]	@ (800695c <vPortExitCritical+0x54>)
 800693a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800693c:	4b07      	ldr	r3, [pc, #28]	@ (800695c <vPortExitCritical+0x54>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <vPortExitCritical+0x48>
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f383 8811 	msr	BASEPRI, r3
}
 800694e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20000020 	.word	0x20000020

08006960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006960:	f3ef 8009 	mrs	r0, PSP
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4b15      	ldr	r3, [pc, #84]	@ (80069c0 <pxCurrentTCBConst>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f01e 0f10 	tst.w	lr, #16
 8006970:	bf08      	it	eq
 8006972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006984:	b672      	cpsid	i
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	b662      	cpsie	i
 8006994:	f7ff f9e0 	bl	8005d58 <vTaskSwitchContext>
 8006998:	f04f 0000 	mov.w	r0, #0
 800699c:	f380 8811 	msr	BASEPRI, r0
 80069a0:	bc09      	pop	{r0, r3}
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	f01e 0f10 	tst.w	lr, #16
 80069ae:	bf08      	it	eq
 80069b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069b4:	f380 8809 	msr	PSP, r0
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop

080069c0 <pxCurrentTCBConst>:
 80069c0:	20004f30 	.word	0x20004f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	b672      	cpsid	i
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	b662      	cpsie	i
 80069e2:	607b      	str	r3, [r7, #4]
}
 80069e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069e6:	f7ff f8fb 	bl	8005be0 <xTaskIncrementTick>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069f0:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <xPortSysTickHandler+0x44>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f383 8811 	msr	BASEPRI, r3
}
 8006a02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a14:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <vPortSetupTimerInterrupt+0x34>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <vPortSetupTimerInterrupt+0x38>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a20:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortSetupTimerInterrupt+0x3c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0a      	ldr	r2, [pc, #40]	@ (8006a50 <vPortSetupTimerInterrupt+0x40>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	099b      	lsrs	r3, r3, #6
 8006a2c:	4a09      	ldr	r2, [pc, #36]	@ (8006a54 <vPortSetupTimerInterrupt+0x44>)
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a32:	4b04      	ldr	r3, [pc, #16]	@ (8006a44 <vPortSetupTimerInterrupt+0x34>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	e000e010 	.word	0xe000e010
 8006a48:	e000e018 	.word	0xe000e018
 8006a4c:	20000000 	.word	0x20000000
 8006a50:	10624dd3 	.word	0x10624dd3
 8006a54:	e000e014 	.word	0xe000e014

08006a58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a68 <vPortEnableVFP+0x10>
 8006a5c:	6801      	ldr	r1, [r0, #0]
 8006a5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a62:	6001      	str	r1, [r0, #0]
 8006a64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a66:	bf00      	nop
 8006a68:	e000ed88 	.word	0xe000ed88

08006a6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b0f      	cmp	r3, #15
 8006a7c:	d917      	bls.n	8006aae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae8 <vPortValidateInterruptPriority+0x7c>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a88:	4b18      	ldr	r3, [pc, #96]	@ (8006aec <vPortValidateInterruptPriority+0x80>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	7afa      	ldrb	r2, [r7, #11]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d20d      	bcs.n	8006aae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	b672      	cpsid	i
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	b662      	cpsie	i
 8006aa6:	607b      	str	r3, [r7, #4]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006aae:	4b10      	ldr	r3, [pc, #64]	@ (8006af0 <vPortValidateInterruptPriority+0x84>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8006af4 <vPortValidateInterruptPriority+0x88>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d90d      	bls.n	8006ada <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	b672      	cpsid	i
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	b662      	cpsie	i
 8006ad2:	603b      	str	r3, [r7, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	e7fd      	b.n	8006ad6 <vPortValidateInterruptPriority+0x6a>
	}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e000e3f0 	.word	0xe000e3f0
 8006aec:	2000505c 	.word	0x2000505c
 8006af0:	e000ed0c 	.word	0xe000ed0c
 8006af4:	20005060 	.word	0x20005060

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b04:	f7fe ff9c 	bl	8005a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b5d      	ldr	r3, [pc, #372]	@ (8006c80 <pvPortMalloc+0x188>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f920 	bl	8006d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b5b      	ldr	r3, [pc, #364]	@ (8006c84 <pvPortMalloc+0x18c>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8094 	bne.w	8006c4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d020      	beq.n	8006b6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006b28:	2208      	movs	r2, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d017      	beq.n	8006b6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <pvPortMalloc+0x72>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	617b      	str	r3, [r7, #20]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d06c      	beq.n	8006c4a <pvPortMalloc+0x152>
 8006b70:	4b45      	ldr	r3, [pc, #276]	@ (8006c88 <pvPortMalloc+0x190>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d867      	bhi.n	8006c4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b7a:	4b44      	ldr	r3, [pc, #272]	@ (8006c8c <pvPortMalloc+0x194>)
 8006b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b7e:	4b43      	ldr	r3, [pc, #268]	@ (8006c8c <pvPortMalloc+0x194>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b84:	e004      	b.n	8006b90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d903      	bls.n	8006ba2 <pvPortMalloc+0xaa>
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f1      	bne.n	8006b86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ba2:	4b37      	ldr	r3, [pc, #220]	@ (8006c80 <pvPortMalloc+0x188>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d04e      	beq.n	8006c4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	4413      	add	r3, r2
 8006bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	1ad2      	subs	r2, r2, r3
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d922      	bls.n	8006c14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00d      	beq.n	8006bfc <pvPortMalloc+0x104>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	613b      	str	r3, [r7, #16]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c0e:	69b8      	ldr	r0, [r7, #24]
 8006c10:	f000 f902 	bl	8006e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c14:	4b1c      	ldr	r3, [pc, #112]	@ (8006c88 <pvPortMalloc+0x190>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c88 <pvPortMalloc+0x190>)
 8006c20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c22:	4b19      	ldr	r3, [pc, #100]	@ (8006c88 <pvPortMalloc+0x190>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <pvPortMalloc+0x198>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d203      	bcs.n	8006c36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c2e:	4b16      	ldr	r3, [pc, #88]	@ (8006c88 <pvPortMalloc+0x190>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a17      	ldr	r2, [pc, #92]	@ (8006c90 <pvPortMalloc+0x198>)
 8006c34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <pvPortMalloc+0x18c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c4a:	f7fe ff07 	bl	8005a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <pvPortMalloc+0x17c>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5c:	b672      	cpsid	i
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	b662      	cpsie	i
 8006c6c:	60fb      	str	r3, [r7, #12]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <pvPortMalloc+0x178>
	return pvReturn;
 8006c74:	69fb      	ldr	r3, [r7, #28]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3728      	adds	r7, #40	@ 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20008c6c 	.word	0x20008c6c
 8006c84:	20008c78 	.word	0x20008c78
 8006c88:	20008c70 	.word	0x20008c70
 8006c8c:	20008c64 	.word	0x20008c64
 8006c90:	20008c74 	.word	0x20008c74

08006c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d04e      	beq.n	8006d44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	425b      	negs	r3, r3
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	4b24      	ldr	r3, [pc, #144]	@ (8006d4c <vPortFree+0xb8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10d      	bne.n	8006cde <vPortFree+0x4a>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	b672      	cpsid	i
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	b662      	cpsie	i
 8006cd6:	60fb      	str	r3, [r7, #12]
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	e7fd      	b.n	8006cda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00d      	beq.n	8006d02 <vPortFree+0x6e>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	b672      	cpsid	i
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	b662      	cpsie	i
 8006cfa:	60bb      	str	r3, [r7, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	e7fd      	b.n	8006cfe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4b11      	ldr	r3, [pc, #68]	@ (8006d4c <vPortFree+0xb8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d019      	beq.n	8006d44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d115      	bne.n	8006d44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <vPortFree+0xb8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d28:	f7fe fe8a 	bl	8005a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <vPortFree+0xbc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	4a06      	ldr	r2, [pc, #24]	@ (8006d50 <vPortFree+0xbc>)
 8006d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d3a:	6938      	ldr	r0, [r7, #16]
 8006d3c:	f000 f86c 	bl	8006e18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d40:	f7fe fe8c 	bl	8005a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d44:	bf00      	nop
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20008c78 	.word	0x20008c78
 8006d50:	20008c70 	.word	0x20008c70

08006d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d60:	4b27      	ldr	r3, [pc, #156]	@ (8006e00 <prvHeapInit+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1f      	ldr	r2, [pc, #124]	@ (8006e00 <prvHeapInit+0xac>)
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e04 <prvHeapInit+0xb0>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	@ (8006e04 <prvHeapInit+0xb0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da0:	2208      	movs	r2, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <prvHeapInit+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <prvHeapInit+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <prvHeapInit+0xb4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <prvHeapInit+0xb4>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	@ (8006e0c <prvHeapInit+0xb8>)
 8006de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a09      	ldr	r2, [pc, #36]	@ (8006e10 <prvHeapInit+0xbc>)
 8006dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dec:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <prvHeapInit+0xc0>)
 8006dee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20005064 	.word	0x20005064
 8006e04:	20008c64 	.word	0x20008c64
 8006e08:	20008c6c 	.word	0x20008c6c
 8006e0c:	20008c74 	.word	0x20008c74
 8006e10:	20008c70 	.word	0x20008c70
 8006e14:	20008c78 	.word	0x20008c78

08006e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e20:	4b28      	ldr	r3, [pc, #160]	@ (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e002      	b.n	8006e2c <prvInsertBlockIntoFreeList+0x14>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d8f7      	bhi.n	8006e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d108      	bne.n	8006e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d118      	bne.n	8006ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b15      	ldr	r3, [pc, #84]	@ (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d00d      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e008      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e96:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e003      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20008c64 	.word	0x20008c64
 8006ec8:	20008c6c 	.word	0x20008c6c

08006ecc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006ed6:	f007 fabd 	bl	800e454 <sys_timeouts_sleeptime>
 8006eda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d10b      	bne.n	8006efc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006ee4:	4813      	ldr	r0, [pc, #76]	@ (8006f34 <tcpip_timeouts_mbox_fetch+0x68>)
 8006ee6:	f00a f832 	bl	8010f4e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006eea:	2200      	movs	r2, #0
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f009 ffa4 	bl	8010e3c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006ef4:	480f      	ldr	r0, [pc, #60]	@ (8006f34 <tcpip_timeouts_mbox_fetch+0x68>)
 8006ef6:	f00a f81b 	bl	8010f30 <sys_mutex_lock>
    return;
 8006efa:	e018      	b.n	8006f2e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8006f02:	f007 fa6d 	bl	800e3e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006f06:	e7e6      	b.n	8006ed6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8006f08:	480a      	ldr	r0, [pc, #40]	@ (8006f34 <tcpip_timeouts_mbox_fetch+0x68>)
 8006f0a:	f00a f820 	bl	8010f4e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f009 ff92 	bl	8010e3c <sys_arch_mbox_fetch>
 8006f18:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8006f1a:	4806      	ldr	r0, [pc, #24]	@ (8006f34 <tcpip_timeouts_mbox_fetch+0x68>)
 8006f1c:	f00a f808 	bl	8010f30 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d102      	bne.n	8006f2e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8006f28:	f007 fa5a 	bl	800e3e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006f2c:	e7d3      	b.n	8006ed6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20008c88 	.word	0x20008c88

08006f38 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006f40:	4810      	ldr	r0, [pc, #64]	@ (8006f84 <tcpip_thread+0x4c>)
 8006f42:	f009 fff5 	bl	8010f30 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006f46:	4b10      	ldr	r3, [pc, #64]	@ (8006f88 <tcpip_thread+0x50>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <tcpip_thread+0x50>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a0e      	ldr	r2, [pc, #56]	@ (8006f8c <tcpip_thread+0x54>)
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4610      	mov	r0, r2
 8006f58:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006f5a:	f107 030c 	add.w	r3, r7, #12
 8006f5e:	4619      	mov	r1, r3
 8006f60:	480b      	ldr	r0, [pc, #44]	@ (8006f90 <tcpip_thread+0x58>)
 8006f62:	f7ff ffb3 	bl	8006ecc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006f6c:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <tcpip_thread+0x5c>)
 8006f6e:	2291      	movs	r2, #145	@ 0x91
 8006f70:	4909      	ldr	r1, [pc, #36]	@ (8006f98 <tcpip_thread+0x60>)
 8006f72:	480a      	ldr	r0, [pc, #40]	@ (8006f9c <tcpip_thread+0x64>)
 8006f74:	f00a f93c 	bl	80111f0 <iprintf>
      continue;
 8006f78:	e003      	b.n	8006f82 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f80f 	bl	8006fa0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006f82:	e7ea      	b.n	8006f5a <tcpip_thread+0x22>
 8006f84:	20008c88 	.word	0x20008c88
 8006f88:	20008c7c 	.word	0x20008c7c
 8006f8c:	20008c80 	.word	0x20008c80
 8006f90:	20008c84 	.word	0x20008c84
 8006f94:	08012114 	.word	0x08012114
 8006f98:	08012144 	.word	0x08012144
 8006f9c:	08012164 	.word	0x08012164

08006fa0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d026      	beq.n	8006ffe <tcpip_thread_handle_msg+0x5e>
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	dc2b      	bgt.n	800700c <tcpip_thread_handle_msg+0x6c>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <tcpip_thread_handle_msg+0x1e>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d015      	beq.n	8006fe8 <tcpip_thread_handle_msg+0x48>
 8006fbc:	e026      	b.n	800700c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6850      	ldr	r0, [r2, #4]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6892      	ldr	r2, [r2, #8]
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4798      	blx	r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 fd07 	bl	80089ec <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	2009      	movs	r0, #9
 8006fe2:	f000 fe5f 	bl	8007ca4 <memp_free>
      break;
 8006fe6:	e018      	b.n	800701a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6892      	ldr	r2, [r2, #8]
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	2008      	movs	r0, #8
 8006ff8:	f000 fe54 	bl	8007ca4 <memp_free>
      break;
 8006ffc:	e00d      	b.n	800701a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6892      	ldr	r2, [r2, #8]
 8007006:	4610      	mov	r0, r2
 8007008:	4798      	blx	r3
      break;
 800700a:	e006      	b.n	800701a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800700c:	4b05      	ldr	r3, [pc, #20]	@ (8007024 <tcpip_thread_handle_msg+0x84>)
 800700e:	22cf      	movs	r2, #207	@ 0xcf
 8007010:	4905      	ldr	r1, [pc, #20]	@ (8007028 <tcpip_thread_handle_msg+0x88>)
 8007012:	4806      	ldr	r0, [pc, #24]	@ (800702c <tcpip_thread_handle_msg+0x8c>)
 8007014:	f00a f8ec 	bl	80111f0 <iprintf>
      break;
 8007018:	bf00      	nop
  }
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	08012114 	.word	0x08012114
 8007028:	08012144 	.word	0x08012144
 800702c:	08012164 	.word	0x08012164

08007030 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800703c:	481a      	ldr	r0, [pc, #104]	@ (80070a8 <tcpip_inpkt+0x78>)
 800703e:	f009 ff3c 	bl	8010eba <sys_mbox_valid>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d105      	bne.n	8007054 <tcpip_inpkt+0x24>
 8007048:	4b18      	ldr	r3, [pc, #96]	@ (80070ac <tcpip_inpkt+0x7c>)
 800704a:	22fc      	movs	r2, #252	@ 0xfc
 800704c:	4918      	ldr	r1, [pc, #96]	@ (80070b0 <tcpip_inpkt+0x80>)
 800704e:	4819      	ldr	r0, [pc, #100]	@ (80070b4 <tcpip_inpkt+0x84>)
 8007050:	f00a f8ce 	bl	80111f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007054:	2009      	movs	r0, #9
 8007056:	f000 fdaf 	bl	8007bb8 <memp_malloc>
 800705a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007062:	f04f 33ff 	mov.w	r3, #4294967295
 8007066:	e01a      	b.n	800709e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007080:	6979      	ldr	r1, [r7, #20]
 8007082:	4809      	ldr	r0, [pc, #36]	@ (80070a8 <tcpip_inpkt+0x78>)
 8007084:	f009 fec0 	bl	8010e08 <sys_mbox_trypost>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d006      	beq.n	800709c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800708e:	6979      	ldr	r1, [r7, #20]
 8007090:	2009      	movs	r0, #9
 8007092:	f000 fe07 	bl	8007ca4 <memp_free>
    return ERR_MEM;
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	e000      	b.n	800709e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800709c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20008c84 	.word	0x20008c84
 80070ac:	08012114 	.word	0x08012114
 80070b0:	0801218c 	.word	0x0801218c
 80070b4:	08012164 	.word	0x08012164

080070b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070c8:	f003 0318 	and.w	r3, r3, #24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d006      	beq.n	80070de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80070d0:	4a08      	ldr	r2, [pc, #32]	@ (80070f4 <tcpip_input+0x3c>)
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ffab 	bl	8007030 <tcpip_inpkt>
 80070da:	4603      	mov	r3, r0
 80070dc:	e005      	b.n	80070ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80070de:	4a06      	ldr	r2, [pc, #24]	@ (80070f8 <tcpip_input+0x40>)
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ffa4 	bl	8007030 <tcpip_inpkt>
 80070e8:	4603      	mov	r3, r0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	08010c19 	.word	0x08010c19
 80070f8:	0800fb21 	.word	0x0800fb21

080070fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007106:	4819      	ldr	r0, [pc, #100]	@ (800716c <tcpip_try_callback+0x70>)
 8007108:	f009 fed7 	bl	8010eba <sys_mbox_valid>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <tcpip_try_callback+0x24>
 8007112:	4b17      	ldr	r3, [pc, #92]	@ (8007170 <tcpip_try_callback+0x74>)
 8007114:	f240 125d 	movw	r2, #349	@ 0x15d
 8007118:	4916      	ldr	r1, [pc, #88]	@ (8007174 <tcpip_try_callback+0x78>)
 800711a:	4817      	ldr	r0, [pc, #92]	@ (8007178 <tcpip_try_callback+0x7c>)
 800711c:	f00a f868 	bl	80111f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007120:	2008      	movs	r0, #8
 8007122:	f000 fd49 	bl	8007bb8 <memp_malloc>
 8007126:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800712e:	f04f 33ff 	mov.w	r3, #4294967295
 8007132:	e017      	b.n	8007164 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	4808      	ldr	r0, [pc, #32]	@ (800716c <tcpip_try_callback+0x70>)
 800714a:	f009 fe5d 	bl	8010e08 <sys_mbox_trypost>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d006      	beq.n	8007162 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007154:	68f9      	ldr	r1, [r7, #12]
 8007156:	2008      	movs	r0, #8
 8007158:	f000 fda4 	bl	8007ca4 <memp_free>
    return ERR_MEM;
 800715c:	f04f 33ff 	mov.w	r3, #4294967295
 8007160:	e000      	b.n	8007164 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20008c84 	.word	0x20008c84
 8007170:	08012114 	.word	0x08012114
 8007174:	0801218c 	.word	0x0801218c
 8007178:	08012164 	.word	0x08012164

0800717c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af02      	add	r7, sp, #8
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007186:	f000 f871 	bl	800726c <lwip_init>

  tcpip_init_done = initfunc;
 800718a:	4a17      	ldr	r2, [pc, #92]	@ (80071e8 <tcpip_init+0x6c>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007190:	4a16      	ldr	r2, [pc, #88]	@ (80071ec <tcpip_init+0x70>)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007196:	2106      	movs	r1, #6
 8007198:	4815      	ldr	r0, [pc, #84]	@ (80071f0 <tcpip_init+0x74>)
 800719a:	f009 fe13 	bl	8010dc4 <sys_mbox_new>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d006      	beq.n	80071b2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80071a4:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <tcpip_init+0x78>)
 80071a6:	f240 2261 	movw	r2, #609	@ 0x261
 80071aa:	4913      	ldr	r1, [pc, #76]	@ (80071f8 <tcpip_init+0x7c>)
 80071ac:	4813      	ldr	r0, [pc, #76]	@ (80071fc <tcpip_init+0x80>)
 80071ae:	f00a f81f 	bl	80111f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80071b2:	4813      	ldr	r0, [pc, #76]	@ (8007200 <tcpip_init+0x84>)
 80071b4:	f009 fea0 	bl	8010ef8 <sys_mutex_new>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d006      	beq.n	80071cc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <tcpip_init+0x78>)
 80071c0:	f240 2265 	movw	r2, #613	@ 0x265
 80071c4:	490f      	ldr	r1, [pc, #60]	@ (8007204 <tcpip_init+0x88>)
 80071c6:	480d      	ldr	r0, [pc, #52]	@ (80071fc <tcpip_init+0x80>)
 80071c8:	f00a f812 	bl	80111f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071d4:	2200      	movs	r2, #0
 80071d6:	490c      	ldr	r1, [pc, #48]	@ (8007208 <tcpip_init+0x8c>)
 80071d8:	480c      	ldr	r0, [pc, #48]	@ (800720c <tcpip_init+0x90>)
 80071da:	f009 fec5 	bl	8010f68 <sys_thread_new>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20008c7c 	.word	0x20008c7c
 80071ec:	20008c80 	.word	0x20008c80
 80071f0:	20008c84 	.word	0x20008c84
 80071f4:	08012114 	.word	0x08012114
 80071f8:	0801219c 	.word	0x0801219c
 80071fc:	08012164 	.word	0x08012164
 8007200:	20008c88 	.word	0x20008c88
 8007204:	080121c0 	.word	0x080121c0
 8007208:	08006f39 	.word	0x08006f39
 800720c:	080121e4 	.word	0x080121e4

08007210 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	b21a      	sxth	r2, r3
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	b29b      	uxth	r3, r3
 8007226:	b21b      	sxth	r3, r3
 8007228:	4313      	orrs	r3, r2
 800722a:	b21b      	sxth	r3, r3
 800722c:	b29b      	uxth	r3, r3
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	061a      	lsls	r2, r3, #24
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	0e1b      	lsrs	r3, r3, #24
 800725e:	4313      	orrs	r3, r2
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007276:	f009 fe31 	bl	8010edc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800727a:	f000 f8d5 	bl	8007428 <mem_init>
  memp_init();
 800727e:	f000 fc2d 	bl	8007adc <memp_init>
  pbuf_init();
  netif_init();
 8007282:	f000 fd39 	bl	8007cf8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007286:	f007 f91d 	bl	800e4c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800728a:	f001 fe49 	bl	8008f20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800728e:	f007 f85f 	bl	800e350 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80072a6:	4b05      	ldr	r3, [pc, #20]	@ (80072bc <ptr_to_mem+0x20>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	4413      	add	r3, r2
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20008ca4 	.word	0x20008ca4

080072c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <mem_to_ptr+0x20>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	b29b      	uxth	r3, r3
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20008ca4 	.word	0x20008ca4

080072e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80072e4:	b590      	push	{r4, r7, lr}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80072ec:	4b45      	ldr	r3, [pc, #276]	@ (8007404 <plug_holes+0x120>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d206      	bcs.n	8007304 <plug_holes+0x20>
 80072f6:	4b44      	ldr	r3, [pc, #272]	@ (8007408 <plug_holes+0x124>)
 80072f8:	f240 12df 	movw	r2, #479	@ 0x1df
 80072fc:	4943      	ldr	r1, [pc, #268]	@ (800740c <plug_holes+0x128>)
 80072fe:	4844      	ldr	r0, [pc, #272]	@ (8007410 <plug_holes+0x12c>)
 8007300:	f009 ff76 	bl	80111f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007304:	4b43      	ldr	r3, [pc, #268]	@ (8007414 <plug_holes+0x130>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d306      	bcc.n	800731c <plug_holes+0x38>
 800730e:	4b3e      	ldr	r3, [pc, #248]	@ (8007408 <plug_holes+0x124>)
 8007310:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007314:	4940      	ldr	r1, [pc, #256]	@ (8007418 <plug_holes+0x134>)
 8007316:	483e      	ldr	r0, [pc, #248]	@ (8007410 <plug_holes+0x12c>)
 8007318:	f009 ff6a 	bl	80111f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	791b      	ldrb	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d006      	beq.n	8007332 <plug_holes+0x4e>
 8007324:	4b38      	ldr	r3, [pc, #224]	@ (8007408 <plug_holes+0x124>)
 8007326:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800732a:	493c      	ldr	r1, [pc, #240]	@ (800741c <plug_holes+0x138>)
 800732c:	4838      	ldr	r0, [pc, #224]	@ (8007410 <plug_holes+0x12c>)
 800732e:	f009 ff5f 	bl	80111f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800733a:	d906      	bls.n	800734a <plug_holes+0x66>
 800733c:	4b32      	ldr	r3, [pc, #200]	@ (8007408 <plug_holes+0x124>)
 800733e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8007342:	4937      	ldr	r1, [pc, #220]	@ (8007420 <plug_holes+0x13c>)
 8007344:	4832      	ldr	r0, [pc, #200]	@ (8007410 <plug_holes+0x12c>)
 8007346:	f009 ff53 	bl	80111f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff ffa4 	bl	800729c <ptr_to_mem>
 8007354:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	429a      	cmp	r2, r3
 800735c:	d024      	beq.n	80073a8 <plug_holes+0xc4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d120      	bne.n	80073a8 <plug_holes+0xc4>
 8007366:	4b2b      	ldr	r3, [pc, #172]	@ (8007414 <plug_holes+0x130>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	429a      	cmp	r2, r3
 800736e:	d01b      	beq.n	80073a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007370:	4b2c      	ldr	r3, [pc, #176]	@ (8007424 <plug_holes+0x140>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	429a      	cmp	r2, r3
 8007378:	d102      	bne.n	8007380 <plug_holes+0x9c>
      lfree = mem;
 800737a:	4a2a      	ldr	r2, [pc, #168]	@ (8007424 <plug_holes+0x140>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	881a      	ldrh	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007390:	d00a      	beq.n	80073a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff ff80 	bl	800729c <ptr_to_mem>
 800739c:	4604      	mov	r4, r0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ff8e 	bl	80072c0 <mem_to_ptr>
 80073a4:	4603      	mov	r3, r0
 80073a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff ff75 	bl	800729c <ptr_to_mem>
 80073b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d01f      	beq.n	80073fc <plug_holes+0x118>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11b      	bne.n	80073fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80073c4:	4b17      	ldr	r3, [pc, #92]	@ (8007424 <plug_holes+0x140>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d102      	bne.n	80073d4 <plug_holes+0xf0>
      lfree = pmem;
 80073ce:	4a15      	ldr	r2, [pc, #84]	@ (8007424 <plug_holes+0x140>)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	881a      	ldrh	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80073e4:	d00a      	beq.n	80073fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff ff56 	bl	800729c <ptr_to_mem>
 80073f0:	4604      	mov	r4, r0
 80073f2:	68b8      	ldr	r0, [r7, #8]
 80073f4:	f7ff ff64 	bl	80072c0 <mem_to_ptr>
 80073f8:	4603      	mov	r3, r0
 80073fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	bd90      	pop	{r4, r7, pc}
 8007404:	20008ca4 	.word	0x20008ca4
 8007408:	080121f4 	.word	0x080121f4
 800740c:	08012224 	.word	0x08012224
 8007410:	0801223c 	.word	0x0801223c
 8007414:	20008ca8 	.word	0x20008ca8
 8007418:	08012264 	.word	0x08012264
 800741c:	08012280 	.word	0x08012280
 8007420:	0801229c 	.word	0x0801229c
 8007424:	20008cb0 	.word	0x20008cb0

08007428 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800742e:	4b1d      	ldr	r3, [pc, #116]	@ (80074a4 <mem_init+0x7c>)
 8007430:	4a1d      	ldr	r2, [pc, #116]	@ (80074a8 <mem_init+0x80>)
 8007432:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007434:	4b1b      	ldr	r3, [pc, #108]	@ (80074a4 <mem_init+0x7c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007440:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800744e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8007452:	f7ff ff23 	bl	800729c <ptr_to_mem>
 8007456:	4603      	mov	r3, r0
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <mem_init+0x84>)
 800745a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800745c:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <mem_init+0x84>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2201      	movs	r2, #1
 8007462:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007464:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <mem_init+0x84>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800746c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800746e:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <mem_init+0x84>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007476:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007478:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <mem_init+0x7c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a0c      	ldr	r2, [pc, #48]	@ (80074b0 <mem_init+0x88>)
 800747e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007480:	480c      	ldr	r0, [pc, #48]	@ (80074b4 <mem_init+0x8c>)
 8007482:	f009 fd39 	bl	8010ef8 <sys_mutex_new>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <mem_init+0x90>)
 800748e:	f240 221f 	movw	r2, #543	@ 0x21f
 8007492:	490a      	ldr	r1, [pc, #40]	@ (80074bc <mem_init+0x94>)
 8007494:	480a      	ldr	r0, [pc, #40]	@ (80074c0 <mem_init+0x98>)
 8007496:	f009 feab 	bl	80111f0 <iprintf>
  }
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20008ca4 	.word	0x20008ca4
 80074a8:	20010000 	.word	0x20010000
 80074ac:	20008ca8 	.word	0x20008ca8
 80074b0:	20008cb0 	.word	0x20008cb0
 80074b4:	20008cac 	.word	0x20008cac
 80074b8:	080121f4 	.word	0x080121f4
 80074bc:	080122c8 	.word	0x080122c8
 80074c0:	0801223c 	.word	0x0801223c

080074c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff fef7 	bl	80072c0 <mem_to_ptr>
 80074d2:	4603      	mov	r3, r0
 80074d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fede 	bl	800729c <ptr_to_mem>
 80074e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fed8 	bl	800729c <ptr_to_mem>
 80074ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80074f6:	d818      	bhi.n	800752a <mem_link_valid+0x66>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007500:	d813      	bhi.n	800752a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007506:	8afa      	ldrh	r2, [r7, #22]
 8007508:	429a      	cmp	r2, r3
 800750a:	d004      	beq.n	8007516 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	8afa      	ldrh	r2, [r7, #22]
 8007512:	429a      	cmp	r2, r3
 8007514:	d109      	bne.n	800752a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007516:	4b08      	ldr	r3, [pc, #32]	@ (8007538 <mem_link_valid+0x74>)
 8007518:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d006      	beq.n	800752e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	8afa      	ldrh	r2, [r7, #22]
 8007526:	429a      	cmp	r2, r3
 8007528:	d001      	beq.n	800752e <mem_link_valid+0x6a>
    return 0;
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <mem_link_valid+0x6c>
  }
  return 1;
 800752e:	2301      	movs	r3, #1
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20008ca8 	.word	0x20008ca8

0800753c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d070      	beq.n	800762c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00d      	beq.n	8007570 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007554:	4b37      	ldr	r3, [pc, #220]	@ (8007634 <mem_free+0xf8>)
 8007556:	f240 2273 	movw	r2, #627	@ 0x273
 800755a:	4937      	ldr	r1, [pc, #220]	@ (8007638 <mem_free+0xfc>)
 800755c:	4837      	ldr	r0, [pc, #220]	@ (800763c <mem_free+0x100>)
 800755e:	f009 fe47 	bl	80111f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007562:	f009 fd27 	bl	8010fb4 <sys_arch_protect>
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f009 fd31 	bl	8010fd0 <sys_arch_unprotect>
    return;
 800756e:	e05e      	b.n	800762e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3b08      	subs	r3, #8
 8007574:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007576:	4b32      	ldr	r3, [pc, #200]	@ (8007640 <mem_free+0x104>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d306      	bcc.n	800758e <mem_free+0x52>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f103 020c 	add.w	r2, r3, #12
 8007586:	4b2f      	ldr	r3, [pc, #188]	@ (8007644 <mem_free+0x108>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90d      	bls.n	80075aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800758e:	4b29      	ldr	r3, [pc, #164]	@ (8007634 <mem_free+0xf8>)
 8007590:	f240 227f 	movw	r2, #639	@ 0x27f
 8007594:	492c      	ldr	r1, [pc, #176]	@ (8007648 <mem_free+0x10c>)
 8007596:	4829      	ldr	r0, [pc, #164]	@ (800763c <mem_free+0x100>)
 8007598:	f009 fe2a 	bl	80111f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800759c:	f009 fd0a 	bl	8010fb4 <sys_arch_protect>
 80075a0:	6138      	str	r0, [r7, #16]
 80075a2:	6938      	ldr	r0, [r7, #16]
 80075a4:	f009 fd14 	bl	8010fd0 <sys_arch_unprotect>
    return;
 80075a8:	e041      	b.n	800762e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80075aa:	4828      	ldr	r0, [pc, #160]	@ (800764c <mem_free+0x110>)
 80075ac:	f009 fcc0 	bl	8010f30 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d110      	bne.n	80075da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80075b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007634 <mem_free+0xf8>)
 80075ba:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80075be:	4924      	ldr	r1, [pc, #144]	@ (8007650 <mem_free+0x114>)
 80075c0:	481e      	ldr	r0, [pc, #120]	@ (800763c <mem_free+0x100>)
 80075c2:	f009 fe15 	bl	80111f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80075c6:	4821      	ldr	r0, [pc, #132]	@ (800764c <mem_free+0x110>)
 80075c8:	f009 fcc1 	bl	8010f4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80075cc:	f009 fcf2 	bl	8010fb4 <sys_arch_protect>
 80075d0:	6178      	str	r0, [r7, #20]
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f009 fcfc 	bl	8010fd0 <sys_arch_unprotect>
    return;
 80075d8:	e029      	b.n	800762e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80075da:	69f8      	ldr	r0, [r7, #28]
 80075dc:	f7ff ff72 	bl	80074c4 <mem_link_valid>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d110      	bne.n	8007608 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80075e6:	4b13      	ldr	r3, [pc, #76]	@ (8007634 <mem_free+0xf8>)
 80075e8:	f240 2295 	movw	r2, #661	@ 0x295
 80075ec:	4919      	ldr	r1, [pc, #100]	@ (8007654 <mem_free+0x118>)
 80075ee:	4813      	ldr	r0, [pc, #76]	@ (800763c <mem_free+0x100>)
 80075f0:	f009 fdfe 	bl	80111f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80075f4:	4815      	ldr	r0, [pc, #84]	@ (800764c <mem_free+0x110>)
 80075f6:	f009 fcaa 	bl	8010f4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80075fa:	f009 fcdb 	bl	8010fb4 <sys_arch_protect>
 80075fe:	61b8      	str	r0, [r7, #24]
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f009 fce5 	bl	8010fd0 <sys_arch_unprotect>
    return;
 8007606:	e012      	b.n	800762e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2200      	movs	r2, #0
 800760c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800760e:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <mem_free+0x11c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	429a      	cmp	r2, r3
 8007616:	d202      	bcs.n	800761e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007618:	4a0f      	ldr	r2, [pc, #60]	@ (8007658 <mem_free+0x11c>)
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800761e:	69f8      	ldr	r0, [r7, #28]
 8007620:	f7ff fe60 	bl	80072e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007624:	4809      	ldr	r0, [pc, #36]	@ (800764c <mem_free+0x110>)
 8007626:	f009 fc92 	bl	8010f4e <sys_mutex_unlock>
 800762a:	e000      	b.n	800762e <mem_free+0xf2>
    return;
 800762c:	bf00      	nop
}
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	080121f4 	.word	0x080121f4
 8007638:	080122e4 	.word	0x080122e4
 800763c:	0801223c 	.word	0x0801223c
 8007640:	20008ca4 	.word	0x20008ca4
 8007644:	20008ca8 	.word	0x20008ca8
 8007648:	08012308 	.word	0x08012308
 800764c:	20008cac 	.word	0x20008cac
 8007650:	08012324 	.word	0x08012324
 8007654:	0801234c 	.word	0x0801234c
 8007658:	20008cb0 	.word	0x20008cb0

0800765c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007668:	887b      	ldrh	r3, [r7, #2]
 800766a:	3303      	adds	r3, #3
 800766c:	b29b      	uxth	r3, r3
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007674:	8bfb      	ldrh	r3, [r7, #30]
 8007676:	2b0b      	cmp	r3, #11
 8007678:	d801      	bhi.n	800767e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800767a:	230c      	movs	r3, #12
 800767c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800767e:	8bfb      	ldrh	r3, [r7, #30]
 8007680:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007684:	d803      	bhi.n	800768e <mem_trim+0x32>
 8007686:	8bfa      	ldrh	r2, [r7, #30]
 8007688:	887b      	ldrh	r3, [r7, #2]
 800768a:	429a      	cmp	r2, r3
 800768c:	d201      	bcs.n	8007692 <mem_trim+0x36>
    return NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	e0d8      	b.n	8007844 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007692:	4b6e      	ldr	r3, [pc, #440]	@ (800784c <mem_trim+0x1f0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d304      	bcc.n	80076a6 <mem_trim+0x4a>
 800769c:	4b6c      	ldr	r3, [pc, #432]	@ (8007850 <mem_trim+0x1f4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d306      	bcc.n	80076b4 <mem_trim+0x58>
 80076a6:	4b6b      	ldr	r3, [pc, #428]	@ (8007854 <mem_trim+0x1f8>)
 80076a8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80076ac:	496a      	ldr	r1, [pc, #424]	@ (8007858 <mem_trim+0x1fc>)
 80076ae:	486b      	ldr	r0, [pc, #428]	@ (800785c <mem_trim+0x200>)
 80076b0:	f009 fd9e 	bl	80111f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80076b4:	4b65      	ldr	r3, [pc, #404]	@ (800784c <mem_trim+0x1f0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d304      	bcc.n	80076c8 <mem_trim+0x6c>
 80076be:	4b64      	ldr	r3, [pc, #400]	@ (8007850 <mem_trim+0x1f4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d307      	bcc.n	80076d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80076c8:	f009 fc74 	bl	8010fb4 <sys_arch_protect>
 80076cc:	60b8      	str	r0, [r7, #8]
 80076ce:	68b8      	ldr	r0, [r7, #8]
 80076d0:	f009 fc7e 	bl	8010fd0 <sys_arch_unprotect>
    return rmem;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	e0b5      	b.n	8007844 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3b08      	subs	r3, #8
 80076dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80076de:	69b8      	ldr	r0, [r7, #24]
 80076e0:	f7ff fdee 	bl	80072c0 <mem_to_ptr>
 80076e4:	4603      	mov	r3, r0
 80076e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	881a      	ldrh	r2, [r3, #0]
 80076ec:	8afb      	ldrh	r3, [r7, #22]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b08      	subs	r3, #8
 80076f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80076f6:	8bfa      	ldrh	r2, [r7, #30]
 80076f8:	8abb      	ldrh	r3, [r7, #20]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d906      	bls.n	800770c <mem_trim+0xb0>
 80076fe:	4b55      	ldr	r3, [pc, #340]	@ (8007854 <mem_trim+0x1f8>)
 8007700:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007704:	4956      	ldr	r1, [pc, #344]	@ (8007860 <mem_trim+0x204>)
 8007706:	4855      	ldr	r0, [pc, #340]	@ (800785c <mem_trim+0x200>)
 8007708:	f009 fd72 	bl	80111f0 <iprintf>
  if (newsize > size) {
 800770c:	8bfa      	ldrh	r2, [r7, #30]
 800770e:	8abb      	ldrh	r3, [r7, #20]
 8007710:	429a      	cmp	r2, r3
 8007712:	d901      	bls.n	8007718 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007714:	2300      	movs	r3, #0
 8007716:	e095      	b.n	8007844 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007718:	8bfa      	ldrh	r2, [r7, #30]
 800771a:	8abb      	ldrh	r3, [r7, #20]
 800771c:	429a      	cmp	r2, r3
 800771e:	d101      	bne.n	8007724 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	e08f      	b.n	8007844 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007724:	484f      	ldr	r0, [pc, #316]	@ (8007864 <mem_trim+0x208>)
 8007726:	f009 fc03 	bl	8010f30 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fdb4 	bl	800729c <ptr_to_mem>
 8007734:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	791b      	ldrb	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d13f      	bne.n	80077be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007746:	d106      	bne.n	8007756 <mem_trim+0xfa>
 8007748:	4b42      	ldr	r3, [pc, #264]	@ (8007854 <mem_trim+0x1f8>)
 800774a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800774e:	4946      	ldr	r1, [pc, #280]	@ (8007868 <mem_trim+0x20c>)
 8007750:	4842      	ldr	r0, [pc, #264]	@ (800785c <mem_trim+0x200>)
 8007752:	f009 fd4d 	bl	80111f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800775c:	8afa      	ldrh	r2, [r7, #22]
 800775e:	8bfb      	ldrh	r3, [r7, #30]
 8007760:	4413      	add	r3, r2
 8007762:	b29b      	uxth	r3, r3
 8007764:	3308      	adds	r3, #8
 8007766:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007768:	4b40      	ldr	r3, [pc, #256]	@ (800786c <mem_trim+0x210>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d106      	bne.n	8007780 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fd91 	bl	800729c <ptr_to_mem>
 800777a:	4603      	mov	r3, r0
 800777c:	4a3b      	ldr	r2, [pc, #236]	@ (800786c <mem_trim+0x210>)
 800777e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fd8a 	bl	800729c <ptr_to_mem>
 8007788:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2200      	movs	r2, #0
 800778e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	89ba      	ldrh	r2, [r7, #12]
 8007794:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	8afa      	ldrh	r2, [r7, #22]
 800779a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	89fa      	ldrh	r2, [r7, #14]
 80077a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80077aa:	d047      	beq.n	800783c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fd73 	bl	800729c <ptr_to_mem>
 80077b6:	4602      	mov	r2, r0
 80077b8:	89fb      	ldrh	r3, [r7, #14]
 80077ba:	8053      	strh	r3, [r2, #2]
 80077bc:	e03e      	b.n	800783c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80077be:	8bfb      	ldrh	r3, [r7, #30]
 80077c0:	f103 0214 	add.w	r2, r3, #20
 80077c4:	8abb      	ldrh	r3, [r7, #20]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d838      	bhi.n	800783c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80077ca:	8afa      	ldrh	r2, [r7, #22]
 80077cc:	8bfb      	ldrh	r3, [r7, #30]
 80077ce:	4413      	add	r3, r2
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3308      	adds	r3, #8
 80077d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80077de:	d106      	bne.n	80077ee <mem_trim+0x192>
 80077e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <mem_trim+0x1f8>)
 80077e2:	f240 3216 	movw	r2, #790	@ 0x316
 80077e6:	4920      	ldr	r1, [pc, #128]	@ (8007868 <mem_trim+0x20c>)
 80077e8:	481c      	ldr	r0, [pc, #112]	@ (800785c <mem_trim+0x200>)
 80077ea:	f009 fd01 	bl	80111f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80077ee:	89fb      	ldrh	r3, [r7, #14]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fd53 	bl	800729c <ptr_to_mem>
 80077f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80077f8:	4b1c      	ldr	r3, [pc, #112]	@ (800786c <mem_trim+0x210>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d202      	bcs.n	8007808 <mem_trim+0x1ac>
      lfree = mem2;
 8007802:	4a1a      	ldr	r2, [pc, #104]	@ (800786c <mem_trim+0x210>)
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2200      	movs	r2, #0
 800780c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	8afa      	ldrh	r2, [r7, #22]
 800781a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	89fa      	ldrh	r2, [r7, #14]
 8007820:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800782a:	d007      	beq.n	800783c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fd33 	bl	800729c <ptr_to_mem>
 8007836:	4602      	mov	r2, r0
 8007838:	89fb      	ldrh	r3, [r7, #14]
 800783a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800783c:	4809      	ldr	r0, [pc, #36]	@ (8007864 <mem_trim+0x208>)
 800783e:	f009 fb86 	bl	8010f4e <sys_mutex_unlock>
  return rmem;
 8007842:	687b      	ldr	r3, [r7, #4]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20008ca4 	.word	0x20008ca4
 8007850:	20008ca8 	.word	0x20008ca8
 8007854:	080121f4 	.word	0x080121f4
 8007858:	08012380 	.word	0x08012380
 800785c:	0801223c 	.word	0x0801223c
 8007860:	08012398 	.word	0x08012398
 8007864:	20008cac 	.word	0x20008cac
 8007868:	080123b8 	.word	0x080123b8
 800786c:	20008cb0 	.word	0x20008cb0

08007870 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <mem_malloc+0x14>
    return NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	e0e2      	b.n	8007a4a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	3303      	adds	r3, #3
 8007888:	b29b      	uxth	r3, r3
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007890:	8bbb      	ldrh	r3, [r7, #28]
 8007892:	2b0b      	cmp	r3, #11
 8007894:	d801      	bhi.n	800789a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007896:	230c      	movs	r3, #12
 8007898:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800789a:	8bbb      	ldrh	r3, [r7, #28]
 800789c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80078a0:	d803      	bhi.n	80078aa <mem_malloc+0x3a>
 80078a2:	8bba      	ldrh	r2, [r7, #28]
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d201      	bcs.n	80078ae <mem_malloc+0x3e>
    return NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e0cd      	b.n	8007a4a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80078ae:	4869      	ldr	r0, [pc, #420]	@ (8007a54 <mem_malloc+0x1e4>)
 80078b0:	f009 fb3e 	bl	8010f30 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80078b4:	4b68      	ldr	r3, [pc, #416]	@ (8007a58 <mem_malloc+0x1e8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fd01 	bl	80072c0 <mem_to_ptr>
 80078be:	4603      	mov	r3, r0
 80078c0:	83fb      	strh	r3, [r7, #30]
 80078c2:	e0b7      	b.n	8007a34 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80078c4:	8bfb      	ldrh	r3, [r7, #30]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fce8 	bl	800729c <ptr_to_mem>
 80078cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 80a7 	bne.w	8007a26 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	8bfb      	ldrh	r3, [r7, #30]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	f1a3 0208 	sub.w	r2, r3, #8
 80078e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80078e8:	429a      	cmp	r2, r3
 80078ea:	f0c0 809c 	bcc.w	8007a26 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	8bfb      	ldrh	r3, [r7, #30]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	f1a3 0208 	sub.w	r2, r3, #8
 80078fc:	8bbb      	ldrh	r3, [r7, #28]
 80078fe:	3314      	adds	r3, #20
 8007900:	429a      	cmp	r2, r3
 8007902:	d333      	bcc.n	800796c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007904:	8bfa      	ldrh	r2, [r7, #30]
 8007906:	8bbb      	ldrh	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	b29b      	uxth	r3, r3
 800790c:	3308      	adds	r3, #8
 800790e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007910:	8a7b      	ldrh	r3, [r7, #18]
 8007912:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007916:	d106      	bne.n	8007926 <mem_malloc+0xb6>
 8007918:	4b50      	ldr	r3, [pc, #320]	@ (8007a5c <mem_malloc+0x1ec>)
 800791a:	f240 3287 	movw	r2, #903	@ 0x387
 800791e:	4950      	ldr	r1, [pc, #320]	@ (8007a60 <mem_malloc+0x1f0>)
 8007920:	4850      	ldr	r0, [pc, #320]	@ (8007a64 <mem_malloc+0x1f4>)
 8007922:	f009 fc65 	bl	80111f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007926:	8a7b      	ldrh	r3, [r7, #18]
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff fcb7 	bl	800729c <ptr_to_mem>
 800792e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8bfa      	ldrh	r2, [r7, #30]
 8007942:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	8a7a      	ldrh	r2, [r7, #18]
 8007948:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2201      	movs	r2, #1
 800794e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8007958:	d00b      	beq.n	8007972 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fc9c 	bl	800729c <ptr_to_mem>
 8007964:	4602      	mov	r2, r0
 8007966:	8a7b      	ldrh	r3, [r7, #18]
 8007968:	8053      	strh	r3, [r2, #2]
 800796a:	e002      	b.n	8007972 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2201      	movs	r2, #1
 8007970:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007972:	4b39      	ldr	r3, [pc, #228]	@ (8007a58 <mem_malloc+0x1e8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	429a      	cmp	r2, r3
 800797a:	d127      	bne.n	80079cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800797c:	4b36      	ldr	r3, [pc, #216]	@ (8007a58 <mem_malloc+0x1e8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007982:	e005      	b.n	8007990 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	4618      	mov	r0, r3
 800798a:	f7ff fc87 	bl	800729c <ptr_to_mem>
 800798e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <mem_malloc+0x132>
 8007998:	4b33      	ldr	r3, [pc, #204]	@ (8007a68 <mem_malloc+0x1f8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d1f0      	bne.n	8007984 <mem_malloc+0x114>
          }
          lfree = cur;
 80079a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a58 <mem_malloc+0x1e8>)
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80079a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a58 <mem_malloc+0x1e8>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007a68 <mem_malloc+0x1f8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d00b      	beq.n	80079cc <mem_malloc+0x15c>
 80079b4:	4b28      	ldr	r3, [pc, #160]	@ (8007a58 <mem_malloc+0x1e8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	791b      	ldrb	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d006      	beq.n	80079cc <mem_malloc+0x15c>
 80079be:	4b27      	ldr	r3, [pc, #156]	@ (8007a5c <mem_malloc+0x1ec>)
 80079c0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80079c4:	4929      	ldr	r1, [pc, #164]	@ (8007a6c <mem_malloc+0x1fc>)
 80079c6:	4827      	ldr	r0, [pc, #156]	@ (8007a64 <mem_malloc+0x1f4>)
 80079c8:	f009 fc12 	bl	80111f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80079cc:	4821      	ldr	r0, [pc, #132]	@ (8007a54 <mem_malloc+0x1e4>)
 80079ce:	f009 fabe 	bl	8010f4e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80079d2:	8bba      	ldrh	r2, [r7, #28]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	4413      	add	r3, r2
 80079d8:	3308      	adds	r3, #8
 80079da:	4a23      	ldr	r2, [pc, #140]	@ (8007a68 <mem_malloc+0x1f8>)
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	4293      	cmp	r3, r2
 80079e0:	d906      	bls.n	80079f0 <mem_malloc+0x180>
 80079e2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a5c <mem_malloc+0x1ec>)
 80079e4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80079e8:	4921      	ldr	r1, [pc, #132]	@ (8007a70 <mem_malloc+0x200>)
 80079ea:	481e      	ldr	r0, [pc, #120]	@ (8007a64 <mem_malloc+0x1f4>)
 80079ec:	f009 fc00 	bl	80111f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d006      	beq.n	8007a08 <mem_malloc+0x198>
 80079fa:	4b18      	ldr	r3, [pc, #96]	@ (8007a5c <mem_malloc+0x1ec>)
 80079fc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007a00:	491c      	ldr	r1, [pc, #112]	@ (8007a74 <mem_malloc+0x204>)
 8007a02:	4818      	ldr	r0, [pc, #96]	@ (8007a64 <mem_malloc+0x1f4>)
 8007a04:	f009 fbf4 	bl	80111f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d006      	beq.n	8007a20 <mem_malloc+0x1b0>
 8007a12:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <mem_malloc+0x1ec>)
 8007a14:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007a18:	4917      	ldr	r1, [pc, #92]	@ (8007a78 <mem_malloc+0x208>)
 8007a1a:	4812      	ldr	r0, [pc, #72]	@ (8007a64 <mem_malloc+0x1f4>)
 8007a1c:	f009 fbe8 	bl	80111f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	3308      	adds	r3, #8
 8007a24:	e011      	b.n	8007a4a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8007a26:	8bfb      	ldrh	r3, [r7, #30]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fc37 	bl	800729c <ptr_to_mem>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007a34:	8bfa      	ldrh	r2, [r7, #30]
 8007a36:	8bbb      	ldrh	r3, [r7, #28]
 8007a38:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	f4ff af41 	bcc.w	80078c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007a42:	4804      	ldr	r0, [pc, #16]	@ (8007a54 <mem_malloc+0x1e4>)
 8007a44:	f009 fa83 	bl	8010f4e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20008cac 	.word	0x20008cac
 8007a58:	20008cb0 	.word	0x20008cb0
 8007a5c:	080121f4 	.word	0x080121f4
 8007a60:	080123b8 	.word	0x080123b8
 8007a64:	0801223c 	.word	0x0801223c
 8007a68:	20008ca8 	.word	0x20008ca8
 8007a6c:	080123cc 	.word	0x080123cc
 8007a70:	080123e8 	.word	0x080123e8
 8007a74:	08012418 	.word	0x08012418
 8007a78:	08012448 	.word	0x08012448

08007a7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	3303      	adds	r3, #3
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	e011      	b.n	8007ac2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4413      	add	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	885b      	ldrh	r3, [r3, #2]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	dbe7      	blt.n	8007a9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	80fb      	strh	r3, [r7, #6]
 8007ae6:	e009      	b.n	8007afc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	4a08      	ldr	r2, [pc, #32]	@ (8007b0c <memp_init+0x30>)
 8007aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff ffc3 	bl	8007a7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	3301      	adds	r3, #1
 8007afa:	80fb      	strh	r3, [r7, #6]
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	2b0c      	cmp	r3, #12
 8007b00:	d9f2      	bls.n	8007ae8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	08014c54 	.word	0x08014c54

08007b10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007b18:	f009 fa4c 	bl	8010fb4 <sys_arch_protect>
 8007b1c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d015      	beq.n	8007b58 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d006      	beq.n	8007b4e <do_memp_malloc_pool+0x3e>
 8007b40:	4b09      	ldr	r3, [pc, #36]	@ (8007b68 <do_memp_malloc_pool+0x58>)
 8007b42:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007b46:	4909      	ldr	r1, [pc, #36]	@ (8007b6c <do_memp_malloc_pool+0x5c>)
 8007b48:	4809      	ldr	r0, [pc, #36]	@ (8007b70 <do_memp_malloc_pool+0x60>)
 8007b4a:	f009 fb51 	bl	80111f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f009 fa3e 	bl	8010fd0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	e003      	b.n	8007b60 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f009 fa39 	bl	8010fd0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	0801246c 	.word	0x0801246c
 8007b6c:	0801249c 	.word	0x0801249c
 8007b70:	080124c0 	.word	0x080124c0

08007b74 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <memp_malloc_pool+0x1c>
 8007b82:	4b0a      	ldr	r3, [pc, #40]	@ (8007bac <memp_malloc_pool+0x38>)
 8007b84:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007b88:	4909      	ldr	r1, [pc, #36]	@ (8007bb0 <memp_malloc_pool+0x3c>)
 8007b8a:	480a      	ldr	r0, [pc, #40]	@ (8007bb4 <memp_malloc_pool+0x40>)
 8007b8c:	f009 fb30 	bl	80111f0 <iprintf>
  if (desc == NULL) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <memp_malloc_pool+0x26>
    return NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e003      	b.n	8007ba2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff ffb8 	bl	8007b10 <do_memp_malloc_pool>
 8007ba0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	0801246c 	.word	0x0801246c
 8007bb0:	080124e8 	.word	0x080124e8
 8007bb4:	080124c0 	.word	0x080124c0

08007bb8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	2b0c      	cmp	r3, #12
 8007bc6:	d908      	bls.n	8007bda <memp_malloc+0x22>
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <memp_malloc+0x3c>)
 8007bca:	f240 1257 	movw	r2, #343	@ 0x157
 8007bce:	490a      	ldr	r1, [pc, #40]	@ (8007bf8 <memp_malloc+0x40>)
 8007bd0:	480a      	ldr	r0, [pc, #40]	@ (8007bfc <memp_malloc+0x44>)
 8007bd2:	f009 fb0d 	bl	80111f0 <iprintf>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e008      	b.n	8007bec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	4a08      	ldr	r2, [pc, #32]	@ (8007c00 <memp_malloc+0x48>)
 8007bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff ff94 	bl	8007b10 <do_memp_malloc_pool>
 8007be8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	0801246c 	.word	0x0801246c
 8007bf8:	080124fc 	.word	0x080124fc
 8007bfc:	080124c0 	.word	0x080124c0
 8007c00:	08014c54 	.word	0x08014c54

08007c04 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d006      	beq.n	8007c26 <do_memp_free_pool+0x22>
 8007c18:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <do_memp_free_pool+0x4c>)
 8007c1a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007c1e:	490d      	ldr	r1, [pc, #52]	@ (8007c54 <do_memp_free_pool+0x50>)
 8007c20:	480d      	ldr	r0, [pc, #52]	@ (8007c58 <do_memp_free_pool+0x54>)
 8007c22:	f009 fae5 	bl	80111f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007c2a:	f009 f9c3 	bl	8010fb4 <sys_arch_protect>
 8007c2e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007c42:	68b8      	ldr	r0, [r7, #8]
 8007c44:	f009 f9c4 	bl	8010fd0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	0801246c 	.word	0x0801246c
 8007c54:	0801251c 	.word	0x0801251c
 8007c58:	080124c0 	.word	0x080124c0

08007c5c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <memp_free_pool+0x1e>
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <memp_free_pool+0x3c>)
 8007c6e:	f240 1295 	movw	r2, #405	@ 0x195
 8007c72:	490a      	ldr	r1, [pc, #40]	@ (8007c9c <memp_free_pool+0x40>)
 8007c74:	480a      	ldr	r0, [pc, #40]	@ (8007ca0 <memp_free_pool+0x44>)
 8007c76:	f009 fabb 	bl	80111f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <memp_free_pool+0x34>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d004      	beq.n	8007c90 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff ffbb 	bl	8007c04 <do_memp_free_pool>
 8007c8e:	e000      	b.n	8007c92 <memp_free_pool+0x36>
    return;
 8007c90:	bf00      	nop
}
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	0801246c 	.word	0x0801246c
 8007c9c:	080124e8 	.word	0x080124e8
 8007ca0:	080124c0 	.word	0x080124c0

08007ca4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	2b0c      	cmp	r3, #12
 8007cb4:	d907      	bls.n	8007cc6 <memp_free+0x22>
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <memp_free+0x44>)
 8007cb8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007cbc:	490b      	ldr	r1, [pc, #44]	@ (8007cec <memp_free+0x48>)
 8007cbe:	480c      	ldr	r0, [pc, #48]	@ (8007cf0 <memp_free+0x4c>)
 8007cc0:	f009 fa96 	bl	80111f0 <iprintf>
 8007cc4:	e00c      	b.n	8007ce0 <memp_free+0x3c>

  if (mem == NULL) {
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	4a09      	ldr	r2, [pc, #36]	@ (8007cf4 <memp_free+0x50>)
 8007cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff ff94 	bl	8007c04 <do_memp_free_pool>
 8007cdc:	e000      	b.n	8007ce0 <memp_free+0x3c>
    return;
 8007cde:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0801246c 	.word	0x0801246c
 8007cec:	0801253c 	.word	0x0801253c
 8007cf0:	080124c0 	.word	0x080124c0
 8007cf4:	08014c54 	.word	0x08014c54

08007cf8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007cfc:	bf00      	nop
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d108      	bne.n	8007d2e <netif_add+0x26>
 8007d1c:	4b57      	ldr	r3, [pc, #348]	@ (8007e7c <netif_add+0x174>)
 8007d1e:	f240 1227 	movw	r2, #295	@ 0x127
 8007d22:	4957      	ldr	r1, [pc, #348]	@ (8007e80 <netif_add+0x178>)
 8007d24:	4857      	ldr	r0, [pc, #348]	@ (8007e84 <netif_add+0x17c>)
 8007d26:	f009 fa63 	bl	80111f0 <iprintf>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e0a2      	b.n	8007e74 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d108      	bne.n	8007d46 <netif_add+0x3e>
 8007d34:	4b51      	ldr	r3, [pc, #324]	@ (8007e7c <netif_add+0x174>)
 8007d36:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007d3a:	4953      	ldr	r1, [pc, #332]	@ (8007e88 <netif_add+0x180>)
 8007d3c:	4851      	ldr	r0, [pc, #324]	@ (8007e84 <netif_add+0x17c>)
 8007d3e:	f009 fa57 	bl	80111f0 <iprintf>
 8007d42:	2300      	movs	r3, #0
 8007d44:	e096      	b.n	8007e74 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007e8c <netif_add+0x184>)
 8007d4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007d56:	4b4d      	ldr	r3, [pc, #308]	@ (8007e8c <netif_add+0x184>)
 8007d58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007d60:	4b4a      	ldr	r3, [pc, #296]	@ (8007e8c <netif_add+0x184>)
 8007d62:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a45      	ldr	r2, [pc, #276]	@ (8007e90 <netif_add+0x188>)
 8007d7a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a3a      	ldr	r2, [r7, #32]
 8007d94:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007d96:	4b3f      	ldr	r3, [pc, #252]	@ (8007e94 <netif_add+0x18c>)
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007da4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f913 	bl	8007fd8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <netif_add+0xba>
    return NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e058      	b.n	8007e74 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007dc8:	2bff      	cmp	r3, #255	@ 0xff
 8007dca:	d103      	bne.n	8007dd4 <netif_add+0xcc>
        netif->num = 0;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8007e98 <netif_add+0x190>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	e02b      	b.n	8007e38 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d106      	bne.n	8007df6 <netif_add+0xee>
 8007de8:	4b24      	ldr	r3, [pc, #144]	@ (8007e7c <netif_add+0x174>)
 8007dea:	f240 128b 	movw	r2, #395	@ 0x18b
 8007dee:	492b      	ldr	r1, [pc, #172]	@ (8007e9c <netif_add+0x194>)
 8007df0:	4824      	ldr	r0, [pc, #144]	@ (8007e84 <netif_add+0x17c>)
 8007df2:	f009 f9fd 	bl	80111f0 <iprintf>
        num_netifs++;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2bff      	cmp	r3, #255	@ 0xff
 8007e00:	dd06      	ble.n	8007e10 <netif_add+0x108>
 8007e02:	4b1e      	ldr	r3, [pc, #120]	@ (8007e7c <netif_add+0x174>)
 8007e04:	f240 128d 	movw	r2, #397	@ 0x18d
 8007e08:	4925      	ldr	r1, [pc, #148]	@ (8007ea0 <netif_add+0x198>)
 8007e0a:	481e      	ldr	r0, [pc, #120]	@ (8007e84 <netif_add+0x17c>)
 8007e0c:	f009 f9f0 	bl	80111f0 <iprintf>
        if (netif2->num == netif->num) {
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d108      	bne.n	8007e32 <netif_add+0x12a>
          netif->num++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e26:	3301      	adds	r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007e30:	e005      	b.n	8007e3e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1d0      	bne.n	8007de0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1be      	bne.n	8007dc2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8007e4c:	d103      	bne.n	8007e56 <netif_add+0x14e>
    netif_num = 0;
 8007e4e:	4b11      	ldr	r3, [pc, #68]	@ (8007e94 <netif_add+0x18c>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e006      	b.n	8007e64 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b0c      	ldr	r3, [pc, #48]	@ (8007e94 <netif_add+0x18c>)
 8007e62:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <netif_add+0x190>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e98 <netif_add+0x190>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007e72:	68fb      	ldr	r3, [r7, #12]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	08012558 	.word	0x08012558
 8007e80:	080125ec 	.word	0x080125ec
 8007e84:	080125a8 	.word	0x080125a8
 8007e88:	08012608 	.word	0x08012608
 8007e8c:	08014cc8 	.word	0x08014cc8
 8007e90:	080082b3 	.word	0x080082b3
 8007e94:	2000bd88 	.word	0x2000bd88
 8007e98:	2000bd80 	.word	0x2000bd80
 8007e9c:	0801262c 	.word	0x0801262c
 8007ea0:	08012640 	.word	0x08012640

08007ea4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f002 fb7f 	bl	800a5b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f006 fc8d 	bl	800e7d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <netif_do_set_ipaddr+0x20>
 8007eda:	4b1d      	ldr	r3, [pc, #116]	@ (8007f50 <netif_do_set_ipaddr+0x88>)
 8007edc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007ee0:	491c      	ldr	r1, [pc, #112]	@ (8007f54 <netif_do_set_ipaddr+0x8c>)
 8007ee2:	481d      	ldr	r0, [pc, #116]	@ (8007f58 <netif_do_set_ipaddr+0x90>)
 8007ee4:	f009 f984 	bl	80111f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <netif_do_set_ipaddr+0x34>
 8007eee:	4b18      	ldr	r3, [pc, #96]	@ (8007f50 <netif_do_set_ipaddr+0x88>)
 8007ef0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007ef4:	4917      	ldr	r1, [pc, #92]	@ (8007f54 <netif_do_set_ipaddr+0x8c>)
 8007ef6:	4818      	ldr	r0, [pc, #96]	@ (8007f58 <netif_do_set_ipaddr+0x90>)
 8007ef8:	f009 f97a 	bl	80111f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3304      	adds	r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d01c      	beq.n	8007f44 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3304      	adds	r3, #4
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007f1a:	f107 0314 	add.w	r3, r7, #20
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ffbf 	bl	8007ea4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <netif_do_set_ipaddr+0x6a>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	e000      	b.n	8007f34 <netif_do_set_ipaddr+0x6c>
 8007f32:	2300      	movs	r3, #0
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007f38:	2101      	movs	r1, #1
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f8d2 	bl	80080e4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007f40:	2301      	movs	r3, #1
 8007f42:	e000      	b.n	8007f46 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	08012558 	.word	0x08012558
 8007f54:	08012670 	.word	0x08012670
 8007f58:	080125a8 	.word	0x080125a8

08007f5c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d00a      	beq.n	8007f8c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <netif_do_set_netmask+0x26>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	e000      	b.n	8007f84 <netif_do_set_netmask+0x28>
 8007f82:	2300      	movs	r3, #0
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	330c      	adds	r3, #12
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d00a      	beq.n	8007fca <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <netif_do_set_gw+0x26>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	e000      	b.n	8007fc2 <netif_do_set_gw+0x28>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8008068 <netif_set_addr+0x90>)
 8007ff6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8008068 <netif_set_addr+0x90>)
 8008000:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008008:	4b17      	ldr	r3, [pc, #92]	@ (8008068 <netif_set_addr+0x90>)
 800800a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <netif_set_addr+0x42>
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <netif_set_addr+0x46>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <netif_set_addr+0x48>
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d006      	beq.n	8008036 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008028:	f107 0310 	add.w	r3, r7, #16
 800802c:	461a      	mov	r2, r3
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff ff49 	bl	8007ec8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f7ff ff8e 	bl	8007f5c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ffa8 	bl	8007f9a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008050:	f107 0310 	add.w	r3, r7, #16
 8008054:	461a      	mov	r2, r3
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7ff ff35 	bl	8007ec8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800805e:	bf00      	nop
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	08014cc8 	.word	0x08014cc8

0800806c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008074:	4a04      	ldr	r2, [pc, #16]	@ (8008088 <netif_set_default+0x1c>)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	2000bd84 	.word	0x2000bd84

0800808c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d107      	bne.n	80080aa <netif_set_up+0x1e>
 800809a:	4b0f      	ldr	r3, [pc, #60]	@ (80080d8 <netif_set_up+0x4c>)
 800809c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80080a0:	490e      	ldr	r1, [pc, #56]	@ (80080dc <netif_set_up+0x50>)
 80080a2:	480f      	ldr	r0, [pc, #60]	@ (80080e0 <netif_set_up+0x54>)
 80080a4:	f009 f8a4 	bl	80111f0 <iprintf>
 80080a8:	e013      	b.n	80080d2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10c      	bne.n	80080d2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80080ca:	2103      	movs	r1, #3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f809 	bl	80080e4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	08012558 	.word	0x08012558
 80080dc:	080126e0 	.word	0x080126e0
 80080e0:	080125a8 	.word	0x080125a8

080080e4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <netif_issue_reports+0x20>
 80080f6:	4b18      	ldr	r3, [pc, #96]	@ (8008158 <netif_issue_reports+0x74>)
 80080f8:	f240 326d 	movw	r2, #877	@ 0x36d
 80080fc:	4917      	ldr	r1, [pc, #92]	@ (800815c <netif_issue_reports+0x78>)
 80080fe:	4818      	ldr	r0, [pc, #96]	@ (8008160 <netif_issue_reports+0x7c>)
 8008100:	f009 f876 	bl	80111f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01e      	beq.n	8008150 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008118:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800811c:	2b00      	cmp	r3, #0
 800811e:	d017      	beq.n	8008150 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d013      	beq.n	8008152 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3304      	adds	r3, #4
 800812e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3304      	adds	r3, #4
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f007 faaf 	bl	800f6ac <etharp_request>
 800814e:	e000      	b.n	8008152 <netif_issue_reports+0x6e>
    return;
 8008150:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	08012558 	.word	0x08012558
 800815c:	080126fc 	.word	0x080126fc
 8008160:	080125a8 	.word	0x080125a8

08008164 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <netif_set_down+0x1e>
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <netif_set_down+0x58>)
 8008174:	f240 329b 	movw	r2, #923	@ 0x39b
 8008178:	4911      	ldr	r1, [pc, #68]	@ (80081c0 <netif_set_down+0x5c>)
 800817a:	4812      	ldr	r0, [pc, #72]	@ (80081c4 <netif_set_down+0x60>)
 800817c:	f009 f838 	bl	80111f0 <iprintf>
 8008180:	e019      	b.n	80081b6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d012      	beq.n	80081b6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f006 fe39 	bl	800ee28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	08012558 	.word	0x08012558
 80081c0:	08012720 	.word	0x08012720
 80081c4:	080125a8 	.word	0x080125a8

080081c8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d107      	bne.n	80081e6 <netif_set_link_up+0x1e>
 80081d6:	4b13      	ldr	r3, [pc, #76]	@ (8008224 <netif_set_link_up+0x5c>)
 80081d8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80081dc:	4912      	ldr	r1, [pc, #72]	@ (8008228 <netif_set_link_up+0x60>)
 80081de:	4813      	ldr	r0, [pc, #76]	@ (800822c <netif_set_link_up+0x64>)
 80081e0:	f009 f806 	bl	80111f0 <iprintf>
 80081e4:	e01b      	b.n	800821e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d114      	bne.n	800821e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008206:	2103      	movs	r1, #3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff6b 	bl	80080e4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <netif_set_link_up+0x56>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	08012558 	.word	0x08012558
 8008228:	08012740 	.word	0x08012740
 800822c:	080125a8 	.word	0x080125a8

08008230 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <netif_set_link_down+0x1e>
 800823e:	4b11      	ldr	r3, [pc, #68]	@ (8008284 <netif_set_link_down+0x54>)
 8008240:	f240 4206 	movw	r2, #1030	@ 0x406
 8008244:	4910      	ldr	r1, [pc, #64]	@ (8008288 <netif_set_link_down+0x58>)
 8008246:	4811      	ldr	r0, [pc, #68]	@ (800828c <netif_set_link_down+0x5c>)
 8008248:	f008 ffd2 	bl	80111f0 <iprintf>
 800824c:	e017      	b.n	800827e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d010      	beq.n	800827e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008262:	f023 0304 	bic.w	r3, r3, #4
 8008266:	b2da      	uxtb	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <netif_set_link_down+0x4e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	08012558 	.word	0x08012558
 8008288:	08012764 	.word	0x08012764
 800828c:	080125a8 	.word	0x080125a8

08008290 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	61da      	str	r2, [r3, #28]
  }
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b085      	sub	sp, #20
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80082be:	f06f 030b 	mvn.w	r3, #11
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80082e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008318 <netif_get_by_index+0x48>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e00c      	b.n	8008302 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082ee:	3301      	adds	r3, #1
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	79fa      	ldrb	r2, [r7, #7]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d101      	bne.n	80082fc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	e006      	b.n	800830a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1ef      	bne.n	80082e8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	2000bd80 	.word	0x2000bd80

0800831c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008322:	f008 fe47 	bl	8010fb4 <sys_arch_protect>
 8008326:	6038      	str	r0, [r7, #0]
 8008328:	4b0d      	ldr	r3, [pc, #52]	@ (8008360 <pbuf_free_ooseq+0x44>)
 800832a:	2200      	movs	r2, #0
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	6838      	ldr	r0, [r7, #0]
 8008330:	f008 fe4e 	bl	8010fd0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008334:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <pbuf_free_ooseq+0x48>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	e00a      	b.n	8008352 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f002 f973 	bl	800a630 <tcp_free_ooseq>
      return;
 800834a:	e005      	b.n	8008358 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f1      	bne.n	800833c <pbuf_free_ooseq+0x20>
    }
  }
}
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2000bd89 	.word	0x2000bd89
 8008364:	2000bd98 	.word	0x2000bd98

08008368 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008370:	f7ff ffd4 	bl	800831c <pbuf_free_ooseq>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008382:	f008 fe17 	bl	8010fb4 <sys_arch_protect>
 8008386:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008388:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <pbuf_pool_is_empty+0x4c>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800838e:	4b0e      	ldr	r3, [pc, #56]	@ (80083c8 <pbuf_pool_is_empty+0x4c>)
 8008390:	2201      	movs	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f008 fe1b 	bl	8010fd0 <sys_arch_unprotect>

  if (!queued) {
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10f      	bne.n	80083c0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80083a0:	2100      	movs	r1, #0
 80083a2:	480a      	ldr	r0, [pc, #40]	@ (80083cc <pbuf_pool_is_empty+0x50>)
 80083a4:	f7fe feaa 	bl	80070fc <tcpip_try_callback>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <pbuf_pool_is_empty+0x44>
 80083ae:	f008 fe01 	bl	8010fb4 <sys_arch_protect>
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	4b04      	ldr	r3, [pc, #16]	@ (80083c8 <pbuf_pool_is_empty+0x4c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f008 fe08 	bl	8010fd0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	2000bd89 	.word	0x2000bd89
 80083cc:	08008369 	.word	0x08008369

080083d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4611      	mov	r1, r2
 80083dc:	461a      	mov	r2, r3
 80083de:	460b      	mov	r3, r1
 80083e0:	80fb      	strh	r3, [r7, #6]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	88fa      	ldrh	r2, [r7, #6]
 80083f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88ba      	ldrh	r2, [r7, #4]
 80083fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80083fe:	8b3b      	ldrh	r3, [r7, #24]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7f3a      	ldrb	r2, [r7, #28]
 800840a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	73da      	strb	r2, [r3, #15]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08c      	sub	sp, #48	@ 0x30
 8008428:	af02      	add	r7, sp, #8
 800842a:	4603      	mov	r3, r0
 800842c:	71fb      	strb	r3, [r7, #7]
 800842e:	460b      	mov	r3, r1
 8008430:	80bb      	strh	r3, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800843a:	887b      	ldrh	r3, [r7, #2]
 800843c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008440:	d07f      	beq.n	8008542 <pbuf_alloc+0x11e>
 8008442:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008446:	f300 80c8 	bgt.w	80085da <pbuf_alloc+0x1b6>
 800844a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800844e:	d010      	beq.n	8008472 <pbuf_alloc+0x4e>
 8008450:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008454:	f300 80c1 	bgt.w	80085da <pbuf_alloc+0x1b6>
 8008458:	2b01      	cmp	r3, #1
 800845a:	d002      	beq.n	8008462 <pbuf_alloc+0x3e>
 800845c:	2b41      	cmp	r3, #65	@ 0x41
 800845e:	f040 80bc 	bne.w	80085da <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008462:	887a      	ldrh	r2, [r7, #2]
 8008464:	88bb      	ldrh	r3, [r7, #4]
 8008466:	4619      	mov	r1, r3
 8008468:	2000      	movs	r0, #0
 800846a:	f000 f8d1 	bl	8008610 <pbuf_alloc_reference>
 800846e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008470:	e0bd      	b.n	80085ee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800847a:	88bb      	ldrh	r3, [r7, #4]
 800847c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800847e:	200c      	movs	r0, #12
 8008480:	f7ff fb9a 	bl	8007bb8 <memp_malloc>
 8008484:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d109      	bne.n	80084a0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800848c:	f7ff ff76 	bl	800837c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008498:	f000 faa8 	bl	80089ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	e0a7      	b.n	80085f0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80084a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084a2:	3303      	adds	r3, #3
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	8b7a      	ldrh	r2, [r7, #26]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bf28      	it	cs
 80084b8:	4613      	movcs	r3, r2
 80084ba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80084bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084be:	3310      	adds	r3, #16
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4413      	add	r3, r2
 80084c4:	3303      	adds	r3, #3
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	4618      	mov	r0, r3
 80084cc:	89f9      	ldrh	r1, [r7, #14]
 80084ce:	8b7a      	ldrh	r2, [r7, #26]
 80084d0:	2300      	movs	r3, #0
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	887b      	ldrh	r3, [r7, #2]
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	460b      	mov	r3, r1
 80084da:	4601      	mov	r1, r0
 80084dc:	6938      	ldr	r0, [r7, #16]
 80084de:	f7ff ff77 	bl	80083d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <pbuf_alloc+0xd8>
 80084ee:	4b42      	ldr	r3, [pc, #264]	@ (80085f8 <pbuf_alloc+0x1d4>)
 80084f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084f4:	4941      	ldr	r1, [pc, #260]	@ (80085fc <pbuf_alloc+0x1d8>)
 80084f6:	4842      	ldr	r0, [pc, #264]	@ (8008600 <pbuf_alloc+0x1dc>)
 80084f8:	f008 fe7a 	bl	80111f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80084fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084fe:	3303      	adds	r3, #3
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8008508:	d106      	bne.n	8008518 <pbuf_alloc+0xf4>
 800850a:	4b3b      	ldr	r3, [pc, #236]	@ (80085f8 <pbuf_alloc+0x1d4>)
 800850c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8008510:	493c      	ldr	r1, [pc, #240]	@ (8008604 <pbuf_alloc+0x1e0>)
 8008512:	483b      	ldr	r0, [pc, #236]	@ (8008600 <pbuf_alloc+0x1dc>)
 8008514:	f008 fe6c 	bl	80111f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	d102      	bne.n	8008524 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
 8008522:	e002      	b.n	800852a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800852e:	8b7a      	ldrh	r2, [r7, #26]
 8008530:	89fb      	ldrh	r3, [r7, #14]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800853a:	8b7b      	ldrh	r3, [r7, #26]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d19e      	bne.n	800847e <pbuf_alloc+0x5a>
      break;
 8008540:	e055      	b.n	80085ee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008542:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008544:	3303      	adds	r3, #3
 8008546:	b29b      	uxth	r3, r3
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	b29a      	uxth	r2, r3
 800854e:	88bb      	ldrh	r3, [r7, #4]
 8008550:	3303      	adds	r3, #3
 8008552:	b29b      	uxth	r3, r3
 8008554:	f023 0303 	bic.w	r3, r3, #3
 8008558:	b29b      	uxth	r3, r3
 800855a:	4413      	add	r3, r2
 800855c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800855e:	8b3b      	ldrh	r3, [r7, #24]
 8008560:	3310      	adds	r3, #16
 8008562:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008564:	8b3a      	ldrh	r2, [r7, #24]
 8008566:	88bb      	ldrh	r3, [r7, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	429a      	cmp	r2, r3
 8008570:	d306      	bcc.n	8008580 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008572:	8afa      	ldrh	r2, [r7, #22]
 8008574:	88bb      	ldrh	r3, [r7, #4]
 8008576:	3303      	adds	r3, #3
 8008578:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800857c:	429a      	cmp	r2, r3
 800857e:	d201      	bcs.n	8008584 <pbuf_alloc+0x160>
        return NULL;
 8008580:	2300      	movs	r3, #0
 8008582:	e035      	b.n	80085f0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008584:	8afb      	ldrh	r3, [r7, #22]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff f972 	bl	8007870 <mem_malloc>
 800858c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <pbuf_alloc+0x174>
        return NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	e02b      	b.n	80085f0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008598:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800859a:	3310      	adds	r3, #16
 800859c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859e:	4413      	add	r3, r2
 80085a0:	3303      	adds	r3, #3
 80085a2:	f023 0303 	bic.w	r3, r3, #3
 80085a6:	4618      	mov	r0, r3
 80085a8:	88b9      	ldrh	r1, [r7, #4]
 80085aa:	88ba      	ldrh	r2, [r7, #4]
 80085ac:	2300      	movs	r3, #0
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	887b      	ldrh	r3, [r7, #2]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	460b      	mov	r3, r1
 80085b6:	4601      	mov	r1, r0
 80085b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80085ba:	f7ff ff09 	bl	80083d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d010      	beq.n	80085ec <pbuf_alloc+0x1c8>
 80085ca:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <pbuf_alloc+0x1d4>)
 80085cc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80085d0:	490d      	ldr	r1, [pc, #52]	@ (8008608 <pbuf_alloc+0x1e4>)
 80085d2:	480b      	ldr	r0, [pc, #44]	@ (8008600 <pbuf_alloc+0x1dc>)
 80085d4:	f008 fe0c 	bl	80111f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80085d8:	e008      	b.n	80085ec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80085da:	4b07      	ldr	r3, [pc, #28]	@ (80085f8 <pbuf_alloc+0x1d4>)
 80085dc:	f240 1227 	movw	r2, #295	@ 0x127
 80085e0:	490a      	ldr	r1, [pc, #40]	@ (800860c <pbuf_alloc+0x1e8>)
 80085e2:	4807      	ldr	r0, [pc, #28]	@ (8008600 <pbuf_alloc+0x1dc>)
 80085e4:	f008 fe04 	bl	80111f0 <iprintf>
      return NULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e001      	b.n	80085f0 <pbuf_alloc+0x1cc>
      break;
 80085ec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3728      	adds	r7, #40	@ 0x28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	08012788 	.word	0x08012788
 80085fc:	080127b8 	.word	0x080127b8
 8008600:	080127e8 	.word	0x080127e8
 8008604:	08012810 	.word	0x08012810
 8008608:	08012844 	.word	0x08012844
 800860c:	08012870 	.word	0x08012870

08008610 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
 800861c:	4613      	mov	r3, r2
 800861e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008620:	883b      	ldrh	r3, [r7, #0]
 8008622:	2b41      	cmp	r3, #65	@ 0x41
 8008624:	d009      	beq.n	800863a <pbuf_alloc_reference+0x2a>
 8008626:	883b      	ldrh	r3, [r7, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d006      	beq.n	800863a <pbuf_alloc_reference+0x2a>
 800862c:	4b0f      	ldr	r3, [pc, #60]	@ (800866c <pbuf_alloc_reference+0x5c>)
 800862e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008632:	490f      	ldr	r1, [pc, #60]	@ (8008670 <pbuf_alloc_reference+0x60>)
 8008634:	480f      	ldr	r0, [pc, #60]	@ (8008674 <pbuf_alloc_reference+0x64>)
 8008636:	f008 fddb 	bl	80111f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800863a:	200b      	movs	r0, #11
 800863c:	f7ff fabc 	bl	8007bb8 <memp_malloc>
 8008640:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	e00b      	b.n	8008664 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800864c:	8879      	ldrh	r1, [r7, #2]
 800864e:	887a      	ldrh	r2, [r7, #2]
 8008650:	2300      	movs	r3, #0
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	883b      	ldrh	r3, [r7, #0]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	460b      	mov	r3, r1
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff feb7 	bl	80083d0 <pbuf_init_alloced_pbuf>
  return p;
 8008662:	68fb      	ldr	r3, [r7, #12]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	08012788 	.word	0x08012788
 8008670:	0801288c 	.word	0x0801288c
 8008674:	080127e8 	.word	0x080127e8

08008678 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af02      	add	r7, sp, #8
 800867e:	607b      	str	r3, [r7, #4]
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
 8008684:	460b      	mov	r3, r1
 8008686:	81bb      	strh	r3, [r7, #12]
 8008688:	4613      	mov	r3, r2
 800868a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008690:	8a7b      	ldrh	r3, [r7, #18]
 8008692:	3303      	adds	r3, #3
 8008694:	f023 0203 	bic.w	r2, r3, #3
 8008698:	89bb      	ldrh	r3, [r7, #12]
 800869a:	441a      	add	r2, r3
 800869c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800869e:	429a      	cmp	r2, r3
 80086a0:	d901      	bls.n	80086a6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e018      	b.n	80086d8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80086ac:	8a7b      	ldrh	r3, [r7, #18]
 80086ae:	3303      	adds	r3, #3
 80086b0:	f023 0303 	bic.w	r3, r3, #3
 80086b4:	6a3a      	ldr	r2, [r7, #32]
 80086b6:	4413      	add	r3, r2
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e001      	b.n	80086c0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	89b9      	ldrh	r1, [r7, #12]
 80086c4:	89ba      	ldrh	r2, [r7, #12]
 80086c6:	2302      	movs	r3, #2
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	897b      	ldrh	r3, [r7, #10]
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	460b      	mov	r3, r1
 80086d0:	6979      	ldr	r1, [r7, #20]
 80086d2:	f7ff fe7d 	bl	80083d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80086d6:	687b      	ldr	r3, [r7, #4]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <pbuf_realloc+0x20>
 80086f2:	4b3a      	ldr	r3, [pc, #232]	@ (80087dc <pbuf_realloc+0xfc>)
 80086f4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80086f8:	4939      	ldr	r1, [pc, #228]	@ (80087e0 <pbuf_realloc+0x100>)
 80086fa:	483a      	ldr	r0, [pc, #232]	@ (80087e4 <pbuf_realloc+0x104>)
 80086fc:	f008 fd78 	bl	80111f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	891b      	ldrh	r3, [r3, #8]
 8008704:	887a      	ldrh	r2, [r7, #2]
 8008706:	429a      	cmp	r2, r3
 8008708:	d263      	bcs.n	80087d2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	891a      	ldrh	r2, [r3, #8]
 800870e:	887b      	ldrh	r3, [r7, #2]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008714:	887b      	ldrh	r3, [r7, #2]
 8008716:	817b      	strh	r3, [r7, #10]
  q = p;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800871c:	e018      	b.n	8008750 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	895b      	ldrh	r3, [r3, #10]
 8008722:	897a      	ldrh	r2, [r7, #10]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	891a      	ldrh	r2, [r3, #8]
 800872c:	893b      	ldrh	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <pbuf_realloc+0x70>
 8008742:	4b26      	ldr	r3, [pc, #152]	@ (80087dc <pbuf_realloc+0xfc>)
 8008744:	f240 12af 	movw	r2, #431	@ 0x1af
 8008748:	4927      	ldr	r1, [pc, #156]	@ (80087e8 <pbuf_realloc+0x108>)
 800874a:	4826      	ldr	r0, [pc, #152]	@ (80087e4 <pbuf_realloc+0x104>)
 800874c:	f008 fd50 	bl	80111f0 <iprintf>
  while (rem_len > q->len) {
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	895b      	ldrh	r3, [r3, #10]
 8008754:	897a      	ldrh	r2, [r7, #10]
 8008756:	429a      	cmp	r2, r3
 8008758:	d8e1      	bhi.n	800871e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	7b1b      	ldrb	r3, [r3, #12]
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	2b00      	cmp	r3, #0
 8008764:	d121      	bne.n	80087aa <pbuf_realloc+0xca>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	895b      	ldrh	r3, [r3, #10]
 800876a:	897a      	ldrh	r2, [r7, #10]
 800876c:	429a      	cmp	r2, r3
 800876e:	d01c      	beq.n	80087aa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	7b5b      	ldrb	r3, [r3, #13]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d116      	bne.n	80087aa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	b29a      	uxth	r2, r3
 8008786:	897b      	ldrh	r3, [r7, #10]
 8008788:	4413      	add	r3, r2
 800878a:	b29b      	uxth	r3, r3
 800878c:	4619      	mov	r1, r3
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7fe ff64 	bl	800765c <mem_trim>
 8008794:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <pbuf_realloc+0xca>
 800879c:	4b0f      	ldr	r3, [pc, #60]	@ (80087dc <pbuf_realloc+0xfc>)
 800879e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80087a2:	4912      	ldr	r1, [pc, #72]	@ (80087ec <pbuf_realloc+0x10c>)
 80087a4:	480f      	ldr	r0, [pc, #60]	@ (80087e4 <pbuf_realloc+0x104>)
 80087a6:	f008 fd23 	bl	80111f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	897a      	ldrh	r2, [r7, #10]
 80087ae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	895a      	ldrh	r2, [r3, #10]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f911 	bl	80089ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e000      	b.n	80087d4 <pbuf_realloc+0xf4>
    return;
 80087d2:	bf00      	nop

}
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	08012788 	.word	0x08012788
 80087e0:	080128a0 	.word	0x080128a0
 80087e4:	080127e8 	.word	0x080127e8
 80087e8:	080128b8 	.word	0x080128b8
 80087ec:	080128d0 	.word	0x080128d0

080087f0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <pbuf_add_header_impl+0x22>
 8008804:	4b2b      	ldr	r3, [pc, #172]	@ (80088b4 <pbuf_add_header_impl+0xc4>)
 8008806:	f240 12df 	movw	r2, #479	@ 0x1df
 800880a:	492b      	ldr	r1, [pc, #172]	@ (80088b8 <pbuf_add_header_impl+0xc8>)
 800880c:	482b      	ldr	r0, [pc, #172]	@ (80088bc <pbuf_add_header_impl+0xcc>)
 800880e:	f008 fcef 	bl	80111f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <pbuf_add_header_impl+0x30>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800881e:	d301      	bcc.n	8008824 <pbuf_add_header_impl+0x34>
    return 1;
 8008820:	2301      	movs	r3, #1
 8008822:	e043      	b.n	80088ac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <pbuf_add_header_impl+0x3e>
    return 0;
 800882a:	2300      	movs	r3, #0
 800882c:	e03e      	b.n	80088ac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	891a      	ldrh	r2, [r3, #8]
 8008836:	8a7b      	ldrh	r3, [r7, #18]
 8008838:	4413      	add	r3, r2
 800883a:	b29b      	uxth	r3, r3
 800883c:	8a7a      	ldrh	r2, [r7, #18]
 800883e:	429a      	cmp	r2, r3
 8008840:	d901      	bls.n	8008846 <pbuf_add_header_impl+0x56>
    return 1;
 8008842:	2301      	movs	r3, #1
 8008844:	e032      	b.n	80088ac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	7b1b      	ldrb	r3, [r3, #12]
 800884a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800884c:	8a3b      	ldrh	r3, [r7, #16]
 800884e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00c      	beq.n	8008870 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	425b      	negs	r3, r3
 800885e:	4413      	add	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3310      	adds	r3, #16
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	429a      	cmp	r2, r3
 800886a:	d20d      	bcs.n	8008888 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800886c:	2301      	movs	r3, #1
 800886e:	e01d      	b.n	80088ac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	425b      	negs	r3, r3
 800887e:	4413      	add	r3, r2
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e001      	b.n	8008888 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008884:	2301      	movs	r3, #1
 8008886:	e011      	b.n	80088ac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	895a      	ldrh	r2, [r3, #10]
 8008892:	8a7b      	ldrh	r3, [r7, #18]
 8008894:	4413      	add	r3, r2
 8008896:	b29a      	uxth	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	891a      	ldrh	r2, [r3, #8]
 80088a0:	8a7b      	ldrh	r3, [r7, #18]
 80088a2:	4413      	add	r3, r2
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	811a      	strh	r2, [r3, #8]


  return 0;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	08012788 	.word	0x08012788
 80088b8:	080128ec 	.word	0x080128ec
 80088bc:	080127e8 	.word	0x080127e8

080088c0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80088ca:	2200      	movs	r2, #0
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff ff8e 	bl	80087f0 <pbuf_add_header_impl>
 80088d4:	4603      	mov	r3, r0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <pbuf_remove_header+0x1e>
 80088f0:	4b20      	ldr	r3, [pc, #128]	@ (8008974 <pbuf_remove_header+0x94>)
 80088f2:	f240 224b 	movw	r2, #587	@ 0x24b
 80088f6:	4920      	ldr	r1, [pc, #128]	@ (8008978 <pbuf_remove_header+0x98>)
 80088f8:	4820      	ldr	r0, [pc, #128]	@ (800897c <pbuf_remove_header+0x9c>)
 80088fa:	f008 fc79 	bl	80111f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <pbuf_remove_header+0x2c>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800890a:	d301      	bcc.n	8008910 <pbuf_remove_header+0x30>
    return 1;
 800890c:	2301      	movs	r3, #1
 800890e:	e02c      	b.n	800896a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <pbuf_remove_header+0x3a>
    return 0;
 8008916:	2300      	movs	r3, #0
 8008918:	e027      	b.n	800896a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	895b      	ldrh	r3, [r3, #10]
 8008922:	89fa      	ldrh	r2, [r7, #14]
 8008924:	429a      	cmp	r2, r3
 8008926:	d908      	bls.n	800893a <pbuf_remove_header+0x5a>
 8008928:	4b12      	ldr	r3, [pc, #72]	@ (8008974 <pbuf_remove_header+0x94>)
 800892a:	f240 2255 	movw	r2, #597	@ 0x255
 800892e:	4914      	ldr	r1, [pc, #80]	@ (8008980 <pbuf_remove_header+0xa0>)
 8008930:	4812      	ldr	r0, [pc, #72]	@ (800897c <pbuf_remove_header+0x9c>)
 8008932:	f008 fc5d 	bl	80111f0 <iprintf>
 8008936:	2301      	movs	r3, #1
 8008938:	e017      	b.n	800896a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	441a      	add	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	895a      	ldrh	r2, [r3, #10]
 8008950:	89fb      	ldrh	r3, [r7, #14]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	b29a      	uxth	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	891a      	ldrh	r2, [r3, #8]
 800895e:	89fb      	ldrh	r3, [r7, #14]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	08012788 	.word	0x08012788
 8008978:	080128ec 	.word	0x080128ec
 800897c:	080127e8 	.word	0x080127e8
 8008980:	080128f8 	.word	0x080128f8

08008984 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
 8008990:	4613      	mov	r3, r2
 8008992:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da08      	bge.n	80089ae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800899c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089a0:	425b      	negs	r3, r3
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff ff9b 	bl	80088e0 <pbuf_remove_header>
 80089aa:	4603      	mov	r3, r0
 80089ac:	e007      	b.n	80089be <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80089ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089b2:	787a      	ldrb	r2, [r7, #1]
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff ff1a 	bl	80087f0 <pbuf_add_header_impl>
 80089bc:	4603      	mov	r3, r0
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80089d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089d6:	2201      	movs	r2, #1
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ffd2 	bl	8008984 <pbuf_header_impl>
 80089e0:	4603      	mov	r3, r0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d106      	bne.n	8008a0e <pbuf_free+0x22>
 8008a00:	4b3b      	ldr	r3, [pc, #236]	@ (8008af0 <pbuf_free+0x104>)
 8008a02:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008a06:	493b      	ldr	r1, [pc, #236]	@ (8008af4 <pbuf_free+0x108>)
 8008a08:	483b      	ldr	r0, [pc, #236]	@ (8008af8 <pbuf_free+0x10c>)
 8008a0a:	f008 fbf1 	bl	80111f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e069      	b.n	8008ae6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008a16:	e062      	b.n	8008ade <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008a18:	f008 facc 	bl	8010fb4 <sys_arch_protect>
 8008a1c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7b9b      	ldrb	r3, [r3, #14]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <pbuf_free+0x48>
 8008a26:	4b32      	ldr	r3, [pc, #200]	@ (8008af0 <pbuf_free+0x104>)
 8008a28:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008a2c:	4933      	ldr	r1, [pc, #204]	@ (8008afc <pbuf_free+0x110>)
 8008a2e:	4832      	ldr	r0, [pc, #200]	@ (8008af8 <pbuf_free+0x10c>)
 8008a30:	f008 fbde 	bl	80111f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7b9b      	ldrb	r3, [r3, #14]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	739a      	strb	r2, [r3, #14]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7b9b      	ldrb	r3, [r3, #14]
 8008a44:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008a46:	69b8      	ldr	r0, [r7, #24]
 8008a48:	f008 fac2 	bl	8010fd0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d143      	bne.n	8008ada <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7b1b      	ldrb	r3, [r3, #12]
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7b5b      	ldrb	r3, [r3, #13]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d011      	beq.n	8008a92 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <pbuf_free+0x9c>
 8008a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008af0 <pbuf_free+0x104>)
 8008a7c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008a80:	491f      	ldr	r1, [pc, #124]	@ (8008b00 <pbuf_free+0x114>)
 8008a82:	481d      	ldr	r0, [pc, #116]	@ (8008af8 <pbuf_free+0x10c>)
 8008a84:	f008 fbb4 	bl	80111f0 <iprintf>
        pc->custom_free_function(p);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
 8008a90:	e01d      	b.n	8008ace <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d104      	bne.n	8008aa2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	200c      	movs	r0, #12
 8008a9c:	f7ff f902 	bl	8007ca4 <memp_free>
 8008aa0:	e015      	b.n	8008ace <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d104      	bne.n	8008ab2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	200b      	movs	r0, #11
 8008aac:	f7ff f8fa 	bl	8007ca4 <memp_free>
 8008ab0:	e00d      	b.n	8008ace <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <pbuf_free+0xd4>
          mem_free(p);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7fe fd3f 	bl	800753c <mem_free>
 8008abe:	e006      	b.n	8008ace <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8008af0 <pbuf_free+0x104>)
 8008ac2:	f240 320f 	movw	r2, #783	@ 0x30f
 8008ac6:	490f      	ldr	r1, [pc, #60]	@ (8008b04 <pbuf_free+0x118>)
 8008ac8:	480b      	ldr	r0, [pc, #44]	@ (8008af8 <pbuf_free+0x10c>)
 8008aca:	f008 fb91 	bl	80111f0 <iprintf>
        }
      }
      count++;
 8008ace:	7ffb      	ldrb	r3, [r7, #31]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	607b      	str	r3, [r7, #4]
 8008ad8:	e001      	b.n	8008ade <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d199      	bne.n	8008a18 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	08012788 	.word	0x08012788
 8008af4:	080128ec 	.word	0x080128ec
 8008af8:	080127e8 	.word	0x080127e8
 8008afc:	08012918 	.word	0x08012918
 8008b00:	08012930 	.word	0x08012930
 8008b04:	08012954 	.word	0x08012954

08008b08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008b14:	e005      	b.n	8008b22 <pbuf_clen+0x1a>
    ++len;
 8008b16:	89fb      	ldrh	r3, [r7, #14]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1f6      	bne.n	8008b16 <pbuf_clen+0xe>
  }
  return len;
 8008b28:	89fb      	ldrh	r3, [r7, #14]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d016      	beq.n	8008b74 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008b46:	f008 fa35 	bl	8010fb4 <sys_arch_protect>
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7b9b      	ldrb	r3, [r3, #14]
 8008b50:	3301      	adds	r3, #1
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	739a      	strb	r2, [r3, #14]
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f008 fa39 	bl	8010fd0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7b9b      	ldrb	r3, [r3, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <pbuf_ref+0x3c>
 8008b66:	4b05      	ldr	r3, [pc, #20]	@ (8008b7c <pbuf_ref+0x44>)
 8008b68:	f240 3242 	movw	r2, #834	@ 0x342
 8008b6c:	4904      	ldr	r1, [pc, #16]	@ (8008b80 <pbuf_ref+0x48>)
 8008b6e:	4805      	ldr	r0, [pc, #20]	@ (8008b84 <pbuf_ref+0x4c>)
 8008b70:	f008 fb3e 	bl	80111f0 <iprintf>
  }
}
 8008b74:	bf00      	nop
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	08012788 	.word	0x08012788
 8008b80:	08012968 	.word	0x08012968
 8008b84:	080127e8 	.word	0x080127e8

08008b88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <pbuf_cat+0x16>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d107      	bne.n	8008bae <pbuf_cat+0x26>
 8008b9e:	4b20      	ldr	r3, [pc, #128]	@ (8008c20 <pbuf_cat+0x98>)
 8008ba0:	f240 3259 	movw	r2, #857	@ 0x359
 8008ba4:	491f      	ldr	r1, [pc, #124]	@ (8008c24 <pbuf_cat+0x9c>)
 8008ba6:	4820      	ldr	r0, [pc, #128]	@ (8008c28 <pbuf_cat+0xa0>)
 8008ba8:	f008 fb22 	bl	80111f0 <iprintf>
 8008bac:	e034      	b.n	8008c18 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e00a      	b.n	8008bca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	891a      	ldrh	r2, [r3, #8]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	891b      	ldrh	r3, [r3, #8]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f0      	bne.n	8008bb4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	891a      	ldrh	r2, [r3, #8]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	895b      	ldrh	r3, [r3, #10]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d006      	beq.n	8008bec <pbuf_cat+0x64>
 8008bde:	4b10      	ldr	r3, [pc, #64]	@ (8008c20 <pbuf_cat+0x98>)
 8008be0:	f240 3262 	movw	r2, #866	@ 0x362
 8008be4:	4911      	ldr	r1, [pc, #68]	@ (8008c2c <pbuf_cat+0xa4>)
 8008be6:	4810      	ldr	r0, [pc, #64]	@ (8008c28 <pbuf_cat+0xa0>)
 8008be8:	f008 fb02 	bl	80111f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <pbuf_cat+0x7a>
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <pbuf_cat+0x98>)
 8008bf6:	f240 3263 	movw	r2, #867	@ 0x363
 8008bfa:	490d      	ldr	r1, [pc, #52]	@ (8008c30 <pbuf_cat+0xa8>)
 8008bfc:	480a      	ldr	r0, [pc, #40]	@ (8008c28 <pbuf_cat+0xa0>)
 8008bfe:	f008 faf7 	bl	80111f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	891a      	ldrh	r2, [r3, #8]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	891b      	ldrh	r3, [r3, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	08012788 	.word	0x08012788
 8008c24:	0801297c 	.word	0x0801297c
 8008c28:	080127e8 	.word	0x080127e8
 8008c2c:	080129b4 	.word	0x080129b4
 8008c30:	080129e4 	.word	0x080129e4

08008c34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	2300      	movs	r3, #0
 8008c44:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <pbuf_copy+0x2a>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <pbuf_copy+0x2a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	891a      	ldrh	r2, [r3, #8]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	891b      	ldrh	r3, [r3, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d209      	bcs.n	8008c72 <pbuf_copy+0x3e>
 8008c5e:	4b57      	ldr	r3, [pc, #348]	@ (8008dbc <pbuf_copy+0x188>)
 8008c60:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008c64:	4956      	ldr	r1, [pc, #344]	@ (8008dc0 <pbuf_copy+0x18c>)
 8008c66:	4857      	ldr	r0, [pc, #348]	@ (8008dc4 <pbuf_copy+0x190>)
 8008c68:	f008 fac2 	bl	80111f0 <iprintf>
 8008c6c:	f06f 030f 	mvn.w	r3, #15
 8008c70:	e09f      	b.n	8008db2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	895b      	ldrh	r3, [r3, #10]
 8008c76:	461a      	mov	r2, r3
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	895b      	ldrh	r3, [r3, #10]
 8008c80:	4619      	mov	r1, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1acb      	subs	r3, r1, r3
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d306      	bcc.n	8008c98 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	895b      	ldrh	r3, [r3, #10]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e005      	b.n	8008ca4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	895b      	ldrh	r3, [r3, #10]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	18d0      	adds	r0, r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	f008 fb75 	bl	80113a6 <memcpy>
    offset_to += len;
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	895b      	ldrh	r3, [r3, #10]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d906      	bls.n	8008ce6 <pbuf_copy+0xb2>
 8008cd8:	4b38      	ldr	r3, [pc, #224]	@ (8008dbc <pbuf_copy+0x188>)
 8008cda:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008cde:	493a      	ldr	r1, [pc, #232]	@ (8008dc8 <pbuf_copy+0x194>)
 8008ce0:	4838      	ldr	r0, [pc, #224]	@ (8008dc4 <pbuf_copy+0x190>)
 8008ce2:	f008 fa85 	bl	80111f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	895b      	ldrh	r3, [r3, #10]
 8008cea:	461a      	mov	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d906      	bls.n	8008d00 <pbuf_copy+0xcc>
 8008cf2:	4b32      	ldr	r3, [pc, #200]	@ (8008dbc <pbuf_copy+0x188>)
 8008cf4:	f240 32da 	movw	r2, #986	@ 0x3da
 8008cf8:	4934      	ldr	r1, [pc, #208]	@ (8008dcc <pbuf_copy+0x198>)
 8008cfa:	4832      	ldr	r0, [pc, #200]	@ (8008dc4 <pbuf_copy+0x190>)
 8008cfc:	f008 fa78 	bl	80111f0 <iprintf>
    if (offset_from >= p_from->len) {
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	895b      	ldrh	r3, [r3, #10]
 8008d04:	461a      	mov	r2, r3
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d304      	bcc.n	8008d16 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	895b      	ldrh	r3, [r3, #10]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d114      	bne.n	8008d4c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <pbuf_copy+0x118>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d009      	beq.n	8008d4c <pbuf_copy+0x118>
 8008d38:	4b20      	ldr	r3, [pc, #128]	@ (8008dbc <pbuf_copy+0x188>)
 8008d3a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008d3e:	4924      	ldr	r1, [pc, #144]	@ (8008dd0 <pbuf_copy+0x19c>)
 8008d40:	4820      	ldr	r0, [pc, #128]	@ (8008dc4 <pbuf_copy+0x190>)
 8008d42:	f008 fa55 	bl	80111f0 <iprintf>
 8008d46:	f06f 030f 	mvn.w	r3, #15
 8008d4a:	e032      	b.n	8008db2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d013      	beq.n	8008d7a <pbuf_copy+0x146>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	895a      	ldrh	r2, [r3, #10]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	891b      	ldrh	r3, [r3, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d10d      	bne.n	8008d7a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <pbuf_copy+0x146>
 8008d66:	4b15      	ldr	r3, [pc, #84]	@ (8008dbc <pbuf_copy+0x188>)
 8008d68:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008d6c:	4919      	ldr	r1, [pc, #100]	@ (8008dd4 <pbuf_copy+0x1a0>)
 8008d6e:	4815      	ldr	r0, [pc, #84]	@ (8008dc4 <pbuf_copy+0x190>)
 8008d70:	f008 fa3e 	bl	80111f0 <iprintf>
 8008d74:	f06f 0305 	mvn.w	r3, #5
 8008d78:	e01b      	b.n	8008db2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d013      	beq.n	8008da8 <pbuf_copy+0x174>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	895a      	ldrh	r2, [r3, #10]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	891b      	ldrh	r3, [r3, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d10d      	bne.n	8008da8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <pbuf_copy+0x174>
 8008d94:	4b09      	ldr	r3, [pc, #36]	@ (8008dbc <pbuf_copy+0x188>)
 8008d96:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008d9a:	490e      	ldr	r1, [pc, #56]	@ (8008dd4 <pbuf_copy+0x1a0>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	@ (8008dc4 <pbuf_copy+0x190>)
 8008d9e:	f008 fa27 	bl	80111f0 <iprintf>
 8008da2:	f06f 0305 	mvn.w	r3, #5
 8008da6:	e004      	b.n	8008db2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f47f af61 	bne.w	8008c72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	08012788 	.word	0x08012788
 8008dc0:	08012a30 	.word	0x08012a30
 8008dc4:	080127e8 	.word	0x080127e8
 8008dc8:	08012a60 	.word	0x08012a60
 8008dcc:	08012a78 	.word	0x08012a78
 8008dd0:	08012a94 	.word	0x08012a94
 8008dd4:	08012aa4 	.word	0x08012aa4

08008dd8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4611      	mov	r1, r2
 8008de4:	461a      	mov	r2, r3
 8008de6:	460b      	mov	r3, r1
 8008de8:	80fb      	strh	r3, [r7, #6]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d108      	bne.n	8008e0e <pbuf_copy_partial+0x36>
 8008dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8008eac <pbuf_copy_partial+0xd4>)
 8008dfe:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008e02:	492b      	ldr	r1, [pc, #172]	@ (8008eb0 <pbuf_copy_partial+0xd8>)
 8008e04:	482b      	ldr	r0, [pc, #172]	@ (8008eb4 <pbuf_copy_partial+0xdc>)
 8008e06:	f008 f9f3 	bl	80111f0 <iprintf>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e04a      	b.n	8008ea4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d108      	bne.n	8008e26 <pbuf_copy_partial+0x4e>
 8008e14:	4b25      	ldr	r3, [pc, #148]	@ (8008eac <pbuf_copy_partial+0xd4>)
 8008e16:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008e1a:	4927      	ldr	r1, [pc, #156]	@ (8008eb8 <pbuf_copy_partial+0xe0>)
 8008e1c:	4825      	ldr	r0, [pc, #148]	@ (8008eb4 <pbuf_copy_partial+0xdc>)
 8008e1e:	f008 f9e7 	bl	80111f0 <iprintf>
 8008e22:	2300      	movs	r3, #0
 8008e24:	e03e      	b.n	8008ea4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	e034      	b.n	8008e96 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008e2c:	88bb      	ldrh	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <pbuf_copy_partial+0x70>
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	895b      	ldrh	r3, [r3, #10]
 8008e36:	88ba      	ldrh	r2, [r7, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d305      	bcc.n	8008e48 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	895b      	ldrh	r3, [r3, #10]
 8008e40:	88ba      	ldrh	r2, [r7, #4]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	80bb      	strh	r3, [r7, #4]
 8008e46:	e023      	b.n	8008e90 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	895a      	ldrh	r2, [r3, #10]
 8008e4c:	88bb      	ldrh	r3, [r7, #4]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008e52:	8b3a      	ldrh	r2, [r7, #24]
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d901      	bls.n	8008e5e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008e5e:	8b7b      	ldrh	r3, [r7, #26]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	18d0      	adds	r0, r2, r3
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	88bb      	ldrh	r3, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	8b3a      	ldrh	r2, [r7, #24]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f008 fa99 	bl	80113a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008e74:	8afa      	ldrh	r2, [r7, #22]
 8008e76:	8b3b      	ldrh	r3, [r7, #24]
 8008e78:	4413      	add	r3, r2
 8008e7a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008e7c:	8b7a      	ldrh	r2, [r7, #26]
 8008e7e:	8b3b      	ldrh	r3, [r7, #24]
 8008e80:	4413      	add	r3, r2
 8008e82:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008e84:	88fa      	ldrh	r2, [r7, #6]
 8008e86:	8b3b      	ldrh	r3, [r7, #24]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <pbuf_copy_partial+0xca>
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1c4      	bne.n	8008e2c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008ea2:	8afb      	ldrh	r3, [r7, #22]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	08012788 	.word	0x08012788
 8008eb0:	08012ad0 	.word	0x08012ad0
 8008eb4:	080127e8 	.word	0x080127e8
 8008eb8:	08012af0 	.word	0x08012af0

08008ebc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	603a      	str	r2, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	8919      	ldrh	r1, [r3, #8]
 8008ed0:	88ba      	ldrh	r2, [r7, #4]
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff faa5 	bl	8008424 <pbuf_alloc>
 8008eda:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <pbuf_clone+0x2a>
    return NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e011      	b.n	8008f0a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7ff fea3 	bl	8008c34 <pbuf_copy>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008ef2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d006      	beq.n	8008f08 <pbuf_clone+0x4c>
 8008efa:	4b06      	ldr	r3, [pc, #24]	@ (8008f14 <pbuf_clone+0x58>)
 8008efc:	f240 5224 	movw	r2, #1316	@ 0x524
 8008f00:	4905      	ldr	r1, [pc, #20]	@ (8008f18 <pbuf_clone+0x5c>)
 8008f02:	4806      	ldr	r0, [pc, #24]	@ (8008f1c <pbuf_clone+0x60>)
 8008f04:	f008 f974 	bl	80111f0 <iprintf>
  return q;
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	08012788 	.word	0x08012788
 8008f18:	08012bfc 	.word	0x08012bfc
 8008f1c:	080127e8 	.word	0x080127e8

08008f20 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008f24:	f008 f864 	bl	8010ff0 <rand>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	4b01      	ldr	r3, [pc, #4]	@ (8008f40 <tcp_init+0x20>)
 8008f3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008f3c:	bf00      	nop
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000024 	.word	0x20000024

08008f44 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7d1b      	ldrb	r3, [r3, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d105      	bne.n	8008f60 <tcp_free+0x1c>
 8008f54:	4b06      	ldr	r3, [pc, #24]	@ (8008f70 <tcp_free+0x2c>)
 8008f56:	22d4      	movs	r2, #212	@ 0xd4
 8008f58:	4906      	ldr	r1, [pc, #24]	@ (8008f74 <tcp_free+0x30>)
 8008f5a:	4807      	ldr	r0, [pc, #28]	@ (8008f78 <tcp_free+0x34>)
 8008f5c:	f008 f948 	bl	80111f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	2001      	movs	r0, #1
 8008f64:	f7fe fe9e 	bl	8007ca4 <memp_free>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	08012c88 	.word	0x08012c88
 8008f74:	08012cb8 	.word	0x08012cb8
 8008f78:	08012ccc 	.word	0x08012ccc

08008f7c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d105      	bne.n	8008f98 <tcp_free_listen+0x1c>
 8008f8c:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <tcp_free_listen+0x2c>)
 8008f8e:	22df      	movs	r2, #223	@ 0xdf
 8008f90:	4906      	ldr	r1, [pc, #24]	@ (8008fac <tcp_free_listen+0x30>)
 8008f92:	4807      	ldr	r0, [pc, #28]	@ (8008fb0 <tcp_free_listen+0x34>)
 8008f94:	f008 f92c 	bl	80111f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	2002      	movs	r0, #2
 8008f9c:	f7fe fe82 	bl	8007ca4 <memp_free>
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	08012c88 	.word	0x08012c88
 8008fac:	08012cf4 	.word	0x08012cf4
 8008fb0:	08012ccc 	.word	0x08012ccc

08008fb4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008fb8:	f000 fea4 	bl	8009d04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008fbc:	4b07      	ldr	r3, [pc, #28]	@ (8008fdc <tcp_tmr+0x28>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <tcp_tmr+0x28>)
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	4b04      	ldr	r3, [pc, #16]	@ (8008fdc <tcp_tmr+0x28>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008fd4:	f000 fb54 	bl	8009680 <tcp_slowtmr>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	2000bda1 	.word	0x2000bda1

08008fe0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d105      	bne.n	8008ffc <tcp_remove_listener+0x1c>
 8008ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <tcp_remove_listener+0x48>)
 8008ff2:	22ff      	movs	r2, #255	@ 0xff
 8008ff4:	490d      	ldr	r1, [pc, #52]	@ (800902c <tcp_remove_listener+0x4c>)
 8008ff6:	480e      	ldr	r0, [pc, #56]	@ (8009030 <tcp_remove_listener+0x50>)
 8008ff8:	f008 f8fa 	bl	80111f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e00a      	b.n	8009018 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d102      	bne.n	8009012 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f1      	bne.n	8009002 <tcp_remove_listener+0x22>
    }
  }
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08012c88 	.word	0x08012c88
 800902c:	08012d10 	.word	0x08012d10
 8009030:	08012ccc 	.word	0x08012ccc

08009034 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <tcp_listen_closed+0x1c>
 8009042:	4b14      	ldr	r3, [pc, #80]	@ (8009094 <tcp_listen_closed+0x60>)
 8009044:	f240 1211 	movw	r2, #273	@ 0x111
 8009048:	4913      	ldr	r1, [pc, #76]	@ (8009098 <tcp_listen_closed+0x64>)
 800904a:	4814      	ldr	r0, [pc, #80]	@ (800909c <tcp_listen_closed+0x68>)
 800904c:	f008 f8d0 	bl	80111f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7d1b      	ldrb	r3, [r3, #20]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d006      	beq.n	8009066 <tcp_listen_closed+0x32>
 8009058:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <tcp_listen_closed+0x60>)
 800905a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800905e:	4910      	ldr	r1, [pc, #64]	@ (80090a0 <tcp_listen_closed+0x6c>)
 8009060:	480e      	ldr	r0, [pc, #56]	@ (800909c <tcp_listen_closed+0x68>)
 8009062:	f008 f8c5 	bl	80111f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009066:	2301      	movs	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	e00b      	b.n	8009084 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800906c:	4a0d      	ldr	r2, [pc, #52]	@ (80090a4 <tcp_listen_closed+0x70>)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff ffb1 	bl	8008fe0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b03      	cmp	r3, #3
 8009088:	d9f0      	bls.n	800906c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	08012c88 	.word	0x08012c88
 8009098:	08012d38 	.word	0x08012d38
 800909c:	08012ccc 	.word	0x08012ccc
 80090a0:	08012d44 	.word	0x08012d44
 80090a4:	08014ca0 	.word	0x08014ca0

080090a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80090a8:	b5b0      	push	{r4, r5, r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af04      	add	r7, sp, #16
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <tcp_close_shutdown+0x20>
 80090ba:	4b63      	ldr	r3, [pc, #396]	@ (8009248 <tcp_close_shutdown+0x1a0>)
 80090bc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80090c0:	4962      	ldr	r1, [pc, #392]	@ (800924c <tcp_close_shutdown+0x1a4>)
 80090c2:	4863      	ldr	r0, [pc, #396]	@ (8009250 <tcp_close_shutdown+0x1a8>)
 80090c4:	f008 f894 	bl	80111f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d066      	beq.n	800919c <tcp_close_shutdown+0xf4>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7d1b      	ldrb	r3, [r3, #20]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d003      	beq.n	80090de <tcp_close_shutdown+0x36>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	2b07      	cmp	r3, #7
 80090dc:	d15e      	bne.n	800919c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <tcp_close_shutdown+0x48>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80090ee:	d055      	beq.n	800919c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8b5b      	ldrh	r3, [r3, #26]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d106      	bne.n	800910a <tcp_close_shutdown+0x62>
 80090fc:	4b52      	ldr	r3, [pc, #328]	@ (8009248 <tcp_close_shutdown+0x1a0>)
 80090fe:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8009102:	4954      	ldr	r1, [pc, #336]	@ (8009254 <tcp_close_shutdown+0x1ac>)
 8009104:	4852      	ldr	r0, [pc, #328]	@ (8009250 <tcp_close_shutdown+0x1a8>)
 8009106:	f008 f873 	bl	80111f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009112:	687d      	ldr	r5, [r7, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3304      	adds	r3, #4
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	8ad2      	ldrh	r2, [r2, #22]
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	8b09      	ldrh	r1, [r1, #24]
 8009120:	9102      	str	r1, [sp, #8]
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	462b      	mov	r3, r5
 8009128:	4622      	mov	r2, r4
 800912a:	4601      	mov	r1, r0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f004 fe8d 	bl	800de4c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 f8c8 	bl	800a2c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009138:	4b47      	ldr	r3, [pc, #284]	@ (8009258 <tcp_close_shutdown+0x1b0>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	429a      	cmp	r2, r3
 8009140:	d105      	bne.n	800914e <tcp_close_shutdown+0xa6>
 8009142:	4b45      	ldr	r3, [pc, #276]	@ (8009258 <tcp_close_shutdown+0x1b0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	4a43      	ldr	r2, [pc, #268]	@ (8009258 <tcp_close_shutdown+0x1b0>)
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	e013      	b.n	8009176 <tcp_close_shutdown+0xce>
 800914e:	4b42      	ldr	r3, [pc, #264]	@ (8009258 <tcp_close_shutdown+0x1b0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e00c      	b.n	8009170 <tcp_close_shutdown+0xc8>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d104      	bne.n	800916a <tcp_close_shutdown+0xc2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	60da      	str	r2, [r3, #12]
 8009168:	e005      	b.n	8009176 <tcp_close_shutdown+0xce>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1ef      	bne.n	8009156 <tcp_close_shutdown+0xae>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	60da      	str	r2, [r3, #12]
 800917c:	4b37      	ldr	r3, [pc, #220]	@ (800925c <tcp_close_shutdown+0x1b4>)
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009182:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <tcp_close_shutdown+0x1b8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d102      	bne.n	8009192 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800918c:	f003 fd5c 	bl	800cc48 <tcp_trigger_input_pcb_close>
 8009190:	e002      	b.n	8009198 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff fed6 	bl	8008f44 <tcp_free>
      }
      return ERR_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e050      	b.n	800923e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7d1b      	ldrb	r3, [r3, #20]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d03b      	beq.n	800921c <tcp_close_shutdown+0x174>
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	dc44      	bgt.n	8009232 <tcp_close_shutdown+0x18a>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <tcp_close_shutdown+0x10a>
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d02a      	beq.n	8009206 <tcp_close_shutdown+0x15e>
 80091b0:	e03f      	b.n	8009232 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8adb      	ldrh	r3, [r3, #22]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d021      	beq.n	80091fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80091ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009264 <tcp_close_shutdown+0x1bc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d105      	bne.n	80091d0 <tcp_close_shutdown+0x128>
 80091c4:	4b27      	ldr	r3, [pc, #156]	@ (8009264 <tcp_close_shutdown+0x1bc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4a26      	ldr	r2, [pc, #152]	@ (8009264 <tcp_close_shutdown+0x1bc>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e013      	b.n	80091f8 <tcp_close_shutdown+0x150>
 80091d0:	4b24      	ldr	r3, [pc, #144]	@ (8009264 <tcp_close_shutdown+0x1bc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	e00c      	b.n	80091f2 <tcp_close_shutdown+0x14a>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d104      	bne.n	80091ec <tcp_close_shutdown+0x144>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	e005      	b.n	80091f8 <tcp_close_shutdown+0x150>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1ef      	bne.n	80091d8 <tcp_close_shutdown+0x130>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fea0 	bl	8008f44 <tcp_free>
      break;
 8009204:	e01a      	b.n	800923c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7ff ff14 	bl	8009034 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	4816      	ldr	r0, [pc, #88]	@ (8009268 <tcp_close_shutdown+0x1c0>)
 8009210:	f001 f8aa 	bl	800a368 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff feb1 	bl	8008f7c <tcp_free_listen>
      break;
 800921a:	e00f      	b.n	800923c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	480e      	ldr	r0, [pc, #56]	@ (8009258 <tcp_close_shutdown+0x1b0>)
 8009220:	f001 f8a2 	bl	800a368 <tcp_pcb_remove>
 8009224:	4b0d      	ldr	r3, [pc, #52]	@ (800925c <tcp_close_shutdown+0x1b4>)
 8009226:	2201      	movs	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fe8a 	bl	8008f44 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009230:	e004      	b.n	800923c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f81a 	bl	800926c <tcp_close_shutdown_fin>
 8009238:	4603      	mov	r3, r0
 800923a:	e000      	b.n	800923e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bdb0      	pop	{r4, r5, r7, pc}
 8009246:	bf00      	nop
 8009248:	08012c88 	.word	0x08012c88
 800924c:	08012d5c 	.word	0x08012d5c
 8009250:	08012ccc 	.word	0x08012ccc
 8009254:	08012d7c 	.word	0x08012d7c
 8009258:	2000bd98 	.word	0x2000bd98
 800925c:	2000bda0 	.word	0x2000bda0
 8009260:	2000bdd8 	.word	0x2000bdd8
 8009264:	2000bd90 	.word	0x2000bd90
 8009268:	2000bd94 	.word	0x2000bd94

0800926c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <tcp_close_shutdown_fin+0x1c>
 800927a:	4b2e      	ldr	r3, [pc, #184]	@ (8009334 <tcp_close_shutdown_fin+0xc8>)
 800927c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009280:	492d      	ldr	r1, [pc, #180]	@ (8009338 <tcp_close_shutdown_fin+0xcc>)
 8009282:	482e      	ldr	r0, [pc, #184]	@ (800933c <tcp_close_shutdown_fin+0xd0>)
 8009284:	f007 ffb4 	bl	80111f0 <iprintf>

  switch (pcb->state) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	7d1b      	ldrb	r3, [r3, #20]
 800928c:	2b07      	cmp	r3, #7
 800928e:	d020      	beq.n	80092d2 <tcp_close_shutdown_fin+0x66>
 8009290:	2b07      	cmp	r3, #7
 8009292:	dc2b      	bgt.n	80092ec <tcp_close_shutdown_fin+0x80>
 8009294:	2b03      	cmp	r3, #3
 8009296:	d002      	beq.n	800929e <tcp_close_shutdown_fin+0x32>
 8009298:	2b04      	cmp	r3, #4
 800929a:	d00d      	beq.n	80092b8 <tcp_close_shutdown_fin+0x4c>
 800929c:	e026      	b.n	80092ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f003 fee2 	bl	800d068 <tcp_send_fin>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11f      	bne.n	80092f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2205      	movs	r2, #5
 80092b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092b6:	e01b      	b.n	80092f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f003 fed5 	bl	800d068 <tcp_send_fin>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d114      	bne.n	80092f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2205      	movs	r2, #5
 80092ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092d0:	e010      	b.n	80092f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f003 fec8 	bl	800d068 <tcp_send_fin>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80092dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d109      	bne.n	80092f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2209      	movs	r2, #9
 80092e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80092ea:	e005      	b.n	80092f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e01c      	b.n	800932a <tcp_close_shutdown_fin+0xbe>
      break;
 80092f0:	bf00      	nop
 80092f2:	e002      	b.n	80092fa <tcp_close_shutdown_fin+0x8e>
      break;
 80092f4:	bf00      	nop
 80092f6:	e000      	b.n	80092fa <tcp_close_shutdown_fin+0x8e>
      break;
 80092f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80092fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d103      	bne.n	800930a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f003 ffee 	bl	800d2e4 <tcp_output>
 8009308:	e00d      	b.n	8009326 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800930a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009312:	d108      	bne.n	8009326 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8b5b      	ldrh	r3, [r3, #26]
 8009318:	f043 0308 	orr.w	r3, r3, #8
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	e001      	b.n	800932a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009326:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	08012c88 	.word	0x08012c88
 8009338:	08012d38 	.word	0x08012d38
 800933c:	08012ccc 	.word	0x08012ccc

08009340 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <tcp_close+0x22>
 800934e:	4b0f      	ldr	r3, [pc, #60]	@ (800938c <tcp_close+0x4c>)
 8009350:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8009354:	490e      	ldr	r1, [pc, #56]	@ (8009390 <tcp_close+0x50>)
 8009356:	480f      	ldr	r0, [pc, #60]	@ (8009394 <tcp_close+0x54>)
 8009358:	f007 ff4a 	bl	80111f0 <iprintf>
 800935c:	f06f 030f 	mvn.w	r3, #15
 8009360:	e00f      	b.n	8009382 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7d1b      	ldrb	r3, [r3, #20]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d006      	beq.n	8009378 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	8b5b      	ldrh	r3, [r3, #26]
 800936e:	f043 0310 	orr.w	r3, r3, #16
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009378:	2101      	movs	r1, #1
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fe94 	bl	80090a8 <tcp_close_shutdown>
 8009380:	4603      	mov	r3, r0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	08012c88 	.word	0x08012c88
 8009390:	08012d98 	.word	0x08012d98
 8009394:	08012ccc 	.word	0x08012ccc

08009398 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08e      	sub	sp, #56	@ 0x38
 800939c:	af04      	add	r7, sp, #16
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d107      	bne.n	80093b8 <tcp_abandon+0x20>
 80093a8:	4b52      	ldr	r3, [pc, #328]	@ (80094f4 <tcp_abandon+0x15c>)
 80093aa:	f240 223d 	movw	r2, #573	@ 0x23d
 80093ae:	4952      	ldr	r1, [pc, #328]	@ (80094f8 <tcp_abandon+0x160>)
 80093b0:	4852      	ldr	r0, [pc, #328]	@ (80094fc <tcp_abandon+0x164>)
 80093b2:	f007 ff1d 	bl	80111f0 <iprintf>
 80093b6:	e099      	b.n	80094ec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7d1b      	ldrb	r3, [r3, #20]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d106      	bne.n	80093ce <tcp_abandon+0x36>
 80093c0:	4b4c      	ldr	r3, [pc, #304]	@ (80094f4 <tcp_abandon+0x15c>)
 80093c2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80093c6:	494e      	ldr	r1, [pc, #312]	@ (8009500 <tcp_abandon+0x168>)
 80093c8:	484c      	ldr	r0, [pc, #304]	@ (80094fc <tcp_abandon+0x164>)
 80093ca:	f007 ff11 	bl	80111f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7d1b      	ldrb	r3, [r3, #20]
 80093d2:	2b0a      	cmp	r3, #10
 80093d4:	d107      	bne.n	80093e6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	484a      	ldr	r0, [pc, #296]	@ (8009504 <tcp_abandon+0x16c>)
 80093da:	f000 ffc5 	bl	800a368 <tcp_pcb_remove>
    tcp_free(pcb);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fdb0 	bl	8008f44 <tcp_free>
 80093e4:	e082      	b.n	80094ec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009400:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d126      	bne.n	800945e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8adb      	ldrh	r3, [r3, #22]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d02e      	beq.n	8009476 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009418:	4b3b      	ldr	r3, [pc, #236]	@ (8009508 <tcp_abandon+0x170>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d105      	bne.n	800942e <tcp_abandon+0x96>
 8009422:	4b39      	ldr	r3, [pc, #228]	@ (8009508 <tcp_abandon+0x170>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	4a37      	ldr	r2, [pc, #220]	@ (8009508 <tcp_abandon+0x170>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	e013      	b.n	8009456 <tcp_abandon+0xbe>
 800942e:	4b36      	ldr	r3, [pc, #216]	@ (8009508 <tcp_abandon+0x170>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e00c      	b.n	8009450 <tcp_abandon+0xb8>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d104      	bne.n	800944a <tcp_abandon+0xb2>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	60da      	str	r2, [r3, #12]
 8009448:	e005      	b.n	8009456 <tcp_abandon+0xbe>
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1ef      	bne.n	8009436 <tcp_abandon+0x9e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	60da      	str	r2, [r3, #12]
 800945c:	e00b      	b.n	8009476 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8adb      	ldrh	r3, [r3, #22]
 8009466:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4828      	ldr	r0, [pc, #160]	@ (800950c <tcp_abandon+0x174>)
 800946c:	f000 ff7c 	bl	800a368 <tcp_pcb_remove>
 8009470:	4b27      	ldr	r3, [pc, #156]	@ (8009510 <tcp_abandon+0x178>)
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fd1e 	bl	8009ec4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fd15 	bl	8009ec4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fd0c 	bl	8009ec4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	8b12      	ldrh	r2, [r2, #24]
 80094bc:	9202      	str	r2, [sp, #8]
 80094be:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80094c0:	9201      	str	r2, [sp, #4]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	460b      	mov	r3, r1
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	69b9      	ldr	r1, [r7, #24]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f004 fcbe 	bl	800de4c <tcp_rst>
    }
    last_state = pcb->state;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	7d1b      	ldrb	r3, [r3, #20]
 80094d4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fd34 	bl	8008f44 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <tcp_abandon+0x154>
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f06f 010c 	mvn.w	r1, #12
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	4798      	blx	r3
  }
}
 80094ec:	3728      	adds	r7, #40	@ 0x28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	08012c88 	.word	0x08012c88
 80094f8:	08012dcc 	.word	0x08012dcc
 80094fc:	08012ccc 	.word	0x08012ccc
 8009500:	08012de8 	.word	0x08012de8
 8009504:	2000bd9c 	.word	0x2000bd9c
 8009508:	2000bd90 	.word	0x2000bd90
 800950c:	2000bd98 	.word	0x2000bd98
 8009510:	2000bda0 	.word	0x2000bda0

08009514 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800951c:	2101      	movs	r1, #1
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff ff3a 	bl	8009398 <tcp_abandon>
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <tcp_update_rcv_ann_wnd+0x1c>
 800953a:	4b25      	ldr	r3, [pc, #148]	@ (80095d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800953c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009540:	4924      	ldr	r1, [pc, #144]	@ (80095d4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009542:	4825      	ldr	r0, [pc, #148]	@ (80095d8 <tcp_update_rcv_ann_wnd+0xac>)
 8009544:	f007 fe54 	bl	80111f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009550:	4413      	add	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800955c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009560:	bf28      	it	cs
 8009562:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8009566:	b292      	uxth	r2, r2
 8009568:	4413      	add	r3, r2
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	db08      	blt.n	8009584 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	e020      	b.n	80095c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd03      	ble.n	800959a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009598:	e014      	b.n	80095c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ac:	d306      	bcc.n	80095bc <tcp_update_rcv_ann_wnd+0x90>
 80095ae:	4b08      	ldr	r3, [pc, #32]	@ (80095d0 <tcp_update_rcv_ann_wnd+0xa4>)
 80095b0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80095b4:	4909      	ldr	r1, [pc, #36]	@ (80095dc <tcp_update_rcv_ann_wnd+0xb0>)
 80095b6:	4808      	ldr	r0, [pc, #32]	@ (80095d8 <tcp_update_rcv_ann_wnd+0xac>)
 80095b8:	f007 fe1a 	bl	80111f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80095c4:	2300      	movs	r3, #0
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	08012c88 	.word	0x08012c88
 80095d4:	08012ee4 	.word	0x08012ee4
 80095d8:	08012ccc 	.word	0x08012ccc
 80095dc:	08012f08 	.word	0x08012f08

080095e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d107      	bne.n	8009602 <tcp_recved+0x22>
 80095f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009670 <tcp_recved+0x90>)
 80095f4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80095f8:	491e      	ldr	r1, [pc, #120]	@ (8009674 <tcp_recved+0x94>)
 80095fa:	481f      	ldr	r0, [pc, #124]	@ (8009678 <tcp_recved+0x98>)
 80095fc:	f007 fdf8 	bl	80111f0 <iprintf>
 8009600:	e032      	b.n	8009668 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d106      	bne.n	8009618 <tcp_recved+0x38>
 800960a:	4b19      	ldr	r3, [pc, #100]	@ (8009670 <tcp_recved+0x90>)
 800960c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009610:	491a      	ldr	r1, [pc, #104]	@ (800967c <tcp_recved+0x9c>)
 8009612:	4819      	ldr	r0, [pc, #100]	@ (8009678 <tcp_recved+0x98>)
 8009614:	f007 fdec 	bl	80111f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800961c:	887b      	ldrh	r3, [r7, #2]
 800961e:	4413      	add	r3, r2
 8009620:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009622:	89fb      	ldrh	r3, [r7, #14]
 8009624:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009628:	d804      	bhi.n	8009634 <tcp_recved+0x54>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800962e:	89fa      	ldrh	r2, [r7, #14]
 8009630:	429a      	cmp	r2, r3
 8009632:	d204      	bcs.n	800963e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800963a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800963c:	e002      	b.n	8009644 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	89fa      	ldrh	r2, [r7, #14]
 8009642:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff ff71 	bl	800952c <tcp_update_rcv_ann_wnd>
 800964a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009652:	d309      	bcc.n	8009668 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	8b5b      	ldrh	r3, [r3, #26]
 8009658:	f043 0302 	orr.w	r3, r3, #2
 800965c:	b29a      	uxth	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 fe3e 	bl	800d2e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	08012c88 	.word	0x08012c88
 8009674:	08012f24 	.word	0x08012f24
 8009678:	08012ccc 	.word	0x08012ccc
 800967c:	08012f3c 	.word	0x08012f3c

08009680 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009680:	b5b0      	push	{r4, r5, r7, lr}
 8009682:	b090      	sub	sp, #64	@ 0x40
 8009684:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800968c:	4b95      	ldr	r3, [pc, #596]	@ (80098e4 <tcp_slowtmr+0x264>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a94      	ldr	r2, [pc, #592]	@ (80098e4 <tcp_slowtmr+0x264>)
 8009694:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009696:	4b94      	ldr	r3, [pc, #592]	@ (80098e8 <tcp_slowtmr+0x268>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	b2da      	uxtb	r2, r3
 800969e:	4b92      	ldr	r3, [pc, #584]	@ (80098e8 <tcp_slowtmr+0x268>)
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e000      	b.n	80096a6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80096a4:	bf00      	nop
  prev = NULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80096aa:	4b90      	ldr	r3, [pc, #576]	@ (80098ec <tcp_slowtmr+0x26c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80096b0:	e29d      	b.n	8009bee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	7d1b      	ldrb	r3, [r3, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <tcp_slowtmr+0x48>
 80096ba:	4b8d      	ldr	r3, [pc, #564]	@ (80098f0 <tcp_slowtmr+0x270>)
 80096bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80096c0:	498c      	ldr	r1, [pc, #560]	@ (80098f4 <tcp_slowtmr+0x274>)
 80096c2:	488d      	ldr	r0, [pc, #564]	@ (80098f8 <tcp_slowtmr+0x278>)
 80096c4:	f007 fd94 	bl	80111f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80096c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ca:	7d1b      	ldrb	r3, [r3, #20]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d106      	bne.n	80096de <tcp_slowtmr+0x5e>
 80096d0:	4b87      	ldr	r3, [pc, #540]	@ (80098f0 <tcp_slowtmr+0x270>)
 80096d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80096d6:	4989      	ldr	r1, [pc, #548]	@ (80098fc <tcp_slowtmr+0x27c>)
 80096d8:	4887      	ldr	r0, [pc, #540]	@ (80098f8 <tcp_slowtmr+0x278>)
 80096da:	f007 fd89 	bl	80111f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	7d1b      	ldrb	r3, [r3, #20]
 80096e2:	2b0a      	cmp	r3, #10
 80096e4:	d106      	bne.n	80096f4 <tcp_slowtmr+0x74>
 80096e6:	4b82      	ldr	r3, [pc, #520]	@ (80098f0 <tcp_slowtmr+0x270>)
 80096e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80096ec:	4984      	ldr	r1, [pc, #528]	@ (8009900 <tcp_slowtmr+0x280>)
 80096ee:	4882      	ldr	r0, [pc, #520]	@ (80098f8 <tcp_slowtmr+0x278>)
 80096f0:	f007 fd7e 	bl	80111f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	7f9a      	ldrb	r2, [r3, #30]
 80096f8:	4b7b      	ldr	r3, [pc, #492]	@ (80098e8 <tcp_slowtmr+0x268>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d105      	bne.n	800970c <tcp_slowtmr+0x8c>
      prev = pcb;
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800970a:	e270      	b.n	8009bee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800970c:	4b76      	ldr	r3, [pc, #472]	@ (80098e8 <tcp_slowtmr+0x268>)
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009712:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	7d1b      	ldrb	r3, [r3, #20]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d10a      	bne.n	800973e <tcp_slowtmr+0xbe>
 8009728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800972e:	2b05      	cmp	r3, #5
 8009730:	d905      	bls.n	800973e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009736:	3301      	adds	r3, #1
 8009738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800973c:	e11e      	b.n	800997c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009744:	2b0b      	cmp	r3, #11
 8009746:	d905      	bls.n	8009754 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800974c:	3301      	adds	r3, #1
 800974e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009752:	e113      	b.n	800997c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009756:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800975a:	2b00      	cmp	r3, #0
 800975c:	d075      	beq.n	800984a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800975e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009762:	2b00      	cmp	r3, #0
 8009764:	d006      	beq.n	8009774 <tcp_slowtmr+0xf4>
 8009766:	4b62      	ldr	r3, [pc, #392]	@ (80098f0 <tcp_slowtmr+0x270>)
 8009768:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800976c:	4965      	ldr	r1, [pc, #404]	@ (8009904 <tcp_slowtmr+0x284>)
 800976e:	4862      	ldr	r0, [pc, #392]	@ (80098f8 <tcp_slowtmr+0x278>)
 8009770:	f007 fd3e 	bl	80111f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d106      	bne.n	800978a <tcp_slowtmr+0x10a>
 800977c:	4b5c      	ldr	r3, [pc, #368]	@ (80098f0 <tcp_slowtmr+0x270>)
 800977e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009782:	4961      	ldr	r1, [pc, #388]	@ (8009908 <tcp_slowtmr+0x288>)
 8009784:	485c      	ldr	r0, [pc, #368]	@ (80098f8 <tcp_slowtmr+0x278>)
 8009786:	f007 fd33 	bl	80111f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009790:	2b0b      	cmp	r3, #11
 8009792:	d905      	bls.n	80097a0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009798:	3301      	adds	r3, #1
 800979a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800979e:	e0ed      	b.n	800997c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80097a6:	3b01      	subs	r3, #1
 80097a8:	4a58      	ldr	r2, [pc, #352]	@ (800990c <tcp_slowtmr+0x28c>)
 80097aa:	5cd3      	ldrb	r3, [r2, r3]
 80097ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80097ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80097b4:	7c7a      	ldrb	r2, [r7, #17]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d907      	bls.n	80097ca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80097c0:	3301      	adds	r3, #1
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80097ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80097d0:	7c7a      	ldrb	r2, [r7, #17]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	f200 80d2 	bhi.w	800997c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80097d8:	2301      	movs	r3, #1
 80097da:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d108      	bne.n	80097f8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80097e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097e8:	f004 fc24 	bl	800e034 <tcp_zero_window_probe>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d014      	beq.n	800981c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80097f2:	2300      	movs	r3, #0
 80097f4:	623b      	str	r3, [r7, #32]
 80097f6:	e011      	b.n	800981c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097fe:	4619      	mov	r1, r3
 8009800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009802:	f003 fae9 	bl	800cdd8 <tcp_split_unsent_seg>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d107      	bne.n	800981c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800980c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800980e:	f003 fd69 	bl	800d2e4 <tcp_output>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 80ac 	beq.w	800997c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009832:	2b06      	cmp	r3, #6
 8009834:	f200 80a2 	bhi.w	800997c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800983e:	3301      	adds	r3, #1
 8009840:	b2da      	uxtb	r2, r3
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009848:	e098      	b.n	800997c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800984a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009850:	2b00      	cmp	r3, #0
 8009852:	db0f      	blt.n	8009874 <tcp_slowtmr+0x1f4>
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800985a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800985e:	4293      	cmp	r3, r2
 8009860:	d008      	beq.n	8009874 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009868:	b29b      	uxth	r3, r3
 800986a:	3301      	adds	r3, #1
 800986c:	b29b      	uxth	r3, r3
 800986e:	b21a      	sxth	r2, r3
 8009870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009872:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009876:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800987a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009880:	429a      	cmp	r2, r3
 8009882:	db7b      	blt.n	800997c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009884:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009886:	f004 f821 	bl	800d8cc <tcp_rexmit_rto_prepare>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <tcp_slowtmr+0x220>
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009894:	2b00      	cmp	r3, #0
 8009896:	d171      	bne.n	800997c <tcp_slowtmr+0x2fc>
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d06d      	beq.n	800997c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80098a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a2:	7d1b      	ldrb	r3, [r3, #20]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d03a      	beq.n	800991e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80098a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098ae:	2b0c      	cmp	r3, #12
 80098b0:	bf28      	it	cs
 80098b2:	230c      	movcs	r3, #12
 80098b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80098bc:	10db      	asrs	r3, r3, #3
 80098be:	b21b      	sxth	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80098c8:	4413      	add	r3, r2
 80098ca:	7efa      	ldrb	r2, [r7, #27]
 80098cc:	4910      	ldr	r1, [pc, #64]	@ (8009910 <tcp_slowtmr+0x290>)
 80098ce:	5c8a      	ldrb	r2, [r1, r2]
 80098d0:	4093      	lsls	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80098da:	4293      	cmp	r3, r2
 80098dc:	dc1a      	bgt.n	8009914 <tcp_slowtmr+0x294>
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	b21a      	sxth	r2, r3
 80098e2:	e019      	b.n	8009918 <tcp_slowtmr+0x298>
 80098e4:	2000bd8c 	.word	0x2000bd8c
 80098e8:	2000bda2 	.word	0x2000bda2
 80098ec:	2000bd98 	.word	0x2000bd98
 80098f0:	08012c88 	.word	0x08012c88
 80098f4:	08012fcc 	.word	0x08012fcc
 80098f8:	08012ccc 	.word	0x08012ccc
 80098fc:	08012ff8 	.word	0x08012ff8
 8009900:	08013024 	.word	0x08013024
 8009904:	08013054 	.word	0x08013054
 8009908:	08013088 	.word	0x08013088
 800990c:	08014c98 	.word	0x08014c98
 8009910:	08014c88 	.word	0x08014c88
 8009914:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009920:	2200      	movs	r2, #0
 8009922:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009926:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800992a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009930:	4293      	cmp	r3, r2
 8009932:	bf28      	it	cs
 8009934:	4613      	movcs	r3, r2
 8009936:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009938:	8a7b      	ldrh	r3, [r7, #18]
 800993a:	085b      	lsrs	r3, r3, #1
 800993c:	b29a      	uxth	r2, r3
 800993e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009940:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009946:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800994a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800994c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	429a      	cmp	r2, r3
 8009954:	d206      	bcs.n	8009964 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009960:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800996e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009970:	2200      	movs	r2, #0
 8009972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009978:	f004 f818 	bl	800d9ac <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800997c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800997e:	7d1b      	ldrb	r3, [r3, #20]
 8009980:	2b06      	cmp	r3, #6
 8009982:	d111      	bne.n	80099a8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009986:	8b5b      	ldrh	r3, [r3, #26]
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009990:	4b9c      	ldr	r3, [pc, #624]	@ (8009c04 <tcp_slowtmr+0x584>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b28      	cmp	r3, #40	@ 0x28
 800999c:	d904      	bls.n	80099a8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800999e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099a2:	3301      	adds	r3, #1
 80099a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099aa:	7a5b      	ldrb	r3, [r3, #9]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d04a      	beq.n	8009a4a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80099b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80099b8:	2b04      	cmp	r3, #4
 80099ba:	d003      	beq.n	80099c4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80099c0:	2b07      	cmp	r3, #7
 80099c2:	d142      	bne.n	8009a4a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099c4:	4b8f      	ldr	r3, [pc, #572]	@ (8009c04 <tcp_slowtmr+0x584>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80099ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80099d4:	4b8c      	ldr	r3, [pc, #560]	@ (8009c08 <tcp_slowtmr+0x588>)
 80099d6:	440b      	add	r3, r1
 80099d8:	498c      	ldr	r1, [pc, #560]	@ (8009c0c <tcp_slowtmr+0x58c>)
 80099da:	fba1 1303 	umull	r1, r3, r1, r3
 80099de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d90a      	bls.n	80099fa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099e8:	3301      	adds	r3, #1
 80099ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80099ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099f2:	3301      	adds	r3, #1
 80099f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80099f8:	e027      	b.n	8009a4a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099fa:	4b82      	ldr	r3, [pc, #520]	@ (8009c04 <tcp_slowtmr+0x584>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a10:	4618      	mov	r0, r3
 8009a12:	4b7f      	ldr	r3, [pc, #508]	@ (8009c10 <tcp_slowtmr+0x590>)
 8009a14:	fb00 f303 	mul.w	r3, r0, r3
 8009a18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009a1a:	497c      	ldr	r1, [pc, #496]	@ (8009c0c <tcp_slowtmr+0x58c>)
 8009a1c:	fba1 1303 	umull	r1, r3, r1, r3
 8009a20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d911      	bls.n	8009a4a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009a26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a28:	f004 fac4 	bl	800dfb4 <tcp_keepalive>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009a32:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a40:	3301      	adds	r3, #1
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d011      	beq.n	8009a76 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009a52:	4b6c      	ldr	r3, [pc, #432]	@ (8009c04 <tcp_slowtmr+0x584>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009a62:	4619      	mov	r1, r3
 8009a64:	460b      	mov	r3, r1
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	440b      	add	r3, r1
 8009a6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009a70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a72:	f000 fddd 	bl	800a630 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a78:	7d1b      	ldrb	r3, [r3, #20]
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d10b      	bne.n	8009a96 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a7e:	4b61      	ldr	r3, [pc, #388]	@ (8009c04 <tcp_slowtmr+0x584>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b28      	cmp	r3, #40	@ 0x28
 8009a8a:	d904      	bls.n	8009a96 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a90:	3301      	adds	r3, #1
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	7d1b      	ldrb	r3, [r3, #20]
 8009a9a:	2b09      	cmp	r3, #9
 8009a9c:	d10b      	bne.n	8009ab6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009a9e:	4b59      	ldr	r3, [pc, #356]	@ (8009c04 <tcp_slowtmr+0x584>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2bf0      	cmp	r3, #240	@ 0xf0
 8009aaa:	d904      	bls.n	8009ab6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d060      	beq.n	8009b80 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8009abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009ac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ac8:	f000 fbfe 	bl	800a2c8 <tcp_pcb_purge>
      if (prev != NULL) {
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d010      	beq.n	8009af4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009ad2:	4b50      	ldr	r3, [pc, #320]	@ (8009c14 <tcp_slowtmr+0x594>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d106      	bne.n	8009aea <tcp_slowtmr+0x46a>
 8009adc:	4b4e      	ldr	r3, [pc, #312]	@ (8009c18 <tcp_slowtmr+0x598>)
 8009ade:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009ae2:	494e      	ldr	r1, [pc, #312]	@ (8009c1c <tcp_slowtmr+0x59c>)
 8009ae4:	484e      	ldr	r0, [pc, #312]	@ (8009c20 <tcp_slowtmr+0x5a0>)
 8009ae6:	f007 fb83 	bl	80111f0 <iprintf>
        prev->next = pcb->next;
 8009aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	e00f      	b.n	8009b14 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009af4:	4b47      	ldr	r3, [pc, #284]	@ (8009c14 <tcp_slowtmr+0x594>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d006      	beq.n	8009b0c <tcp_slowtmr+0x48c>
 8009afe:	4b46      	ldr	r3, [pc, #280]	@ (8009c18 <tcp_slowtmr+0x598>)
 8009b00:	f240 5271 	movw	r2, #1393	@ 0x571
 8009b04:	4947      	ldr	r1, [pc, #284]	@ (8009c24 <tcp_slowtmr+0x5a4>)
 8009b06:	4846      	ldr	r0, [pc, #280]	@ (8009c20 <tcp_slowtmr+0x5a0>)
 8009b08:	f007 fb72 	bl	80111f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	4a40      	ldr	r2, [pc, #256]	@ (8009c14 <tcp_slowtmr+0x594>)
 8009b12:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009b14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d013      	beq.n	8009b44 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b22:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009b24:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	3304      	adds	r3, #4
 8009b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b2c:	8ad2      	ldrh	r2, [r2, #22]
 8009b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b30:	8b09      	ldrh	r1, [r1, #24]
 8009b32:	9102      	str	r1, [sp, #8]
 8009b34:	9201      	str	r2, [sp, #4]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	462b      	mov	r3, r5
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4601      	mov	r1, r0
 8009b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b40:	f004 f984 	bl	800de4c <tcp_rst>
      err_arg = pcb->callback_arg;
 8009b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4c:	7d1b      	ldrb	r3, [r3, #20]
 8009b4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009b5a:	6838      	ldr	r0, [r7, #0]
 8009b5c:	f7ff f9f2 	bl	8008f44 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009b60:	4b31      	ldr	r3, [pc, #196]	@ (8009c28 <tcp_slowtmr+0x5a8>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d004      	beq.n	8009b76 <tcp_slowtmr+0x4f6>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f06f 010c 	mvn.w	r1, #12
 8009b72:	68b8      	ldr	r0, [r7, #8]
 8009b74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009b76:	4b2c      	ldr	r3, [pc, #176]	@ (8009c28 <tcp_slowtmr+0x5a8>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d037      	beq.n	8009bee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009b7e:	e592      	b.n	80096a6 <tcp_slowtmr+0x26>
      prev = pcb;
 8009b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	7f1b      	ldrb	r3, [r3, #28]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	7f1a      	ldrb	r2, [r3, #28]
 8009b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9c:	7f5b      	ldrb	r3, [r3, #29]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d325      	bcc.n	8009bee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c28 <tcp_slowtmr+0x5a8>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00b      	beq.n	8009bd0 <tcp_slowtmr+0x550>
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bc0:	6912      	ldr	r2, [r2, #16]
 8009bc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009bce:	e002      	b.n	8009bd6 <tcp_slowtmr+0x556>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009bd6:	4b14      	ldr	r3, [pc, #80]	@ (8009c28 <tcp_slowtmr+0x5a8>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f47f ad62 	bne.w	80096a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009be0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bea:	f003 fb7b 	bl	800d2e4 <tcp_output>
  while (pcb != NULL) {
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f47f ad5e 	bne.w	80096b2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8009c2c <tcp_slowtmr+0x5ac>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009c00:	e069      	b.n	8009cd6 <tcp_slowtmr+0x656>
 8009c02:	bf00      	nop
 8009c04:	2000bd8c 	.word	0x2000bd8c
 8009c08:	000a4cb8 	.word	0x000a4cb8
 8009c0c:	10624dd3 	.word	0x10624dd3
 8009c10:	000124f8 	.word	0x000124f8
 8009c14:	2000bd98 	.word	0x2000bd98
 8009c18:	08012c88 	.word	0x08012c88
 8009c1c:	080130c0 	.word	0x080130c0
 8009c20:	08012ccc 	.word	0x08012ccc
 8009c24:	080130ec 	.word	0x080130ec
 8009c28:	2000bda0 	.word	0x2000bda0
 8009c2c:	2000bd9c 	.word	0x2000bd9c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c32:	7d1b      	ldrb	r3, [r3, #20]
 8009c34:	2b0a      	cmp	r3, #10
 8009c36:	d006      	beq.n	8009c46 <tcp_slowtmr+0x5c6>
 8009c38:	4b2b      	ldr	r3, [pc, #172]	@ (8009ce8 <tcp_slowtmr+0x668>)
 8009c3a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009c3e:	492b      	ldr	r1, [pc, #172]	@ (8009cec <tcp_slowtmr+0x66c>)
 8009c40:	482b      	ldr	r0, [pc, #172]	@ (8009cf0 <tcp_slowtmr+0x670>)
 8009c42:	f007 fad5 	bl	80111f0 <iprintf>
    pcb_remove = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009c4c:	4b29      	ldr	r3, [pc, #164]	@ (8009cf4 <tcp_slowtmr+0x674>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2bf0      	cmp	r3, #240	@ 0xf0
 8009c58:	d904      	bls.n	8009c64 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c5e:	3301      	adds	r3, #1
 8009c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d02f      	beq.n	8009ccc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c6e:	f000 fb2b 	bl	800a2c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d010      	beq.n	8009c9a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009c78:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf8 <tcp_slowtmr+0x678>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d106      	bne.n	8009c90 <tcp_slowtmr+0x610>
 8009c82:	4b19      	ldr	r3, [pc, #100]	@ (8009ce8 <tcp_slowtmr+0x668>)
 8009c84:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009c88:	491c      	ldr	r1, [pc, #112]	@ (8009cfc <tcp_slowtmr+0x67c>)
 8009c8a:	4819      	ldr	r0, [pc, #100]	@ (8009cf0 <tcp_slowtmr+0x670>)
 8009c8c:	f007 fab0 	bl	80111f0 <iprintf>
        prev->next = pcb->next;
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c96:	60da      	str	r2, [r3, #12]
 8009c98:	e00f      	b.n	8009cba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009c9a:	4b17      	ldr	r3, [pc, #92]	@ (8009cf8 <tcp_slowtmr+0x678>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d006      	beq.n	8009cb2 <tcp_slowtmr+0x632>
 8009ca4:	4b10      	ldr	r3, [pc, #64]	@ (8009ce8 <tcp_slowtmr+0x668>)
 8009ca6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009caa:	4915      	ldr	r1, [pc, #84]	@ (8009d00 <tcp_slowtmr+0x680>)
 8009cac:	4810      	ldr	r0, [pc, #64]	@ (8009cf0 <tcp_slowtmr+0x670>)
 8009cae:	f007 fa9f 	bl	80111f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	4a10      	ldr	r2, [pc, #64]	@ (8009cf8 <tcp_slowtmr+0x678>)
 8009cb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009cc4:	69f8      	ldr	r0, [r7, #28]
 8009cc6:	f7ff f93d 	bl	8008f44 <tcp_free>
 8009cca:	e004      	b.n	8009cd6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1a9      	bne.n	8009c30 <tcp_slowtmr+0x5b0>
    }
  }
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	3730      	adds	r7, #48	@ 0x30
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	08012c88 	.word	0x08012c88
 8009cec:	08013118 	.word	0x08013118
 8009cf0:	08012ccc 	.word	0x08012ccc
 8009cf4:	2000bd8c 	.word	0x2000bd8c
 8009cf8:	2000bd9c 	.word	0x2000bd9c
 8009cfc:	08013148 	.word	0x08013148
 8009d00:	08013170 	.word	0x08013170

08009d04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8009dc0 <tcp_fasttmr+0xbc>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc0 <tcp_fasttmr+0xbc>)
 8009d14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009d16:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc4 <tcp_fasttmr+0xc0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d1c:	e048      	b.n	8009db0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7f9a      	ldrb	r2, [r3, #30]
 8009d22:	4b27      	ldr	r3, [pc, #156]	@ (8009dc0 <tcp_fasttmr+0xbc>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d03f      	beq.n	8009daa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009d2a:	4b25      	ldr	r3, [pc, #148]	@ (8009dc0 <tcp_fasttmr+0xbc>)
 8009d2c:	781a      	ldrb	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	8b5b      	ldrh	r3, [r3, #26]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d010      	beq.n	8009d60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	8b5b      	ldrh	r3, [r3, #26]
 8009d42:	f043 0302 	orr.w	r3, r3, #2
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f003 fac9 	bl	800d2e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	8b5b      	ldrh	r3, [r3, #26]
 8009d56:	f023 0303 	bic.w	r3, r3, #3
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	8b5b      	ldrh	r3, [r3, #26]
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d009      	beq.n	8009d80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8b5b      	ldrh	r3, [r3, #26]
 8009d70:	f023 0308 	bic.w	r3, r3, #8
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fa76 	bl	800926c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009dc8 <tcp_fasttmr+0xc4>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f819 	bl	8009dcc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc8 <tcp_fasttmr+0xc4>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d000      	beq.n	8009da4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009da2:	e7b8      	b.n	8009d16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	e002      	b.n	8009db0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1b3      	bne.n	8009d1e <tcp_fasttmr+0x1a>
    }
  }
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	2000bda2 	.word	0x2000bda2
 8009dc4:	2000bd98 	.word	0x2000bd98
 8009dc8:	2000bda0 	.word	0x2000bda0

08009dcc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009dcc:	b590      	push	{r4, r7, lr}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <tcp_process_refused_data+0x22>
 8009dda:	4b37      	ldr	r3, [pc, #220]	@ (8009eb8 <tcp_process_refused_data+0xec>)
 8009ddc:	f240 6209 	movw	r2, #1545	@ 0x609
 8009de0:	4936      	ldr	r1, [pc, #216]	@ (8009ebc <tcp_process_refused_data+0xf0>)
 8009de2:	4837      	ldr	r0, [pc, #220]	@ (8009ec0 <tcp_process_refused_data+0xf4>)
 8009de4:	f007 fa04 	bl	80111f0 <iprintf>
 8009de8:	f06f 030f 	mvn.w	r3, #15
 8009dec:	e060      	b.n	8009eb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df2:	7b5b      	ldrb	r3, [r3, #13]
 8009df4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dfa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00b      	beq.n	8009e24 <tcp_process_refused_data+0x58>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6918      	ldr	r0, [r3, #16]
 8009e16:	2300      	movs	r3, #0
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	47a0      	blx	r4
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]
 8009e22:	e007      	b.n	8009e34 <tcp_process_refused_data+0x68>
 8009e24:	2300      	movs	r3, #0
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	f000 f8a4 	bl	8009f78 <tcp_recv_null>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d12a      	bne.n	8009e92 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d033      	beq.n	8009eae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e4a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009e4e:	d005      	beq.n	8009e5c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e54:	3301      	adds	r3, #1
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <tcp_process_refused_data+0xb2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6918      	ldr	r0, [r3, #16]
 8009e70:	2300      	movs	r3, #0
 8009e72:	2200      	movs	r2, #0
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	47a0      	blx	r4
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73fb      	strb	r3, [r7, #15]
 8009e7c:	e001      	b.n	8009e82 <tcp_process_refused_data+0xb6>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e86:	f113 0f0d 	cmn.w	r3, #13
 8009e8a:	d110      	bne.n	8009eae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009e8c:	f06f 030c 	mvn.w	r3, #12
 8009e90:	e00e      	b.n	8009eb0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e96:	f113 0f0d 	cmn.w	r3, #13
 8009e9a:	d102      	bne.n	8009ea2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009e9c:	f06f 030c 	mvn.w	r3, #12
 8009ea0:	e006      	b.n	8009eb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009ea8:	f06f 0304 	mvn.w	r3, #4
 8009eac:	e000      	b.n	8009eb0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}
 8009eb8:	08012c88 	.word	0x08012c88
 8009ebc:	08013198 	.word	0x08013198
 8009ec0:	08012ccc 	.word	0x08012ccc

08009ec4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009ecc:	e007      	b.n	8009ede <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f80a 	bl	8009eee <tcp_seg_free>
    seg = next;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1f4      	bne.n	8009ece <tcp_segs_free+0xa>
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00c      	beq.n	8009f16 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fd6f 	bl	80089ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	2003      	movs	r0, #3
 8009f12:	f7fd fec7 	bl	8007ca4 <memp_free>
  }
}
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d106      	bne.n	8009f3c <tcp_seg_copy+0x1c>
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f6c <tcp_seg_copy+0x4c>)
 8009f30:	f240 6282 	movw	r2, #1666	@ 0x682
 8009f34:	490e      	ldr	r1, [pc, #56]	@ (8009f70 <tcp_seg_copy+0x50>)
 8009f36:	480f      	ldr	r0, [pc, #60]	@ (8009f74 <tcp_seg_copy+0x54>)
 8009f38:	f007 f95a 	bl	80111f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009f3c:	2003      	movs	r0, #3
 8009f3e:	f7fd fe3b 	bl	8007bb8 <memp_malloc>
 8009f42:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <tcp_seg_copy+0x2e>
    return NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e00a      	b.n	8009f64 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009f4e:	2210      	movs	r2, #16
 8009f50:	6879      	ldr	r1, [r7, #4]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f007 fa27 	bl	80113a6 <memcpy>
  pbuf_ref(cseg->p);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fdeb 	bl	8008b38 <pbuf_ref>
  return cseg;
 8009f62:	68fb      	ldr	r3, [r7, #12]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	08012c88 	.word	0x08012c88
 8009f70:	080131dc 	.word	0x080131dc
 8009f74:	08012ccc 	.word	0x08012ccc

08009f78 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d109      	bne.n	8009fa0 <tcp_recv_null+0x28>
 8009f8c:	4b12      	ldr	r3, [pc, #72]	@ (8009fd8 <tcp_recv_null+0x60>)
 8009f8e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009f92:	4912      	ldr	r1, [pc, #72]	@ (8009fdc <tcp_recv_null+0x64>)
 8009f94:	4812      	ldr	r0, [pc, #72]	@ (8009fe0 <tcp_recv_null+0x68>)
 8009f96:	f007 f92b 	bl	80111f0 <iprintf>
 8009f9a:	f06f 030f 	mvn.w	r3, #15
 8009f9e:	e016      	b.n	8009fce <tcp_recv_null+0x56>

  if (p != NULL) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	891b      	ldrh	r3, [r3, #8]
 8009faa:	4619      	mov	r1, r3
 8009fac:	68b8      	ldr	r0, [r7, #8]
 8009fae:	f7ff fb17 	bl	80095e0 <tcp_recved>
    pbuf_free(p);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7fe fd1a 	bl	80089ec <pbuf_free>
 8009fb8:	e008      	b.n	8009fcc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009fc2:	68b8      	ldr	r0, [r7, #8]
 8009fc4:	f7ff f9bc 	bl	8009340 <tcp_close>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	e000      	b.n	8009fce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08012c88 	.word	0x08012c88
 8009fdc:	080131f8 	.word	0x080131f8
 8009fe0:	08012ccc 	.word	0x08012ccc

08009fe4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	db01      	blt.n	8009ffa <tcp_kill_prio+0x16>
 8009ff6:	79fb      	ldrb	r3, [r7, #7]
 8009ff8:	e000      	b.n	8009ffc <tcp_kill_prio+0x18>
 8009ffa:	237f      	movs	r3, #127	@ 0x7f
 8009ffc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009ffe:	7afb      	ldrb	r3, [r7, #11]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d034      	beq.n	800a06e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	3b01      	subs	r3, #1
 800a008:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a012:	4b19      	ldr	r3, [pc, #100]	@ (800a078 <tcp_kill_prio+0x94>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e01f      	b.n	800a05a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	7d5b      	ldrb	r3, [r3, #21]
 800a01e:	7afa      	ldrb	r2, [r7, #11]
 800a020:	429a      	cmp	r2, r3
 800a022:	d80c      	bhi.n	800a03e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a028:	7afa      	ldrb	r2, [r7, #11]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d112      	bne.n	800a054 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a02e:	4b13      	ldr	r3, [pc, #76]	@ (800a07c <tcp_kill_prio+0x98>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d80a      	bhi.n	800a054 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a03e:	4b0f      	ldr	r3, [pc, #60]	@ (800a07c <tcp_kill_prio+0x98>)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	7d5b      	ldrb	r3, [r3, #21]
 800a052:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	617b      	str	r3, [r7, #20]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1dc      	bne.n	800a01a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a066:	6938      	ldr	r0, [r7, #16]
 800a068:	f7ff fa54 	bl	8009514 <tcp_abort>
 800a06c:	e000      	b.n	800a070 <tcp_kill_prio+0x8c>
    return;
 800a06e:	bf00      	nop
  }
}
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000bd98 	.word	0x2000bd98
 800a07c:	2000bd8c 	.word	0x2000bd8c

0800a080 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d009      	beq.n	800a0a4 <tcp_kill_state+0x24>
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	2b09      	cmp	r3, #9
 800a094:	d006      	beq.n	800a0a4 <tcp_kill_state+0x24>
 800a096:	4b1a      	ldr	r3, [pc, #104]	@ (800a100 <tcp_kill_state+0x80>)
 800a098:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a09c:	4919      	ldr	r1, [pc, #100]	@ (800a104 <tcp_kill_state+0x84>)
 800a09e:	481a      	ldr	r0, [pc, #104]	@ (800a108 <tcp_kill_state+0x88>)
 800a0a0:	f007 f8a6 	bl	80111f0 <iprintf>

  inactivity = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0ac:	4b17      	ldr	r3, [pc, #92]	@ (800a10c <tcp_kill_state+0x8c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e017      	b.n	800a0e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	7d1b      	ldrb	r3, [r3, #20]
 800a0b8:	79fa      	ldrb	r2, [r7, #7]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d10f      	bne.n	800a0de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a0be:	4b14      	ldr	r3, [pc, #80]	@ (800a110 <tcp_kill_state+0x90>)
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d807      	bhi.n	800a0de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a0ce:	4b10      	ldr	r3, [pc, #64]	@ (800a110 <tcp_kill_state+0x90>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	617b      	str	r3, [r7, #20]
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e4      	bne.n	800a0b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	6938      	ldr	r0, [r7, #16]
 800a0f4:	f7ff f950 	bl	8009398 <tcp_abandon>
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08012c88 	.word	0x08012c88
 800a104:	08013214 	.word	0x08013214
 800a108:	08012ccc 	.word	0x08012ccc
 800a10c:	2000bd98 	.word	0x2000bd98
 800a110:	2000bd8c 	.word	0x2000bd8c

0800a114 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a122:	4b12      	ldr	r3, [pc, #72]	@ (800a16c <tcp_kill_timewait+0x58>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e012      	b.n	800a150 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a12a:	4b11      	ldr	r3, [pc, #68]	@ (800a170 <tcp_kill_timewait+0x5c>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	429a      	cmp	r2, r3
 800a138:	d807      	bhi.n	800a14a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a13a:	4b0d      	ldr	r3, [pc, #52]	@ (800a170 <tcp_kill_timewait+0x5c>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e9      	bne.n	800a12a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a15c:	68b8      	ldr	r0, [r7, #8]
 800a15e:	f7ff f9d9 	bl	8009514 <tcp_abort>
  }
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	2000bd9c 	.word	0x2000bd9c
 800a170:	2000bd8c 	.word	0x2000bd8c

0800a174 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a17a:	4b10      	ldr	r3, [pc, #64]	@ (800a1bc <tcp_handle_closepend+0x48>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a180:	e014      	b.n	800a1ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8b5b      	ldrh	r3, [r3, #26]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b00      	cmp	r3, #0
 800a192:	d009      	beq.n	800a1a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	8b5b      	ldrh	r3, [r3, #26]
 800a198:	f023 0308 	bic.w	r3, r3, #8
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff f862 	bl	800926c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e7      	bne.n	800a182 <tcp_handle_closepend+0xe>
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	2000bd98 	.word	0x2000bd98

0800a1c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	f7fd fcf4 	bl	8007bb8 <memp_malloc>
 800a1d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d126      	bne.n	800a226 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a1d8:	f7ff ffcc 	bl	800a174 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a1dc:	f7ff ff9a 	bl	800a114 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	f7fd fce9 	bl	8007bb8 <memp_malloc>
 800a1e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d11b      	bne.n	800a226 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a1ee:	2009      	movs	r0, #9
 800a1f0:	f7ff ff46 	bl	800a080 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	f7fd fcdf 	bl	8007bb8 <memp_malloc>
 800a1fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d111      	bne.n	800a226 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a202:	2008      	movs	r0, #8
 800a204:	f7ff ff3c 	bl	800a080 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a208:	2001      	movs	r0, #1
 800a20a:	f7fd fcd5 	bl	8007bb8 <memp_malloc>
 800a20e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d107      	bne.n	800a226 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff fee3 	bl	8009fe4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a21e:	2001      	movs	r0, #1
 800a220:	f7fd fcca 	bl	8007bb8 <memp_malloc>
 800a224:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d03f      	beq.n	800a2ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a22c:	229c      	movs	r2, #156	@ 0x9c
 800a22e:	2100      	movs	r1, #0
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f007 f842 	bl	80112ba <memset>
    pcb->prio = prio;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	79fa      	ldrb	r2, [r7, #7]
 800a23a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a242:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a24c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	22ff      	movs	r2, #255	@ 0xff
 800a25a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a262:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2206      	movs	r2, #6
 800a268:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2206      	movs	r2, #6
 800a270:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a278:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <tcp_alloc+0xf8>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a28a:	4b0c      	ldr	r3, [pc, #48]	@ (800a2bc <tcp_alloc+0xfc>)
 800a28c:	781a      	ldrb	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a298:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4a08      	ldr	r2, [pc, #32]	@ (800a2c0 <tcp_alloc+0x100>)
 800a2a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4a07      	ldr	r2, [pc, #28]	@ (800a2c4 <tcp_alloc+0x104>)
 800a2a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	2000bd8c 	.word	0x2000bd8c
 800a2bc:	2000bda2 	.word	0x2000bda2
 800a2c0:	08009f79 	.word	0x08009f79
 800a2c4:	006ddd00 	.word	0x006ddd00

0800a2c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d107      	bne.n	800a2e6 <tcp_pcb_purge+0x1e>
 800a2d6:	4b21      	ldr	r3, [pc, #132]	@ (800a35c <tcp_pcb_purge+0x94>)
 800a2d8:	f640 0251 	movw	r2, #2129	@ 0x851
 800a2dc:	4920      	ldr	r1, [pc, #128]	@ (800a360 <tcp_pcb_purge+0x98>)
 800a2de:	4821      	ldr	r0, [pc, #132]	@ (800a364 <tcp_pcb_purge+0x9c>)
 800a2e0:	f006 ff86 	bl	80111f0 <iprintf>
 800a2e4:	e037      	b.n	800a356 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	7d1b      	ldrb	r3, [r3, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d033      	beq.n	800a356 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a2f2:	2b0a      	cmp	r3, #10
 800a2f4:	d02f      	beq.n	800a356 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d02b      	beq.n	800a356 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fb6e 	bl	80089ec <pbuf_free>
      pcb->refused_data = NULL;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f986 	bl	800a630 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a32a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff fdc7 	bl	8009ec4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff fdc2 	bl	8009ec4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	08012c88 	.word	0x08012c88
 800a360:	080132d4 	.word	0x080132d4
 800a364:	08012ccc 	.word	0x08012ccc

0800a368 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d106      	bne.n	800a386 <tcp_pcb_remove+0x1e>
 800a378:	4b3e      	ldr	r3, [pc, #248]	@ (800a474 <tcp_pcb_remove+0x10c>)
 800a37a:	f640 0283 	movw	r2, #2179	@ 0x883
 800a37e:	493e      	ldr	r1, [pc, #248]	@ (800a478 <tcp_pcb_remove+0x110>)
 800a380:	483e      	ldr	r0, [pc, #248]	@ (800a47c <tcp_pcb_remove+0x114>)
 800a382:	f006 ff35 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d106      	bne.n	800a39a <tcp_pcb_remove+0x32>
 800a38c:	4b39      	ldr	r3, [pc, #228]	@ (800a474 <tcp_pcb_remove+0x10c>)
 800a38e:	f640 0284 	movw	r2, #2180	@ 0x884
 800a392:	493b      	ldr	r1, [pc, #236]	@ (800a480 <tcp_pcb_remove+0x118>)
 800a394:	4839      	ldr	r0, [pc, #228]	@ (800a47c <tcp_pcb_remove+0x114>)
 800a396:	f006 ff2b 	bl	80111f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d105      	bne.n	800a3b0 <tcp_pcb_remove+0x48>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e013      	b.n	800a3d8 <tcp_pcb_remove+0x70>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	e00c      	b.n	800a3d2 <tcp_pcb_remove+0x6a>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d104      	bne.n	800a3cc <tcp_pcb_remove+0x64>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68da      	ldr	r2, [r3, #12]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	60da      	str	r2, [r3, #12]
 800a3ca:	e005      	b.n	800a3d8 <tcp_pcb_remove+0x70>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1ef      	bne.n	800a3b8 <tcp_pcb_remove+0x50>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a3de:	6838      	ldr	r0, [r7, #0]
 800a3e0:	f7ff ff72 	bl	800a2c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	7d1b      	ldrb	r3, [r3, #20]
 800a3e8:	2b0a      	cmp	r3, #10
 800a3ea:	d013      	beq.n	800a414 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d00f      	beq.n	800a414 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	8b5b      	ldrh	r3, [r3, #26]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	8b5b      	ldrh	r3, [r3, #26]
 800a404:	f043 0302 	orr.w	r3, r3, #2
 800a408:	b29a      	uxth	r2, r3
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a40e:	6838      	ldr	r0, [r7, #0]
 800a410:	f002 ff68 	bl	800d2e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	7d1b      	ldrb	r3, [r3, #20]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d020      	beq.n	800a45e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <tcp_pcb_remove+0xca>
 800a424:	4b13      	ldr	r3, [pc, #76]	@ (800a474 <tcp_pcb_remove+0x10c>)
 800a426:	f640 0293 	movw	r2, #2195	@ 0x893
 800a42a:	4916      	ldr	r1, [pc, #88]	@ (800a484 <tcp_pcb_remove+0x11c>)
 800a42c:	4813      	ldr	r0, [pc, #76]	@ (800a47c <tcp_pcb_remove+0x114>)
 800a42e:	f006 fedf 	bl	80111f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a436:	2b00      	cmp	r3, #0
 800a438:	d006      	beq.n	800a448 <tcp_pcb_remove+0xe0>
 800a43a:	4b0e      	ldr	r3, [pc, #56]	@ (800a474 <tcp_pcb_remove+0x10c>)
 800a43c:	f640 0294 	movw	r2, #2196	@ 0x894
 800a440:	4911      	ldr	r1, [pc, #68]	@ (800a488 <tcp_pcb_remove+0x120>)
 800a442:	480e      	ldr	r0, [pc, #56]	@ (800a47c <tcp_pcb_remove+0x114>)
 800a444:	f006 fed4 	bl	80111f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d006      	beq.n	800a45e <tcp_pcb_remove+0xf6>
 800a450:	4b08      	ldr	r3, [pc, #32]	@ (800a474 <tcp_pcb_remove+0x10c>)
 800a452:	f640 0296 	movw	r2, #2198	@ 0x896
 800a456:	490d      	ldr	r1, [pc, #52]	@ (800a48c <tcp_pcb_remove+0x124>)
 800a458:	4808      	ldr	r0, [pc, #32]	@ (800a47c <tcp_pcb_remove+0x114>)
 800a45a:	f006 fec9 	bl	80111f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2200      	movs	r2, #0
 800a462:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2200      	movs	r2, #0
 800a468:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	08012c88 	.word	0x08012c88
 800a478:	080132f0 	.word	0x080132f0
 800a47c:	08012ccc 	.word	0x08012ccc
 800a480:	0801330c 	.word	0x0801330c
 800a484:	0801332c 	.word	0x0801332c
 800a488:	08013344 	.word	0x08013344
 800a48c:	08013360 	.word	0x08013360

0800a490 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <tcp_next_iss+0x1c>
 800a49e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <tcp_next_iss+0x38>)
 800a4a0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a4a4:	4909      	ldr	r1, [pc, #36]	@ (800a4cc <tcp_next_iss+0x3c>)
 800a4a6:	480a      	ldr	r0, [pc, #40]	@ (800a4d0 <tcp_next_iss+0x40>)
 800a4a8:	f006 fea2 	bl	80111f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a4ac:	4b09      	ldr	r3, [pc, #36]	@ (800a4d4 <tcp_next_iss+0x44>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	4b09      	ldr	r3, [pc, #36]	@ (800a4d8 <tcp_next_iss+0x48>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	4a07      	ldr	r2, [pc, #28]	@ (800a4d4 <tcp_next_iss+0x44>)
 800a4b8:	6013      	str	r3, [r2, #0]
  return iss;
 800a4ba:	4b06      	ldr	r3, [pc, #24]	@ (800a4d4 <tcp_next_iss+0x44>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	08012c88 	.word	0x08012c88
 800a4cc:	08013378 	.word	0x08013378
 800a4d0:	08012ccc 	.word	0x08012ccc
 800a4d4:	20000028 	.word	0x20000028
 800a4d8:	2000bd8c 	.word	0x2000bd8c

0800a4dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <tcp_eff_send_mss_netif+0x22>
 800a4f0:	4b14      	ldr	r3, [pc, #80]	@ (800a544 <tcp_eff_send_mss_netif+0x68>)
 800a4f2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a4f6:	4914      	ldr	r1, [pc, #80]	@ (800a548 <tcp_eff_send_mss_netif+0x6c>)
 800a4f8:	4814      	ldr	r0, [pc, #80]	@ (800a54c <tcp_eff_send_mss_netif+0x70>)
 800a4fa:	f006 fe79 	bl	80111f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a504:	89fb      	ldrh	r3, [r7, #14]
 800a506:	e019      	b.n	800a53c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a50c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a50e:	8afb      	ldrh	r3, [r7, #22]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d012      	beq.n	800a53a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a514:	2328      	movs	r3, #40	@ 0x28
 800a516:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a518:	8afa      	ldrh	r2, [r7, #22]
 800a51a:	8abb      	ldrh	r3, [r7, #20]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d904      	bls.n	800a52a <tcp_eff_send_mss_netif+0x4e>
 800a520:	8afa      	ldrh	r2, [r7, #22]
 800a522:	8abb      	ldrh	r3, [r7, #20]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	b29b      	uxth	r3, r3
 800a528:	e000      	b.n	800a52c <tcp_eff_send_mss_netif+0x50>
 800a52a:	2300      	movs	r3, #0
 800a52c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a52e:	8a7a      	ldrh	r2, [r7, #18]
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	4293      	cmp	r3, r2
 800a534:	bf28      	it	cs
 800a536:	4613      	movcs	r3, r2
 800a538:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a53a:	89fb      	ldrh	r3, [r7, #14]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	08012c88 	.word	0x08012c88
 800a548:	08013394 	.word	0x08013394
 800a54c:	08012ccc 	.word	0x08012ccc

0800a550 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d119      	bne.n	800a598 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a564:	4b10      	ldr	r3, [pc, #64]	@ (800a5a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a566:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a56a:	4910      	ldr	r1, [pc, #64]	@ (800a5ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a56c:	4810      	ldr	r0, [pc, #64]	@ (800a5b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a56e:	f006 fe3f 	bl	80111f0 <iprintf>

  while (pcb != NULL) {
 800a572:	e011      	b.n	800a598 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d108      	bne.n	800a592 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7fe ffc4 	bl	8009514 <tcp_abort>
      pcb = next;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e002      	b.n	800a598 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1ea      	bne.n	800a574 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	08012c88 	.word	0x08012c88
 800a5ac:	080133bc 	.word	0x080133bc
 800a5b0:	08012ccc 	.word	0x08012ccc

0800a5b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02a      	beq.n	800a61a <tcp_netif_ip_addr_changed+0x66>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d026      	beq.n	800a61a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a5cc:	4b15      	ldr	r3, [pc, #84]	@ (800a624 <tcp_netif_ip_addr_changed+0x70>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff ffbc 	bl	800a550 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a5d8:	4b13      	ldr	r3, [pc, #76]	@ (800a628 <tcp_netif_ip_addr_changed+0x74>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff ffb6 	bl	800a550 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d017      	beq.n	800a61a <tcp_netif_ip_addr_changed+0x66>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d013      	beq.n	800a61a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a62c <tcp_netif_ip_addr_changed+0x78>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	e00c      	b.n	800a614 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d103      	bne.n	800a60e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1ef      	bne.n	800a5fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a61a:	bf00      	nop
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	2000bd98 	.word	0x2000bd98
 800a628:	2000bd90 	.word	0x2000bd90
 800a62c:	2000bd94 	.word	0x2000bd94

0800a630 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d007      	beq.n	800a650 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff fc3d 	bl	8009ec4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a658:	b590      	push	{r4, r7, lr}
 800a65a:	b08d      	sub	sp, #52	@ 0x34
 800a65c:	af04      	add	r7, sp, #16
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d105      	bne.n	800a674 <tcp_input+0x1c>
 800a668:	4b9b      	ldr	r3, [pc, #620]	@ (800a8d8 <tcp_input+0x280>)
 800a66a:	2283      	movs	r2, #131	@ 0x83
 800a66c:	499b      	ldr	r1, [pc, #620]	@ (800a8dc <tcp_input+0x284>)
 800a66e:	489c      	ldr	r0, [pc, #624]	@ (800a8e0 <tcp_input+0x288>)
 800a670:	f006 fdbe 	bl	80111f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	4a9a      	ldr	r2, [pc, #616]	@ (800a8e4 <tcp_input+0x28c>)
 800a67a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	895b      	ldrh	r3, [r3, #10]
 800a680:	2b13      	cmp	r3, #19
 800a682:	f240 83d1 	bls.w	800ae28 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a686:	4b98      	ldr	r3, [pc, #608]	@ (800a8e8 <tcp_input+0x290>)
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	4a97      	ldr	r2, [pc, #604]	@ (800a8e8 <tcp_input+0x290>)
 800a68c:	6812      	ldr	r2, [r2, #0]
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f005 fc41 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f040 83c7 	bne.w	800ae2c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a69e:	4b92      	ldr	r3, [pc, #584]	@ (800a8e8 <tcp_input+0x290>)
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a6a6:	2be0      	cmp	r3, #224	@ 0xe0
 800a6a8:	f000 83c0 	beq.w	800ae2c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a6ac:	4b8d      	ldr	r3, [pc, #564]	@ (800a8e4 <tcp_input+0x28c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	899b      	ldrh	r3, [r3, #12]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fc fdab 	bl	8007210 <lwip_htons>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	0b1b      	lsrs	r3, r3, #12
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a6c6:	7cbb      	ldrb	r3, [r7, #18]
 800a6c8:	2b13      	cmp	r3, #19
 800a6ca:	f240 83b1 	bls.w	800ae30 <tcp_input+0x7d8>
 800a6ce:	7cbb      	ldrb	r3, [r7, #18]
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	891b      	ldrh	r3, [r3, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	f200 83aa 	bhi.w	800ae30 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a6dc:	7cbb      	ldrb	r3, [r7, #18]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b14      	subs	r3, #20
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	4b81      	ldr	r3, [pc, #516]	@ (800a8ec <tcp_input+0x294>)
 800a6e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a6e8:	4b81      	ldr	r3, [pc, #516]	@ (800a8f0 <tcp_input+0x298>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	895a      	ldrh	r2, [r3, #10]
 800a6f2:	7cbb      	ldrb	r3, [r7, #18]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d309      	bcc.n	800a70e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a6fa:	4b7c      	ldr	r3, [pc, #496]	@ (800a8ec <tcp_input+0x294>)
 800a6fc:	881a      	ldrh	r2, [r3, #0]
 800a6fe:	4b7d      	ldr	r3, [pc, #500]	@ (800a8f4 <tcp_input+0x29c>)
 800a700:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a702:	7cbb      	ldrb	r3, [r7, #18]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7fe f8ea 	bl	80088e0 <pbuf_remove_header>
 800a70c:	e04e      	b.n	800a7ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <tcp_input+0xca>
 800a716:	4b70      	ldr	r3, [pc, #448]	@ (800a8d8 <tcp_input+0x280>)
 800a718:	22c2      	movs	r2, #194	@ 0xc2
 800a71a:	4977      	ldr	r1, [pc, #476]	@ (800a8f8 <tcp_input+0x2a0>)
 800a71c:	4870      	ldr	r0, [pc, #448]	@ (800a8e0 <tcp_input+0x288>)
 800a71e:	f006 fd67 	bl	80111f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a722:	2114      	movs	r1, #20
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7fe f8db 	bl	80088e0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	895a      	ldrh	r2, [r3, #10]
 800a72e:	4b71      	ldr	r3, [pc, #452]	@ (800a8f4 <tcp_input+0x29c>)
 800a730:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a732:	4b6e      	ldr	r3, [pc, #440]	@ (800a8ec <tcp_input+0x294>)
 800a734:	881a      	ldrh	r2, [r3, #0]
 800a736:	4b6f      	ldr	r3, [pc, #444]	@ (800a8f4 <tcp_input+0x29c>)
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a73e:	4b6d      	ldr	r3, [pc, #436]	@ (800a8f4 <tcp_input+0x29c>)
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7fe f8cb 	bl	80088e0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	895b      	ldrh	r3, [r3, #10]
 800a750:	8a3a      	ldrh	r2, [r7, #16]
 800a752:	429a      	cmp	r2, r3
 800a754:	f200 836e 	bhi.w	800ae34 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	4a64      	ldr	r2, [pc, #400]	@ (800a8f0 <tcp_input+0x298>)
 800a760:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	8a3a      	ldrh	r2, [r7, #16]
 800a768:	4611      	mov	r1, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe f8b8 	bl	80088e0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	891a      	ldrh	r2, [r3, #8]
 800a774:	8a3b      	ldrh	r3, [r7, #16]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	b29a      	uxth	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	895b      	ldrh	r3, [r3, #10]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d005      	beq.n	800a792 <tcp_input+0x13a>
 800a786:	4b54      	ldr	r3, [pc, #336]	@ (800a8d8 <tcp_input+0x280>)
 800a788:	22df      	movs	r2, #223	@ 0xdf
 800a78a:	495c      	ldr	r1, [pc, #368]	@ (800a8fc <tcp_input+0x2a4>)
 800a78c:	4854      	ldr	r0, [pc, #336]	@ (800a8e0 <tcp_input+0x288>)
 800a78e:	f006 fd2f 	bl	80111f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	891a      	ldrh	r2, [r3, #8]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	891b      	ldrh	r3, [r3, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d005      	beq.n	800a7ac <tcp_input+0x154>
 800a7a0:	4b4d      	ldr	r3, [pc, #308]	@ (800a8d8 <tcp_input+0x280>)
 800a7a2:	22e0      	movs	r2, #224	@ 0xe0
 800a7a4:	4956      	ldr	r1, [pc, #344]	@ (800a900 <tcp_input+0x2a8>)
 800a7a6:	484e      	ldr	r0, [pc, #312]	@ (800a8e0 <tcp_input+0x288>)
 800a7a8:	f006 fd22 	bl	80111f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e4 <tcp_input+0x28c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	4a4b      	ldr	r2, [pc, #300]	@ (800a8e4 <tcp_input+0x28c>)
 800a7b6:	6814      	ldr	r4, [r2, #0]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fc fd29 	bl	8007210 <lwip_htons>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a7c2:	4b48      	ldr	r3, [pc, #288]	@ (800a8e4 <tcp_input+0x28c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	885b      	ldrh	r3, [r3, #2]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	4a46      	ldr	r2, [pc, #280]	@ (800a8e4 <tcp_input+0x28c>)
 800a7cc:	6814      	ldr	r4, [r2, #0]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fc fd1e 	bl	8007210 <lwip_htons>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a7d8:	4b42      	ldr	r3, [pc, #264]	@ (800a8e4 <tcp_input+0x28c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4a41      	ldr	r2, [pc, #260]	@ (800a8e4 <tcp_input+0x28c>)
 800a7e0:	6814      	ldr	r4, [r2, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fc fd29 	bl	800723a <lwip_htonl>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	6063      	str	r3, [r4, #4]
 800a7ec:	6863      	ldr	r3, [r4, #4]
 800a7ee:	4a45      	ldr	r2, [pc, #276]	@ (800a904 <tcp_input+0x2ac>)
 800a7f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a7f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a8e4 <tcp_input+0x28c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	4a3a      	ldr	r2, [pc, #232]	@ (800a8e4 <tcp_input+0x28c>)
 800a7fa:	6814      	ldr	r4, [r2, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fc fd1c 	bl	800723a <lwip_htonl>
 800a802:	4603      	mov	r3, r0
 800a804:	60a3      	str	r3, [r4, #8]
 800a806:	68a3      	ldr	r3, [r4, #8]
 800a808:	4a3f      	ldr	r2, [pc, #252]	@ (800a908 <tcp_input+0x2b0>)
 800a80a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a80c:	4b35      	ldr	r3, [pc, #212]	@ (800a8e4 <tcp_input+0x28c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	89db      	ldrh	r3, [r3, #14]
 800a812:	b29b      	uxth	r3, r3
 800a814:	4a33      	ldr	r2, [pc, #204]	@ (800a8e4 <tcp_input+0x28c>)
 800a816:	6814      	ldr	r4, [r2, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fc fcf9 	bl	8007210 <lwip_htons>
 800a81e:	4603      	mov	r3, r0
 800a820:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a822:	4b30      	ldr	r3, [pc, #192]	@ (800a8e4 <tcp_input+0x28c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	899b      	ldrh	r3, [r3, #12]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fc fcf0 	bl	8007210 <lwip_htons>
 800a830:	4603      	mov	r3, r0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	4b34      	ldr	r3, [pc, #208]	@ (800a90c <tcp_input+0x2b4>)
 800a83c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	891a      	ldrh	r2, [r3, #8]
 800a842:	4b33      	ldr	r3, [pc, #204]	@ (800a910 <tcp_input+0x2b8>)
 800a844:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a846:	4b31      	ldr	r3, [pc, #196]	@ (800a90c <tcp_input+0x2b4>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00c      	beq.n	800a86c <tcp_input+0x214>
    tcplen++;
 800a852:	4b2f      	ldr	r3, [pc, #188]	@ (800a910 <tcp_input+0x2b8>)
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	b29a      	uxth	r2, r3
 800a85a:	4b2d      	ldr	r3, [pc, #180]	@ (800a910 <tcp_input+0x2b8>)
 800a85c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	891a      	ldrh	r2, [r3, #8]
 800a862:	4b2b      	ldr	r3, [pc, #172]	@ (800a910 <tcp_input+0x2b8>)
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	f200 82e6 	bhi.w	800ae38 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a870:	4b28      	ldr	r3, [pc, #160]	@ (800a914 <tcp_input+0x2bc>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	e09d      	b.n	800a9b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	7d1b      	ldrb	r3, [r3, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d105      	bne.n	800a88c <tcp_input+0x234>
 800a880:	4b15      	ldr	r3, [pc, #84]	@ (800a8d8 <tcp_input+0x280>)
 800a882:	22fb      	movs	r2, #251	@ 0xfb
 800a884:	4924      	ldr	r1, [pc, #144]	@ (800a918 <tcp_input+0x2c0>)
 800a886:	4816      	ldr	r0, [pc, #88]	@ (800a8e0 <tcp_input+0x288>)
 800a888:	f006 fcb2 	bl	80111f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	7d1b      	ldrb	r3, [r3, #20]
 800a890:	2b0a      	cmp	r3, #10
 800a892:	d105      	bne.n	800a8a0 <tcp_input+0x248>
 800a894:	4b10      	ldr	r3, [pc, #64]	@ (800a8d8 <tcp_input+0x280>)
 800a896:	22fc      	movs	r2, #252	@ 0xfc
 800a898:	4920      	ldr	r1, [pc, #128]	@ (800a91c <tcp_input+0x2c4>)
 800a89a:	4811      	ldr	r0, [pc, #68]	@ (800a8e0 <tcp_input+0x288>)
 800a89c:	f006 fca8 	bl	80111f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	7d1b      	ldrb	r3, [r3, #20]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d105      	bne.n	800a8b4 <tcp_input+0x25c>
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d8 <tcp_input+0x280>)
 800a8aa:	22fd      	movs	r2, #253	@ 0xfd
 800a8ac:	491c      	ldr	r1, [pc, #112]	@ (800a920 <tcp_input+0x2c8>)
 800a8ae:	480c      	ldr	r0, [pc, #48]	@ (800a8e0 <tcp_input+0x288>)
 800a8b0:	f006 fc9e 	bl	80111f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	7a1b      	ldrb	r3, [r3, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d033      	beq.n	800a924 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	7a1a      	ldrb	r2, [r3, #8]
 800a8c0:	4b09      	ldr	r3, [pc, #36]	@ (800a8e8 <tcp_input+0x290>)
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d029      	beq.n	800a924 <tcp_input+0x2cc>
      prev = pcb;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	61bb      	str	r3, [r7, #24]
      continue;
 800a8d4:	e06b      	b.n	800a9ae <tcp_input+0x356>
 800a8d6:	bf00      	nop
 800a8d8:	080133f0 	.word	0x080133f0
 800a8dc:	08013424 	.word	0x08013424
 800a8e0:	0801343c 	.word	0x0801343c
 800a8e4:	2000bdb4 	.word	0x2000bdb4
 800a8e8:	20008c8c 	.word	0x20008c8c
 800a8ec:	2000bdb8 	.word	0x2000bdb8
 800a8f0:	2000bdbc 	.word	0x2000bdbc
 800a8f4:	2000bdba 	.word	0x2000bdba
 800a8f8:	08013464 	.word	0x08013464
 800a8fc:	08013474 	.word	0x08013474
 800a900:	08013480 	.word	0x08013480
 800a904:	2000bdc4 	.word	0x2000bdc4
 800a908:	2000bdc8 	.word	0x2000bdc8
 800a90c:	2000bdd0 	.word	0x2000bdd0
 800a910:	2000bdce 	.word	0x2000bdce
 800a914:	2000bd98 	.word	0x2000bd98
 800a918:	080134a0 	.word	0x080134a0
 800a91c:	080134c8 	.word	0x080134c8
 800a920:	080134f4 	.word	0x080134f4
    }

    if (pcb->remote_port == tcphdr->src &&
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	8b1a      	ldrh	r2, [r3, #24]
 800a928:	4b72      	ldr	r3, [pc, #456]	@ (800aaf4 <tcp_input+0x49c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	429a      	cmp	r2, r3
 800a932:	d13a      	bne.n	800a9aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	8ada      	ldrh	r2, [r3, #22]
 800a938:	4b6e      	ldr	r3, [pc, #440]	@ (800aaf4 <tcp_input+0x49c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	885b      	ldrh	r3, [r3, #2]
 800a93e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a940:	429a      	cmp	r2, r3
 800a942:	d132      	bne.n	800a9aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	4b6b      	ldr	r3, [pc, #428]	@ (800aaf8 <tcp_input+0x4a0>)
 800a94a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d12c      	bne.n	800a9aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b68      	ldr	r3, [pc, #416]	@ (800aaf8 <tcp_input+0x4a0>)
 800a956:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a958:	429a      	cmp	r2, r3
 800a95a:	d126      	bne.n	800a9aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	429a      	cmp	r2, r3
 800a964:	d106      	bne.n	800a974 <tcp_input+0x31c>
 800a966:	4b65      	ldr	r3, [pc, #404]	@ (800aafc <tcp_input+0x4a4>)
 800a968:	f240 120d 	movw	r2, #269	@ 0x10d
 800a96c:	4964      	ldr	r1, [pc, #400]	@ (800ab00 <tcp_input+0x4a8>)
 800a96e:	4865      	ldr	r0, [pc, #404]	@ (800ab04 <tcp_input+0x4ac>)
 800a970:	f006 fc3e 	bl	80111f0 <iprintf>
      if (prev != NULL) {
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <tcp_input+0x338>
        prev->next = pcb->next;
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a982:	4b61      	ldr	r3, [pc, #388]	@ (800ab08 <tcp_input+0x4b0>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a98a:	4a5f      	ldr	r2, [pc, #380]	@ (800ab08 <tcp_input+0x4b0>)
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	69fa      	ldr	r2, [r7, #28]
 800a996:	429a      	cmp	r2, r3
 800a998:	d111      	bne.n	800a9be <tcp_input+0x366>
 800a99a:	4b58      	ldr	r3, [pc, #352]	@ (800aafc <tcp_input+0x4a4>)
 800a99c:	f240 1215 	movw	r2, #277	@ 0x115
 800a9a0:	495a      	ldr	r1, [pc, #360]	@ (800ab0c <tcp_input+0x4b4>)
 800a9a2:	4858      	ldr	r0, [pc, #352]	@ (800ab04 <tcp_input+0x4ac>)
 800a9a4:	f006 fc24 	bl	80111f0 <iprintf>
      break;
 800a9a8:	e009      	b.n	800a9be <tcp_input+0x366>
    }
    prev = pcb;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	61fb      	str	r3, [r7, #28]
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f47f af5e 	bne.w	800a878 <tcp_input+0x220>
 800a9bc:	e000      	b.n	800a9c0 <tcp_input+0x368>
      break;
 800a9be:	bf00      	nop
  }

  if (pcb == NULL) {
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f040 80aa 	bne.w	800ab1c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9c8:	4b51      	ldr	r3, [pc, #324]	@ (800ab10 <tcp_input+0x4b8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	61fb      	str	r3, [r7, #28]
 800a9ce:	e03f      	b.n	800aa50 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	7d1b      	ldrb	r3, [r3, #20]
 800a9d4:	2b0a      	cmp	r3, #10
 800a9d6:	d006      	beq.n	800a9e6 <tcp_input+0x38e>
 800a9d8:	4b48      	ldr	r3, [pc, #288]	@ (800aafc <tcp_input+0x4a4>)
 800a9da:	f240 121f 	movw	r2, #287	@ 0x11f
 800a9de:	494d      	ldr	r1, [pc, #308]	@ (800ab14 <tcp_input+0x4bc>)
 800a9e0:	4848      	ldr	r0, [pc, #288]	@ (800ab04 <tcp_input+0x4ac>)
 800a9e2:	f006 fc05 	bl	80111f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	7a1b      	ldrb	r3, [r3, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d009      	beq.n	800aa02 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	7a1a      	ldrb	r2, [r3, #8]
 800a9f2:	4b41      	ldr	r3, [pc, #260]	@ (800aaf8 <tcp_input+0x4a0>)
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d122      	bne.n	800aa48 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	8b1a      	ldrh	r2, [r3, #24]
 800aa06:	4b3b      	ldr	r3, [pc, #236]	@ (800aaf4 <tcp_input+0x49c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d11b      	bne.n	800aa4a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	8ada      	ldrh	r2, [r3, #22]
 800aa16:	4b37      	ldr	r3, [pc, #220]	@ (800aaf4 <tcp_input+0x49c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	885b      	ldrh	r3, [r3, #2]
 800aa1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d113      	bne.n	800aa4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	4b34      	ldr	r3, [pc, #208]	@ (800aaf8 <tcp_input+0x4a0>)
 800aa28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d10d      	bne.n	800aa4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4b31      	ldr	r3, [pc, #196]	@ (800aaf8 <tcp_input+0x4a0>)
 800aa34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d107      	bne.n	800aa4a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800aa3a:	69f8      	ldr	r0, [r7, #28]
 800aa3c:	f000 fb56 	bl	800b0ec <tcp_timewait_input>
        }
        pbuf_free(p);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fd ffd3 	bl	80089ec <pbuf_free>
        return;
 800aa46:	e1fd      	b.n	800ae44 <tcp_input+0x7ec>
        continue;
 800aa48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	61fb      	str	r3, [r7, #28]
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1bc      	bne.n	800a9d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa5a:	4b2f      	ldr	r3, [pc, #188]	@ (800ab18 <tcp_input+0x4c0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	e02a      	b.n	800aab8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	7a1b      	ldrb	r3, [r3, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00c      	beq.n	800aa84 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	7a1a      	ldrb	r2, [r3, #8]
 800aa6e:	4b22      	ldr	r3, [pc, #136]	@ (800aaf8 <tcp_input+0x4a0>)
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa76:	3301      	adds	r3, #1
 800aa78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d002      	beq.n	800aa84 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	61bb      	str	r3, [r7, #24]
        continue;
 800aa82:	e016      	b.n	800aab2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	8ada      	ldrh	r2, [r3, #22]
 800aa88:	4b1a      	ldr	r3, [pc, #104]	@ (800aaf4 <tcp_input+0x49c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	885b      	ldrh	r3, [r3, #2]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d10c      	bne.n	800aaae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	4b17      	ldr	r3, [pc, #92]	@ (800aaf8 <tcp_input+0x4a0>)
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d00f      	beq.n	800aac0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00d      	beq.n	800aac2 <tcp_input+0x46a>
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1d1      	bne.n	800aa62 <tcp_input+0x40a>
 800aabe:	e000      	b.n	800aac2 <tcp_input+0x46a>
            break;
 800aac0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d029      	beq.n	800ab1c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aad6:	4b10      	ldr	r3, [pc, #64]	@ (800ab18 <tcp_input+0x4c0>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aade:	4a0e      	ldr	r2, [pc, #56]	@ (800ab18 <tcp_input+0x4c0>)
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aae4:	6978      	ldr	r0, [r7, #20]
 800aae6:	f000 fa03 	bl	800aef0 <tcp_listen_input>
      }
      pbuf_free(p);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7fd ff7e 	bl	80089ec <pbuf_free>
      return;
 800aaf0:	e1a8      	b.n	800ae44 <tcp_input+0x7ec>
 800aaf2:	bf00      	nop
 800aaf4:	2000bdb4 	.word	0x2000bdb4
 800aaf8:	20008c8c 	.word	0x20008c8c
 800aafc:	080133f0 	.word	0x080133f0
 800ab00:	0801351c 	.word	0x0801351c
 800ab04:	0801343c 	.word	0x0801343c
 800ab08:	2000bd98 	.word	0x2000bd98
 800ab0c:	08013548 	.word	0x08013548
 800ab10:	2000bd9c 	.word	0x2000bd9c
 800ab14:	08013574 	.word	0x08013574
 800ab18:	2000bd94 	.word	0x2000bd94
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 8158 	beq.w	800add4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ab24:	4b95      	ldr	r3, [pc, #596]	@ (800ad7c <tcp_input+0x724>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	891a      	ldrh	r2, [r3, #8]
 800ab2e:	4b93      	ldr	r3, [pc, #588]	@ (800ad7c <tcp_input+0x724>)
 800ab30:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ab32:	4a92      	ldr	r2, [pc, #584]	@ (800ad7c <tcp_input+0x724>)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ab38:	4b91      	ldr	r3, [pc, #580]	@ (800ad80 <tcp_input+0x728>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a8f      	ldr	r2, [pc, #572]	@ (800ad7c <tcp_input+0x724>)
 800ab3e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ab40:	4b90      	ldr	r3, [pc, #576]	@ (800ad84 <tcp_input+0x72c>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ab46:	4b90      	ldr	r3, [pc, #576]	@ (800ad88 <tcp_input+0x730>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ab4c:	4b8f      	ldr	r3, [pc, #572]	@ (800ad8c <tcp_input+0x734>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ab52:	4b8f      	ldr	r3, [pc, #572]	@ (800ad90 <tcp_input+0x738>)
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	7b5b      	ldrb	r3, [r3, #13]
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d017      	beq.n	800aba4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab74:	69f8      	ldr	r0, [r7, #28]
 800ab76:	f7ff f929 	bl	8009dcc <tcp_process_refused_data>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f113 0f0d 	cmn.w	r3, #13
 800ab80:	d007      	beq.n	800ab92 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab8a:	4b82      	ldr	r3, [pc, #520]	@ (800ad94 <tcp_input+0x73c>)
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d008      	beq.n	800aba4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f040 80e3 	bne.w	800ad62 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ab9c:	69f8      	ldr	r0, [r7, #28]
 800ab9e:	f003 f9a7 	bl	800def0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aba2:	e0de      	b.n	800ad62 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aba4:	4a7c      	ldr	r2, [pc, #496]	@ (800ad98 <tcp_input+0x740>)
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800abaa:	69f8      	ldr	r0, [r7, #28]
 800abac:	f000 fb18 	bl	800b1e0 <tcp_process>
 800abb0:	4603      	mov	r3, r0
 800abb2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800abb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abb8:	f113 0f0d 	cmn.w	r3, #13
 800abbc:	f000 80d3 	beq.w	800ad66 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800abc0:	4b71      	ldr	r3, [pc, #452]	@ (800ad88 <tcp_input+0x730>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 0308 	and.w	r3, r3, #8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d015      	beq.n	800abf8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <tcp_input+0x590>
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	6912      	ldr	r2, [r2, #16]
 800abe0:	f06f 010d 	mvn.w	r1, #13
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800abe8:	69f9      	ldr	r1, [r7, #28]
 800abea:	486c      	ldr	r0, [pc, #432]	@ (800ad9c <tcp_input+0x744>)
 800abec:	f7ff fbbc 	bl	800a368 <tcp_pcb_remove>
        tcp_free(pcb);
 800abf0:	69f8      	ldr	r0, [r7, #28]
 800abf2:	f7fe f9a7 	bl	8008f44 <tcp_free>
 800abf6:	e0da      	b.n	800adae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800abfc:	4b63      	ldr	r3, [pc, #396]	@ (800ad8c <tcp_input+0x734>)
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01d      	beq.n	800ac40 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ac04:	4b61      	ldr	r3, [pc, #388]	@ (800ad8c <tcp_input+0x734>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00a      	beq.n	800ac2a <tcp_input+0x5d2>
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac1a:	69fa      	ldr	r2, [r7, #28]
 800ac1c:	6910      	ldr	r0, [r2, #16]
 800ac1e:	89fa      	ldrh	r2, [r7, #14]
 800ac20:	69f9      	ldr	r1, [r7, #28]
 800ac22:	4798      	blx	r3
 800ac24:	4603      	mov	r3, r0
 800ac26:	74fb      	strb	r3, [r7, #19]
 800ac28:	e001      	b.n	800ac2e <tcp_input+0x5d6>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac32:	f113 0f0d 	cmn.w	r3, #13
 800ac36:	f000 8098 	beq.w	800ad6a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ac3a:	4b54      	ldr	r3, [pc, #336]	@ (800ad8c <tcp_input+0x734>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ac40:	69f8      	ldr	r0, [r7, #28]
 800ac42:	f000 f915 	bl	800ae70 <tcp_input_delayed_close>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f040 8090 	bne.w	800ad6e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ac4e:	4b4d      	ldr	r3, [pc, #308]	@ (800ad84 <tcp_input+0x72c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d041      	beq.n	800acda <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d006      	beq.n	800ac6c <tcp_input+0x614>
 800ac5e:	4b50      	ldr	r3, [pc, #320]	@ (800ada0 <tcp_input+0x748>)
 800ac60:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ac64:	494f      	ldr	r1, [pc, #316]	@ (800ada4 <tcp_input+0x74c>)
 800ac66:	4850      	ldr	r0, [pc, #320]	@ (800ada8 <tcp_input+0x750>)
 800ac68:	f006 fac2 	bl	80111f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	8b5b      	ldrh	r3, [r3, #26]
 800ac70:	f003 0310 	and.w	r3, r3, #16
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac78:	4b42      	ldr	r3, [pc, #264]	@ (800ad84 <tcp_input+0x72c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fd feb5 	bl	80089ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac82:	69f8      	ldr	r0, [r7, #28]
 800ac84:	f7fe fc46 	bl	8009514 <tcp_abort>
            goto aborted;
 800ac88:	e091      	b.n	800adae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d00c      	beq.n	800acae <tcp_input+0x656>
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	6918      	ldr	r0, [r3, #16]
 800ac9e:	4b39      	ldr	r3, [pc, #228]	@ (800ad84 <tcp_input+0x72c>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	2300      	movs	r3, #0
 800aca4:	69f9      	ldr	r1, [r7, #28]
 800aca6:	47a0      	blx	r4
 800aca8:	4603      	mov	r3, r0
 800acaa:	74fb      	strb	r3, [r7, #19]
 800acac:	e008      	b.n	800acc0 <tcp_input+0x668>
 800acae:	4b35      	ldr	r3, [pc, #212]	@ (800ad84 <tcp_input+0x72c>)
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	2300      	movs	r3, #0
 800acb4:	69f9      	ldr	r1, [r7, #28]
 800acb6:	2000      	movs	r0, #0
 800acb8:	f7ff f95e 	bl	8009f78 <tcp_recv_null>
 800acbc:	4603      	mov	r3, r0
 800acbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800acc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acc4:	f113 0f0d 	cmn.w	r3, #13
 800acc8:	d053      	beq.n	800ad72 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800acca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800acd2:	4b2c      	ldr	r3, [pc, #176]	@ (800ad84 <tcp_input+0x72c>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800acda:	4b2b      	ldr	r3, [pc, #172]	@ (800ad88 <tcp_input+0x730>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d030      	beq.n	800ad48 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acea:	2b00      	cmp	r3, #0
 800acec:	d009      	beq.n	800ad02 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acf2:	7b5a      	ldrb	r2, [r3, #13]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acf8:	f042 0220 	orr.w	r2, r2, #32
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	735a      	strb	r2, [r3, #13]
 800ad00:	e022      	b.n	800ad48 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad06:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ad0a:	d005      	beq.n	800ad18 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad10:	3301      	adds	r3, #1
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <tcp_input+0x6e2>
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	6918      	ldr	r0, [r3, #16]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	2200      	movs	r2, #0
 800ad30:	69f9      	ldr	r1, [r7, #28]
 800ad32:	47a0      	blx	r4
 800ad34:	4603      	mov	r3, r0
 800ad36:	74fb      	strb	r3, [r7, #19]
 800ad38:	e001      	b.n	800ad3e <tcp_input+0x6e6>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ad3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad42:	f113 0f0d 	cmn.w	r3, #13
 800ad46:	d016      	beq.n	800ad76 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ad48:	4b13      	ldr	r3, [pc, #76]	@ (800ad98 <tcp_input+0x740>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad4e:	69f8      	ldr	r0, [r7, #28]
 800ad50:	f000 f88e 	bl	800ae70 <tcp_input_delayed_close>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d128      	bne.n	800adac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ad5a:	69f8      	ldr	r0, [r7, #28]
 800ad5c:	f002 fac2 	bl	800d2e4 <tcp_output>
 800ad60:	e025      	b.n	800adae <tcp_input+0x756>
        goto aborted;
 800ad62:	bf00      	nop
 800ad64:	e023      	b.n	800adae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ad66:	bf00      	nop
 800ad68:	e021      	b.n	800adae <tcp_input+0x756>
              goto aborted;
 800ad6a:	bf00      	nop
 800ad6c:	e01f      	b.n	800adae <tcp_input+0x756>
          goto aborted;
 800ad6e:	bf00      	nop
 800ad70:	e01d      	b.n	800adae <tcp_input+0x756>
            goto aborted;
 800ad72:	bf00      	nop
 800ad74:	e01b      	b.n	800adae <tcp_input+0x756>
              goto aborted;
 800ad76:	bf00      	nop
 800ad78:	e019      	b.n	800adae <tcp_input+0x756>
 800ad7a:	bf00      	nop
 800ad7c:	2000bda4 	.word	0x2000bda4
 800ad80:	2000bdb4 	.word	0x2000bdb4
 800ad84:	2000bdd4 	.word	0x2000bdd4
 800ad88:	2000bdd1 	.word	0x2000bdd1
 800ad8c:	2000bdcc 	.word	0x2000bdcc
 800ad90:	2000bdd0 	.word	0x2000bdd0
 800ad94:	2000bdce 	.word	0x2000bdce
 800ad98:	2000bdd8 	.word	0x2000bdd8
 800ad9c:	2000bd98 	.word	0x2000bd98
 800ada0:	080133f0 	.word	0x080133f0
 800ada4:	080135a4 	.word	0x080135a4
 800ada8:	0801343c 	.word	0x0801343c
          goto aborted;
 800adac:	bf00      	nop
    tcp_input_pcb = NULL;
 800adae:	4b27      	ldr	r3, [pc, #156]	@ (800ae4c <tcp_input+0x7f4>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800adb4:	4b26      	ldr	r3, [pc, #152]	@ (800ae50 <tcp_input+0x7f8>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800adba:	4b26      	ldr	r3, [pc, #152]	@ (800ae54 <tcp_input+0x7fc>)
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d03f      	beq.n	800ae42 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800adc2:	4b24      	ldr	r3, [pc, #144]	@ (800ae54 <tcp_input+0x7fc>)
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fd fe10 	bl	80089ec <pbuf_free>
      inseg.p = NULL;
 800adcc:	4b21      	ldr	r3, [pc, #132]	@ (800ae54 <tcp_input+0x7fc>)
 800adce:	2200      	movs	r2, #0
 800add0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800add2:	e036      	b.n	800ae42 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800add4:	4b20      	ldr	r3, [pc, #128]	@ (800ae58 <tcp_input+0x800>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	899b      	ldrh	r3, [r3, #12]
 800adda:	b29b      	uxth	r3, r3
 800addc:	4618      	mov	r0, r3
 800adde:	f7fc fa17 	bl	8007210 <lwip_htons>
 800ade2:	4603      	mov	r3, r0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	f003 0304 	and.w	r3, r3, #4
 800adea:	2b00      	cmp	r3, #0
 800adec:	d118      	bne.n	800ae20 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adee:	4b1b      	ldr	r3, [pc, #108]	@ (800ae5c <tcp_input+0x804>)
 800adf0:	6819      	ldr	r1, [r3, #0]
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <tcp_input+0x808>)
 800adf4:	881b      	ldrh	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae64 <tcp_input+0x80c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adfe:	4b16      	ldr	r3, [pc, #88]	@ (800ae58 <tcp_input+0x800>)
 800ae00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae02:	885b      	ldrh	r3, [r3, #2]
 800ae04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae06:	4a14      	ldr	r2, [pc, #80]	@ (800ae58 <tcp_input+0x800>)
 800ae08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae0a:	8812      	ldrh	r2, [r2, #0]
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	9202      	str	r2, [sp, #8]
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	4b15      	ldr	r3, [pc, #84]	@ (800ae68 <tcp_input+0x810>)
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	4b15      	ldr	r3, [pc, #84]	@ (800ae6c <tcp_input+0x814>)
 800ae18:	4602      	mov	r2, r0
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	f003 f816 	bl	800de4c <tcp_rst>
    pbuf_free(p);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7fd fde3 	bl	80089ec <pbuf_free>
  return;
 800ae26:	e00c      	b.n	800ae42 <tcp_input+0x7ea>
    goto dropped;
 800ae28:	bf00      	nop
 800ae2a:	e006      	b.n	800ae3a <tcp_input+0x7e2>
    goto dropped;
 800ae2c:	bf00      	nop
 800ae2e:	e004      	b.n	800ae3a <tcp_input+0x7e2>
    goto dropped;
 800ae30:	bf00      	nop
 800ae32:	e002      	b.n	800ae3a <tcp_input+0x7e2>
      goto dropped;
 800ae34:	bf00      	nop
 800ae36:	e000      	b.n	800ae3a <tcp_input+0x7e2>
      goto dropped;
 800ae38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7fd fdd6 	bl	80089ec <pbuf_free>
 800ae40:	e000      	b.n	800ae44 <tcp_input+0x7ec>
  return;
 800ae42:	bf00      	nop
}
 800ae44:	3724      	adds	r7, #36	@ 0x24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd90      	pop	{r4, r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	2000bdd8 	.word	0x2000bdd8
 800ae50:	2000bdd4 	.word	0x2000bdd4
 800ae54:	2000bda4 	.word	0x2000bda4
 800ae58:	2000bdb4 	.word	0x2000bdb4
 800ae5c:	2000bdc8 	.word	0x2000bdc8
 800ae60:	2000bdce 	.word	0x2000bdce
 800ae64:	2000bdc4 	.word	0x2000bdc4
 800ae68:	20008c9c 	.word	0x20008c9c
 800ae6c:	20008ca0 	.word	0x20008ca0

0800ae70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d106      	bne.n	800ae8c <tcp_input_delayed_close+0x1c>
 800ae7e:	4b17      	ldr	r3, [pc, #92]	@ (800aedc <tcp_input_delayed_close+0x6c>)
 800ae80:	f240 225a 	movw	r2, #602	@ 0x25a
 800ae84:	4916      	ldr	r1, [pc, #88]	@ (800aee0 <tcp_input_delayed_close+0x70>)
 800ae86:	4817      	ldr	r0, [pc, #92]	@ (800aee4 <tcp_input_delayed_close+0x74>)
 800ae88:	f006 f9b2 	bl	80111f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ae8c:	4b16      	ldr	r3, [pc, #88]	@ (800aee8 <tcp_input_delayed_close+0x78>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	f003 0310 	and.w	r3, r3, #16
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d01c      	beq.n	800aed2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	8b5b      	ldrh	r3, [r3, #26]
 800ae9c:	f003 0310 	and.w	r3, r3, #16
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10d      	bne.n	800aec0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d008      	beq.n	800aec0 <tcp_input_delayed_close+0x50>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6912      	ldr	r2, [r2, #16]
 800aeb8:	f06f 010e 	mvn.w	r1, #14
 800aebc:	4610      	mov	r0, r2
 800aebe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	480a      	ldr	r0, [pc, #40]	@ (800aeec <tcp_input_delayed_close+0x7c>)
 800aec4:	f7ff fa50 	bl	800a368 <tcp_pcb_remove>
    tcp_free(pcb);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7fe f83b 	bl	8008f44 <tcp_free>
    return 1;
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	080133f0 	.word	0x080133f0
 800aee0:	080135c0 	.word	0x080135c0
 800aee4:	0801343c 	.word	0x0801343c
 800aee8:	2000bdd1 	.word	0x2000bdd1
 800aeec:	2000bd98 	.word	0x2000bd98

0800aef0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aef0:	b590      	push	{r4, r7, lr}
 800aef2:	b08b      	sub	sp, #44	@ 0x2c
 800aef4:	af04      	add	r7, sp, #16
 800aef6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aef8:	4b6f      	ldr	r3, [pc, #444]	@ (800b0b8 <tcp_listen_input+0x1c8>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 80d2 	bne.w	800b0aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d106      	bne.n	800af1a <tcp_listen_input+0x2a>
 800af0c:	4b6b      	ldr	r3, [pc, #428]	@ (800b0bc <tcp_listen_input+0x1cc>)
 800af0e:	f240 2281 	movw	r2, #641	@ 0x281
 800af12:	496b      	ldr	r1, [pc, #428]	@ (800b0c0 <tcp_listen_input+0x1d0>)
 800af14:	486b      	ldr	r0, [pc, #428]	@ (800b0c4 <tcp_listen_input+0x1d4>)
 800af16:	f006 f96b 	bl	80111f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800af1a:	4b67      	ldr	r3, [pc, #412]	@ (800b0b8 <tcp_listen_input+0x1c8>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 0310 	and.w	r3, r3, #16
 800af22:	2b00      	cmp	r3, #0
 800af24:	d019      	beq.n	800af5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af26:	4b68      	ldr	r3, [pc, #416]	@ (800b0c8 <tcp_listen_input+0x1d8>)
 800af28:	6819      	ldr	r1, [r3, #0]
 800af2a:	4b68      	ldr	r3, [pc, #416]	@ (800b0cc <tcp_listen_input+0x1dc>)
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	4b67      	ldr	r3, [pc, #412]	@ (800b0d0 <tcp_listen_input+0x1e0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af36:	4b67      	ldr	r3, [pc, #412]	@ (800b0d4 <tcp_listen_input+0x1e4>)
 800af38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af3a:	885b      	ldrh	r3, [r3, #2]
 800af3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af3e:	4a65      	ldr	r2, [pc, #404]	@ (800b0d4 <tcp_listen_input+0x1e4>)
 800af40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af42:	8812      	ldrh	r2, [r2, #0]
 800af44:	b292      	uxth	r2, r2
 800af46:	9202      	str	r2, [sp, #8]
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	4b63      	ldr	r3, [pc, #396]	@ (800b0d8 <tcp_listen_input+0x1e8>)
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	4b63      	ldr	r3, [pc, #396]	@ (800b0dc <tcp_listen_input+0x1ec>)
 800af50:	4602      	mov	r2, r0
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f002 ff7a 	bl	800de4c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800af58:	e0a9      	b.n	800b0ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800af5a:	4b57      	ldr	r3, [pc, #348]	@ (800b0b8 <tcp_listen_input+0x1c8>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80a3 	beq.w	800b0ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7d5b      	ldrb	r3, [r3, #21]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff f927 	bl	800a1c0 <tcp_alloc>
 800af72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d111      	bne.n	800af9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <tcp_listen_input+0xa8>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	6910      	ldr	r0, [r2, #16]
 800af8a:	f04f 32ff 	mov.w	r2, #4294967295
 800af8e:	2100      	movs	r1, #0
 800af90:	4798      	blx	r3
 800af92:	4603      	mov	r3, r0
 800af94:	73bb      	strb	r3, [r7, #14]
      return;
 800af96:	e08b      	b.n	800b0b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af98:	23f0      	movs	r3, #240	@ 0xf0
 800af9a:	73bb      	strb	r3, [r7, #14]
      return;
 800af9c:	e088      	b.n	800b0b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800af9e:	4b50      	ldr	r3, [pc, #320]	@ (800b0e0 <tcp_listen_input+0x1f0>)
 800afa0:	695a      	ldr	r2, [r3, #20]
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800afa6:	4b4e      	ldr	r3, [pc, #312]	@ (800b0e0 <tcp_listen_input+0x1f0>)
 800afa8:	691a      	ldr	r2, [r3, #16]
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	8ada      	ldrh	r2, [r3, #22]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800afb6:	4b47      	ldr	r3, [pc, #284]	@ (800b0d4 <tcp_listen_input+0x1e4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2203      	movs	r2, #3
 800afc6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800afc8:	4b41      	ldr	r3, [pc, #260]	@ (800b0d0 <tcp_listen_input+0x1e0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800afda:	6978      	ldr	r0, [r7, #20]
 800afdc:	f7ff fa58 	bl	800a490 <tcp_next_iss>
 800afe0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800affa:	4b35      	ldr	r3, [pc, #212]	@ (800b0d0 <tcp_listen_input+0x1e0>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	1e5a      	subs	r2, r3, #1
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691a      	ldr	r2, [r3, #16]
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	7a5b      	ldrb	r3, [r3, #9]
 800b016:	f003 030c 	and.w	r3, r3, #12
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	7a1a      	ldrb	r2, [r3, #8]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b028:	4b2e      	ldr	r3, [pc, #184]	@ (800b0e4 <tcp_listen_input+0x1f4>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	60da      	str	r2, [r3, #12]
 800b030:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e4 <tcp_listen_input+0x1f4>)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	6013      	str	r3, [r2, #0]
 800b036:	f003 f8cb 	bl	800e1d0 <tcp_timer_needed>
 800b03a:	4b2b      	ldr	r3, [pc, #172]	@ (800b0e8 <tcp_listen_input+0x1f8>)
 800b03c:	2201      	movs	r2, #1
 800b03e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b040:	6978      	ldr	r0, [r7, #20]
 800b042:	f001 fd8b 	bl	800cb5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b046:	4b23      	ldr	r3, [pc, #140]	@ (800b0d4 <tcp_listen_input+0x1e4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	89db      	ldrh	r3, [r3, #14]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f004 fcbf 	bl	800f9ec <ip4_route>
 800b06e:	4601      	mov	r1, r0
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	3304      	adds	r3, #4
 800b074:	461a      	mov	r2, r3
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff fa30 	bl	800a4dc <tcp_eff_send_mss_netif>
 800b07c:	4603      	mov	r3, r0
 800b07e:	461a      	mov	r2, r3
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b084:	2112      	movs	r1, #18
 800b086:	6978      	ldr	r0, [r7, #20]
 800b088:	f002 f83e 	bl	800d108 <tcp_enqueue_flags>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d004      	beq.n	800b0a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b098:	2100      	movs	r1, #0
 800b09a:	6978      	ldr	r0, [r7, #20]
 800b09c:	f7fe f97c 	bl	8009398 <tcp_abandon>
      return;
 800b0a0:	e006      	b.n	800b0b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b0a2:	6978      	ldr	r0, [r7, #20]
 800b0a4:	f002 f91e 	bl	800d2e4 <tcp_output>
  return;
 800b0a8:	e001      	b.n	800b0ae <tcp_listen_input+0x1be>
    return;
 800b0aa:	bf00      	nop
 800b0ac:	e000      	b.n	800b0b0 <tcp_listen_input+0x1c0>
  return;
 800b0ae:	bf00      	nop
}
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd90      	pop	{r4, r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000bdd0 	.word	0x2000bdd0
 800b0bc:	080133f0 	.word	0x080133f0
 800b0c0:	080135e8 	.word	0x080135e8
 800b0c4:	0801343c 	.word	0x0801343c
 800b0c8:	2000bdc8 	.word	0x2000bdc8
 800b0cc:	2000bdce 	.word	0x2000bdce
 800b0d0:	2000bdc4 	.word	0x2000bdc4
 800b0d4:	2000bdb4 	.word	0x2000bdb4
 800b0d8:	20008c9c 	.word	0x20008c9c
 800b0dc:	20008ca0 	.word	0x20008ca0
 800b0e0:	20008c8c 	.word	0x20008c8c
 800b0e4:	2000bd98 	.word	0x2000bd98
 800b0e8:	2000bda0 	.word	0x2000bda0

0800b0ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b0f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b1b4 <tcp_timewait_input+0xc8>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d153      	bne.n	800b1a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <tcp_timewait_input+0x28>
 800b106:	4b2c      	ldr	r3, [pc, #176]	@ (800b1b8 <tcp_timewait_input+0xcc>)
 800b108:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b10c:	492b      	ldr	r1, [pc, #172]	@ (800b1bc <tcp_timewait_input+0xd0>)
 800b10e:	482c      	ldr	r0, [pc, #176]	@ (800b1c0 <tcp_timewait_input+0xd4>)
 800b110:	f006 f86e 	bl	80111f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b114:	4b27      	ldr	r3, [pc, #156]	@ (800b1b4 <tcp_timewait_input+0xc8>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	f003 0302 	and.w	r3, r3, #2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d02a      	beq.n	800b176 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b120:	4b28      	ldr	r3, [pc, #160]	@ (800b1c4 <tcp_timewait_input+0xd8>)
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	db2d      	blt.n	800b18a <tcp_timewait_input+0x9e>
 800b12e:	4b25      	ldr	r3, [pc, #148]	@ (800b1c4 <tcp_timewait_input+0xd8>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b13a:	440b      	add	r3, r1
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dc23      	bgt.n	800b18a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b142:	4b21      	ldr	r3, [pc, #132]	@ (800b1c8 <tcp_timewait_input+0xdc>)
 800b144:	6819      	ldr	r1, [r3, #0]
 800b146:	4b21      	ldr	r3, [pc, #132]	@ (800b1cc <tcp_timewait_input+0xe0>)
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1c4 <tcp_timewait_input+0xd8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b152:	4b1f      	ldr	r3, [pc, #124]	@ (800b1d0 <tcp_timewait_input+0xe4>)
 800b154:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b15a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1d0 <tcp_timewait_input+0xe4>)
 800b15c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b15e:	8812      	ldrh	r2, [r2, #0]
 800b160:	b292      	uxth	r2, r2
 800b162:	9202      	str	r2, [sp, #8]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d4 <tcp_timewait_input+0xe8>)
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d8 <tcp_timewait_input+0xec>)
 800b16c:	4602      	mov	r2, r0
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f002 fe6c 	bl	800de4c <tcp_rst>
      return;
 800b174:	e01b      	b.n	800b1ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b176:	4b0f      	ldr	r3, [pc, #60]	@ (800b1b4 <tcp_timewait_input+0xc8>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b182:	4b16      	ldr	r3, [pc, #88]	@ (800b1dc <tcp_timewait_input+0xf0>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b18a:	4b10      	ldr	r3, [pc, #64]	@ (800b1cc <tcp_timewait_input+0xe0>)
 800b18c:	881b      	ldrh	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00c      	beq.n	800b1ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	8b5b      	ldrh	r3, [r3, #26]
 800b196:	f043 0302 	orr.w	r3, r3, #2
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f002 f89f 	bl	800d2e4 <tcp_output>
  }
  return;
 800b1a6:	e001      	b.n	800b1ac <tcp_timewait_input+0xc0>
    return;
 800b1a8:	bf00      	nop
 800b1aa:	e000      	b.n	800b1ae <tcp_timewait_input+0xc2>
  return;
 800b1ac:	bf00      	nop
}
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	2000bdd0 	.word	0x2000bdd0
 800b1b8:	080133f0 	.word	0x080133f0
 800b1bc:	08013608 	.word	0x08013608
 800b1c0:	0801343c 	.word	0x0801343c
 800b1c4:	2000bdc4 	.word	0x2000bdc4
 800b1c8:	2000bdc8 	.word	0x2000bdc8
 800b1cc:	2000bdce 	.word	0x2000bdce
 800b1d0:	2000bdb4 	.word	0x2000bdb4
 800b1d4:	20008c9c 	.word	0x20008c9c
 800b1d8:	20008ca0 	.word	0x20008ca0
 800b1dc:	2000bd8c 	.word	0x2000bd8c

0800b1e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b1e0:	b590      	push	{r4, r7, lr}
 800b1e2:	b08d      	sub	sp, #52	@ 0x34
 800b1e4:	af04      	add	r7, sp, #16
 800b1e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <tcp_process+0x24>
 800b1f6:	4b9d      	ldr	r3, [pc, #628]	@ (800b46c <tcp_process+0x28c>)
 800b1f8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b1fc:	499c      	ldr	r1, [pc, #624]	@ (800b470 <tcp_process+0x290>)
 800b1fe:	489d      	ldr	r0, [pc, #628]	@ (800b474 <tcp_process+0x294>)
 800b200:	f005 fff6 	bl	80111f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b204:	4b9c      	ldr	r3, [pc, #624]	@ (800b478 <tcp_process+0x298>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d04e      	beq.n	800b2ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	7d1b      	ldrb	r3, [r3, #20]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d108      	bne.n	800b22a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b21c:	4b97      	ldr	r3, [pc, #604]	@ (800b47c <tcp_process+0x29c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	429a      	cmp	r2, r3
 800b222:	d123      	bne.n	800b26c <tcp_process+0x8c>
        acceptable = 1;
 800b224:	2301      	movs	r3, #1
 800b226:	76fb      	strb	r3, [r7, #27]
 800b228:	e020      	b.n	800b26c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b22e:	4b94      	ldr	r3, [pc, #592]	@ (800b480 <tcp_process+0x2a0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d102      	bne.n	800b23c <tcp_process+0x5c>
        acceptable = 1;
 800b236:	2301      	movs	r3, #1
 800b238:	76fb      	strb	r3, [r7, #27]
 800b23a:	e017      	b.n	800b26c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b23c:	4b90      	ldr	r3, [pc, #576]	@ (800b480 <tcp_process+0x2a0>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	db10      	blt.n	800b26c <tcp_process+0x8c>
 800b24a:	4b8d      	ldr	r3, [pc, #564]	@ (800b480 <tcp_process+0x2a0>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b256:	440b      	add	r3, r1
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dc06      	bgt.n	800b26c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	8b5b      	ldrh	r3, [r3, #26]
 800b262:	f043 0302 	orr.w	r3, r3, #2
 800b266:	b29a      	uxth	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b26c:	7efb      	ldrb	r3, [r7, #27]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d01b      	beq.n	800b2aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7d1b      	ldrb	r3, [r3, #20]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d106      	bne.n	800b288 <tcp_process+0xa8>
 800b27a:	4b7c      	ldr	r3, [pc, #496]	@ (800b46c <tcp_process+0x28c>)
 800b27c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b280:	4980      	ldr	r1, [pc, #512]	@ (800b484 <tcp_process+0x2a4>)
 800b282:	487c      	ldr	r0, [pc, #496]	@ (800b474 <tcp_process+0x294>)
 800b284:	f005 ffb4 	bl	80111f0 <iprintf>
      recv_flags |= TF_RESET;
 800b288:	4b7f      	ldr	r3, [pc, #508]	@ (800b488 <tcp_process+0x2a8>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	f043 0308 	orr.w	r3, r3, #8
 800b290:	b2da      	uxtb	r2, r3
 800b292:	4b7d      	ldr	r3, [pc, #500]	@ (800b488 <tcp_process+0x2a8>)
 800b294:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8b5b      	ldrh	r3, [r3, #26]
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b2a4:	f06f 030d 	mvn.w	r3, #13
 800b2a8:	e37a      	b.n	800b9a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e378      	b.n	800b9a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b2ae:	4b72      	ldr	r3, [pc, #456]	@ (800b478 <tcp_process+0x298>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d010      	beq.n	800b2dc <tcp_process+0xfc>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7d1b      	ldrb	r3, [r3, #20]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d00c      	beq.n	800b2dc <tcp_process+0xfc>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	7d1b      	ldrb	r3, [r3, #20]
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d008      	beq.n	800b2dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8b5b      	ldrh	r3, [r3, #26]
 800b2ce:	f043 0302 	orr.w	r3, r3, #2
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e361      	b.n	800b9a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	8b5b      	ldrh	r3, [r3, #26]
 800b2e0:	f003 0310 	and.w	r3, r3, #16
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b2e8:	4b68      	ldr	r3, [pc, #416]	@ (800b48c <tcp_process+0x2ac>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fc2b 	bl	800cb5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	7d1b      	ldrb	r3, [r3, #20]
 800b30a:	3b02      	subs	r3, #2
 800b30c:	2b07      	cmp	r3, #7
 800b30e:	f200 8337 	bhi.w	800b980 <tcp_process+0x7a0>
 800b312:	a201      	add	r2, pc, #4	@ (adr r2, 800b318 <tcp_process+0x138>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b339 	.word	0x0800b339
 800b31c:	0800b569 	.word	0x0800b569
 800b320:	0800b6e1 	.word	0x0800b6e1
 800b324:	0800b70b 	.word	0x0800b70b
 800b328:	0800b82f 	.word	0x0800b82f
 800b32c:	0800b6e1 	.word	0x0800b6e1
 800b330:	0800b8bb 	.word	0x0800b8bb
 800b334:	0800b94b 	.word	0x0800b94b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b338:	4b4f      	ldr	r3, [pc, #316]	@ (800b478 <tcp_process+0x298>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 0310 	and.w	r3, r3, #16
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 80e4 	beq.w	800b50e <tcp_process+0x32e>
 800b346:	4b4c      	ldr	r3, [pc, #304]	@ (800b478 <tcp_process+0x298>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	f003 0302 	and.w	r3, r3, #2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 80dd 	beq.w	800b50e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	4b48      	ldr	r3, [pc, #288]	@ (800b47c <tcp_process+0x29c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	429a      	cmp	r2, r3
 800b360:	f040 80d5 	bne.w	800b50e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b364:	4b46      	ldr	r3, [pc, #280]	@ (800b480 <tcp_process+0x2a0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b376:	4b41      	ldr	r3, [pc, #260]	@ (800b47c <tcp_process+0x29c>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b37e:	4b44      	ldr	r3, [pc, #272]	@ (800b490 <tcp_process+0x2b0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	89db      	ldrh	r3, [r3, #14]
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b398:	4b39      	ldr	r3, [pc, #228]	@ (800b480 <tcp_process+0x2a0>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	1e5a      	subs	r2, r3, #1
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f004 fb1b 	bl	800f9ec <ip4_route>
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	461a      	mov	r2, r3
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff f88c 	bl	800a4dc <tcp_eff_send_mss_netif>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3d0:	009a      	lsls	r2, r3, #2
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	bf38      	it	cc
 800b3e0:	460b      	movcc	r3, r1
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d204      	bcs.n	800b3f0 <tcp_process+0x210>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	e00d      	b.n	800b40c <tcp_process+0x22c>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d904      	bls.n	800b408 <tcp_process+0x228>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	b29b      	uxth	r3, r3
 800b406:	e001      	b.n	800b40c <tcp_process+0x22c>
 800b408:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <tcp_process+0x24a>
 800b41c:	4b13      	ldr	r3, [pc, #76]	@ (800b46c <tcp_process+0x28c>)
 800b41e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b422:	491c      	ldr	r1, [pc, #112]	@ (800b494 <tcp_process+0x2b4>)
 800b424:	4813      	ldr	r0, [pc, #76]	@ (800b474 <tcp_process+0x294>)
 800b426:	f005 fee3 	bl	80111f0 <iprintf>
        --pcb->snd_queuelen;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b430:	3b01      	subs	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b43e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d12a      	bne.n	800b49c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b44a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d106      	bne.n	800b460 <tcp_process+0x280>
 800b452:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <tcp_process+0x28c>)
 800b454:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b458:	490f      	ldr	r1, [pc, #60]	@ (800b498 <tcp_process+0x2b8>)
 800b45a:	4806      	ldr	r0, [pc, #24]	@ (800b474 <tcp_process+0x294>)
 800b45c:	f005 fec8 	bl	80111f0 <iprintf>
          pcb->unsent = rseg->next;
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b468:	e01c      	b.n	800b4a4 <tcp_process+0x2c4>
 800b46a:	bf00      	nop
 800b46c:	080133f0 	.word	0x080133f0
 800b470:	08013628 	.word	0x08013628
 800b474:	0801343c 	.word	0x0801343c
 800b478:	2000bdd0 	.word	0x2000bdd0
 800b47c:	2000bdc8 	.word	0x2000bdc8
 800b480:	2000bdc4 	.word	0x2000bdc4
 800b484:	08013644 	.word	0x08013644
 800b488:	2000bdd1 	.word	0x2000bdd1
 800b48c:	2000bd8c 	.word	0x2000bd8c
 800b490:	2000bdb4 	.word	0x2000bdb4
 800b494:	08013664 	.word	0x08013664
 800b498:	0801367c 	.word	0x0801367c
        } else {
          pcb->unacked = rseg->next;
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b4a4:	69f8      	ldr	r0, [r7, #28]
 800b4a6:	f7fe fd22 	bl	8009eee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4b8:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b4ba:	e006      	b.n	800b4ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00a      	beq.n	800b4ea <tcp_process+0x30a>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6910      	ldr	r0, [r2, #16]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	4798      	blx	r3
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	76bb      	strb	r3, [r7, #26]
 800b4e8:	e001      	b.n	800b4ee <tcp_process+0x30e>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b4ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4f2:	f113 0f0d 	cmn.w	r3, #13
 800b4f6:	d102      	bne.n	800b4fe <tcp_process+0x31e>
          return ERR_ABRT;
 800b4f8:	f06f 030c 	mvn.w	r3, #12
 800b4fc:	e250      	b.n	800b9a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	8b5b      	ldrh	r3, [r3, #26]
 800b502:	f043 0302 	orr.w	r3, r3, #2
 800b506:	b29a      	uxth	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b50c:	e23a      	b.n	800b984 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b50e:	4b98      	ldr	r3, [pc, #608]	@ (800b770 <tcp_process+0x590>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 0310 	and.w	r3, r3, #16
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 8234 	beq.w	800b984 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b51c:	4b95      	ldr	r3, [pc, #596]	@ (800b774 <tcp_process+0x594>)
 800b51e:	6819      	ldr	r1, [r3, #0]
 800b520:	4b95      	ldr	r3, [pc, #596]	@ (800b778 <tcp_process+0x598>)
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	4b95      	ldr	r3, [pc, #596]	@ (800b77c <tcp_process+0x59c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b52c:	4b94      	ldr	r3, [pc, #592]	@ (800b780 <tcp_process+0x5a0>)
 800b52e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b530:	885b      	ldrh	r3, [r3, #2]
 800b532:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b534:	4a92      	ldr	r2, [pc, #584]	@ (800b780 <tcp_process+0x5a0>)
 800b536:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b538:	8812      	ldrh	r2, [r2, #0]
 800b53a:	b292      	uxth	r2, r2
 800b53c:	9202      	str	r2, [sp, #8]
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	4b90      	ldr	r3, [pc, #576]	@ (800b784 <tcp_process+0x5a4>)
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	4b90      	ldr	r3, [pc, #576]	@ (800b788 <tcp_process+0x5a8>)
 800b546:	4602      	mov	r2, r0
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f002 fc7f 	bl	800de4c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b554:	2b05      	cmp	r3, #5
 800b556:	f200 8215 	bhi.w	800b984 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f002 fa4b 	bl	800d9fc <tcp_rexmit_rto>
      break;
 800b566:	e20d      	b.n	800b984 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b568:	4b81      	ldr	r3, [pc, #516]	@ (800b770 <tcp_process+0x590>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 80a1 	beq.w	800b6b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b576:	4b7f      	ldr	r3, [pc, #508]	@ (800b774 <tcp_process+0x594>)
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	3b01      	subs	r3, #1
 800b582:	2b00      	cmp	r3, #0
 800b584:	db7e      	blt.n	800b684 <tcp_process+0x4a4>
 800b586:	4b7b      	ldr	r3, [pc, #492]	@ (800b774 <tcp_process+0x594>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	dc77      	bgt.n	800b684 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2204      	movs	r2, #4
 800b598:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b5a2:	23fa      	movs	r3, #250	@ 0xfa
 800b5a4:	76bb      	strb	r3, [r7, #26]
 800b5a6:	e01d      	b.n	800b5e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <tcp_process+0x3e0>
 800b5b2:	4b76      	ldr	r3, [pc, #472]	@ (800b78c <tcp_process+0x5ac>)
 800b5b4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b5b8:	4975      	ldr	r1, [pc, #468]	@ (800b790 <tcp_process+0x5b0>)
 800b5ba:	4876      	ldr	r0, [pc, #472]	@ (800b794 <tcp_process+0x5b4>)
 800b5bc:	f005 fe18 	bl	80111f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <tcp_process+0x400>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6910      	ldr	r0, [r2, #16]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	4798      	blx	r3
 800b5da:	4603      	mov	r3, r0
 800b5dc:	76bb      	strb	r3, [r7, #26]
 800b5de:	e001      	b.n	800b5e4 <tcp_process+0x404>
 800b5e0:	23f0      	movs	r3, #240	@ 0xf0
 800b5e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b5e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00a      	beq.n	800b602 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b5ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b5f0:	f113 0f0d 	cmn.w	r3, #13
 800b5f4:	d002      	beq.n	800b5fc <tcp_process+0x41c>
              tcp_abort(pcb);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7fd ff8c 	bl	8009514 <tcp_abort>
            }
            return ERR_ABRT;
 800b5fc:	f06f 030c 	mvn.w	r3, #12
 800b600:	e1ce      	b.n	800b9a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fae0 	bl	800bbc8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b608:	4b63      	ldr	r3, [pc, #396]	@ (800b798 <tcp_process+0x5b8>)
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <tcp_process+0x43c>
            recv_acked--;
 800b610:	4b61      	ldr	r3, [pc, #388]	@ (800b798 <tcp_process+0x5b8>)
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	3b01      	subs	r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	4b5f      	ldr	r3, [pc, #380]	@ (800b798 <tcp_process+0x5b8>)
 800b61a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b620:	009a      	lsls	r2, r3, #2
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b62c:	428b      	cmp	r3, r1
 800b62e:	bf38      	it	cc
 800b630:	460b      	movcc	r3, r1
 800b632:	429a      	cmp	r2, r3
 800b634:	d204      	bcs.n	800b640 <tcp_process+0x460>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	e00d      	b.n	800b65c <tcp_process+0x47c>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d904      	bls.n	800b658 <tcp_process+0x478>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	b29b      	uxth	r3, r3
 800b656:	e001      	b.n	800b65c <tcp_process+0x47c>
 800b658:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b662:	4b4e      	ldr	r3, [pc, #312]	@ (800b79c <tcp_process+0x5bc>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	f003 0320 	and.w	r3, r3, #32
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d037      	beq.n	800b6de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8b5b      	ldrh	r3, [r3, #26]
 800b672:	f043 0302 	orr.w	r3, r3, #2
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2207      	movs	r2, #7
 800b680:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b682:	e02c      	b.n	800b6de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b684:	4b3b      	ldr	r3, [pc, #236]	@ (800b774 <tcp_process+0x594>)
 800b686:	6819      	ldr	r1, [r3, #0]
 800b688:	4b3b      	ldr	r3, [pc, #236]	@ (800b778 <tcp_process+0x598>)
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	461a      	mov	r2, r3
 800b68e:	4b3b      	ldr	r3, [pc, #236]	@ (800b77c <tcp_process+0x59c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b694:	4b3a      	ldr	r3, [pc, #232]	@ (800b780 <tcp_process+0x5a0>)
 800b696:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b698:	885b      	ldrh	r3, [r3, #2]
 800b69a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b69c:	4a38      	ldr	r2, [pc, #224]	@ (800b780 <tcp_process+0x5a0>)
 800b69e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6a0:	8812      	ldrh	r2, [r2, #0]
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	9202      	str	r2, [sp, #8]
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	4b36      	ldr	r3, [pc, #216]	@ (800b784 <tcp_process+0x5a4>)
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	4b36      	ldr	r3, [pc, #216]	@ (800b788 <tcp_process+0x5a8>)
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f002 fbcb 	bl	800de4c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b6b6:	e167      	b.n	800b988 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b6b8:	4b2d      	ldr	r3, [pc, #180]	@ (800b770 <tcp_process+0x590>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 8161 	beq.w	800b988 <tcp_process+0x7a8>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ca:	1e5a      	subs	r2, r3, #1
 800b6cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b77c <tcp_process+0x59c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	f040 8159 	bne.w	800b988 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f002 f9b2 	bl	800da40 <tcp_rexmit>
      break;
 800b6dc:	e154      	b.n	800b988 <tcp_process+0x7a8>
 800b6de:	e153      	b.n	800b988 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fa71 	bl	800bbc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b6e6:	4b2d      	ldr	r3, [pc, #180]	@ (800b79c <tcp_process+0x5bc>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	f003 0320 	and.w	r3, r3, #32
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 814c 	beq.w	800b98c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8b5b      	ldrh	r3, [r3, #26]
 800b6f8:	f043 0302 	orr.w	r3, r3, #2
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2207      	movs	r2, #7
 800b706:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b708:	e140      	b.n	800b98c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fa5c 	bl	800bbc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b710:	4b22      	ldr	r3, [pc, #136]	@ (800b79c <tcp_process+0x5bc>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	f003 0320 	and.w	r3, r3, #32
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d071      	beq.n	800b800 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b71c:	4b14      	ldr	r3, [pc, #80]	@ (800b770 <tcp_process+0x590>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	f003 0310 	and.w	r3, r3, #16
 800b724:	2b00      	cmp	r3, #0
 800b726:	d060      	beq.n	800b7ea <tcp_process+0x60a>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b72c:	4b11      	ldr	r3, [pc, #68]	@ (800b774 <tcp_process+0x594>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d15a      	bne.n	800b7ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d156      	bne.n	800b7ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	8b5b      	ldrh	r3, [r3, #26]
 800b740:	f043 0302 	orr.w	r3, r3, #2
 800b744:	b29a      	uxth	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fe fdbc 	bl	800a2c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b750:	4b13      	ldr	r3, [pc, #76]	@ (800b7a0 <tcp_process+0x5c0>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d105      	bne.n	800b766 <tcp_process+0x586>
 800b75a:	4b11      	ldr	r3, [pc, #68]	@ (800b7a0 <tcp_process+0x5c0>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	4a0f      	ldr	r2, [pc, #60]	@ (800b7a0 <tcp_process+0x5c0>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	e02e      	b.n	800b7c4 <tcp_process+0x5e4>
 800b766:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a0 <tcp_process+0x5c0>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e027      	b.n	800b7be <tcp_process+0x5de>
 800b76e:	bf00      	nop
 800b770:	2000bdd0 	.word	0x2000bdd0
 800b774:	2000bdc8 	.word	0x2000bdc8
 800b778:	2000bdce 	.word	0x2000bdce
 800b77c:	2000bdc4 	.word	0x2000bdc4
 800b780:	2000bdb4 	.word	0x2000bdb4
 800b784:	20008c9c 	.word	0x20008c9c
 800b788:	20008ca0 	.word	0x20008ca0
 800b78c:	080133f0 	.word	0x080133f0
 800b790:	08013690 	.word	0x08013690
 800b794:	0801343c 	.word	0x0801343c
 800b798:	2000bdcc 	.word	0x2000bdcc
 800b79c:	2000bdd1 	.word	0x2000bdd1
 800b7a0:	2000bd98 	.word	0x2000bd98
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d104      	bne.n	800b7b8 <tcp_process+0x5d8>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	60da      	str	r2, [r3, #12]
 800b7b6:	e005      	b.n	800b7c4 <tcp_process+0x5e4>
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	617b      	str	r3, [r7, #20]
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1ef      	bne.n	800b7a4 <tcp_process+0x5c4>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	60da      	str	r2, [r3, #12]
 800b7ca:	4b77      	ldr	r3, [pc, #476]	@ (800b9a8 <tcp_process+0x7c8>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	220a      	movs	r2, #10
 800b7d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b7d6:	4b75      	ldr	r3, [pc, #468]	@ (800b9ac <tcp_process+0x7cc>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60da      	str	r2, [r3, #12]
 800b7de:	4a73      	ldr	r2, [pc, #460]	@ (800b9ac <tcp_process+0x7cc>)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	f002 fcf4 	bl	800e1d0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b7e8:	e0d2      	b.n	800b990 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8b5b      	ldrh	r3, [r3, #26]
 800b7ee:	f043 0302 	orr.w	r3, r3, #2
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2208      	movs	r2, #8
 800b7fc:	751a      	strb	r2, [r3, #20]
      break;
 800b7fe:	e0c7      	b.n	800b990 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b800:	4b6b      	ldr	r3, [pc, #428]	@ (800b9b0 <tcp_process+0x7d0>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f003 0310 	and.w	r3, r3, #16
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80c1 	beq.w	800b990 <tcp_process+0x7b0>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b812:	4b68      	ldr	r3, [pc, #416]	@ (800b9b4 <tcp_process+0x7d4>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	f040 80ba 	bne.w	800b990 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b820:	2b00      	cmp	r3, #0
 800b822:	f040 80b5 	bne.w	800b990 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2206      	movs	r2, #6
 800b82a:	751a      	strb	r2, [r3, #20]
      break;
 800b82c:	e0b0      	b.n	800b990 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9ca 	bl	800bbc8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b834:	4b60      	ldr	r3, [pc, #384]	@ (800b9b8 <tcp_process+0x7d8>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	f003 0320 	and.w	r3, r3, #32
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 80a9 	beq.w	800b994 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	8b5b      	ldrh	r3, [r3, #26]
 800b846:	f043 0302 	orr.w	r3, r3, #2
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7fe fd39 	bl	800a2c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b856:	4b59      	ldr	r3, [pc, #356]	@ (800b9bc <tcp_process+0x7dc>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d105      	bne.n	800b86c <tcp_process+0x68c>
 800b860:	4b56      	ldr	r3, [pc, #344]	@ (800b9bc <tcp_process+0x7dc>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	4a55      	ldr	r2, [pc, #340]	@ (800b9bc <tcp_process+0x7dc>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e013      	b.n	800b894 <tcp_process+0x6b4>
 800b86c:	4b53      	ldr	r3, [pc, #332]	@ (800b9bc <tcp_process+0x7dc>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	613b      	str	r3, [r7, #16]
 800b872:	e00c      	b.n	800b88e <tcp_process+0x6ae>
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d104      	bne.n	800b888 <tcp_process+0x6a8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	60da      	str	r2, [r3, #12]
 800b886:	e005      	b.n	800b894 <tcp_process+0x6b4>
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	613b      	str	r3, [r7, #16]
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1ef      	bne.n	800b874 <tcp_process+0x694>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	60da      	str	r2, [r3, #12]
 800b89a:	4b43      	ldr	r3, [pc, #268]	@ (800b9a8 <tcp_process+0x7c8>)
 800b89c:	2201      	movs	r2, #1
 800b89e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	220a      	movs	r2, #10
 800b8a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b8a6:	4b41      	ldr	r3, [pc, #260]	@ (800b9ac <tcp_process+0x7cc>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60da      	str	r2, [r3, #12]
 800b8ae:	4a3f      	ldr	r2, [pc, #252]	@ (800b9ac <tcp_process+0x7cc>)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	f002 fc8c 	bl	800e1d0 <tcp_timer_needed>
      }
      break;
 800b8b8:	e06c      	b.n	800b994 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f984 	bl	800bbc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b8c0:	4b3b      	ldr	r3, [pc, #236]	@ (800b9b0 <tcp_process+0x7d0>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d065      	beq.n	800b998 <tcp_process+0x7b8>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b8d0:	4b38      	ldr	r3, [pc, #224]	@ (800b9b4 <tcp_process+0x7d4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d15f      	bne.n	800b998 <tcp_process+0x7b8>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d15b      	bne.n	800b998 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7fe fcf1 	bl	800a2c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b8e6:	4b35      	ldr	r3, [pc, #212]	@ (800b9bc <tcp_process+0x7dc>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d105      	bne.n	800b8fc <tcp_process+0x71c>
 800b8f0:	4b32      	ldr	r3, [pc, #200]	@ (800b9bc <tcp_process+0x7dc>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4a31      	ldr	r2, [pc, #196]	@ (800b9bc <tcp_process+0x7dc>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	e013      	b.n	800b924 <tcp_process+0x744>
 800b8fc:	4b2f      	ldr	r3, [pc, #188]	@ (800b9bc <tcp_process+0x7dc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	e00c      	b.n	800b91e <tcp_process+0x73e>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d104      	bne.n	800b918 <tcp_process+0x738>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68da      	ldr	r2, [r3, #12]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	60da      	str	r2, [r3, #12]
 800b916:	e005      	b.n	800b924 <tcp_process+0x744>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1ef      	bne.n	800b904 <tcp_process+0x724>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	60da      	str	r2, [r3, #12]
 800b92a:	4b1f      	ldr	r3, [pc, #124]	@ (800b9a8 <tcp_process+0x7c8>)
 800b92c:	2201      	movs	r2, #1
 800b92e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	220a      	movs	r2, #10
 800b934:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b936:	4b1d      	ldr	r3, [pc, #116]	@ (800b9ac <tcp_process+0x7cc>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60da      	str	r2, [r3, #12]
 800b93e:	4a1b      	ldr	r2, [pc, #108]	@ (800b9ac <tcp_process+0x7cc>)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	f002 fc44 	bl	800e1d0 <tcp_timer_needed>
      }
      break;
 800b948:	e026      	b.n	800b998 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f93c 	bl	800bbc8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b950:	4b17      	ldr	r3, [pc, #92]	@ (800b9b0 <tcp_process+0x7d0>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	f003 0310 	and.w	r3, r3, #16
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01f      	beq.n	800b99c <tcp_process+0x7bc>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b960:	4b14      	ldr	r3, [pc, #80]	@ (800b9b4 <tcp_process+0x7d4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d119      	bne.n	800b99c <tcp_process+0x7bc>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d115      	bne.n	800b99c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b970:	4b11      	ldr	r3, [pc, #68]	@ (800b9b8 <tcp_process+0x7d8>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	f043 0310 	orr.w	r3, r3, #16
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <tcp_process+0x7d8>)
 800b97c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b97e:	e00d      	b.n	800b99c <tcp_process+0x7bc>
    default:
      break;
 800b980:	bf00      	nop
 800b982:	e00c      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b984:	bf00      	nop
 800b986:	e00a      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b988:	bf00      	nop
 800b98a:	e008      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b98c:	bf00      	nop
 800b98e:	e006      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b990:	bf00      	nop
 800b992:	e004      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b994:	bf00      	nop
 800b996:	e002      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b998:	bf00      	nop
 800b99a:	e000      	b.n	800b99e <tcp_process+0x7be>
      break;
 800b99c:	bf00      	nop
  }
  return ERR_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3724      	adds	r7, #36	@ 0x24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd90      	pop	{r4, r7, pc}
 800b9a8:	2000bda0 	.word	0x2000bda0
 800b9ac:	2000bd9c 	.word	0x2000bd9c
 800b9b0:	2000bdd0 	.word	0x2000bdd0
 800b9b4:	2000bdc8 	.word	0x2000bdc8
 800b9b8:	2000bdd1 	.word	0x2000bdd1
 800b9bc:	2000bd98 	.word	0x2000bd98

0800b9c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b9c0:	b590      	push	{r4, r7, lr}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <tcp_oos_insert_segment+0x1e>
 800b9d0:	4b3b      	ldr	r3, [pc, #236]	@ (800bac0 <tcp_oos_insert_segment+0x100>)
 800b9d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b9d6:	493b      	ldr	r1, [pc, #236]	@ (800bac4 <tcp_oos_insert_segment+0x104>)
 800b9d8:	483b      	ldr	r0, [pc, #236]	@ (800bac8 <tcp_oos_insert_segment+0x108>)
 800b9da:	f005 fc09 	bl	80111f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	899b      	ldrh	r3, [r3, #12]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fb fc12 	bl	8007210 <lwip_htons>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d028      	beq.n	800ba4a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b9f8:	6838      	ldr	r0, [r7, #0]
 800b9fa:	f7fe fa63 	bl	8009ec4 <tcp_segs_free>
    next = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	603b      	str	r3, [r7, #0]
 800ba02:	e056      	b.n	800bab2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	899b      	ldrh	r3, [r3, #12]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fb fbff 	bl	8007210 <lwip_htons>
 800ba12:	4603      	mov	r3, r0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00d      	beq.n	800ba3a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	899b      	ldrh	r3, [r3, #12]
 800ba24:	b29c      	uxth	r4, r3
 800ba26:	2001      	movs	r0, #1
 800ba28:	f7fb fbf2 	bl	8007210 <lwip_htons>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	461a      	mov	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	4322      	orrs	r2, r4
 800ba36:	b292      	uxth	r2, r2
 800ba38:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f7fe fa52 	bl	8009eee <tcp_seg_free>
    while (next &&
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00e      	beq.n	800ba6e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	461a      	mov	r2, r3
 800ba56:	4b1d      	ldr	r3, [pc, #116]	@ (800bacc <tcp_oos_insert_segment+0x10c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	441a      	add	r2, r3
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	8909      	ldrh	r1, [r1, #8]
 800ba66:	440b      	add	r3, r1
 800ba68:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	daca      	bge.n	800ba04 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d01e      	beq.n	800bab2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	891b      	ldrh	r3, [r3, #8]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	4b14      	ldr	r3, [pc, #80]	@ (800bacc <tcp_oos_insert_segment+0x10c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	441a      	add	r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	dd12      	ble.n	800bab2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	4b0d      	ldr	r3, [pc, #52]	@ (800bacc <tcp_oos_insert_segment+0x10c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	891b      	ldrh	r3, [r3, #8]
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f7fc fe17 	bl	80086e0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	601a      	str	r2, [r3, #0]
}
 800bab8:	bf00      	nop
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}
 800bac0:	080133f0 	.word	0x080133f0
 800bac4:	080136b0 	.word	0x080136b0
 800bac8:	0801343c 	.word	0x0801343c
 800bacc:	2000bdc4 	.word	0x2000bdc4

0800bad0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bade:	e03e      	b.n	800bb5e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fd f80a 	bl	8008b08 <pbuf_clen>
 800baf4:	4603      	mov	r3, r0
 800baf6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bafe:	8a7a      	ldrh	r2, [r7, #18]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d906      	bls.n	800bb12 <tcp_free_acked_segments+0x42>
 800bb04:	4b2a      	ldr	r3, [pc, #168]	@ (800bbb0 <tcp_free_acked_segments+0xe0>)
 800bb06:	f240 4257 	movw	r2, #1111	@ 0x457
 800bb0a:	492a      	ldr	r1, [pc, #168]	@ (800bbb4 <tcp_free_acked_segments+0xe4>)
 800bb0c:	482a      	ldr	r0, [pc, #168]	@ (800bbb8 <tcp_free_acked_segments+0xe8>)
 800bb0e:	f005 fb6f 	bl	80111f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bb18:	8a7b      	ldrh	r3, [r7, #18]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	891a      	ldrh	r2, [r3, #8]
 800bb28:	4b24      	ldr	r3, [pc, #144]	@ (800bbbc <tcp_free_acked_segments+0xec>)
 800bb2a:	881b      	ldrh	r3, [r3, #0]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	4b22      	ldr	r3, [pc, #136]	@ (800bbbc <tcp_free_acked_segments+0xec>)
 800bb32:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bb34:	6978      	ldr	r0, [r7, #20]
 800bb36:	f7fe f9da 	bl	8009eee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00c      	beq.n	800bb5e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d109      	bne.n	800bb5e <tcp_free_acked_segments+0x8e>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d106      	bne.n	800bb5e <tcp_free_acked_segments+0x8e>
 800bb50:	4b17      	ldr	r3, [pc, #92]	@ (800bbb0 <tcp_free_acked_segments+0xe0>)
 800bb52:	f240 4261 	movw	r2, #1121	@ 0x461
 800bb56:	491a      	ldr	r1, [pc, #104]	@ (800bbc0 <tcp_free_acked_segments+0xf0>)
 800bb58:	4817      	ldr	r0, [pc, #92]	@ (800bbb8 <tcp_free_acked_segments+0xe8>)
 800bb5a:	f005 fb49 	bl	80111f0 <iprintf>
  while (seg_list != NULL &&
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d020      	beq.n	800bba6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fb fb65 	bl	800723a <lwip_htonl>
 800bb70:	4604      	mov	r4, r0
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	461d      	mov	r5, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	899b      	ldrh	r3, [r3, #12]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fb fb45 	bl	8007210 <lwip_htons>
 800bb86:	4603      	mov	r3, r0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f003 0303 	and.w	r3, r3, #3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <tcp_free_acked_segments+0xc6>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <tcp_free_acked_segments+0xc8>
 800bb96:	2300      	movs	r3, #0
 800bb98:	442b      	add	r3, r5
 800bb9a:	18e2      	adds	r2, r4, r3
 800bb9c:	4b09      	ldr	r3, [pc, #36]	@ (800bbc4 <tcp_free_acked_segments+0xf4>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	dd9c      	ble.n	800bae0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bba6:	68bb      	ldr	r3, [r7, #8]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bdb0      	pop	{r4, r5, r7, pc}
 800bbb0:	080133f0 	.word	0x080133f0
 800bbb4:	080136d8 	.word	0x080136d8
 800bbb8:	0801343c 	.word	0x0801343c
 800bbbc:	2000bdcc 	.word	0x2000bdcc
 800bbc0:	08013700 	.word	0x08013700
 800bbc4:	2000bdc8 	.word	0x2000bdc8

0800bbc8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bbc8:	b5b0      	push	{r4, r5, r7, lr}
 800bbca:	b094      	sub	sp, #80	@ 0x50
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <tcp_receive+0x20>
 800bbda:	4b91      	ldr	r3, [pc, #580]	@ (800be20 <tcp_receive+0x258>)
 800bbdc:	f240 427b 	movw	r2, #1147	@ 0x47b
 800bbe0:	4990      	ldr	r1, [pc, #576]	@ (800be24 <tcp_receive+0x25c>)
 800bbe2:	4891      	ldr	r0, [pc, #580]	@ (800be28 <tcp_receive+0x260>)
 800bbe4:	f005 fb04 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7d1b      	ldrb	r3, [r3, #20]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d806      	bhi.n	800bbfe <tcp_receive+0x36>
 800bbf0:	4b8b      	ldr	r3, [pc, #556]	@ (800be20 <tcp_receive+0x258>)
 800bbf2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800bbf6:	498d      	ldr	r1, [pc, #564]	@ (800be2c <tcp_receive+0x264>)
 800bbf8:	488b      	ldr	r0, [pc, #556]	@ (800be28 <tcp_receive+0x260>)
 800bbfa:	f005 faf9 	bl	80111f0 <iprintf>

  if (flags & TCP_ACK) {
 800bbfe:	4b8c      	ldr	r3, [pc, #560]	@ (800be30 <tcp_receive+0x268>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 0310 	and.w	r3, r3, #16
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f000 8264 	beq.w	800c0d4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc12:	461a      	mov	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc18:	4413      	add	r3, r2
 800bc1a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc20:	4b84      	ldr	r3, [pc, #528]	@ (800be34 <tcp_receive+0x26c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	db1b      	blt.n	800bc62 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc2e:	4b81      	ldr	r3, [pc, #516]	@ (800be34 <tcp_receive+0x26c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d106      	bne.n	800bc44 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc3a:	4b7f      	ldr	r3, [pc, #508]	@ (800be38 <tcp_receive+0x270>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	db0e      	blt.n	800bc62 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc48:	4b7b      	ldr	r3, [pc, #492]	@ (800be38 <tcp_receive+0x270>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d125      	bne.n	800bc9c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc50:	4b7a      	ldr	r3, [pc, #488]	@ (800be3c <tcp_receive+0x274>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	89db      	ldrh	r3, [r3, #14]
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d91c      	bls.n	800bc9c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bc62:	4b76      	ldr	r3, [pc, #472]	@ (800be3c <tcp_receive+0x274>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	89db      	ldrh	r3, [r3, #14]
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d205      	bcs.n	800bc8c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bc8c:	4b69      	ldr	r3, [pc, #420]	@ (800be34 <tcp_receive+0x26c>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bc94:	4b68      	ldr	r3, [pc, #416]	@ (800be38 <tcp_receive+0x270>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bc9c:	4b66      	ldr	r3, [pc, #408]	@ (800be38 <tcp_receive+0x270>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dc58      	bgt.n	800bd5c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bcaa:	4b65      	ldr	r3, [pc, #404]	@ (800be40 <tcp_receive+0x278>)
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d14b      	bne.n	800bd4a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bcbc:	4413      	add	r3, r2
 800bcbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d142      	bne.n	800bd4a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	db3d      	blt.n	800bd4a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcd2:	4b59      	ldr	r3, [pc, #356]	@ (800be38 <tcp_receive+0x270>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d137      	bne.n	800bd4a <tcp_receive+0x182>
              found_dupack = 1;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bce4:	2bff      	cmp	r3, #255	@ 0xff
 800bce6:	d007      	beq.n	800bcf8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcee:	3301      	adds	r3, #1
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	d91b      	bls.n	800bd3a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd0c:	4413      	add	r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d30a      	bcc.n	800bd30 <tcp_receive+0x168>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd24:	4413      	add	r3, r2
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bd2e:	e004      	b.n	800bd3a <tcp_receive+0x172>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd36:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d902      	bls.n	800bd4a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 fee7 	bl	800db18 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bd4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f040 8161 	bne.w	800c014 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd5a:	e15b      	b.n	800c014 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd5c:	4b36      	ldr	r3, [pc, #216]	@ (800be38 <tcp_receive+0x270>)
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	3b01      	subs	r3, #1
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f2c0 814e 	blt.w	800c00a <tcp_receive+0x442>
 800bd6e:	4b32      	ldr	r3, [pc, #200]	@ (800be38 <tcp_receive+0x270>)
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f300 8146 	bgt.w	800c00a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	8b5b      	ldrh	r3, [r3, #26]
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d010      	beq.n	800bdac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	8b5b      	ldrh	r3, [r3, #26]
 800bd8e:	f023 0304 	bic.w	r3, r3, #4
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bdba:	10db      	asrs	r3, r3, #3
 800bdbc:	b21b      	sxth	r3, r3
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	b21a      	sxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bdd4:	4b18      	ldr	r3, [pc, #96]	@ (800be38 <tcp_receive+0x270>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800bdec:	4b12      	ldr	r3, [pc, #72]	@ (800be38 <tcp_receive+0x270>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	7d1b      	ldrb	r3, [r3, #20]
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	f240 8097 	bls.w	800bf2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d245      	bcs.n	800be9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	8b5b      	ldrh	r3, [r3, #26]
 800be12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be16:	2b00      	cmp	r3, #0
 800be18:	d014      	beq.n	800be44 <tcp_receive+0x27c>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e013      	b.n	800be46 <tcp_receive+0x27e>
 800be1e:	bf00      	nop
 800be20:	080133f0 	.word	0x080133f0
 800be24:	08013720 	.word	0x08013720
 800be28:	0801343c 	.word	0x0801343c
 800be2c:	0801373c 	.word	0x0801373c
 800be30:	2000bdd0 	.word	0x2000bdd0
 800be34:	2000bdc4 	.word	0x2000bdc4
 800be38:	2000bdc8 	.word	0x2000bdc8
 800be3c:	2000bdb4 	.word	0x2000bdb4
 800be40:	2000bdce 	.word	0x2000bdce
 800be44:	2302      	movs	r3, #2
 800be46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800be4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800be4e:	b29a      	uxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be54:	fb12 f303 	smulbb	r3, r2, r3
 800be58:	b29b      	uxth	r3, r3
 800be5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be5c:	4293      	cmp	r3, r2
 800be5e:	bf28      	it	cs
 800be60:	4613      	movcs	r3, r2
 800be62:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be6c:	4413      	add	r3, r2
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800be76:	429a      	cmp	r2, r3
 800be78:	d309      	bcc.n	800be8e <tcp_receive+0x2c6>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be82:	4413      	add	r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800be8c:	e04e      	b.n	800bf2c <tcp_receive+0x364>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800be98:	e048      	b.n	800bf2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bea0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bea2:	4413      	add	r3, r2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beac:	429a      	cmp	r2, r3
 800beae:	d309      	bcc.n	800bec4 <tcp_receive+0x2fc>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800beb6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800beb8:	4413      	add	r3, r2
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bec2:	e004      	b.n	800bece <tcp_receive+0x306>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800beca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800beda:	429a      	cmp	r2, r3
 800bedc:	d326      	bcc.n	800bf2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	b29a      	uxth	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800befe:	4413      	add	r3, r2
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d30a      	bcc.n	800bf22 <tcp_receive+0x35a>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf16:	4413      	add	r3, r2
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bf20:	e004      	b.n	800bf2c <tcp_receive+0x364>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf34:	4a98      	ldr	r2, [pc, #608]	@ (800c198 <tcp_receive+0x5d0>)
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff fdca 	bl	800bad0 <tcp_free_acked_segments>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf4a:	4a94      	ldr	r2, [pc, #592]	@ (800c19c <tcp_receive+0x5d4>)
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff fdbf 	bl	800bad0 <tcp_free_acked_segments>
 800bf52:	4602      	mov	r2, r0
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d104      	bne.n	800bf6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf66:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bf68:	e002      	b.n	800bf70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d103      	bne.n	800bf86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bf8c:	4b84      	ldr	r3, [pc, #528]	@ (800c1a0 <tcp_receive+0x5d8>)
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	4413      	add	r3, r2
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	8b5b      	ldrh	r3, [r3, #26]
 800bf9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d035      	beq.n	800c012 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d118      	bne.n	800bfe0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00c      	beq.n	800bfd0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fb f939 	bl	800723a <lwip_htonl>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	dc20      	bgt.n	800c012 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	8b5b      	ldrh	r3, [r3, #26]
 800bfd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfde:	e018      	b.n	800c012 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fb f924 	bl	800723a <lwip_htonl>
 800bff2:	4603      	mov	r3, r0
 800bff4:	1ae3      	subs	r3, r4, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	dc0b      	bgt.n	800c012 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8b5b      	ldrh	r3, [r3, #26]
 800bffe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c002:	b29a      	uxth	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c008:	e003      	b.n	800c012 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 ff70 	bl	800def0 <tcp_send_empty_ack>
 800c010:	e000      	b.n	800c014 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c012:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d05b      	beq.n	800c0d4 <tcp_receive+0x50c>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c020:	4b60      	ldr	r3, [pc, #384]	@ (800c1a4 <tcp_receive+0x5dc>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	da54      	bge.n	800c0d4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c02a:	4b5f      	ldr	r3, [pc, #380]	@ (800c1a8 <tcp_receive+0x5e0>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c034:	b29b      	uxth	r3, r3
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	b29b      	uxth	r3, r3
 800c03a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c03e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c048:	10db      	asrs	r3, r3, #3
 800c04a:	b21b      	sxth	r3, r3
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	b29b      	uxth	r3, r3
 800c052:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c062:	4413      	add	r3, r2
 800c064:	b29b      	uxth	r3, r3
 800c066:	b21a      	sxth	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c06c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c070:	2b00      	cmp	r3, #0
 800c072:	da05      	bge.n	800c080 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c078:	425b      	negs	r3, r3
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c080:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c08a:	109b      	asrs	r3, r3, #2
 800c08c:	b21b      	sxth	r3, r3
 800c08e:	b29b      	uxth	r3, r3
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	b29b      	uxth	r3, r3
 800c094:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	b21a      	sxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c0b4:	10db      	asrs	r3, r3, #3
 800c0b6:	b21b      	sxth	r3, r3
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4413      	add	r3, r2
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	b21a      	sxth	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c0d4:	4b35      	ldr	r3, [pc, #212]	@ (800c1ac <tcp_receive+0x5e4>)
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 84df 	beq.w	800ca9c <tcp_receive+0xed4>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7d1b      	ldrb	r3, [r3, #20]
 800c0e2:	2b06      	cmp	r3, #6
 800c0e4:	f200 84da 	bhi.w	800ca9c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ec:	4b30      	ldr	r3, [pc, #192]	@ (800c1b0 <tcp_receive+0x5e8>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f2c0 808f 	blt.w	800c218 <tcp_receive+0x650>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0fe:	4b2b      	ldr	r3, [pc, #172]	@ (800c1ac <tcp_receive+0x5e4>)
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	4619      	mov	r1, r3
 800c104:	4b2a      	ldr	r3, [pc, #168]	@ (800c1b0 <tcp_receive+0x5e8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	440b      	add	r3, r1
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	3301      	adds	r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f300 8082 	bgt.w	800c218 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c114:	4b27      	ldr	r3, [pc, #156]	@ (800c1b4 <tcp_receive+0x5ec>)
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c11e:	4b24      	ldr	r3, [pc, #144]	@ (800c1b0 <tcp_receive+0x5e8>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c126:	4b23      	ldr	r3, [pc, #140]	@ (800c1b4 <tcp_receive+0x5ec>)
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <tcp_receive+0x574>
 800c12e:	4b22      	ldr	r3, [pc, #136]	@ (800c1b8 <tcp_receive+0x5f0>)
 800c130:	f240 5294 	movw	r2, #1428	@ 0x594
 800c134:	4921      	ldr	r1, [pc, #132]	@ (800c1bc <tcp_receive+0x5f4>)
 800c136:	4822      	ldr	r0, [pc, #136]	@ (800c1c0 <tcp_receive+0x5f8>)
 800c138:	f005 f85a 	bl	80111f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c142:	4293      	cmp	r3, r2
 800c144:	d906      	bls.n	800c154 <tcp_receive+0x58c>
 800c146:	4b1c      	ldr	r3, [pc, #112]	@ (800c1b8 <tcp_receive+0x5f0>)
 800c148:	f240 5295 	movw	r2, #1429	@ 0x595
 800c14c:	491d      	ldr	r1, [pc, #116]	@ (800c1c4 <tcp_receive+0x5fc>)
 800c14e:	481c      	ldr	r0, [pc, #112]	@ (800c1c0 <tcp_receive+0x5f8>)
 800c150:	f005 f84e 	bl	80111f0 <iprintf>
      off = (u16_t)off32;
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c15a:	4b16      	ldr	r3, [pc, #88]	@ (800c1b4 <tcp_receive+0x5ec>)
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	891b      	ldrh	r3, [r3, #8]
 800c160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c164:	429a      	cmp	r2, r3
 800c166:	d906      	bls.n	800c176 <tcp_receive+0x5ae>
 800c168:	4b13      	ldr	r3, [pc, #76]	@ (800c1b8 <tcp_receive+0x5f0>)
 800c16a:	f240 5297 	movw	r2, #1431	@ 0x597
 800c16e:	4916      	ldr	r1, [pc, #88]	@ (800c1c8 <tcp_receive+0x600>)
 800c170:	4813      	ldr	r0, [pc, #76]	@ (800c1c0 <tcp_receive+0x5f8>)
 800c172:	f005 f83d 	bl	80111f0 <iprintf>
      inseg.len -= off;
 800c176:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b4 <tcp_receive+0x5ec>)
 800c178:	891a      	ldrh	r2, [r3, #8]
 800c17a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	b29a      	uxth	r2, r3
 800c182:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b4 <tcp_receive+0x5ec>)
 800c184:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c186:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b4 <tcp_receive+0x5ec>)
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	891a      	ldrh	r2, [r3, #8]
 800c18c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c194:	e02a      	b.n	800c1ec <tcp_receive+0x624>
 800c196:	bf00      	nop
 800c198:	08013758 	.word	0x08013758
 800c19c:	08013760 	.word	0x08013760
 800c1a0:	2000bdcc 	.word	0x2000bdcc
 800c1a4:	2000bdc8 	.word	0x2000bdc8
 800c1a8:	2000bd8c 	.word	0x2000bd8c
 800c1ac:	2000bdce 	.word	0x2000bdce
 800c1b0:	2000bdc4 	.word	0x2000bdc4
 800c1b4:	2000bda4 	.word	0x2000bda4
 800c1b8:	080133f0 	.word	0x080133f0
 800c1bc:	08013768 	.word	0x08013768
 800c1c0:	0801343c 	.word	0x0801343c
 800c1c4:	08013778 	.word	0x08013778
 800c1c8:	08013788 	.word	0x08013788
        off -= p->len;
 800c1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ce:	895b      	ldrh	r3, [r3, #10]
 800c1d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c1da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c1de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ee:	895b      	ldrh	r3, [r3, #10]
 800c1f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d8e9      	bhi.n	800c1cc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c1f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c200:	f7fc fb6e 	bl	80088e0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c208:	4a90      	ldr	r2, [pc, #576]	@ (800c44c <tcp_receive+0x884>)
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	4b90      	ldr	r3, [pc, #576]	@ (800c450 <tcp_receive+0x888>)
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	4a8e      	ldr	r2, [pc, #568]	@ (800c44c <tcp_receive+0x884>)
 800c212:	6812      	ldr	r2, [r2, #0]
 800c214:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c216:	e00d      	b.n	800c234 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c218:	4b8c      	ldr	r3, [pc, #560]	@ (800c44c <tcp_receive+0x884>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	da06      	bge.n	800c234 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	8b5b      	ldrh	r3, [r3, #26]
 800c22a:	f043 0302 	orr.w	r3, r3, #2
 800c22e:	b29a      	uxth	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c234:	4b85      	ldr	r3, [pc, #532]	@ (800c44c <tcp_receive+0x884>)
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f2c0 8427 	blt.w	800ca92 <tcp_receive+0xeca>
 800c244:	4b81      	ldr	r3, [pc, #516]	@ (800c44c <tcp_receive+0x884>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c250:	440b      	add	r3, r1
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	3301      	adds	r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	f300 841b 	bgt.w	800ca92 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c260:	4b7a      	ldr	r3, [pc, #488]	@ (800c44c <tcp_receive+0x884>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	f040 8298 	bne.w	800c79a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c26a:	4b79      	ldr	r3, [pc, #484]	@ (800c450 <tcp_receive+0x888>)
 800c26c:	891c      	ldrh	r4, [r3, #8]
 800c26e:	4b78      	ldr	r3, [pc, #480]	@ (800c450 <tcp_receive+0x888>)
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	899b      	ldrh	r3, [r3, #12]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f7fa ffca 	bl	8007210 <lwip_htons>
 800c27c:	4603      	mov	r3, r0
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <tcp_receive+0x6c4>
 800c288:	2301      	movs	r3, #1
 800c28a:	e000      	b.n	800c28e <tcp_receive+0x6c6>
 800c28c:	2300      	movs	r3, #0
 800c28e:	4423      	add	r3, r4
 800c290:	b29a      	uxth	r2, r3
 800c292:	4b70      	ldr	r3, [pc, #448]	@ (800c454 <tcp_receive+0x88c>)
 800c294:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c29a:	4b6e      	ldr	r3, [pc, #440]	@ (800c454 <tcp_receive+0x88c>)
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d274      	bcs.n	800c38c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c2a2:	4b6b      	ldr	r3, [pc, #428]	@ (800c450 <tcp_receive+0x888>)
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	899b      	ldrh	r3, [r3, #12]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fa ffb0 	bl	8007210 <lwip_htons>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0301 	and.w	r3, r3, #1
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01e      	beq.n	800c2fa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c2bc:	4b64      	ldr	r3, [pc, #400]	@ (800c450 <tcp_receive+0x888>)
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	899b      	ldrh	r3, [r3, #12]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	b21b      	sxth	r3, r3
 800c2c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2ca:	b21c      	sxth	r4, r3
 800c2cc:	4b60      	ldr	r3, [pc, #384]	@ (800c450 <tcp_receive+0x888>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	899b      	ldrh	r3, [r3, #12]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fa ff9b 	bl	8007210 <lwip_htons>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fa ff93 	bl	8007210 <lwip_htons>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	b21b      	sxth	r3, r3
 800c2ee:	4323      	orrs	r3, r4
 800c2f0:	b21a      	sxth	r2, r3
 800c2f2:	4b57      	ldr	r3, [pc, #348]	@ (800c450 <tcp_receive+0x888>)
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	b292      	uxth	r2, r2
 800c2f8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c2fe:	4b54      	ldr	r3, [pc, #336]	@ (800c450 <tcp_receive+0x888>)
 800c300:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c302:	4b53      	ldr	r3, [pc, #332]	@ (800c450 <tcp_receive+0x888>)
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	899b      	ldrh	r3, [r3, #12]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fa ff80 	bl	8007210 <lwip_htons>
 800c310:	4603      	mov	r3, r0
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d005      	beq.n	800c328 <tcp_receive+0x760>
            inseg.len -= 1;
 800c31c:	4b4c      	ldr	r3, [pc, #304]	@ (800c450 <tcp_receive+0x888>)
 800c31e:	891b      	ldrh	r3, [r3, #8]
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	4b4a      	ldr	r3, [pc, #296]	@ (800c450 <tcp_receive+0x888>)
 800c326:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c328:	4b49      	ldr	r3, [pc, #292]	@ (800c450 <tcp_receive+0x888>)
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	4a48      	ldr	r2, [pc, #288]	@ (800c450 <tcp_receive+0x888>)
 800c32e:	8912      	ldrh	r2, [r2, #8]
 800c330:	4611      	mov	r1, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f7fc f9d4 	bl	80086e0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c338:	4b45      	ldr	r3, [pc, #276]	@ (800c450 <tcp_receive+0x888>)
 800c33a:	891c      	ldrh	r4, [r3, #8]
 800c33c:	4b44      	ldr	r3, [pc, #272]	@ (800c450 <tcp_receive+0x888>)
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	899b      	ldrh	r3, [r3, #12]
 800c342:	b29b      	uxth	r3, r3
 800c344:	4618      	mov	r0, r3
 800c346:	f7fa ff63 	bl	8007210 <lwip_htons>
 800c34a:	4603      	mov	r3, r0
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	f003 0303 	and.w	r3, r3, #3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <tcp_receive+0x792>
 800c356:	2301      	movs	r3, #1
 800c358:	e000      	b.n	800c35c <tcp_receive+0x794>
 800c35a:	2300      	movs	r3, #0
 800c35c:	4423      	add	r3, r4
 800c35e:	b29a      	uxth	r2, r3
 800c360:	4b3c      	ldr	r3, [pc, #240]	@ (800c454 <tcp_receive+0x88c>)
 800c362:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c364:	4b3b      	ldr	r3, [pc, #236]	@ (800c454 <tcp_receive+0x88c>)
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	4b38      	ldr	r3, [pc, #224]	@ (800c44c <tcp_receive+0x884>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	441a      	add	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c378:	440b      	add	r3, r1
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d006      	beq.n	800c38c <tcp_receive+0x7c4>
 800c37e:	4b36      	ldr	r3, [pc, #216]	@ (800c458 <tcp_receive+0x890>)
 800c380:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c384:	4935      	ldr	r1, [pc, #212]	@ (800c45c <tcp_receive+0x894>)
 800c386:	4836      	ldr	r0, [pc, #216]	@ (800c460 <tcp_receive+0x898>)
 800c388:	f004 ff32 	bl	80111f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 80e6 	beq.w	800c562 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c396:	4b2e      	ldr	r3, [pc, #184]	@ (800c450 <tcp_receive+0x888>)
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	899b      	ldrh	r3, [r3, #12]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fa ff36 	bl	8007210 <lwip_htons>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d010      	beq.n	800c3d2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c3b0:	e00a      	b.n	800c3c8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3b6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f7fd fd93 	bl	8009eee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1f0      	bne.n	800c3b2 <tcp_receive+0x7ea>
 800c3d0:	e0c7      	b.n	800c562 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c3d8:	e051      	b.n	800c47e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	899b      	ldrh	r3, [r3, #12]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fa ff14 	bl	8007210 <lwip_htons>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d03c      	beq.n	800c46e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c3f4:	4b16      	ldr	r3, [pc, #88]	@ (800c450 <tcp_receive+0x888>)
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	899b      	ldrh	r3, [r3, #12]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fa ff07 	bl	8007210 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	b2db      	uxtb	r3, r3
 800c406:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d12f      	bne.n	800c46e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c40e:	4b10      	ldr	r3, [pc, #64]	@ (800c450 <tcp_receive+0x888>)
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	899b      	ldrh	r3, [r3, #12]
 800c414:	b29c      	uxth	r4, r3
 800c416:	2001      	movs	r0, #1
 800c418:	f7fa fefa 	bl	8007210 <lwip_htons>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <tcp_receive+0x888>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	4322      	orrs	r2, r4
 800c426:	b292      	uxth	r2, r2
 800c428:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c42a:	4b09      	ldr	r3, [pc, #36]	@ (800c450 <tcp_receive+0x888>)
 800c42c:	891c      	ldrh	r4, [r3, #8]
 800c42e:	4b08      	ldr	r3, [pc, #32]	@ (800c450 <tcp_receive+0x888>)
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	899b      	ldrh	r3, [r3, #12]
 800c434:	b29b      	uxth	r3, r3
 800c436:	4618      	mov	r0, r3
 800c438:	f7fa feea 	bl	8007210 <lwip_htons>
 800c43c:	4603      	mov	r3, r0
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 0303 	and.w	r3, r3, #3
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00d      	beq.n	800c464 <tcp_receive+0x89c>
 800c448:	2301      	movs	r3, #1
 800c44a:	e00c      	b.n	800c466 <tcp_receive+0x89e>
 800c44c:	2000bdc4 	.word	0x2000bdc4
 800c450:	2000bda4 	.word	0x2000bda4
 800c454:	2000bdce 	.word	0x2000bdce
 800c458:	080133f0 	.word	0x080133f0
 800c45c:	08013798 	.word	0x08013798
 800c460:	0801343c 	.word	0x0801343c
 800c464:	2300      	movs	r3, #0
 800c466:	4423      	add	r3, r4
 800c468:	b29a      	uxth	r2, r3
 800c46a:	4b98      	ldr	r3, [pc, #608]	@ (800c6cc <tcp_receive+0xb04>)
 800c46c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c470:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c478:	6938      	ldr	r0, [r7, #16]
 800c47a:	f7fd fd38 	bl	8009eee <tcp_seg_free>
            while (next &&
 800c47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00e      	beq.n	800c4a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c484:	4b91      	ldr	r3, [pc, #580]	@ (800c6cc <tcp_receive+0xb04>)
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	4b91      	ldr	r3, [pc, #580]	@ (800c6d0 <tcp_receive+0xb08>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	441a      	add	r2, r3
 800c490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c498:	8909      	ldrh	r1, [r1, #8]
 800c49a:	440b      	add	r3, r1
 800c49c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da9b      	bge.n	800c3da <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d059      	beq.n	800c55c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c4a8:	4b88      	ldr	r3, [pc, #544]	@ (800c6cc <tcp_receive+0xb04>)
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	4b88      	ldr	r3, [pc, #544]	@ (800c6d0 <tcp_receive+0xb08>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	441a      	add	r2, r3
 800c4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dd4d      	ble.n	800c55c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	4b81      	ldr	r3, [pc, #516]	@ (800c6d0 <tcp_receive+0xb08>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	4b80      	ldr	r3, [pc, #512]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c4d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c4d6:	4b7f      	ldr	r3, [pc, #508]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	899b      	ldrh	r3, [r3, #12]
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fa fe96 	bl	8007210 <lwip_htons>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d005      	beq.n	800c4fc <tcp_receive+0x934>
                inseg.len -= 1;
 800c4f0:	4b78      	ldr	r3, [pc, #480]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c4f2:	891b      	ldrh	r3, [r3, #8]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	4b76      	ldr	r3, [pc, #472]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c4fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c4fc:	4b75      	ldr	r3, [pc, #468]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	4a74      	ldr	r2, [pc, #464]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c502:	8912      	ldrh	r2, [r2, #8]
 800c504:	4611      	mov	r1, r2
 800c506:	4618      	mov	r0, r3
 800c508:	f7fc f8ea 	bl	80086e0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c50c:	4b71      	ldr	r3, [pc, #452]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c50e:	891c      	ldrh	r4, [r3, #8]
 800c510:	4b70      	ldr	r3, [pc, #448]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	899b      	ldrh	r3, [r3, #12]
 800c516:	b29b      	uxth	r3, r3
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fa fe79 	bl	8007210 <lwip_htons>
 800c51e:	4603      	mov	r3, r0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 0303 	and.w	r3, r3, #3
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <tcp_receive+0x966>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e000      	b.n	800c530 <tcp_receive+0x968>
 800c52e:	2300      	movs	r3, #0
 800c530:	4423      	add	r3, r4
 800c532:	b29a      	uxth	r2, r3
 800c534:	4b65      	ldr	r3, [pc, #404]	@ (800c6cc <tcp_receive+0xb04>)
 800c536:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c538:	4b64      	ldr	r3, [pc, #400]	@ (800c6cc <tcp_receive+0xb04>)
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	461a      	mov	r2, r3
 800c53e:	4b64      	ldr	r3, [pc, #400]	@ (800c6d0 <tcp_receive+0xb08>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	441a      	add	r2, r3
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d006      	beq.n	800c55c <tcp_receive+0x994>
 800c54e:	4b62      	ldr	r3, [pc, #392]	@ (800c6d8 <tcp_receive+0xb10>)
 800c550:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c554:	4961      	ldr	r1, [pc, #388]	@ (800c6dc <tcp_receive+0xb14>)
 800c556:	4862      	ldr	r0, [pc, #392]	@ (800c6e0 <tcp_receive+0xb18>)
 800c558:	f004 fe4a 	bl	80111f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c560:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c562:	4b5a      	ldr	r3, [pc, #360]	@ (800c6cc <tcp_receive+0xb04>)
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	4b59      	ldr	r3, [pc, #356]	@ (800c6d0 <tcp_receive+0xb08>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	441a      	add	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c576:	4b55      	ldr	r3, [pc, #340]	@ (800c6cc <tcp_receive+0xb04>)
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d206      	bcs.n	800c58c <tcp_receive+0x9c4>
 800c57e:	4b56      	ldr	r3, [pc, #344]	@ (800c6d8 <tcp_receive+0xb10>)
 800c580:	f240 6207 	movw	r2, #1543	@ 0x607
 800c584:	4957      	ldr	r1, [pc, #348]	@ (800c6e4 <tcp_receive+0xb1c>)
 800c586:	4856      	ldr	r0, [pc, #344]	@ (800c6e0 <tcp_receive+0xb18>)
 800c588:	f004 fe32 	bl	80111f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c590:	4b4e      	ldr	r3, [pc, #312]	@ (800c6cc <tcp_receive+0xb04>)
 800c592:	881b      	ldrh	r3, [r3, #0]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	b29a      	uxth	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7fc ffc5 	bl	800952c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c5a2:	4b4c      	ldr	r3, [pc, #304]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	891b      	ldrh	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c5ac:	4b49      	ldr	r3, [pc, #292]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4a4d      	ldr	r2, [pc, #308]	@ (800c6e8 <tcp_receive+0xb20>)
 800c5b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c5b4:	4b47      	ldr	r3, [pc, #284]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5ba:	4b46      	ldr	r3, [pc, #280]	@ (800c6d4 <tcp_receive+0xb0c>)
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	899b      	ldrh	r3, [r3, #12]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fa fe24 	bl	8007210 <lwip_htons>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 80b8 	beq.w	800c746 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c5d6:	4b45      	ldr	r3, [pc, #276]	@ (800c6ec <tcp_receive+0xb24>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	f043 0320 	orr.w	r3, r3, #32
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	4b42      	ldr	r3, [pc, #264]	@ (800c6ec <tcp_receive+0xb24>)
 800c5e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c5e4:	e0af      	b.n	800c746 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4a36      	ldr	r2, [pc, #216]	@ (800c6d0 <tcp_receive+0xb08>)
 800c5f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	891b      	ldrh	r3, [r3, #8]
 800c5fc:	461c      	mov	r4, r3
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	899b      	ldrh	r3, [r3, #12]
 800c604:	b29b      	uxth	r3, r3
 800c606:	4618      	mov	r0, r3
 800c608:	f7fa fe02 	bl	8007210 <lwip_htons>
 800c60c:	4603      	mov	r3, r0
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 0303 	and.w	r3, r3, #3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <tcp_receive+0xa54>
 800c618:	2301      	movs	r3, #1
 800c61a:	e000      	b.n	800c61e <tcp_receive+0xa56>
 800c61c:	2300      	movs	r3, #0
 800c61e:	191a      	adds	r2, r3, r4
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c624:	441a      	add	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c62e:	461c      	mov	r4, r3
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	891b      	ldrh	r3, [r3, #8]
 800c634:	461d      	mov	r5, r3
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	899b      	ldrh	r3, [r3, #12]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fa fde6 	bl	8007210 <lwip_htons>
 800c644:	4603      	mov	r3, r0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 0303 	and.w	r3, r3, #3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <tcp_receive+0xa8c>
 800c650:	2301      	movs	r3, #1
 800c652:	e000      	b.n	800c656 <tcp_receive+0xa8e>
 800c654:	2300      	movs	r3, #0
 800c656:	442b      	add	r3, r5
 800c658:	429c      	cmp	r4, r3
 800c65a:	d206      	bcs.n	800c66a <tcp_receive+0xaa2>
 800c65c:	4b1e      	ldr	r3, [pc, #120]	@ (800c6d8 <tcp_receive+0xb10>)
 800c65e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c662:	4923      	ldr	r1, [pc, #140]	@ (800c6f0 <tcp_receive+0xb28>)
 800c664:	481e      	ldr	r0, [pc, #120]	@ (800c6e0 <tcp_receive+0xb18>)
 800c666:	f004 fdc3 	bl	80111f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	891b      	ldrh	r3, [r3, #8]
 800c66e:	461c      	mov	r4, r3
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	899b      	ldrh	r3, [r3, #12]
 800c676:	b29b      	uxth	r3, r3
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fa fdc9 	bl	8007210 <lwip_htons>
 800c67e:	4603      	mov	r3, r0
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <tcp_receive+0xac6>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <tcp_receive+0xac8>
 800c68e:	2300      	movs	r3, #0
 800c690:	1919      	adds	r1, r3, r4
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c696:	b28b      	uxth	r3, r1
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7fc ff43 	bl	800952c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	891b      	ldrh	r3, [r3, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d028      	beq.n	800c702 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c6b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e8 <tcp_receive+0xb20>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01d      	beq.n	800c6f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e8 <tcp_receive+0xb20>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f7fc fa60 	bl	8008b88 <pbuf_cat>
 800c6c8:	e018      	b.n	800c6fc <tcp_receive+0xb34>
 800c6ca:	bf00      	nop
 800c6cc:	2000bdce 	.word	0x2000bdce
 800c6d0:	2000bdc4 	.word	0x2000bdc4
 800c6d4:	2000bda4 	.word	0x2000bda4
 800c6d8:	080133f0 	.word	0x080133f0
 800c6dc:	080137d0 	.word	0x080137d0
 800c6e0:	0801343c 	.word	0x0801343c
 800c6e4:	0801380c 	.word	0x0801380c
 800c6e8:	2000bdd4 	.word	0x2000bdd4
 800c6ec:	2000bdd1 	.word	0x2000bdd1
 800c6f0:	0801382c 	.word	0x0801382c
            } else {
              recv_data = cseg->p;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4a70      	ldr	r2, [pc, #448]	@ (800c8bc <tcp_receive+0xcf4>)
 800c6fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2200      	movs	r2, #0
 800c700:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	899b      	ldrh	r3, [r3, #12]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fa fd80 	bl	8007210 <lwip_htons>
 800c710:	4603      	mov	r3, r0
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00d      	beq.n	800c738 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c71c:	4b68      	ldr	r3, [pc, #416]	@ (800c8c0 <tcp_receive+0xcf8>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f043 0320 	orr.w	r3, r3, #32
 800c724:	b2da      	uxtb	r2, r3
 800c726:	4b66      	ldr	r3, [pc, #408]	@ (800c8c0 <tcp_receive+0xcf8>)
 800c728:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	7d1b      	ldrb	r3, [r3, #20]
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d102      	bne.n	800c738 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2207      	movs	r2, #7
 800c736:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c740:	68b8      	ldr	r0, [r7, #8]
 800c742:	f7fd fbd4 	bl	8009eee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d008      	beq.n	800c760 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c75a:	429a      	cmp	r2, r3
 800c75c:	f43f af43 	beq.w	800c5e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	8b5b      	ldrh	r3, [r3, #26]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00e      	beq.n	800c78a <tcp_receive+0xbc2>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	8b5b      	ldrh	r3, [r3, #26]
 800c770:	f023 0301 	bic.w	r3, r3, #1
 800c774:	b29a      	uxth	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	835a      	strh	r2, [r3, #26]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8b5b      	ldrh	r3, [r3, #26]
 800c77e:	f043 0302 	orr.w	r3, r3, #2
 800c782:	b29a      	uxth	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c788:	e187      	b.n	800ca9a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	8b5b      	ldrh	r3, [r3, #26]
 800c78e:	f043 0301 	orr.w	r3, r3, #1
 800c792:	b29a      	uxth	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c798:	e17f      	b.n	800ca9a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d106      	bne.n	800c7b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c7a2:	4848      	ldr	r0, [pc, #288]	@ (800c8c4 <tcp_receive+0xcfc>)
 800c7a4:	f7fd fbbc 	bl	8009f20 <tcp_seg_copy>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	675a      	str	r2, [r3, #116]	@ 0x74
 800c7ae:	e16c      	b.n	800ca8a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7ba:	e156      	b.n	800ca6a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	685a      	ldr	r2, [r3, #4]
 800c7c2:	4b41      	ldr	r3, [pc, #260]	@ (800c8c8 <tcp_receive+0xd00>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d11d      	bne.n	800c806 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c7ca:	4b3e      	ldr	r3, [pc, #248]	@ (800c8c4 <tcp_receive+0xcfc>)
 800c7cc:	891a      	ldrh	r2, [r3, #8]
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d0:	891b      	ldrh	r3, [r3, #8]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	f240 814e 	bls.w	800ca74 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c7d8:	483a      	ldr	r0, [pc, #232]	@ (800c8c4 <tcp_receive+0xcfc>)
 800c7da:	f7fd fba1 	bl	8009f20 <tcp_seg_copy>
 800c7de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 8148 	beq.w	800ca78 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	e002      	b.n	800c7fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c7fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7fe:	6978      	ldr	r0, [r7, #20]
 800c800:	f7ff f8de 	bl	800b9c0 <tcp_oos_insert_segment>
                }
                break;
 800c804:	e138      	b.n	800ca78 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d117      	bne.n	800c83c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c80c:	4b2e      	ldr	r3, [pc, #184]	@ (800c8c8 <tcp_receive+0xd00>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	2b00      	cmp	r3, #0
 800c81a:	da57      	bge.n	800c8cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c81c:	4829      	ldr	r0, [pc, #164]	@ (800c8c4 <tcp_receive+0xcfc>)
 800c81e:	f7fd fb7f 	bl	8009f20 <tcp_seg_copy>
 800c822:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 8128 	beq.w	800ca7c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c832:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c834:	69b8      	ldr	r0, [r7, #24]
 800c836:	f7ff f8c3 	bl	800b9c0 <tcp_oos_insert_segment>
                  }
                  break;
 800c83a:	e11f      	b.n	800ca7c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c83c:	4b22      	ldr	r3, [pc, #136]	@ (800c8c8 <tcp_receive+0xd00>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	3b01      	subs	r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	db3e      	blt.n	800c8cc <tcp_receive+0xd04>
 800c84e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8c8 <tcp_receive+0xd00>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	3301      	adds	r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	dc35      	bgt.n	800c8cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c860:	4818      	ldr	r0, [pc, #96]	@ (800c8c4 <tcp_receive+0xcfc>)
 800c862:	f7fd fb5d 	bl	8009f20 <tcp_seg_copy>
 800c866:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 8108 	beq.w	800ca80 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c878:	8912      	ldrh	r2, [r2, #8]
 800c87a:	441a      	add	r2, r3
 800c87c:	4b12      	ldr	r3, [pc, #72]	@ (800c8c8 <tcp_receive+0xd00>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	dd12      	ble.n	800c8ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c886:	4b10      	ldr	r3, [pc, #64]	@ (800c8c8 <tcp_receive+0xd00>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	b29b      	uxth	r3, r3
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	b29a      	uxth	r2, r3
 800c898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89e:	685a      	ldr	r2, [r3, #4]
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a2:	891b      	ldrh	r3, [r3, #8]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f7fb ff1a 	bl	80086e0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c8b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c8b4:	69f8      	ldr	r0, [r7, #28]
 800c8b6:	f7ff f883 	bl	800b9c0 <tcp_oos_insert_segment>
                  }
                  break;
 800c8ba:	e0e1      	b.n	800ca80 <tcp_receive+0xeb8>
 800c8bc:	2000bdd4 	.word	0x2000bdd4
 800c8c0:	2000bdd1 	.word	0x2000bdd1
 800c8c4:	2000bda4 	.word	0x2000bda4
 800c8c8:	2000bdc4 	.word	0x2000bdc4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f040 80c5 	bne.w	800ca64 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c8da:	4b7f      	ldr	r3, [pc, #508]	@ (800cad8 <tcp_receive+0xf10>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f340 80bc 	ble.w	800ca64 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	899b      	ldrh	r3, [r3, #12]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fa fc8b 	bl	8007210 <lwip_htons>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 0301 	and.w	r3, r3, #1
 800c902:	2b00      	cmp	r3, #0
 800c904:	f040 80be 	bne.w	800ca84 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c908:	4874      	ldr	r0, [pc, #464]	@ (800cadc <tcp_receive+0xf14>)
 800c90a:	f7fd fb09 	bl	8009f20 <tcp_seg_copy>
 800c90e:	4602      	mov	r2, r0
 800c910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c912:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 80b5 	beq.w	800ca88 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c926:	8912      	ldrh	r2, [r2, #8]
 800c928:	441a      	add	r2, r3
 800c92a:	4b6b      	ldr	r3, [pc, #428]	@ (800cad8 <tcp_receive+0xf10>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	dd12      	ble.n	800c95a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c934:	4b68      	ldr	r3, [pc, #416]	@ (800cad8 <tcp_receive+0xf10>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	b29a      	uxth	r2, r3
 800c93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	b29b      	uxth	r3, r3
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	b29a      	uxth	r2, r3
 800c946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c948:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c950:	891b      	ldrh	r3, [r3, #8]
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f7fb fec3 	bl	80086e0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c95a:	4b61      	ldr	r3, [pc, #388]	@ (800cae0 <tcp_receive+0xf18>)
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	4b5d      	ldr	r3, [pc, #372]	@ (800cad8 <tcp_receive+0xf10>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	441a      	add	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c96e:	440b      	add	r3, r1
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	f340 8088 	ble.w	800ca88 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	899b      	ldrh	r3, [r3, #12]
 800c980:	b29b      	uxth	r3, r3
 800c982:	4618      	mov	r0, r3
 800c984:	f7fa fc44 	bl	8007210 <lwip_htons>
 800c988:	4603      	mov	r3, r0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d021      	beq.n	800c9d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	899b      	ldrh	r3, [r3, #12]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	b21b      	sxth	r3, r3
 800c9a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c9a4:	b21c      	sxth	r4, r3
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	899b      	ldrh	r3, [r3, #12]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fa fc2d 	bl	8007210 <lwip_htons>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fa fc25 	bl	8007210 <lwip_htons>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	b21b      	sxth	r3, r3
 800c9ca:	4323      	orrs	r3, r4
 800c9cc:	b21a      	sxth	r2, r3
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	b292      	uxth	r2, r2
 800c9d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9e2:	4413      	add	r3, r2
 800c9e4:	b299      	uxth	r1, r3
 800c9e6:	4b3c      	ldr	r3, [pc, #240]	@ (800cad8 <tcp_receive+0xf10>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	1a8a      	subs	r2, r1, r2
 800c9f2:	b292      	uxth	r2, r2
 800c9f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	891b      	ldrh	r3, [r3, #8]
 800ca02:	4619      	mov	r1, r3
 800ca04:	4610      	mov	r0, r2
 800ca06:	f7fb fe6b 	bl	80086e0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	891c      	ldrh	r4, [r3, #8]
 800ca10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	899b      	ldrh	r3, [r3, #12]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fa fbf8 	bl	8007210 <lwip_htons>
 800ca20:	4603      	mov	r3, r0
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f003 0303 	and.w	r3, r3, #3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <tcp_receive+0xe68>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e000      	b.n	800ca32 <tcp_receive+0xe6a>
 800ca30:	2300      	movs	r3, #0
 800ca32:	4423      	add	r3, r4
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	4b2a      	ldr	r3, [pc, #168]	@ (800cae0 <tcp_receive+0xf18>)
 800ca38:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ca3a:	4b29      	ldr	r3, [pc, #164]	@ (800cae0 <tcp_receive+0xf18>)
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	4b25      	ldr	r3, [pc, #148]	@ (800cad8 <tcp_receive+0xf10>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	441a      	add	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca4e:	440b      	add	r3, r1
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d019      	beq.n	800ca88 <tcp_receive+0xec0>
 800ca54:	4b23      	ldr	r3, [pc, #140]	@ (800cae4 <tcp_receive+0xf1c>)
 800ca56:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ca5a:	4923      	ldr	r1, [pc, #140]	@ (800cae8 <tcp_receive+0xf20>)
 800ca5c:	4823      	ldr	r0, [pc, #140]	@ (800caec <tcp_receive+0xf24>)
 800ca5e:	f004 fbc7 	bl	80111f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ca62:	e011      	b.n	800ca88 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f47f aea5 	bne.w	800c7bc <tcp_receive+0xbf4>
 800ca72:	e00a      	b.n	800ca8a <tcp_receive+0xec2>
                break;
 800ca74:	bf00      	nop
 800ca76:	e008      	b.n	800ca8a <tcp_receive+0xec2>
                break;
 800ca78:	bf00      	nop
 800ca7a:	e006      	b.n	800ca8a <tcp_receive+0xec2>
                  break;
 800ca7c:	bf00      	nop
 800ca7e:	e004      	b.n	800ca8a <tcp_receive+0xec2>
                  break;
 800ca80:	bf00      	nop
 800ca82:	e002      	b.n	800ca8a <tcp_receive+0xec2>
                  break;
 800ca84:	bf00      	nop
 800ca86:	e000      	b.n	800ca8a <tcp_receive+0xec2>
                break;
 800ca88:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 fa30 	bl	800def0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ca90:	e003      	b.n	800ca9a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f001 fa2c 	bl	800def0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca98:	e01a      	b.n	800cad0 <tcp_receive+0xf08>
 800ca9a:	e019      	b.n	800cad0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ca9c:	4b0e      	ldr	r3, [pc, #56]	@ (800cad8 <tcp_receive+0xf10>)
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	db0a      	blt.n	800cac0 <tcp_receive+0xef8>
 800caaa:	4b0b      	ldr	r3, [pc, #44]	@ (800cad8 <tcp_receive+0xf10>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cab6:	440b      	add	r3, r1
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	3301      	adds	r3, #1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dd07      	ble.n	800cad0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	8b5b      	ldrh	r3, [r3, #26]
 800cac4:	f043 0302 	orr.w	r3, r3, #2
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cace:	e7ff      	b.n	800cad0 <tcp_receive+0xf08>
 800cad0:	bf00      	nop
 800cad2:	3750      	adds	r7, #80	@ 0x50
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bdb0      	pop	{r4, r5, r7, pc}
 800cad8:	2000bdc4 	.word	0x2000bdc4
 800cadc:	2000bda4 	.word	0x2000bda4
 800cae0:	2000bdce 	.word	0x2000bdce
 800cae4:	080133f0 	.word	0x080133f0
 800cae8:	08013798 	.word	0x08013798
 800caec:	0801343c 	.word	0x0801343c

0800caf0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800caf6:	4b15      	ldr	r3, [pc, #84]	@ (800cb4c <tcp_get_next_optbyte+0x5c>)
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	b291      	uxth	r1, r2
 800cafe:	4a13      	ldr	r2, [pc, #76]	@ (800cb4c <tcp_get_next_optbyte+0x5c>)
 800cb00:	8011      	strh	r1, [r2, #0]
 800cb02:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cb04:	4b12      	ldr	r3, [pc, #72]	@ (800cb50 <tcp_get_next_optbyte+0x60>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d004      	beq.n	800cb16 <tcp_get_next_optbyte+0x26>
 800cb0c:	4b11      	ldr	r3, [pc, #68]	@ (800cb54 <tcp_get_next_optbyte+0x64>)
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	88fa      	ldrh	r2, [r7, #6]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d208      	bcs.n	800cb28 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cb16:	4b10      	ldr	r3, [pc, #64]	@ (800cb58 <tcp_get_next_optbyte+0x68>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3314      	adds	r3, #20
 800cb1c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cb1e:	88fb      	ldrh	r3, [r7, #6]
 800cb20:	683a      	ldr	r2, [r7, #0]
 800cb22:	4413      	add	r3, r2
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	e00b      	b.n	800cb40 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cb28:	88fb      	ldrh	r3, [r7, #6]
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	4b09      	ldr	r3, [pc, #36]	@ (800cb54 <tcp_get_next_optbyte+0x64>)
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cb36:	4b06      	ldr	r3, [pc, #24]	@ (800cb50 <tcp_get_next_optbyte+0x60>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	797b      	ldrb	r3, [r7, #5]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	2000bdc0 	.word	0x2000bdc0
 800cb50:	2000bdbc 	.word	0x2000bdbc
 800cb54:	2000bdba 	.word	0x2000bdba
 800cb58:	2000bdb4 	.word	0x2000bdb4

0800cb5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d106      	bne.n	800cb78 <tcp_parseopt+0x1c>
 800cb6a:	4b32      	ldr	r3, [pc, #200]	@ (800cc34 <tcp_parseopt+0xd8>)
 800cb6c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cb70:	4931      	ldr	r1, [pc, #196]	@ (800cc38 <tcp_parseopt+0xdc>)
 800cb72:	4832      	ldr	r0, [pc, #200]	@ (800cc3c <tcp_parseopt+0xe0>)
 800cb74:	f004 fb3c 	bl	80111f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cb78:	4b31      	ldr	r3, [pc, #196]	@ (800cc40 <tcp_parseopt+0xe4>)
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d056      	beq.n	800cc2e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cb80:	4b30      	ldr	r3, [pc, #192]	@ (800cc44 <tcp_parseopt+0xe8>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	801a      	strh	r2, [r3, #0]
 800cb86:	e046      	b.n	800cc16 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cb88:	f7ff ffb2 	bl	800caf0 <tcp_get_next_optbyte>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d006      	beq.n	800cba4 <tcp_parseopt+0x48>
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	dc2a      	bgt.n	800cbf0 <tcp_parseopt+0x94>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d042      	beq.n	800cc24 <tcp_parseopt+0xc8>
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d038      	beq.n	800cc14 <tcp_parseopt+0xb8>
 800cba2:	e025      	b.n	800cbf0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cba4:	f7ff ffa4 	bl	800caf0 <tcp_get_next_optbyte>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	d13c      	bne.n	800cc28 <tcp_parseopt+0xcc>
 800cbae:	4b25      	ldr	r3, [pc, #148]	@ (800cc44 <tcp_parseopt+0xe8>)
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	4a22      	ldr	r2, [pc, #136]	@ (800cc40 <tcp_parseopt+0xe4>)
 800cbb6:	8812      	ldrh	r2, [r2, #0]
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	da35      	bge.n	800cc28 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cbbc:	f7ff ff98 	bl	800caf0 <tcp_get_next_optbyte>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	021b      	lsls	r3, r3, #8
 800cbc4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cbc6:	f7ff ff93 	bl	800caf0 <tcp_get_next_optbyte>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	461a      	mov	r2, r3
 800cbce:	89bb      	ldrh	r3, [r7, #12]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cbd4:	89bb      	ldrh	r3, [r7, #12]
 800cbd6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cbda:	d804      	bhi.n	800cbe6 <tcp_parseopt+0x8a>
 800cbdc:	89bb      	ldrh	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <tcp_parseopt+0x8a>
 800cbe2:	89ba      	ldrh	r2, [r7, #12]
 800cbe4:	e001      	b.n	800cbea <tcp_parseopt+0x8e>
 800cbe6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800cbee:	e012      	b.n	800cc16 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cbf0:	f7ff ff7e 	bl	800caf0 <tcp_get_next_optbyte>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cbf8:	7afb      	ldrb	r3, [r7, #11]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d916      	bls.n	800cc2c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cbfe:	7afb      	ldrb	r3, [r7, #11]
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	4b10      	ldr	r3, [pc, #64]	@ (800cc44 <tcp_parseopt+0xe8>)
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	4413      	add	r3, r2
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	3b02      	subs	r3, #2
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc44 <tcp_parseopt+0xe8>)
 800cc10:	801a      	strh	r2, [r3, #0]
 800cc12:	e000      	b.n	800cc16 <tcp_parseopt+0xba>
          break;
 800cc14:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cc16:	4b0b      	ldr	r3, [pc, #44]	@ (800cc44 <tcp_parseopt+0xe8>)
 800cc18:	881a      	ldrh	r2, [r3, #0]
 800cc1a:	4b09      	ldr	r3, [pc, #36]	@ (800cc40 <tcp_parseopt+0xe4>)
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d3b2      	bcc.n	800cb88 <tcp_parseopt+0x2c>
 800cc22:	e004      	b.n	800cc2e <tcp_parseopt+0xd2>
          return;
 800cc24:	bf00      	nop
 800cc26:	e002      	b.n	800cc2e <tcp_parseopt+0xd2>
            return;
 800cc28:	bf00      	nop
 800cc2a:	e000      	b.n	800cc2e <tcp_parseopt+0xd2>
            return;
 800cc2c:	bf00      	nop
      }
    }
  }
}
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	080133f0 	.word	0x080133f0
 800cc38:	08013854 	.word	0x08013854
 800cc3c:	0801343c 	.word	0x0801343c
 800cc40:	2000bdb8 	.word	0x2000bdb8
 800cc44:	2000bdc0 	.word	0x2000bdc0

0800cc48 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cc4c:	4b05      	ldr	r3, [pc, #20]	@ (800cc64 <tcp_trigger_input_pcb_close+0x1c>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f043 0310 	orr.w	r3, r3, #16
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	4b03      	ldr	r3, [pc, #12]	@ (800cc64 <tcp_trigger_input_pcb_close+0x1c>)
 800cc58:	701a      	strb	r2, [r3, #0]
}
 800cc5a:	bf00      	nop
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	2000bdd1 	.word	0x2000bdd1

0800cc68 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <tcp_route+0x28>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	7a1b      	ldrb	r3, [r3, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d006      	beq.n	800cc90 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	7a1b      	ldrb	r3, [r3, #8]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fb fb22 	bl	80082d0 <netif_get_by_index>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	e003      	b.n	800cc98 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f002 feab 	bl	800f9ec <ip4_route>
 800cc96:	4603      	mov	r3, r0
  }
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	4613      	mov	r3, r2
 800ccae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <tcp_create_segment+0x22>
 800ccb6:	4b43      	ldr	r3, [pc, #268]	@ (800cdc4 <tcp_create_segment+0x124>)
 800ccb8:	22a3      	movs	r2, #163	@ 0xa3
 800ccba:	4943      	ldr	r1, [pc, #268]	@ (800cdc8 <tcp_create_segment+0x128>)
 800ccbc:	4843      	ldr	r0, [pc, #268]	@ (800cdcc <tcp_create_segment+0x12c>)
 800ccbe:	f004 fa97 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d105      	bne.n	800ccd4 <tcp_create_segment+0x34>
 800ccc8:	4b3e      	ldr	r3, [pc, #248]	@ (800cdc4 <tcp_create_segment+0x124>)
 800ccca:	22a4      	movs	r2, #164	@ 0xa4
 800cccc:	4940      	ldr	r1, [pc, #256]	@ (800cdd0 <tcp_create_segment+0x130>)
 800ccce:	483f      	ldr	r0, [pc, #252]	@ (800cdcc <tcp_create_segment+0x12c>)
 800ccd0:	f004 fa8e 	bl	80111f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ccd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 0304 	and.w	r3, r3, #4
 800cce0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cce2:	2003      	movs	r0, #3
 800cce4:	f7fa ff68 	bl	8007bb8 <memp_malloc>
 800cce8:	6138      	str	r0, [r7, #16]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d104      	bne.n	800ccfa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ccf0:	68b8      	ldr	r0, [r7, #8]
 800ccf2:	f7fb fe7b 	bl	80089ec <pbuf_free>
    return NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e060      	b.n	800cdbc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cd00:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	891a      	ldrh	r2, [r3, #8]
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d205      	bcs.n	800cd26 <tcp_create_segment+0x86>
 800cd1a:	4b2a      	ldr	r3, [pc, #168]	@ (800cdc4 <tcp_create_segment+0x124>)
 800cd1c:	22b0      	movs	r2, #176	@ 0xb0
 800cd1e:	492d      	ldr	r1, [pc, #180]	@ (800cdd4 <tcp_create_segment+0x134>)
 800cd20:	482a      	ldr	r0, [pc, #168]	@ (800cdcc <tcp_create_segment+0x12c>)
 800cd22:	f004 fa65 	bl	80111f0 <iprintf>
  seg->len = p->tot_len - optlen;
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	891a      	ldrh	r2, [r3, #8]
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cd36:	2114      	movs	r1, #20
 800cd38:	68b8      	ldr	r0, [r7, #8]
 800cd3a:	f7fb fdc1 	bl	80088c0 <pbuf_add_header>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d004      	beq.n	800cd4e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cd44:	6938      	ldr	r0, [r7, #16]
 800cd46:	f7fd f8d2 	bl	8009eee <tcp_seg_free>
    return NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e036      	b.n	800cdbc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	8ada      	ldrh	r2, [r3, #22]
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	68dc      	ldr	r4, [r3, #12]
 800cd60:	4610      	mov	r0, r2
 800cd62:	f7fa fa55 	bl	8007210 <lwip_htons>
 800cd66:	4603      	mov	r3, r0
 800cd68:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	8b1a      	ldrh	r2, [r3, #24]
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	68dc      	ldr	r4, [r3, #12]
 800cd72:	4610      	mov	r0, r2
 800cd74:	f7fa fa4c 	bl	8007210 <lwip_htons>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	68dc      	ldr	r4, [r3, #12]
 800cd80:	6838      	ldr	r0, [r7, #0]
 800cd82:	f7fa fa5a 	bl	800723a <lwip_htonl>
 800cd86:	4603      	mov	r3, r0
 800cd88:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	089b      	lsrs	r3, r3, #2
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	3305      	adds	r3, #5
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	031b      	lsls	r3, r3, #12
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	79fb      	ldrb	r3, [r7, #7]
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	68dc      	ldr	r4, [r3, #12]
 800cda4:	4610      	mov	r0, r2
 800cda6:	f7fa fa33 	bl	8007210 <lwip_htons>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	749a      	strb	r2, [r3, #18]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	74da      	strb	r2, [r3, #19]
  return seg;
 800cdba:	693b      	ldr	r3, [r7, #16]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	371c      	adds	r7, #28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd90      	pop	{r4, r7, pc}
 800cdc4:	08013870 	.word	0x08013870
 800cdc8:	080138a4 	.word	0x080138a4
 800cdcc:	080138c4 	.word	0x080138c4
 800cdd0:	080138ec 	.word	0x080138ec
 800cdd4:	08013910 	.word	0x08013910

0800cdd8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b08b      	sub	sp, #44	@ 0x2c
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61fb      	str	r3, [r7, #28]
 800cde8:	2300      	movs	r3, #0
 800cdea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cdec:	2300      	movs	r3, #0
 800cdee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <tcp_split_unsent_seg+0x2c>
 800cdf6:	4b95      	ldr	r3, [pc, #596]	@ (800d04c <tcp_split_unsent_seg+0x274>)
 800cdf8:	f240 324b 	movw	r2, #843	@ 0x34b
 800cdfc:	4994      	ldr	r1, [pc, #592]	@ (800d050 <tcp_split_unsent_seg+0x278>)
 800cdfe:	4895      	ldr	r0, [pc, #596]	@ (800d054 <tcp_split_unsent_seg+0x27c>)
 800ce00:	f004 f9f6 	bl	80111f0 <iprintf>

  useg = pcb->unsent;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce08:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d102      	bne.n	800ce16 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ce10:	f04f 33ff 	mov.w	r3, #4294967295
 800ce14:	e116      	b.n	800d044 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ce16:	887b      	ldrh	r3, [r7, #2]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d109      	bne.n	800ce30 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ce1c:	4b8b      	ldr	r3, [pc, #556]	@ (800d04c <tcp_split_unsent_seg+0x274>)
 800ce1e:	f240 3253 	movw	r2, #851	@ 0x353
 800ce22:	498d      	ldr	r1, [pc, #564]	@ (800d058 <tcp_split_unsent_seg+0x280>)
 800ce24:	488b      	ldr	r0, [pc, #556]	@ (800d054 <tcp_split_unsent_seg+0x27c>)
 800ce26:	f004 f9e3 	bl	80111f0 <iprintf>
    return ERR_VAL;
 800ce2a:	f06f 0305 	mvn.w	r3, #5
 800ce2e:	e109      	b.n	800d044 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	891b      	ldrh	r3, [r3, #8]
 800ce34:	887a      	ldrh	r2, [r7, #2]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d301      	bcc.n	800ce3e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e102      	b.n	800d044 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce42:	887a      	ldrh	r2, [r7, #2]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d906      	bls.n	800ce56 <tcp_split_unsent_seg+0x7e>
 800ce48:	4b80      	ldr	r3, [pc, #512]	@ (800d04c <tcp_split_unsent_seg+0x274>)
 800ce4a:	f240 325b 	movw	r2, #859	@ 0x35b
 800ce4e:	4983      	ldr	r1, [pc, #524]	@ (800d05c <tcp_split_unsent_seg+0x284>)
 800ce50:	4880      	ldr	r0, [pc, #512]	@ (800d054 <tcp_split_unsent_seg+0x27c>)
 800ce52:	f004 f9cd 	bl	80111f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	891b      	ldrh	r3, [r3, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <tcp_split_unsent_seg+0x94>
 800ce5e:	4b7b      	ldr	r3, [pc, #492]	@ (800d04c <tcp_split_unsent_seg+0x274>)
 800ce60:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ce64:	497e      	ldr	r1, [pc, #504]	@ (800d060 <tcp_split_unsent_seg+0x288>)
 800ce66:	487b      	ldr	r0, [pc, #492]	@ (800d054 <tcp_split_unsent_seg+0x27c>)
 800ce68:	f004 f9c2 	bl	80111f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	7a9b      	ldrb	r3, [r3, #10]
 800ce70:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	f003 0304 	and.w	r3, r3, #4
 800ce7c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	891a      	ldrh	r2, [r3, #8]
 800ce82:	887b      	ldrh	r3, [r7, #2]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	89bb      	ldrh	r3, [r7, #12]
 800ce8e:	4413      	add	r3, r2
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ce96:	4619      	mov	r1, r3
 800ce98:	2036      	movs	r0, #54	@ 0x36
 800ce9a:	f7fb fac3 	bl	8008424 <pbuf_alloc>
 800ce9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80b7 	beq.w	800d016 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	891a      	ldrh	r2, [r3, #8]
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	891b      	ldrh	r3, [r3, #8]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	887b      	ldrh	r3, [r7, #2]
 800ceb8:	4413      	add	r3, r2
 800ceba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	6858      	ldr	r0, [r3, #4]
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	18d1      	adds	r1, r2, r3
 800cec8:	897b      	ldrh	r3, [r7, #10]
 800ceca:	89ba      	ldrh	r2, [r7, #12]
 800cecc:	f7fb ff84 	bl	8008dd8 <pbuf_copy_partial>
 800ced0:	4603      	mov	r3, r0
 800ced2:	461a      	mov	r2, r3
 800ced4:	89bb      	ldrh	r3, [r7, #12]
 800ced6:	4293      	cmp	r3, r2
 800ced8:	f040 809f 	bne.w	800d01a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	899b      	ldrh	r3, [r3, #12]
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fa f993 	bl	8007210 <lwip_htons>
 800ceea:	4603      	mov	r3, r0
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cef2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cef4:	2300      	movs	r3, #0
 800cef6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cef8:	7efb      	ldrb	r3, [r7, #27]
 800cefa:	f003 0308 	and.w	r3, r3, #8
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cf02:	7efb      	ldrb	r3, [r7, #27]
 800cf04:	f023 0308 	bic.w	r3, r3, #8
 800cf08:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cf0a:	7ebb      	ldrb	r3, [r7, #26]
 800cf0c:	f043 0308 	orr.w	r3, r3, #8
 800cf10:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cf12:	7efb      	ldrb	r3, [r7, #27]
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d007      	beq.n	800cf2c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cf1c:	7efb      	ldrb	r3, [r7, #27]
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cf24:	7ebb      	ldrb	r3, [r7, #26]
 800cf26:	f043 0301 	orr.w	r3, r3, #1
 800cf2a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fa f981 	bl	800723a <lwip_htonl>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	887b      	ldrh	r3, [r7, #2]
 800cf3c:	18d1      	adds	r1, r2, r3
 800cf3e:	7eba      	ldrb	r2, [r7, #26]
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	460b      	mov	r3, r1
 800cf46:	6939      	ldr	r1, [r7, #16]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff fea9 	bl	800cca0 <tcp_create_segment>
 800cf4e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d063      	beq.n	800d01e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fb fdd4 	bl	8008b08 <pbuf_clen>
 800cf60:	4603      	mov	r3, r0
 800cf62:	461a      	mov	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf6a:	1a9b      	subs	r3, r3, r2
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	6858      	ldr	r0, [r3, #4]
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	891a      	ldrh	r2, [r3, #8]
 800cf7e:	89bb      	ldrh	r3, [r7, #12]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4619      	mov	r1, r3
 800cf86:	f7fb fbab 	bl	80086e0 <pbuf_realloc>
  useg->len -= remainder;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	891a      	ldrh	r2, [r3, #8]
 800cf8e:	89bb      	ldrh	r3, [r7, #12]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	899b      	ldrh	r3, [r3, #12]
 800cf9e:	b29c      	uxth	r4, r3
 800cfa0:	7efb      	ldrb	r3, [r7, #27]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fa f933 	bl	8007210 <lwip_htons>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	461a      	mov	r2, r3
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	4322      	orrs	r2, r4
 800cfb4:	b292      	uxth	r2, r2
 800cfb6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fb fda3 	bl	8008b08 <pbuf_clen>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cfcc:	4413      	add	r3, r2
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fb fd94 	bl	8008b08 <pbuf_clen>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cfea:	4413      	add	r3, r2
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	69fa      	ldr	r2, [r7, #28]
 800d000:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d103      	bne.n	800d012 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	e016      	b.n	800d044 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d016:	bf00      	nop
 800d018:	e002      	b.n	800d020 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d01a:	bf00      	nop
 800d01c:	e000      	b.n	800d020 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d01e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d006      	beq.n	800d034 <tcp_split_unsent_seg+0x25c>
 800d026:	4b09      	ldr	r3, [pc, #36]	@ (800d04c <tcp_split_unsent_seg+0x274>)
 800d028:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800d02c:	490d      	ldr	r1, [pc, #52]	@ (800d064 <tcp_split_unsent_seg+0x28c>)
 800d02e:	4809      	ldr	r0, [pc, #36]	@ (800d054 <tcp_split_unsent_seg+0x27c>)
 800d030:	f004 f8de 	bl	80111f0 <iprintf>
  if (p != NULL) {
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d002      	beq.n	800d040 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d03a:	6938      	ldr	r0, [r7, #16]
 800d03c:	f7fb fcd6 	bl	80089ec <pbuf_free>
  }

  return ERR_MEM;
 800d040:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d044:	4618      	mov	r0, r3
 800d046:	3724      	adds	r7, #36	@ 0x24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd90      	pop	{r4, r7, pc}
 800d04c:	08013870 	.word	0x08013870
 800d050:	08013c04 	.word	0x08013c04
 800d054:	080138c4 	.word	0x080138c4
 800d058:	08013c28 	.word	0x08013c28
 800d05c:	08013c4c 	.word	0x08013c4c
 800d060:	08013c5c 	.word	0x08013c5c
 800d064:	08013c6c 	.word	0x08013c6c

0800d068 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d068:	b590      	push	{r4, r7, lr}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <tcp_send_fin+0x1c>
 800d076:	4b21      	ldr	r3, [pc, #132]	@ (800d0fc <tcp_send_fin+0x94>)
 800d078:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d07c:	4920      	ldr	r1, [pc, #128]	@ (800d100 <tcp_send_fin+0x98>)
 800d07e:	4821      	ldr	r0, [pc, #132]	@ (800d104 <tcp_send_fin+0x9c>)
 800d080:	f004 f8b6 	bl	80111f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d02e      	beq.n	800d0ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d090:	60fb      	str	r3, [r7, #12]
 800d092:	e002      	b.n	800d09a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1f8      	bne.n	800d094 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	899b      	ldrh	r3, [r3, #12]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fa f8b0 	bl	8007210 <lwip_htons>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 0307 	and.w	r3, r3, #7
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d116      	bne.n	800d0ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	899b      	ldrh	r3, [r3, #12]
 800d0c2:	b29c      	uxth	r4, r3
 800d0c4:	2001      	movs	r0, #1
 800d0c6:	f7fa f8a3 	bl	8007210 <lwip_htons>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	4322      	orrs	r2, r4
 800d0d4:	b292      	uxth	r2, r2
 800d0d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	8b5b      	ldrh	r3, [r3, #26]
 800d0dc:	f043 0320 	orr.w	r3, r3, #32
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	e004      	b.n	800d0f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d0ea:	2101      	movs	r1, #1
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f80b 	bl	800d108 <tcp_enqueue_flags>
 800d0f2:	4603      	mov	r3, r0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd90      	pop	{r4, r7, pc}
 800d0fc:	08013870 	.word	0x08013870
 800d100:	08013c78 	.word	0x08013c78
 800d104:	080138c4 	.word	0x080138c4

0800d108 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	@ 0x28
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d11c:	78fb      	ldrb	r3, [r7, #3]
 800d11e:	f003 0303 	and.w	r3, r3, #3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <tcp_enqueue_flags+0x2c>
 800d126:	4b67      	ldr	r3, [pc, #412]	@ (800d2c4 <tcp_enqueue_flags+0x1bc>)
 800d128:	f240 4211 	movw	r2, #1041	@ 0x411
 800d12c:	4966      	ldr	r1, [pc, #408]	@ (800d2c8 <tcp_enqueue_flags+0x1c0>)
 800d12e:	4867      	ldr	r0, [pc, #412]	@ (800d2cc <tcp_enqueue_flags+0x1c4>)
 800d130:	f004 f85e 	bl	80111f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d106      	bne.n	800d148 <tcp_enqueue_flags+0x40>
 800d13a:	4b62      	ldr	r3, [pc, #392]	@ (800d2c4 <tcp_enqueue_flags+0x1bc>)
 800d13c:	f240 4213 	movw	r2, #1043	@ 0x413
 800d140:	4963      	ldr	r1, [pc, #396]	@ (800d2d0 <tcp_enqueue_flags+0x1c8>)
 800d142:	4862      	ldr	r0, [pc, #392]	@ (800d2cc <tcp_enqueue_flags+0x1c4>)
 800d144:	f004 f854 	bl	80111f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d148:	78fb      	ldrb	r3, [r7, #3]
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d152:	2301      	movs	r3, #1
 800d154:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d156:	7ffb      	ldrb	r3, [r7, #31]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	f003 0304 	and.w	r3, r3, #4
 800d160:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	b29b      	uxth	r3, r3
 800d166:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d16a:	4619      	mov	r1, r3
 800d16c:	2036      	movs	r0, #54	@ 0x36
 800d16e:	f7fb f959 	bl	8008424 <pbuf_alloc>
 800d172:	6138      	str	r0, [r7, #16]
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d109      	bne.n	800d18e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	8b5b      	ldrh	r3, [r3, #26]
 800d17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d182:	b29a      	uxth	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d188:	f04f 33ff 	mov.w	r3, #4294967295
 800d18c:	e095      	b.n	800d2ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	895a      	ldrh	r2, [r3, #10]
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	b29b      	uxth	r3, r3
 800d196:	429a      	cmp	r2, r3
 800d198:	d206      	bcs.n	800d1a8 <tcp_enqueue_flags+0xa0>
 800d19a:	4b4a      	ldr	r3, [pc, #296]	@ (800d2c4 <tcp_enqueue_flags+0x1bc>)
 800d19c:	f240 4239 	movw	r2, #1081	@ 0x439
 800d1a0:	494c      	ldr	r1, [pc, #304]	@ (800d2d4 <tcp_enqueue_flags+0x1cc>)
 800d1a2:	484a      	ldr	r0, [pc, #296]	@ (800d2cc <tcp_enqueue_flags+0x1c4>)
 800d1a4:	f004 f824 	bl	80111f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800d1ac:	78fa      	ldrb	r2, [r7, #3]
 800d1ae:	7ffb      	ldrb	r3, [r7, #31]
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	6939      	ldr	r1, [r7, #16]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff fd72 	bl	800cca0 <tcp_create_segment>
 800d1bc:	60f8      	str	r0, [r7, #12]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d109      	bne.n	800d1d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	8b5b      	ldrh	r3, [r3, #26]
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d6:	e070      	b.n	800d2ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	f003 0303 	and.w	r3, r3, #3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d006      	beq.n	800d1f2 <tcp_enqueue_flags+0xea>
 800d1e4:	4b37      	ldr	r3, [pc, #220]	@ (800d2c4 <tcp_enqueue_flags+0x1bc>)
 800d1e6:	f240 4242 	movw	r2, #1090	@ 0x442
 800d1ea:	493b      	ldr	r1, [pc, #236]	@ (800d2d8 <tcp_enqueue_flags+0x1d0>)
 800d1ec:	4837      	ldr	r0, [pc, #220]	@ (800d2cc <tcp_enqueue_flags+0x1c4>)
 800d1ee:	f003 ffff 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	891b      	ldrh	r3, [r3, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d006      	beq.n	800d208 <tcp_enqueue_flags+0x100>
 800d1fa:	4b32      	ldr	r3, [pc, #200]	@ (800d2c4 <tcp_enqueue_flags+0x1bc>)
 800d1fc:	f240 4243 	movw	r2, #1091	@ 0x443
 800d200:	4936      	ldr	r1, [pc, #216]	@ (800d2dc <tcp_enqueue_flags+0x1d4>)
 800d202:	4832      	ldr	r0, [pc, #200]	@ (800d2cc <tcp_enqueue_flags+0x1c4>)
 800d204:	f003 fff4 	bl	80111f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d103      	bne.n	800d218 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d216:	e00d      	b.n	800d234 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d21c:	61bb      	str	r3, [r7, #24]
 800d21e:	e002      	b.n	800d226 <tcp_enqueue_flags+0x11e>
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	61bb      	str	r3, [r7, #24]
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1f8      	bne.n	800d220 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	f003 0302 	and.w	r3, r3, #2
 800d242:	2b00      	cmp	r3, #0
 800d244:	d104      	bne.n	800d250 <tcp_enqueue_flags+0x148>
 800d246:	78fb      	ldrb	r3, [r7, #3]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	f003 0301 	and.w	r3, r3, #1
 800d260:	2b00      	cmp	r3, #0
 800d262:	d006      	beq.n	800d272 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	8b5b      	ldrh	r3, [r3, #26]
 800d268:	f043 0320 	orr.w	r3, r3, #32
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	f7fb fc46 	bl	8008b08 <pbuf_clen>
 800d27c:	4603      	mov	r3, r0
 800d27e:	461a      	mov	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d286:	4413      	add	r3, r2
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00e      	beq.n	800d2b8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <tcp_enqueue_flags+0x1b0>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d106      	bne.n	800d2b8 <tcp_enqueue_flags+0x1b0>
 800d2aa:	4b06      	ldr	r3, [pc, #24]	@ (800d2c4 <tcp_enqueue_flags+0x1bc>)
 800d2ac:	f240 4265 	movw	r2, #1125	@ 0x465
 800d2b0:	490b      	ldr	r1, [pc, #44]	@ (800d2e0 <tcp_enqueue_flags+0x1d8>)
 800d2b2:	4806      	ldr	r0, [pc, #24]	@ (800d2cc <tcp_enqueue_flags+0x1c4>)
 800d2b4:	f003 ff9c 	bl	80111f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3720      	adds	r7, #32
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08013870 	.word	0x08013870
 800d2c8:	08013c94 	.word	0x08013c94
 800d2cc:	080138c4 	.word	0x080138c4
 800d2d0:	08013cec 	.word	0x08013cec
 800d2d4:	08013d0c 	.word	0x08013d0c
 800d2d8:	08013d48 	.word	0x08013d48
 800d2dc:	08013d60 	.word	0x08013d60
 800d2e0:	08013d8c 	.word	0x08013d8c

0800d2e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d2e4:	b5b0      	push	{r4, r5, r7, lr}
 800d2e6:	b08a      	sub	sp, #40	@ 0x28
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <tcp_output+0x1c>
 800d2f2:	4b8a      	ldr	r3, [pc, #552]	@ (800d51c <tcp_output+0x238>)
 800d2f4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800d2f8:	4989      	ldr	r1, [pc, #548]	@ (800d520 <tcp_output+0x23c>)
 800d2fa:	488a      	ldr	r0, [pc, #552]	@ (800d524 <tcp_output+0x240>)
 800d2fc:	f003 ff78 	bl	80111f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d106      	bne.n	800d316 <tcp_output+0x32>
 800d308:	4b84      	ldr	r3, [pc, #528]	@ (800d51c <tcp_output+0x238>)
 800d30a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800d30e:	4986      	ldr	r1, [pc, #536]	@ (800d528 <tcp_output+0x244>)
 800d310:	4884      	ldr	r0, [pc, #528]	@ (800d524 <tcp_output+0x240>)
 800d312:	f003 ff6d 	bl	80111f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d316:	4b85      	ldr	r3, [pc, #532]	@ (800d52c <tcp_output+0x248>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d101      	bne.n	800d324 <tcp_output+0x40>
    return ERR_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	e1ce      	b.n	800d6c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d330:	4293      	cmp	r3, r2
 800d332:	bf28      	it	cs
 800d334:	4613      	movcs	r3, r2
 800d336:	b29b      	uxth	r3, r3
 800d338:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d33e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800d340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10b      	bne.n	800d35e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	8b5b      	ldrh	r3, [r3, #26]
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 81aa 	beq.w	800d6a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fdcb 	bl	800def0 <tcp_send_empty_ack>
 800d35a:	4603      	mov	r3, r0
 800d35c:	e1b1      	b.n	800d6c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d35e:	6879      	ldr	r1, [r7, #4]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3304      	adds	r3, #4
 800d364:	461a      	mov	r2, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7ff fc7e 	bl	800cc68 <tcp_route>
 800d36c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <tcp_output+0x96>
    return ERR_RTE;
 800d374:	f06f 0303 	mvn.w	r3, #3
 800d378:	e1a3      	b.n	800d6c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d003      	beq.n	800d388 <tcp_output+0xa4>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d111      	bne.n	800d3ac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <tcp_output+0xb0>
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	3304      	adds	r3, #4
 800d392:	e000      	b.n	800d396 <tcp_output+0xb2>
 800d394:	2300      	movs	r3, #0
 800d396:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <tcp_output+0xc0>
      return ERR_RTE;
 800d39e:	f06f 0303 	mvn.w	r3, #3
 800d3a2:	e18e      	b.n	800d6c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7f9 ff41 	bl	800723a <lwip_htonl>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3c2:	8912      	ldrh	r2, [r2, #8]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d227      	bcs.n	800d41c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d114      	bne.n	800d404 <tcp_output+0x120>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d110      	bne.n	800d404 <tcp_output+0x120>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10b      	bne.n	800d404 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	8b5b      	ldrh	r3, [r3, #26]
 800d408:	f003 0302 	and.w	r3, r3, #2
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 814d 	beq.w	800d6ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fd6c 	bl	800def0 <tcp_send_empty_ack>
 800d418:	4603      	mov	r3, r0
 800d41a:	e152      	b.n	800d6c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d428:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 811c 	beq.w	800d66a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d432:	e002      	b.n	800d43a <tcp_output+0x156>
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	623b      	str	r3, [r7, #32]
 800d43a:	6a3b      	ldr	r3, [r7, #32]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1f8      	bne.n	800d434 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d442:	e112      	b.n	800d66a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	899b      	ldrh	r3, [r3, #12]
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7f9 fedf 	bl	8007210 <lwip_htons>
 800d452:	4603      	mov	r3, r0
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f003 0304 	and.w	r3, r3, #4
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d006      	beq.n	800d46c <tcp_output+0x188>
 800d45e:	4b2f      	ldr	r3, [pc, #188]	@ (800d51c <tcp_output+0x238>)
 800d460:	f240 5236 	movw	r2, #1334	@ 0x536
 800d464:	4932      	ldr	r1, [pc, #200]	@ (800d530 <tcp_output+0x24c>)
 800d466:	482f      	ldr	r0, [pc, #188]	@ (800d524 <tcp_output+0x240>)
 800d468:	f003 fec2 	bl	80111f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d470:	2b00      	cmp	r3, #0
 800d472:	d01f      	beq.n	800d4b4 <tcp_output+0x1d0>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	8b5b      	ldrh	r3, [r3, #26]
 800d478:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d119      	bne.n	800d4b4 <tcp_output+0x1d0>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00b      	beq.n	800d4a0 <tcp_output+0x1bc>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d110      	bne.n	800d4b4 <tcp_output+0x1d0>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d496:	891a      	ldrh	r2, [r3, #8]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d209      	bcs.n	800d4b4 <tcp_output+0x1d0>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <tcp_output+0x1d0>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d4b0:	2b08      	cmp	r3, #8
 800d4b2:	d901      	bls.n	800d4b8 <tcp_output+0x1d4>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e000      	b.n	800d4ba <tcp_output+0x1d6>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	8b5b      	ldrh	r3, [r3, #26]
 800d4c2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f000 80e4 	beq.w	800d694 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	7d1b      	ldrb	r3, [r3, #20]
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d00d      	beq.n	800d4f0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	899b      	ldrh	r3, [r3, #12]
 800d4da:	b29c      	uxth	r4, r3
 800d4dc:	2010      	movs	r0, #16
 800d4de:	f7f9 fe97 	bl	8007210 <lwip_htons>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	4322      	orrs	r2, r4
 800d4ec:	b292      	uxth	r2, r2
 800d4ee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4f6:	f000 f909 	bl	800d70c <tcp_output_segment>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d016      	beq.n	800d534 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	8b5b      	ldrh	r3, [r3, #26]
 800d50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d50e:	b29a      	uxth	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	835a      	strh	r2, [r3, #26]
      return err;
 800d514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d518:	e0d3      	b.n	800d6c2 <tcp_output+0x3de>
 800d51a:	bf00      	nop
 800d51c:	08013870 	.word	0x08013870
 800d520:	08013db4 	.word	0x08013db4
 800d524:	080138c4 	.word	0x080138c4
 800d528:	08013dcc 	.word	0x08013dcc
 800d52c:	2000bdd8 	.word	0x2000bdd8
 800d530:	08013df4 	.word	0x08013df4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7d1b      	ldrb	r3, [r3, #20]
 800d540:	2b02      	cmp	r3, #2
 800d542:	d006      	beq.n	800d552 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	8b5b      	ldrh	r3, [r3, #26]
 800d548:	f023 0303 	bic.w	r3, r3, #3
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f9 fe6e 	bl	800723a <lwip_htonl>
 800d55e:	4604      	mov	r4, r0
 800d560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d562:	891b      	ldrh	r3, [r3, #8]
 800d564:	461d      	mov	r5, r3
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	899b      	ldrh	r3, [r3, #12]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f9 fe4e 	bl	8007210 <lwip_htons>
 800d574:	4603      	mov	r3, r0
 800d576:	b2db      	uxtb	r3, r3
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <tcp_output+0x2a0>
 800d580:	2301      	movs	r3, #1
 800d582:	e000      	b.n	800d586 <tcp_output+0x2a2>
 800d584:	2300      	movs	r3, #0
 800d586:	442b      	add	r3, r5
 800d588:	4423      	add	r3, r4
 800d58a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	da02      	bge.n	800d59e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	891b      	ldrh	r3, [r3, #8]
 800d5a2:	461c      	mov	r4, r3
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	899b      	ldrh	r3, [r3, #12]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7f9 fe2f 	bl	8007210 <lwip_htons>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	f003 0303 	and.w	r3, r3, #3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <tcp_output+0x2de>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e000      	b.n	800d5c4 <tcp_output+0x2e0>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4423      	add	r3, r4
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d049      	beq.n	800d65e <tcp_output+0x37a>
      seg->next = NULL;
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d105      	bne.n	800d5e4 <tcp_output+0x300>
        pcb->unacked = seg;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5dc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e0:	623b      	str	r3, [r7, #32]
 800d5e2:	e03f      	b.n	800d664 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7f9 fe25 	bl	800723a <lwip_htonl>
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f9 fe1e 	bl	800723a <lwip_htonl>
 800d5fe:	4603      	mov	r3, r0
 800d600:	1ae3      	subs	r3, r4, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	da24      	bge.n	800d650 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3370      	adds	r3, #112	@ 0x70
 800d60a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d60c:	e002      	b.n	800d614 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d011      	beq.n	800d640 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	4618      	mov	r0, r3
 800d626:	f7f9 fe08 	bl	800723a <lwip_htonl>
 800d62a:	4604      	mov	r4, r0
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	4618      	mov	r0, r3
 800d634:	f7f9 fe01 	bl	800723a <lwip_htonl>
 800d638:	4603      	mov	r3, r0
 800d63a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dbe6      	blt.n	800d60e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d646:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	e009      	b.n	800d664 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d650:	6a3b      	ldr	r3, [r7, #32]
 800d652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d654:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	623b      	str	r3, [r7, #32]
 800d65c:	e002      	b.n	800d664 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d65e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d660:	f7fc fc45 	bl	8009eee <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d668:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d012      	beq.n	800d696 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	4618      	mov	r0, r3
 800d678:	f7f9 fddf 	bl	800723a <lwip_htonl>
 800d67c:	4602      	mov	r2, r0
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d686:	8912      	ldrh	r2, [r2, #8]
 800d688:	4413      	add	r3, r2
  while (seg != NULL &&
 800d68a:	69ba      	ldr	r2, [r7, #24]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	f4bf aed9 	bcs.w	800d444 <tcp_output+0x160>
 800d692:	e000      	b.n	800d696 <tcp_output+0x3b2>
      break;
 800d694:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d108      	bne.n	800d6b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d6a6:	e004      	b.n	800d6b2 <tcp_output+0x3ce>
    goto output_done;
 800d6a8:	bf00      	nop
 800d6aa:	e002      	b.n	800d6b2 <tcp_output+0x3ce>
    goto output_done;
 800d6ac:	bf00      	nop
 800d6ae:	e000      	b.n	800d6b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d6b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	8b5b      	ldrh	r3, [r3, #26]
 800d6b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3728      	adds	r7, #40	@ 0x28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d6ca:	bf00      	nop

0800d6cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <tcp_output_segment_busy+0x1c>
 800d6da:	4b09      	ldr	r3, [pc, #36]	@ (800d700 <tcp_output_segment_busy+0x34>)
 800d6dc:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d6e0:	4908      	ldr	r1, [pc, #32]	@ (800d704 <tcp_output_segment_busy+0x38>)
 800d6e2:	4809      	ldr	r0, [pc, #36]	@ (800d708 <tcp_output_segment_busy+0x3c>)
 800d6e4:	f003 fd84 	bl	80111f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	7b9b      	ldrb	r3, [r3, #14]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d001      	beq.n	800d6f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	08013870 	.word	0x08013870
 800d704:	08013e0c 	.word	0x08013e0c
 800d708:	080138c4 	.word	0x080138c4

0800d70c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d70c:	b5b0      	push	{r4, r5, r7, lr}
 800d70e:	b08c      	sub	sp, #48	@ 0x30
 800d710:	af04      	add	r7, sp, #16
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <tcp_output_segment+0x20>
 800d71e:	4b64      	ldr	r3, [pc, #400]	@ (800d8b0 <tcp_output_segment+0x1a4>)
 800d720:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d724:	4963      	ldr	r1, [pc, #396]	@ (800d8b4 <tcp_output_segment+0x1a8>)
 800d726:	4864      	ldr	r0, [pc, #400]	@ (800d8b8 <tcp_output_segment+0x1ac>)
 800d728:	f003 fd62 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <tcp_output_segment+0x34>
 800d732:	4b5f      	ldr	r3, [pc, #380]	@ (800d8b0 <tcp_output_segment+0x1a4>)
 800d734:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d738:	4960      	ldr	r1, [pc, #384]	@ (800d8bc <tcp_output_segment+0x1b0>)
 800d73a:	485f      	ldr	r0, [pc, #380]	@ (800d8b8 <tcp_output_segment+0x1ac>)
 800d73c:	f003 fd58 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d106      	bne.n	800d754 <tcp_output_segment+0x48>
 800d746:	4b5a      	ldr	r3, [pc, #360]	@ (800d8b0 <tcp_output_segment+0x1a4>)
 800d748:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d74c:	495c      	ldr	r1, [pc, #368]	@ (800d8c0 <tcp_output_segment+0x1b4>)
 800d74e:	485a      	ldr	r0, [pc, #360]	@ (800d8b8 <tcp_output_segment+0x1ac>)
 800d750:	f003 fd4e 	bl	80111f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7ff ffb9 	bl	800d6cc <tcp_output_segment_busy>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	e0a1      	b.n	800d8a8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	68dc      	ldr	r4, [r3, #12]
 800d76c:	4610      	mov	r0, r2
 800d76e:	f7f9 fd64 	bl	800723a <lwip_htonl>
 800d772:	4603      	mov	r3, r0
 800d774:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	68dc      	ldr	r4, [r3, #12]
 800d77e:	4610      	mov	r0, r2
 800d780:	f7f9 fd46 	bl	8007210 <lwip_htons>
 800d784:	4603      	mov	r3, r0
 800d786:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d790:	441a      	add	r2, r3
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	3314      	adds	r3, #20
 800d79c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	7a9b      	ldrb	r3, [r3, #10]
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d015      	beq.n	800d7d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d7b6:	f7fc fe91 	bl	800a4dc <tcp_eff_send_mss_netif>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d7be:	8b7b      	ldrh	r3, [r7, #26]
 800d7c0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7f9 fd38 	bl	800723a <lwip_htonl>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	da02      	bge.n	800d7e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10c      	bne.n	800d808 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d7ee:	4b35      	ldr	r3, [pc, #212]	@ (800d8c4 <tcp_output_segment+0x1b8>)
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7f9 fd1c 	bl	800723a <lwip_htonl>
 800d802:	4602      	mov	r2, r0
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	8959      	ldrh	r1, [r3, #10]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	8b3a      	ldrh	r2, [r7, #24]
 800d822:	1a8a      	subs	r2, r1, r2
 800d824:	b292      	uxth	r2, r2
 800d826:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	8919      	ldrh	r1, [r3, #8]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	8b3a      	ldrh	r2, [r7, #24]
 800d834:	1a8a      	subs	r2, r1, r2
 800d836:	b292      	uxth	r2, r2
 800d838:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	68d2      	ldr	r2, [r2, #12]
 800d842:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	741a      	strb	r2, [r3, #16]
 800d84c:	2200      	movs	r2, #0
 800d84e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	7a9b      	ldrb	r3, [r3, #10]
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <tcp_output_segment+0x158>
 800d860:	2318      	movs	r3, #24
 800d862:	e000      	b.n	800d866 <tcp_output_segment+0x15a>
 800d864:	2314      	movs	r3, #20
 800d866:	4413      	add	r3, r2
 800d868:	69fa      	ldr	r2, [r7, #28]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d006      	beq.n	800d87c <tcp_output_segment+0x170>
 800d86e:	4b10      	ldr	r3, [pc, #64]	@ (800d8b0 <tcp_output_segment+0x1a4>)
 800d870:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d874:	4914      	ldr	r1, [pc, #80]	@ (800d8c8 <tcp_output_segment+0x1bc>)
 800d876:	4810      	ldr	r0, [pc, #64]	@ (800d8b8 <tcp_output_segment+0x1ac>)
 800d878:	f003 fcba 	bl	80111f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6858      	ldr	r0, [r3, #4]
 800d880:	68b9      	ldr	r1, [r7, #8]
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	1d1c      	adds	r4, r3, #4
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	7add      	ldrb	r5, [r3, #11]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	7a9b      	ldrb	r3, [r3, #10]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	9202      	str	r2, [sp, #8]
 800d892:	2206      	movs	r2, #6
 800d894:	9201      	str	r2, [sp, #4]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	462b      	mov	r3, r5
 800d89a:	4622      	mov	r2, r4
 800d89c:	f002 fa64 	bl	800fd68 <ip4_output_if>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3720      	adds	r7, #32
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bdb0      	pop	{r4, r5, r7, pc}
 800d8b0:	08013870 	.word	0x08013870
 800d8b4:	08013e34 	.word	0x08013e34
 800d8b8:	080138c4 	.word	0x080138c4
 800d8bc:	08013e54 	.word	0x08013e54
 800d8c0:	08013e74 	.word	0x08013e74
 800d8c4:	2000bd8c 	.word	0x2000bd8c
 800d8c8:	08013e98 	.word	0x08013e98

0800d8cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d8cc:	b5b0      	push	{r4, r5, r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d106      	bne.n	800d8e8 <tcp_rexmit_rto_prepare+0x1c>
 800d8da:	4b31      	ldr	r3, [pc, #196]	@ (800d9a0 <tcp_rexmit_rto_prepare+0xd4>)
 800d8dc:	f240 6263 	movw	r2, #1635	@ 0x663
 800d8e0:	4930      	ldr	r1, [pc, #192]	@ (800d9a4 <tcp_rexmit_rto_prepare+0xd8>)
 800d8e2:	4831      	ldr	r0, [pc, #196]	@ (800d9a8 <tcp_rexmit_rto_prepare+0xdc>)
 800d8e4:	f003 fc84 	bl	80111f0 <iprintf>

  if (pcb->unacked == NULL) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d102      	bne.n	800d8f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d8f0:	f06f 0305 	mvn.w	r3, #5
 800d8f4:	e050      	b.n	800d998 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8fa:	60fb      	str	r3, [r7, #12]
 800d8fc:	e00b      	b.n	800d916 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff fee4 	bl	800d6cc <tcp_output_segment_busy>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d90a:	f06f 0305 	mvn.w	r3, #5
 800d90e:	e043      	b.n	800d998 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60fb      	str	r3, [r7, #12]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1ef      	bne.n	800d8fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f7ff fed4 	bl	800d6cc <tcp_output_segment_busy>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d002      	beq.n	800d930 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d92a:	f06f 0305 	mvn.w	r3, #5
 800d92e:	e033      	b.n	800d998 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	8b5b      	ldrh	r3, [r3, #26]
 800d94a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7f9 fc6d 	bl	800723a <lwip_htonl>
 800d960:	4604      	mov	r4, r0
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	891b      	ldrh	r3, [r3, #8]
 800d966:	461d      	mov	r5, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	899b      	ldrh	r3, [r3, #12]
 800d96e:	b29b      	uxth	r3, r3
 800d970:	4618      	mov	r0, r3
 800d972:	f7f9 fc4d 	bl	8007210 <lwip_htons>
 800d976:	4603      	mov	r3, r0
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <tcp_rexmit_rto_prepare+0xba>
 800d982:	2301      	movs	r3, #1
 800d984:	e000      	b.n	800d988 <tcp_rexmit_rto_prepare+0xbc>
 800d986:	2300      	movs	r3, #0
 800d988:	442b      	add	r3, r5
 800d98a:	18e2      	adds	r2, r4, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a0:	08013870 	.word	0x08013870
 800d9a4:	08013eac 	.word	0x08013eac
 800d9a8:	080138c4 	.word	0x080138c4

0800d9ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <tcp_rexmit_rto_commit+0x1c>
 800d9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f0 <tcp_rexmit_rto_commit+0x44>)
 800d9bc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d9c0:	490c      	ldr	r1, [pc, #48]	@ (800d9f4 <tcp_rexmit_rto_commit+0x48>)
 800d9c2:	480d      	ldr	r0, [pc, #52]	@ (800d9f8 <tcp_rexmit_rto_commit+0x4c>)
 800d9c4:	f003 fc14 	bl	80111f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9ce:	2bff      	cmp	r3, #255	@ 0xff
 800d9d0:	d007      	beq.n	800d9e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9d8:	3301      	adds	r3, #1
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff fc7e 	bl	800d2e4 <tcp_output>
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	08013870 	.word	0x08013870
 800d9f4:	08013ed0 	.word	0x08013ed0
 800d9f8:	080138c4 	.word	0x080138c4

0800d9fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d106      	bne.n	800da18 <tcp_rexmit_rto+0x1c>
 800da0a:	4b0a      	ldr	r3, [pc, #40]	@ (800da34 <tcp_rexmit_rto+0x38>)
 800da0c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800da10:	4909      	ldr	r1, [pc, #36]	@ (800da38 <tcp_rexmit_rto+0x3c>)
 800da12:	480a      	ldr	r0, [pc, #40]	@ (800da3c <tcp_rexmit_rto+0x40>)
 800da14:	f003 fbec 	bl	80111f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff ff57 	bl	800d8cc <tcp_rexmit_rto_prepare>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d102      	bne.n	800da2a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff ffc1 	bl	800d9ac <tcp_rexmit_rto_commit>
  }
}
 800da2a:	bf00      	nop
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	08013870 	.word	0x08013870
 800da38:	08013ef4 	.word	0x08013ef4
 800da3c:	080138c4 	.word	0x080138c4

0800da40 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800da40:	b590      	push	{r4, r7, lr}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d106      	bne.n	800da5c <tcp_rexmit+0x1c>
 800da4e:	4b2f      	ldr	r3, [pc, #188]	@ (800db0c <tcp_rexmit+0xcc>)
 800da50:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800da54:	492e      	ldr	r1, [pc, #184]	@ (800db10 <tcp_rexmit+0xd0>)
 800da56:	482f      	ldr	r0, [pc, #188]	@ (800db14 <tcp_rexmit+0xd4>)
 800da58:	f003 fbca 	bl	80111f0 <iprintf>

  if (pcb->unacked == NULL) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800da64:	f06f 0305 	mvn.w	r3, #5
 800da68:	e04c      	b.n	800db04 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da6e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800da70:	68b8      	ldr	r0, [r7, #8]
 800da72:	f7ff fe2b 	bl	800d6cc <tcp_output_segment_busy>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800da7c:	f06f 0305 	mvn.w	r3, #5
 800da80:	e040      	b.n	800db04 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	336c      	adds	r3, #108	@ 0x6c
 800da8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800da90:	e002      	b.n	800da98 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d011      	beq.n	800dac4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f9 fbc6 	bl	800723a <lwip_htonl>
 800daae:	4604      	mov	r4, r0
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7f9 fbbf 	bl	800723a <lwip_htonl>
 800dabc:	4603      	mov	r3, r0
 800dabe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	dbe6      	blt.n	800da92 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d103      	bne.n	800dae2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dae8:	2bff      	cmp	r3, #255	@ 0xff
 800daea:	d007      	beq.n	800dafc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800daf2:	3301      	adds	r3, #1
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd90      	pop	{r4, r7, pc}
 800db0c:	08013870 	.word	0x08013870
 800db10:	08013f10 	.word	0x08013f10
 800db14:	080138c4 	.word	0x080138c4

0800db18 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d106      	bne.n	800db34 <tcp_rexmit_fast+0x1c>
 800db26:	4b2a      	ldr	r3, [pc, #168]	@ (800dbd0 <tcp_rexmit_fast+0xb8>)
 800db28:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800db2c:	4929      	ldr	r1, [pc, #164]	@ (800dbd4 <tcp_rexmit_fast+0xbc>)
 800db2e:	482a      	ldr	r0, [pc, #168]	@ (800dbd8 <tcp_rexmit_fast+0xc0>)
 800db30:	f003 fb5e 	bl	80111f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d045      	beq.n	800dbc8 <tcp_rexmit_fast+0xb0>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	8b5b      	ldrh	r3, [r3, #26]
 800db40:	f003 0304 	and.w	r3, r3, #4
 800db44:	2b00      	cmp	r3, #0
 800db46:	d13f      	bne.n	800dbc8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ff79 	bl	800da40 <tcp_rexmit>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d139      	bne.n	800dbc8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800db60:	4293      	cmp	r3, r2
 800db62:	bf28      	it	cs
 800db64:	4613      	movcs	r3, r2
 800db66:	b29b      	uxth	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da00      	bge.n	800db6e <tcp_rexmit_fast+0x56>
 800db6c:	3301      	adds	r3, #1
 800db6e:	105b      	asrs	r3, r3, #1
 800db70:	b29a      	uxth	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800db7e:	461a      	mov	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	429a      	cmp	r2, r3
 800db88:	d206      	bcs.n	800db98 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	b29a      	uxth	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dba2:	4619      	mov	r1, r3
 800dba4:	0049      	lsls	r1, r1, #1
 800dba6:	440b      	add	r3, r1
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	4413      	add	r3, r2
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	8b5b      	ldrh	r3, [r3, #26]
 800dbb8:	f043 0304 	orr.w	r3, r3, #4
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800dbc8:	bf00      	nop
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	08013870 	.word	0x08013870
 800dbd4:	08013f28 	.word	0x08013f28
 800dbd8:	080138c4 	.word	0x080138c4

0800dbdc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	607b      	str	r3, [r7, #4]
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	817b      	strh	r3, [r7, #10]
 800dbea:	4613      	mov	r3, r2
 800dbec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dbee:	897a      	ldrh	r2, [r7, #10]
 800dbf0:	893b      	ldrh	r3, [r7, #8]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	3314      	adds	r3, #20
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dbfe:	4619      	mov	r1, r3
 800dc00:	2022      	movs	r0, #34	@ 0x22
 800dc02:	f7fa fc0f 	bl	8008424 <pbuf_alloc>
 800dc06:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d04d      	beq.n	800dcaa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dc0e:	897b      	ldrh	r3, [r7, #10]
 800dc10:	3313      	adds	r3, #19
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	8952      	ldrh	r2, [r2, #10]
 800dc16:	4293      	cmp	r3, r2
 800dc18:	db06      	blt.n	800dc28 <tcp_output_alloc_header_common+0x4c>
 800dc1a:	4b26      	ldr	r3, [pc, #152]	@ (800dcb4 <tcp_output_alloc_header_common+0xd8>)
 800dc1c:	f240 7223 	movw	r2, #1827	@ 0x723
 800dc20:	4925      	ldr	r1, [pc, #148]	@ (800dcb8 <tcp_output_alloc_header_common+0xdc>)
 800dc22:	4826      	ldr	r0, [pc, #152]	@ (800dcbc <tcp_output_alloc_header_common+0xe0>)
 800dc24:	f003 fae4 	bl	80111f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dc2e:	8c3b      	ldrh	r3, [r7, #32]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f9 faed 	bl	8007210 <lwip_htons>
 800dc36:	4603      	mov	r3, r0
 800dc38:	461a      	mov	r2, r3
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dc3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7f9 fae5 	bl	8007210 <lwip_htons>
 800dc46:	4603      	mov	r3, r0
 800dc48:	461a      	mov	r2, r3
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7f9 faf0 	bl	800723a <lwip_htonl>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dc60:	897b      	ldrh	r3, [r7, #10]
 800dc62:	089b      	lsrs	r3, r3, #2
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	3305      	adds	r3, #5
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	031b      	lsls	r3, r3, #12
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	4313      	orrs	r3, r2
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f9 fac9 	bl	8007210 <lwip_htons>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	461a      	mov	r2, r3
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dc86:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f9 fac1 	bl	8007210 <lwip_htons>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	461a      	mov	r2, r3
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	741a      	strb	r2, [r3, #16]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2200      	movs	r2, #0
 800dca4:	749a      	strb	r2, [r3, #18]
 800dca6:	2200      	movs	r2, #0
 800dca8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800dcaa:	697b      	ldr	r3, [r7, #20]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	08013870 	.word	0x08013870
 800dcb8:	08013f48 	.word	0x08013f48
 800dcbc:	080138c4 	.word	0x080138c4

0800dcc0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dcc0:	b5b0      	push	{r4, r5, r7, lr}
 800dcc2:	b08a      	sub	sp, #40	@ 0x28
 800dcc4:	af04      	add	r7, sp, #16
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	607b      	str	r3, [r7, #4]
 800dcca:	460b      	mov	r3, r1
 800dccc:	817b      	strh	r3, [r7, #10]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <tcp_output_alloc_header+0x26>
 800dcd8:	4b15      	ldr	r3, [pc, #84]	@ (800dd30 <tcp_output_alloc_header+0x70>)
 800dcda:	f240 7242 	movw	r2, #1858	@ 0x742
 800dcde:	4915      	ldr	r1, [pc, #84]	@ (800dd34 <tcp_output_alloc_header+0x74>)
 800dce0:	4815      	ldr	r0, [pc, #84]	@ (800dd38 <tcp_output_alloc_header+0x78>)
 800dce2:	f003 fa85 	bl	80111f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	8adb      	ldrh	r3, [r3, #22]
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	8b12      	ldrh	r2, [r2, #24]
 800dcf2:	68f9      	ldr	r1, [r7, #12]
 800dcf4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800dcf6:	893d      	ldrh	r5, [r7, #8]
 800dcf8:	897c      	ldrh	r4, [r7, #10]
 800dcfa:	9103      	str	r1, [sp, #12]
 800dcfc:	2110      	movs	r1, #16
 800dcfe:	9102      	str	r1, [sp, #8]
 800dd00:	9201      	str	r2, [sp, #4]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	462a      	mov	r2, r5
 800dd08:	4621      	mov	r1, r4
 800dd0a:	f7ff ff67 	bl	800dbdc <tcp_output_alloc_header_common>
 800dd0e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d006      	beq.n	800dd24 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800dd1e:	441a      	add	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800dd24:	697b      	ldr	r3, [r7, #20]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	08013870 	.word	0x08013870
 800dd34:	08013f78 	.word	0x08013f78
 800dd38:	080138c4 	.word	0x080138c4

0800dd3c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b088      	sub	sp, #32
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4611      	mov	r1, r2
 800dd48:	461a      	mov	r2, r3
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	71fb      	strb	r3, [r7, #7]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <tcp_output_fill_options+0x2e>
 800dd5c:	4b12      	ldr	r3, [pc, #72]	@ (800dda8 <tcp_output_fill_options+0x6c>)
 800dd5e:	f240 7256 	movw	r2, #1878	@ 0x756
 800dd62:	4912      	ldr	r1, [pc, #72]	@ (800ddac <tcp_output_fill_options+0x70>)
 800dd64:	4812      	ldr	r0, [pc, #72]	@ (800ddb0 <tcp_output_fill_options+0x74>)
 800dd66:	f003 fa43 	bl	80111f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	3314      	adds	r3, #20
 800dd74:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dd76:	8bfb      	ldrh	r3, [r7, #30]
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	79fb      	ldrb	r3, [r7, #7]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	4413      	add	r3, r2
 800dd86:	3314      	adds	r3, #20
 800dd88:	69ba      	ldr	r2, [r7, #24]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	697a      	ldr	r2, [r7, #20]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d006      	beq.n	800dda0 <tcp_output_fill_options+0x64>
 800dd92:	4b05      	ldr	r3, [pc, #20]	@ (800dda8 <tcp_output_fill_options+0x6c>)
 800dd94:	f240 7275 	movw	r2, #1909	@ 0x775
 800dd98:	4906      	ldr	r1, [pc, #24]	@ (800ddb4 <tcp_output_fill_options+0x78>)
 800dd9a:	4805      	ldr	r0, [pc, #20]	@ (800ddb0 <tcp_output_fill_options+0x74>)
 800dd9c:	f003 fa28 	bl	80111f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dda0:	bf00      	nop
 800dda2:	3720      	adds	r7, #32
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	08013870 	.word	0x08013870
 800ddac:	08013fa0 	.word	0x08013fa0
 800ddb0:	080138c4 	.word	0x080138c4
 800ddb4:	08013e98 	.word	0x08013e98

0800ddb8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	@ 0x28
 800ddbc:	af04      	add	r7, sp, #16
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d106      	bne.n	800ddda <tcp_output_control_segment+0x22>
 800ddcc:	4b1c      	ldr	r3, [pc, #112]	@ (800de40 <tcp_output_control_segment+0x88>)
 800ddce:	f240 7287 	movw	r2, #1927	@ 0x787
 800ddd2:	491c      	ldr	r1, [pc, #112]	@ (800de44 <tcp_output_control_segment+0x8c>)
 800ddd4:	481c      	ldr	r0, [pc, #112]	@ (800de48 <tcp_output_control_segment+0x90>)
 800ddd6:	f003 fa0b 	bl	80111f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	6879      	ldr	r1, [r7, #4]
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7fe ff42 	bl	800cc68 <tcp_route>
 800dde4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d102      	bne.n	800ddf2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ddec:	23fc      	movs	r3, #252	@ 0xfc
 800ddee:	75fb      	strb	r3, [r7, #23]
 800ddf0:	e01c      	b.n	800de2c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d006      	beq.n	800de06 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	7adb      	ldrb	r3, [r3, #11]
 800ddfc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	7a9b      	ldrb	r3, [r3, #10]
 800de02:	757b      	strb	r3, [r7, #21]
 800de04:	e003      	b.n	800de0e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800de06:	23ff      	movs	r3, #255	@ 0xff
 800de08:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800de0e:	7dba      	ldrb	r2, [r7, #22]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	9302      	str	r3, [sp, #8]
 800de14:	2306      	movs	r3, #6
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	7d7b      	ldrb	r3, [r7, #21]
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	4613      	mov	r3, r2
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	6879      	ldr	r1, [r7, #4]
 800de22:	68b8      	ldr	r0, [r7, #8]
 800de24:	f001 ffa0 	bl	800fd68 <ip4_output_if>
 800de28:	4603      	mov	r3, r0
 800de2a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800de2c:	68b8      	ldr	r0, [r7, #8]
 800de2e:	f7fa fddd 	bl	80089ec <pbuf_free>
  return err;
 800de32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	08013870 	.word	0x08013870
 800de44:	08013fc8 	.word	0x08013fc8
 800de48:	080138c4 	.word	0x080138c4

0800de4c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800de4c:	b590      	push	{r4, r7, lr}
 800de4e:	b08b      	sub	sp, #44	@ 0x2c
 800de50:	af04      	add	r7, sp, #16
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d106      	bne.n	800de6e <tcp_rst+0x22>
 800de60:	4b1f      	ldr	r3, [pc, #124]	@ (800dee0 <tcp_rst+0x94>)
 800de62:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800de66:	491f      	ldr	r1, [pc, #124]	@ (800dee4 <tcp_rst+0x98>)
 800de68:	481f      	ldr	r0, [pc, #124]	@ (800dee8 <tcp_rst+0x9c>)
 800de6a:	f003 f9c1 	bl	80111f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800de6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <tcp_rst+0x36>
 800de74:	4b1a      	ldr	r3, [pc, #104]	@ (800dee0 <tcp_rst+0x94>)
 800de76:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800de7a:	491c      	ldr	r1, [pc, #112]	@ (800deec <tcp_rst+0xa0>)
 800de7c:	481a      	ldr	r0, [pc, #104]	@ (800dee8 <tcp_rst+0x9c>)
 800de7e:	f003 f9b7 	bl	80111f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de82:	2300      	movs	r3, #0
 800de84:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800de86:	f246 0308 	movw	r3, #24584	@ 0x6008
 800de8a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	b29c      	uxth	r4, r3
 800de90:	68b8      	ldr	r0, [r7, #8]
 800de92:	f7f9 f9d2 	bl	800723a <lwip_htonl>
 800de96:	4602      	mov	r2, r0
 800de98:	8abb      	ldrh	r3, [r7, #20]
 800de9a:	9303      	str	r3, [sp, #12]
 800de9c:	2314      	movs	r3, #20
 800de9e:	9302      	str	r3, [sp, #8]
 800dea0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	4613      	mov	r3, r2
 800deaa:	2200      	movs	r2, #0
 800deac:	4621      	mov	r1, r4
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7ff fe94 	bl	800dbdc <tcp_output_alloc_header_common>
 800deb4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00c      	beq.n	800ded6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800debc:	7dfb      	ldrb	r3, [r7, #23]
 800debe:	2200      	movs	r2, #0
 800dec0:	6939      	ldr	r1, [r7, #16]
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f7ff ff3a 	bl	800dd3c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	6939      	ldr	r1, [r7, #16]
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7ff ff72 	bl	800ddb8 <tcp_output_control_segment>
 800ded4:	e000      	b.n	800ded8 <tcp_rst+0x8c>
    return;
 800ded6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd90      	pop	{r4, r7, pc}
 800dede:	bf00      	nop
 800dee0:	08013870 	.word	0x08013870
 800dee4:	08013ff4 	.word	0x08013ff4
 800dee8:	080138c4 	.word	0x080138c4
 800deec:	08014010 	.word	0x08014010

0800def0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b087      	sub	sp, #28
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d106      	bne.n	800df14 <tcp_send_empty_ack+0x24>
 800df06:	4b28      	ldr	r3, [pc, #160]	@ (800dfa8 <tcp_send_empty_ack+0xb8>)
 800df08:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800df0c:	4927      	ldr	r1, [pc, #156]	@ (800dfac <tcp_send_empty_ack+0xbc>)
 800df0e:	4828      	ldr	r0, [pc, #160]	@ (800dfb0 <tcp_send_empty_ack+0xc0>)
 800df10:	f003 f96e 	bl	80111f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df14:	7dfb      	ldrb	r3, [r7, #23]
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	f003 0304 	and.w	r3, r3, #4
 800df1e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800df20:	7d7b      	ldrb	r3, [r7, #21]
 800df22:	b29c      	uxth	r4, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df28:	4618      	mov	r0, r3
 800df2a:	f7f9 f986 	bl	800723a <lwip_htonl>
 800df2e:	4603      	mov	r3, r0
 800df30:	2200      	movs	r2, #0
 800df32:	4621      	mov	r1, r4
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff fec3 	bl	800dcc0 <tcp_output_alloc_header>
 800df3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d109      	bne.n	800df56 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	8b5b      	ldrh	r3, [r3, #26]
 800df46:	f043 0303 	orr.w	r3, r3, #3
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800df50:	f06f 0301 	mvn.w	r3, #1
 800df54:	e023      	b.n	800df9e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800df56:	7dbb      	ldrb	r3, [r7, #22]
 800df58:	7dfa      	ldrb	r2, [r7, #23]
 800df5a:	6939      	ldr	r1, [r7, #16]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff feed 	bl	800dd3c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3304      	adds	r3, #4
 800df68:	6939      	ldr	r1, [r7, #16]
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff ff24 	bl	800ddb8 <tcp_output_control_segment>
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800df74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d007      	beq.n	800df8c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	8b5b      	ldrh	r3, [r3, #26]
 800df80:	f043 0303 	orr.w	r3, r3, #3
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	835a      	strh	r2, [r3, #26]
 800df8a:	e006      	b.n	800df9a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	8b5b      	ldrh	r3, [r3, #26]
 800df90:	f023 0303 	bic.w	r3, r3, #3
 800df94:	b29a      	uxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800df9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd90      	pop	{r4, r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	08013870 	.word	0x08013870
 800dfac:	0801402c 	.word	0x0801402c
 800dfb0:	080138c4 	.word	0x080138c4

0800dfb4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dfb4:	b590      	push	{r4, r7, lr}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d106      	bne.n	800dfd4 <tcp_keepalive+0x20>
 800dfc6:	4b18      	ldr	r3, [pc, #96]	@ (800e028 <tcp_keepalive+0x74>)
 800dfc8:	f640 0224 	movw	r2, #2084	@ 0x824
 800dfcc:	4917      	ldr	r1, [pc, #92]	@ (800e02c <tcp_keepalive+0x78>)
 800dfce:	4818      	ldr	r0, [pc, #96]	@ (800e030 <tcp_keepalive+0x7c>)
 800dfd0:	f003 f90e 	bl	80111f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
 800dfd6:	b29c      	uxth	r4, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f9 f92b 	bl	800723a <lwip_htonl>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4621      	mov	r1, r4
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff fe68 	bl	800dcc0 <tcp_output_alloc_header>
 800dff0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d102      	bne.n	800dffe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dff8:	f04f 33ff 	mov.w	r3, #4294967295
 800dffc:	e010      	b.n	800e020 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
 800e000:	2200      	movs	r2, #0
 800e002:	6939      	ldr	r1, [r7, #16]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff fe99 	bl	800dd3c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	3304      	adds	r3, #4
 800e010:	6939      	ldr	r1, [r7, #16]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff fed0 	bl	800ddb8 <tcp_output_control_segment>
 800e018:	4603      	mov	r3, r0
 800e01a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	371c      	adds	r7, #28
 800e024:	46bd      	mov	sp, r7
 800e026:	bd90      	pop	{r4, r7, pc}
 800e028:	08013870 	.word	0x08013870
 800e02c:	0801404c 	.word	0x0801404c
 800e030:	080138c4 	.word	0x080138c4

0800e034 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e034:	b590      	push	{r4, r7, lr}
 800e036:	b08b      	sub	sp, #44	@ 0x2c
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e03c:	2300      	movs	r3, #0
 800e03e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d106      	bne.n	800e056 <tcp_zero_window_probe+0x22>
 800e048:	4b4c      	ldr	r3, [pc, #304]	@ (800e17c <tcp_zero_window_probe+0x148>)
 800e04a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800e04e:	494c      	ldr	r1, [pc, #304]	@ (800e180 <tcp_zero_window_probe+0x14c>)
 800e050:	484c      	ldr	r0, [pc, #304]	@ (800e184 <tcp_zero_window_probe+0x150>)
 800e052:	f003 f8cd 	bl	80111f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e05a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e05c:	6a3b      	ldr	r3, [r7, #32]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e062:	2300      	movs	r3, #0
 800e064:	e086      	b.n	800e174 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e06c:	2bff      	cmp	r3, #255	@ 0xff
 800e06e:	d007      	beq.n	800e080 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e076:	3301      	adds	r3, #1
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e080:	6a3b      	ldr	r3, [r7, #32]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	899b      	ldrh	r3, [r3, #12]
 800e086:	b29b      	uxth	r3, r3
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f9 f8c1 	bl	8007210 <lwip_htons>
 800e08e:	4603      	mov	r3, r0
 800e090:	b2db      	uxtb	r3, r3
 800e092:	f003 0301 	and.w	r3, r3, #1
 800e096:	2b00      	cmp	r3, #0
 800e098:	d005      	beq.n	800e0a6 <tcp_zero_window_probe+0x72>
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	891b      	ldrh	r3, [r3, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <tcp_zero_window_probe+0x72>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e000      	b.n	800e0a8 <tcp_zero_window_probe+0x74>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e0aa:	7ffb      	ldrb	r3, [r7, #31]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	bf0c      	ite	eq
 800e0b0:	2301      	moveq	r3, #1
 800e0b2:	2300      	movne	r3, #0
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0bc:	b299      	uxth	r1, r3
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	8bba      	ldrh	r2, [r7, #28]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f7ff fdfa 	bl	800dcc0 <tcp_output_alloc_header>
 800e0cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d102      	bne.n	800e0da <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d8:	e04c      	b.n	800e174 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e0e0:	7ffb      	ldrb	r3, [r7, #31]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d011      	beq.n	800e10a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	899b      	ldrh	r3, [r3, #12]
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	b21b      	sxth	r3, r3
 800e0ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e0f2:	b21c      	sxth	r4, r3
 800e0f4:	2011      	movs	r0, #17
 800e0f6:	f7f9 f88b 	bl	8007210 <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	b21b      	sxth	r3, r3
 800e0fe:	4323      	orrs	r3, r4
 800e100:	b21b      	sxth	r3, r3
 800e102:	b29a      	uxth	r2, r3
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	819a      	strh	r2, [r3, #12]
 800e108:	e010      	b.n	800e12c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	3314      	adds	r3, #20
 800e110:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	6858      	ldr	r0, [r3, #4]
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	891a      	ldrh	r2, [r3, #8]
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	891b      	ldrh	r3, [r3, #8]
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	b29b      	uxth	r3, r3
 800e124:	2201      	movs	r2, #1
 800e126:	6939      	ldr	r1, [r7, #16]
 800e128:	f7fa fe56 	bl	8008dd8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e12c:	6a3b      	ldr	r3, [r7, #32]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	4618      	mov	r0, r3
 800e134:	f7f9 f881 	bl	800723a <lwip_htonl>
 800e138:	4603      	mov	r3, r0
 800e13a:	3301      	adds	r3, #1
 800e13c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	da02      	bge.n	800e150 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e154:	2200      	movs	r2, #0
 800e156:	69b9      	ldr	r1, [r7, #24]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff fdef 	bl	800dd3c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	3304      	adds	r3, #4
 800e164:	69b9      	ldr	r1, [r7, #24]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff fe26 	bl	800ddb8 <tcp_output_control_segment>
 800e16c:	4603      	mov	r3, r0
 800e16e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e170:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e174:	4618      	mov	r0, r3
 800e176:	372c      	adds	r7, #44	@ 0x2c
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd90      	pop	{r4, r7, pc}
 800e17c:	08013870 	.word	0x08013870
 800e180:	08014068 	.word	0x08014068
 800e184:	080138c4 	.word	0x080138c4

0800e188 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e190:	f7fa ff10 	bl	8008fb4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e194:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c0 <tcpip_tcp_timer+0x38>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d103      	bne.n	800e1a4 <tcpip_tcp_timer+0x1c>
 800e19c:	4b09      	ldr	r3, [pc, #36]	@ (800e1c4 <tcpip_tcp_timer+0x3c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d005      	beq.n	800e1b0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	4908      	ldr	r1, [pc, #32]	@ (800e1c8 <tcpip_tcp_timer+0x40>)
 800e1a8:	20fa      	movs	r0, #250	@ 0xfa
 800e1aa:	f000 f8f3 	bl	800e394 <sys_timeout>
 800e1ae:	e003      	b.n	800e1b8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e1b0:	4b06      	ldr	r3, [pc, #24]	@ (800e1cc <tcpip_tcp_timer+0x44>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
  }
}
 800e1b6:	bf00      	nop
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	2000bd98 	.word	0x2000bd98
 800e1c4:	2000bd9c 	.word	0x2000bd9c
 800e1c8:	0800e189 	.word	0x0800e189
 800e1cc:	2000bde4 	.word	0x2000bde4

0800e1d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e200 <tcp_timer_needed+0x30>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10f      	bne.n	800e1fc <tcp_timer_needed+0x2c>
 800e1dc:	4b09      	ldr	r3, [pc, #36]	@ (800e204 <tcp_timer_needed+0x34>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <tcp_timer_needed+0x1c>
 800e1e4:	4b08      	ldr	r3, [pc, #32]	@ (800e208 <tcp_timer_needed+0x38>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d007      	beq.n	800e1fc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e1ec:	4b04      	ldr	r3, [pc, #16]	@ (800e200 <tcp_timer_needed+0x30>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	4905      	ldr	r1, [pc, #20]	@ (800e20c <tcp_timer_needed+0x3c>)
 800e1f6:	20fa      	movs	r0, #250	@ 0xfa
 800e1f8:	f000 f8cc 	bl	800e394 <sys_timeout>
  }
}
 800e1fc:	bf00      	nop
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	2000bde4 	.word	0x2000bde4
 800e204:	2000bd98 	.word	0x2000bd98
 800e208:	2000bd9c 	.word	0x2000bd9c
 800e20c:	0800e189 	.word	0x0800e189

0800e210 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e21c:	200a      	movs	r0, #10
 800e21e:	f7f9 fccb 	bl	8007bb8 <memp_malloc>
 800e222:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d109      	bne.n	800e23e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d151      	bne.n	800e2d4 <sys_timeout_abs+0xc4>
 800e230:	4b2a      	ldr	r3, [pc, #168]	@ (800e2dc <sys_timeout_abs+0xcc>)
 800e232:	22be      	movs	r2, #190	@ 0xbe
 800e234:	492a      	ldr	r1, [pc, #168]	@ (800e2e0 <sys_timeout_abs+0xd0>)
 800e236:	482b      	ldr	r0, [pc, #172]	@ (800e2e4 <sys_timeout_abs+0xd4>)
 800e238:	f002 ffda 	bl	80111f0 <iprintf>
    return;
 800e23c:	e04a      	b.n	800e2d4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2200      	movs	r2, #0
 800e242:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e256:	4b24      	ldr	r3, [pc, #144]	@ (800e2e8 <sys_timeout_abs+0xd8>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d103      	bne.n	800e266 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e25e:	4a22      	ldr	r2, [pc, #136]	@ (800e2e8 <sys_timeout_abs+0xd8>)
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	6013      	str	r3, [r2, #0]
    return;
 800e264:	e037      	b.n	800e2d6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	4b1f      	ldr	r3, [pc, #124]	@ (800e2e8 <sys_timeout_abs+0xd8>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	0fdb      	lsrs	r3, r3, #31
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d007      	beq.n	800e28e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e27e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2e8 <sys_timeout_abs+0xd8>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e286:	4a18      	ldr	r2, [pc, #96]	@ (800e2e8 <sys_timeout_abs+0xd8>)
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	6013      	str	r3, [r2, #0]
 800e28c:	e023      	b.n	800e2d6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e28e:	4b16      	ldr	r3, [pc, #88]	@ (800e2e8 <sys_timeout_abs+0xd8>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	e01a      	b.n	800e2cc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00b      	beq.n	800e2b6 <sys_timeout_abs+0xa6>
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	685a      	ldr	r2, [r3, #4]
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	0fdb      	lsrs	r3, r3, #31
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d007      	beq.n	800e2c6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	601a      	str	r2, [r3, #0]
        break;
 800e2c4:	e007      	b.n	800e2d6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1e1      	bne.n	800e296 <sys_timeout_abs+0x86>
 800e2d2:	e000      	b.n	800e2d6 <sys_timeout_abs+0xc6>
    return;
 800e2d4:	bf00      	nop
      }
    }
  }
}
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	0801408c 	.word	0x0801408c
 800e2e0:	080140c0 	.word	0x080140c0
 800e2e4:	08014100 	.word	0x08014100
 800e2e8:	2000bddc 	.word	0x2000bddc

0800e2ec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	4798      	blx	r3

  now = sys_now();
 800e2fe:	f7f5 fb6f 	bl	80039e0 <sys_now>
 800e302:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	4b0f      	ldr	r3, [pc, #60]	@ (800e348 <lwip_cyclic_timer+0x5c>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4413      	add	r3, r2
 800e30e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	0fdb      	lsrs	r3, r3, #31
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d009      	beq.n	800e336 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	4413      	add	r3, r2
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	4907      	ldr	r1, [pc, #28]	@ (800e34c <lwip_cyclic_timer+0x60>)
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff ff6e 	bl	800e210 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e334:	e004      	b.n	800e340 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	4904      	ldr	r1, [pc, #16]	@ (800e34c <lwip_cyclic_timer+0x60>)
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f7ff ff68 	bl	800e210 <sys_timeout_abs>
}
 800e340:	bf00      	nop
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	2000bde0 	.word	0x2000bde0
 800e34c:	0800e2ed 	.word	0x0800e2ed

0800e350 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e356:	2301      	movs	r3, #1
 800e358:	607b      	str	r3, [r7, #4]
 800e35a:	e00e      	b.n	800e37a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e35c:	4a0b      	ldr	r2, [pc, #44]	@ (800e38c <sys_timeouts_init+0x3c>)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	4a08      	ldr	r2, [pc, #32]	@ (800e38c <sys_timeouts_init+0x3c>)
 800e36a:	4413      	add	r3, r2
 800e36c:	461a      	mov	r2, r3
 800e36e:	4908      	ldr	r1, [pc, #32]	@ (800e390 <sys_timeouts_init+0x40>)
 800e370:	f000 f810 	bl	800e394 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3301      	adds	r3, #1
 800e378:	607b      	str	r3, [r7, #4]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d9ed      	bls.n	800e35c <sys_timeouts_init+0xc>
  }
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	08014cb0 	.word	0x08014cb0
 800e390:	0800e2ed 	.word	0x0800e2ed

0800e394 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b086      	sub	sp, #24
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3a6:	d306      	bcc.n	800e3b6 <sys_timeout+0x22>
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d4 <sys_timeout+0x40>)
 800e3aa:	f240 1229 	movw	r2, #297	@ 0x129
 800e3ae:	490a      	ldr	r1, [pc, #40]	@ (800e3d8 <sys_timeout+0x44>)
 800e3b0:	480a      	ldr	r0, [pc, #40]	@ (800e3dc <sys_timeout+0x48>)
 800e3b2:	f002 ff1d 	bl	80111f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e3b6:	f7f5 fb13 	bl	80039e0 <sys_now>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	4413      	add	r3, r2
 800e3c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	68b9      	ldr	r1, [r7, #8]
 800e3c6:	6978      	ldr	r0, [r7, #20]
 800e3c8:	f7ff ff22 	bl	800e210 <sys_timeout_abs>
#endif
}
 800e3cc:	bf00      	nop
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	0801408c 	.word	0x0801408c
 800e3d8:	08014128 	.word	0x08014128
 800e3dc:	08014100 	.word	0x08014100

0800e3e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e3e6:	f7f5 fafb 	bl	80039e0 <sys_now>
 800e3ea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e3ec:	4b17      	ldr	r3, [pc, #92]	@ (800e44c <sys_check_timeouts+0x6c>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d022      	beq.n	800e43e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	0fdb      	lsrs	r3, r3, #31
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	b2db      	uxtb	r3, r3
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d11a      	bne.n	800e442 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a0e      	ldr	r2, [pc, #56]	@ (800e44c <sys_check_timeouts+0x6c>)
 800e412:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	4a0a      	ldr	r2, [pc, #40]	@ (800e450 <sys_check_timeouts+0x70>)
 800e426:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e428:	68b9      	ldr	r1, [r7, #8]
 800e42a:	200a      	movs	r0, #10
 800e42c:	f7f9 fc3a 	bl	8007ca4 <memp_free>
    if (handler != NULL) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d0da      	beq.n	800e3ec <sys_check_timeouts+0xc>
      handler(arg);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6838      	ldr	r0, [r7, #0]
 800e43a:	4798      	blx	r3
  do {
 800e43c:	e7d6      	b.n	800e3ec <sys_check_timeouts+0xc>
      return;
 800e43e:	bf00      	nop
 800e440:	e000      	b.n	800e444 <sys_check_timeouts+0x64>
      return;
 800e442:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	2000bddc 	.word	0x2000bddc
 800e450:	2000bde0 	.word	0x2000bde0

0800e454 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e45a:	4b16      	ldr	r3, [pc, #88]	@ (800e4b4 <sys_timeouts_sleeptime+0x60>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d102      	bne.n	800e468 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e462:	f04f 33ff 	mov.w	r3, #4294967295
 800e466:	e020      	b.n	800e4aa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800e468:	f7f5 faba 	bl	80039e0 <sys_now>
 800e46c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e46e:	4b11      	ldr	r3, [pc, #68]	@ (800e4b4 <sys_timeouts_sleeptime+0x60>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685a      	ldr	r2, [r3, #4]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	0fdb      	lsrs	r3, r3, #31
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <sys_timeouts_sleeptime+0x34>
    return 0;
 800e484:	2300      	movs	r3, #0
 800e486:	e010      	b.n	800e4aa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800e488:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b4 <sys_timeouts_sleeptime+0x60>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	da06      	bge.n	800e4a8 <sys_timeouts_sleeptime+0x54>
 800e49a:	4b07      	ldr	r3, [pc, #28]	@ (800e4b8 <sys_timeouts_sleeptime+0x64>)
 800e49c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800e4a0:	4906      	ldr	r1, [pc, #24]	@ (800e4bc <sys_timeouts_sleeptime+0x68>)
 800e4a2:	4807      	ldr	r0, [pc, #28]	@ (800e4c0 <sys_timeouts_sleeptime+0x6c>)
 800e4a4:	f002 fea4 	bl	80111f0 <iprintf>
    return ret;
 800e4a8:	683b      	ldr	r3, [r7, #0]
  }
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	2000bddc 	.word	0x2000bddc
 800e4b8:	0801408c 	.word	0x0801408c
 800e4bc:	08014160 	.word	0x08014160
 800e4c0:	08014100 	.word	0x08014100

0800e4c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e4c8:	f002 fd92 	bl	8010ff0 <rand>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	4b01      	ldr	r3, [pc, #4]	@ (800e4e4 <udp_init+0x20>)
 800e4de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e4e0:	bf00      	nop
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	2000002c 	.word	0x2000002c

0800e4e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d105      	bne.n	800e508 <udp_input_local_match+0x20>
 800e4fc:	4b27      	ldr	r3, [pc, #156]	@ (800e59c <udp_input_local_match+0xb4>)
 800e4fe:	2287      	movs	r2, #135	@ 0x87
 800e500:	4927      	ldr	r1, [pc, #156]	@ (800e5a0 <udp_input_local_match+0xb8>)
 800e502:	4828      	ldr	r0, [pc, #160]	@ (800e5a4 <udp_input_local_match+0xbc>)
 800e504:	f002 fe74 	bl	80111f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d105      	bne.n	800e51a <udp_input_local_match+0x32>
 800e50e:	4b23      	ldr	r3, [pc, #140]	@ (800e59c <udp_input_local_match+0xb4>)
 800e510:	2288      	movs	r2, #136	@ 0x88
 800e512:	4925      	ldr	r1, [pc, #148]	@ (800e5a8 <udp_input_local_match+0xc0>)
 800e514:	4823      	ldr	r0, [pc, #140]	@ (800e5a4 <udp_input_local_match+0xbc>)
 800e516:	f002 fe6b 	bl	80111f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	7a1b      	ldrb	r3, [r3, #8]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00b      	beq.n	800e53a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	7a1a      	ldrb	r2, [r3, #8]
 800e526:	4b21      	ldr	r3, [pc, #132]	@ (800e5ac <udp_input_local_match+0xc4>)
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e52e:	3301      	adds	r3, #1
 800e530:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e532:	429a      	cmp	r2, r3
 800e534:	d001      	beq.n	800e53a <udp_input_local_match+0x52>
    return 0;
 800e536:	2300      	movs	r3, #0
 800e538:	e02b      	b.n	800e592 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d018      	beq.n	800e572 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d013      	beq.n	800e56e <udp_input_local_match+0x86>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00f      	beq.n	800e56e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e54e:	4b17      	ldr	r3, [pc, #92]	@ (800e5ac <udp_input_local_match+0xc4>)
 800e550:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d00a      	beq.n	800e56e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	4b13      	ldr	r3, [pc, #76]	@ (800e5ac <udp_input_local_match+0xc4>)
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	405a      	eors	r2, r3
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	3308      	adds	r3, #8
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d110      	bne.n	800e590 <udp_input_local_match+0xa8>
          return 1;
 800e56e:	2301      	movs	r3, #1
 800e570:	e00f      	b.n	800e592 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d009      	beq.n	800e58c <udp_input_local_match+0xa4>
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d005      	beq.n	800e58c <udp_input_local_match+0xa4>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	4b09      	ldr	r3, [pc, #36]	@ (800e5ac <udp_input_local_match+0xc4>)
 800e586:	695b      	ldr	r3, [r3, #20]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d101      	bne.n	800e590 <udp_input_local_match+0xa8>
        return 1;
 800e58c:	2301      	movs	r3, #1
 800e58e:	e000      	b.n	800e592 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08014174 	.word	0x08014174
 800e5a0:	080141a4 	.word	0x080141a4
 800e5a4:	080141c8 	.word	0x080141c8
 800e5a8:	080141f0 	.word	0x080141f0
 800e5ac:	20008c8c 	.word	0x20008c8c

0800e5b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e5b0:	b590      	push	{r4, r7, lr}
 800e5b2:	b08d      	sub	sp, #52	@ 0x34
 800e5b4:	af02      	add	r7, sp, #8
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d105      	bne.n	800e5d0 <udp_input+0x20>
 800e5c4:	4b7c      	ldr	r3, [pc, #496]	@ (800e7b8 <udp_input+0x208>)
 800e5c6:	22cf      	movs	r2, #207	@ 0xcf
 800e5c8:	497c      	ldr	r1, [pc, #496]	@ (800e7bc <udp_input+0x20c>)
 800e5ca:	487d      	ldr	r0, [pc, #500]	@ (800e7c0 <udp_input+0x210>)
 800e5cc:	f002 fe10 	bl	80111f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d105      	bne.n	800e5e2 <udp_input+0x32>
 800e5d6:	4b78      	ldr	r3, [pc, #480]	@ (800e7b8 <udp_input+0x208>)
 800e5d8:	22d0      	movs	r2, #208	@ 0xd0
 800e5da:	497a      	ldr	r1, [pc, #488]	@ (800e7c4 <udp_input+0x214>)
 800e5dc:	4878      	ldr	r0, [pc, #480]	@ (800e7c0 <udp_input+0x210>)
 800e5de:	f002 fe07 	bl	80111f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	895b      	ldrh	r3, [r3, #10]
 800e5e6:	2b07      	cmp	r3, #7
 800e5e8:	d803      	bhi.n	800e5f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7fa f9fe 	bl	80089ec <pbuf_free>
    goto end;
 800e5f0:	e0de      	b.n	800e7b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e5f8:	4b73      	ldr	r3, [pc, #460]	@ (800e7c8 <udp_input+0x218>)
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	4a72      	ldr	r2, [pc, #456]	@ (800e7c8 <udp_input+0x218>)
 800e5fe:	6812      	ldr	r2, [r2, #0]
 800e600:	4611      	mov	r1, r2
 800e602:	4618      	mov	r0, r3
 800e604:	f001 fc88 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800e608:	4603      	mov	r3, r0
 800e60a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	881b      	ldrh	r3, [r3, #0]
 800e610:	b29b      	uxth	r3, r3
 800e612:	4618      	mov	r0, r3
 800e614:	f7f8 fdfc 	bl	8007210 <lwip_htons>
 800e618:	4603      	mov	r3, r0
 800e61a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	885b      	ldrh	r3, [r3, #2]
 800e620:	b29b      	uxth	r3, r3
 800e622:	4618      	mov	r0, r3
 800e624:	f7f8 fdf4 	bl	8007210 <lwip_htons>
 800e628:	4603      	mov	r3, r0
 800e62a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e62c:	2300      	movs	r3, #0
 800e62e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e630:	2300      	movs	r3, #0
 800e632:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e634:	2300      	movs	r3, #0
 800e636:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e638:	4b64      	ldr	r3, [pc, #400]	@ (800e7cc <udp_input+0x21c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e63e:	e054      	b.n	800e6ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e642:	8a5b      	ldrh	r3, [r3, #18]
 800e644:	89fa      	ldrh	r2, [r7, #14]
 800e646:	429a      	cmp	r2, r3
 800e648:	d14a      	bne.n	800e6e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e64a:	7cfb      	ldrb	r3, [r7, #19]
 800e64c:	461a      	mov	r2, r3
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e652:	f7ff ff49 	bl	800e4e8 <udp_input_local_match>
 800e656:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d041      	beq.n	800e6e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65e:	7c1b      	ldrb	r3, [r3, #16]
 800e660:	f003 0304 	and.w	r3, r3, #4
 800e664:	2b00      	cmp	r3, #0
 800e666:	d11d      	bne.n	800e6a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d102      	bne.n	800e674 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e670:	61fb      	str	r3, [r7, #28]
 800e672:	e017      	b.n	800e6a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e674:	7cfb      	ldrb	r3, [r7, #19]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d014      	beq.n	800e6a4 <udp_input+0xf4>
 800e67a:	4b53      	ldr	r3, [pc, #332]	@ (800e7c8 <udp_input+0x218>)
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e682:	d10f      	bne.n	800e6a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	3304      	adds	r3, #4
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d008      	beq.n	800e6a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	3304      	adds	r3, #4
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d101      	bne.n	800e6a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a6:	8a9b      	ldrh	r3, [r3, #20]
 800e6a8:	8a3a      	ldrh	r2, [r7, #16]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d118      	bne.n	800e6e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d005      	beq.n	800e6c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	4b43      	ldr	r3, [pc, #268]	@ (800e7c8 <udp_input+0x218>)
 800e6bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d10e      	bne.n	800e6e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d014      	beq.n	800e6f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ca:	68da      	ldr	r2, [r3, #12]
 800e6cc:	6a3b      	ldr	r3, [r7, #32]
 800e6ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e6d0:	4b3e      	ldr	r3, [pc, #248]	@ (800e7cc <udp_input+0x21c>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e6d8:	4a3c      	ldr	r2, [pc, #240]	@ (800e7cc <udp_input+0x21c>)
 800e6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e6de:	e008      	b.n	800e6f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1a7      	bne.n	800e640 <udp_input+0x90>
 800e6f0:	e000      	b.n	800e6f4 <udp_input+0x144>
        break;
 800e6f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d101      	bne.n	800e6fe <udp_input+0x14e>
    pcb = uncon_pcb;
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <udp_input+0x15a>
    for_us = 1;
 800e704:	2301      	movs	r3, #1
 800e706:	76fb      	strb	r3, [r7, #27]
 800e708:	e00a      	b.n	800e720 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	3304      	adds	r3, #4
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	4b2d      	ldr	r3, [pc, #180]	@ (800e7c8 <udp_input+0x218>)
 800e712:	695b      	ldr	r3, [r3, #20]
 800e714:	429a      	cmp	r2, r3
 800e716:	bf0c      	ite	eq
 800e718:	2301      	moveq	r3, #1
 800e71a:	2300      	movne	r3, #0
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e720:	7efb      	ldrb	r3, [r7, #27]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d041      	beq.n	800e7aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e726:	2108      	movs	r1, #8
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7fa f8d9 	bl	80088e0 <pbuf_remove_header>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00a      	beq.n	800e74a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e734:	4b20      	ldr	r3, [pc, #128]	@ (800e7b8 <udp_input+0x208>)
 800e736:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e73a:	4925      	ldr	r1, [pc, #148]	@ (800e7d0 <udp_input+0x220>)
 800e73c:	4820      	ldr	r0, [pc, #128]	@ (800e7c0 <udp_input+0x210>)
 800e73e:	f002 fd57 	bl	80111f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7fa f952 	bl	80089ec <pbuf_free>
      goto end;
 800e748:	e032      	b.n	800e7b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d012      	beq.n	800e776 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e752:	699b      	ldr	r3, [r3, #24]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00a      	beq.n	800e76e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	699c      	ldr	r4, [r3, #24]
 800e75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75e:	69d8      	ldr	r0, [r3, #28]
 800e760:	8a3b      	ldrh	r3, [r7, #16]
 800e762:	9300      	str	r3, [sp, #0]
 800e764:	4b1b      	ldr	r3, [pc, #108]	@ (800e7d4 <udp_input+0x224>)
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e76a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e76c:	e021      	b.n	800e7b2 <udp_input+0x202>
        pbuf_free(p);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7fa f93c 	bl	80089ec <pbuf_free>
        goto end;
 800e774:	e01c      	b.n	800e7b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e776:	7cfb      	ldrb	r3, [r7, #19]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d112      	bne.n	800e7a2 <udp_input+0x1f2>
 800e77c:	4b12      	ldr	r3, [pc, #72]	@ (800e7c8 <udp_input+0x218>)
 800e77e:	695b      	ldr	r3, [r3, #20]
 800e780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e784:	2be0      	cmp	r3, #224	@ 0xe0
 800e786:	d00c      	beq.n	800e7a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e788:	4b0f      	ldr	r3, [pc, #60]	@ (800e7c8 <udp_input+0x218>)
 800e78a:	899b      	ldrh	r3, [r3, #12]
 800e78c:	3308      	adds	r3, #8
 800e78e:	b29b      	uxth	r3, r3
 800e790:	b21b      	sxth	r3, r3
 800e792:	4619      	mov	r1, r3
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7fa f916 	bl	80089c6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e79a:	2103      	movs	r1, #3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f001 f89b 	bl	800f8d8 <icmp_dest_unreach>
      pbuf_free(p);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7fa f922 	bl	80089ec <pbuf_free>
  return;
 800e7a8:	e003      	b.n	800e7b2 <udp_input+0x202>
    pbuf_free(p);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7fa f91e 	bl	80089ec <pbuf_free>
  return;
 800e7b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e7b2:	372c      	adds	r7, #44	@ 0x2c
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd90      	pop	{r4, r7, pc}
 800e7b8:	08014174 	.word	0x08014174
 800e7bc:	08014218 	.word	0x08014218
 800e7c0:	080141c8 	.word	0x080141c8
 800e7c4:	08014230 	.word	0x08014230
 800e7c8:	20008c8c 	.word	0x20008c8c
 800e7cc:	2000bde8 	.word	0x2000bde8
 800e7d0:	0801424c 	.word	0x0801424c
 800e7d4:	20008c9c 	.word	0x20008c9c

0800e7d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d01e      	beq.n	800e826 <udp_netif_ip_addr_changed+0x4e>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d01a      	beq.n	800e826 <udp_netif_ip_addr_changed+0x4e>
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d017      	beq.n	800e826 <udp_netif_ip_addr_changed+0x4e>
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d013      	beq.n	800e826 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e834 <udp_netif_ip_addr_changed+0x5c>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e00c      	b.n	800e820 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d103      	bne.n	800e81a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1ef      	bne.n	800e806 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e826:	bf00      	nop
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	2000bde8 	.word	0x2000bde8

0800e838 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e840:	4915      	ldr	r1, [pc, #84]	@ (800e898 <etharp_free_entry+0x60>)
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	4613      	mov	r3, r2
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	4413      	add	r3, r2
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	440b      	add	r3, r1
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d013      	beq.n	800e87c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e854:	4910      	ldr	r1, [pc, #64]	@ (800e898 <etharp_free_entry+0x60>)
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	4613      	mov	r3, r2
 800e85a:	005b      	lsls	r3, r3, #1
 800e85c:	4413      	add	r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	440b      	add	r3, r1
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f7fa f8c1 	bl	80089ec <pbuf_free>
    arp_table[i].q = NULL;
 800e86a:	490b      	ldr	r1, [pc, #44]	@ (800e898 <etharp_free_entry+0x60>)
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	4613      	mov	r3, r2
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	4413      	add	r3, r2
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	440b      	add	r3, r1
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e87c:	4906      	ldr	r1, [pc, #24]	@ (800e898 <etharp_free_entry+0x60>)
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	4613      	mov	r3, r2
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	4413      	add	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	440b      	add	r3, r1
 800e88a:	3314      	adds	r3, #20
 800e88c:	2200      	movs	r2, #0
 800e88e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e890:	bf00      	nop
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	2000bdec 	.word	0x2000bdec

0800e89c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	607b      	str	r3, [r7, #4]
 800e8a6:	e096      	b.n	800e9d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e8a8:	494f      	ldr	r1, [pc, #316]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	005b      	lsls	r3, r3, #1
 800e8b0:	4413      	add	r3, r2
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	440b      	add	r3, r1
 800e8b6:	3314      	adds	r3, #20
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e8bc:	78fb      	ldrb	r3, [r7, #3]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 8086 	beq.w	800e9d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e8c4:	4948      	ldr	r1, [pc, #288]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	005b      	lsls	r3, r3, #1
 800e8cc:	4413      	add	r3, r2
 800e8ce:	00db      	lsls	r3, r3, #3
 800e8d0:	440b      	add	r3, r1
 800e8d2:	3312      	adds	r3, #18
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	b298      	uxth	r0, r3
 800e8da:	4943      	ldr	r1, [pc, #268]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	4413      	add	r3, r2
 800e8e4:	00db      	lsls	r3, r3, #3
 800e8e6:	440b      	add	r3, r1
 800e8e8:	3312      	adds	r3, #18
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e8ee:	493e      	ldr	r1, [pc, #248]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	4413      	add	r3, r2
 800e8f8:	00db      	lsls	r3, r3, #3
 800e8fa:	440b      	add	r3, r1
 800e8fc:	3312      	adds	r3, #18
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e904:	d215      	bcs.n	800e932 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e906:	4938      	ldr	r1, [pc, #224]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	4613      	mov	r3, r2
 800e90c:	005b      	lsls	r3, r3, #1
 800e90e:	4413      	add	r3, r2
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	440b      	add	r3, r1
 800e914:	3314      	adds	r3, #20
 800e916:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d10e      	bne.n	800e93a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e91c:	4932      	ldr	r1, [pc, #200]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	4613      	mov	r3, r2
 800e922:	005b      	lsls	r3, r3, #1
 800e924:	4413      	add	r3, r2
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	440b      	add	r3, r1
 800e92a:	3312      	adds	r3, #18
 800e92c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e92e:	2b04      	cmp	r3, #4
 800e930:	d903      	bls.n	800e93a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff ff80 	bl	800e838 <etharp_free_entry>
 800e938:	e04a      	b.n	800e9d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e93a:	492b      	ldr	r1, [pc, #172]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	4613      	mov	r3, r2
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	4413      	add	r3, r2
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	440b      	add	r3, r1
 800e948:	3314      	adds	r3, #20
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	2b03      	cmp	r3, #3
 800e94e:	d10a      	bne.n	800e966 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e950:	4925      	ldr	r1, [pc, #148]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	4613      	mov	r3, r2
 800e956:	005b      	lsls	r3, r3, #1
 800e958:	4413      	add	r3, r2
 800e95a:	00db      	lsls	r3, r3, #3
 800e95c:	440b      	add	r3, r1
 800e95e:	3314      	adds	r3, #20
 800e960:	2204      	movs	r2, #4
 800e962:	701a      	strb	r2, [r3, #0]
 800e964:	e034      	b.n	800e9d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e966:	4920      	ldr	r1, [pc, #128]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	4613      	mov	r3, r2
 800e96c:	005b      	lsls	r3, r3, #1
 800e96e:	4413      	add	r3, r2
 800e970:	00db      	lsls	r3, r3, #3
 800e972:	440b      	add	r3, r1
 800e974:	3314      	adds	r3, #20
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	2b04      	cmp	r3, #4
 800e97a:	d10a      	bne.n	800e992 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e97c:	491a      	ldr	r1, [pc, #104]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	4613      	mov	r3, r2
 800e982:	005b      	lsls	r3, r3, #1
 800e984:	4413      	add	r3, r2
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	440b      	add	r3, r1
 800e98a:	3314      	adds	r3, #20
 800e98c:	2202      	movs	r2, #2
 800e98e:	701a      	strb	r2, [r3, #0]
 800e990:	e01e      	b.n	800e9d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e992:	4915      	ldr	r1, [pc, #84]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	4613      	mov	r3, r2
 800e998:	005b      	lsls	r3, r3, #1
 800e99a:	4413      	add	r3, r2
 800e99c:	00db      	lsls	r3, r3, #3
 800e99e:	440b      	add	r3, r1
 800e9a0:	3314      	adds	r3, #20
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d113      	bne.n	800e9d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e9a8:	490f      	ldr	r1, [pc, #60]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	005b      	lsls	r3, r3, #1
 800e9b0:	4413      	add	r3, r2
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	440b      	add	r3, r1
 800e9b6:	3308      	adds	r3, #8
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	4413      	add	r3, r2
 800e9c2:	00db      	lsls	r3, r3, #3
 800e9c4:	4a08      	ldr	r2, [pc, #32]	@ (800e9e8 <etharp_tmr+0x14c>)
 800e9c6:	4413      	add	r3, r2
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	f000 fe6e 	bl	800f6ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	607b      	str	r3, [r7, #4]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b09      	cmp	r3, #9
 800e9da:	f77f af65 	ble.w	800e8a8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e9de:	bf00      	nop
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	2000bdec 	.word	0x2000bdec

0800e9ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08a      	sub	sp, #40	@ 0x28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	607a      	str	r2, [r7, #4]
 800e9f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e9fa:	230a      	movs	r3, #10
 800e9fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e9fe:	230a      	movs	r3, #10
 800ea00:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ea02:	230a      	movs	r3, #10
 800ea04:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ea0a:	230a      	movs	r3, #10
 800ea0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	83bb      	strh	r3, [r7, #28]
 800ea12:	2300      	movs	r3, #0
 800ea14:	837b      	strh	r3, [r7, #26]
 800ea16:	2300      	movs	r3, #0
 800ea18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	843b      	strh	r3, [r7, #32]
 800ea1e:	e0ae      	b.n	800eb7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ea20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea24:	49a6      	ldr	r1, [pc, #664]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ea26:	4613      	mov	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	440b      	add	r3, r1
 800ea30:	3314      	adds	r3, #20
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ea36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ea3a:	2b0a      	cmp	r3, #10
 800ea3c:	d105      	bne.n	800ea4a <etharp_find_entry+0x5e>
 800ea3e:	7dfb      	ldrb	r3, [r7, #23]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d102      	bne.n	800ea4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ea44:	8c3b      	ldrh	r3, [r7, #32]
 800ea46:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ea48:	e095      	b.n	800eb76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 8092 	beq.w	800eb76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d009      	beq.n	800ea6c <etharp_find_entry+0x80>
 800ea58:	7dfb      	ldrb	r3, [r7, #23]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d806      	bhi.n	800ea6c <etharp_find_entry+0x80>
 800ea5e:	4b99      	ldr	r3, [pc, #612]	@ (800ecc4 <etharp_find_entry+0x2d8>)
 800ea60:	f240 1223 	movw	r2, #291	@ 0x123
 800ea64:	4998      	ldr	r1, [pc, #608]	@ (800ecc8 <etharp_find_entry+0x2dc>)
 800ea66:	4899      	ldr	r0, [pc, #612]	@ (800eccc <etharp_find_entry+0x2e0>)
 800ea68:	f002 fbc2 	bl	80111f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d020      	beq.n	800eab4 <etharp_find_entry+0xc8>
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6819      	ldr	r1, [r3, #0]
 800ea76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea7a:	4891      	ldr	r0, [pc, #580]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	4413      	add	r3, r2
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	4403      	add	r3, r0
 800ea86:	3304      	adds	r3, #4
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4299      	cmp	r1, r3
 800ea8c:	d112      	bne.n	800eab4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00c      	beq.n	800eaae <etharp_find_entry+0xc2>
 800ea94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea98:	4989      	ldr	r1, [pc, #548]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	4413      	add	r3, r2
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	440b      	add	r3, r1
 800eaa4:	3308      	adds	r3, #8
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d102      	bne.n	800eab4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eaae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eab2:	e100      	b.n	800ecb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eab4:	7dfb      	ldrb	r3, [r7, #23]
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d140      	bne.n	800eb3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eaba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eabe:	4980      	ldr	r1, [pc, #512]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eac0:	4613      	mov	r3, r2
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	4413      	add	r3, r2
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	440b      	add	r3, r1
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d01a      	beq.n	800eb06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ead0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ead4:	497a      	ldr	r1, [pc, #488]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ead6:	4613      	mov	r3, r2
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	4413      	add	r3, r2
 800eadc:	00db      	lsls	r3, r3, #3
 800eade:	440b      	add	r3, r1
 800eae0:	3312      	adds	r3, #18
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	8bba      	ldrh	r2, [r7, #28]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d845      	bhi.n	800eb76 <etharp_find_entry+0x18a>
            old_queue = i;
 800eaea:	8c3b      	ldrh	r3, [r7, #32]
 800eaec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800eaee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eaf2:	4973      	ldr	r1, [pc, #460]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	4413      	add	r3, r2
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	440b      	add	r3, r1
 800eafe:	3312      	adds	r3, #18
 800eb00:	881b      	ldrh	r3, [r3, #0]
 800eb02:	83bb      	strh	r3, [r7, #28]
 800eb04:	e037      	b.n	800eb76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800eb06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb0a:	496d      	ldr	r1, [pc, #436]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eb0c:	4613      	mov	r3, r2
 800eb0e:	005b      	lsls	r3, r3, #1
 800eb10:	4413      	add	r3, r2
 800eb12:	00db      	lsls	r3, r3, #3
 800eb14:	440b      	add	r3, r1
 800eb16:	3312      	adds	r3, #18
 800eb18:	881b      	ldrh	r3, [r3, #0]
 800eb1a:	8b7a      	ldrh	r2, [r7, #26]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d82a      	bhi.n	800eb76 <etharp_find_entry+0x18a>
            old_pending = i;
 800eb20:	8c3b      	ldrh	r3, [r7, #32]
 800eb22:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800eb24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb28:	4965      	ldr	r1, [pc, #404]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	005b      	lsls	r3, r3, #1
 800eb2e:	4413      	add	r3, r2
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	440b      	add	r3, r1
 800eb34:	3312      	adds	r3, #18
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	837b      	strh	r3, [r7, #26]
 800eb3a:	e01c      	b.n	800eb76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d919      	bls.n	800eb76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800eb42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb46:	495e      	ldr	r1, [pc, #376]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eb48:	4613      	mov	r3, r2
 800eb4a:	005b      	lsls	r3, r3, #1
 800eb4c:	4413      	add	r3, r2
 800eb4e:	00db      	lsls	r3, r3, #3
 800eb50:	440b      	add	r3, r1
 800eb52:	3312      	adds	r3, #18
 800eb54:	881b      	ldrh	r3, [r3, #0]
 800eb56:	8b3a      	ldrh	r2, [r7, #24]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d80c      	bhi.n	800eb76 <etharp_find_entry+0x18a>
            old_stable = i;
 800eb5c:	8c3b      	ldrh	r3, [r7, #32]
 800eb5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800eb60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb64:	4956      	ldr	r1, [pc, #344]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eb66:	4613      	mov	r3, r2
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	3312      	adds	r3, #18
 800eb72:	881b      	ldrh	r3, [r3, #0]
 800eb74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb76:	8c3b      	ldrh	r3, [r7, #32]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	843b      	strh	r3, [r7, #32]
 800eb7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb82:	2b09      	cmp	r3, #9
 800eb84:	f77f af4c 	ble.w	800ea20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	f003 0302 	and.w	r3, r3, #2
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d108      	bne.n	800eba4 <etharp_find_entry+0x1b8>
 800eb92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800eb96:	2b0a      	cmp	r3, #10
 800eb98:	d107      	bne.n	800ebaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800eb9a:	7afb      	ldrb	r3, [r7, #11]
 800eb9c:	f003 0301 	and.w	r3, r3, #1
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d102      	bne.n	800ebaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800eba4:	f04f 33ff 	mov.w	r3, #4294967295
 800eba8:	e085      	b.n	800ecb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ebaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ebae:	2b09      	cmp	r3, #9
 800ebb0:	dc02      	bgt.n	800ebb8 <etharp_find_entry+0x1cc>
    i = empty;
 800ebb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebb4:	843b      	strh	r3, [r7, #32]
 800ebb6:	e039      	b.n	800ec2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ebb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800ebbc:	2b09      	cmp	r3, #9
 800ebbe:	dc14      	bgt.n	800ebea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ebc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebc2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ebc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebc8:	493d      	ldr	r1, [pc, #244]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ebca:	4613      	mov	r3, r2
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	4413      	add	r3, r2
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	440b      	add	r3, r1
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d018      	beq.n	800ec0c <etharp_find_entry+0x220>
 800ebda:	4b3a      	ldr	r3, [pc, #232]	@ (800ecc4 <etharp_find_entry+0x2d8>)
 800ebdc:	f240 126d 	movw	r2, #365	@ 0x16d
 800ebe0:	493b      	ldr	r1, [pc, #236]	@ (800ecd0 <etharp_find_entry+0x2e4>)
 800ebe2:	483a      	ldr	r0, [pc, #232]	@ (800eccc <etharp_find_entry+0x2e0>)
 800ebe4:	f002 fb04 	bl	80111f0 <iprintf>
 800ebe8:	e010      	b.n	800ec0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ebea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800ebee:	2b09      	cmp	r3, #9
 800ebf0:	dc02      	bgt.n	800ebf8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ebf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebf4:	843b      	strh	r3, [r7, #32]
 800ebf6:	e009      	b.n	800ec0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ebf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ebfc:	2b09      	cmp	r3, #9
 800ebfe:	dc02      	bgt.n	800ec06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ec00:	8bfb      	ldrh	r3, [r7, #30]
 800ec02:	843b      	strh	r3, [r7, #32]
 800ec04:	e002      	b.n	800ec0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ec06:	f04f 33ff 	mov.w	r3, #4294967295
 800ec0a:	e054      	b.n	800ecb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ec0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec10:	2b09      	cmp	r3, #9
 800ec12:	dd06      	ble.n	800ec22 <etharp_find_entry+0x236>
 800ec14:	4b2b      	ldr	r3, [pc, #172]	@ (800ecc4 <etharp_find_entry+0x2d8>)
 800ec16:	f240 127f 	movw	r2, #383	@ 0x17f
 800ec1a:	492e      	ldr	r1, [pc, #184]	@ (800ecd4 <etharp_find_entry+0x2e8>)
 800ec1c:	482b      	ldr	r0, [pc, #172]	@ (800eccc <etharp_find_entry+0x2e0>)
 800ec1e:	f002 fae7 	bl	80111f0 <iprintf>
    etharp_free_entry(i);
 800ec22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7ff fe06 	bl	800e838 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ec2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec30:	2b09      	cmp	r3, #9
 800ec32:	dd06      	ble.n	800ec42 <etharp_find_entry+0x256>
 800ec34:	4b23      	ldr	r3, [pc, #140]	@ (800ecc4 <etharp_find_entry+0x2d8>)
 800ec36:	f240 1283 	movw	r2, #387	@ 0x183
 800ec3a:	4926      	ldr	r1, [pc, #152]	@ (800ecd4 <etharp_find_entry+0x2e8>)
 800ec3c:	4823      	ldr	r0, [pc, #140]	@ (800eccc <etharp_find_entry+0x2e0>)
 800ec3e:	f002 fad7 	bl	80111f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ec42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec46:	491e      	ldr	r1, [pc, #120]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ec48:	4613      	mov	r3, r2
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	4413      	add	r3, r2
 800ec4e:	00db      	lsls	r3, r3, #3
 800ec50:	440b      	add	r3, r1
 800ec52:	3314      	adds	r3, #20
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d006      	beq.n	800ec68 <etharp_find_entry+0x27c>
 800ec5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ecc4 <etharp_find_entry+0x2d8>)
 800ec5c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ec60:	491d      	ldr	r1, [pc, #116]	@ (800ecd8 <etharp_find_entry+0x2ec>)
 800ec62:	481a      	ldr	r0, [pc, #104]	@ (800eccc <etharp_find_entry+0x2e0>)
 800ec64:	f002 fac4 	bl	80111f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00b      	beq.n	800ec86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ec6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6819      	ldr	r1, [r3, #0]
 800ec76:	4812      	ldr	r0, [pc, #72]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ec78:	4613      	mov	r3, r2
 800ec7a:	005b      	lsls	r3, r3, #1
 800ec7c:	4413      	add	r3, r2
 800ec7e:	00db      	lsls	r3, r3, #3
 800ec80:	4403      	add	r3, r0
 800ec82:	3304      	adds	r3, #4
 800ec84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ec86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec8a:	490d      	ldr	r1, [pc, #52]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	4413      	add	r3, r2
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	440b      	add	r3, r1
 800ec96:	3312      	adds	r3, #18
 800ec98:	2200      	movs	r2, #0
 800ec9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ec9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eca0:	4907      	ldr	r1, [pc, #28]	@ (800ecc0 <etharp_find_entry+0x2d4>)
 800eca2:	4613      	mov	r3, r2
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	4413      	add	r3, r2
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	440b      	add	r3, r1
 800ecac:	3308      	adds	r3, #8
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ecb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3728      	adds	r7, #40	@ 0x28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	2000bdec 	.word	0x2000bdec
 800ecc4:	080144d8 	.word	0x080144d8
 800ecc8:	08014510 	.word	0x08014510
 800eccc:	08014550 	.word	0x08014550
 800ecd0:	08014578 	.word	0x08014578
 800ecd4:	08014590 	.word	0x08014590
 800ecd8:	080145a4 	.word	0x080145a4

0800ecdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b088      	sub	sp, #32
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ecf0:	2b06      	cmp	r3, #6
 800ecf2:	d006      	beq.n	800ed02 <etharp_update_arp_entry+0x26>
 800ecf4:	4b48      	ldr	r3, [pc, #288]	@ (800ee18 <etharp_update_arp_entry+0x13c>)
 800ecf6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ecfa:	4948      	ldr	r1, [pc, #288]	@ (800ee1c <etharp_update_arp_entry+0x140>)
 800ecfc:	4848      	ldr	r0, [pc, #288]	@ (800ee20 <etharp_update_arp_entry+0x144>)
 800ecfe:	f002 fa77 	bl	80111f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d012      	beq.n	800ed2e <etharp_update_arp_entry+0x52>
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00e      	beq.n	800ed2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68f9      	ldr	r1, [r7, #12]
 800ed16:	4618      	mov	r0, r3
 800ed18:	f001 f8fe 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800ed1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d105      	bne.n	800ed2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed2a:	2be0      	cmp	r3, #224	@ 0xe0
 800ed2c:	d102      	bne.n	800ed34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ed2e:	f06f 030f 	mvn.w	r3, #15
 800ed32:	e06c      	b.n	800ee0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ed34:	78fb      	ldrb	r3, [r7, #3]
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	4619      	mov	r1, r3
 800ed3a:	68b8      	ldr	r0, [r7, #8]
 800ed3c:	f7ff fe56 	bl	800e9ec <etharp_find_entry>
 800ed40:	4603      	mov	r3, r0
 800ed42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ed44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	da02      	bge.n	800ed52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ed4c:	8afb      	ldrh	r3, [r7, #22]
 800ed4e:	b25b      	sxtb	r3, r3
 800ed50:	e05d      	b.n	800ee0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ed52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed56:	4933      	ldr	r1, [pc, #204]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800ed58:	4613      	mov	r3, r2
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	4413      	add	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	440b      	add	r3, r1
 800ed62:	3314      	adds	r3, #20
 800ed64:	2202      	movs	r2, #2
 800ed66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ed68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed6c:	492d      	ldr	r1, [pc, #180]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800ed6e:	4613      	mov	r3, r2
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	440b      	add	r3, r1
 800ed78:	3308      	adds	r3, #8
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ed7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed82:	4613      	mov	r3, r2
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	4413      	add	r3, r2
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	4a25      	ldr	r2, [pc, #148]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800ed8e:	4413      	add	r3, r2
 800ed90:	3304      	adds	r3, #4
 800ed92:	2206      	movs	r2, #6
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f002 fb05 	bl	80113a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ed9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eda0:	4920      	ldr	r1, [pc, #128]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800eda2:	4613      	mov	r3, r2
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	4413      	add	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	440b      	add	r3, r1
 800edac:	3312      	adds	r3, #18
 800edae:	2200      	movs	r2, #0
 800edb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800edb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800edb6:	491b      	ldr	r1, [pc, #108]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800edb8:	4613      	mov	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	4413      	add	r3, r2
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	440b      	add	r3, r1
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d021      	beq.n	800ee0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800edc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800edcc:	4915      	ldr	r1, [pc, #84]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	440b      	add	r3, r1
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800eddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ede0:	4910      	ldr	r1, [pc, #64]	@ (800ee24 <etharp_update_arp_entry+0x148>)
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	440b      	add	r3, r1
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800edf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6939      	ldr	r1, [r7, #16]
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f001 ff97 	bl	8010d34 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ee06:	6938      	ldr	r0, [r7, #16]
 800ee08:	f7f9 fdf0 	bl	80089ec <pbuf_free>
  }
  return ERR_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3718      	adds	r7, #24
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	080144d8 	.word	0x080144d8
 800ee1c:	080145d0 	.word	0x080145d0
 800ee20:	08014550 	.word	0x08014550
 800ee24:	2000bdec 	.word	0x2000bdec

0800ee28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee30:	2300      	movs	r3, #0
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	e01e      	b.n	800ee74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ee36:	4913      	ldr	r1, [pc, #76]	@ (800ee84 <etharp_cleanup_netif+0x5c>)
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	005b      	lsls	r3, r3, #1
 800ee3e:	4413      	add	r3, r2
 800ee40:	00db      	lsls	r3, r3, #3
 800ee42:	440b      	add	r3, r1
 800ee44:	3314      	adds	r3, #20
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ee4a:	7afb      	ldrb	r3, [r7, #11]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00e      	beq.n	800ee6e <etharp_cleanup_netif+0x46>
 800ee50:	490c      	ldr	r1, [pc, #48]	@ (800ee84 <etharp_cleanup_netif+0x5c>)
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	4613      	mov	r3, r2
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	4413      	add	r3, r2
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	440b      	add	r3, r1
 800ee5e:	3308      	adds	r3, #8
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d102      	bne.n	800ee6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f7ff fce5 	bl	800e838 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	3301      	adds	r3, #1
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b09      	cmp	r3, #9
 800ee78:	dddd      	ble.n	800ee36 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ee7a:	bf00      	nop
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	2000bdec 	.word	0x2000bdec

0800ee88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ee88:	b5b0      	push	{r4, r5, r7, lr}
 800ee8a:	b08a      	sub	sp, #40	@ 0x28
 800ee8c:	af04      	add	r7, sp, #16
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d107      	bne.n	800eea8 <etharp_input+0x20>
 800ee98:	4b3d      	ldr	r3, [pc, #244]	@ (800ef90 <etharp_input+0x108>)
 800ee9a:	f240 228a 	movw	r2, #650	@ 0x28a
 800ee9e:	493d      	ldr	r1, [pc, #244]	@ (800ef94 <etharp_input+0x10c>)
 800eea0:	483d      	ldr	r0, [pc, #244]	@ (800ef98 <etharp_input+0x110>)
 800eea2:	f002 f9a5 	bl	80111f0 <iprintf>
 800eea6:	e06f      	b.n	800ef88 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeb8:	d10c      	bne.n	800eed4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eebe:	2b06      	cmp	r3, #6
 800eec0:	d108      	bne.n	800eed4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eec6:	2b04      	cmp	r3, #4
 800eec8:	d104      	bne.n	800eed4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	885b      	ldrh	r3, [r3, #2]
 800eece:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800eed0:	2b08      	cmp	r3, #8
 800eed2:	d003      	beq.n	800eedc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7f9 fd89 	bl	80089ec <pbuf_free>
    return;
 800eeda:	e055      	b.n	800ef88 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	330e      	adds	r3, #14
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	3318      	adds	r3, #24
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	3304      	adds	r3, #4
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d102      	bne.n	800eefc <etharp_input+0x74>
    for_us = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	75fb      	strb	r3, [r7, #23]
 800eefa:	e009      	b.n	800ef10 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	3304      	adds	r3, #4
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	bf0c      	ite	eq
 800ef08:	2301      	moveq	r3, #1
 800ef0a:	2300      	movne	r3, #0
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	f103 0208 	add.w	r2, r3, #8
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <etharp_input+0x98>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e000      	b.n	800ef22 <etharp_input+0x9a>
 800ef20:	2302      	movs	r3, #2
 800ef22:	f107 010c 	add.w	r1, r7, #12
 800ef26:	6838      	ldr	r0, [r7, #0]
 800ef28:	f7ff fed8 	bl	800ecdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	88db      	ldrh	r3, [r3, #6]
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef36:	d003      	beq.n	800ef40 <etharp_input+0xb8>
 800ef38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef3c:	d01e      	beq.n	800ef7c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ef3e:	e020      	b.n	800ef82 <etharp_input+0xfa>
      if (for_us) {
 800ef40:	7dfb      	ldrb	r3, [r7, #23]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d01c      	beq.n	800ef80 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ef5c:	693a      	ldr	r2, [r7, #16]
 800ef5e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ef60:	2102      	movs	r1, #2
 800ef62:	9103      	str	r1, [sp, #12]
 800ef64:	f107 010c 	add.w	r1, r7, #12
 800ef68:	9102      	str	r1, [sp, #8]
 800ef6a:	9201      	str	r2, [sp, #4]
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	462b      	mov	r3, r5
 800ef70:	4622      	mov	r2, r4
 800ef72:	4601      	mov	r1, r0
 800ef74:	6838      	ldr	r0, [r7, #0]
 800ef76:	f000 faeb 	bl	800f550 <etharp_raw>
      break;
 800ef7a:	e001      	b.n	800ef80 <etharp_input+0xf8>
      break;
 800ef7c:	bf00      	nop
 800ef7e:	e000      	b.n	800ef82 <etharp_input+0xfa>
      break;
 800ef80:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7f9 fd32 	bl	80089ec <pbuf_free>
}
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	080144d8 	.word	0x080144d8
 800ef94:	08014628 	.word	0x08014628
 800ef98:	08014550 	.word	0x08014550

0800ef9c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af02      	add	r7, sp, #8
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	4613      	mov	r3, r2
 800efa8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800efaa:	79fa      	ldrb	r2, [r7, #7]
 800efac:	4944      	ldr	r1, [pc, #272]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800efae:	4613      	mov	r3, r2
 800efb0:	005b      	lsls	r3, r3, #1
 800efb2:	4413      	add	r3, r2
 800efb4:	00db      	lsls	r3, r3, #3
 800efb6:	440b      	add	r3, r1
 800efb8:	3314      	adds	r3, #20
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d806      	bhi.n	800efce <etharp_output_to_arp_index+0x32>
 800efc0:	4b40      	ldr	r3, [pc, #256]	@ (800f0c4 <etharp_output_to_arp_index+0x128>)
 800efc2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800efc6:	4940      	ldr	r1, [pc, #256]	@ (800f0c8 <etharp_output_to_arp_index+0x12c>)
 800efc8:	4840      	ldr	r0, [pc, #256]	@ (800f0cc <etharp_output_to_arp_index+0x130>)
 800efca:	f002 f911 	bl	80111f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800efce:	79fa      	ldrb	r2, [r7, #7]
 800efd0:	493b      	ldr	r1, [pc, #236]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800efd2:	4613      	mov	r3, r2
 800efd4:	005b      	lsls	r3, r3, #1
 800efd6:	4413      	add	r3, r2
 800efd8:	00db      	lsls	r3, r3, #3
 800efda:	440b      	add	r3, r1
 800efdc:	3314      	adds	r3, #20
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d153      	bne.n	800f08c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800efe4:	79fa      	ldrb	r2, [r7, #7]
 800efe6:	4936      	ldr	r1, [pc, #216]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800efe8:	4613      	mov	r3, r2
 800efea:	005b      	lsls	r3, r3, #1
 800efec:	4413      	add	r3, r2
 800efee:	00db      	lsls	r3, r3, #3
 800eff0:	440b      	add	r3, r1
 800eff2:	3312      	adds	r3, #18
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800effa:	d919      	bls.n	800f030 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800effc:	79fa      	ldrb	r2, [r7, #7]
 800effe:	4613      	mov	r3, r2
 800f000:	005b      	lsls	r3, r3, #1
 800f002:	4413      	add	r3, r2
 800f004:	00db      	lsls	r3, r3, #3
 800f006:	4a2e      	ldr	r2, [pc, #184]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f008:	4413      	add	r3, r2
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 fb4c 	bl	800f6ac <etharp_request>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d138      	bne.n	800f08c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f01a:	79fa      	ldrb	r2, [r7, #7]
 800f01c:	4928      	ldr	r1, [pc, #160]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f01e:	4613      	mov	r3, r2
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	4413      	add	r3, r2
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	440b      	add	r3, r1
 800f028:	3314      	adds	r3, #20
 800f02a:	2203      	movs	r2, #3
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	e02d      	b.n	800f08c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f030:	79fa      	ldrb	r2, [r7, #7]
 800f032:	4923      	ldr	r1, [pc, #140]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f034:	4613      	mov	r3, r2
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	4413      	add	r3, r2
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	440b      	add	r3, r1
 800f03e:	3312      	adds	r3, #18
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f046:	d321      	bcc.n	800f08c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f048:	79fa      	ldrb	r2, [r7, #7]
 800f04a:	4613      	mov	r3, r2
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	4413      	add	r3, r2
 800f050:	00db      	lsls	r3, r3, #3
 800f052:	4a1b      	ldr	r2, [pc, #108]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f054:	4413      	add	r3, r2
 800f056:	1d19      	adds	r1, r3, #4
 800f058:	79fa      	ldrb	r2, [r7, #7]
 800f05a:	4613      	mov	r3, r2
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	4413      	add	r3, r2
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	3308      	adds	r3, #8
 800f064:	4a16      	ldr	r2, [pc, #88]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f066:	4413      	add	r3, r2
 800f068:	3304      	adds	r3, #4
 800f06a:	461a      	mov	r2, r3
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f000 fafb 	bl	800f668 <etharp_request_dst>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d109      	bne.n	800f08c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f078:	79fa      	ldrb	r2, [r7, #7]
 800f07a:	4911      	ldr	r1, [pc, #68]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f07c:	4613      	mov	r3, r2
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	4413      	add	r3, r2
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	440b      	add	r3, r1
 800f086:	3314      	adds	r3, #20
 800f088:	2203      	movs	r2, #3
 800f08a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f092:	79fa      	ldrb	r2, [r7, #7]
 800f094:	4613      	mov	r3, r2
 800f096:	005b      	lsls	r3, r3, #1
 800f098:	4413      	add	r3, r2
 800f09a:	00db      	lsls	r3, r3, #3
 800f09c:	3308      	adds	r3, #8
 800f09e:	4a08      	ldr	r2, [pc, #32]	@ (800f0c0 <etharp_output_to_arp_index+0x124>)
 800f0a0:	4413      	add	r3, r2
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f0a8:	9200      	str	r2, [sp, #0]
 800f0aa:	460a      	mov	r2, r1
 800f0ac:	68b9      	ldr	r1, [r7, #8]
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f001 fe40 	bl	8010d34 <ethernet_output>
 800f0b4:	4603      	mov	r3, r0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	2000bdec 	.word	0x2000bdec
 800f0c4:	080144d8 	.word	0x080144d8
 800f0c8:	08014648 	.word	0x08014648
 800f0cc:	08014550 	.word	0x08014550

0800f0d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b08a      	sub	sp, #40	@ 0x28
 800f0d4:	af02      	add	r7, sp, #8
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <etharp_output+0x24>
 800f0e6:	4b73      	ldr	r3, [pc, #460]	@ (800f2b4 <etharp_output+0x1e4>)
 800f0e8:	f240 321e 	movw	r2, #798	@ 0x31e
 800f0ec:	4972      	ldr	r1, [pc, #456]	@ (800f2b8 <etharp_output+0x1e8>)
 800f0ee:	4873      	ldr	r0, [pc, #460]	@ (800f2bc <etharp_output+0x1ec>)
 800f0f0:	f002 f87e 	bl	80111f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d106      	bne.n	800f108 <etharp_output+0x38>
 800f0fa:	4b6e      	ldr	r3, [pc, #440]	@ (800f2b4 <etharp_output+0x1e4>)
 800f0fc:	f240 321f 	movw	r2, #799	@ 0x31f
 800f100:	496f      	ldr	r1, [pc, #444]	@ (800f2c0 <etharp_output+0x1f0>)
 800f102:	486e      	ldr	r0, [pc, #440]	@ (800f2bc <etharp_output+0x1ec>)
 800f104:	f002 f874 	bl	80111f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d106      	bne.n	800f11c <etharp_output+0x4c>
 800f10e:	4b69      	ldr	r3, [pc, #420]	@ (800f2b4 <etharp_output+0x1e4>)
 800f110:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f114:	496b      	ldr	r1, [pc, #428]	@ (800f2c4 <etharp_output+0x1f4>)
 800f116:	4869      	ldr	r0, [pc, #420]	@ (800f2bc <etharp_output+0x1ec>)
 800f118:	f002 f86a 	bl	80111f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68f9      	ldr	r1, [r7, #12]
 800f122:	4618      	mov	r0, r3
 800f124:	f000 fef8 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d002      	beq.n	800f134 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f12e:	4b66      	ldr	r3, [pc, #408]	@ (800f2c8 <etharp_output+0x1f8>)
 800f130:	61fb      	str	r3, [r7, #28]
 800f132:	e0af      	b.n	800f294 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f13c:	2be0      	cmp	r3, #224	@ 0xe0
 800f13e:	d118      	bne.n	800f172 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f140:	2301      	movs	r3, #1
 800f142:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f144:	2300      	movs	r3, #0
 800f146:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f148:	235e      	movs	r3, #94	@ 0x5e
 800f14a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	3301      	adds	r3, #1
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f156:	b2db      	uxtb	r3, r3
 800f158:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	3302      	adds	r3, #2
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	3303      	adds	r3, #3
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f16a:	f107 0310 	add.w	r3, r7, #16
 800f16e:	61fb      	str	r3, [r7, #28]
 800f170:	e090      	b.n	800f294 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3304      	adds	r3, #4
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	405a      	eors	r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	3308      	adds	r3, #8
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4013      	ands	r3, r2
 800f186:	2b00      	cmp	r3, #0
 800f188:	d012      	beq.n	800f1b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f190:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f194:	4293      	cmp	r3, r2
 800f196:	d00b      	beq.n	800f1b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	330c      	adds	r3, #12
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d003      	beq.n	800f1aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	330c      	adds	r3, #12
 800f1a6:	61bb      	str	r3, [r7, #24]
 800f1a8:	e002      	b.n	800f1b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f1aa:	f06f 0303 	mvn.w	r3, #3
 800f1ae:	e07d      	b.n	800f2ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f1b0:	4b46      	ldr	r3, [pc, #280]	@ (800f2cc <etharp_output+0x1fc>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4a46      	ldr	r2, [pc, #280]	@ (800f2d0 <etharp_output+0x200>)
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	440b      	add	r3, r1
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	4413      	add	r3, r2
 800f1c2:	3314      	adds	r3, #20
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d925      	bls.n	800f216 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f1ca:	4b40      	ldr	r3, [pc, #256]	@ (800f2cc <etharp_output+0x1fc>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	4a3f      	ldr	r2, [pc, #252]	@ (800f2d0 <etharp_output+0x200>)
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	005b      	lsls	r3, r3, #1
 800f1d6:	440b      	add	r3, r1
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	4413      	add	r3, r2
 800f1dc:	3308      	adds	r3, #8
 800f1de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d117      	bne.n	800f216 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	4b38      	ldr	r3, [pc, #224]	@ (800f2cc <etharp_output+0x1fc>)
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	4937      	ldr	r1, [pc, #220]	@ (800f2d0 <etharp_output+0x200>)
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4403      	add	r3, r0
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	440b      	add	r3, r1
 800f1fc:	3304      	adds	r3, #4
 800f1fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f200:	429a      	cmp	r2, r3
 800f202:	d108      	bne.n	800f216 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f204:	4b31      	ldr	r3, [pc, #196]	@ (800f2cc <etharp_output+0x1fc>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	461a      	mov	r2, r3
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f7ff fec5 	bl	800ef9c <etharp_output_to_arp_index>
 800f212:	4603      	mov	r3, r0
 800f214:	e04a      	b.n	800f2ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f216:	2300      	movs	r3, #0
 800f218:	75fb      	strb	r3, [r7, #23]
 800f21a:	e031      	b.n	800f280 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f21c:	7dfa      	ldrb	r2, [r7, #23]
 800f21e:	492c      	ldr	r1, [pc, #176]	@ (800f2d0 <etharp_output+0x200>)
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	440b      	add	r3, r1
 800f22a:	3314      	adds	r3, #20
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d923      	bls.n	800f27a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f232:	7dfa      	ldrb	r2, [r7, #23]
 800f234:	4926      	ldr	r1, [pc, #152]	@ (800f2d0 <etharp_output+0x200>)
 800f236:	4613      	mov	r3, r2
 800f238:	005b      	lsls	r3, r3, #1
 800f23a:	4413      	add	r3, r2
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	440b      	add	r3, r1
 800f240:	3308      	adds	r3, #8
 800f242:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	429a      	cmp	r2, r3
 800f248:	d117      	bne.n	800f27a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	6819      	ldr	r1, [r3, #0]
 800f24e:	7dfa      	ldrb	r2, [r7, #23]
 800f250:	481f      	ldr	r0, [pc, #124]	@ (800f2d0 <etharp_output+0x200>)
 800f252:	4613      	mov	r3, r2
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	4413      	add	r3, r2
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	4403      	add	r3, r0
 800f25c:	3304      	adds	r3, #4
 800f25e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f260:	4299      	cmp	r1, r3
 800f262:	d10a      	bne.n	800f27a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f264:	4a19      	ldr	r2, [pc, #100]	@ (800f2cc <etharp_output+0x1fc>)
 800f266:	7dfb      	ldrb	r3, [r7, #23]
 800f268:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	461a      	mov	r2, r3
 800f26e:	68b9      	ldr	r1, [r7, #8]
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f7ff fe93 	bl	800ef9c <etharp_output_to_arp_index>
 800f276:	4603      	mov	r3, r0
 800f278:	e018      	b.n	800f2ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f27a:	7dfb      	ldrb	r3, [r7, #23]
 800f27c:	3301      	adds	r3, #1
 800f27e:	75fb      	strb	r3, [r7, #23]
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	2b09      	cmp	r3, #9
 800f284:	d9ca      	bls.n	800f21c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	69b9      	ldr	r1, [r7, #24]
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 f822 	bl	800f2d4 <etharp_query>
 800f290:	4603      	mov	r3, r0
 800f292:	e00b      	b.n	800f2ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f29a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	68b9      	ldr	r1, [r7, #8]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f001 fd45 	bl	8010d34 <ethernet_output>
 800f2aa:	4603      	mov	r3, r0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3720      	adds	r7, #32
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	080144d8 	.word	0x080144d8
 800f2b8:	08014628 	.word	0x08014628
 800f2bc:	08014550 	.word	0x08014550
 800f2c0:	08014678 	.word	0x08014678
 800f2c4:	08014618 	.word	0x08014618
 800f2c8:	08014ccc 	.word	0x08014ccc
 800f2cc:	2000bedc 	.word	0x2000bedc
 800f2d0:	2000bdec 	.word	0x2000bdec

0800f2d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08c      	sub	sp, #48	@ 0x30
 800f2d8:	af02      	add	r7, sp, #8
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	3326      	adds	r3, #38	@ 0x26
 800f2e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f2e6:	23ff      	movs	r3, #255	@ 0xff
 800f2e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	68f9      	ldr	r1, [r7, #12]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f000 fe0e 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d10c      	bne.n	800f31c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f30a:	2be0      	cmp	r3, #224	@ 0xe0
 800f30c:	d006      	beq.n	800f31c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d003      	beq.n	800f31c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d102      	bne.n	800f322 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f31c:	f06f 030f 	mvn.w	r3, #15
 800f320:	e101      	b.n	800f526 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	2101      	movs	r1, #1
 800f326:	68b8      	ldr	r0, [r7, #8]
 800f328:	f7ff fb60 	bl	800e9ec <etharp_find_entry>
 800f32c:	4603      	mov	r3, r0
 800f32e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f330:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f334:	2b00      	cmp	r3, #0
 800f336:	da02      	bge.n	800f33e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f338:	8a7b      	ldrh	r3, [r7, #18]
 800f33a:	b25b      	sxtb	r3, r3
 800f33c:	e0f3      	b.n	800f526 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f33e:	8a7b      	ldrh	r3, [r7, #18]
 800f340:	2b7e      	cmp	r3, #126	@ 0x7e
 800f342:	d906      	bls.n	800f352 <etharp_query+0x7e>
 800f344:	4b7a      	ldr	r3, [pc, #488]	@ (800f530 <etharp_query+0x25c>)
 800f346:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f34a:	497a      	ldr	r1, [pc, #488]	@ (800f534 <etharp_query+0x260>)
 800f34c:	487a      	ldr	r0, [pc, #488]	@ (800f538 <etharp_query+0x264>)
 800f34e:	f001 ff4f 	bl	80111f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f352:	8a7b      	ldrh	r3, [r7, #18]
 800f354:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f356:	7c7a      	ldrb	r2, [r7, #17]
 800f358:	4978      	ldr	r1, [pc, #480]	@ (800f53c <etharp_query+0x268>)
 800f35a:	4613      	mov	r3, r2
 800f35c:	005b      	lsls	r3, r3, #1
 800f35e:	4413      	add	r3, r2
 800f360:	00db      	lsls	r3, r3, #3
 800f362:	440b      	add	r3, r1
 800f364:	3314      	adds	r3, #20
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d115      	bne.n	800f398 <etharp_query+0xc4>
    is_new_entry = 1;
 800f36c:	2301      	movs	r3, #1
 800f36e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f370:	7c7a      	ldrb	r2, [r7, #17]
 800f372:	4972      	ldr	r1, [pc, #456]	@ (800f53c <etharp_query+0x268>)
 800f374:	4613      	mov	r3, r2
 800f376:	005b      	lsls	r3, r3, #1
 800f378:	4413      	add	r3, r2
 800f37a:	00db      	lsls	r3, r3, #3
 800f37c:	440b      	add	r3, r1
 800f37e:	3314      	adds	r3, #20
 800f380:	2201      	movs	r2, #1
 800f382:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f384:	7c7a      	ldrb	r2, [r7, #17]
 800f386:	496d      	ldr	r1, [pc, #436]	@ (800f53c <etharp_query+0x268>)
 800f388:	4613      	mov	r3, r2
 800f38a:	005b      	lsls	r3, r3, #1
 800f38c:	4413      	add	r3, r2
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	440b      	add	r3, r1
 800f392:	3308      	adds	r3, #8
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f398:	7c7a      	ldrb	r2, [r7, #17]
 800f39a:	4968      	ldr	r1, [pc, #416]	@ (800f53c <etharp_query+0x268>)
 800f39c:	4613      	mov	r3, r2
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	4413      	add	r3, r2
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	440b      	add	r3, r1
 800f3a6:	3314      	adds	r3, #20
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d011      	beq.n	800f3d2 <etharp_query+0xfe>
 800f3ae:	7c7a      	ldrb	r2, [r7, #17]
 800f3b0:	4962      	ldr	r1, [pc, #392]	@ (800f53c <etharp_query+0x268>)
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	00db      	lsls	r3, r3, #3
 800f3ba:	440b      	add	r3, r1
 800f3bc:	3314      	adds	r3, #20
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d806      	bhi.n	800f3d2 <etharp_query+0xfe>
 800f3c4:	4b5a      	ldr	r3, [pc, #360]	@ (800f530 <etharp_query+0x25c>)
 800f3c6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800f3ca:	495d      	ldr	r1, [pc, #372]	@ (800f540 <etharp_query+0x26c>)
 800f3cc:	485a      	ldr	r0, [pc, #360]	@ (800f538 <etharp_query+0x264>)
 800f3ce:	f001 ff0f 	bl	80111f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d102      	bne.n	800f3de <etharp_query+0x10a>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d10c      	bne.n	800f3f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f3de:	68b9      	ldr	r1, [r7, #8]
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f000 f963 	bl	800f6ac <etharp_request>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d102      	bne.n	800f3f8 <etharp_query+0x124>
      return result;
 800f3f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f3f6:	e096      	b.n	800f526 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d106      	bne.n	800f40c <etharp_query+0x138>
 800f3fe:	4b4c      	ldr	r3, [pc, #304]	@ (800f530 <etharp_query+0x25c>)
 800f400:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800f404:	494f      	ldr	r1, [pc, #316]	@ (800f544 <etharp_query+0x270>)
 800f406:	484c      	ldr	r0, [pc, #304]	@ (800f538 <etharp_query+0x264>)
 800f408:	f001 fef2 	bl	80111f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f40c:	7c7a      	ldrb	r2, [r7, #17]
 800f40e:	494b      	ldr	r1, [pc, #300]	@ (800f53c <etharp_query+0x268>)
 800f410:	4613      	mov	r3, r2
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	4413      	add	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	440b      	add	r3, r1
 800f41a:	3314      	adds	r3, #20
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d917      	bls.n	800f452 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f422:	4a49      	ldr	r2, [pc, #292]	@ (800f548 <etharp_query+0x274>)
 800f424:	7c7b      	ldrb	r3, [r7, #17]
 800f426:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f428:	7c7a      	ldrb	r2, [r7, #17]
 800f42a:	4613      	mov	r3, r2
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	4413      	add	r3, r2
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	3308      	adds	r3, #8
 800f434:	4a41      	ldr	r2, [pc, #260]	@ (800f53c <etharp_query+0x268>)
 800f436:	4413      	add	r3, r2
 800f438:	3304      	adds	r3, #4
 800f43a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f43e:	9200      	str	r2, [sp, #0]
 800f440:	697a      	ldr	r2, [r7, #20]
 800f442:	6879      	ldr	r1, [r7, #4]
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f001 fc75 	bl	8010d34 <ethernet_output>
 800f44a:	4603      	mov	r3, r0
 800f44c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f450:	e067      	b.n	800f522 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f452:	7c7a      	ldrb	r2, [r7, #17]
 800f454:	4939      	ldr	r1, [pc, #228]	@ (800f53c <etharp_query+0x268>)
 800f456:	4613      	mov	r3, r2
 800f458:	005b      	lsls	r3, r3, #1
 800f45a:	4413      	add	r3, r2
 800f45c:	00db      	lsls	r3, r3, #3
 800f45e:	440b      	add	r3, r1
 800f460:	3314      	adds	r3, #20
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d15c      	bne.n	800f522 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f468:	2300      	movs	r3, #0
 800f46a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f470:	e01c      	b.n	800f4ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	895a      	ldrh	r2, [r3, #10]
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	891b      	ldrh	r3, [r3, #8]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d10a      	bne.n	800f494 <etharp_query+0x1c0>
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d006      	beq.n	800f494 <etharp_query+0x1c0>
 800f486:	4b2a      	ldr	r3, [pc, #168]	@ (800f530 <etharp_query+0x25c>)
 800f488:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800f48c:	492f      	ldr	r1, [pc, #188]	@ (800f54c <etharp_query+0x278>)
 800f48e:	482a      	ldr	r0, [pc, #168]	@ (800f538 <etharp_query+0x264>)
 800f490:	f001 feae 	bl	80111f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	7b1b      	ldrb	r3, [r3, #12]
 800f498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d002      	beq.n	800f4a6 <etharp_query+0x1d2>
        copy_needed = 1;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	61bb      	str	r3, [r7, #24]
        break;
 800f4a4:	e005      	b.n	800f4b2 <etharp_query+0x1de>
      }
      p = p->next;
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1df      	bne.n	800f472 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d007      	beq.n	800f4c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800f4be:	200e      	movs	r0, #14
 800f4c0:	f7f9 fcfc 	bl	8008ebc <pbuf_clone>
 800f4c4:	61f8      	str	r0, [r7, #28]
 800f4c6:	e004      	b.n	800f4d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f4cc:	69f8      	ldr	r0, [r7, #28]
 800f4ce:	f7f9 fb33 	bl	8008b38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d021      	beq.n	800f51c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f4d8:	7c7a      	ldrb	r2, [r7, #17]
 800f4da:	4918      	ldr	r1, [pc, #96]	@ (800f53c <etharp_query+0x268>)
 800f4dc:	4613      	mov	r3, r2
 800f4de:	005b      	lsls	r3, r3, #1
 800f4e0:	4413      	add	r3, r2
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	440b      	add	r3, r1
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00a      	beq.n	800f502 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f4ec:	7c7a      	ldrb	r2, [r7, #17]
 800f4ee:	4913      	ldr	r1, [pc, #76]	@ (800f53c <etharp_query+0x268>)
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	4413      	add	r3, r2
 800f4f6:	00db      	lsls	r3, r3, #3
 800f4f8:	440b      	add	r3, r1
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7f9 fa75 	bl	80089ec <pbuf_free>
      }
      arp_table[i].q = p;
 800f502:	7c7a      	ldrb	r2, [r7, #17]
 800f504:	490d      	ldr	r1, [pc, #52]	@ (800f53c <etharp_query+0x268>)
 800f506:	4613      	mov	r3, r2
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	4413      	add	r3, r2
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	440b      	add	r3, r1
 800f510:	69fa      	ldr	r2, [r7, #28]
 800f512:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f51a:	e002      	b.n	800f522 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f51c:	23ff      	movs	r3, #255	@ 0xff
 800f51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800f522:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f526:	4618      	mov	r0, r3
 800f528:	3728      	adds	r7, #40	@ 0x28
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	080144d8 	.word	0x080144d8
 800f534:	08014684 	.word	0x08014684
 800f538:	08014550 	.word	0x08014550
 800f53c:	2000bdec 	.word	0x2000bdec
 800f540:	08014694 	.word	0x08014694
 800f544:	08014678 	.word	0x08014678
 800f548:	2000bedc 	.word	0x2000bedc
 800f54c:	080146bc 	.word	0x080146bc

0800f550 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08a      	sub	sp, #40	@ 0x28
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d106      	bne.n	800f576 <etharp_raw+0x26>
 800f568:	4b3a      	ldr	r3, [pc, #232]	@ (800f654 <etharp_raw+0x104>)
 800f56a:	f240 4257 	movw	r2, #1111	@ 0x457
 800f56e:	493a      	ldr	r1, [pc, #232]	@ (800f658 <etharp_raw+0x108>)
 800f570:	483a      	ldr	r0, [pc, #232]	@ (800f65c <etharp_raw+0x10c>)
 800f572:	f001 fe3d 	bl	80111f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f576:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f57a:	211c      	movs	r1, #28
 800f57c:	200e      	movs	r0, #14
 800f57e:	f7f8 ff51 	bl	8008424 <pbuf_alloc>
 800f582:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d102      	bne.n	800f590 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295
 800f58e:	e05d      	b.n	800f64c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	895b      	ldrh	r3, [r3, #10]
 800f594:	2b1b      	cmp	r3, #27
 800f596:	d806      	bhi.n	800f5a6 <etharp_raw+0x56>
 800f598:	4b2e      	ldr	r3, [pc, #184]	@ (800f654 <etharp_raw+0x104>)
 800f59a:	f240 4262 	movw	r2, #1122	@ 0x462
 800f59e:	4930      	ldr	r1, [pc, #192]	@ (800f660 <etharp_raw+0x110>)
 800f5a0:	482e      	ldr	r0, [pc, #184]	@ (800f65c <etharp_raw+0x10c>)
 800f5a2:	f001 fe25 	bl	80111f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f5ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f7 fe2e 	bl	8007210 <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f5c2:	2b06      	cmp	r3, #6
 800f5c4:	d006      	beq.n	800f5d4 <etharp_raw+0x84>
 800f5c6:	4b23      	ldr	r3, [pc, #140]	@ (800f654 <etharp_raw+0x104>)
 800f5c8:	f240 4269 	movw	r2, #1129	@ 0x469
 800f5cc:	4925      	ldr	r1, [pc, #148]	@ (800f664 <etharp_raw+0x114>)
 800f5ce:	4823      	ldr	r0, [pc, #140]	@ (800f65c <etharp_raw+0x10c>)
 800f5d0:	f001 fe0e 	bl	80111f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	3308      	adds	r3, #8
 800f5d8:	2206      	movs	r2, #6
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f001 fee2 	bl	80113a6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	3312      	adds	r3, #18
 800f5e6:	2206      	movs	r2, #6
 800f5e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f001 fedb 	bl	80113a6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	330e      	adds	r3, #14
 800f5f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5f6:	6812      	ldr	r2, [r2, #0]
 800f5f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	3318      	adds	r3, #24
 800f5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f600:	6812      	ldr	r2, [r2, #0]
 800f602:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	2200      	movs	r2, #0
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f042 0201 	orr.w	r2, r2, #1
 800f610:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2200      	movs	r2, #0
 800f616:	f042 0208 	orr.w	r2, r2, #8
 800f61a:	709a      	strb	r2, [r3, #2]
 800f61c:	2200      	movs	r2, #0
 800f61e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	2206      	movs	r2, #6
 800f624:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2204      	movs	r2, #4
 800f62a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f62c:	f640 0306 	movw	r3, #2054	@ 0x806
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	69b9      	ldr	r1, [r7, #24]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f001 fb7b 	bl	8010d34 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f63e:	69b8      	ldr	r0, [r7, #24]
 800f640:	f7f9 f9d4 	bl	80089ec <pbuf_free>
  p = NULL;
 800f644:	2300      	movs	r3, #0
 800f646:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f648:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3720      	adds	r7, #32
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	080144d8 	.word	0x080144d8
 800f658:	08014628 	.word	0x08014628
 800f65c:	08014550 	.word	0x08014550
 800f660:	080146d8 	.word	0x080146d8
 800f664:	0801470c 	.word	0x0801470c

0800f668 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b088      	sub	sp, #32
 800f66c:	af04      	add	r7, sp, #16
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f684:	2201      	movs	r2, #1
 800f686:	9203      	str	r2, [sp, #12]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	9202      	str	r2, [sp, #8]
 800f68c:	4a06      	ldr	r2, [pc, #24]	@ (800f6a8 <etharp_request_dst+0x40>)
 800f68e:	9201      	str	r2, [sp, #4]
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	4603      	mov	r3, r0
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7ff ff5a 	bl	800f550 <etharp_raw>
 800f69c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	08014cd4 	.word	0x08014cd4

0800f6ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f6b6:	4a05      	ldr	r2, [pc, #20]	@ (800f6cc <etharp_request+0x20>)
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7ff ffd4 	bl	800f668 <etharp_request_dst>
 800f6c0:	4603      	mov	r3, r0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	08014ccc 	.word	0x08014ccc

0800f6d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b08e      	sub	sp, #56	@ 0x38
 800f6d4:	af04      	add	r7, sp, #16
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f6da:	4b79      	ldr	r3, [pc, #484]	@ (800f8c0 <icmp_input+0x1f0>)
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	f003 030f 	and.w	r3, r3, #15
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800f6f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f6f2:	2b13      	cmp	r3, #19
 800f6f4:	f240 80cd 	bls.w	800f892 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	895b      	ldrh	r3, [r3, #10]
 800f6fc:	2b03      	cmp	r3, #3
 800f6fe:	f240 80ca 	bls.w	800f896 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f70c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f710:	2b00      	cmp	r3, #0
 800f712:	f000 80b7 	beq.w	800f884 <icmp_input+0x1b4>
 800f716:	2b08      	cmp	r3, #8
 800f718:	f040 80b7 	bne.w	800f88a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f71c:	4b69      	ldr	r3, [pc, #420]	@ (800f8c4 <icmp_input+0x1f4>)
 800f71e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f720:	4b67      	ldr	r3, [pc, #412]	@ (800f8c0 <icmp_input+0x1f0>)
 800f722:	695b      	ldr	r3, [r3, #20]
 800f724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f728:	2be0      	cmp	r3, #224	@ 0xe0
 800f72a:	f000 80bb 	beq.w	800f8a4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f72e:	4b64      	ldr	r3, [pc, #400]	@ (800f8c0 <icmp_input+0x1f0>)
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	4a63      	ldr	r2, [pc, #396]	@ (800f8c0 <icmp_input+0x1f0>)
 800f734:	6812      	ldr	r2, [r2, #0]
 800f736:	4611      	mov	r1, r2
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 fbed 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	f040 80b1 	bne.w	800f8a8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	891b      	ldrh	r3, [r3, #8]
 800f74a:	2b07      	cmp	r3, #7
 800f74c:	f240 80a5 	bls.w	800f89a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f750:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f752:	330e      	adds	r3, #14
 800f754:	4619      	mov	r1, r3
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7f9 f8b2 	bl	80088c0 <pbuf_add_header>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d04b      	beq.n	800f7fa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	891a      	ldrh	r2, [r3, #8]
 800f766:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f768:	4413      	add	r3, r2
 800f76a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	891b      	ldrh	r3, [r3, #8]
 800f770:	8b7a      	ldrh	r2, [r7, #26]
 800f772:	429a      	cmp	r2, r3
 800f774:	f0c0 809a 	bcc.w	800f8ac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f778:	8b7b      	ldrh	r3, [r7, #26]
 800f77a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f77e:	4619      	mov	r1, r3
 800f780:	200e      	movs	r0, #14
 800f782:	f7f8 fe4f 	bl	8008424 <pbuf_alloc>
 800f786:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 8090 	beq.w	800f8b0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	895b      	ldrh	r3, [r3, #10]
 800f794:	461a      	mov	r2, r3
 800f796:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f798:	3308      	adds	r3, #8
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d203      	bcs.n	800f7a6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f79e:	6978      	ldr	r0, [r7, #20]
 800f7a0:	f7f9 f924 	bl	80089ec <pbuf_free>
          goto icmperr;
 800f7a4:	e085      	b.n	800f8b2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f7ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f001 fdf9 	bl	80113a6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f7b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	6978      	ldr	r0, [r7, #20]
 800f7ba:	f7f9 f891 	bl	80088e0 <pbuf_remove_header>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d009      	beq.n	800f7d8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f7c4:	4b40      	ldr	r3, [pc, #256]	@ (800f8c8 <icmp_input+0x1f8>)
 800f7c6:	22b6      	movs	r2, #182	@ 0xb6
 800f7c8:	4940      	ldr	r1, [pc, #256]	@ (800f8cc <icmp_input+0x1fc>)
 800f7ca:	4841      	ldr	r0, [pc, #260]	@ (800f8d0 <icmp_input+0x200>)
 800f7cc:	f001 fd10 	bl	80111f0 <iprintf>
          pbuf_free(r);
 800f7d0:	6978      	ldr	r0, [r7, #20]
 800f7d2:	f7f9 f90b 	bl	80089ec <pbuf_free>
          goto icmperr;
 800f7d6:	e06c      	b.n	800f8b2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f7d8:	6879      	ldr	r1, [r7, #4]
 800f7da:	6978      	ldr	r0, [r7, #20]
 800f7dc:	f7f9 fa2a 	bl	8008c34 <pbuf_copy>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d003      	beq.n	800f7ee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f7e6:	6978      	ldr	r0, [r7, #20]
 800f7e8:	f7f9 f900 	bl	80089ec <pbuf_free>
          goto icmperr;
 800f7ec:	e061      	b.n	800f8b2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f7f9 f8fc 	bl	80089ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	607b      	str	r3, [r7, #4]
 800f7f8:	e00f      	b.n	800f81a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f7fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f7fc:	330e      	adds	r3, #14
 800f7fe:	4619      	mov	r1, r3
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7f9 f86d 	bl	80088e0 <pbuf_remove_header>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d006      	beq.n	800f81a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f80c:	4b2e      	ldr	r3, [pc, #184]	@ (800f8c8 <icmp_input+0x1f8>)
 800f80e:	22c7      	movs	r2, #199	@ 0xc7
 800f810:	4930      	ldr	r1, [pc, #192]	@ (800f8d4 <icmp_input+0x204>)
 800f812:	482f      	ldr	r0, [pc, #188]	@ (800f8d0 <icmp_input+0x200>)
 800f814:	f001 fcec 	bl	80111f0 <iprintf>
          goto icmperr;
 800f818:	e04b      	b.n	800f8b2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f820:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f822:	4619      	mov	r1, r3
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7f9 f84b 	bl	80088c0 <pbuf_add_header>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d12b      	bne.n	800f888 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f83e:	4b20      	ldr	r3, [pc, #128]	@ (800f8c0 <icmp_input+0x1f0>)
 800f840:	691a      	ldr	r2, [r3, #16]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	2200      	movs	r2, #0
 800f84a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	2200      	movs	r2, #0
 800f850:	709a      	strb	r2, [r3, #2]
 800f852:	2200      	movs	r2, #0
 800f854:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	22ff      	movs	r2, #255	@ 0xff
 800f85a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2200      	movs	r2, #0
 800f860:	729a      	strb	r2, [r3, #10]
 800f862:	2200      	movs	r2, #0
 800f864:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	9302      	str	r3, [sp, #8]
 800f86a:	2301      	movs	r3, #1
 800f86c:	9301      	str	r3, [sp, #4]
 800f86e:	2300      	movs	r3, #0
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	23ff      	movs	r3, #255	@ 0xff
 800f874:	2200      	movs	r2, #0
 800f876:	69f9      	ldr	r1, [r7, #28]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fa75 	bl	800fd68 <ip4_output_if>
 800f87e:	4603      	mov	r3, r0
 800f880:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f882:	e001      	b.n	800f888 <icmp_input+0x1b8>
      break;
 800f884:	bf00      	nop
 800f886:	e000      	b.n	800f88a <icmp_input+0x1ba>
      break;
 800f888:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7f9 f8ae 	bl	80089ec <pbuf_free>
  return;
 800f890:	e013      	b.n	800f8ba <icmp_input+0x1ea>
    goto lenerr;
 800f892:	bf00      	nop
 800f894:	e002      	b.n	800f89c <icmp_input+0x1cc>
    goto lenerr;
 800f896:	bf00      	nop
 800f898:	e000      	b.n	800f89c <icmp_input+0x1cc>
        goto lenerr;
 800f89a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7f9 f8a5 	bl	80089ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f8a2:	e00a      	b.n	800f8ba <icmp_input+0x1ea>
        goto icmperr;
 800f8a4:	bf00      	nop
 800f8a6:	e004      	b.n	800f8b2 <icmp_input+0x1e2>
        goto icmperr;
 800f8a8:	bf00      	nop
 800f8aa:	e002      	b.n	800f8b2 <icmp_input+0x1e2>
          goto icmperr;
 800f8ac:	bf00      	nop
 800f8ae:	e000      	b.n	800f8b2 <icmp_input+0x1e2>
          goto icmperr;
 800f8b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7f9 f89a 	bl	80089ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f8b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f8ba:	3728      	adds	r7, #40	@ 0x28
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	20008c8c 	.word	0x20008c8c
 800f8c4:	20008ca0 	.word	0x20008ca0
 800f8c8:	08014750 	.word	0x08014750
 800f8cc:	08014788 	.word	0x08014788
 800f8d0:	080147c0 	.word	0x080147c0
 800f8d4:	080147e8 	.word	0x080147e8

0800f8d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f8e4:	78fb      	ldrb	r3, [r7, #3]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	2103      	movs	r1, #3
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 f814 	bl	800f918 <icmp_send_response>
}
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f904:	78fb      	ldrb	r3, [r7, #3]
 800f906:	461a      	mov	r2, r3
 800f908:	210b      	movs	r1, #11
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f804 	bl	800f918 <icmp_send_response>
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08c      	sub	sp, #48	@ 0x30
 800f91c:	af04      	add	r7, sp, #16
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
 800f924:	4613      	mov	r3, r2
 800f926:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f928:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f92c:	2124      	movs	r1, #36	@ 0x24
 800f92e:	2022      	movs	r0, #34	@ 0x22
 800f930:	f7f8 fd78 	bl	8008424 <pbuf_alloc>
 800f934:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d04c      	beq.n	800f9d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	895b      	ldrh	r3, [r3, #10]
 800f940:	2b23      	cmp	r3, #35	@ 0x23
 800f942:	d806      	bhi.n	800f952 <icmp_send_response+0x3a>
 800f944:	4b26      	ldr	r3, [pc, #152]	@ (800f9e0 <icmp_send_response+0xc8>)
 800f946:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f94a:	4926      	ldr	r1, [pc, #152]	@ (800f9e4 <icmp_send_response+0xcc>)
 800f94c:	4826      	ldr	r0, [pc, #152]	@ (800f9e8 <icmp_send_response+0xd0>)
 800f94e:	f001 fc4f 	bl	80111f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	78fa      	ldrb	r2, [r7, #3]
 800f962:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	78ba      	ldrb	r2, [r7, #2]
 800f968:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2200      	movs	r2, #0
 800f96e:	711a      	strb	r2, [r3, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	2200      	movs	r2, #0
 800f978:	719a      	strb	r2, [r3, #6]
 800f97a:	2200      	movs	r2, #0
 800f97c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	f103 0008 	add.w	r0, r3, #8
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	221c      	movs	r2, #28
 800f98c:	4619      	mov	r1, r3
 800f98e:	f001 fd0a 	bl	80113a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f992:	69bb      	ldr	r3, [r7, #24]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f998:	f107 030c 	add.w	r3, r7, #12
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 f825 	bl	800f9ec <ip4_route>
 800f9a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d011      	beq.n	800f9ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	709a      	strb	r2, [r3, #2]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f9b4:	f107 020c 	add.w	r2, r7, #12
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	9302      	str	r3, [sp, #8]
 800f9bc:	2301      	movs	r3, #1
 800f9be:	9301      	str	r3, [sp, #4]
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	23ff      	movs	r3, #255	@ 0xff
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	69f8      	ldr	r0, [r7, #28]
 800f9ca:	f000 f9cd 	bl	800fd68 <ip4_output_if>
  }
  pbuf_free(q);
 800f9ce:	69f8      	ldr	r0, [r7, #28]
 800f9d0:	f7f9 f80c 	bl	80089ec <pbuf_free>
 800f9d4:	e000      	b.n	800f9d8 <icmp_send_response+0xc0>
    return;
 800f9d6:	bf00      	nop
}
 800f9d8:	3720      	adds	r7, #32
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	08014750 	.word	0x08014750
 800f9e4:	0801481c 	.word	0x0801481c
 800f9e8:	080147c0 	.word	0x080147c0

0800f9ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b085      	sub	sp, #20
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f9f4:	4b33      	ldr	r3, [pc, #204]	@ (800fac4 <ip4_route+0xd8>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	60fb      	str	r3, [r7, #12]
 800f9fa:	e036      	b.n	800fa6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa02:	f003 0301 	and.w	r3, r3, #1
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d02b      	beq.n	800fa64 <ip4_route+0x78>
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa12:	089b      	lsrs	r3, r3, #2
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d022      	beq.n	800fa64 <ip4_route+0x78>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3304      	adds	r3, #4
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01d      	beq.n	800fa64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	405a      	eors	r2, r3
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	3308      	adds	r3, #8
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d101      	bne.n	800fa44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	e038      	b.n	800fab6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa4a:	f003 0302 	and.w	r3, r3, #2
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d108      	bne.n	800fa64 <ip4_route+0x78>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	330c      	adds	r3, #12
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d101      	bne.n	800fa64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	e028      	b.n	800fab6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1c5      	bne.n	800f9fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fa70:	4b15      	ldr	r3, [pc, #84]	@ (800fac8 <ip4_route+0xdc>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d01a      	beq.n	800faae <ip4_route+0xc2>
 800fa78:	4b13      	ldr	r3, [pc, #76]	@ (800fac8 <ip4_route+0xdc>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa80:	f003 0301 	and.w	r3, r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d012      	beq.n	800faae <ip4_route+0xc2>
 800fa88:	4b0f      	ldr	r3, [pc, #60]	@ (800fac8 <ip4_route+0xdc>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fa90:	f003 0304 	and.w	r3, r3, #4
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00a      	beq.n	800faae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fa98:	4b0b      	ldr	r3, [pc, #44]	@ (800fac8 <ip4_route+0xdc>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d004      	beq.n	800faae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800faac:	d101      	bne.n	800fab2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800faae:	2300      	movs	r3, #0
 800fab0:	e001      	b.n	800fab6 <ip4_route+0xca>
  }

  return netif_default;
 800fab2:	4b05      	ldr	r3, [pc, #20]	@ (800fac8 <ip4_route+0xdc>)
 800fab4:	681b      	ldr	r3, [r3, #0]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3714      	adds	r7, #20
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	2000bd80 	.word	0x2000bd80
 800fac8:	2000bd84 	.word	0x2000bd84

0800facc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fada:	f003 0301 	and.w	r3, r3, #1
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d016      	beq.n	800fb12 <ip4_input_accept+0x46>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3304      	adds	r3, #4
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d011      	beq.n	800fb12 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800faee:	4b0b      	ldr	r3, [pc, #44]	@ (800fb1c <ip4_input_accept+0x50>)
 800faf0:	695a      	ldr	r2, [r3, #20]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3304      	adds	r3, #4
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d008      	beq.n	800fb0e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fafc:	4b07      	ldr	r3, [pc, #28]	@ (800fb1c <ip4_input_accept+0x50>)
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	6879      	ldr	r1, [r7, #4]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f000 fa08 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800fb08:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e000      	b.n	800fb14 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	20008c8c 	.word	0x20008c8c

0800fb20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	091b      	lsrs	r3, r3, #4
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	2b04      	cmp	r3, #4
 800fb3a:	d004      	beq.n	800fb46 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f8 ff55 	bl	80089ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	e107      	b.n	800fd56 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	f003 030f 	and.w	r3, r3, #15
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	885b      	ldrh	r3, [r3, #2]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7f7 fb57 	bl	8007210 <lwip_htons>
 800fb62:	4603      	mov	r3, r0
 800fb64:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	891b      	ldrh	r3, [r3, #8]
 800fb6a:	89ba      	ldrh	r2, [r7, #12]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d204      	bcs.n	800fb7a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fb70:	89bb      	ldrh	r3, [r7, #12]
 800fb72:	4619      	mov	r1, r3
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f7f8 fdb3 	bl	80086e0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	895b      	ldrh	r3, [r3, #10]
 800fb7e:	89fa      	ldrh	r2, [r7, #14]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d807      	bhi.n	800fb94 <ip4_input+0x74>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	891b      	ldrh	r3, [r3, #8]
 800fb88:	89ba      	ldrh	r2, [r7, #12]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d802      	bhi.n	800fb94 <ip4_input+0x74>
 800fb8e:	89fb      	ldrh	r3, [r7, #14]
 800fb90:	2b13      	cmp	r3, #19
 800fb92:	d804      	bhi.n	800fb9e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7f8 ff29 	bl	80089ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e0db      	b.n	800fd56 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	4a6f      	ldr	r2, [pc, #444]	@ (800fd60 <ip4_input+0x240>)
 800fba4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	4a6d      	ldr	r2, [pc, #436]	@ (800fd60 <ip4_input+0x240>)
 800fbac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fbae:	4b6c      	ldr	r3, [pc, #432]	@ (800fd60 <ip4_input+0x240>)
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fbb6:	2be0      	cmp	r3, #224	@ 0xe0
 800fbb8:	d112      	bne.n	800fbe0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fbc0:	f003 0301 	and.w	r3, r3, #1
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d007      	beq.n	800fbda <ip4_input+0xba>
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	3304      	adds	r3, #4
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <ip4_input+0xba>
      netif = inp;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	613b      	str	r3, [r7, #16]
 800fbd8:	e02a      	b.n	800fc30 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	613b      	str	r3, [r7, #16]
 800fbde:	e027      	b.n	800fc30 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fbe0:	6838      	ldr	r0, [r7, #0]
 800fbe2:	f7ff ff73 	bl	800facc <ip4_input_accept>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d002      	beq.n	800fbf2 <ip4_input+0xd2>
      netif = inp;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	613b      	str	r3, [r7, #16]
 800fbf0:	e01e      	b.n	800fc30 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fbf6:	4b5a      	ldr	r3, [pc, #360]	@ (800fd60 <ip4_input+0x240>)
 800fbf8:	695b      	ldr	r3, [r3, #20]
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	2b7f      	cmp	r3, #127	@ 0x7f
 800fbfe:	d017      	beq.n	800fc30 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fc00:	4b58      	ldr	r3, [pc, #352]	@ (800fd64 <ip4_input+0x244>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	613b      	str	r3, [r7, #16]
 800fc06:	e00e      	b.n	800fc26 <ip4_input+0x106>
          if (netif == inp) {
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d006      	beq.n	800fc1e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fc10:	6938      	ldr	r0, [r7, #16]
 800fc12:	f7ff ff5b 	bl	800facc <ip4_input_accept>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d108      	bne.n	800fc2e <ip4_input+0x10e>
 800fc1c:	e000      	b.n	800fc20 <ip4_input+0x100>
            continue;
 800fc1e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	613b      	str	r3, [r7, #16]
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1ed      	bne.n	800fc08 <ip4_input+0xe8>
 800fc2c:	e000      	b.n	800fc30 <ip4_input+0x110>
            break;
 800fc2e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fc30:	4b4b      	ldr	r3, [pc, #300]	@ (800fd60 <ip4_input+0x240>)
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	6839      	ldr	r1, [r7, #0]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 f96e 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d105      	bne.n	800fc4e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fc42:	4b47      	ldr	r3, [pc, #284]	@ (800fd60 <ip4_input+0x240>)
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fc4a:	2be0      	cmp	r3, #224	@ 0xe0
 800fc4c:	d104      	bne.n	800fc58 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7f8 fecc 	bl	80089ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	e07e      	b.n	800fd56 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d104      	bne.n	800fc68 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7f8 fec4 	bl	80089ec <pbuf_free>
    return ERR_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	e076      	b.n	800fd56 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	88db      	ldrh	r3, [r3, #6]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	461a      	mov	r2, r3
 800fc70:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800fc74:	4013      	ands	r3, r2
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00b      	beq.n	800fc92 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 fc92 	bl	80105a4 <ip4_reass>
 800fc80:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d101      	bne.n	800fc8c <ip4_input+0x16c>
      return ERR_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e064      	b.n	800fd56 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fc92:	4a33      	ldr	r2, [pc, #204]	@ (800fd60 <ip4_input+0x240>)
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fc98:	4a31      	ldr	r2, [pc, #196]	@ (800fd60 <ip4_input+0x240>)
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fc9e:	4a30      	ldr	r2, [pc, #192]	@ (800fd60 <ip4_input+0x240>)
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 030f 	and.w	r3, r3, #15
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	4b2a      	ldr	r3, [pc, #168]	@ (800fd60 <ip4_input+0x240>)
 800fcb6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fcb8:	89fb      	ldrh	r3, [r7, #14]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7f8 fe0f 	bl	80088e0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	7a5b      	ldrb	r3, [r3, #9]
 800fcc6:	2b11      	cmp	r3, #17
 800fcc8:	d006      	beq.n	800fcd8 <ip4_input+0x1b8>
 800fcca:	2b11      	cmp	r3, #17
 800fccc:	dc13      	bgt.n	800fcf6 <ip4_input+0x1d6>
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d00c      	beq.n	800fcec <ip4_input+0x1cc>
 800fcd2:	2b06      	cmp	r3, #6
 800fcd4:	d005      	beq.n	800fce2 <ip4_input+0x1c2>
 800fcd6:	e00e      	b.n	800fcf6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fcd8:	6839      	ldr	r1, [r7, #0]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7fe fc68 	bl	800e5b0 <udp_input>
        break;
 800fce0:	e026      	b.n	800fd30 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f7fa fcb7 	bl	800a658 <tcp_input>
        break;
 800fcea:	e021      	b.n	800fd30 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7ff fcee 	bl	800f6d0 <icmp_input>
        break;
 800fcf4:	e01c      	b.n	800fd30 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fcf6:	4b1a      	ldr	r3, [pc, #104]	@ (800fd60 <ip4_input+0x240>)
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	6939      	ldr	r1, [r7, #16]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 f90b 	bl	800ff18 <ip4_addr_isbroadcast_u32>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10f      	bne.n	800fd28 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd08:	4b15      	ldr	r3, [pc, #84]	@ (800fd60 <ip4_input+0x240>)
 800fd0a:	695b      	ldr	r3, [r3, #20]
 800fd0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fd10:	2be0      	cmp	r3, #224	@ 0xe0
 800fd12:	d009      	beq.n	800fd28 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fd14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7f8 fe53 	bl	80089c6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fd20:	2102      	movs	r1, #2
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7ff fdd8 	bl	800f8d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7f8 fe5f 	bl	80089ec <pbuf_free>
        break;
 800fd2e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fd30:	4b0b      	ldr	r3, [pc, #44]	@ (800fd60 <ip4_input+0x240>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fd36:	4b0a      	ldr	r3, [pc, #40]	@ (800fd60 <ip4_input+0x240>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fd3c:	4b08      	ldr	r3, [pc, #32]	@ (800fd60 <ip4_input+0x240>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fd42:	4b07      	ldr	r3, [pc, #28]	@ (800fd60 <ip4_input+0x240>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fd48:	4b05      	ldr	r3, [pc, #20]	@ (800fd60 <ip4_input+0x240>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fd4e:	4b04      	ldr	r3, [pc, #16]	@ (800fd60 <ip4_input+0x240>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3718      	adds	r7, #24
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20008c8c 	.word	0x20008c8c
 800fd64:	2000bd80 	.word	0x2000bd80

0800fd68 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b08a      	sub	sp, #40	@ 0x28
 800fd6c:	af04      	add	r7, sp, #16
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
 800fd74:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d009      	beq.n	800fd94 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <ip4_output_if+0x26>
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d102      	bne.n	800fd94 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd90:	3304      	adds	r3, #4
 800fd92:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fd94:	78fa      	ldrb	r2, [r7, #3]
 800fd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd98:	9302      	str	r3, [sp, #8]
 800fd9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	4613      	mov	r3, r2
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	6979      	ldr	r1, [r7, #20]
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f000 f805 	bl	800fdbc <ip4_output_if_src>
 800fdb2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
 800fdc8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	7b9b      	ldrb	r3, [r3, #14]
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d006      	beq.n	800fde0 <ip4_output_if_src+0x24>
 800fdd2:	4b4b      	ldr	r3, [pc, #300]	@ (800ff00 <ip4_output_if_src+0x144>)
 800fdd4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800fdd8:	494a      	ldr	r1, [pc, #296]	@ (800ff04 <ip4_output_if_src+0x148>)
 800fdda:	484b      	ldr	r0, [pc, #300]	@ (800ff08 <ip4_output_if_src+0x14c>)
 800fddc:	f001 fa08 	bl	80111f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d060      	beq.n	800fea8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fde6:	2314      	movs	r3, #20
 800fde8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fdea:	2114      	movs	r1, #20
 800fdec:	68f8      	ldr	r0, [r7, #12]
 800fdee:	f7f8 fd67 	bl	80088c0 <pbuf_add_header>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d002      	beq.n	800fdfe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fdf8:	f06f 0301 	mvn.w	r3, #1
 800fdfc:	e07c      	b.n	800fef8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	895b      	ldrh	r3, [r3, #10]
 800fe08:	2b13      	cmp	r3, #19
 800fe0a:	d806      	bhi.n	800fe1a <ip4_output_if_src+0x5e>
 800fe0c:	4b3c      	ldr	r3, [pc, #240]	@ (800ff00 <ip4_output_if_src+0x144>)
 800fe0e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800fe12:	493e      	ldr	r1, [pc, #248]	@ (800ff0c <ip4_output_if_src+0x150>)
 800fe14:	483c      	ldr	r0, [pc, #240]	@ (800ff08 <ip4_output_if_src+0x14c>)
 800fe16:	f001 f9eb 	bl	80111f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	78fa      	ldrb	r2, [r7, #3]
 800fe1e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800fe26:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fe30:	8b7b      	ldrh	r3, [r7, #26]
 800fe32:	089b      	lsrs	r3, r3, #2
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fe48:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	891b      	ldrh	r3, [r3, #8]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f7 f9de 	bl	8007210 <lwip_htons>
 800fe54:	4603      	mov	r3, r0
 800fe56:	461a      	mov	r2, r3
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	719a      	strb	r2, [r3, #6]
 800fe62:	2200      	movs	r2, #0
 800fe64:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fe66:	4b2a      	ldr	r3, [pc, #168]	@ (800ff10 <ip4_output_if_src+0x154>)
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7f7 f9d0 	bl	8007210 <lwip_htons>
 800fe70:	4603      	mov	r3, r0
 800fe72:	461a      	mov	r2, r3
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fe78:	4b25      	ldr	r3, [pc, #148]	@ (800ff10 <ip4_output_if_src+0x154>)
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	4b23      	ldr	r3, [pc, #140]	@ (800ff10 <ip4_output_if_src+0x154>)
 800fe82:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d104      	bne.n	800fe94 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fe8a:	4b22      	ldr	r3, [pc, #136]	@ (800ff14 <ip4_output_if_src+0x158>)
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	60da      	str	r2, [r3, #12]
 800fe92:	e003      	b.n	800fe9c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	729a      	strb	r2, [r3, #10]
 800fea2:	2200      	movs	r2, #0
 800fea4:	72da      	strb	r2, [r3, #11]
 800fea6:	e00f      	b.n	800fec8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	895b      	ldrh	r3, [r3, #10]
 800feac:	2b13      	cmp	r3, #19
 800feae:	d802      	bhi.n	800feb6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800feb0:	f06f 0301 	mvn.w	r3, #1
 800feb4:	e020      	b.n	800fef8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fec2:	f107 0314 	add.w	r3, r7, #20
 800fec6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00c      	beq.n	800feea <ip4_output_if_src+0x12e>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	891a      	ldrh	r2, [r3, #8]
 800fed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fed8:	429a      	cmp	r2, r3
 800feda:	d906      	bls.n	800feea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f000 fd53 	bl	801098c <ip4_frag>
 800fee6:	4603      	mov	r3, r0
 800fee8:	e006      	b.n	800fef8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800feea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	68f9      	ldr	r1, [r7, #12]
 800fef2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fef4:	4798      	blx	r3
 800fef6:	4603      	mov	r3, r0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3720      	adds	r7, #32
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	08014848 	.word	0x08014848
 800ff04:	0801487c 	.word	0x0801487c
 800ff08:	08014888 	.word	0x08014888
 800ff0c:	080148b0 	.word	0x080148b0
 800ff10:	2000bede 	.word	0x2000bede
 800ff14:	08014cc8 	.word	0x08014cc8

0800ff18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2c:	d002      	beq.n	800ff34 <ip4_addr_isbroadcast_u32+0x1c>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d101      	bne.n	800ff38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ff34:	2301      	movs	r3, #1
 800ff36:	e02a      	b.n	800ff8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff3e:	f003 0302 	and.w	r3, r3, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d101      	bne.n	800ff4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ff46:	2300      	movs	r3, #0
 800ff48:	e021      	b.n	800ff8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d101      	bne.n	800ff5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	e019      	b.n	800ff8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	3304      	adds	r3, #4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	405a      	eors	r2, r3
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	3308      	adds	r3, #8
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4013      	ands	r3, r2
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d10d      	bne.n	800ff8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	3308      	adds	r3, #8
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	43da      	mvns	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d101      	bne.n	800ff8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e000      	b.n	800ff8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ff8c:	2300      	movs	r3, #0
  }
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3714      	adds	r7, #20
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr
	...

0800ff9c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ffa6:	4b12      	ldr	r3, [pc, #72]	@ (800fff0 <ip_reass_tmr+0x54>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ffac:	e018      	b.n	800ffe0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	7fdb      	ldrb	r3, [r3, #31]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00b      	beq.n	800ffce <ip_reass_tmr+0x32>
      r->timer--;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	7fdb      	ldrb	r3, [r3, #31]
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e008      	b.n	800ffe0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ffd8:	68b9      	ldr	r1, [r7, #8]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f80a 	bl	800fff4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1e3      	bne.n	800ffae <ip_reass_tmr+0x12>
    }
  }
}
 800ffe6:	bf00      	nop
 800ffe8:	bf00      	nop
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	2000bee0 	.word	0x2000bee0

0800fff4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b088      	sub	sp, #32
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010002:	683a      	ldr	r2, [r7, #0]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	429a      	cmp	r2, r3
 8010008:	d105      	bne.n	8010016 <ip_reass_free_complete_datagram+0x22>
 801000a:	4b45      	ldr	r3, [pc, #276]	@ (8010120 <ip_reass_free_complete_datagram+0x12c>)
 801000c:	22ab      	movs	r2, #171	@ 0xab
 801000e:	4945      	ldr	r1, [pc, #276]	@ (8010124 <ip_reass_free_complete_datagram+0x130>)
 8010010:	4845      	ldr	r0, [pc, #276]	@ (8010128 <ip_reass_free_complete_datagram+0x134>)
 8010012:	f001 f8ed 	bl	80111f0 <iprintf>
  if (prev != NULL) {
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00a      	beq.n	8010032 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	429a      	cmp	r2, r3
 8010024:	d005      	beq.n	8010032 <ip_reass_free_complete_datagram+0x3e>
 8010026:	4b3e      	ldr	r3, [pc, #248]	@ (8010120 <ip_reass_free_complete_datagram+0x12c>)
 8010028:	22ad      	movs	r2, #173	@ 0xad
 801002a:	4940      	ldr	r1, [pc, #256]	@ (801012c <ip_reass_free_complete_datagram+0x138>)
 801002c:	483e      	ldr	r0, [pc, #248]	@ (8010128 <ip_reass_free_complete_datagram+0x134>)
 801002e:	f001 f8df 	bl	80111f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	889b      	ldrh	r3, [r3, #4]
 801003e:	b29b      	uxth	r3, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d12a      	bne.n	801009a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	6858      	ldr	r0, [r3, #4]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	3308      	adds	r3, #8
 801005a:	2214      	movs	r2, #20
 801005c:	4619      	mov	r1, r3
 801005e:	f001 f9a2 	bl	80113a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010062:	2101      	movs	r1, #1
 8010064:	69b8      	ldr	r0, [r7, #24]
 8010066:	f7ff fc47 	bl	800f8f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801006a:	69b8      	ldr	r0, [r7, #24]
 801006c:	f7f8 fd4c 	bl	8008b08 <pbuf_clen>
 8010070:	4603      	mov	r3, r0
 8010072:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010074:	8bfa      	ldrh	r2, [r7, #30]
 8010076:	8a7b      	ldrh	r3, [r7, #18]
 8010078:	4413      	add	r3, r2
 801007a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801007e:	db05      	blt.n	801008c <ip_reass_free_complete_datagram+0x98>
 8010080:	4b27      	ldr	r3, [pc, #156]	@ (8010120 <ip_reass_free_complete_datagram+0x12c>)
 8010082:	22bc      	movs	r2, #188	@ 0xbc
 8010084:	492a      	ldr	r1, [pc, #168]	@ (8010130 <ip_reass_free_complete_datagram+0x13c>)
 8010086:	4828      	ldr	r0, [pc, #160]	@ (8010128 <ip_reass_free_complete_datagram+0x134>)
 8010088:	f001 f8b2 	bl	80111f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801008c:	8bfa      	ldrh	r2, [r7, #30]
 801008e:	8a7b      	ldrh	r3, [r7, #18]
 8010090:	4413      	add	r3, r2
 8010092:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010094:	69b8      	ldr	r0, [r7, #24]
 8010096:	f7f8 fca9 	bl	80089ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80100a0:	e01f      	b.n	80100e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f7f8 fd28 	bl	8008b08 <pbuf_clen>
 80100b8:	4603      	mov	r3, r0
 80100ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80100bc:	8bfa      	ldrh	r2, [r7, #30]
 80100be:	8a7b      	ldrh	r3, [r7, #18]
 80100c0:	4413      	add	r3, r2
 80100c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100c6:	db05      	blt.n	80100d4 <ip_reass_free_complete_datagram+0xe0>
 80100c8:	4b15      	ldr	r3, [pc, #84]	@ (8010120 <ip_reass_free_complete_datagram+0x12c>)
 80100ca:	22cc      	movs	r2, #204	@ 0xcc
 80100cc:	4918      	ldr	r1, [pc, #96]	@ (8010130 <ip_reass_free_complete_datagram+0x13c>)
 80100ce:	4816      	ldr	r0, [pc, #88]	@ (8010128 <ip_reass_free_complete_datagram+0x134>)
 80100d0:	f001 f88e 	bl	80111f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80100d4:	8bfa      	ldrh	r2, [r7, #30]
 80100d6:	8a7b      	ldrh	r3, [r7, #18]
 80100d8:	4413      	add	r3, r2
 80100da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f7f8 fc85 	bl	80089ec <pbuf_free>
  while (p != NULL) {
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d1dc      	bne.n	80100a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f8c2 	bl	8010274 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80100f0:	4b10      	ldr	r3, [pc, #64]	@ (8010134 <ip_reass_free_complete_datagram+0x140>)
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	8bfa      	ldrh	r2, [r7, #30]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d905      	bls.n	8010106 <ip_reass_free_complete_datagram+0x112>
 80100fa:	4b09      	ldr	r3, [pc, #36]	@ (8010120 <ip_reass_free_complete_datagram+0x12c>)
 80100fc:	22d2      	movs	r2, #210	@ 0xd2
 80100fe:	490e      	ldr	r1, [pc, #56]	@ (8010138 <ip_reass_free_complete_datagram+0x144>)
 8010100:	4809      	ldr	r0, [pc, #36]	@ (8010128 <ip_reass_free_complete_datagram+0x134>)
 8010102:	f001 f875 	bl	80111f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010106:	4b0b      	ldr	r3, [pc, #44]	@ (8010134 <ip_reass_free_complete_datagram+0x140>)
 8010108:	881a      	ldrh	r2, [r3, #0]
 801010a:	8bfb      	ldrh	r3, [r7, #30]
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	b29a      	uxth	r2, r3
 8010110:	4b08      	ldr	r3, [pc, #32]	@ (8010134 <ip_reass_free_complete_datagram+0x140>)
 8010112:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010114:	8bfb      	ldrh	r3, [r7, #30]
}
 8010116:	4618      	mov	r0, r3
 8010118:	3720      	adds	r7, #32
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	080148e0 	.word	0x080148e0
 8010124:	0801491c 	.word	0x0801491c
 8010128:	08014928 	.word	0x08014928
 801012c:	08014950 	.word	0x08014950
 8010130:	08014964 	.word	0x08014964
 8010134:	2000bee4 	.word	0x2000bee4
 8010138:	08014984 	.word	0x08014984

0801013c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b08a      	sub	sp, #40	@ 0x28
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010146:	2300      	movs	r3, #0
 8010148:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801014e:	2300      	movs	r3, #0
 8010150:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010152:	2300      	movs	r3, #0
 8010154:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801015a:	4b28      	ldr	r3, [pc, #160]	@ (80101fc <ip_reass_remove_oldest_datagram+0xc0>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010160:	e030      	b.n	80101c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010164:	695a      	ldr	r2, [r3, #20]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	429a      	cmp	r2, r3
 801016c:	d10c      	bne.n	8010188 <ip_reass_remove_oldest_datagram+0x4c>
 801016e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010170:	699a      	ldr	r2, [r3, #24]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	429a      	cmp	r2, r3
 8010178:	d106      	bne.n	8010188 <ip_reass_remove_oldest_datagram+0x4c>
 801017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017c:	899a      	ldrh	r2, [r3, #12]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	889b      	ldrh	r3, [r3, #4]
 8010182:	b29b      	uxth	r3, r3
 8010184:	429a      	cmp	r2, r3
 8010186:	d014      	beq.n	80101b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	3301      	adds	r3, #1
 801018c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801018e:	6a3b      	ldr	r3, [r7, #32]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d104      	bne.n	801019e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010196:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	61bb      	str	r3, [r7, #24]
 801019c:	e009      	b.n	80101b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801019e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a0:	7fda      	ldrb	r2, [r3, #31]
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	7fdb      	ldrb	r3, [r3, #31]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d803      	bhi.n	80101b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80101aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80101b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80101ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80101be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80101c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1cb      	bne.n	8010162 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d008      	beq.n	80101e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80101d0:	69b9      	ldr	r1, [r7, #24]
 80101d2:	6a38      	ldr	r0, [r7, #32]
 80101d4:	f7ff ff0e 	bl	800fff4 <ip_reass_free_complete_datagram>
 80101d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80101da:	697a      	ldr	r2, [r7, #20]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4413      	add	r3, r2
 80101e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80101e2:	697a      	ldr	r2, [r7, #20]
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	da02      	bge.n	80101f0 <ip_reass_remove_oldest_datagram+0xb4>
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	dcac      	bgt.n	801014a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80101f0:	697b      	ldr	r3, [r7, #20]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3728      	adds	r7, #40	@ 0x28
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	2000bee0 	.word	0x2000bee0

08010200 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801020a:	2004      	movs	r0, #4
 801020c:	f7f7 fcd4 	bl	8007bb8 <memp_malloc>
 8010210:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d110      	bne.n	801023a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010218:	6839      	ldr	r1, [r7, #0]
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7ff ff8e 	bl	801013c <ip_reass_remove_oldest_datagram>
 8010220:	4602      	mov	r2, r0
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	4293      	cmp	r3, r2
 8010226:	dc03      	bgt.n	8010230 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010228:	2004      	movs	r0, #4
 801022a:	f7f7 fcc5 	bl	8007bb8 <memp_malloc>
 801022e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d101      	bne.n	801023a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010236:	2300      	movs	r3, #0
 8010238:	e016      	b.n	8010268 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801023a:	2220      	movs	r2, #32
 801023c:	2100      	movs	r1, #0
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f001 f83b 	bl	80112ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	220f      	movs	r2, #15
 8010248:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801024a:	4b09      	ldr	r3, [pc, #36]	@ (8010270 <ip_reass_enqueue_new_datagram+0x70>)
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010252:	4a07      	ldr	r2, [pc, #28]	@ (8010270 <ip_reass_enqueue_new_datagram+0x70>)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3308      	adds	r3, #8
 801025c:	2214      	movs	r2, #20
 801025e:	6879      	ldr	r1, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	f001 f8a0 	bl	80113a6 <memcpy>
  return ipr;
 8010266:	68fb      	ldr	r3, [r7, #12]
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	2000bee0 	.word	0x2000bee0

08010274 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801027e:	4b10      	ldr	r3, [pc, #64]	@ (80102c0 <ip_reass_dequeue_datagram+0x4c>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	429a      	cmp	r2, r3
 8010286:	d104      	bne.n	8010292 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4a0c      	ldr	r2, [pc, #48]	@ (80102c0 <ip_reass_dequeue_datagram+0x4c>)
 801028e:	6013      	str	r3, [r2, #0]
 8010290:	e00d      	b.n	80102ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d106      	bne.n	80102a6 <ip_reass_dequeue_datagram+0x32>
 8010298:	4b0a      	ldr	r3, [pc, #40]	@ (80102c4 <ip_reass_dequeue_datagram+0x50>)
 801029a:	f240 1245 	movw	r2, #325	@ 0x145
 801029e:	490a      	ldr	r1, [pc, #40]	@ (80102c8 <ip_reass_dequeue_datagram+0x54>)
 80102a0:	480a      	ldr	r0, [pc, #40]	@ (80102cc <ip_reass_dequeue_datagram+0x58>)
 80102a2:	f000 ffa5 	bl	80111f0 <iprintf>
    prev->next = ipr->next;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80102ae:	6879      	ldr	r1, [r7, #4]
 80102b0:	2004      	movs	r0, #4
 80102b2:	f7f7 fcf7 	bl	8007ca4 <memp_free>
}
 80102b6:	bf00      	nop
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	2000bee0 	.word	0x2000bee0
 80102c4:	080148e0 	.word	0x080148e0
 80102c8:	080149a8 	.word	0x080149a8
 80102cc:	08014928 	.word	0x08014928

080102d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b08c      	sub	sp, #48	@ 0x30
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80102dc:	2300      	movs	r3, #0
 80102de:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80102e0:	2301      	movs	r3, #1
 80102e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	885b      	ldrh	r3, [r3, #2]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7f6 ff8d 	bl	8007210 <lwip_htons>
 80102f6:	4603      	mov	r3, r0
 80102f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	f003 030f 	and.w	r3, r3, #15
 8010302:	b2db      	uxtb	r3, r3
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010308:	7e7b      	ldrb	r3, [r7, #25]
 801030a:	b29b      	uxth	r3, r3
 801030c:	8b7a      	ldrh	r2, [r7, #26]
 801030e:	429a      	cmp	r2, r3
 8010310:	d202      	bcs.n	8010318 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010312:	f04f 33ff 	mov.w	r3, #4294967295
 8010316:	e135      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010318:	7e7b      	ldrb	r3, [r7, #25]
 801031a:	b29b      	uxth	r3, r3
 801031c:	8b7a      	ldrh	r2, [r7, #26]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	88db      	ldrh	r3, [r3, #6]
 8010326:	b29b      	uxth	r3, r3
 8010328:	4618      	mov	r0, r3
 801032a:	f7f6 ff71 	bl	8007210 <lwip_htons>
 801032e:	4603      	mov	r3, r0
 8010330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010334:	b29b      	uxth	r3, r3
 8010336:	00db      	lsls	r3, r3, #3
 8010338:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8010340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010342:	2200      	movs	r2, #0
 8010344:	701a      	strb	r2, [r3, #0]
 8010346:	2200      	movs	r2, #0
 8010348:	705a      	strb	r2, [r3, #1]
 801034a:	2200      	movs	r2, #0
 801034c:	709a      	strb	r2, [r3, #2]
 801034e:	2200      	movs	r2, #0
 8010350:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010354:	8afa      	ldrh	r2, [r7, #22]
 8010356:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010358:	8afa      	ldrh	r2, [r7, #22]
 801035a:	8b7b      	ldrh	r3, [r7, #26]
 801035c:	4413      	add	r3, r2
 801035e:	b29a      	uxth	r2, r3
 8010360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010362:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	88db      	ldrh	r3, [r3, #6]
 8010368:	b29b      	uxth	r3, r3
 801036a:	8afa      	ldrh	r2, [r7, #22]
 801036c:	429a      	cmp	r2, r3
 801036e:	d902      	bls.n	8010376 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010370:	f04f 33ff 	mov.w	r3, #4294967295
 8010374:	e106      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	627b      	str	r3, [r7, #36]	@ 0x24
 801037c:	e068      	b.n	8010450 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010386:	889b      	ldrh	r3, [r3, #4]
 8010388:	b29a      	uxth	r2, r3
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	889b      	ldrh	r3, [r3, #4]
 801038e:	b29b      	uxth	r3, r3
 8010390:	429a      	cmp	r2, r3
 8010392:	d235      	bcs.n	8010400 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010398:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801039a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801039c:	2b00      	cmp	r3, #0
 801039e:	d020      	beq.n	80103e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	889b      	ldrh	r3, [r3, #4]
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a8:	88db      	ldrh	r3, [r3, #6]
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d307      	bcc.n	80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80103b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b2:	88db      	ldrh	r3, [r3, #6]
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	889b      	ldrh	r3, [r3, #4]
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	429a      	cmp	r2, r3
 80103be:	d902      	bls.n	80103c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103c0:	f04f 33ff 	mov.w	r3, #4294967295
 80103c4:	e0de      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80103c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103c8:	68ba      	ldr	r2, [r7, #8]
 80103ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80103cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ce:	88db      	ldrh	r3, [r3, #6]
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d4:	889b      	ldrh	r3, [r3, #4]
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	429a      	cmp	r2, r3
 80103da:	d03d      	beq.n	8010458 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80103dc:	2300      	movs	r3, #0
 80103de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80103e0:	e03a      	b.n	8010458 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80103e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e4:	88db      	ldrh	r3, [r3, #6]
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	889b      	ldrh	r3, [r3, #4]
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d902      	bls.n	80103f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103f2:	f04f 33ff 	mov.w	r3, #4294967295
 80103f6:	e0c5      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	605a      	str	r2, [r3, #4]
      break;
 80103fe:	e02b      	b.n	8010458 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010402:	889b      	ldrh	r3, [r3, #4]
 8010404:	b29a      	uxth	r2, r3
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	889b      	ldrh	r3, [r3, #4]
 801040a:	b29b      	uxth	r3, r3
 801040c:	429a      	cmp	r2, r3
 801040e:	d102      	bne.n	8010416 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010410:	f04f 33ff 	mov.w	r3, #4294967295
 8010414:	e0b6      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010418:	889b      	ldrh	r3, [r3, #4]
 801041a:	b29a      	uxth	r2, r3
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	88db      	ldrh	r3, [r3, #6]
 8010420:	b29b      	uxth	r3, r3
 8010422:	429a      	cmp	r2, r3
 8010424:	d202      	bcs.n	801042c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010426:	f04f 33ff 	mov.w	r3, #4294967295
 801042a:	e0ab      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801042c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801042e:	2b00      	cmp	r3, #0
 8010430:	d009      	beq.n	8010446 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010434:	88db      	ldrh	r3, [r3, #6]
 8010436:	b29a      	uxth	r2, r3
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	889b      	ldrh	r3, [r3, #4]
 801043c:	b29b      	uxth	r3, r3
 801043e:	429a      	cmp	r2, r3
 8010440:	d001      	beq.n	8010446 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010442:	2300      	movs	r3, #0
 8010444:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8010450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010452:	2b00      	cmp	r3, #0
 8010454:	d193      	bne.n	801037e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010456:	e000      	b.n	801045a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010458:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801045a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801045c:	2b00      	cmp	r3, #0
 801045e:	d12d      	bne.n	80104bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010462:	2b00      	cmp	r3, #0
 8010464:	d01c      	beq.n	80104a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010468:	88db      	ldrh	r3, [r3, #6]
 801046a:	b29a      	uxth	r2, r3
 801046c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046e:	889b      	ldrh	r3, [r3, #4]
 8010470:	b29b      	uxth	r3, r3
 8010472:	429a      	cmp	r2, r3
 8010474:	d906      	bls.n	8010484 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010476:	4b45      	ldr	r3, [pc, #276]	@ (801058c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010478:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801047c:	4944      	ldr	r1, [pc, #272]	@ (8010590 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801047e:	4845      	ldr	r0, [pc, #276]	@ (8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010480:	f000 feb6 	bl	80111f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010486:	68ba      	ldr	r2, [r7, #8]
 8010488:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801048a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801048c:	88db      	ldrh	r3, [r3, #6]
 801048e:	b29a      	uxth	r2, r3
 8010490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010492:	889b      	ldrh	r3, [r3, #4]
 8010494:	b29b      	uxth	r3, r3
 8010496:	429a      	cmp	r2, r3
 8010498:	d010      	beq.n	80104bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801049a:	2300      	movs	r3, #0
 801049c:	623b      	str	r3, [r7, #32]
 801049e:	e00d      	b.n	80104bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d006      	beq.n	80104b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80104a8:	4b38      	ldr	r3, [pc, #224]	@ (801058c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80104aa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80104ae:	493a      	ldr	r1, [pc, #232]	@ (8010598 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80104b0:	4838      	ldr	r0, [pc, #224]	@ (8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80104b2:	f000 fe9d 	bl	80111f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d105      	bne.n	80104ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	7f9b      	ldrb	r3, [r3, #30]
 80104c6:	f003 0301 	and.w	r3, r3, #1
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d059      	beq.n	8010582 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d04f      	beq.n	8010574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d006      	beq.n	80104ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	889b      	ldrh	r3, [r3, #4]
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80104ea:	2300      	movs	r3, #0
 80104ec:	623b      	str	r3, [r7, #32]
 80104ee:	e041      	b.n	8010574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80104f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80104f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80104fa:	e012      	b.n	8010522 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80104fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8010502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010504:	88db      	ldrh	r3, [r3, #6]
 8010506:	b29a      	uxth	r2, r3
 8010508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050a:	889b      	ldrh	r3, [r3, #4]
 801050c:	b29b      	uxth	r3, r3
 801050e:	429a      	cmp	r2, r3
 8010510:	d002      	beq.n	8010518 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	623b      	str	r3, [r7, #32]
            break;
 8010516:	e007      	b.n	8010528 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801051c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1e9      	bne.n	80104fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010528:	6a3b      	ldr	r3, [r7, #32]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d022      	beq.n	8010574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d106      	bne.n	8010544 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010536:	4b15      	ldr	r3, [pc, #84]	@ (801058c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010538:	f240 12df 	movw	r2, #479	@ 0x1df
 801053c:	4917      	ldr	r1, [pc, #92]	@ (801059c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801053e:	4815      	ldr	r0, [pc, #84]	@ (8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010540:	f000 fe56 	bl	80111f0 <iprintf>
          LWIP_ASSERT("sanity check",
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801054c:	429a      	cmp	r2, r3
 801054e:	d106      	bne.n	801055e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010550:	4b0e      	ldr	r3, [pc, #56]	@ (801058c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010552:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010556:	4911      	ldr	r1, [pc, #68]	@ (801059c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010558:	480e      	ldr	r0, [pc, #56]	@ (8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801055a:	f000 fe49 	bl	80111f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801055e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d006      	beq.n	8010574 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010566:	4b09      	ldr	r3, [pc, #36]	@ (801058c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010568:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801056c:	490c      	ldr	r1, [pc, #48]	@ (80105a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801056e:	4809      	ldr	r0, [pc, #36]	@ (8010594 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010570:	f000 fe3e 	bl	80111f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010574:	6a3b      	ldr	r3, [r7, #32]
 8010576:	2b00      	cmp	r3, #0
 8010578:	bf14      	ite	ne
 801057a:	2301      	movne	r3, #1
 801057c:	2300      	moveq	r3, #0
 801057e:	b2db      	uxtb	r3, r3
 8010580:	e000      	b.n	8010584 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3730      	adds	r7, #48	@ 0x30
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	080148e0 	.word	0x080148e0
 8010590:	080149c4 	.word	0x080149c4
 8010594:	08014928 	.word	0x08014928
 8010598:	080149e4 	.word	0x080149e4
 801059c:	08014a1c 	.word	0x08014a1c
 80105a0:	08014a2c 	.word	0x08014a2c

080105a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b08e      	sub	sp, #56	@ 0x38
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80105b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	f003 030f 	and.w	r3, r3, #15
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b14      	cmp	r3, #20
 80105c2:	f040 8171 	bne.w	80108a8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80105c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c8:	88db      	ldrh	r3, [r3, #6]
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7f6 fe1f 	bl	8007210 <lwip_htons>
 80105d2:	4603      	mov	r3, r0
 80105d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105d8:	b29b      	uxth	r3, r3
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80105de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e0:	885b      	ldrh	r3, [r3, #2]
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f6 fe13 	bl	8007210 <lwip_htons>
 80105ea:	4603      	mov	r3, r0
 80105ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80105ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 030f 	and.w	r3, r3, #15
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80105fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010602:	b29b      	uxth	r3, r3
 8010604:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010606:	429a      	cmp	r2, r3
 8010608:	f0c0 8150 	bcc.w	80108ac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801060c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010610:	b29b      	uxth	r3, r3
 8010612:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010614:	1ad3      	subs	r3, r2, r3
 8010616:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7f8 fa75 	bl	8008b08 <pbuf_clen>
 801061e:	4603      	mov	r3, r0
 8010620:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010622:	4b8c      	ldr	r3, [pc, #560]	@ (8010854 <ip4_reass+0x2b0>)
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	8c3b      	ldrh	r3, [r7, #32]
 801062a:	4413      	add	r3, r2
 801062c:	2b0a      	cmp	r3, #10
 801062e:	dd10      	ble.n	8010652 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010630:	8c3b      	ldrh	r3, [r7, #32]
 8010632:	4619      	mov	r1, r3
 8010634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010636:	f7ff fd81 	bl	801013c <ip_reass_remove_oldest_datagram>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	f000 8137 	beq.w	80108b0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010642:	4b84      	ldr	r3, [pc, #528]	@ (8010854 <ip4_reass+0x2b0>)
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	8c3b      	ldrh	r3, [r7, #32]
 801064a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801064c:	2b0a      	cmp	r3, #10
 801064e:	f300 812f 	bgt.w	80108b0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010652:	4b81      	ldr	r3, [pc, #516]	@ (8010858 <ip4_reass+0x2b4>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	633b      	str	r3, [r7, #48]	@ 0x30
 8010658:	e015      	b.n	8010686 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801065a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065c:	695a      	ldr	r2, [r3, #20]
 801065e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	429a      	cmp	r2, r3
 8010664:	d10c      	bne.n	8010680 <ip4_reass+0xdc>
 8010666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010668:	699a      	ldr	r2, [r3, #24]
 801066a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	429a      	cmp	r2, r3
 8010670:	d106      	bne.n	8010680 <ip4_reass+0xdc>
 8010672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010674:	899a      	ldrh	r2, [r3, #12]
 8010676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010678:	889b      	ldrh	r3, [r3, #4]
 801067a:	b29b      	uxth	r3, r3
 801067c:	429a      	cmp	r2, r3
 801067e:	d006      	beq.n	801068e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	633b      	str	r3, [r7, #48]	@ 0x30
 8010686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1e6      	bne.n	801065a <ip4_reass+0xb6>
 801068c:	e000      	b.n	8010690 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801068e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010692:	2b00      	cmp	r3, #0
 8010694:	d109      	bne.n	80106aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010696:	8c3b      	ldrh	r3, [r7, #32]
 8010698:	4619      	mov	r1, r3
 801069a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801069c:	f7ff fdb0 	bl	8010200 <ip_reass_enqueue_new_datagram>
 80106a0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80106a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d11c      	bne.n	80106e2 <ip4_reass+0x13e>
      goto nullreturn;
 80106a8:	e105      	b.n	80108b6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80106aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ac:	88db      	ldrh	r3, [r3, #6]
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7f6 fdad 	bl	8007210 <lwip_htons>
 80106b6:	4603      	mov	r3, r0
 80106b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d110      	bne.n	80106e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80106c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c2:	89db      	ldrh	r3, [r3, #14]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7f6 fda3 	bl	8007210 <lwip_htons>
 80106ca:	4603      	mov	r3, r0
 80106cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d006      	beq.n	80106e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80106d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106d6:	3308      	adds	r3, #8
 80106d8:	2214      	movs	r2, #20
 80106da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106dc:	4618      	mov	r0, r3
 80106de:	f000 fe62 	bl	80113a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80106e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e4:	88db      	ldrh	r3, [r3, #6]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	f003 0320 	and.w	r3, r3, #32
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	bf0c      	ite	eq
 80106f0:	2301      	moveq	r3, #1
 80106f2:	2300      	movne	r3, #0
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00e      	beq.n	801071c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80106fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010702:	4413      	add	r3, r2
 8010704:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010706:	8b7a      	ldrh	r2, [r7, #26]
 8010708:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801070a:	429a      	cmp	r2, r3
 801070c:	f0c0 80a0 	bcc.w	8010850 <ip4_reass+0x2ac>
 8010710:	8b7b      	ldrh	r3, [r7, #26]
 8010712:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010716:	4293      	cmp	r3, r2
 8010718:	f200 809a 	bhi.w	8010850 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801071c:	69fa      	ldr	r2, [r7, #28]
 801071e:	6879      	ldr	r1, [r7, #4]
 8010720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010722:	f7ff fdd5 	bl	80102d0 <ip_reass_chain_frag_into_datagram_and_validate>
 8010726:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072e:	f000 809b 	beq.w	8010868 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010732:	4b48      	ldr	r3, [pc, #288]	@ (8010854 <ip4_reass+0x2b0>)
 8010734:	881a      	ldrh	r2, [r3, #0]
 8010736:	8c3b      	ldrh	r3, [r7, #32]
 8010738:	4413      	add	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	4b45      	ldr	r3, [pc, #276]	@ (8010854 <ip4_reass+0x2b0>)
 801073e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00d      	beq.n	8010762 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010746:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801074a:	4413      	add	r3, r2
 801074c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801074e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010750:	8a7a      	ldrh	r2, [r7, #18]
 8010752:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010756:	7f9b      	ldrb	r3, [r3, #30]
 8010758:	f043 0301 	orr.w	r3, r3, #1
 801075c:	b2da      	uxtb	r2, r3
 801075e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010760:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d171      	bne.n	801084c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801076a:	8b9b      	ldrh	r3, [r3, #28]
 801076c:	3314      	adds	r3, #20
 801076e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801077a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010784:	3308      	adds	r3, #8
 8010786:	2214      	movs	r2, #20
 8010788:	4619      	mov	r1, r3
 801078a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801078c:	f000 fe0b 	bl	80113a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010790:	8a3b      	ldrh	r3, [r7, #16]
 8010792:	4618      	mov	r0, r3
 8010794:	f7f6 fd3c 	bl	8007210 <lwip_htons>
 8010798:	4603      	mov	r3, r0
 801079a:	461a      	mov	r2, r3
 801079c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80107a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a2:	2200      	movs	r2, #0
 80107a4:	719a      	strb	r2, [r3, #6]
 80107a6:	2200      	movs	r2, #0
 80107a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80107aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ac:	2200      	movs	r2, #0
 80107ae:	729a      	strb	r2, [r3, #10]
 80107b0:	2200      	movs	r2, #0
 80107b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80107b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80107ba:	e00d      	b.n	80107d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80107bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80107c2:	2114      	movs	r1, #20
 80107c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80107c6:	f7f8 f88b 	bl	80088e0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80107ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7f8 f9db 	bl	8008b88 <pbuf_cat>
      r = iprh->next_pbuf;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80107d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1ee      	bne.n	80107bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80107de:	4b1e      	ldr	r3, [pc, #120]	@ (8010858 <ip4_reass+0x2b4>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d102      	bne.n	80107ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80107e8:	2300      	movs	r3, #0
 80107ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107ec:	e010      	b.n	8010810 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80107ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010858 <ip4_reass+0x2b4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107f4:	e007      	b.n	8010806 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80107f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d006      	beq.n	801080e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010808:	2b00      	cmp	r3, #0
 801080a:	d1f4      	bne.n	80107f6 <ip4_reass+0x252>
 801080c:	e000      	b.n	8010810 <ip4_reass+0x26c>
          break;
 801080e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010812:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010814:	f7ff fd2e 	bl	8010274 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7f8 f975 	bl	8008b08 <pbuf_clen>
 801081e:	4603      	mov	r3, r0
 8010820:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010822:	4b0c      	ldr	r3, [pc, #48]	@ (8010854 <ip4_reass+0x2b0>)
 8010824:	881b      	ldrh	r3, [r3, #0]
 8010826:	8c3a      	ldrh	r2, [r7, #32]
 8010828:	429a      	cmp	r2, r3
 801082a:	d906      	bls.n	801083a <ip4_reass+0x296>
 801082c:	4b0b      	ldr	r3, [pc, #44]	@ (801085c <ip4_reass+0x2b8>)
 801082e:	f240 229b 	movw	r2, #667	@ 0x29b
 8010832:	490b      	ldr	r1, [pc, #44]	@ (8010860 <ip4_reass+0x2bc>)
 8010834:	480b      	ldr	r0, [pc, #44]	@ (8010864 <ip4_reass+0x2c0>)
 8010836:	f000 fcdb 	bl	80111f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801083a:	4b06      	ldr	r3, [pc, #24]	@ (8010854 <ip4_reass+0x2b0>)
 801083c:	881a      	ldrh	r2, [r3, #0]
 801083e:	8c3b      	ldrh	r3, [r7, #32]
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	b29a      	uxth	r2, r3
 8010844:	4b03      	ldr	r3, [pc, #12]	@ (8010854 <ip4_reass+0x2b0>)
 8010846:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	e038      	b.n	80108be <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801084c:	2300      	movs	r3, #0
 801084e:	e036      	b.n	80108be <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010850:	bf00      	nop
 8010852:	e00a      	b.n	801086a <ip4_reass+0x2c6>
 8010854:	2000bee4 	.word	0x2000bee4
 8010858:	2000bee0 	.word	0x2000bee0
 801085c:	080148e0 	.word	0x080148e0
 8010860:	08014a50 	.word	0x08014a50
 8010864:	08014928 	.word	0x08014928
    goto nullreturn_ipr;
 8010868:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801086a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801086c:	2b00      	cmp	r3, #0
 801086e:	d106      	bne.n	801087e <ip4_reass+0x2da>
 8010870:	4b15      	ldr	r3, [pc, #84]	@ (80108c8 <ip4_reass+0x324>)
 8010872:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010876:	4915      	ldr	r1, [pc, #84]	@ (80108cc <ip4_reass+0x328>)
 8010878:	4815      	ldr	r0, [pc, #84]	@ (80108d0 <ip4_reass+0x32c>)
 801087a:	f000 fcb9 	bl	80111f0 <iprintf>
  if (ipr->p == NULL) {
 801087e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d116      	bne.n	80108b4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010886:	4b13      	ldr	r3, [pc, #76]	@ (80108d4 <ip4_reass+0x330>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801088c:	429a      	cmp	r2, r3
 801088e:	d006      	beq.n	801089e <ip4_reass+0x2fa>
 8010890:	4b0d      	ldr	r3, [pc, #52]	@ (80108c8 <ip4_reass+0x324>)
 8010892:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010896:	4910      	ldr	r1, [pc, #64]	@ (80108d8 <ip4_reass+0x334>)
 8010898:	480d      	ldr	r0, [pc, #52]	@ (80108d0 <ip4_reass+0x32c>)
 801089a:	f000 fca9 	bl	80111f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801089e:	2100      	movs	r1, #0
 80108a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80108a2:	f7ff fce7 	bl	8010274 <ip_reass_dequeue_datagram>
 80108a6:	e006      	b.n	80108b6 <ip4_reass+0x312>
    goto nullreturn;
 80108a8:	bf00      	nop
 80108aa:	e004      	b.n	80108b6 <ip4_reass+0x312>
    goto nullreturn;
 80108ac:	bf00      	nop
 80108ae:	e002      	b.n	80108b6 <ip4_reass+0x312>
      goto nullreturn;
 80108b0:	bf00      	nop
 80108b2:	e000      	b.n	80108b6 <ip4_reass+0x312>
  }

nullreturn:
 80108b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f7f8 f898 	bl	80089ec <pbuf_free>
  return NULL;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3738      	adds	r7, #56	@ 0x38
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	080148e0 	.word	0x080148e0
 80108cc:	08014a6c 	.word	0x08014a6c
 80108d0:	08014928 	.word	0x08014928
 80108d4:	2000bee0 	.word	0x2000bee0
 80108d8:	08014a78 	.word	0x08014a78

080108dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80108e0:	2005      	movs	r0, #5
 80108e2:	f7f7 f969 	bl	8007bb8 <memp_malloc>
 80108e6:	4603      	mov	r3, r0
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	bd80      	pop	{r7, pc}

080108ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <ip_frag_free_pbuf_custom_ref+0x1c>
 80108fa:	4b07      	ldr	r3, [pc, #28]	@ (8010918 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80108fc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010900:	4906      	ldr	r1, [pc, #24]	@ (801091c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010902:	4807      	ldr	r0, [pc, #28]	@ (8010920 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010904:	f000 fc74 	bl	80111f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010908:	6879      	ldr	r1, [r7, #4]
 801090a:	2005      	movs	r0, #5
 801090c:	f7f7 f9ca 	bl	8007ca4 <memp_free>
}
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	080148e0 	.word	0x080148e0
 801091c:	08014a98 	.word	0x08014a98
 8010920:	08014928 	.word	0x08014928

08010924 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d106      	bne.n	8010944 <ipfrag_free_pbuf_custom+0x20>
 8010936:	4b11      	ldr	r3, [pc, #68]	@ (801097c <ipfrag_free_pbuf_custom+0x58>)
 8010938:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801093c:	4910      	ldr	r1, [pc, #64]	@ (8010980 <ipfrag_free_pbuf_custom+0x5c>)
 801093e:	4811      	ldr	r0, [pc, #68]	@ (8010984 <ipfrag_free_pbuf_custom+0x60>)
 8010940:	f000 fc56 	bl	80111f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	429a      	cmp	r2, r3
 801094a:	d006      	beq.n	801095a <ipfrag_free_pbuf_custom+0x36>
 801094c:	4b0b      	ldr	r3, [pc, #44]	@ (801097c <ipfrag_free_pbuf_custom+0x58>)
 801094e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010952:	490d      	ldr	r1, [pc, #52]	@ (8010988 <ipfrag_free_pbuf_custom+0x64>)
 8010954:	480b      	ldr	r0, [pc, #44]	@ (8010984 <ipfrag_free_pbuf_custom+0x60>)
 8010956:	f000 fc4b 	bl	80111f0 <iprintf>
  if (pcr->original != NULL) {
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	695b      	ldr	r3, [r3, #20]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d004      	beq.n	801096c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	4618      	mov	r0, r3
 8010968:	f7f8 f840 	bl	80089ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f7ff ffbd 	bl	80108ec <ip_frag_free_pbuf_custom_ref>
}
 8010972:	bf00      	nop
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	080148e0 	.word	0x080148e0
 8010980:	08014aa4 	.word	0x08014aa4
 8010984:	08014928 	.word	0x08014928
 8010988:	08014ab0 	.word	0x08014ab0

0801098c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b094      	sub	sp, #80	@ 0x50
 8010990:	af02      	add	r7, sp, #8
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010998:	2300      	movs	r3, #0
 801099a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80109a2:	3b14      	subs	r3, #20
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	da00      	bge.n	80109aa <ip4_frag+0x1e>
 80109a8:	3307      	adds	r3, #7
 80109aa:	10db      	asrs	r3, r3, #3
 80109ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80109ae:	2314      	movs	r3, #20
 80109b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80109b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80109bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	f003 030f 	and.w	r3, r3, #15
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	2b14      	cmp	r3, #20
 80109cc:	d002      	beq.n	80109d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80109ce:	f06f 0305 	mvn.w	r3, #5
 80109d2:	e110      	b.n	8010bf6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	895b      	ldrh	r3, [r3, #10]
 80109d8:	2b13      	cmp	r3, #19
 80109da:	d809      	bhi.n	80109f0 <ip4_frag+0x64>
 80109dc:	4b88      	ldr	r3, [pc, #544]	@ (8010c00 <ip4_frag+0x274>)
 80109de:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80109e2:	4988      	ldr	r1, [pc, #544]	@ (8010c04 <ip4_frag+0x278>)
 80109e4:	4888      	ldr	r0, [pc, #544]	@ (8010c08 <ip4_frag+0x27c>)
 80109e6:	f000 fc03 	bl	80111f0 <iprintf>
 80109ea:	f06f 0305 	mvn.w	r3, #5
 80109ee:	e102      	b.n	8010bf6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80109f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f2:	88db      	ldrh	r3, [r3, #6]
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7f6 fc0a 	bl	8007210 <lwip_htons>
 80109fc:	4603      	mov	r3, r0
 80109fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010a00:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a06:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010a0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	891b      	ldrh	r3, [r3, #8]
 8010a16:	3b14      	subs	r3, #20
 8010a18:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010a1c:	e0e1      	b.n	8010be2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010a1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010a20:	00db      	lsls	r3, r3, #3
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	bf28      	it	cs
 8010a2c:	4613      	movcs	r3, r2
 8010a2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010a30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a34:	2114      	movs	r1, #20
 8010a36:	200e      	movs	r0, #14
 8010a38:	f7f7 fcf4 	bl	8008424 <pbuf_alloc>
 8010a3c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 80d5 	beq.w	8010bf0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a48:	895b      	ldrh	r3, [r3, #10]
 8010a4a:	2b13      	cmp	r3, #19
 8010a4c:	d806      	bhi.n	8010a5c <ip4_frag+0xd0>
 8010a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8010c00 <ip4_frag+0x274>)
 8010a50:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010a54:	496d      	ldr	r1, [pc, #436]	@ (8010c0c <ip4_frag+0x280>)
 8010a56:	486c      	ldr	r0, [pc, #432]	@ (8010c08 <ip4_frag+0x27c>)
 8010a58:	f000 fbca 	bl	80111f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	2214      	movs	r2, #20
 8010a62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 fc9e 	bl	80113a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010a70:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a72:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8010a76:	e064      	b.n	8010b42 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	895a      	ldrh	r2, [r3, #10]
 8010a7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	895b      	ldrh	r3, [r3, #10]
 8010a86:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d906      	bls.n	8010a9a <ip4_frag+0x10e>
 8010a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8010c00 <ip4_frag+0x274>)
 8010a8e:	f240 322d 	movw	r2, #813	@ 0x32d
 8010a92:	495f      	ldr	r1, [pc, #380]	@ (8010c10 <ip4_frag+0x284>)
 8010a94:	485c      	ldr	r0, [pc, #368]	@ (8010c08 <ip4_frag+0x27c>)
 8010a96:	f000 fbab 	bl	80111f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010a9a:	8bfa      	ldrh	r2, [r7, #30]
 8010a9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	bf28      	it	cs
 8010aa4:	4613      	movcs	r3, r2
 8010aa6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010aaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d105      	bne.n	8010abe <ip4_frag+0x132>
        poff = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]
        continue;
 8010abc:	e041      	b.n	8010b42 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010abe:	f7ff ff0d 	bl	80108dc <ip_frag_alloc_pbuf_custom_ref>
 8010ac2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010ac4:	69bb      	ldr	r3, [r7, #24]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d103      	bne.n	8010ad2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010aca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010acc:	f7f7 ff8e 	bl	80089ec <pbuf_free>
        goto memerr;
 8010ad0:	e08f      	b.n	8010bf2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010ad2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010ad8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010ada:	4413      	add	r3, r2
 8010adc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010ae0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010ae4:	9201      	str	r2, [sp, #4]
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2241      	movs	r2, #65	@ 0x41
 8010aec:	2000      	movs	r0, #0
 8010aee:	f7f7 fdc3 	bl	8008678 <pbuf_alloced_custom>
 8010af2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010afa:	69b8      	ldr	r0, [r7, #24]
 8010afc:	f7ff fef6 	bl	80108ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010b00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b02:	f7f7 ff73 	bl	80089ec <pbuf_free>
        goto memerr;
 8010b06:	e074      	b.n	8010bf2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f7f8 f815 	bl	8008b38 <pbuf_ref>
      pcr->original = p;
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	4a3f      	ldr	r2, [pc, #252]	@ (8010c14 <ip4_frag+0x288>)
 8010b18:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010b1a:	6979      	ldr	r1, [r7, #20]
 8010b1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b1e:	f7f8 f833 	bl	8008b88 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010b22:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010b26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010b30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d004      	beq.n	8010b42 <ip4_frag+0x1b6>
        poff = 0;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010b42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d196      	bne.n	8010a78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010b4a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010b4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b50:	4413      	add	r3, r2
 8010b52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010b58:	f1a3 0213 	sub.w	r2, r3, #19
 8010b5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b60:	429a      	cmp	r2, r3
 8010b62:	bfcc      	ite	gt
 8010b64:	2301      	movgt	r3, #1
 8010b66:	2300      	movle	r3, #0
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010b6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8010b76:	6a3b      	ldr	r3, [r7, #32]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d002      	beq.n	8010b82 <ip4_frag+0x1f6>
 8010b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d003      	beq.n	8010b8a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010b82:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010b84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010b88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010b8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f6 fb3f 	bl	8007210 <lwip_htons>
 8010b92:	4603      	mov	r3, r0
 8010b94:	461a      	mov	r2, r3
 8010b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b98:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010b9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010b9c:	3314      	adds	r3, #20
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7f6 fb35 	bl	8007210 <lwip_htons>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	461a      	mov	r2, r3
 8010baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	729a      	strb	r2, [r3, #10]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	695b      	ldr	r3, [r3, #20]
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010bc0:	68b8      	ldr	r0, [r7, #8]
 8010bc2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010bc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010bc6:	f7f7 ff11 	bl	80089ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010bca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010bce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8010bd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010bda:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010bdc:	4413      	add	r3, r2
 8010bde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8010be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f47f af19 	bne.w	8010a1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	e002      	b.n	8010bf6 <ip4_frag+0x26a>
      goto memerr;
 8010bf0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3748      	adds	r7, #72	@ 0x48
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	080148e0 	.word	0x080148e0
 8010c04:	08014abc 	.word	0x08014abc
 8010c08:	08014928 	.word	0x08014928
 8010c0c:	08014ad8 	.word	0x08014ad8
 8010c10:	08014af8 	.word	0x08014af8
 8010c14:	08010925 	.word	0x08010925

08010c18 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010c22:	230e      	movs	r3, #14
 8010c24:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	895b      	ldrh	r3, [r3, #10]
 8010c2a:	2b0e      	cmp	r3, #14
 8010c2c:	d96e      	bls.n	8010d0c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	7bdb      	ldrb	r3, [r3, #15]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	7b1a      	ldrb	r2, [r3, #12]
 8010c4e:	7b5b      	ldrb	r3, [r3, #13]
 8010c50:	021b      	lsls	r3, r3, #8
 8010c52:	4313      	orrs	r3, r2
 8010c54:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	f003 0301 	and.w	r3, r3, #1
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d023      	beq.n	8010caa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d10f      	bne.n	8010c8a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	785b      	ldrb	r3, [r3, #1]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d11b      	bne.n	8010caa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010c76:	2b5e      	cmp	r3, #94	@ 0x5e
 8010c78:	d117      	bne.n	8010caa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	7b5b      	ldrb	r3, [r3, #13]
 8010c7e:	f043 0310 	orr.w	r3, r3, #16
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	735a      	strb	r2, [r3, #13]
 8010c88:	e00f      	b.n	8010caa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	2206      	movs	r2, #6
 8010c8e:	4928      	ldr	r1, [pc, #160]	@ (8010d30 <ethernet_input+0x118>)
 8010c90:	4618      	mov	r0, r3
 8010c92:	f000 fb02 	bl	801129a <memcmp>
 8010c96:	4603      	mov	r3, r0
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d106      	bne.n	8010caa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	7b5b      	ldrb	r3, [r3, #13]
 8010ca0:	f043 0308 	orr.w	r3, r3, #8
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010caa:	89fb      	ldrh	r3, [r7, #14]
 8010cac:	2b08      	cmp	r3, #8
 8010cae:	d003      	beq.n	8010cb8 <ethernet_input+0xa0>
 8010cb0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8010cb4:	d014      	beq.n	8010ce0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010cb6:	e032      	b.n	8010d1e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010cbe:	f003 0308 	and.w	r3, r3, #8
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d024      	beq.n	8010d10 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010cc6:	8afb      	ldrh	r3, [r7, #22]
 8010cc8:	4619      	mov	r1, r3
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7f7 fe08 	bl	80088e0 <pbuf_remove_header>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d11e      	bne.n	8010d14 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010cd6:	6839      	ldr	r1, [r7, #0]
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7fe ff21 	bl	800fb20 <ip4_input>
      break;
 8010cde:	e013      	b.n	8010d08 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ce6:	f003 0308 	and.w	r3, r3, #8
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d014      	beq.n	8010d18 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010cee:	8afb      	ldrh	r3, [r7, #22]
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7f7 fdf4 	bl	80088e0 <pbuf_remove_header>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10e      	bne.n	8010d1c <ethernet_input+0x104>
        etharp_input(p, netif);
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f7fe f8c1 	bl	800ee88 <etharp_input>
      break;
 8010d06:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e00c      	b.n	8010d26 <ethernet_input+0x10e>
    goto free_and_return;
 8010d0c:	bf00      	nop
 8010d0e:	e006      	b.n	8010d1e <ethernet_input+0x106>
        goto free_and_return;
 8010d10:	bf00      	nop
 8010d12:	e004      	b.n	8010d1e <ethernet_input+0x106>
        goto free_and_return;
 8010d14:	bf00      	nop
 8010d16:	e002      	b.n	8010d1e <ethernet_input+0x106>
        goto free_and_return;
 8010d18:	bf00      	nop
 8010d1a:	e000      	b.n	8010d1e <ethernet_input+0x106>
        goto free_and_return;
 8010d1c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7f7 fe64 	bl	80089ec <pbuf_free>
  return ERR_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3718      	adds	r7, #24
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	08014ccc 	.word	0x08014ccc

08010d34 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
 8010d40:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010d42:	8c3b      	ldrh	r3, [r7, #32]
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7f6 fa63 	bl	8007210 <lwip_htons>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010d4e:	210e      	movs	r1, #14
 8010d50:	68b8      	ldr	r0, [r7, #8]
 8010d52:	f7f7 fdb5 	bl	80088c0 <pbuf_add_header>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d125      	bne.n	8010da8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	8afa      	ldrh	r2, [r7, #22]
 8010d66:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	2206      	movs	r2, #6
 8010d6c:	6839      	ldr	r1, [r7, #0]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fb19 	bl	80113a6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	3306      	adds	r3, #6
 8010d78:	2206      	movs	r2, #6
 8010d7a:	6879      	ldr	r1, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 fb12 	bl	80113a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010d88:	2b06      	cmp	r3, #6
 8010d8a:	d006      	beq.n	8010d9a <ethernet_output+0x66>
 8010d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010db8 <ethernet_output+0x84>)
 8010d8e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8010d92:	490a      	ldr	r1, [pc, #40]	@ (8010dbc <ethernet_output+0x88>)
 8010d94:	480a      	ldr	r0, [pc, #40]	@ (8010dc0 <ethernet_output+0x8c>)
 8010d96:	f000 fa2b 	bl	80111f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	699b      	ldr	r3, [r3, #24]
 8010d9e:	68b9      	ldr	r1, [r7, #8]
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	4798      	blx	r3
 8010da4:	4603      	mov	r3, r0
 8010da6:	e002      	b.n	8010dae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010da8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010daa:	f06f 0301 	mvn.w	r3, #1
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3718      	adds	r7, #24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	08014b08 	.word	0x08014b08
 8010dbc:	08014b40 	.word	0x08014b40
 8010dc0:	08014b74 	.word	0x08014b74

08010dc4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b086      	sub	sp, #24
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	60bb      	str	r3, [r7, #8]
 8010dd2:	2304      	movs	r3, #4
 8010dd4:	60fb      	str	r3, [r7, #12]
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	613b      	str	r3, [r7, #16]
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8010dde:	f107 0308 	add.w	r3, r7, #8
 8010de2:	2100      	movs	r1, #0
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7f3 fa33 	bl	8004250 <osMessageCreate>
 8010dea:	4602      	mov	r2, r0
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d102      	bne.n	8010dfe <sys_mbox_new+0x3a>
    return ERR_MEM;
 8010df8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dfc:	e000      	b.n	8010e00 <sys_mbox_new+0x3c>

  return ERR_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6839      	ldr	r1, [r7, #0]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7f3 fa40 	bl	80042a0 <osMessagePut>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d102      	bne.n	8010e2c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]
 8010e2a:	e001      	b.n	8010e30 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010e2c:	23ff      	movs	r3, #255	@ 0xff
 8010e2e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b08c      	sub	sp, #48	@ 0x30
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	61f8      	str	r0, [r7, #28]
 8010e44:	61b9      	str	r1, [r7, #24]
 8010e46:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8010e48:	f7f3 f833 	bl	8003eb2 <osKernelSysTick>
 8010e4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d017      	beq.n	8010e84 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	6819      	ldr	r1, [r3, #0]
 8010e58:	f107 0320 	add.w	r3, r7, #32
 8010e5c:	697a      	ldr	r2, [r7, #20]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7f3 fa5e 	bl	8004320 <osMessageGet>

    if(event.status == osEventMessage)
 8010e64:	6a3b      	ldr	r3, [r7, #32]
 8010e66:	2b10      	cmp	r3, #16
 8010e68:	d109      	bne.n	8010e7e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8010e72:	f7f3 f81e 	bl	8003eb2 <osKernelSysTick>
 8010e76:	4602      	mov	r2, r0
 8010e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7a:	1ad3      	subs	r3, r2, r3
 8010e7c:	e019      	b.n	8010eb2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e82:	e016      	b.n	8010eb2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	6819      	ldr	r1, [r3, #0]
 8010e88:	463b      	mov	r3, r7
 8010e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7f3 fa46 	bl	8004320 <osMessageGet>
 8010e94:	f107 0320 	add.w	r3, r7, #32
 8010e98:	463a      	mov	r2, r7
 8010e9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8010ea8:	f7f3 f803 	bl	8003eb2 <osKernelSysTick>
 8010eac:	4602      	mov	r2, r0
 8010eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eb0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3730      	adds	r7, #48	@ 0x30
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010eba:	b480      	push	{r7}
 8010ebc:	b083      	sub	sp, #12
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d101      	bne.n	8010ece <sys_mbox_valid+0x14>
    return 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e000      	b.n	8010ed0 <sys_mbox_valid+0x16>
  else
    return 1;
 8010ece:	2301      	movs	r3, #1
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010ee0:	4803      	ldr	r0, [pc, #12]	@ (8010ef0 <sys_init+0x14>)
 8010ee2:	f7f3 f862 	bl	8003faa <osMutexCreate>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	4a02      	ldr	r2, [pc, #8]	@ (8010ef4 <sys_init+0x18>)
 8010eea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010eec:	bf00      	nop
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	08014cdc 	.word	0x08014cdc
 8010ef4:	2000beec 	.word	0x2000beec

08010ef8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010f00:	2300      	movs	r3, #0
 8010f02:	60bb      	str	r3, [r7, #8]
 8010f04:	2300      	movs	r3, #0
 8010f06:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010f08:	f107 0308 	add.w	r3, r7, #8
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7f3 f84c 	bl	8003faa <osMutexCreate>
 8010f12:	4602      	mov	r2, r0
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010f20:	f04f 33ff 	mov.w	r3, #4294967295
 8010f24:	e000      	b.n	8010f28 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3710      	adds	r7, #16
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7f3 f84b 	bl	8003fdc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8010f46:	bf00      	nop
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f3 f88c 	bl	8004078 <osMutexRelease>
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b08c      	sub	sp, #48	@ 0x30
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
 8010f74:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010f76:	f107 0314 	add.w	r3, r7, #20
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	601a      	str	r2, [r3, #0]
 8010f7e:	605a      	str	r2, [r3, #4]
 8010f80:	609a      	str	r2, [r3, #8]
 8010f82:	60da      	str	r2, [r3, #12]
 8010f84:	611a      	str	r2, [r3, #16]
 8010f86:	615a      	str	r2, [r3, #20]
 8010f88:	619a      	str	r2, [r3, #24]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	617b      	str	r3, [r7, #20]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	61bb      	str	r3, [r7, #24]
 8010f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f94:	b21b      	sxth	r3, r3
 8010f96:	83bb      	strh	r3, [r7, #28]
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8010f9c:	f107 0314 	add.w	r3, r7, #20
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7f2 ff95 	bl	8003ed2 <osThreadCreate>
 8010fa8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3730      	adds	r7, #48	@ 0x30
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
	...

08010fb4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010fb8:	4b04      	ldr	r3, [pc, #16]	@ (8010fcc <sys_arch_protect+0x18>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f3 f80b 	bl	8003fdc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8010fc6:	2301      	movs	r3, #1
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	2000beec 	.word	0x2000beec

08010fd0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010fd8:	4b04      	ldr	r3, [pc, #16]	@ (8010fec <sys_arch_unprotect+0x1c>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7f3 f84b 	bl	8004078 <osMutexRelease>
}
 8010fe2:	bf00      	nop
 8010fe4:	3708      	adds	r7, #8
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	2000beec 	.word	0x2000beec

08010ff0 <rand>:
 8010ff0:	4b16      	ldr	r3, [pc, #88]	@ (801104c <rand+0x5c>)
 8010ff2:	b510      	push	{r4, lr}
 8010ff4:	681c      	ldr	r4, [r3, #0]
 8010ff6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ff8:	b9b3      	cbnz	r3, 8011028 <rand+0x38>
 8010ffa:	2018      	movs	r0, #24
 8010ffc:	f000 fa00 	bl	8011400 <malloc>
 8011000:	4602      	mov	r2, r0
 8011002:	6320      	str	r0, [r4, #48]	@ 0x30
 8011004:	b920      	cbnz	r0, 8011010 <rand+0x20>
 8011006:	4b12      	ldr	r3, [pc, #72]	@ (8011050 <rand+0x60>)
 8011008:	4812      	ldr	r0, [pc, #72]	@ (8011054 <rand+0x64>)
 801100a:	2152      	movs	r1, #82	@ 0x52
 801100c:	f000 f9da 	bl	80113c4 <__assert_func>
 8011010:	4911      	ldr	r1, [pc, #68]	@ (8011058 <rand+0x68>)
 8011012:	4b12      	ldr	r3, [pc, #72]	@ (801105c <rand+0x6c>)
 8011014:	e9c0 1300 	strd	r1, r3, [r0]
 8011018:	4b11      	ldr	r3, [pc, #68]	@ (8011060 <rand+0x70>)
 801101a:	6083      	str	r3, [r0, #8]
 801101c:	230b      	movs	r3, #11
 801101e:	8183      	strh	r3, [r0, #12]
 8011020:	2100      	movs	r1, #0
 8011022:	2001      	movs	r0, #1
 8011024:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011028:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801102a:	480e      	ldr	r0, [pc, #56]	@ (8011064 <rand+0x74>)
 801102c:	690b      	ldr	r3, [r1, #16]
 801102e:	694c      	ldr	r4, [r1, #20]
 8011030:	4a0d      	ldr	r2, [pc, #52]	@ (8011068 <rand+0x78>)
 8011032:	4358      	muls	r0, r3
 8011034:	fb02 0004 	mla	r0, r2, r4, r0
 8011038:	fba3 3202 	umull	r3, r2, r3, r2
 801103c:	3301      	adds	r3, #1
 801103e:	eb40 0002 	adc.w	r0, r0, r2
 8011042:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011046:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801104a:	bd10      	pop	{r4, pc}
 801104c:	2000003c 	.word	0x2000003c
 8011050:	08014ce4 	.word	0x08014ce4
 8011054:	08014cfb 	.word	0x08014cfb
 8011058:	abcd330e 	.word	0xabcd330e
 801105c:	e66d1234 	.word	0xe66d1234
 8011060:	0005deec 	.word	0x0005deec
 8011064:	5851f42d 	.word	0x5851f42d
 8011068:	4c957f2d 	.word	0x4c957f2d

0801106c <std>:
 801106c:	2300      	movs	r3, #0
 801106e:	b510      	push	{r4, lr}
 8011070:	4604      	mov	r4, r0
 8011072:	e9c0 3300 	strd	r3, r3, [r0]
 8011076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801107a:	6083      	str	r3, [r0, #8]
 801107c:	8181      	strh	r1, [r0, #12]
 801107e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011080:	81c2      	strh	r2, [r0, #14]
 8011082:	6183      	str	r3, [r0, #24]
 8011084:	4619      	mov	r1, r3
 8011086:	2208      	movs	r2, #8
 8011088:	305c      	adds	r0, #92	@ 0x5c
 801108a:	f000 f916 	bl	80112ba <memset>
 801108e:	4b0d      	ldr	r3, [pc, #52]	@ (80110c4 <std+0x58>)
 8011090:	6263      	str	r3, [r4, #36]	@ 0x24
 8011092:	4b0d      	ldr	r3, [pc, #52]	@ (80110c8 <std+0x5c>)
 8011094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011096:	4b0d      	ldr	r3, [pc, #52]	@ (80110cc <std+0x60>)
 8011098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801109a:	4b0d      	ldr	r3, [pc, #52]	@ (80110d0 <std+0x64>)
 801109c:	6323      	str	r3, [r4, #48]	@ 0x30
 801109e:	4b0d      	ldr	r3, [pc, #52]	@ (80110d4 <std+0x68>)
 80110a0:	6224      	str	r4, [r4, #32]
 80110a2:	429c      	cmp	r4, r3
 80110a4:	d006      	beq.n	80110b4 <std+0x48>
 80110a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80110aa:	4294      	cmp	r4, r2
 80110ac:	d002      	beq.n	80110b4 <std+0x48>
 80110ae:	33d0      	adds	r3, #208	@ 0xd0
 80110b0:	429c      	cmp	r4, r3
 80110b2:	d105      	bne.n	80110c0 <std+0x54>
 80110b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80110b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110bc:	f000 b970 	b.w	80113a0 <__retarget_lock_init_recursive>
 80110c0:	bd10      	pop	{r4, pc}
 80110c2:	bf00      	nop
 80110c4:	08011215 	.word	0x08011215
 80110c8:	08011237 	.word	0x08011237
 80110cc:	0801126f 	.word	0x0801126f
 80110d0:	08011293 	.word	0x08011293
 80110d4:	2000bef0 	.word	0x2000bef0

080110d8 <stdio_exit_handler>:
 80110d8:	4a02      	ldr	r2, [pc, #8]	@ (80110e4 <stdio_exit_handler+0xc>)
 80110da:	4903      	ldr	r1, [pc, #12]	@ (80110e8 <stdio_exit_handler+0x10>)
 80110dc:	4803      	ldr	r0, [pc, #12]	@ (80110ec <stdio_exit_handler+0x14>)
 80110de:	f000 b869 	b.w	80111b4 <_fwalk_sglue>
 80110e2:	bf00      	nop
 80110e4:	20000030 	.word	0x20000030
 80110e8:	08011c15 	.word	0x08011c15
 80110ec:	20000040 	.word	0x20000040

080110f0 <cleanup_stdio>:
 80110f0:	6841      	ldr	r1, [r0, #4]
 80110f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011124 <cleanup_stdio+0x34>)
 80110f4:	4299      	cmp	r1, r3
 80110f6:	b510      	push	{r4, lr}
 80110f8:	4604      	mov	r4, r0
 80110fa:	d001      	beq.n	8011100 <cleanup_stdio+0x10>
 80110fc:	f000 fd8a 	bl	8011c14 <_fflush_r>
 8011100:	68a1      	ldr	r1, [r4, #8]
 8011102:	4b09      	ldr	r3, [pc, #36]	@ (8011128 <cleanup_stdio+0x38>)
 8011104:	4299      	cmp	r1, r3
 8011106:	d002      	beq.n	801110e <cleanup_stdio+0x1e>
 8011108:	4620      	mov	r0, r4
 801110a:	f000 fd83 	bl	8011c14 <_fflush_r>
 801110e:	68e1      	ldr	r1, [r4, #12]
 8011110:	4b06      	ldr	r3, [pc, #24]	@ (801112c <cleanup_stdio+0x3c>)
 8011112:	4299      	cmp	r1, r3
 8011114:	d004      	beq.n	8011120 <cleanup_stdio+0x30>
 8011116:	4620      	mov	r0, r4
 8011118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801111c:	f000 bd7a 	b.w	8011c14 <_fflush_r>
 8011120:	bd10      	pop	{r4, pc}
 8011122:	bf00      	nop
 8011124:	2000bef0 	.word	0x2000bef0
 8011128:	2000bf58 	.word	0x2000bf58
 801112c:	2000bfc0 	.word	0x2000bfc0

08011130 <global_stdio_init.part.0>:
 8011130:	b510      	push	{r4, lr}
 8011132:	4b0b      	ldr	r3, [pc, #44]	@ (8011160 <global_stdio_init.part.0+0x30>)
 8011134:	4c0b      	ldr	r4, [pc, #44]	@ (8011164 <global_stdio_init.part.0+0x34>)
 8011136:	4a0c      	ldr	r2, [pc, #48]	@ (8011168 <global_stdio_init.part.0+0x38>)
 8011138:	601a      	str	r2, [r3, #0]
 801113a:	4620      	mov	r0, r4
 801113c:	2200      	movs	r2, #0
 801113e:	2104      	movs	r1, #4
 8011140:	f7ff ff94 	bl	801106c <std>
 8011144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011148:	2201      	movs	r2, #1
 801114a:	2109      	movs	r1, #9
 801114c:	f7ff ff8e 	bl	801106c <std>
 8011150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011154:	2202      	movs	r2, #2
 8011156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801115a:	2112      	movs	r1, #18
 801115c:	f7ff bf86 	b.w	801106c <std>
 8011160:	2000c028 	.word	0x2000c028
 8011164:	2000bef0 	.word	0x2000bef0
 8011168:	080110d9 	.word	0x080110d9

0801116c <__sfp_lock_acquire>:
 801116c:	4801      	ldr	r0, [pc, #4]	@ (8011174 <__sfp_lock_acquire+0x8>)
 801116e:	f000 b918 	b.w	80113a2 <__retarget_lock_acquire_recursive>
 8011172:	bf00      	nop
 8011174:	2000c02d 	.word	0x2000c02d

08011178 <__sfp_lock_release>:
 8011178:	4801      	ldr	r0, [pc, #4]	@ (8011180 <__sfp_lock_release+0x8>)
 801117a:	f000 b913 	b.w	80113a4 <__retarget_lock_release_recursive>
 801117e:	bf00      	nop
 8011180:	2000c02d 	.word	0x2000c02d

08011184 <__sinit>:
 8011184:	b510      	push	{r4, lr}
 8011186:	4604      	mov	r4, r0
 8011188:	f7ff fff0 	bl	801116c <__sfp_lock_acquire>
 801118c:	6a23      	ldr	r3, [r4, #32]
 801118e:	b11b      	cbz	r3, 8011198 <__sinit+0x14>
 8011190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011194:	f7ff bff0 	b.w	8011178 <__sfp_lock_release>
 8011198:	4b04      	ldr	r3, [pc, #16]	@ (80111ac <__sinit+0x28>)
 801119a:	6223      	str	r3, [r4, #32]
 801119c:	4b04      	ldr	r3, [pc, #16]	@ (80111b0 <__sinit+0x2c>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1f5      	bne.n	8011190 <__sinit+0xc>
 80111a4:	f7ff ffc4 	bl	8011130 <global_stdio_init.part.0>
 80111a8:	e7f2      	b.n	8011190 <__sinit+0xc>
 80111aa:	bf00      	nop
 80111ac:	080110f1 	.word	0x080110f1
 80111b0:	2000c028 	.word	0x2000c028

080111b4 <_fwalk_sglue>:
 80111b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b8:	4607      	mov	r7, r0
 80111ba:	4688      	mov	r8, r1
 80111bc:	4614      	mov	r4, r2
 80111be:	2600      	movs	r6, #0
 80111c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111c4:	f1b9 0901 	subs.w	r9, r9, #1
 80111c8:	d505      	bpl.n	80111d6 <_fwalk_sglue+0x22>
 80111ca:	6824      	ldr	r4, [r4, #0]
 80111cc:	2c00      	cmp	r4, #0
 80111ce:	d1f7      	bne.n	80111c0 <_fwalk_sglue+0xc>
 80111d0:	4630      	mov	r0, r6
 80111d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d6:	89ab      	ldrh	r3, [r5, #12]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d907      	bls.n	80111ec <_fwalk_sglue+0x38>
 80111dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111e0:	3301      	adds	r3, #1
 80111e2:	d003      	beq.n	80111ec <_fwalk_sglue+0x38>
 80111e4:	4629      	mov	r1, r5
 80111e6:	4638      	mov	r0, r7
 80111e8:	47c0      	blx	r8
 80111ea:	4306      	orrs	r6, r0
 80111ec:	3568      	adds	r5, #104	@ 0x68
 80111ee:	e7e9      	b.n	80111c4 <_fwalk_sglue+0x10>

080111f0 <iprintf>:
 80111f0:	b40f      	push	{r0, r1, r2, r3}
 80111f2:	b507      	push	{r0, r1, r2, lr}
 80111f4:	4906      	ldr	r1, [pc, #24]	@ (8011210 <iprintf+0x20>)
 80111f6:	ab04      	add	r3, sp, #16
 80111f8:	6808      	ldr	r0, [r1, #0]
 80111fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80111fe:	6881      	ldr	r1, [r0, #8]
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	f000 f9dd 	bl	80115c0 <_vfiprintf_r>
 8011206:	b003      	add	sp, #12
 8011208:	f85d eb04 	ldr.w	lr, [sp], #4
 801120c:	b004      	add	sp, #16
 801120e:	4770      	bx	lr
 8011210:	2000003c 	.word	0x2000003c

08011214 <__sread>:
 8011214:	b510      	push	{r4, lr}
 8011216:	460c      	mov	r4, r1
 8011218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801121c:	f000 f878 	bl	8011310 <_read_r>
 8011220:	2800      	cmp	r0, #0
 8011222:	bfab      	itete	ge
 8011224:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011226:	89a3      	ldrhlt	r3, [r4, #12]
 8011228:	181b      	addge	r3, r3, r0
 801122a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801122e:	bfac      	ite	ge
 8011230:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011232:	81a3      	strhlt	r3, [r4, #12]
 8011234:	bd10      	pop	{r4, pc}

08011236 <__swrite>:
 8011236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801123a:	461f      	mov	r7, r3
 801123c:	898b      	ldrh	r3, [r1, #12]
 801123e:	05db      	lsls	r3, r3, #23
 8011240:	4605      	mov	r5, r0
 8011242:	460c      	mov	r4, r1
 8011244:	4616      	mov	r6, r2
 8011246:	d505      	bpl.n	8011254 <__swrite+0x1e>
 8011248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801124c:	2302      	movs	r3, #2
 801124e:	2200      	movs	r2, #0
 8011250:	f000 f84c 	bl	80112ec <_lseek_r>
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801125a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801125e:	81a3      	strh	r3, [r4, #12]
 8011260:	4632      	mov	r2, r6
 8011262:	463b      	mov	r3, r7
 8011264:	4628      	mov	r0, r5
 8011266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801126a:	f000 b863 	b.w	8011334 <_write_r>

0801126e <__sseek>:
 801126e:	b510      	push	{r4, lr}
 8011270:	460c      	mov	r4, r1
 8011272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011276:	f000 f839 	bl	80112ec <_lseek_r>
 801127a:	1c43      	adds	r3, r0, #1
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	bf15      	itete	ne
 8011280:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011282:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011286:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801128a:	81a3      	strheq	r3, [r4, #12]
 801128c:	bf18      	it	ne
 801128e:	81a3      	strhne	r3, [r4, #12]
 8011290:	bd10      	pop	{r4, pc}

08011292 <__sclose>:
 8011292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011296:	f000 b819 	b.w	80112cc <_close_r>

0801129a <memcmp>:
 801129a:	b510      	push	{r4, lr}
 801129c:	3901      	subs	r1, #1
 801129e:	4402      	add	r2, r0
 80112a0:	4290      	cmp	r0, r2
 80112a2:	d101      	bne.n	80112a8 <memcmp+0xe>
 80112a4:	2000      	movs	r0, #0
 80112a6:	e005      	b.n	80112b4 <memcmp+0x1a>
 80112a8:	7803      	ldrb	r3, [r0, #0]
 80112aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80112ae:	42a3      	cmp	r3, r4
 80112b0:	d001      	beq.n	80112b6 <memcmp+0x1c>
 80112b2:	1b18      	subs	r0, r3, r4
 80112b4:	bd10      	pop	{r4, pc}
 80112b6:	3001      	adds	r0, #1
 80112b8:	e7f2      	b.n	80112a0 <memcmp+0x6>

080112ba <memset>:
 80112ba:	4402      	add	r2, r0
 80112bc:	4603      	mov	r3, r0
 80112be:	4293      	cmp	r3, r2
 80112c0:	d100      	bne.n	80112c4 <memset+0xa>
 80112c2:	4770      	bx	lr
 80112c4:	f803 1b01 	strb.w	r1, [r3], #1
 80112c8:	e7f9      	b.n	80112be <memset+0x4>
	...

080112cc <_close_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	4d06      	ldr	r5, [pc, #24]	@ (80112e8 <_close_r+0x1c>)
 80112d0:	2300      	movs	r3, #0
 80112d2:	4604      	mov	r4, r0
 80112d4:	4608      	mov	r0, r1
 80112d6:	602b      	str	r3, [r5, #0]
 80112d8:	f7ef fb10 	bl	80008fc <_close>
 80112dc:	1c43      	adds	r3, r0, #1
 80112de:	d102      	bne.n	80112e6 <_close_r+0x1a>
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	b103      	cbz	r3, 80112e6 <_close_r+0x1a>
 80112e4:	6023      	str	r3, [r4, #0]
 80112e6:	bd38      	pop	{r3, r4, r5, pc}
 80112e8:	2000bee8 	.word	0x2000bee8

080112ec <_lseek_r>:
 80112ec:	b538      	push	{r3, r4, r5, lr}
 80112ee:	4d07      	ldr	r5, [pc, #28]	@ (801130c <_lseek_r+0x20>)
 80112f0:	4604      	mov	r4, r0
 80112f2:	4608      	mov	r0, r1
 80112f4:	4611      	mov	r1, r2
 80112f6:	2200      	movs	r2, #0
 80112f8:	602a      	str	r2, [r5, #0]
 80112fa:	461a      	mov	r2, r3
 80112fc:	f7ef fb25 	bl	800094a <_lseek>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d102      	bne.n	801130a <_lseek_r+0x1e>
 8011304:	682b      	ldr	r3, [r5, #0]
 8011306:	b103      	cbz	r3, 801130a <_lseek_r+0x1e>
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	2000bee8 	.word	0x2000bee8

08011310 <_read_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4d07      	ldr	r5, [pc, #28]	@ (8011330 <_read_r+0x20>)
 8011314:	4604      	mov	r4, r0
 8011316:	4608      	mov	r0, r1
 8011318:	4611      	mov	r1, r2
 801131a:	2200      	movs	r2, #0
 801131c:	602a      	str	r2, [r5, #0]
 801131e:	461a      	mov	r2, r3
 8011320:	f7ef fab3 	bl	800088a <_read>
 8011324:	1c43      	adds	r3, r0, #1
 8011326:	d102      	bne.n	801132e <_read_r+0x1e>
 8011328:	682b      	ldr	r3, [r5, #0]
 801132a:	b103      	cbz	r3, 801132e <_read_r+0x1e>
 801132c:	6023      	str	r3, [r4, #0]
 801132e:	bd38      	pop	{r3, r4, r5, pc}
 8011330:	2000bee8 	.word	0x2000bee8

08011334 <_write_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	4d07      	ldr	r5, [pc, #28]	@ (8011354 <_write_r+0x20>)
 8011338:	4604      	mov	r4, r0
 801133a:	4608      	mov	r0, r1
 801133c:	4611      	mov	r1, r2
 801133e:	2200      	movs	r2, #0
 8011340:	602a      	str	r2, [r5, #0]
 8011342:	461a      	mov	r2, r3
 8011344:	f7ef fabe 	bl	80008c4 <_write>
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	d102      	bne.n	8011352 <_write_r+0x1e>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	b103      	cbz	r3, 8011352 <_write_r+0x1e>
 8011350:	6023      	str	r3, [r4, #0]
 8011352:	bd38      	pop	{r3, r4, r5, pc}
 8011354:	2000bee8 	.word	0x2000bee8

08011358 <__libc_init_array>:
 8011358:	b570      	push	{r4, r5, r6, lr}
 801135a:	4d0d      	ldr	r5, [pc, #52]	@ (8011390 <__libc_init_array+0x38>)
 801135c:	4c0d      	ldr	r4, [pc, #52]	@ (8011394 <__libc_init_array+0x3c>)
 801135e:	1b64      	subs	r4, r4, r5
 8011360:	10a4      	asrs	r4, r4, #2
 8011362:	2600      	movs	r6, #0
 8011364:	42a6      	cmp	r6, r4
 8011366:	d109      	bne.n	801137c <__libc_init_array+0x24>
 8011368:	4d0b      	ldr	r5, [pc, #44]	@ (8011398 <__libc_init_array+0x40>)
 801136a:	4c0c      	ldr	r4, [pc, #48]	@ (801139c <__libc_init_array+0x44>)
 801136c:	f000 fe4a 	bl	8012004 <_init>
 8011370:	1b64      	subs	r4, r4, r5
 8011372:	10a4      	asrs	r4, r4, #2
 8011374:	2600      	movs	r6, #0
 8011376:	42a6      	cmp	r6, r4
 8011378:	d105      	bne.n	8011386 <__libc_init_array+0x2e>
 801137a:	bd70      	pop	{r4, r5, r6, pc}
 801137c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011380:	4798      	blx	r3
 8011382:	3601      	adds	r6, #1
 8011384:	e7ee      	b.n	8011364 <__libc_init_array+0xc>
 8011386:	f855 3b04 	ldr.w	r3, [r5], #4
 801138a:	4798      	blx	r3
 801138c:	3601      	adds	r6, #1
 801138e:	e7f2      	b.n	8011376 <__libc_init_array+0x1e>
 8011390:	08014dcc 	.word	0x08014dcc
 8011394:	08014dcc 	.word	0x08014dcc
 8011398:	08014dcc 	.word	0x08014dcc
 801139c:	08014dd0 	.word	0x08014dd0

080113a0 <__retarget_lock_init_recursive>:
 80113a0:	4770      	bx	lr

080113a2 <__retarget_lock_acquire_recursive>:
 80113a2:	4770      	bx	lr

080113a4 <__retarget_lock_release_recursive>:
 80113a4:	4770      	bx	lr

080113a6 <memcpy>:
 80113a6:	440a      	add	r2, r1
 80113a8:	4291      	cmp	r1, r2
 80113aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80113ae:	d100      	bne.n	80113b2 <memcpy+0xc>
 80113b0:	4770      	bx	lr
 80113b2:	b510      	push	{r4, lr}
 80113b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113bc:	4291      	cmp	r1, r2
 80113be:	d1f9      	bne.n	80113b4 <memcpy+0xe>
 80113c0:	bd10      	pop	{r4, pc}
	...

080113c4 <__assert_func>:
 80113c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113c6:	4614      	mov	r4, r2
 80113c8:	461a      	mov	r2, r3
 80113ca:	4b09      	ldr	r3, [pc, #36]	@ (80113f0 <__assert_func+0x2c>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	4605      	mov	r5, r0
 80113d0:	68d8      	ldr	r0, [r3, #12]
 80113d2:	b954      	cbnz	r4, 80113ea <__assert_func+0x26>
 80113d4:	4b07      	ldr	r3, [pc, #28]	@ (80113f4 <__assert_func+0x30>)
 80113d6:	461c      	mov	r4, r3
 80113d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113dc:	9100      	str	r1, [sp, #0]
 80113de:	462b      	mov	r3, r5
 80113e0:	4905      	ldr	r1, [pc, #20]	@ (80113f8 <__assert_func+0x34>)
 80113e2:	f000 fc3f 	bl	8011c64 <fiprintf>
 80113e6:	f000 fcf3 	bl	8011dd0 <abort>
 80113ea:	4b04      	ldr	r3, [pc, #16]	@ (80113fc <__assert_func+0x38>)
 80113ec:	e7f4      	b.n	80113d8 <__assert_func+0x14>
 80113ee:	bf00      	nop
 80113f0:	2000003c 	.word	0x2000003c
 80113f4:	08014d8e 	.word	0x08014d8e
 80113f8:	08014d60 	.word	0x08014d60
 80113fc:	08014d53 	.word	0x08014d53

08011400 <malloc>:
 8011400:	4b02      	ldr	r3, [pc, #8]	@ (801140c <malloc+0xc>)
 8011402:	4601      	mov	r1, r0
 8011404:	6818      	ldr	r0, [r3, #0]
 8011406:	f000 b825 	b.w	8011454 <_malloc_r>
 801140a:	bf00      	nop
 801140c:	2000003c 	.word	0x2000003c

08011410 <sbrk_aligned>:
 8011410:	b570      	push	{r4, r5, r6, lr}
 8011412:	4e0f      	ldr	r6, [pc, #60]	@ (8011450 <sbrk_aligned+0x40>)
 8011414:	460c      	mov	r4, r1
 8011416:	6831      	ldr	r1, [r6, #0]
 8011418:	4605      	mov	r5, r0
 801141a:	b911      	cbnz	r1, 8011422 <sbrk_aligned+0x12>
 801141c:	f000 fcc8 	bl	8011db0 <_sbrk_r>
 8011420:	6030      	str	r0, [r6, #0]
 8011422:	4621      	mov	r1, r4
 8011424:	4628      	mov	r0, r5
 8011426:	f000 fcc3 	bl	8011db0 <_sbrk_r>
 801142a:	1c43      	adds	r3, r0, #1
 801142c:	d103      	bne.n	8011436 <sbrk_aligned+0x26>
 801142e:	f04f 34ff 	mov.w	r4, #4294967295
 8011432:	4620      	mov	r0, r4
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	1cc4      	adds	r4, r0, #3
 8011438:	f024 0403 	bic.w	r4, r4, #3
 801143c:	42a0      	cmp	r0, r4
 801143e:	d0f8      	beq.n	8011432 <sbrk_aligned+0x22>
 8011440:	1a21      	subs	r1, r4, r0
 8011442:	4628      	mov	r0, r5
 8011444:	f000 fcb4 	bl	8011db0 <_sbrk_r>
 8011448:	3001      	adds	r0, #1
 801144a:	d1f2      	bne.n	8011432 <sbrk_aligned+0x22>
 801144c:	e7ef      	b.n	801142e <sbrk_aligned+0x1e>
 801144e:	bf00      	nop
 8011450:	2000c030 	.word	0x2000c030

08011454 <_malloc_r>:
 8011454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011458:	1ccd      	adds	r5, r1, #3
 801145a:	f025 0503 	bic.w	r5, r5, #3
 801145e:	3508      	adds	r5, #8
 8011460:	2d0c      	cmp	r5, #12
 8011462:	bf38      	it	cc
 8011464:	250c      	movcc	r5, #12
 8011466:	2d00      	cmp	r5, #0
 8011468:	4606      	mov	r6, r0
 801146a:	db01      	blt.n	8011470 <_malloc_r+0x1c>
 801146c:	42a9      	cmp	r1, r5
 801146e:	d904      	bls.n	801147a <_malloc_r+0x26>
 8011470:	230c      	movs	r3, #12
 8011472:	6033      	str	r3, [r6, #0]
 8011474:	2000      	movs	r0, #0
 8011476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801147a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011550 <_malloc_r+0xfc>
 801147e:	f000 f869 	bl	8011554 <__malloc_lock>
 8011482:	f8d8 3000 	ldr.w	r3, [r8]
 8011486:	461c      	mov	r4, r3
 8011488:	bb44      	cbnz	r4, 80114dc <_malloc_r+0x88>
 801148a:	4629      	mov	r1, r5
 801148c:	4630      	mov	r0, r6
 801148e:	f7ff ffbf 	bl	8011410 <sbrk_aligned>
 8011492:	1c43      	adds	r3, r0, #1
 8011494:	4604      	mov	r4, r0
 8011496:	d158      	bne.n	801154a <_malloc_r+0xf6>
 8011498:	f8d8 4000 	ldr.w	r4, [r8]
 801149c:	4627      	mov	r7, r4
 801149e:	2f00      	cmp	r7, #0
 80114a0:	d143      	bne.n	801152a <_malloc_r+0xd6>
 80114a2:	2c00      	cmp	r4, #0
 80114a4:	d04b      	beq.n	801153e <_malloc_r+0xea>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	4639      	mov	r1, r7
 80114aa:	4630      	mov	r0, r6
 80114ac:	eb04 0903 	add.w	r9, r4, r3
 80114b0:	f000 fc7e 	bl	8011db0 <_sbrk_r>
 80114b4:	4581      	cmp	r9, r0
 80114b6:	d142      	bne.n	801153e <_malloc_r+0xea>
 80114b8:	6821      	ldr	r1, [r4, #0]
 80114ba:	1a6d      	subs	r5, r5, r1
 80114bc:	4629      	mov	r1, r5
 80114be:	4630      	mov	r0, r6
 80114c0:	f7ff ffa6 	bl	8011410 <sbrk_aligned>
 80114c4:	3001      	adds	r0, #1
 80114c6:	d03a      	beq.n	801153e <_malloc_r+0xea>
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	442b      	add	r3, r5
 80114cc:	6023      	str	r3, [r4, #0]
 80114ce:	f8d8 3000 	ldr.w	r3, [r8]
 80114d2:	685a      	ldr	r2, [r3, #4]
 80114d4:	bb62      	cbnz	r2, 8011530 <_malloc_r+0xdc>
 80114d6:	f8c8 7000 	str.w	r7, [r8]
 80114da:	e00f      	b.n	80114fc <_malloc_r+0xa8>
 80114dc:	6822      	ldr	r2, [r4, #0]
 80114de:	1b52      	subs	r2, r2, r5
 80114e0:	d420      	bmi.n	8011524 <_malloc_r+0xd0>
 80114e2:	2a0b      	cmp	r2, #11
 80114e4:	d917      	bls.n	8011516 <_malloc_r+0xc2>
 80114e6:	1961      	adds	r1, r4, r5
 80114e8:	42a3      	cmp	r3, r4
 80114ea:	6025      	str	r5, [r4, #0]
 80114ec:	bf18      	it	ne
 80114ee:	6059      	strne	r1, [r3, #4]
 80114f0:	6863      	ldr	r3, [r4, #4]
 80114f2:	bf08      	it	eq
 80114f4:	f8c8 1000 	streq.w	r1, [r8]
 80114f8:	5162      	str	r2, [r4, r5]
 80114fa:	604b      	str	r3, [r1, #4]
 80114fc:	4630      	mov	r0, r6
 80114fe:	f000 f82f 	bl	8011560 <__malloc_unlock>
 8011502:	f104 000b 	add.w	r0, r4, #11
 8011506:	1d23      	adds	r3, r4, #4
 8011508:	f020 0007 	bic.w	r0, r0, #7
 801150c:	1ac2      	subs	r2, r0, r3
 801150e:	bf1c      	itt	ne
 8011510:	1a1b      	subne	r3, r3, r0
 8011512:	50a3      	strne	r3, [r4, r2]
 8011514:	e7af      	b.n	8011476 <_malloc_r+0x22>
 8011516:	6862      	ldr	r2, [r4, #4]
 8011518:	42a3      	cmp	r3, r4
 801151a:	bf0c      	ite	eq
 801151c:	f8c8 2000 	streq.w	r2, [r8]
 8011520:	605a      	strne	r2, [r3, #4]
 8011522:	e7eb      	b.n	80114fc <_malloc_r+0xa8>
 8011524:	4623      	mov	r3, r4
 8011526:	6864      	ldr	r4, [r4, #4]
 8011528:	e7ae      	b.n	8011488 <_malloc_r+0x34>
 801152a:	463c      	mov	r4, r7
 801152c:	687f      	ldr	r7, [r7, #4]
 801152e:	e7b6      	b.n	801149e <_malloc_r+0x4a>
 8011530:	461a      	mov	r2, r3
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	42a3      	cmp	r3, r4
 8011536:	d1fb      	bne.n	8011530 <_malloc_r+0xdc>
 8011538:	2300      	movs	r3, #0
 801153a:	6053      	str	r3, [r2, #4]
 801153c:	e7de      	b.n	80114fc <_malloc_r+0xa8>
 801153e:	230c      	movs	r3, #12
 8011540:	6033      	str	r3, [r6, #0]
 8011542:	4630      	mov	r0, r6
 8011544:	f000 f80c 	bl	8011560 <__malloc_unlock>
 8011548:	e794      	b.n	8011474 <_malloc_r+0x20>
 801154a:	6005      	str	r5, [r0, #0]
 801154c:	e7d6      	b.n	80114fc <_malloc_r+0xa8>
 801154e:	bf00      	nop
 8011550:	2000c034 	.word	0x2000c034

08011554 <__malloc_lock>:
 8011554:	4801      	ldr	r0, [pc, #4]	@ (801155c <__malloc_lock+0x8>)
 8011556:	f7ff bf24 	b.w	80113a2 <__retarget_lock_acquire_recursive>
 801155a:	bf00      	nop
 801155c:	2000c02c 	.word	0x2000c02c

08011560 <__malloc_unlock>:
 8011560:	4801      	ldr	r0, [pc, #4]	@ (8011568 <__malloc_unlock+0x8>)
 8011562:	f7ff bf1f 	b.w	80113a4 <__retarget_lock_release_recursive>
 8011566:	bf00      	nop
 8011568:	2000c02c 	.word	0x2000c02c

0801156c <__sfputc_r>:
 801156c:	6893      	ldr	r3, [r2, #8]
 801156e:	3b01      	subs	r3, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	b410      	push	{r4}
 8011574:	6093      	str	r3, [r2, #8]
 8011576:	da08      	bge.n	801158a <__sfputc_r+0x1e>
 8011578:	6994      	ldr	r4, [r2, #24]
 801157a:	42a3      	cmp	r3, r4
 801157c:	db01      	blt.n	8011582 <__sfputc_r+0x16>
 801157e:	290a      	cmp	r1, #10
 8011580:	d103      	bne.n	801158a <__sfputc_r+0x1e>
 8011582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011586:	f000 bb7f 	b.w	8011c88 <__swbuf_r>
 801158a:	6813      	ldr	r3, [r2, #0]
 801158c:	1c58      	adds	r0, r3, #1
 801158e:	6010      	str	r0, [r2, #0]
 8011590:	7019      	strb	r1, [r3, #0]
 8011592:	4608      	mov	r0, r1
 8011594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011598:	4770      	bx	lr

0801159a <__sfputs_r>:
 801159a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159c:	4606      	mov	r6, r0
 801159e:	460f      	mov	r7, r1
 80115a0:	4614      	mov	r4, r2
 80115a2:	18d5      	adds	r5, r2, r3
 80115a4:	42ac      	cmp	r4, r5
 80115a6:	d101      	bne.n	80115ac <__sfputs_r+0x12>
 80115a8:	2000      	movs	r0, #0
 80115aa:	e007      	b.n	80115bc <__sfputs_r+0x22>
 80115ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115b0:	463a      	mov	r2, r7
 80115b2:	4630      	mov	r0, r6
 80115b4:	f7ff ffda 	bl	801156c <__sfputc_r>
 80115b8:	1c43      	adds	r3, r0, #1
 80115ba:	d1f3      	bne.n	80115a4 <__sfputs_r+0xa>
 80115bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115c0 <_vfiprintf_r>:
 80115c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c4:	460d      	mov	r5, r1
 80115c6:	b09d      	sub	sp, #116	@ 0x74
 80115c8:	4614      	mov	r4, r2
 80115ca:	4698      	mov	r8, r3
 80115cc:	4606      	mov	r6, r0
 80115ce:	b118      	cbz	r0, 80115d8 <_vfiprintf_r+0x18>
 80115d0:	6a03      	ldr	r3, [r0, #32]
 80115d2:	b90b      	cbnz	r3, 80115d8 <_vfiprintf_r+0x18>
 80115d4:	f7ff fdd6 	bl	8011184 <__sinit>
 80115d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80115da:	07d9      	lsls	r1, r3, #31
 80115dc:	d405      	bmi.n	80115ea <_vfiprintf_r+0x2a>
 80115de:	89ab      	ldrh	r3, [r5, #12]
 80115e0:	059a      	lsls	r2, r3, #22
 80115e2:	d402      	bmi.n	80115ea <_vfiprintf_r+0x2a>
 80115e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115e6:	f7ff fedc 	bl	80113a2 <__retarget_lock_acquire_recursive>
 80115ea:	89ab      	ldrh	r3, [r5, #12]
 80115ec:	071b      	lsls	r3, r3, #28
 80115ee:	d501      	bpl.n	80115f4 <_vfiprintf_r+0x34>
 80115f0:	692b      	ldr	r3, [r5, #16]
 80115f2:	b99b      	cbnz	r3, 801161c <_vfiprintf_r+0x5c>
 80115f4:	4629      	mov	r1, r5
 80115f6:	4630      	mov	r0, r6
 80115f8:	f000 fb84 	bl	8011d04 <__swsetup_r>
 80115fc:	b170      	cbz	r0, 801161c <_vfiprintf_r+0x5c>
 80115fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011600:	07dc      	lsls	r4, r3, #31
 8011602:	d504      	bpl.n	801160e <_vfiprintf_r+0x4e>
 8011604:	f04f 30ff 	mov.w	r0, #4294967295
 8011608:	b01d      	add	sp, #116	@ 0x74
 801160a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801160e:	89ab      	ldrh	r3, [r5, #12]
 8011610:	0598      	lsls	r0, r3, #22
 8011612:	d4f7      	bmi.n	8011604 <_vfiprintf_r+0x44>
 8011614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011616:	f7ff fec5 	bl	80113a4 <__retarget_lock_release_recursive>
 801161a:	e7f3      	b.n	8011604 <_vfiprintf_r+0x44>
 801161c:	2300      	movs	r3, #0
 801161e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011620:	2320      	movs	r3, #32
 8011622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011626:	f8cd 800c 	str.w	r8, [sp, #12]
 801162a:	2330      	movs	r3, #48	@ 0x30
 801162c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80117dc <_vfiprintf_r+0x21c>
 8011630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011634:	f04f 0901 	mov.w	r9, #1
 8011638:	4623      	mov	r3, r4
 801163a:	469a      	mov	sl, r3
 801163c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011640:	b10a      	cbz	r2, 8011646 <_vfiprintf_r+0x86>
 8011642:	2a25      	cmp	r2, #37	@ 0x25
 8011644:	d1f9      	bne.n	801163a <_vfiprintf_r+0x7a>
 8011646:	ebba 0b04 	subs.w	fp, sl, r4
 801164a:	d00b      	beq.n	8011664 <_vfiprintf_r+0xa4>
 801164c:	465b      	mov	r3, fp
 801164e:	4622      	mov	r2, r4
 8011650:	4629      	mov	r1, r5
 8011652:	4630      	mov	r0, r6
 8011654:	f7ff ffa1 	bl	801159a <__sfputs_r>
 8011658:	3001      	adds	r0, #1
 801165a:	f000 80a7 	beq.w	80117ac <_vfiprintf_r+0x1ec>
 801165e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011660:	445a      	add	r2, fp
 8011662:	9209      	str	r2, [sp, #36]	@ 0x24
 8011664:	f89a 3000 	ldrb.w	r3, [sl]
 8011668:	2b00      	cmp	r3, #0
 801166a:	f000 809f 	beq.w	80117ac <_vfiprintf_r+0x1ec>
 801166e:	2300      	movs	r3, #0
 8011670:	f04f 32ff 	mov.w	r2, #4294967295
 8011674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011678:	f10a 0a01 	add.w	sl, sl, #1
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	9307      	str	r3, [sp, #28]
 8011680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011684:	931a      	str	r3, [sp, #104]	@ 0x68
 8011686:	4654      	mov	r4, sl
 8011688:	2205      	movs	r2, #5
 801168a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801168e:	4853      	ldr	r0, [pc, #332]	@ (80117dc <_vfiprintf_r+0x21c>)
 8011690:	f7ee fdbe 	bl	8000210 <memchr>
 8011694:	9a04      	ldr	r2, [sp, #16]
 8011696:	b9d8      	cbnz	r0, 80116d0 <_vfiprintf_r+0x110>
 8011698:	06d1      	lsls	r1, r2, #27
 801169a:	bf44      	itt	mi
 801169c:	2320      	movmi	r3, #32
 801169e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116a2:	0713      	lsls	r3, r2, #28
 80116a4:	bf44      	itt	mi
 80116a6:	232b      	movmi	r3, #43	@ 0x2b
 80116a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116ac:	f89a 3000 	ldrb.w	r3, [sl]
 80116b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80116b2:	d015      	beq.n	80116e0 <_vfiprintf_r+0x120>
 80116b4:	9a07      	ldr	r2, [sp, #28]
 80116b6:	4654      	mov	r4, sl
 80116b8:	2000      	movs	r0, #0
 80116ba:	f04f 0c0a 	mov.w	ip, #10
 80116be:	4621      	mov	r1, r4
 80116c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116c4:	3b30      	subs	r3, #48	@ 0x30
 80116c6:	2b09      	cmp	r3, #9
 80116c8:	d94b      	bls.n	8011762 <_vfiprintf_r+0x1a2>
 80116ca:	b1b0      	cbz	r0, 80116fa <_vfiprintf_r+0x13a>
 80116cc:	9207      	str	r2, [sp, #28]
 80116ce:	e014      	b.n	80116fa <_vfiprintf_r+0x13a>
 80116d0:	eba0 0308 	sub.w	r3, r0, r8
 80116d4:	fa09 f303 	lsl.w	r3, r9, r3
 80116d8:	4313      	orrs	r3, r2
 80116da:	9304      	str	r3, [sp, #16]
 80116dc:	46a2      	mov	sl, r4
 80116de:	e7d2      	b.n	8011686 <_vfiprintf_r+0xc6>
 80116e0:	9b03      	ldr	r3, [sp, #12]
 80116e2:	1d19      	adds	r1, r3, #4
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	9103      	str	r1, [sp, #12]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	bfbb      	ittet	lt
 80116ec:	425b      	neglt	r3, r3
 80116ee:	f042 0202 	orrlt.w	r2, r2, #2
 80116f2:	9307      	strge	r3, [sp, #28]
 80116f4:	9307      	strlt	r3, [sp, #28]
 80116f6:	bfb8      	it	lt
 80116f8:	9204      	strlt	r2, [sp, #16]
 80116fa:	7823      	ldrb	r3, [r4, #0]
 80116fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80116fe:	d10a      	bne.n	8011716 <_vfiprintf_r+0x156>
 8011700:	7863      	ldrb	r3, [r4, #1]
 8011702:	2b2a      	cmp	r3, #42	@ 0x2a
 8011704:	d132      	bne.n	801176c <_vfiprintf_r+0x1ac>
 8011706:	9b03      	ldr	r3, [sp, #12]
 8011708:	1d1a      	adds	r2, r3, #4
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	9203      	str	r2, [sp, #12]
 801170e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011712:	3402      	adds	r4, #2
 8011714:	9305      	str	r3, [sp, #20]
 8011716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80117ec <_vfiprintf_r+0x22c>
 801171a:	7821      	ldrb	r1, [r4, #0]
 801171c:	2203      	movs	r2, #3
 801171e:	4650      	mov	r0, sl
 8011720:	f7ee fd76 	bl	8000210 <memchr>
 8011724:	b138      	cbz	r0, 8011736 <_vfiprintf_r+0x176>
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	eba0 000a 	sub.w	r0, r0, sl
 801172c:	2240      	movs	r2, #64	@ 0x40
 801172e:	4082      	lsls	r2, r0
 8011730:	4313      	orrs	r3, r2
 8011732:	3401      	adds	r4, #1
 8011734:	9304      	str	r3, [sp, #16]
 8011736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801173a:	4829      	ldr	r0, [pc, #164]	@ (80117e0 <_vfiprintf_r+0x220>)
 801173c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011740:	2206      	movs	r2, #6
 8011742:	f7ee fd65 	bl	8000210 <memchr>
 8011746:	2800      	cmp	r0, #0
 8011748:	d03f      	beq.n	80117ca <_vfiprintf_r+0x20a>
 801174a:	4b26      	ldr	r3, [pc, #152]	@ (80117e4 <_vfiprintf_r+0x224>)
 801174c:	bb1b      	cbnz	r3, 8011796 <_vfiprintf_r+0x1d6>
 801174e:	9b03      	ldr	r3, [sp, #12]
 8011750:	3307      	adds	r3, #7
 8011752:	f023 0307 	bic.w	r3, r3, #7
 8011756:	3308      	adds	r3, #8
 8011758:	9303      	str	r3, [sp, #12]
 801175a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801175c:	443b      	add	r3, r7
 801175e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011760:	e76a      	b.n	8011638 <_vfiprintf_r+0x78>
 8011762:	fb0c 3202 	mla	r2, ip, r2, r3
 8011766:	460c      	mov	r4, r1
 8011768:	2001      	movs	r0, #1
 801176a:	e7a8      	b.n	80116be <_vfiprintf_r+0xfe>
 801176c:	2300      	movs	r3, #0
 801176e:	3401      	adds	r4, #1
 8011770:	9305      	str	r3, [sp, #20]
 8011772:	4619      	mov	r1, r3
 8011774:	f04f 0c0a 	mov.w	ip, #10
 8011778:	4620      	mov	r0, r4
 801177a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801177e:	3a30      	subs	r2, #48	@ 0x30
 8011780:	2a09      	cmp	r2, #9
 8011782:	d903      	bls.n	801178c <_vfiprintf_r+0x1cc>
 8011784:	2b00      	cmp	r3, #0
 8011786:	d0c6      	beq.n	8011716 <_vfiprintf_r+0x156>
 8011788:	9105      	str	r1, [sp, #20]
 801178a:	e7c4      	b.n	8011716 <_vfiprintf_r+0x156>
 801178c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011790:	4604      	mov	r4, r0
 8011792:	2301      	movs	r3, #1
 8011794:	e7f0      	b.n	8011778 <_vfiprintf_r+0x1b8>
 8011796:	ab03      	add	r3, sp, #12
 8011798:	9300      	str	r3, [sp, #0]
 801179a:	462a      	mov	r2, r5
 801179c:	4b12      	ldr	r3, [pc, #72]	@ (80117e8 <_vfiprintf_r+0x228>)
 801179e:	a904      	add	r1, sp, #16
 80117a0:	4630      	mov	r0, r6
 80117a2:	f3af 8000 	nop.w
 80117a6:	4607      	mov	r7, r0
 80117a8:	1c78      	adds	r0, r7, #1
 80117aa:	d1d6      	bne.n	801175a <_vfiprintf_r+0x19a>
 80117ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117ae:	07d9      	lsls	r1, r3, #31
 80117b0:	d405      	bmi.n	80117be <_vfiprintf_r+0x1fe>
 80117b2:	89ab      	ldrh	r3, [r5, #12]
 80117b4:	059a      	lsls	r2, r3, #22
 80117b6:	d402      	bmi.n	80117be <_vfiprintf_r+0x1fe>
 80117b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117ba:	f7ff fdf3 	bl	80113a4 <__retarget_lock_release_recursive>
 80117be:	89ab      	ldrh	r3, [r5, #12]
 80117c0:	065b      	lsls	r3, r3, #25
 80117c2:	f53f af1f 	bmi.w	8011604 <_vfiprintf_r+0x44>
 80117c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117c8:	e71e      	b.n	8011608 <_vfiprintf_r+0x48>
 80117ca:	ab03      	add	r3, sp, #12
 80117cc:	9300      	str	r3, [sp, #0]
 80117ce:	462a      	mov	r2, r5
 80117d0:	4b05      	ldr	r3, [pc, #20]	@ (80117e8 <_vfiprintf_r+0x228>)
 80117d2:	a904      	add	r1, sp, #16
 80117d4:	4630      	mov	r0, r6
 80117d6:	f000 f879 	bl	80118cc <_printf_i>
 80117da:	e7e4      	b.n	80117a6 <_vfiprintf_r+0x1e6>
 80117dc:	08014d8f 	.word	0x08014d8f
 80117e0:	08014d99 	.word	0x08014d99
 80117e4:	00000000 	.word	0x00000000
 80117e8:	0801159b 	.word	0x0801159b
 80117ec:	08014d95 	.word	0x08014d95

080117f0 <_printf_common>:
 80117f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f4:	4616      	mov	r6, r2
 80117f6:	4698      	mov	r8, r3
 80117f8:	688a      	ldr	r2, [r1, #8]
 80117fa:	690b      	ldr	r3, [r1, #16]
 80117fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011800:	4293      	cmp	r3, r2
 8011802:	bfb8      	it	lt
 8011804:	4613      	movlt	r3, r2
 8011806:	6033      	str	r3, [r6, #0]
 8011808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801180c:	4607      	mov	r7, r0
 801180e:	460c      	mov	r4, r1
 8011810:	b10a      	cbz	r2, 8011816 <_printf_common+0x26>
 8011812:	3301      	adds	r3, #1
 8011814:	6033      	str	r3, [r6, #0]
 8011816:	6823      	ldr	r3, [r4, #0]
 8011818:	0699      	lsls	r1, r3, #26
 801181a:	bf42      	ittt	mi
 801181c:	6833      	ldrmi	r3, [r6, #0]
 801181e:	3302      	addmi	r3, #2
 8011820:	6033      	strmi	r3, [r6, #0]
 8011822:	6825      	ldr	r5, [r4, #0]
 8011824:	f015 0506 	ands.w	r5, r5, #6
 8011828:	d106      	bne.n	8011838 <_printf_common+0x48>
 801182a:	f104 0a19 	add.w	sl, r4, #25
 801182e:	68e3      	ldr	r3, [r4, #12]
 8011830:	6832      	ldr	r2, [r6, #0]
 8011832:	1a9b      	subs	r3, r3, r2
 8011834:	42ab      	cmp	r3, r5
 8011836:	dc26      	bgt.n	8011886 <_printf_common+0x96>
 8011838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801183c:	6822      	ldr	r2, [r4, #0]
 801183e:	3b00      	subs	r3, #0
 8011840:	bf18      	it	ne
 8011842:	2301      	movne	r3, #1
 8011844:	0692      	lsls	r2, r2, #26
 8011846:	d42b      	bmi.n	80118a0 <_printf_common+0xb0>
 8011848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801184c:	4641      	mov	r1, r8
 801184e:	4638      	mov	r0, r7
 8011850:	47c8      	blx	r9
 8011852:	3001      	adds	r0, #1
 8011854:	d01e      	beq.n	8011894 <_printf_common+0xa4>
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	6922      	ldr	r2, [r4, #16]
 801185a:	f003 0306 	and.w	r3, r3, #6
 801185e:	2b04      	cmp	r3, #4
 8011860:	bf02      	ittt	eq
 8011862:	68e5      	ldreq	r5, [r4, #12]
 8011864:	6833      	ldreq	r3, [r6, #0]
 8011866:	1aed      	subeq	r5, r5, r3
 8011868:	68a3      	ldr	r3, [r4, #8]
 801186a:	bf0c      	ite	eq
 801186c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011870:	2500      	movne	r5, #0
 8011872:	4293      	cmp	r3, r2
 8011874:	bfc4      	itt	gt
 8011876:	1a9b      	subgt	r3, r3, r2
 8011878:	18ed      	addgt	r5, r5, r3
 801187a:	2600      	movs	r6, #0
 801187c:	341a      	adds	r4, #26
 801187e:	42b5      	cmp	r5, r6
 8011880:	d11a      	bne.n	80118b8 <_printf_common+0xc8>
 8011882:	2000      	movs	r0, #0
 8011884:	e008      	b.n	8011898 <_printf_common+0xa8>
 8011886:	2301      	movs	r3, #1
 8011888:	4652      	mov	r2, sl
 801188a:	4641      	mov	r1, r8
 801188c:	4638      	mov	r0, r7
 801188e:	47c8      	blx	r9
 8011890:	3001      	adds	r0, #1
 8011892:	d103      	bne.n	801189c <_printf_common+0xac>
 8011894:	f04f 30ff 	mov.w	r0, #4294967295
 8011898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801189c:	3501      	adds	r5, #1
 801189e:	e7c6      	b.n	801182e <_printf_common+0x3e>
 80118a0:	18e1      	adds	r1, r4, r3
 80118a2:	1c5a      	adds	r2, r3, #1
 80118a4:	2030      	movs	r0, #48	@ 0x30
 80118a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80118aa:	4422      	add	r2, r4
 80118ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80118b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80118b4:	3302      	adds	r3, #2
 80118b6:	e7c7      	b.n	8011848 <_printf_common+0x58>
 80118b8:	2301      	movs	r3, #1
 80118ba:	4622      	mov	r2, r4
 80118bc:	4641      	mov	r1, r8
 80118be:	4638      	mov	r0, r7
 80118c0:	47c8      	blx	r9
 80118c2:	3001      	adds	r0, #1
 80118c4:	d0e6      	beq.n	8011894 <_printf_common+0xa4>
 80118c6:	3601      	adds	r6, #1
 80118c8:	e7d9      	b.n	801187e <_printf_common+0x8e>
	...

080118cc <_printf_i>:
 80118cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118d0:	7e0f      	ldrb	r7, [r1, #24]
 80118d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80118d4:	2f78      	cmp	r7, #120	@ 0x78
 80118d6:	4691      	mov	r9, r2
 80118d8:	4680      	mov	r8, r0
 80118da:	460c      	mov	r4, r1
 80118dc:	469a      	mov	sl, r3
 80118de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80118e2:	d807      	bhi.n	80118f4 <_printf_i+0x28>
 80118e4:	2f62      	cmp	r7, #98	@ 0x62
 80118e6:	d80a      	bhi.n	80118fe <_printf_i+0x32>
 80118e8:	2f00      	cmp	r7, #0
 80118ea:	f000 80d2 	beq.w	8011a92 <_printf_i+0x1c6>
 80118ee:	2f58      	cmp	r7, #88	@ 0x58
 80118f0:	f000 80b9 	beq.w	8011a66 <_printf_i+0x19a>
 80118f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80118f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80118fc:	e03a      	b.n	8011974 <_printf_i+0xa8>
 80118fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011902:	2b15      	cmp	r3, #21
 8011904:	d8f6      	bhi.n	80118f4 <_printf_i+0x28>
 8011906:	a101      	add	r1, pc, #4	@ (adr r1, 801190c <_printf_i+0x40>)
 8011908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801190c:	08011965 	.word	0x08011965
 8011910:	08011979 	.word	0x08011979
 8011914:	080118f5 	.word	0x080118f5
 8011918:	080118f5 	.word	0x080118f5
 801191c:	080118f5 	.word	0x080118f5
 8011920:	080118f5 	.word	0x080118f5
 8011924:	08011979 	.word	0x08011979
 8011928:	080118f5 	.word	0x080118f5
 801192c:	080118f5 	.word	0x080118f5
 8011930:	080118f5 	.word	0x080118f5
 8011934:	080118f5 	.word	0x080118f5
 8011938:	08011a79 	.word	0x08011a79
 801193c:	080119a3 	.word	0x080119a3
 8011940:	08011a33 	.word	0x08011a33
 8011944:	080118f5 	.word	0x080118f5
 8011948:	080118f5 	.word	0x080118f5
 801194c:	08011a9b 	.word	0x08011a9b
 8011950:	080118f5 	.word	0x080118f5
 8011954:	080119a3 	.word	0x080119a3
 8011958:	080118f5 	.word	0x080118f5
 801195c:	080118f5 	.word	0x080118f5
 8011960:	08011a3b 	.word	0x08011a3b
 8011964:	6833      	ldr	r3, [r6, #0]
 8011966:	1d1a      	adds	r2, r3, #4
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	6032      	str	r2, [r6, #0]
 801196c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011974:	2301      	movs	r3, #1
 8011976:	e09d      	b.n	8011ab4 <_printf_i+0x1e8>
 8011978:	6833      	ldr	r3, [r6, #0]
 801197a:	6820      	ldr	r0, [r4, #0]
 801197c:	1d19      	adds	r1, r3, #4
 801197e:	6031      	str	r1, [r6, #0]
 8011980:	0606      	lsls	r6, r0, #24
 8011982:	d501      	bpl.n	8011988 <_printf_i+0xbc>
 8011984:	681d      	ldr	r5, [r3, #0]
 8011986:	e003      	b.n	8011990 <_printf_i+0xc4>
 8011988:	0645      	lsls	r5, r0, #25
 801198a:	d5fb      	bpl.n	8011984 <_printf_i+0xb8>
 801198c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011990:	2d00      	cmp	r5, #0
 8011992:	da03      	bge.n	801199c <_printf_i+0xd0>
 8011994:	232d      	movs	r3, #45	@ 0x2d
 8011996:	426d      	negs	r5, r5
 8011998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801199c:	4859      	ldr	r0, [pc, #356]	@ (8011b04 <_printf_i+0x238>)
 801199e:	230a      	movs	r3, #10
 80119a0:	e011      	b.n	80119c6 <_printf_i+0xfa>
 80119a2:	6821      	ldr	r1, [r4, #0]
 80119a4:	6833      	ldr	r3, [r6, #0]
 80119a6:	0608      	lsls	r0, r1, #24
 80119a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80119ac:	d402      	bmi.n	80119b4 <_printf_i+0xe8>
 80119ae:	0649      	lsls	r1, r1, #25
 80119b0:	bf48      	it	mi
 80119b2:	b2ad      	uxthmi	r5, r5
 80119b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80119b6:	4853      	ldr	r0, [pc, #332]	@ (8011b04 <_printf_i+0x238>)
 80119b8:	6033      	str	r3, [r6, #0]
 80119ba:	bf14      	ite	ne
 80119bc:	230a      	movne	r3, #10
 80119be:	2308      	moveq	r3, #8
 80119c0:	2100      	movs	r1, #0
 80119c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80119c6:	6866      	ldr	r6, [r4, #4]
 80119c8:	60a6      	str	r6, [r4, #8]
 80119ca:	2e00      	cmp	r6, #0
 80119cc:	bfa2      	ittt	ge
 80119ce:	6821      	ldrge	r1, [r4, #0]
 80119d0:	f021 0104 	bicge.w	r1, r1, #4
 80119d4:	6021      	strge	r1, [r4, #0]
 80119d6:	b90d      	cbnz	r5, 80119dc <_printf_i+0x110>
 80119d8:	2e00      	cmp	r6, #0
 80119da:	d04b      	beq.n	8011a74 <_printf_i+0x1a8>
 80119dc:	4616      	mov	r6, r2
 80119de:	fbb5 f1f3 	udiv	r1, r5, r3
 80119e2:	fb03 5711 	mls	r7, r3, r1, r5
 80119e6:	5dc7      	ldrb	r7, [r0, r7]
 80119e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80119ec:	462f      	mov	r7, r5
 80119ee:	42bb      	cmp	r3, r7
 80119f0:	460d      	mov	r5, r1
 80119f2:	d9f4      	bls.n	80119de <_printf_i+0x112>
 80119f4:	2b08      	cmp	r3, #8
 80119f6:	d10b      	bne.n	8011a10 <_printf_i+0x144>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	07df      	lsls	r7, r3, #31
 80119fc:	d508      	bpl.n	8011a10 <_printf_i+0x144>
 80119fe:	6923      	ldr	r3, [r4, #16]
 8011a00:	6861      	ldr	r1, [r4, #4]
 8011a02:	4299      	cmp	r1, r3
 8011a04:	bfde      	ittt	le
 8011a06:	2330      	movle	r3, #48	@ 0x30
 8011a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a10:	1b92      	subs	r2, r2, r6
 8011a12:	6122      	str	r2, [r4, #16]
 8011a14:	f8cd a000 	str.w	sl, [sp]
 8011a18:	464b      	mov	r3, r9
 8011a1a:	aa03      	add	r2, sp, #12
 8011a1c:	4621      	mov	r1, r4
 8011a1e:	4640      	mov	r0, r8
 8011a20:	f7ff fee6 	bl	80117f0 <_printf_common>
 8011a24:	3001      	adds	r0, #1
 8011a26:	d14a      	bne.n	8011abe <_printf_i+0x1f2>
 8011a28:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2c:	b004      	add	sp, #16
 8011a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a32:	6823      	ldr	r3, [r4, #0]
 8011a34:	f043 0320 	orr.w	r3, r3, #32
 8011a38:	6023      	str	r3, [r4, #0]
 8011a3a:	4833      	ldr	r0, [pc, #204]	@ (8011b08 <_printf_i+0x23c>)
 8011a3c:	2778      	movs	r7, #120	@ 0x78
 8011a3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	6831      	ldr	r1, [r6, #0]
 8011a46:	061f      	lsls	r7, r3, #24
 8011a48:	f851 5b04 	ldr.w	r5, [r1], #4
 8011a4c:	d402      	bmi.n	8011a54 <_printf_i+0x188>
 8011a4e:	065f      	lsls	r7, r3, #25
 8011a50:	bf48      	it	mi
 8011a52:	b2ad      	uxthmi	r5, r5
 8011a54:	6031      	str	r1, [r6, #0]
 8011a56:	07d9      	lsls	r1, r3, #31
 8011a58:	bf44      	itt	mi
 8011a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8011a5e:	6023      	strmi	r3, [r4, #0]
 8011a60:	b11d      	cbz	r5, 8011a6a <_printf_i+0x19e>
 8011a62:	2310      	movs	r3, #16
 8011a64:	e7ac      	b.n	80119c0 <_printf_i+0xf4>
 8011a66:	4827      	ldr	r0, [pc, #156]	@ (8011b04 <_printf_i+0x238>)
 8011a68:	e7e9      	b.n	8011a3e <_printf_i+0x172>
 8011a6a:	6823      	ldr	r3, [r4, #0]
 8011a6c:	f023 0320 	bic.w	r3, r3, #32
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	e7f6      	b.n	8011a62 <_printf_i+0x196>
 8011a74:	4616      	mov	r6, r2
 8011a76:	e7bd      	b.n	80119f4 <_printf_i+0x128>
 8011a78:	6833      	ldr	r3, [r6, #0]
 8011a7a:	6825      	ldr	r5, [r4, #0]
 8011a7c:	6961      	ldr	r1, [r4, #20]
 8011a7e:	1d18      	adds	r0, r3, #4
 8011a80:	6030      	str	r0, [r6, #0]
 8011a82:	062e      	lsls	r6, r5, #24
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	d501      	bpl.n	8011a8c <_printf_i+0x1c0>
 8011a88:	6019      	str	r1, [r3, #0]
 8011a8a:	e002      	b.n	8011a92 <_printf_i+0x1c6>
 8011a8c:	0668      	lsls	r0, r5, #25
 8011a8e:	d5fb      	bpl.n	8011a88 <_printf_i+0x1bc>
 8011a90:	8019      	strh	r1, [r3, #0]
 8011a92:	2300      	movs	r3, #0
 8011a94:	6123      	str	r3, [r4, #16]
 8011a96:	4616      	mov	r6, r2
 8011a98:	e7bc      	b.n	8011a14 <_printf_i+0x148>
 8011a9a:	6833      	ldr	r3, [r6, #0]
 8011a9c:	1d1a      	adds	r2, r3, #4
 8011a9e:	6032      	str	r2, [r6, #0]
 8011aa0:	681e      	ldr	r6, [r3, #0]
 8011aa2:	6862      	ldr	r2, [r4, #4]
 8011aa4:	2100      	movs	r1, #0
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	f7ee fbb2 	bl	8000210 <memchr>
 8011aac:	b108      	cbz	r0, 8011ab2 <_printf_i+0x1e6>
 8011aae:	1b80      	subs	r0, r0, r6
 8011ab0:	6060      	str	r0, [r4, #4]
 8011ab2:	6863      	ldr	r3, [r4, #4]
 8011ab4:	6123      	str	r3, [r4, #16]
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011abc:	e7aa      	b.n	8011a14 <_printf_i+0x148>
 8011abe:	6923      	ldr	r3, [r4, #16]
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	4649      	mov	r1, r9
 8011ac4:	4640      	mov	r0, r8
 8011ac6:	47d0      	blx	sl
 8011ac8:	3001      	adds	r0, #1
 8011aca:	d0ad      	beq.n	8011a28 <_printf_i+0x15c>
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	079b      	lsls	r3, r3, #30
 8011ad0:	d413      	bmi.n	8011afa <_printf_i+0x22e>
 8011ad2:	68e0      	ldr	r0, [r4, #12]
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	4298      	cmp	r0, r3
 8011ad8:	bfb8      	it	lt
 8011ada:	4618      	movlt	r0, r3
 8011adc:	e7a6      	b.n	8011a2c <_printf_i+0x160>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	4632      	mov	r2, r6
 8011ae2:	4649      	mov	r1, r9
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	47d0      	blx	sl
 8011ae8:	3001      	adds	r0, #1
 8011aea:	d09d      	beq.n	8011a28 <_printf_i+0x15c>
 8011aec:	3501      	adds	r5, #1
 8011aee:	68e3      	ldr	r3, [r4, #12]
 8011af0:	9903      	ldr	r1, [sp, #12]
 8011af2:	1a5b      	subs	r3, r3, r1
 8011af4:	42ab      	cmp	r3, r5
 8011af6:	dcf2      	bgt.n	8011ade <_printf_i+0x212>
 8011af8:	e7eb      	b.n	8011ad2 <_printf_i+0x206>
 8011afa:	2500      	movs	r5, #0
 8011afc:	f104 0619 	add.w	r6, r4, #25
 8011b00:	e7f5      	b.n	8011aee <_printf_i+0x222>
 8011b02:	bf00      	nop
 8011b04:	08014da0 	.word	0x08014da0
 8011b08:	08014db1 	.word	0x08014db1

08011b0c <__sflush_r>:
 8011b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b14:	0716      	lsls	r6, r2, #28
 8011b16:	4605      	mov	r5, r0
 8011b18:	460c      	mov	r4, r1
 8011b1a:	d454      	bmi.n	8011bc6 <__sflush_r+0xba>
 8011b1c:	684b      	ldr	r3, [r1, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	dc02      	bgt.n	8011b28 <__sflush_r+0x1c>
 8011b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dd48      	ble.n	8011bba <__sflush_r+0xae>
 8011b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b2a:	2e00      	cmp	r6, #0
 8011b2c:	d045      	beq.n	8011bba <__sflush_r+0xae>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b34:	682f      	ldr	r7, [r5, #0]
 8011b36:	6a21      	ldr	r1, [r4, #32]
 8011b38:	602b      	str	r3, [r5, #0]
 8011b3a:	d030      	beq.n	8011b9e <__sflush_r+0x92>
 8011b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b3e:	89a3      	ldrh	r3, [r4, #12]
 8011b40:	0759      	lsls	r1, r3, #29
 8011b42:	d505      	bpl.n	8011b50 <__sflush_r+0x44>
 8011b44:	6863      	ldr	r3, [r4, #4]
 8011b46:	1ad2      	subs	r2, r2, r3
 8011b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b4a:	b10b      	cbz	r3, 8011b50 <__sflush_r+0x44>
 8011b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b4e:	1ad2      	subs	r2, r2, r3
 8011b50:	2300      	movs	r3, #0
 8011b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b54:	6a21      	ldr	r1, [r4, #32]
 8011b56:	4628      	mov	r0, r5
 8011b58:	47b0      	blx	r6
 8011b5a:	1c43      	adds	r3, r0, #1
 8011b5c:	89a3      	ldrh	r3, [r4, #12]
 8011b5e:	d106      	bne.n	8011b6e <__sflush_r+0x62>
 8011b60:	6829      	ldr	r1, [r5, #0]
 8011b62:	291d      	cmp	r1, #29
 8011b64:	d82b      	bhi.n	8011bbe <__sflush_r+0xb2>
 8011b66:	4a2a      	ldr	r2, [pc, #168]	@ (8011c10 <__sflush_r+0x104>)
 8011b68:	410a      	asrs	r2, r1
 8011b6a:	07d6      	lsls	r6, r2, #31
 8011b6c:	d427      	bmi.n	8011bbe <__sflush_r+0xb2>
 8011b6e:	2200      	movs	r2, #0
 8011b70:	6062      	str	r2, [r4, #4]
 8011b72:	04d9      	lsls	r1, r3, #19
 8011b74:	6922      	ldr	r2, [r4, #16]
 8011b76:	6022      	str	r2, [r4, #0]
 8011b78:	d504      	bpl.n	8011b84 <__sflush_r+0x78>
 8011b7a:	1c42      	adds	r2, r0, #1
 8011b7c:	d101      	bne.n	8011b82 <__sflush_r+0x76>
 8011b7e:	682b      	ldr	r3, [r5, #0]
 8011b80:	b903      	cbnz	r3, 8011b84 <__sflush_r+0x78>
 8011b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b86:	602f      	str	r7, [r5, #0]
 8011b88:	b1b9      	cbz	r1, 8011bba <__sflush_r+0xae>
 8011b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b8e:	4299      	cmp	r1, r3
 8011b90:	d002      	beq.n	8011b98 <__sflush_r+0x8c>
 8011b92:	4628      	mov	r0, r5
 8011b94:	f000 f924 	bl	8011de0 <_free_r>
 8011b98:	2300      	movs	r3, #0
 8011b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b9c:	e00d      	b.n	8011bba <__sflush_r+0xae>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	47b0      	blx	r6
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	1c50      	adds	r0, r2, #1
 8011ba8:	d1c9      	bne.n	8011b3e <__sflush_r+0x32>
 8011baa:	682b      	ldr	r3, [r5, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d0c6      	beq.n	8011b3e <__sflush_r+0x32>
 8011bb0:	2b1d      	cmp	r3, #29
 8011bb2:	d001      	beq.n	8011bb8 <__sflush_r+0xac>
 8011bb4:	2b16      	cmp	r3, #22
 8011bb6:	d11e      	bne.n	8011bf6 <__sflush_r+0xea>
 8011bb8:	602f      	str	r7, [r5, #0]
 8011bba:	2000      	movs	r0, #0
 8011bbc:	e022      	b.n	8011c04 <__sflush_r+0xf8>
 8011bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bc2:	b21b      	sxth	r3, r3
 8011bc4:	e01b      	b.n	8011bfe <__sflush_r+0xf2>
 8011bc6:	690f      	ldr	r7, [r1, #16]
 8011bc8:	2f00      	cmp	r7, #0
 8011bca:	d0f6      	beq.n	8011bba <__sflush_r+0xae>
 8011bcc:	0793      	lsls	r3, r2, #30
 8011bce:	680e      	ldr	r6, [r1, #0]
 8011bd0:	bf08      	it	eq
 8011bd2:	694b      	ldreq	r3, [r1, #20]
 8011bd4:	600f      	str	r7, [r1, #0]
 8011bd6:	bf18      	it	ne
 8011bd8:	2300      	movne	r3, #0
 8011bda:	eba6 0807 	sub.w	r8, r6, r7
 8011bde:	608b      	str	r3, [r1, #8]
 8011be0:	f1b8 0f00 	cmp.w	r8, #0
 8011be4:	dde9      	ble.n	8011bba <__sflush_r+0xae>
 8011be6:	6a21      	ldr	r1, [r4, #32]
 8011be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011bea:	4643      	mov	r3, r8
 8011bec:	463a      	mov	r2, r7
 8011bee:	4628      	mov	r0, r5
 8011bf0:	47b0      	blx	r6
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	dc08      	bgt.n	8011c08 <__sflush_r+0xfc>
 8011bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bfe:	81a3      	strh	r3, [r4, #12]
 8011c00:	f04f 30ff 	mov.w	r0, #4294967295
 8011c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c08:	4407      	add	r7, r0
 8011c0a:	eba8 0800 	sub.w	r8, r8, r0
 8011c0e:	e7e7      	b.n	8011be0 <__sflush_r+0xd4>
 8011c10:	dfbffffe 	.word	0xdfbffffe

08011c14 <_fflush_r>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	690b      	ldr	r3, [r1, #16]
 8011c18:	4605      	mov	r5, r0
 8011c1a:	460c      	mov	r4, r1
 8011c1c:	b913      	cbnz	r3, 8011c24 <_fflush_r+0x10>
 8011c1e:	2500      	movs	r5, #0
 8011c20:	4628      	mov	r0, r5
 8011c22:	bd38      	pop	{r3, r4, r5, pc}
 8011c24:	b118      	cbz	r0, 8011c2e <_fflush_r+0x1a>
 8011c26:	6a03      	ldr	r3, [r0, #32]
 8011c28:	b90b      	cbnz	r3, 8011c2e <_fflush_r+0x1a>
 8011c2a:	f7ff faab 	bl	8011184 <__sinit>
 8011c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d0f3      	beq.n	8011c1e <_fflush_r+0xa>
 8011c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c38:	07d0      	lsls	r0, r2, #31
 8011c3a:	d404      	bmi.n	8011c46 <_fflush_r+0x32>
 8011c3c:	0599      	lsls	r1, r3, #22
 8011c3e:	d402      	bmi.n	8011c46 <_fflush_r+0x32>
 8011c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c42:	f7ff fbae 	bl	80113a2 <__retarget_lock_acquire_recursive>
 8011c46:	4628      	mov	r0, r5
 8011c48:	4621      	mov	r1, r4
 8011c4a:	f7ff ff5f 	bl	8011b0c <__sflush_r>
 8011c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c50:	07da      	lsls	r2, r3, #31
 8011c52:	4605      	mov	r5, r0
 8011c54:	d4e4      	bmi.n	8011c20 <_fflush_r+0xc>
 8011c56:	89a3      	ldrh	r3, [r4, #12]
 8011c58:	059b      	lsls	r3, r3, #22
 8011c5a:	d4e1      	bmi.n	8011c20 <_fflush_r+0xc>
 8011c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c5e:	f7ff fba1 	bl	80113a4 <__retarget_lock_release_recursive>
 8011c62:	e7dd      	b.n	8011c20 <_fflush_r+0xc>

08011c64 <fiprintf>:
 8011c64:	b40e      	push	{r1, r2, r3}
 8011c66:	b503      	push	{r0, r1, lr}
 8011c68:	4601      	mov	r1, r0
 8011c6a:	ab03      	add	r3, sp, #12
 8011c6c:	4805      	ldr	r0, [pc, #20]	@ (8011c84 <fiprintf+0x20>)
 8011c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c72:	6800      	ldr	r0, [r0, #0]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	f7ff fca3 	bl	80115c0 <_vfiprintf_r>
 8011c7a:	b002      	add	sp, #8
 8011c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c80:	b003      	add	sp, #12
 8011c82:	4770      	bx	lr
 8011c84:	2000003c 	.word	0x2000003c

08011c88 <__swbuf_r>:
 8011c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c8a:	460e      	mov	r6, r1
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	4605      	mov	r5, r0
 8011c90:	b118      	cbz	r0, 8011c9a <__swbuf_r+0x12>
 8011c92:	6a03      	ldr	r3, [r0, #32]
 8011c94:	b90b      	cbnz	r3, 8011c9a <__swbuf_r+0x12>
 8011c96:	f7ff fa75 	bl	8011184 <__sinit>
 8011c9a:	69a3      	ldr	r3, [r4, #24]
 8011c9c:	60a3      	str	r3, [r4, #8]
 8011c9e:	89a3      	ldrh	r3, [r4, #12]
 8011ca0:	071a      	lsls	r2, r3, #28
 8011ca2:	d501      	bpl.n	8011ca8 <__swbuf_r+0x20>
 8011ca4:	6923      	ldr	r3, [r4, #16]
 8011ca6:	b943      	cbnz	r3, 8011cba <__swbuf_r+0x32>
 8011ca8:	4621      	mov	r1, r4
 8011caa:	4628      	mov	r0, r5
 8011cac:	f000 f82a 	bl	8011d04 <__swsetup_r>
 8011cb0:	b118      	cbz	r0, 8011cba <__swbuf_r+0x32>
 8011cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8011cb6:	4638      	mov	r0, r7
 8011cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	6922      	ldr	r2, [r4, #16]
 8011cbe:	1a98      	subs	r0, r3, r2
 8011cc0:	6963      	ldr	r3, [r4, #20]
 8011cc2:	b2f6      	uxtb	r6, r6
 8011cc4:	4283      	cmp	r3, r0
 8011cc6:	4637      	mov	r7, r6
 8011cc8:	dc05      	bgt.n	8011cd6 <__swbuf_r+0x4e>
 8011cca:	4621      	mov	r1, r4
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f7ff ffa1 	bl	8011c14 <_fflush_r>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d1ed      	bne.n	8011cb2 <__swbuf_r+0x2a>
 8011cd6:	68a3      	ldr	r3, [r4, #8]
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	60a3      	str	r3, [r4, #8]
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	1c5a      	adds	r2, r3, #1
 8011ce0:	6022      	str	r2, [r4, #0]
 8011ce2:	701e      	strb	r6, [r3, #0]
 8011ce4:	6962      	ldr	r2, [r4, #20]
 8011ce6:	1c43      	adds	r3, r0, #1
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d004      	beq.n	8011cf6 <__swbuf_r+0x6e>
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	07db      	lsls	r3, r3, #31
 8011cf0:	d5e1      	bpl.n	8011cb6 <__swbuf_r+0x2e>
 8011cf2:	2e0a      	cmp	r6, #10
 8011cf4:	d1df      	bne.n	8011cb6 <__swbuf_r+0x2e>
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f7ff ff8b 	bl	8011c14 <_fflush_r>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d0d9      	beq.n	8011cb6 <__swbuf_r+0x2e>
 8011d02:	e7d6      	b.n	8011cb2 <__swbuf_r+0x2a>

08011d04 <__swsetup_r>:
 8011d04:	b538      	push	{r3, r4, r5, lr}
 8011d06:	4b29      	ldr	r3, [pc, #164]	@ (8011dac <__swsetup_r+0xa8>)
 8011d08:	4605      	mov	r5, r0
 8011d0a:	6818      	ldr	r0, [r3, #0]
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	b118      	cbz	r0, 8011d18 <__swsetup_r+0x14>
 8011d10:	6a03      	ldr	r3, [r0, #32]
 8011d12:	b90b      	cbnz	r3, 8011d18 <__swsetup_r+0x14>
 8011d14:	f7ff fa36 	bl	8011184 <__sinit>
 8011d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d1c:	0719      	lsls	r1, r3, #28
 8011d1e:	d422      	bmi.n	8011d66 <__swsetup_r+0x62>
 8011d20:	06da      	lsls	r2, r3, #27
 8011d22:	d407      	bmi.n	8011d34 <__swsetup_r+0x30>
 8011d24:	2209      	movs	r2, #9
 8011d26:	602a      	str	r2, [r5, #0]
 8011d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d2c:	81a3      	strh	r3, [r4, #12]
 8011d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d32:	e033      	b.n	8011d9c <__swsetup_r+0x98>
 8011d34:	0758      	lsls	r0, r3, #29
 8011d36:	d512      	bpl.n	8011d5e <__swsetup_r+0x5a>
 8011d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d3a:	b141      	cbz	r1, 8011d4e <__swsetup_r+0x4a>
 8011d3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d40:	4299      	cmp	r1, r3
 8011d42:	d002      	beq.n	8011d4a <__swsetup_r+0x46>
 8011d44:	4628      	mov	r0, r5
 8011d46:	f000 f84b 	bl	8011de0 <_free_r>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d4e:	89a3      	ldrh	r3, [r4, #12]
 8011d50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d54:	81a3      	strh	r3, [r4, #12]
 8011d56:	2300      	movs	r3, #0
 8011d58:	6063      	str	r3, [r4, #4]
 8011d5a:	6923      	ldr	r3, [r4, #16]
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	89a3      	ldrh	r3, [r4, #12]
 8011d60:	f043 0308 	orr.w	r3, r3, #8
 8011d64:	81a3      	strh	r3, [r4, #12]
 8011d66:	6923      	ldr	r3, [r4, #16]
 8011d68:	b94b      	cbnz	r3, 8011d7e <__swsetup_r+0x7a>
 8011d6a:	89a3      	ldrh	r3, [r4, #12]
 8011d6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d74:	d003      	beq.n	8011d7e <__swsetup_r+0x7a>
 8011d76:	4621      	mov	r1, r4
 8011d78:	4628      	mov	r0, r5
 8011d7a:	f000 f8a1 	bl	8011ec0 <__smakebuf_r>
 8011d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d82:	f013 0201 	ands.w	r2, r3, #1
 8011d86:	d00a      	beq.n	8011d9e <__swsetup_r+0x9a>
 8011d88:	2200      	movs	r2, #0
 8011d8a:	60a2      	str	r2, [r4, #8]
 8011d8c:	6962      	ldr	r2, [r4, #20]
 8011d8e:	4252      	negs	r2, r2
 8011d90:	61a2      	str	r2, [r4, #24]
 8011d92:	6922      	ldr	r2, [r4, #16]
 8011d94:	b942      	cbnz	r2, 8011da8 <__swsetup_r+0xa4>
 8011d96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d9a:	d1c5      	bne.n	8011d28 <__swsetup_r+0x24>
 8011d9c:	bd38      	pop	{r3, r4, r5, pc}
 8011d9e:	0799      	lsls	r1, r3, #30
 8011da0:	bf58      	it	pl
 8011da2:	6962      	ldrpl	r2, [r4, #20]
 8011da4:	60a2      	str	r2, [r4, #8]
 8011da6:	e7f4      	b.n	8011d92 <__swsetup_r+0x8e>
 8011da8:	2000      	movs	r0, #0
 8011daa:	e7f7      	b.n	8011d9c <__swsetup_r+0x98>
 8011dac:	2000003c 	.word	0x2000003c

08011db0 <_sbrk_r>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	4d06      	ldr	r5, [pc, #24]	@ (8011dcc <_sbrk_r+0x1c>)
 8011db4:	2300      	movs	r3, #0
 8011db6:	4604      	mov	r4, r0
 8011db8:	4608      	mov	r0, r1
 8011dba:	602b      	str	r3, [r5, #0]
 8011dbc:	f7ee fdd2 	bl	8000964 <_sbrk>
 8011dc0:	1c43      	adds	r3, r0, #1
 8011dc2:	d102      	bne.n	8011dca <_sbrk_r+0x1a>
 8011dc4:	682b      	ldr	r3, [r5, #0]
 8011dc6:	b103      	cbz	r3, 8011dca <_sbrk_r+0x1a>
 8011dc8:	6023      	str	r3, [r4, #0]
 8011dca:	bd38      	pop	{r3, r4, r5, pc}
 8011dcc:	2000bee8 	.word	0x2000bee8

08011dd0 <abort>:
 8011dd0:	b508      	push	{r3, lr}
 8011dd2:	2006      	movs	r0, #6
 8011dd4:	f000 f8d8 	bl	8011f88 <raise>
 8011dd8:	2001      	movs	r0, #1
 8011dda:	f7ee fd4b 	bl	8000874 <_exit>
	...

08011de0 <_free_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4605      	mov	r5, r0
 8011de4:	2900      	cmp	r1, #0
 8011de6:	d041      	beq.n	8011e6c <_free_r+0x8c>
 8011de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dec:	1f0c      	subs	r4, r1, #4
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	bfb8      	it	lt
 8011df2:	18e4      	addlt	r4, r4, r3
 8011df4:	f7ff fbae 	bl	8011554 <__malloc_lock>
 8011df8:	4a1d      	ldr	r2, [pc, #116]	@ (8011e70 <_free_r+0x90>)
 8011dfa:	6813      	ldr	r3, [r2, #0]
 8011dfc:	b933      	cbnz	r3, 8011e0c <_free_r+0x2c>
 8011dfe:	6063      	str	r3, [r4, #4]
 8011e00:	6014      	str	r4, [r2, #0]
 8011e02:	4628      	mov	r0, r5
 8011e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e08:	f7ff bbaa 	b.w	8011560 <__malloc_unlock>
 8011e0c:	42a3      	cmp	r3, r4
 8011e0e:	d908      	bls.n	8011e22 <_free_r+0x42>
 8011e10:	6820      	ldr	r0, [r4, #0]
 8011e12:	1821      	adds	r1, r4, r0
 8011e14:	428b      	cmp	r3, r1
 8011e16:	bf01      	itttt	eq
 8011e18:	6819      	ldreq	r1, [r3, #0]
 8011e1a:	685b      	ldreq	r3, [r3, #4]
 8011e1c:	1809      	addeq	r1, r1, r0
 8011e1e:	6021      	streq	r1, [r4, #0]
 8011e20:	e7ed      	b.n	8011dfe <_free_r+0x1e>
 8011e22:	461a      	mov	r2, r3
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	b10b      	cbz	r3, 8011e2c <_free_r+0x4c>
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	d9fa      	bls.n	8011e22 <_free_r+0x42>
 8011e2c:	6811      	ldr	r1, [r2, #0]
 8011e2e:	1850      	adds	r0, r2, r1
 8011e30:	42a0      	cmp	r0, r4
 8011e32:	d10b      	bne.n	8011e4c <_free_r+0x6c>
 8011e34:	6820      	ldr	r0, [r4, #0]
 8011e36:	4401      	add	r1, r0
 8011e38:	1850      	adds	r0, r2, r1
 8011e3a:	4283      	cmp	r3, r0
 8011e3c:	6011      	str	r1, [r2, #0]
 8011e3e:	d1e0      	bne.n	8011e02 <_free_r+0x22>
 8011e40:	6818      	ldr	r0, [r3, #0]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	6053      	str	r3, [r2, #4]
 8011e46:	4408      	add	r0, r1
 8011e48:	6010      	str	r0, [r2, #0]
 8011e4a:	e7da      	b.n	8011e02 <_free_r+0x22>
 8011e4c:	d902      	bls.n	8011e54 <_free_r+0x74>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	602b      	str	r3, [r5, #0]
 8011e52:	e7d6      	b.n	8011e02 <_free_r+0x22>
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	1821      	adds	r1, r4, r0
 8011e58:	428b      	cmp	r3, r1
 8011e5a:	bf04      	itt	eq
 8011e5c:	6819      	ldreq	r1, [r3, #0]
 8011e5e:	685b      	ldreq	r3, [r3, #4]
 8011e60:	6063      	str	r3, [r4, #4]
 8011e62:	bf04      	itt	eq
 8011e64:	1809      	addeq	r1, r1, r0
 8011e66:	6021      	streq	r1, [r4, #0]
 8011e68:	6054      	str	r4, [r2, #4]
 8011e6a:	e7ca      	b.n	8011e02 <_free_r+0x22>
 8011e6c:	bd38      	pop	{r3, r4, r5, pc}
 8011e6e:	bf00      	nop
 8011e70:	2000c034 	.word	0x2000c034

08011e74 <__swhatbuf_r>:
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	460c      	mov	r4, r1
 8011e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e7c:	2900      	cmp	r1, #0
 8011e7e:	b096      	sub	sp, #88	@ 0x58
 8011e80:	4615      	mov	r5, r2
 8011e82:	461e      	mov	r6, r3
 8011e84:	da0d      	bge.n	8011ea2 <__swhatbuf_r+0x2e>
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e8c:	f04f 0100 	mov.w	r1, #0
 8011e90:	bf14      	ite	ne
 8011e92:	2340      	movne	r3, #64	@ 0x40
 8011e94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e98:	2000      	movs	r0, #0
 8011e9a:	6031      	str	r1, [r6, #0]
 8011e9c:	602b      	str	r3, [r5, #0]
 8011e9e:	b016      	add	sp, #88	@ 0x58
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}
 8011ea2:	466a      	mov	r2, sp
 8011ea4:	f000 f878 	bl	8011f98 <_fstat_r>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	dbec      	blt.n	8011e86 <__swhatbuf_r+0x12>
 8011eac:	9901      	ldr	r1, [sp, #4]
 8011eae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011eb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011eb6:	4259      	negs	r1, r3
 8011eb8:	4159      	adcs	r1, r3
 8011eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ebe:	e7eb      	b.n	8011e98 <__swhatbuf_r+0x24>

08011ec0 <__smakebuf_r>:
 8011ec0:	898b      	ldrh	r3, [r1, #12]
 8011ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ec4:	079d      	lsls	r5, r3, #30
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	460c      	mov	r4, r1
 8011eca:	d507      	bpl.n	8011edc <__smakebuf_r+0x1c>
 8011ecc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	6123      	str	r3, [r4, #16]
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	6163      	str	r3, [r4, #20]
 8011ed8:	b003      	add	sp, #12
 8011eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011edc:	ab01      	add	r3, sp, #4
 8011ede:	466a      	mov	r2, sp
 8011ee0:	f7ff ffc8 	bl	8011e74 <__swhatbuf_r>
 8011ee4:	9f00      	ldr	r7, [sp, #0]
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	4639      	mov	r1, r7
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7ff fab2 	bl	8011454 <_malloc_r>
 8011ef0:	b948      	cbnz	r0, 8011f06 <__smakebuf_r+0x46>
 8011ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ef6:	059a      	lsls	r2, r3, #22
 8011ef8:	d4ee      	bmi.n	8011ed8 <__smakebuf_r+0x18>
 8011efa:	f023 0303 	bic.w	r3, r3, #3
 8011efe:	f043 0302 	orr.w	r3, r3, #2
 8011f02:	81a3      	strh	r3, [r4, #12]
 8011f04:	e7e2      	b.n	8011ecc <__smakebuf_r+0xc>
 8011f06:	89a3      	ldrh	r3, [r4, #12]
 8011f08:	6020      	str	r0, [r4, #0]
 8011f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f0e:	81a3      	strh	r3, [r4, #12]
 8011f10:	9b01      	ldr	r3, [sp, #4]
 8011f12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f16:	b15b      	cbz	r3, 8011f30 <__smakebuf_r+0x70>
 8011f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	f000 f84d 	bl	8011fbc <_isatty_r>
 8011f22:	b128      	cbz	r0, 8011f30 <__smakebuf_r+0x70>
 8011f24:	89a3      	ldrh	r3, [r4, #12]
 8011f26:	f023 0303 	bic.w	r3, r3, #3
 8011f2a:	f043 0301 	orr.w	r3, r3, #1
 8011f2e:	81a3      	strh	r3, [r4, #12]
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	431d      	orrs	r5, r3
 8011f34:	81a5      	strh	r5, [r4, #12]
 8011f36:	e7cf      	b.n	8011ed8 <__smakebuf_r+0x18>

08011f38 <_raise_r>:
 8011f38:	291f      	cmp	r1, #31
 8011f3a:	b538      	push	{r3, r4, r5, lr}
 8011f3c:	4605      	mov	r5, r0
 8011f3e:	460c      	mov	r4, r1
 8011f40:	d904      	bls.n	8011f4c <_raise_r+0x14>
 8011f42:	2316      	movs	r3, #22
 8011f44:	6003      	str	r3, [r0, #0]
 8011f46:	f04f 30ff 	mov.w	r0, #4294967295
 8011f4a:	bd38      	pop	{r3, r4, r5, pc}
 8011f4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011f4e:	b112      	cbz	r2, 8011f56 <_raise_r+0x1e>
 8011f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f54:	b94b      	cbnz	r3, 8011f6a <_raise_r+0x32>
 8011f56:	4628      	mov	r0, r5
 8011f58:	f000 f852 	bl	8012000 <_getpid_r>
 8011f5c:	4622      	mov	r2, r4
 8011f5e:	4601      	mov	r1, r0
 8011f60:	4628      	mov	r0, r5
 8011f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f66:	f000 b839 	b.w	8011fdc <_kill_r>
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d00a      	beq.n	8011f84 <_raise_r+0x4c>
 8011f6e:	1c59      	adds	r1, r3, #1
 8011f70:	d103      	bne.n	8011f7a <_raise_r+0x42>
 8011f72:	2316      	movs	r3, #22
 8011f74:	6003      	str	r3, [r0, #0]
 8011f76:	2001      	movs	r0, #1
 8011f78:	e7e7      	b.n	8011f4a <_raise_r+0x12>
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f80:	4620      	mov	r0, r4
 8011f82:	4798      	blx	r3
 8011f84:	2000      	movs	r0, #0
 8011f86:	e7e0      	b.n	8011f4a <_raise_r+0x12>

08011f88 <raise>:
 8011f88:	4b02      	ldr	r3, [pc, #8]	@ (8011f94 <raise+0xc>)
 8011f8a:	4601      	mov	r1, r0
 8011f8c:	6818      	ldr	r0, [r3, #0]
 8011f8e:	f7ff bfd3 	b.w	8011f38 <_raise_r>
 8011f92:	bf00      	nop
 8011f94:	2000003c 	.word	0x2000003c

08011f98 <_fstat_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4d07      	ldr	r5, [pc, #28]	@ (8011fb8 <_fstat_r+0x20>)
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	4608      	mov	r0, r1
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	602b      	str	r3, [r5, #0]
 8011fa6:	f7ee fcb5 	bl	8000914 <_fstat>
 8011faa:	1c43      	adds	r3, r0, #1
 8011fac:	d102      	bne.n	8011fb4 <_fstat_r+0x1c>
 8011fae:	682b      	ldr	r3, [r5, #0]
 8011fb0:	b103      	cbz	r3, 8011fb4 <_fstat_r+0x1c>
 8011fb2:	6023      	str	r3, [r4, #0]
 8011fb4:	bd38      	pop	{r3, r4, r5, pc}
 8011fb6:	bf00      	nop
 8011fb8:	2000bee8 	.word	0x2000bee8

08011fbc <_isatty_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4d06      	ldr	r5, [pc, #24]	@ (8011fd8 <_isatty_r+0x1c>)
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	4608      	mov	r0, r1
 8011fc6:	602b      	str	r3, [r5, #0]
 8011fc8:	f7ee fcb4 	bl	8000934 <_isatty>
 8011fcc:	1c43      	adds	r3, r0, #1
 8011fce:	d102      	bne.n	8011fd6 <_isatty_r+0x1a>
 8011fd0:	682b      	ldr	r3, [r5, #0]
 8011fd2:	b103      	cbz	r3, 8011fd6 <_isatty_r+0x1a>
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	bd38      	pop	{r3, r4, r5, pc}
 8011fd8:	2000bee8 	.word	0x2000bee8

08011fdc <_kill_r>:
 8011fdc:	b538      	push	{r3, r4, r5, lr}
 8011fde:	4d07      	ldr	r5, [pc, #28]	@ (8011ffc <_kill_r+0x20>)
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	602b      	str	r3, [r5, #0]
 8011fea:	f7ee fc31 	bl	8000850 <_kill>
 8011fee:	1c43      	adds	r3, r0, #1
 8011ff0:	d102      	bne.n	8011ff8 <_kill_r+0x1c>
 8011ff2:	682b      	ldr	r3, [r5, #0]
 8011ff4:	b103      	cbz	r3, 8011ff8 <_kill_r+0x1c>
 8011ff6:	6023      	str	r3, [r4, #0]
 8011ff8:	bd38      	pop	{r3, r4, r5, pc}
 8011ffa:	bf00      	nop
 8011ffc:	2000bee8 	.word	0x2000bee8

08012000 <_getpid_r>:
 8012000:	f7ee bc1e 	b.w	8000840 <_getpid>

08012004 <_init>:
 8012004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012006:	bf00      	nop
 8012008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801200a:	bc08      	pop	{r3}
 801200c:	469e      	mov	lr, r3
 801200e:	4770      	bx	lr

08012010 <_fini>:
 8012010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012012:	bf00      	nop
 8012014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012016:	bc08      	pop	{r3}
 8012018:	469e      	mov	lr, r3
 801201a:	4770      	bx	lr
