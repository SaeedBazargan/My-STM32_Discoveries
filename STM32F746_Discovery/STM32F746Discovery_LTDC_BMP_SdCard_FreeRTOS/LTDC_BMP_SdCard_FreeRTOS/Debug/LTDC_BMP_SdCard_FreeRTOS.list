
LTDC_BMP_SdCard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800df58  0800df58  0000ef58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e684  0800e684  0001006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e684  0800e684  0000f684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e68c  0800e68c  0001006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e68c  0800e68c  0000f68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e690  0800e690  0000f690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800e694  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000460c0  2000006c  0800e700  0001006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004612c  0800e700  0001012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5fd  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005602  00000000  00000000  0002f699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001500  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d30b  00000000  00000000  00037d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026cf8  00000000  00000000  0006504b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff05c  00000000  00000000  0008bd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ad9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa8  00000000  00000000  0018ade4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0019288c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800df40 	.word	0x0800df40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800df40 	.word	0x0800df40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <MX_DMA_Init+0x48>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <MX_DMA_Init+0x48>)
 8000bc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <MX_DMA_Init+0x48>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2105      	movs	r1, #5
 8000bde:	203b      	movs	r0, #59	@ 0x3b
 8000be0:	f001 f924 	bl	8001e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000be4:	203b      	movs	r0, #59	@ 0x3b
 8000be6:	f001 f93d 	bl	8001e64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	2045      	movs	r0, #69	@ 0x45
 8000bf0:	f001 f91c 	bl	8001e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000bf4:	2045      	movs	r0, #69	@ 0x45
 8000bf6:	f001 f935 	bl	8001e64 <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	4a06      	ldr	r2, [pc, #24]	@ (8000c38 <vApplicationGetIdleTaskMemory+0x30>)
 8000c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	2000012c 	.word	0x2000012c

08000c3c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <MX_FREERTOS_Init+0x30>)
 8000c44:	1d3c      	adds	r4, r7, #4
 8000c46:	461d      	mov	r5, r3
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f009 f8ad 	bl	8009db8 <osThreadCreate>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a03      	ldr	r2, [pc, #12]	@ (8000c70 <MX_FREERTOS_Init+0x34>)
 8000c62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6c:	0800df64 	.word	0x0800df64
 8000c70:	20000088 	.word	0x20000088

08000c74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	if(Debug)
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <StartDefaultTask+0x24>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <StartDefaultTask+0x18>
	{
		testLTDC();
 8000c84:	f000 fb1a 	bl	80012bc <testLTDC>
		testSdCard();
 8000c88:	f000 fc58 	bl	800153c <testSdCard>
	}
	testImage_Show();
 8000c8c:	f000 fc78 	bl	8001580 <testImage_Show>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f009 f8dd 	bl	8009e50 <osDelay>
 8000c96:	e7fb      	b.n	8000c90 <StartDefaultTask+0x1c>
 8000c98:	200003d4 	.word	0x200003d4

08000c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	@ 0x40
 8000ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb2:	4b58      	ldr	r3, [pc, #352]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a57      	ldr	r2, [pc, #348]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b55      	ldr	r3, [pc, #340]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b52      	ldr	r3, [pc, #328]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a51      	ldr	r2, [pc, #324]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a4b      	ldr	r2, [pc, #300]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b49      	ldr	r3, [pc, #292]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	623b      	str	r3, [r7, #32]
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b46      	ldr	r3, [pc, #280]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a45      	ldr	r2, [pc, #276]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b43      	ldr	r3, [pc, #268]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d12:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a3f      	ldr	r2, [pc, #252]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a39      	ldr	r2, [pc, #228]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b37      	ldr	r3, [pc, #220]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a27      	ldr	r2, [pc, #156]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_GPIO_Init+0x178>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_BL_CTRL_GPIO_Port, LTDC_BL_CTRL_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2108      	movs	r1, #8
 8000da6:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <MX_GPIO_Init+0x17c>)
 8000da8:	f001 fdd4 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_DISP_GPIO_Port, LTDC_DISP_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db2:	481a      	ldr	r0, [pc, #104]	@ (8000e1c <MX_GPIO_Init+0x180>)
 8000db4:	f001 fdce 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8000db8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4814      	ldr	r0, [pc, #80]	@ (8000e20 <MX_GPIO_Init+0x184>)
 8000dce:	f001 fbfd 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LTDC_BL_CTRL_Pin;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LTDC_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <MX_GPIO_Init+0x17c>)
 8000dea:	f001 fbef 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_DISP_Pin */
  GPIO_InitStruct.Pin = LTDC_DISP_Pin;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LTDC_DISP_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_GPIO_Init+0x180>)
 8000e08:	f001 fbe0 	bl	80025cc <HAL_GPIO_Init>

}
 8000e0c:	bf00      	nop
 8000e0e:	3740      	adds	r7, #64	@ 0x40
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40022800 	.word	0x40022800
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	40020800 	.word	0x40020800

08000e24 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	@ 0x38
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2234      	movs	r2, #52	@ 0x34
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00c f9a3 	bl	800d17c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e36:	4b3a      	ldr	r3, [pc, #232]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e38:	4a3a      	ldr	r2, [pc, #232]	@ (8000f24 <MX_LTDC_Init+0x100>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e42:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e48:	4b35      	ldr	r3, [pc, #212]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e4e:	4b34      	ldr	r3, [pc, #208]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e54:	4b32      	ldr	r3, [pc, #200]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e56:	2228      	movs	r2, #40	@ 0x28
 8000e58:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000e5a:	4b31      	ldr	r3, [pc, #196]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e5c:	2209      	movs	r2, #9
 8000e5e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000e60:	4b2f      	ldr	r3, [pc, #188]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e62:	2235      	movs	r2, #53	@ 0x35
 8000e64:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e66:	4b2e      	ldr	r3, [pc, #184]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e68:	220b      	movs	r2, #11
 8000e6a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e6e:	f240 2215 	movw	r2, #533	@ 0x215
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e76:	f240 121b 	movw	r2, #283	@ 0x11b
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000e7c:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e7e:	f240 2235 	movw	r2, #565	@ 0x235
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000e84:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e86:	f240 121d 	movw	r2, #285	@ 0x11d
 8000e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e9c:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ea4:	481e      	ldr	r0, [pc, #120]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000ea6:	f001 fd6f 	bl	8002988 <HAL_LTDC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000eb0:	f000 fb8e 	bl	80015d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000eb8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000ebc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000ec2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000ec6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ecc:	23ff      	movs	r3, #255	@ 0xff
 8000ece:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000ee2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ee8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <MX_LTDC_Init+0xfc>)
 8000f08:	f001 fe0e 	bl	8002b28 <HAL_LTDC_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000f12:	f000 fb5d 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3738      	adds	r7, #56	@ 0x38
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000032c 	.word	0x2000032c
 8000f24:	40016800 	.word	0x40016800

08000f28 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	2284      	movs	r2, #132	@ 0x84
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00c f917 	bl	800d17c <memset>
  if(ltdcHandle->Instance==LTDC)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6a      	ldr	r2, [pc, #424]	@ (80010fc <HAL_LTDC_MspInit+0x1d4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f040 80cc 	bne.w	80010f2 <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8000f5e:	233c      	movs	r3, #60	@ 0x3c
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000f62:	2305      	movs	r3, #5
 8000f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f72:	2300      	movs	r3, #0
 8000f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fc8a 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8000f86:	f000 fb23 	bl	80015d0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000f90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b5a      	ldr	r3, [pc, #360]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	4b57      	ldr	r3, [pc, #348]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a56      	ldr	r2, [pc, #344]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fba:	4b51      	ldr	r3, [pc, #324]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a50      	ldr	r2, [pc, #320]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a4a      	ldr	r2, [pc, #296]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b48      	ldr	r3, [pc, #288]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	4b45      	ldr	r3, [pc, #276]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a44      	ldr	r2, [pc, #272]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001002:	4b3f      	ldr	r3, [pc, #252]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a3e      	ldr	r2, [pc, #248]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b3c      	ldr	r3, [pc, #240]	@ (8001100 <HAL_LTDC_MspInit+0x1d8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800101a:	2310      	movs	r3, #16
 800101c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001032:	230e      	movs	r3, #14
 8001034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001038:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800103c:	4619      	mov	r1, r3
 800103e:	4831      	ldr	r0, [pc, #196]	@ (8001104 <HAL_LTDC_MspInit+0x1dc>)
 8001040:	f001 fac4 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001044:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105e:	230e      	movs	r3, #14
 8001060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001064:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001068:	4619      	mov	r1, r3
 800106a:	4827      	ldr	r0, [pc, #156]	@ (8001108 <HAL_LTDC_MspInit+0x1e0>)
 800106c:	f001 faae 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001070:	23f7      	movs	r3, #247	@ 0xf7
 8001072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001088:	230e      	movs	r3, #14
 800108a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800108e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001092:	4619      	mov	r1, r3
 8001094:	481d      	ldr	r0, [pc, #116]	@ (800110c <HAL_LTDC_MspInit+0x1e4>)
 8001096:	f001 fa99 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800109a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010b4:	2309      	movs	r3, #9
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	4813      	ldr	r0, [pc, #76]	@ (8001110 <HAL_LTDC_MspInit+0x1e8>)
 80010c2:	f001 fa83 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80010c6:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e0:	230e      	movs	r3, #14
 80010e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <HAL_LTDC_MspInit+0x1ec>)
 80010ee:	f001 fa6d 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010f2:	bf00      	nop
 80010f4:	37b8      	adds	r7, #184	@ 0xb8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40016800 	.word	0x40016800
 8001100:	40023800 	.word	0x40023800
 8001104:	40021000 	.word	0x40021000
 8001108:	40022400 	.word	0x40022400
 800110c:	40022800 	.word	0x40022800
 8001110:	40021800 	.word	0x40021800
 8001114:	40022000 	.word	0x40022000

08001118 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001120:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001124:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001130:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001134:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001138:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001140:	e000      	b.n	8001144 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001142:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001144:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f9      	beq.n	8001142 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800114e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e009      	b.n	8001190 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	60ba      	str	r2, [r7, #8]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffc7 	bl	8001118 <ITM_SendChar>
	for(i = 0; i < len; i++)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	429a      	cmp	r2, r3
 8001196:	dbf1      	blt.n	800117c <_write+0x16>
	}
	return len;
 8001198:	687b      	ldr	r3, [r7, #4]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 fd37 	bl	8001c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f820 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff fd74 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 80011b4:	f7ff fd02 	bl	8000bbc <MX_DMA_Init>
  MX_LTDC_Init();
 80011b8:	f7ff fe34 	bl	8000e24 <MX_LTDC_Init>
  MX_SDMMC1_SD_Init();
 80011bc:	f000 fa56 	bl	800166c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80011c0:	f005 f91c 	bl	80063fc <MX_FATFS_Init>
  MX_RNG_Init();
 80011c4:	f000 fa0a 	bl	80015dc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)&imageBuffer, 0);
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <main+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	@ (80011ec <main+0x48>)
 80011d0:	f001 fce8 	bl	8002ba4 <HAL_LTDC_SetAddress>
  TFT_FillScreen((uint32_t)0x0000);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f005 fb85 	bl	80068e4 <TFT_FillScreen>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011da:	f7ff fd2f 	bl	8000c3c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011de:	f008 fdc8 	bl	8009d72 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e2:	bf00      	nop
 80011e4:	e7fd      	b.n	80011e2 <main+0x3e>
 80011e6:	bf00      	nop
 80011e8:	2000058c 	.word	0x2000058c
 80011ec:	2000032c 	.word	0x2000032c

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	@ 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	@ 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00b ffbc 	bl	800d17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <SystemClock_Config+0xc4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	4a26      	ldr	r2, [pc, #152]	@ (80012b4 <SystemClock_Config+0xc4>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <SystemClock_Config+0xc4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <SystemClock_Config+0xc8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a21      	ldr	r2, [pc, #132]	@ (80012b8 <SystemClock_Config+0xc8>)
 8001232:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <SystemClock_Config+0xc8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124e:	2302      	movs	r3, #2
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001252:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001258:	230f      	movs	r3, #15
 800125a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800125c:	23d8      	movs	r3, #216	@ 0xd8
 800125e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001264:	2308      	movs	r3, #8
 8001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fe69 	bl	8002f44 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001278:	f000 f9aa 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001288:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001292:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2105      	movs	r1, #5
 800129a:	4618      	mov	r0, r3
 800129c:	f002 f8f6 	bl	800348c <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80012a6:	f000 f993 	bl	80015d0 <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3750      	adds	r7, #80	@ 0x50
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40007000 	.word	0x40007000

080012bc <testLTDC>:

/* USER CODE BEGIN 4 */
void testLTDC(void)
{
 80012bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af02      	add	r7, sp, #8
	for(uint16_t i = 0; i < 25; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	81fb      	strh	r3, [r7, #14]
 80012c8:	e00d      	b.n	80012e6 <testLTDC+0x2a>
	{
		TFT_FillScreen((uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 80012ca:	4899      	ldr	r0, [pc, #612]	@ (8001530 <testLTDC+0x274>)
 80012cc:	f002 ff52 	bl	8004174 <HAL_RNG_GetRandomNumber>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fb05 	bl	80068e4 <TFT_FillScreen>
		HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	@ 0x64
 80012dc:	f000 fcca 	bl	8001c74 <HAL_Delay>
	for(uint16_t i = 0; i < 25; i++)
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	3301      	adds	r3, #1
 80012e4:	81fb      	strh	r3, [r7, #14]
 80012e6:	89fb      	ldrh	r3, [r7, #14]
 80012e8:	2b18      	cmp	r3, #24
 80012ea:	d9ee      	bls.n	80012ca <testLTDC+0xe>
	}

	TFT_FillScreen(0);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 faf9 	bl	80068e4 <TFT_FillScreen>
	HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f6:	f000 fcbd 	bl	8001c74 <HAL_Delay>

	for(uint16_t i = 0; i < 250; i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	e04a      	b.n	8001396 <testLTDC+0xda>
	{
		TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng) % 480,
 8001300:	488b      	ldr	r0, [pc, #556]	@ (8001530 <testLTDC+0x274>)
 8001302:	f002 ff37 	bl	8004174 <HAL_RNG_GetRandomNumber>
 8001306:	4601      	mov	r1, r0
 8001308:	4b8a      	ldr	r3, [pc, #552]	@ (8001534 <testLTDC+0x278>)
 800130a:	fba3 2301 	umull	r2, r3, r3, r1
 800130e:	0a1a      	lsrs	r2, r3, #8
 8001310:	4613      	mov	r3, r2
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	1aca      	subs	r2, r1, r3
 800131a:	b294      	uxth	r4, r2
			HAL_RNG_GetRandomNumber(&hrng) % 272,
 800131c:	4884      	ldr	r0, [pc, #528]	@ (8001530 <testLTDC+0x274>)
 800131e:	f002 ff29 	bl	8004174 <HAL_RNG_GetRandomNumber>
 8001322:	4601      	mov	r1, r0
 8001324:	4b84      	ldr	r3, [pc, #528]	@ (8001538 <testLTDC+0x27c>)
 8001326:	fba3 2301 	umull	r2, r3, r3, r1
 800132a:	0a1a      	lsrs	r2, r3, #8
 800132c:	4613      	mov	r3, r2
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	1aca      	subs	r2, r1, r3
		TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng) % 480,
 8001336:	b295      	uxth	r5, r2
			HAL_RNG_GetRandomNumber(&hrng) % 480,
 8001338:	487d      	ldr	r0, [pc, #500]	@ (8001530 <testLTDC+0x274>)
 800133a:	f002 ff1b 	bl	8004174 <HAL_RNG_GetRandomNumber>
 800133e:	4601      	mov	r1, r0
 8001340:	4b7c      	ldr	r3, [pc, #496]	@ (8001534 <testLTDC+0x278>)
 8001342:	fba3 2301 	umull	r2, r3, r3, r1
 8001346:	0a1a      	lsrs	r2, r3, #8
 8001348:	4613      	mov	r3, r2
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	1aca      	subs	r2, r1, r3
		TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng) % 480,
 8001352:	b296      	uxth	r6, r2
			HAL_RNG_GetRandomNumber(&hrng) % 272,
 8001354:	4876      	ldr	r0, [pc, #472]	@ (8001530 <testLTDC+0x274>)
 8001356:	f002 ff0d 	bl	8004174 <HAL_RNG_GetRandomNumber>
 800135a:	4601      	mov	r1, r0
 800135c:	4b76      	ldr	r3, [pc, #472]	@ (8001538 <testLTDC+0x27c>)
 800135e:	fba3 2301 	umull	r2, r3, r3, r1
 8001362:	0a1a      	lsrs	r2, r3, #8
 8001364:	4613      	mov	r3, r2
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	1aca      	subs	r2, r1, r3
		TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng) % 480,
 800136e:	fa1f f882 	uxth.w	r8, r2
			(uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001372:	486f      	ldr	r0, [pc, #444]	@ (8001530 <testLTDC+0x274>)
 8001374:	f002 fefe 	bl	8004174 <HAL_RNG_GetRandomNumber>
 8001378:	4603      	mov	r3, r0
		TFT_FillRectangle(HAL_RNG_GetRandomNumber(&hrng) % 480,
 800137a:	b29b      	uxth	r3, r3
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4643      	mov	r3, r8
 8001380:	4632      	mov	r2, r6
 8001382:	4629      	mov	r1, r5
 8001384:	4620      	mov	r0, r4
 8001386:	f005 fad3 	bl	8006930 <TFT_FillRectangle>
		HAL_Delay(10);
 800138a:	200a      	movs	r0, #10
 800138c:	f000 fc72 	bl	8001c74 <HAL_Delay>
	for(uint16_t i = 0; i < 250; i++)
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	81bb      	strh	r3, [r7, #12]
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	2bf9      	cmp	r3, #249	@ 0xf9
 800139a:	d9b1      	bls.n	8001300 <testLTDC+0x44>
	}

	TFT_FillScreen(0);
 800139c:	2000      	movs	r0, #0
 800139e:	f005 faa1 	bl	80068e4 <TFT_FillScreen>
	HAL_Delay(1000);
 80013a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a6:	f000 fc65 	bl	8001c74 <HAL_Delay>

	for(uint16_t i = 0; i < 2500; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	e055      	b.n	800145c <testLTDC+0x1a0>
	{
		for(uint16_t j = 0; j < 25; j++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	813b      	strh	r3, [r7, #8]
 80013b4:	e023      	b.n	80013fe <testLTDC+0x142>
		{
			TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng) % 480, HAL_RNG_GetRandomNumber(&hrng) % 272, 0);
 80013b6:	485e      	ldr	r0, [pc, #376]	@ (8001530 <testLTDC+0x274>)
 80013b8:	f002 fedc 	bl	8004174 <HAL_RNG_GetRandomNumber>
 80013bc:	4601      	mov	r1, r0
 80013be:	4b5d      	ldr	r3, [pc, #372]	@ (8001534 <testLTDC+0x278>)
 80013c0:	fba3 2301 	umull	r2, r3, r3, r1
 80013c4:	0a1a      	lsrs	r2, r3, #8
 80013c6:	4613      	mov	r3, r2
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	1aca      	subs	r2, r1, r3
 80013d0:	b294      	uxth	r4, r2
 80013d2:	4857      	ldr	r0, [pc, #348]	@ (8001530 <testLTDC+0x274>)
 80013d4:	f002 fece 	bl	8004174 <HAL_RNG_GetRandomNumber>
 80013d8:	4601      	mov	r1, r0
 80013da:	4b57      	ldr	r3, [pc, #348]	@ (8001538 <testLTDC+0x27c>)
 80013dc:	fba3 2301 	umull	r2, r3, r3, r1
 80013e0:	0a1a      	lsrs	r2, r3, #8
 80013e2:	4613      	mov	r3, r2
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	1aca      	subs	r2, r1, r3
 80013ec:	b293      	uxth	r3, r2
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4620      	mov	r0, r4
 80013f4:	f005 faea 	bl	80069cc <TFT_DrawPixel>
		for(uint16_t j = 0; j < 25; j++)
 80013f8:	893b      	ldrh	r3, [r7, #8]
 80013fa:	3301      	adds	r3, #1
 80013fc:	813b      	strh	r3, [r7, #8]
 80013fe:	893b      	ldrh	r3, [r7, #8]
 8001400:	2b18      	cmp	r3, #24
 8001402:	d9d8      	bls.n	80013b6 <testLTDC+0xfa>
		}

		TFT_DrawPixel(HAL_RNG_GetRandomNumber(&hrng) % 480, HAL_RNG_GetRandomNumber(&hrng) % 272, (uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 8001404:	484a      	ldr	r0, [pc, #296]	@ (8001530 <testLTDC+0x274>)
 8001406:	f002 feb5 	bl	8004174 <HAL_RNG_GetRandomNumber>
 800140a:	4601      	mov	r1, r0
 800140c:	4b49      	ldr	r3, [pc, #292]	@ (8001534 <testLTDC+0x278>)
 800140e:	fba3 2301 	umull	r2, r3, r3, r1
 8001412:	0a1a      	lsrs	r2, r3, #8
 8001414:	4613      	mov	r3, r2
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	015b      	lsls	r3, r3, #5
 800141c:	1aca      	subs	r2, r1, r3
 800141e:	b294      	uxth	r4, r2
 8001420:	4843      	ldr	r0, [pc, #268]	@ (8001530 <testLTDC+0x274>)
 8001422:	f002 fea7 	bl	8004174 <HAL_RNG_GetRandomNumber>
 8001426:	4601      	mov	r1, r0
 8001428:	4b43      	ldr	r3, [pc, #268]	@ (8001538 <testLTDC+0x27c>)
 800142a:	fba3 2301 	umull	r2, r3, r3, r1
 800142e:	0a1a      	lsrs	r2, r3, #8
 8001430:	4613      	mov	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	1aca      	subs	r2, r1, r3
 800143a:	b295      	uxth	r5, r2
 800143c:	483c      	ldr	r0, [pc, #240]	@ (8001530 <testLTDC+0x274>)
 800143e:	f002 fe99 	bl	8004174 <HAL_RNG_GetRandomNumber>
 8001442:	4603      	mov	r3, r0
 8001444:	b29b      	uxth	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	4629      	mov	r1, r5
 800144a:	4620      	mov	r0, r4
 800144c:	f005 fabe 	bl	80069cc <TFT_DrawPixel>
		HAL_Delay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f000 fc0f 	bl	8001c74 <HAL_Delay>
	for(uint16_t i = 0; i < 2500; i++)
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	3301      	adds	r3, #1
 800145a:	817b      	strh	r3, [r7, #10]
 800145c:	897b      	ldrh	r3, [r7, #10]
 800145e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001462:	4293      	cmp	r3, r2
 8001464:	d9a4      	bls.n	80013b0 <testLTDC+0xf4>
	}

	TFT_FillScreen(0);
 8001466:	2000      	movs	r0, #0
 8001468:	f005 fa3c 	bl	80068e4 <TFT_FillScreen>
	HAL_Delay(1000);
 800146c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001470:	f000 fc00 	bl	8001c74 <HAL_Delay>

	for(uint16_t i = 0; i < 250; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	80fb      	strh	r3, [r7, #6]
 8001478:	e04a      	b.n	8001510 <testLTDC+0x254>
	{
		TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng) % 480,
 800147a:	482d      	ldr	r0, [pc, #180]	@ (8001530 <testLTDC+0x274>)
 800147c:	f002 fe7a 	bl	8004174 <HAL_RNG_GetRandomNumber>
 8001480:	4601      	mov	r1, r0
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <testLTDC+0x278>)
 8001484:	fba3 2301 	umull	r2, r3, r3, r1
 8001488:	0a1a      	lsrs	r2, r3, #8
 800148a:	4613      	mov	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	015b      	lsls	r3, r3, #5
 8001492:	1aca      	subs	r2, r1, r3
 8001494:	b294      	uxth	r4, r2
			HAL_RNG_GetRandomNumber(&hrng) % 272,
 8001496:	4826      	ldr	r0, [pc, #152]	@ (8001530 <testLTDC+0x274>)
 8001498:	f002 fe6c 	bl	8004174 <HAL_RNG_GetRandomNumber>
 800149c:	4601      	mov	r1, r0
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <testLTDC+0x27c>)
 80014a0:	fba3 2301 	umull	r2, r3, r3, r1
 80014a4:	0a1a      	lsrs	r2, r3, #8
 80014a6:	4613      	mov	r3, r2
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1aca      	subs	r2, r1, r3
		TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng) % 480,
 80014b0:	b295      	uxth	r5, r2
			HAL_RNG_GetRandomNumber(&hrng) % 480,
 80014b2:	481f      	ldr	r0, [pc, #124]	@ (8001530 <testLTDC+0x274>)
 80014b4:	f002 fe5e 	bl	8004174 <HAL_RNG_GetRandomNumber>
 80014b8:	4601      	mov	r1, r0
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <testLTDC+0x278>)
 80014bc:	fba3 2301 	umull	r2, r3, r3, r1
 80014c0:	0a1a      	lsrs	r2, r3, #8
 80014c2:	4613      	mov	r3, r2
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	1aca      	subs	r2, r1, r3
		TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng) % 480,
 80014cc:	b296      	uxth	r6, r2
			HAL_RNG_GetRandomNumber(&hrng) % 272,
 80014ce:	4818      	ldr	r0, [pc, #96]	@ (8001530 <testLTDC+0x274>)
 80014d0:	f002 fe50 	bl	8004174 <HAL_RNG_GetRandomNumber>
 80014d4:	4601      	mov	r1, r0
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <testLTDC+0x27c>)
 80014d8:	fba3 2301 	umull	r2, r3, r3, r1
 80014dc:	0a1a      	lsrs	r2, r3, #8
 80014de:	4613      	mov	r3, r2
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	1aca      	subs	r2, r1, r3
		TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng) % 480,
 80014e8:	fa1f f882 	uxth.w	r8, r2
			(uint16_t)HAL_RNG_GetRandomNumber(&hrng));
 80014ec:	4810      	ldr	r0, [pc, #64]	@ (8001530 <testLTDC+0x274>)
 80014ee:	f002 fe41 	bl	8004174 <HAL_RNG_GetRandomNumber>
 80014f2:	4603      	mov	r3, r0
		TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng) % 480,
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4643      	mov	r3, r8
 80014fa:	4632      	mov	r2, r6
 80014fc:	4629      	mov	r1, r5
 80014fe:	4620      	mov	r0, r4
 8001500:	f005 fa82 	bl	8006a08 <TFT_DrawLine>
		HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f000 fbb5 	bl	8001c74 <HAL_Delay>
	for(uint16_t i = 0; i < 250; i++)
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	3301      	adds	r3, #1
 800150e:	80fb      	strh	r3, [r7, #6]
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	2bf9      	cmp	r3, #249	@ 0xf9
 8001514:	d9b1      	bls.n	800147a <testLTDC+0x1be>
	}

	TFT_FillScreen(0);
 8001516:	2000      	movs	r0, #0
 8001518:	f005 f9e4 	bl	80068e4 <TFT_FillScreen>
	HAL_Delay(1000);
 800151c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001520:	f000 fba8 	bl	8001c74 <HAL_Delay>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800152e:	bf00      	nop
 8001530:	200003d8 	.word	0x200003d8
 8001534:	88888889 	.word	0x88888889
 8001538:	f0f0f0f1 	.word	0xf0f0f0f1

0800153c <testSdCard>:
// <---- ----------------------------------------- ---->
void testSdCard(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09a      	sub	sp, #104	@ 0x68
 8001540:	af00      	add	r7, sp, #0
	char sd_buffer[100];

	Mount_SD(SDPath);
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <testSdCard+0x38>)
 8001544:	f005 fb2e 	bl	8006ba4 <Mount_SD>
//	Format_SD();
	Check_SD_Space();
 8001548:	f005 fc84 	bl	8006e54 <Check_SD_Space>
	Create_File("MRL.txt");
 800154c:	480a      	ldr	r0, [pc, #40]	@ (8001578 <testSdCard+0x3c>)
 800154e:	f005 fb83 	bl	8006c58 <Create_File>
	sprintf(sd_buffer, "Hello MRL-HSL \n");
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4909      	ldr	r1, [pc, #36]	@ (800157c <testSdCard+0x40>)
 8001556:	4618      	mov	r0, r3
 8001558:	f00b fd18 	bl	800cf8c <siprintf>
	Update_File("MRL.txt", sd_buffer);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <testSdCard+0x3c>)
 8001562:	f005 fbe1 	bl	8006d28 <Update_File>
	Unmount_SD(SDPath);
 8001566:	4803      	ldr	r0, [pc, #12]	@ (8001574 <testSdCard+0x38>)
 8001568:	f005 fb4a 	bl	8006c00 <Unmount_SD>
}
 800156c:	bf00      	nop
 800156e:	3768      	adds	r7, #104	@ 0x68
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000584 	.word	0x20000584
 8001578:	0800df80 	.word	0x0800df80
 800157c:	0800df88 	.word	0x0800df88

08001580 <testImage_Show>:
// <---- ----------------------------------------- ---->
void testImage_Show(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
//	TFT_DrawBitmap(0, 0, image_data_testImage);

	uint16_t* imgData = Read_Bitmap("ourImage.bmp");
 8001586:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <testImage_Show+0x28>)
 8001588:	f005 fcb6 	bl	8006ef8 <Read_Bitmap>
 800158c:	6078      	str	r0, [r7, #4]
    if(imgData != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <testImage_Show+0x1e>
    {
        // Now you can use imgData for displaying or further processing
        TFT_DrawBitmap(0, 0, imgData);
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	2100      	movs	r1, #0
 8001598:	2000      	movs	r0, #0
 800159a:	f005 fabd 	bl	8006b18 <TFT_DrawBitmap>
    }
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800df98 	.word	0x0800df98

080015ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015be:	f000 fb39 	bl	8001c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40002000 	.word	0x40002000

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_RNG_Init+0x20>)
 80015e2:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <MX_RNG_Init+0x24>)
 80015e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_RNG_Init+0x20>)
 80015e8:	f002 fd44 	bl	8004074 <HAL_RNG_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015f2:	f7ff ffed 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200003d8 	.word	0x200003d8
 8001600:	50060800 	.word	0x50060800

08001604 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0a4      	sub	sp, #144	@ 0x90
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2284      	movs	r2, #132	@ 0x84
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00b fdb1 	bl	800d17c <memset>
  if(rngHandle->Instance==RNG)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_RNG_MspInit+0x60>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d11b      	bne.n	800165c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001624:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001628:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4618      	mov	r0, r3
 8001636:	f002 f92d 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001640:	f7ff ffc6 	bl	80015d0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_RNG_MspInit+0x64>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001648:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <HAL_RNG_MspInit+0x64>)
 800164a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800164e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_RNG_MspInit+0x64>)
 8001652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800165c:	bf00      	nop
 800165e:	3790      	adds	r7, #144	@ 0x90
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	50060800 	.word	0x50060800
 8001668:	40023800 	.word	0x40023800

0800166c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 8001672:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <MX_SDMMC1_SD_Init+0x3c>)
 8001674:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <MX_SDMMC1_SD_Init+0x38>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	200003e8 	.word	0x200003e8
 80016a8:	40012c00 	.word	0x40012c00

080016ac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0ac      	sub	sp, #176	@ 0xb0
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	2284      	movs	r2, #132	@ 0x84
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00b fd55 	bl	800d17c <memset>
  if(sdHandle->Instance==SDMMC1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a74      	ldr	r2, [pc, #464]	@ (80018a8 <HAL_SD_MspInit+0x1fc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	f040 80e0 	bne.w	800189e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80016de:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80016e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f8cd 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001700:	f7ff ff66 	bl	80015d0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001704:	4b69      	ldr	r3, [pc, #420]	@ (80018ac <HAL_SD_MspInit+0x200>)
 8001706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001708:	4a68      	ldr	r2, [pc, #416]	@ (80018ac <HAL_SD_MspInit+0x200>)
 800170a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800170e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001710:	4b66      	ldr	r3, [pc, #408]	@ (80018ac <HAL_SD_MspInit+0x200>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171c:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <HAL_SD_MspInit+0x200>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	4a62      	ldr	r2, [pc, #392]	@ (80018ac <HAL_SD_MspInit+0x200>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6313      	str	r3, [r2, #48]	@ 0x30
 8001728:	4b60      	ldr	r3, [pc, #384]	@ (80018ac <HAL_SD_MspInit+0x200>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001734:	4b5d      	ldr	r3, [pc, #372]	@ (80018ac <HAL_SD_MspInit+0x200>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	4a5c      	ldr	r2, [pc, #368]	@ (80018ac <HAL_SD_MspInit+0x200>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001740:	4b5a      	ldr	r3, [pc, #360]	@ (80018ac <HAL_SD_MspInit+0x200>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800174c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001766:	230c      	movs	r3, #12
 8001768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001770:	4619      	mov	r1, r3
 8001772:	484f      	ldr	r0, [pc, #316]	@ (80018b0 <HAL_SD_MspInit+0x204>)
 8001774:	f000 ff2a 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001778:	2304      	movs	r3, #4
 800177a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001790:	230c      	movs	r3, #12
 8001792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001796:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800179a:	4619      	mov	r1, r3
 800179c:	4845      	ldr	r0, [pc, #276]	@ (80018b4 <HAL_SD_MspInit+0x208>)
 800179e:	f000 ff15 	bl	80025cc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80017a2:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017a4:	4a45      	ldr	r2, [pc, #276]	@ (80018bc <HAL_SD_MspInit+0x210>)
 80017a6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80017a8:	4b43      	ldr	r3, [pc, #268]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b0:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c4:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017ca:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017cc:	4b3a      	ldr	r3, [pc, #232]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80017d4:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017d6:	2220      	movs	r2, #32
 80017d8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017e6:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017e8:	2203      	movs	r2, #3
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017f4:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017f6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80017fc:	482e      	ldr	r0, [pc, #184]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 80017fe:	f000 fb3f 	bl	8001e80 <HAL_DMA_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001808:	f7ff fee2 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a2a      	ldr	r2, [pc, #168]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
 8001812:	4a29      	ldr	r2, [pc, #164]	@ (80018b8 <HAL_SD_MspInit+0x20c>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800181a:	4a2a      	ldr	r2, [pc, #168]	@ (80018c4 <HAL_SD_MspInit+0x218>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800181e:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001820:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001824:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001826:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001828:	2240      	movs	r2, #64	@ 0x40
 800182a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001838:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800183c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001840:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001842:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001844:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001848:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800184c:	2220      	movs	r2, #32
 800184e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001858:	2204      	movs	r2, #4
 800185a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800185e:	2203      	movs	r2, #3
 8001860:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001864:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800186c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001870:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001872:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001874:	f000 fb04 	bl	8001e80 <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800187e:	f7ff fea7 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 8001886:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_SD_MspInit+0x214>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2105      	movs	r1, #5
 8001892:	2031      	movs	r0, #49	@ 0x31
 8001894:	f000 faca 	bl	8001e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001898:	2031      	movs	r0, #49	@ 0x31
 800189a:	f000 fae3 	bl	8001e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	37b0      	adds	r7, #176	@ 0xb0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40012c00 	.word	0x40012c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	2000046c 	.word	0x2000046c
 80018bc:	40026458 	.word	0x40026458
 80018c0:	200004cc 	.word	0x200004cc
 80018c4:	400264a0 	.word	0x400264a0

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <HAL_MspInit+0x4c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <HAL_MspInit+0x4c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f000 fa91 	bl	8001e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	@ 0x38
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <HAL_InitTick+0xe0>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	4a32      	ldr	r2, [pc, #200]	@ (80019f8 <HAL_InitTick+0xe0>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001932:	6413      	str	r3, [r2, #64]	@ 0x40
 8001934:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <HAL_InitTick+0xe0>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001940:	f107 0210 	add.w	r2, r7, #16
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f001 ff70 	bl	8003830 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800195a:	f001 ff55 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800195e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001960:	e004      	b.n	800196c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001962:	f001 ff51 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8001966:	4603      	mov	r3, r0
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800196c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196e:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <HAL_InitTick+0xe4>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	0c9b      	lsrs	r3, r3, #18
 8001976:	3b01      	subs	r3, #1
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <HAL_InitTick+0xe8>)
 800197c:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <HAL_InitTick+0xec>)
 800197e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_InitTick+0xe8>)
 8001982:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001986:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001988:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <HAL_InitTick+0xe8>)
 800198a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_InitTick+0xe8>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <HAL_InitTick+0xe8>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_InitTick+0xe8>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <HAL_InitTick+0xe8>)
 80019a2:	f003 fd25 	bl	80053f0 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11b      	bne.n	80019ec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80019b4:	4812      	ldr	r0, [pc, #72]	@ (8001a00 <HAL_InitTick+0xe8>)
 80019b6:	f003 fd7d 	bl	80054b4 <HAL_TIM_Base_Start_IT>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d111      	bne.n	80019ec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019c8:	202d      	movs	r0, #45	@ 0x2d
 80019ca:	f000 fa4b 	bl	8001e64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d808      	bhi.n	80019e6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	202d      	movs	r0, #45	@ 0x2d
 80019da:	f000 fa27 	bl	8001e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_InitTick+0xf0>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e002      	b.n	80019ec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3738      	adds	r7, #56	@ 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	2000052c 	.word	0x2000052c
 8001a04:	40002000 	.word	0x40002000
 8001a08:	20000004 	.word	0x20000004

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001a4a:	f003 fdab 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000052c 	.word	0x2000052c

08001a58 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <SDMMC1_IRQHandler+0x10>)
 8001a5e:	f002 fe1f 	bl	80046a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200003e8 	.word	0x200003e8

08001a6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <DMA2_Stream3_IRQHandler+0x10>)
 8001a72:	f000 fb35 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000046c 	.word	0x2000046c

08001a80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <DMA2_Stream6_IRQHandler+0x10>)
 8001a86:	f000 fb2b 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200004cc 	.word	0x200004cc

08001a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
  }

  return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_isatty>:

int _isatty(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	@ (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f00b fbbc 	bl	800d2e4 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20050000 	.word	0x20050000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	20000578 	.word	0x20000578
 8001ba0:	20046130 	.word	0x20046130

08001ba4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bcc:	f7ff ffea 	bl	8001ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f00b fb7b 	bl	800d2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff fad3 	bl	80011a4 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c0c:	0800e694 	.word	0x0800e694
  ldr r2, =_sbss
 8001c10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c14:	2004612c 	.word	0x2004612c

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>

08001c1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f000 f8f9 	bl	8001e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c24:	200f      	movs	r0, #15
 8001c26:	f7ff fe77 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2a:	f7ff fe4d 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	2000057c 	.word	0x2000057c

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000057c 	.word	0x2000057c

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x40>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x40>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00
 8001d00:	05fa0000 	.word	0x05fa0000

08001d04 <__NVIC_GetPriorityGrouping>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	@ (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff4c 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3e:	f7ff ff61 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ffb1 	bl	8001db0 <NVIC_EncodePriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff80 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff54 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fee6 	bl	8001c5c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e099      	b.n	8001fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebc:	e00f      	b.n	8001ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebe:	f7ff fecd 	bl	8001c5c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d908      	bls.n	8001ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e078      	b.n	8001fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e8      	bne.n	8001ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <HAL_DMA_Init+0x158>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d117      	bne.n	8001fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00e      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 faa5 	bl	80024d4 <DMA_CheckFifoParam>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e016      	b.n	8001fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa5c 	bl	8002468 <DMA_CalcBaseAndBitshift>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb8:	223f      	movs	r2, #63	@ 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	f010803f 	.word	0xf010803f

08001fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_DMA_Start_IT+0x26>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e048      	b.n	8002094 <HAL_DMA_Start_IT+0xb8>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d137      	bne.n	8002086 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f9ee 	bl	800240c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	223f      	movs	r2, #63	@ 0x3f
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0216 	orr.w	r2, r2, #22
 800204a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800205a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e005      	b.n	8002092 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00c      	b.n	80020d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2205      	movs	r2, #5
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002328 <HAL_DMA_IRQHandler+0x248>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a8e      	ldr	r2, [pc, #568]	@ (800232c <HAL_DMA_IRQHandler+0x24c>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	2208      	movs	r2, #8
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01a      	beq.n	800214c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002138:	2208      	movs	r2, #8
 800213a:	409a      	lsls	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002150:	2201      	movs	r2, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	2201      	movs	r2, #1
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	2204      	movs	r2, #4
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	2204      	movs	r2, #4
 80021a6:	409a      	lsls	r2, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	2210      	movs	r2, #16
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d043      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03c      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2210      	movs	r2, #16
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d024      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	e01f      	b.n	8002250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01b      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e016      	b.n	8002250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0208 	bic.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	2220      	movs	r2, #32
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 808f 	beq.w	8002380 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8087 	beq.w	8002380 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2220      	movs	r2, #32
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b05      	cmp	r3, #5
 8002288:	d136      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0216 	bic.w	r2, r2, #22
 8002298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_DMA_IRQHandler+0x1da>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0208 	bic.w	r2, r2, #8
 80022c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	223f      	movs	r2, #63	@ 0x3f
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d07e      	beq.n	80023ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
        }
        return;
 80022f6:	e079      	b.n	80023ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01d      	beq.n	8002342 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	2b00      	cmp	r3, #0
 800231a:	d031      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
 8002324:	e02c      	b.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000
 800232c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d023      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e01e      	b.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10f      	bne.n	8002370 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0210 	bic.w	r2, r2, #16
 800235e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	2b00      	cmp	r3, #0
 8002386:	d032      	beq.n	80023ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d022      	beq.n	80023da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2205      	movs	r2, #5
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d307      	bcc.n	80023c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f2      	bne.n	80023ac <HAL_DMA_IRQHandler+0x2cc>
 80023c6:	e000      	b.n	80023ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e000      	b.n	80023ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80023ec:	bf00      	nop
    }
  }
}
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002428:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b40      	cmp	r3, #64	@ 0x40
 8002438:	d108      	bne.n	800244c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800244a:	e007      	b.n	800245c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3b10      	subs	r3, #16
 8002478:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <DMA_CalcBaseAndBitshift+0x60>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002482:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <DMA_CalcBaseAndBitshift+0x64>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d908      	bls.n	80024a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <DMA_CalcBaseAndBitshift+0x68>)
 800249e:	4013      	ands	r3, r2
 80024a0:	1d1a      	adds	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a6:	e006      	b.n	80024b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <DMA_CalcBaseAndBitshift+0x68>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	aaaaaaab 	.word	0xaaaaaaab
 80024cc:	0800e5b4 	.word	0x0800e5b4
 80024d0:	fffffc00 	.word	0xfffffc00

080024d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11f      	bne.n	800252e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d856      	bhi.n	80025a2 <DMA_CheckFifoParam+0xce>
 80024f4:	a201      	add	r2, pc, #4	@ (adr r2, 80024fc <DMA_CheckFifoParam+0x28>)
 80024f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fa:	bf00      	nop
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	0800251f 	.word	0x0800251f
 8002504:	0800250d 	.word	0x0800250d
 8002508:	080025a3 	.word	0x080025a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d046      	beq.n	80025a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251c:	e043      	b.n	80025a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002526:	d140      	bne.n	80025aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e03d      	b.n	80025aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002536:	d121      	bne.n	800257c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d837      	bhi.n	80025ae <DMA_CheckFifoParam+0xda>
 800253e:	a201      	add	r2, pc, #4	@ (adr r2, 8002544 <DMA_CheckFifoParam+0x70>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	08002555 	.word	0x08002555
 8002548:	0800255b 	.word	0x0800255b
 800254c:	08002555 	.word	0x08002555
 8002550:	0800256d 	.word	0x0800256d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e030      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d025      	beq.n	80025b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256a:	e022      	b.n	80025b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002574:	d11f      	bne.n	80025b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800257a:	e01c      	b.n	80025b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d903      	bls.n	800258a <DMA_CheckFifoParam+0xb6>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d003      	beq.n	8002590 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002588:	e018      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      break;
 800258e:	e015      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e00b      	b.n	80025ba <DMA_CheckFifoParam+0xe6>
      break;
 80025a2:	bf00      	nop
 80025a4:	e00a      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
 80025a8:	e008      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
 80025ac:	e006      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;   
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
    }
  } 
  
  return status; 
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e175      	b.n	80028d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	f040 8164 	bne.w	80028d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_GPIO_Init+0x56>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b03      	cmp	r3, #3
 800268e:	d017      	beq.n	80026c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80be 	beq.w	80028d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <HAL_GPIO_Init+0x324>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4a65      	ldr	r2, [pc, #404]	@ (80028f0 <HAL_GPIO_Init+0x324>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002760:	6453      	str	r3, [r2, #68]	@ 0x44
 8002762:	4b63      	ldr	r3, [pc, #396]	@ (80028f0 <HAL_GPIO_Init+0x324>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800276e:	4a61      	ldr	r2, [pc, #388]	@ (80028f4 <HAL_GPIO_Init+0x328>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a58      	ldr	r2, [pc, #352]	@ (80028f8 <HAL_GPIO_Init+0x32c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d037      	beq.n	800280a <HAL_GPIO_Init+0x23e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a57      	ldr	r2, [pc, #348]	@ (80028fc <HAL_GPIO_Init+0x330>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d031      	beq.n	8002806 <HAL_GPIO_Init+0x23a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a56      	ldr	r2, [pc, #344]	@ (8002900 <HAL_GPIO_Init+0x334>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02b      	beq.n	8002802 <HAL_GPIO_Init+0x236>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a55      	ldr	r2, [pc, #340]	@ (8002904 <HAL_GPIO_Init+0x338>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d025      	beq.n	80027fe <HAL_GPIO_Init+0x232>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a54      	ldr	r2, [pc, #336]	@ (8002908 <HAL_GPIO_Init+0x33c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <HAL_GPIO_Init+0x22e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a53      	ldr	r2, [pc, #332]	@ (800290c <HAL_GPIO_Init+0x340>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x22a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a52      	ldr	r2, [pc, #328]	@ (8002910 <HAL_GPIO_Init+0x344>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x226>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a51      	ldr	r2, [pc, #324]	@ (8002914 <HAL_GPIO_Init+0x348>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x222>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a50      	ldr	r2, [pc, #320]	@ (8002918 <HAL_GPIO_Init+0x34c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x21e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4f      	ldr	r2, [pc, #316]	@ (800291c <HAL_GPIO_Init+0x350>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x21a>
 80027e2:	2309      	movs	r3, #9
 80027e4:	e012      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027e6:	230a      	movs	r3, #10
 80027e8:	e010      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027ea:	2308      	movs	r3, #8
 80027ec:	e00e      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e00c      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027f2:	2306      	movs	r3, #6
 80027f4:	e00a      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027f6:	2305      	movs	r3, #5
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x240>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x240>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x240>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x240>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	@ (80028f4 <HAL_GPIO_Init+0x328>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b3d      	ldr	r3, [pc, #244]	@ (8002920 <HAL_GPIO_Init+0x354>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a34      	ldr	r2, [pc, #208]	@ (8002920 <HAL_GPIO_Init+0x354>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <HAL_GPIO_Init+0x354>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a29      	ldr	r2, [pc, #164]	@ (8002920 <HAL_GPIO_Init+0x354>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287e:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <HAL_GPIO_Init+0x354>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <HAL_GPIO_Init+0x354>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HAL_GPIO_Init+0x354>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <HAL_GPIO_Init+0x354>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f ae86 	bls.w	80025ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	@ 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40021400 	.word	0x40021400
 8002910:	40021800 	.word	0x40021800
 8002914:	40021c00 	.word	0x40021c00
 8002918:	40022000 	.word	0x40022000
 800291c:	40022400 	.word	0x40022400
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	e001      	b.n	8002946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0bf      	b.n	8002b1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe faba 	bl	8000f28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80029ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6999      	ldr	r1, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_LTDC_Init+0x19c>)
 80029fc:	400b      	ands	r3, r1
 80029fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68d9      	ldr	r1, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b3e      	ldr	r3, [pc, #248]	@ (8002b24 <HAL_LTDC_Init+0x19c>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68d9      	ldr	r1, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_LTDC_Init+0x19c>)
 8002a58:	400b      	ands	r3, r1
 8002a5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6959      	ldr	r1, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_LTDC_Init+0x19c>)
 8002a86:	400b      	ands	r3, r1
 8002a88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6959      	ldr	r1, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0206 	orr.w	r2, r2, #6
 8002af6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	f000f800 	.word	0xf000f800

08002b28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_LTDC_ConfigLayer+0x1a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e02c      	b.n	8002b9c <HAL_LTDC_ConfigLayer+0x74>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2134      	movs	r1, #52	@ 0x34
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4614      	mov	r4, r2
 8002b66:	461d      	mov	r5, r3
 8002b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f847 	bl	8002c10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2201      	movs	r2, #1
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}

08002ba4 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_LTDC_SetAddress+0x1a>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e024      	b.n	8002c08 <HAL_LTDC_SetAddress+0x64>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2234      	movs	r2, #52	@ 0x34
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	3338      	adds	r3, #56	@ 0x38
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f811 	bl	8002c10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	4413      	add	r3, r2
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	01db      	lsls	r3, r3, #7
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3384      	adds	r3, #132	@ 0x84
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4611      	mov	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	01d2      	lsls	r2, r2, #7
 8002c4c:	440a      	add	r2, r1
 8002c4e:	3284      	adds	r2, #132	@ 0x84
 8002c50:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002c54:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c66:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002c68:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	01db      	lsls	r3, r3, #7
 8002c74:	440b      	add	r3, r1
 8002c76:	3384      	adds	r3, #132	@ 0x84
 8002c78:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002c7e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c8e:	4413      	add	r3, r2
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	01db      	lsls	r3, r3, #7
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3384      	adds	r3, #132	@ 0x84
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	01d2      	lsls	r2, r2, #7
 8002cae:	440a      	add	r2, r1
 8002cb0:	3284      	adds	r2, #132	@ 0x84
 8002cb2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002cb6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc6:	4413      	add	r3, r2
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	01db      	lsls	r3, r3, #7
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3384      	adds	r3, #132	@ 0x84
 8002cd8:	4619      	mov	r1, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	01db      	lsls	r3, r3, #7
 8002cea:	4413      	add	r3, r2
 8002cec:	3384      	adds	r3, #132	@ 0x84
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	01d2      	lsls	r2, r2, #7
 8002cfa:	440a      	add	r2, r1
 8002cfc:	3284      	adds	r2, #132	@ 0x84
 8002cfe:	f023 0307 	bic.w	r3, r3, #7
 8002d02:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	01db      	lsls	r3, r3, #7
 8002d0e:	4413      	add	r3, r2
 8002d10:	3384      	adds	r3, #132	@ 0x84
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	01db      	lsls	r3, r3, #7
 8002d40:	4413      	add	r3, r2
 8002d42:	3384      	adds	r3, #132	@ 0x84
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	01db      	lsls	r3, r3, #7
 8002d50:	4413      	add	r3, r2
 8002d52:	3384      	adds	r3, #132	@ 0x84
 8002d54:	461a      	mov	r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d60:	461a      	mov	r2, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	01db      	lsls	r3, r3, #7
 8002d74:	440b      	add	r3, r1
 8002d76:	3384      	adds	r3, #132	@ 0x84
 8002d78:	4619      	mov	r1, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	01db      	lsls	r3, r3, #7
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3384      	adds	r3, #132	@ 0x84
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	4611      	mov	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	01d2      	lsls	r2, r2, #7
 8002d9a:	440a      	add	r2, r1
 8002d9c:	3284      	adds	r2, #132	@ 0x84
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002da2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	01db      	lsls	r3, r3, #7
 8002dae:	4413      	add	r3, r2
 8002db0:	3384      	adds	r3, #132	@ 0x84
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3384      	adds	r3, #132	@ 0x84
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3384      	adds	r3, #132	@ 0x84
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4b58      	ldr	r3, [pc, #352]	@ (8002f3c <LTDC_SetConfig+0x32c>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	6809      	ldr	r1, [r1, #0]
 8002dec:	4608      	mov	r0, r1
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	01c9      	lsls	r1, r1, #7
 8002df2:	4401      	add	r1, r0
 8002df4:	3184      	adds	r1, #132	@ 0x84
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	01db      	lsls	r3, r3, #7
 8002e04:	4413      	add	r3, r2
 8002e06:	3384      	adds	r3, #132	@ 0x84
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4413      	add	r3, r2
 8002e16:	3384      	adds	r3, #132	@ 0x84
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	01db      	lsls	r3, r3, #7
 8002e28:	4413      	add	r3, r2
 8002e2a:	3384      	adds	r3, #132	@ 0x84
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	e01b      	b.n	8002e7a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e014      	b.n	8002e7a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d00b      	beq.n	8002e70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d007      	beq.n	8002e70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d003      	beq.n	8002e70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d102      	bne.n	8002e76 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002e70:	2302      	movs	r3, #2
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e001      	b.n	8002e7a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	01db      	lsls	r3, r3, #7
 8002e84:	4413      	add	r3, r2
 8002e86:	3384      	adds	r3, #132	@ 0x84
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	01d2      	lsls	r2, r2, #7
 8002e94:	440a      	add	r2, r1
 8002e96:	3284      	adds	r2, #132	@ 0x84
 8002e98:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	1acb      	subs	r3, r1, r3
 8002eb4:	69f9      	ldr	r1, [r7, #28]
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	6809      	ldr	r1, [r1, #0]
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	01c9      	lsls	r1, r1, #7
 8002ec6:	4401      	add	r1, r0
 8002ec8:	3184      	adds	r1, #132	@ 0x84
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	01db      	lsls	r3, r3, #7
 8002ed8:	4413      	add	r3, r2
 8002eda:	3384      	adds	r3, #132	@ 0x84
 8002edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	01db      	lsls	r3, r3, #7
 8002ee8:	440b      	add	r3, r1
 8002eea:	3384      	adds	r3, #132	@ 0x84
 8002eec:	4619      	mov	r1, r3
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <LTDC_SetConfig+0x330>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	01db      	lsls	r3, r3, #7
 8002efe:	4413      	add	r3, r2
 8002f00:	3384      	adds	r3, #132	@ 0x84
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	01db      	lsls	r3, r3, #7
 8002f14:	4413      	add	r3, r2
 8002f16:	3384      	adds	r3, #132	@ 0x84
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	01d2      	lsls	r2, r2, #7
 8002f24:	440a      	add	r2, r1
 8002f26:	3284      	adds	r2, #132	@ 0x84
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	fffff8f8 	.word	0xfffff8f8
 8002f40:	fffff800 	.word	0xfffff800

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e291      	b.n	800347e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8087 	beq.w	8003076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f68:	4b96      	ldr	r3, [pc, #600]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d00c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f74:	4b93      	ldr	r3, [pc, #588]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d112      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x62>
 8002f80:	4b90      	ldr	r3, [pc, #576]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d06c      	beq.n	8003074 <HAL_RCC_OscConfig+0x130>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d168      	bne.n	8003074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e26b      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x7a>
 8002fb0:	4b84      	ldr	r3, [pc, #528]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a83      	ldr	r2, [pc, #524]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	e02e      	b.n	800301c <HAL_RCC_OscConfig+0xd8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x9c>
 8002fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7e      	ldr	r2, [pc, #504]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7b      	ldr	r2, [pc, #492]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e01d      	b.n	800301c <HAL_RCC_OscConfig+0xd8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0xc0>
 8002fea:	4b76      	ldr	r3, [pc, #472]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	4b73      	ldr	r3, [pc, #460]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a72      	ldr	r2, [pc, #456]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e00b      	b.n	800301c <HAL_RCC_OscConfig+0xd8>
 8003004:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a6e      	ldr	r2, [pc, #440]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800300a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b6c      	ldr	r3, [pc, #432]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6b      	ldr	r2, [pc, #428]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800301a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fe1a 	bl	8001c5c <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fe16 	bl	8001c5c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	@ 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e21f      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b61      	ldr	r3, [pc, #388]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0xe8>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fe06 	bl	8001c5c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fe02 	bl	8001c5c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	@ 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e20b      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	4b57      	ldr	r3, [pc, #348]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x110>
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d069      	beq.n	8003156 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003082:	4b50      	ldr	r3, [pc, #320]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308e:	4b4d      	ldr	r3, [pc, #308]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d11c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x190>
 800309a:	4b4a      	ldr	r3, [pc, #296]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d116      	bne.n	80030d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x17a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e1df      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b41      	ldr	r3, [pc, #260]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	493d      	ldr	r1, [pc, #244]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d2:	e040      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d023      	beq.n	8003124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030dc:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fdb8 	bl	8001c5c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fe fdb4 	bl	8001c5c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1bd      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b30      	ldr	r3, [pc, #192]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4929      	ldr	r1, [pc, #164]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
 8003122:	e018      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003124:	4b27      	ldr	r3, [pc, #156]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a26      	ldr	r2, [pc, #152]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fd94 	bl	8001c5c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7fe fd90 	bl	8001c5c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e199      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d038      	beq.n	80031d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316e:	4a15      	ldr	r2, [pc, #84]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fd71 	bl	8001c5c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe fd6d 	bl	8001c5c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e176      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003190:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x23a>
 800319c:	e01a      	b.n	80031d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe fd57 	bl	8001c5c <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b2:	f7fe fd53 	bl	8001c5c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d903      	bls.n	80031c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e15c      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
 80031c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	4b91      	ldr	r3, [pc, #580]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a4 	beq.w	800332a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10d      	bne.n	800320a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b88      	ldr	r3, [pc, #544]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	4a87      	ldr	r2, [pc, #540]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fa:	4b85      	ldr	r3, [pc, #532]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b82      	ldr	r3, [pc, #520]	@ (8003414 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d118      	bne.n	8003248 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003216:	4b7f      	ldr	r3, [pc, #508]	@ (8003414 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7e      	ldr	r2, [pc, #504]	@ (8003414 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe fd1b 	bl	8001c5c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322a:	f7fe fd17 	bl	8001c5c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	@ 0x64
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e120      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323c:	4b75      	ldr	r3, [pc, #468]	@ (8003414 <HAL_RCC_OscConfig+0x4d0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x31a>
 8003250:	4b6f      	ldr	r3, [pc, #444]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003254:	4a6e      	ldr	r2, [pc, #440]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	@ 0x70
 800325c:	e02d      	b.n	80032ba <HAL_RCC_OscConfig+0x376>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x33c>
 8003266:	4b6a      	ldr	r3, [pc, #424]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	4a69      	ldr	r2, [pc, #420]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6713      	str	r3, [r2, #112]	@ 0x70
 8003272:	4b67      	ldr	r3, [pc, #412]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	4a66      	ldr	r2, [pc, #408]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	6713      	str	r3, [r2, #112]	@ 0x70
 800327e:	e01c      	b.n	80032ba <HAL_RCC_OscConfig+0x376>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0x35e>
 8003288:	4b61      	ldr	r3, [pc, #388]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328c:	4a60      	ldr	r2, [pc, #384]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	6713      	str	r3, [r2, #112]	@ 0x70
 8003294:	4b5e      	ldr	r3, [pc, #376]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003298:	4a5d      	ldr	r2, [pc, #372]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0x376>
 80032a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ae:	4b58      	ldr	r3, [pc, #352]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b2:	4a57      	ldr	r2, [pc, #348]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d015      	beq.n	80032ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fccb 	bl	8001c5c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fe fcc7 	bl	8001c5c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0ce      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <HAL_RCC_OscConfig+0x386>
 80032ec:	e014      	b.n	8003318 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe fcb5 	bl	8001c5c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe fcb1 	bl	8001c5c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0b8      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	4b40      	ldr	r3, [pc, #256]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ee      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331e:	4b3c      	ldr	r3, [pc, #240]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	4a3b      	ldr	r2, [pc, #236]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a4 	beq.w	800347c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003334:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d06b      	beq.n	8003418 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d149      	bne.n	80033dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003348:	4b31      	ldr	r3, [pc, #196]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a30      	ldr	r2, [pc, #192]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fc82 	bl	8001c5c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe fc7e 	bl	8001c5c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e087      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	3b01      	subs	r3, #1
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	4313      	orrs	r3, r2
 80033a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fc52 	bl	8001c5c <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe fc4e 	bl	8001c5c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e057      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b10      	ldr	r3, [pc, #64]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x478>
 80033da:	e04f      	b.n	800347c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fc38 	bl	8001c5c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fc34 	bl	8001c5c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e03d      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4ac>
 800340e:	e035      	b.n	800347c <HAL_RCC_OscConfig+0x538>
 8003410:	40023800 	.word	0x40023800
 8003414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <HAL_RCC_OscConfig+0x544>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d028      	beq.n	8003478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d121      	bne.n	8003478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d11a      	bne.n	8003478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800344e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003450:	4293      	cmp	r3, r2
 8003452:	d111      	bne.n	8003478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	3b01      	subs	r3, #1
 8003462:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d107      	bne.n	8003478 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0d0      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d910      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 020f 	bic.w	r2, r3, #15
 80034ba:	4965      	ldr	r1, [pc, #404]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b63      	ldr	r3, [pc, #396]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0b8      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ec:	4b59      	ldr	r3, [pc, #356]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a58      	ldr	r2, [pc, #352]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 80034f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003504:	4b53      	ldr	r3, [pc, #332]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a52      	ldr	r2, [pc, #328]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800350e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003510:	4b50      	ldr	r3, [pc, #320]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	494d      	ldr	r1, [pc, #308]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d040      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	4b47      	ldr	r3, [pc, #284]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d115      	bne.n	800356e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e07f      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b41      	ldr	r3, [pc, #260]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e073      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	4b3d      	ldr	r3, [pc, #244]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06b      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4b39      	ldr	r3, [pc, #228]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 0203 	bic.w	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4936      	ldr	r1, [pc, #216]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f7fe fb6c 	bl	8001c5c <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	e00a      	b.n	800359e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003588:	f7fe fb68 	bl	8001c5c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e053      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	4b2d      	ldr	r3, [pc, #180]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 020c 	and.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1eb      	bne.n	8003588 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b0:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d210      	bcs.n	80035e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 020f 	bic.w	r2, r3, #15
 80035c6:	4922      	ldr	r1, [pc, #136]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e032      	b.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ec:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4916      	ldr	r1, [pc, #88]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	490e      	ldr	r1, [pc, #56]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800361e:	f000 f821 	bl	8003664 <HAL_RCC_GetSysClockFreq>
 8003622:	4602      	mov	r2, r0
 8003624:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	490a      	ldr	r1, [pc, #40]	@ (8003658 <HAL_RCC_ClockConfig+0x1cc>)
 8003630:	5ccb      	ldrb	r3, [r1, r3]
 8003632:	fa22 f303 	lsr.w	r3, r2, r3
 8003636:	4a09      	ldr	r2, [pc, #36]	@ (800365c <HAL_RCC_ClockConfig+0x1d0>)
 8003638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800363a:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <HAL_RCC_ClockConfig+0x1d4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe f96a 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023c00 	.word	0x40023c00
 8003654:	40023800 	.word	0x40023800
 8003658:	0800e59c 	.word	0x0800e59c
 800365c:	20000000 	.word	0x20000000
 8003660:	20000004 	.word	0x20000004

08003664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003668:	b090      	sub	sp, #64	@ 0x40
 800366a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003670:	2300      	movs	r3, #0
 8003672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003674:	2300      	movs	r3, #0
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800367c:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b08      	cmp	r3, #8
 8003686:	d00d      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003688:	2b08      	cmp	r3, #8
 800368a:	f200 80a1 	bhi.w	80037d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x34>
 8003692:	2b04      	cmp	r3, #4
 8003694:	d003      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x3a>
 8003696:	e09b      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800369c:	e09b      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800369e:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x188>)
 80036a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a2:	e098      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a4:	4b4f      	ldr	r3, [pc, #316]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ae:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d028      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ba:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	099b      	lsrs	r3, r3, #6
 80036c0:	2200      	movs	r2, #0
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036cc:	2100      	movs	r1, #0
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x188>)
 80036d0:	fb03 f201 	mul.w	r2, r3, r1
 80036d4:	2300      	movs	r3, #0
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	4413      	add	r3, r2
 80036dc:	4a43      	ldr	r2, [pc, #268]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x188>)
 80036de:	fba0 1202 	umull	r1, r2, r0, r2
 80036e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e4:	460a      	mov	r2, r1
 80036e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ea:	4413      	add	r3, r2
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f0:	2200      	movs	r2, #0
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	61fa      	str	r2, [r7, #28]
 80036f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80036fe:	f7fd f8e5 	bl	80008cc <__aeabi_uldivmod>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4613      	mov	r3, r2
 8003708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800370a:	e053      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370c:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	2200      	movs	r2, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	617a      	str	r2, [r7, #20]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800371e:	f04f 0b00 	mov.w	fp, #0
 8003722:	4652      	mov	r2, sl
 8003724:	465b      	mov	r3, fp
 8003726:	f04f 0000 	mov.w	r0, #0
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	0159      	lsls	r1, r3, #5
 8003730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003734:	0150      	lsls	r0, r2, #5
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	ebb2 080a 	subs.w	r8, r2, sl
 800373e:	eb63 090b 	sbc.w	r9, r3, fp
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800374e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003752:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003756:	ebb2 0408 	subs.w	r4, r2, r8
 800375a:	eb63 0509 	sbc.w	r5, r3, r9
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	00eb      	lsls	r3, r5, #3
 8003768:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376c:	00e2      	lsls	r2, r4, #3
 800376e:	4614      	mov	r4, r2
 8003770:	461d      	mov	r5, r3
 8003772:	eb14 030a 	adds.w	r3, r4, sl
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	eb45 030b 	adc.w	r3, r5, fp
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378a:	4629      	mov	r1, r5
 800378c:	028b      	lsls	r3, r1, #10
 800378e:	4621      	mov	r1, r4
 8003790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003794:	4621      	mov	r1, r4
 8003796:	028a      	lsls	r2, r1, #10
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379e:	2200      	movs	r2, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	60fa      	str	r2, [r7, #12]
 80037a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a8:	f7fd f890 	bl	80008cc <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4613      	mov	r3, r2
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	3301      	adds	r3, #1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80037c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80037d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3740      	adds	r7, #64	@ 0x40
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	017d7840 	.word	0x017d7840

080037f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b03      	ldr	r3, [pc, #12]	@ (8003804 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800380c:	f7ff fff0 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0a9b      	lsrs	r3, r3, #10
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	@ (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	0800e5ac 	.word	0x0800e5ac

08003830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	220f      	movs	r2, #15
 800383e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003840:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_RCC_GetClockConfig+0x5c>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800384c:	4b0f      	ldr	r3, [pc, #60]	@ (800388c <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_RCC_GetClockConfig+0x60>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 020f 	and.w	r2, r3, #15
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40023c00 	.word	0x40023c00

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d012      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038bc:	4b69      	ldr	r3, [pc, #420]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a68      	ldr	r2, [pc, #416]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	4b66      	ldr	r3, [pc, #408]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d0:	4964      	ldr	r1, [pc, #400]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d017      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	4959      	ldr	r1, [pc, #356]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d017      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800392a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003930:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	494a      	ldr	r1, [pc, #296]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 808b 	beq.w	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	4b3a      	ldr	r3, [pc, #232]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	4a39      	ldr	r2, [pc, #228]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6413      	str	r3, [r2, #64]	@ 0x40
 8003984:	4b37      	ldr	r3, [pc, #220]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003990:	4b35      	ldr	r3, [pc, #212]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a34      	ldr	r2, [pc, #208]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fe f95e 	bl	8001c5c <HAL_GetTick>
 80039a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a4:	f7fe f95a 	bl	8001c5c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	@ 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e357      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c2:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d035      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d02e      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e0:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a00:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a08:	4b16      	ldr	r3, [pc, #88]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d114      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe f922 	bl	8001c5c <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe f91e 	bl	8001c5c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e319      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4a:	d111      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a5a:	400b      	ands	r3, r1
 8003a5c:	4901      	ldr	r1, [pc, #4]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	0ffffcff 	.word	0x0ffffcff
 8003a70:	4baa      	ldr	r3, [pc, #680]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4aa9      	ldr	r2, [pc, #676]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a76:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a7a:	6093      	str	r3, [r2, #8]
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	49a4      	ldr	r1, [pc, #656]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a9a:	4ba0      	ldr	r3, [pc, #640]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa0:	4a9e      	ldr	r2, [pc, #632]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	4999      	ldr	r1, [pc, #612]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac8:	4b94      	ldr	r3, [pc, #592]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad6:	4991      	ldr	r1, [pc, #580]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aea:	4b8c      	ldr	r3, [pc, #560]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af8:	4988      	ldr	r1, [pc, #544]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b0c:	4b83      	ldr	r3, [pc, #524]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1a:	4980      	ldr	r1, [pc, #512]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	4977      	ldr	r1, [pc, #476]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b50:	4b72      	ldr	r3, [pc, #456]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	496f      	ldr	r1, [pc, #444]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b72:	4b6a      	ldr	r3, [pc, #424]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b78:	f023 020c 	bic.w	r2, r3, #12
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b80:	4966      	ldr	r1, [pc, #408]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b94:	4b61      	ldr	r3, [pc, #388]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba2:	495e      	ldr	r1, [pc, #376]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bb6:	4b59      	ldr	r3, [pc, #356]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	4955      	ldr	r1, [pc, #340]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be6:	494d      	ldr	r1, [pc, #308]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bfa:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c08:	4944      	ldr	r1, [pc, #272]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	493c      	ldr	r1, [pc, #240]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c3e:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4c:	4933      	ldr	r1, [pc, #204]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c60:	4b2e      	ldr	r3, [pc, #184]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c6e:	492b      	ldr	r1, [pc, #172]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c90:	4922      	ldr	r1, [pc, #136]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd0:	4912      	ldr	r1, [pc, #72]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf4:	4909      	ldr	r1, [pc, #36]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d006      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80d9 	beq.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d10:	4b02      	ldr	r3, [pc, #8]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a01      	ldr	r2, [pc, #4]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d1a:	e001      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d22:	f7fd ff9b 	bl	8001c5c <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d2a:	f7fd ff97 	bl	8001c5c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e194      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d021      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d5c:	4b64      	ldr	r3, [pc, #400]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d6a:	4b61      	ldr	r3, [pc, #388]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	019a      	lsls	r2, r3, #6
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	071b      	lsls	r3, r3, #28
 8003d90:	4957      	ldr	r1, [pc, #348]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc2:	d129      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd2:	4b47      	ldr	r3, [pc, #284]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd8:	0f1b      	lsrs	r3, r3, #28
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	019a      	lsls	r2, r3, #6
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	493d      	ldr	r1, [pc, #244]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e00:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e06:	f023 021f 	bic.w	r2, r3, #31
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4937      	ldr	r1, [pc, #220]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e24:	4b32      	ldr	r3, [pc, #200]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e2a:	0e1b      	lsrs	r3, r3, #24
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e38:	0f1b      	lsrs	r3, r3, #28
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	019a      	lsls	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	071b      	lsls	r3, r3, #28
 8003e58:	4925      	ldr	r1, [pc, #148]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	019a      	lsls	r2, r3, #6
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	071b      	lsls	r3, r3, #28
 8003e88:	4919      	ldr	r1, [pc, #100]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e90:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fede 	bl	8001c5c <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ea4:	f7fd feda 	bl	8001c5c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	@ 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0d7      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 80cd 	bne.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a08      	ldr	r2, [pc, #32]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd fec1 	bl	8001c5c <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ede:	f7fd febd 	bl	8001c5c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	@ 0x64
 8003eea:	d903      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ba      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f00:	d0ed      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f2a:	4b51      	ldr	r3, [pc, #324]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f38:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	0f1b      	lsrs	r3, r3, #28
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4944      	ldr	r1, [pc, #272]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f66:	4b42      	ldr	r3, [pc, #264]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	493d      	ldr	r1, [pc, #244]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d022      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f94:	d11d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f96:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	4929      	ldr	r1, [pc, #164]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d028      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fde:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fec:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4917      	ldr	r1, [pc, #92]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800401a:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004020:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4911      	ldr	r1, [pc, #68]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0e      	ldr	r2, [pc, #56]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fd fe0e 	bl	8001c5c <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fd fe0a 	bl	8001c5c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e007      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004056:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004062:	d1ef      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e01c      	b.n	80040c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	795b      	ldrb	r3, [r3, #5]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fab4 	bl	8001604 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0204 	orr.w	r2, r2, #4
 80040b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	791b      	ldrb	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80040de:	2302      	movs	r3, #2
 80040e0:	e044      	b.n	800416c <HAL_RNG_GenerateRandomNumber+0xa4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	795b      	ldrb	r3, [r3, #5]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d133      	bne.n	800415a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040f8:	f7fd fdb0 	bl	8001c5c <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80040fe:	e018      	b.n	8004132 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004100:	f7fd fdac 	bl	8001c5c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d911      	bls.n	8004132 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d00a      	beq.n	8004132 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e01c      	b.n	800416c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d1df      	bne.n	8004100 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	715a      	strb	r2, [r3, #5]
 8004158:	e004      	b.n	8004164 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2204      	movs	r2, #4
 800415e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	711a      	strb	r2, [r3, #4]

  return status;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	330c      	adds	r3, #12
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ffa0 	bl	80040c8 <HAL_RNG_GenerateRandomNumber>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	e000      	b.n	8004196 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004194:	2300      	movs	r3, #0
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e022      	b.n	80041f6 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd fa72 	bl	80016ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2203      	movs	r2, #3
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f815 	bl	8004200 <HAL_SD_InitCard>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e00a      	b.n	80041f6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004200:	b5b0      	push	{r4, r5, r7, lr}
 8004202:	b08e      	sub	sp, #56	@ 0x38
 8004204:	af04      	add	r7, sp, #16
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800421c:	2376      	movs	r3, #118	@ 0x76
 800421e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681d      	ldr	r5, [r3, #0]
 8004224:	466c      	mov	r4, sp
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800422e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004238:	4628      	mov	r0, r5
 800423a:	f001 fbad 	bl	8005998 <SDMMC_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e059      	b.n	8004304 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800425e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fbe1 	bl	8005a2c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004278:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800427a:	2002      	movs	r0, #2
 800427c:	f7fd fcfa 	bl	8001c74 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 ff59 	bl	8005138 <SD_PowerON>
 8004286:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02e      	b.n	8004304 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fe78 	bl	8004f9c <SD_InitCard>
 80042ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e01b      	b.n	8004304 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fc3b 	bl	8005b50 <SDMMC_CmdBlockLength>
 80042da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00f      	beq.n	8004302 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a09      	ldr	r2, [pc, #36]	@ (800430c <HAL_SD_InitCard+0x10c>)
 80042e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	@ 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bdb0      	pop	{r4, r5, r7, pc}
 800430c:	004005ff 	.word	0x004005ff

08004310 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	@ 0x30
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0c3      	b.n	80044c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	f040 80bc 	bne.w	80044be <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800434c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004356:	429a      	cmp	r2, r3
 8004358:	d907      	bls.n	800436a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0aa      	b.n	80044c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2203      	movs	r2, #3
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004388:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	4a4e      	ldr	r2, [pc, #312]	@ (80044c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	4a4d      	ldr	r2, [pc, #308]	@ (80044cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004398:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2200      	movs	r2, #0
 80043a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3380      	adds	r3, #128	@ 0x80
 80043d0:	4619      	mov	r1, r3
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	025b      	lsls	r3, r3, #9
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	f7fd fdff 	bl	8001fdc <HAL_DMA_Start_IT>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80043f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a35      	ldr	r2, [pc, #212]	@ (80044d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e055      	b.n	80044c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	025b      	lsls	r3, r3, #9
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	025b      	lsls	r3, r3, #9
 800443c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800443e:	2390      	movs	r3, #144	@ 0x90
 8004440:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004442:	2302      	movs	r3, #2
 8004444:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800444a:	2301      	movs	r3, #1
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f107 0210 	add.w	r2, r7, #16
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fb4d 	bl	8005af8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d90a      	bls.n	800447a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2282      	movs	r2, #130	@ 0x82
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004470:	4618      	mov	r0, r3
 8004472:	f001 fbb1 	bl	8005bd8 <SDMMC_CmdReadMultiBlock>
 8004476:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004478:	e009      	b.n	800448e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2281      	movs	r2, #129	@ 0x81
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fb84 	bl	8005b94 <SDMMC_CmdReadSingleBlock>
 800448c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d012      	beq.n	80044ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0d      	ldr	r2, [pc, #52]	@ (80044d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800449a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e002      	b.n	80044c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3730      	adds	r7, #48	@ 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	08004dab 	.word	0x08004dab
 80044cc:	08004e1d 	.word	0x08004e1d
 80044d0:	004005ff 	.word	0x004005ff

080044d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0c6      	b.n	800468a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 80bf 	bne.w	8004688 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	441a      	add	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	429a      	cmp	r2, r3
 800451c:	d907      	bls.n	800452e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0ad      	b.n	800468a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2203      	movs	r2, #3
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 021a 	orr.w	r2, r2, #26
 800454c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004552:	4a50      	ldr	r2, [pc, #320]	@ (8004694 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	4a4f      	ldr	r2, [pc, #316]	@ (8004698 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800455c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	2200      	movs	r2, #0
 8004564:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	2b01      	cmp	r3, #1
 800456c:	d002      	beq.n	8004574 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	025b      	lsls	r3, r3, #9
 8004572:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d90a      	bls.n	8004590 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	22a0      	movs	r2, #160	@ 0xa0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004586:	4618      	mov	r0, r3
 8004588:	f001 fb6a 	bl	8005c60 <SDMMC_CmdWriteMultiBlock>
 800458c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800458e:	e009      	b.n	80045a4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2290      	movs	r2, #144	@ 0x90
 8004594:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fb3d 	bl	8005c1c <SDMMC_CmdWriteSingleBlock>
 80045a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d012      	beq.n	80045d0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a3b      	ldr	r2, [pc, #236]	@ (800469c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80045b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e05c      	b.n	800468a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e4:	2240      	movs	r2, #64	@ 0x40
 80045e6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3380      	adds	r3, #128	@ 0x80
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	025b      	lsls	r3, r3, #9
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	f7fd fce0 	bl	8001fdc <HAL_DMA_Start_IT>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01a      	beq.n	8004658 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 021a 	bic.w	r2, r2, #26
 8004630:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a19      	ldr	r2, [pc, #100]	@ (800469c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004638:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e018      	b.n	800468a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004658:	f04f 33ff 	mov.w	r3, #4294967295
 800465c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004664:	2390      	movs	r3, #144	@ 0x90
 8004666:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800466c:	2300      	movs	r3, #0
 800466e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004670:	2301      	movs	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f107 0210 	add.w	r2, r7, #16
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fa3a 	bl	8005af8 <SDMMC_ConfigData>

      return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3730      	adds	r7, #48	@ 0x30
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	08004d81 	.word	0x08004d81
 8004698:	08004e1d 	.word	0x08004e1d
 800469c:	004005ff 	.word	0x004005ff

080046a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_SD_IRQHandler+0x2e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fdec 	bl	80052a4 <SD_Read_IT>
 80046cc:	e15a      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 808d 	beq.w	80047f8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b9a      	ldr	r3, [pc, #616]	@ (800495c <HAL_SD_IRQHandler+0x2bc>)
 80046f4:	400b      	ands	r3, r1
 80046f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d039      	beq.n	8004786 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_SD_IRQHandler+0x86>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f001 faba 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8004730:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f921 	bl	800498c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_SD_IRQHandler+0xd6>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 fed8 	bl	800652c <HAL_SD_RxCpltCallback>
 800477c:	e102      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 feca 	bl	8006518 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004784:	e0fe      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80f9 	beq.w	8004984 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d011      	beq.n	80047c0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fa7f 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 80047a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8e6 	bl	800498c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80dc 	bne.w	8004984 <HAL_SD_IRQHandler+0x2e4>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 80d6 	bne.w	8004984 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0208 	bic.w	r2, r2, #8
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fe91 	bl	8006518 <HAL_SD_TxCpltCallback>
}
 80047f6:	e0c5      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_SD_IRQHandler+0x178>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fd98 	bl	8005346 <SD_Write_IT>
 8004816:	e0b5      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80ae 	beq.w	8004984 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f043 0202 	orr.w	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	f043 0208 	orr.w	r2, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	f043 0210 	orr.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004898:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80048a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f9f8 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 80048b4:	4602      	mov	r2, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f857 	bl	800498c <HAL_SD_ErrorCallback>
}
 80048de:	e051      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04c      	beq.n	8004984 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <HAL_SD_IRQHandler+0x25e>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <HAL_SD_IRQHandler+0x2c0>)
 8004904:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fbc6 	bl	800209c <HAL_DMA_Abort_IT>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d036      	beq.n	8004984 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fad0 	bl	8004ec0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004920:	e030      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_SD_IRQHandler+0x296>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	4a0a      	ldr	r2, [pc, #40]	@ (8004964 <HAL_SD_IRQHandler+0x2c4>)
 800493c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fbaa 	bl	800209c <HAL_DMA_Abort_IT>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d01a      	beq.n	8004984 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	4618      	mov	r0, r3
 8004954:	f000 faeb 	bl	8004f2e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004958:	e014      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
 800495a:	bf00      	nop
 800495c:	ffff3ec5 	.word	0xffff3ec5
 8004960:	08004ec1 	.word	0x08004ec1
 8004964:	08004f2f 	.word	0x08004f2f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 fdc1 	bl	8006504 <HAL_SD_AbortCallback>
}
 8004982:	e7ff      	b.n	8004984 <HAL_SD_IRQHandler+0x2e4>
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ae:	0f9b      	lsrs	r3, r3, #30
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ba:	0e9b      	lsrs	r3, r3, #26
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a00:	0d1b      	lsrs	r3, r3, #20
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a1e:	0bdb      	lsrs	r3, r3, #15
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a30:	0b9b      	lsrs	r3, r3, #14
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a42:	0b5b      	lsrs	r3, r3, #13
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a54:	0b1b      	lsrs	r3, r3, #12
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d163      	bne.n	8004b38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a74:	009a      	lsls	r2, r3, #2
 8004a76:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004a80:	0f92      	lsrs	r2, r2, #30
 8004a82:	431a      	orrs	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8c:	0edb      	lsrs	r3, r3, #27
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ab0:	0d5b      	lsrs	r3, r3, #21
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac2:	0c9b      	lsrs	r3, r3, #18
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad4:	0bdb      	lsrs	r3, r3, #15
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	7e1b      	ldrb	r3, [r3, #24]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	3302      	adds	r3, #2
 8004af8:	2201      	movs	r2, #1
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b02:	fb03 f202 	mul.w	r2, r3, r2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	7a1b      	ldrb	r3, [r3, #8]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	2201      	movs	r2, #1
 8004b16:	409a      	lsls	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004b24:	0a52      	lsrs	r2, r2, #9
 8004b26:	fb03 f202 	mul.w	r2, r3, r2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b34:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b36:	e031      	b.n	8004b9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d11d      	bne.n	8004b7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	029a      	lsls	r2, r3, #10
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b70:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b7a:	e00f      	b.n	8004b9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a58      	ldr	r2, [pc, #352]	@ (8004ce4 <HAL_SD_GetCardCSD+0x344>)
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e09d      	b.n	8004cd8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba0:	0b9b      	lsrs	r3, r3, #14
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb2:	09db      	lsrs	r3, r3, #7
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	0fdb      	lsrs	r3, r3, #31
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	0f5b      	lsrs	r3, r3, #29
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf2:	0e9b      	lsrs	r3, r3, #26
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	0d9b      	lsrs	r3, r3, #22
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	0d5b      	lsrs	r3, r3, #21
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	0bdb      	lsrs	r3, r3, #15
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5a:	0b9b      	lsrs	r3, r3, #14
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6e:	0b5b      	lsrs	r3, r3, #13
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	0b1b      	lsrs	r3, r3, #12
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	0a9b      	lsrs	r3, r3, #10
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	004005ff 	.word	0x004005ff

08004ce8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004d4c:	f107 030c 	add.w	r3, r7, #12
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa7e 	bl	8005254 <SD_SendStatus>
 8004d58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	0a5b      	lsrs	r3, r3, #9
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004d76:	693b      	ldr	r3, [r7, #16]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	2b82      	cmp	r3, #130	@ 0x82
 8004dbe:	d111      	bne.n	8004de4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 ff6d 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8004dca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fdd4 	bl	800498c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0208 	bic.w	r2, r2, #8
 8004df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f001 fb8d 	bl	800652c <HAL_SD_RxCpltCallback>
#endif
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd fae2 	bl	80023f4 <HAL_DMA_GetError>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d03e      	beq.n	8004eb4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e44:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d002      	beq.n	8004e52 <SD_DMAError+0x36>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d12d      	bne.n	8004eae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <SD_DMAError+0xa0>)
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004e68:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff ff62 	bl	8004d40 <HAL_SD_GetCardState>
 8004e7c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d002      	beq.n	8004e8a <SD_DMAError+0x6e>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d10a      	bne.n	8004ea0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 ff08 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8004e94:	4602      	mov	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f7ff fd6c 	bl	800498c <HAL_SD_ErrorCallback>
#endif
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	004005ff 	.word	0x004005ff

08004ec0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ecc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ed6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff ff31 	bl	8004d40 <HAL_SD_GetCardState>
 8004ede:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d002      	beq.n	8004efa <SD_DMATxAbort+0x3a>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10a      	bne.n	8004f10 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fed0 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f001 faf3 	bl	8006504 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004f1e:	e002      	b.n	8004f26 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fd33 	bl	800498c <HAL_SD_ErrorCallback>
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff fefa 	bl	8004d40 <HAL_SD_GetCardState>
 8004f4c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d002      	beq.n	8004f68 <SD_DMARxAbort+0x3a>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	d10a      	bne.n	8004f7e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fe99 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f001 fabc 	bl	8006504 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004f8c:	e002      	b.n	8004f94 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fcfc 	bl	800498c <HAL_SD_ErrorCallback>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b094      	sub	sp, #80	@ 0x50
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fd4b 	bl	8005a48 <SDMMC_GetPowerState>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fb8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004fbc:	e0b8      	b.n	8005130 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d02f      	beq.n	8005026 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 ff32 	bl	8005e34 <SDMMC_CmdSendCID>
 8004fd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <SD_InitCard+0x40>
    {
      return errorstate;
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fda:	e0a9      	b.n	8005130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fd75 	bl	8005ad2 <SDMMC_GetResponse>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fd6c 	bl	8005ad2 <SDMMC_GetResponse>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2108      	movs	r1, #8
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fd63 	bl	8005ad2 <SDMMC_GetResponse>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	210c      	movs	r1, #12
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fd5a 	bl	8005ad2 <SDMMC_GetResponse>
 800501e:	4602      	mov	r2, r0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	2b03      	cmp	r3, #3
 800502c:	d00d      	beq.n	800504a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f107 020e 	add.w	r2, r7, #14
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f000 ff38 	bl	8005eae <SDMMC_CmdSetRelAdd>
 800503e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <SD_InitCard+0xae>
    {
      return errorstate;
 8005046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005048:	e072      	b.n	8005130 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	2b03      	cmp	r3, #3
 8005050:	d036      	beq.n	80050c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 ff02 	bl	8005e70 <SDMMC_CmdSendCSD>
 800506c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800506e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005076:	e05b      	b.n	8005130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd27 	bl	8005ad2 <SDMMC_GetResponse>
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2104      	movs	r1, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fd1e 	bl	8005ad2 <SDMMC_GetResponse>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2108      	movs	r1, #8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fd15 	bl	8005ad2 <SDMMC_GetResponse>
 80050a8:	4602      	mov	r2, r0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	210c      	movs	r1, #12
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fd0c 	bl	8005ad2 <SDMMC_GetResponse>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2104      	movs	r1, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fd03 	bl	8005ad2 <SDMMC_GetResponse>
 80050cc:	4603      	mov	r3, r0
 80050ce:	0d1a      	lsrs	r2, r3, #20
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80050d4:	f107 0310 	add.w	r3, r7, #16
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fc60 	bl	80049a0 <HAL_SD_GetCardCSD>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80050ea:	e021      	b.n	8005130 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	2200      	movs	r2, #0
 80050f8:	461c      	mov	r4, r3
 80050fa:	4615      	mov	r5, r2
 80050fc:	4622      	mov	r2, r4
 80050fe:	462b      	mov	r3, r5
 8005100:	4608      	mov	r0, r1
 8005102:	f000 fdf1 	bl	8005ce8 <SDMMC_CmdSelDesel>
 8005106:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <SD_InitCard+0x176>
  {
    return errorstate;
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	e00e      	b.n	8005130 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681d      	ldr	r5, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	466c      	mov	r4, sp
 800511a:	f103 0210 	add.w	r2, r3, #16
 800511e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005124:	3304      	adds	r3, #4
 8005126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005128:	4628      	mov	r0, r5
 800512a:	f000 fc35 	bl	8005998 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3740      	adds	r7, #64	@ 0x40
 8005134:	46bd      	mov	sp, r7
 8005136:	bdb0      	pop	{r4, r5, r7, pc}

08005138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fdec 	bl	8005d2e <SDMMC_CmdGoIdleState>
 8005156:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <SD_PowerON+0x2a>
  {
    return errorstate;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	e072      	b.n	8005248 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fdff 	bl	8005d6a <SDMMC_CmdOperCond>
 800516c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fdd5 	bl	8005d2e <SDMMC_CmdGoIdleState>
 8005184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <SD_PowerON+0x5e>
    {
      return errorstate;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	e05b      	b.n	8005248 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519a:	2b01      	cmp	r3, #1
 800519c:	d137      	bne.n	800520e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fdff 	bl	8005da8 <SDMMC_CmdAppCommand>
 80051aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02d      	beq.n	800520e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80051b6:	e047      	b.n	8005248 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fdf2 	bl	8005da8 <SDMMC_CmdAppCommand>
 80051c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	e03b      	b.n	8005248 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	491e      	ldr	r1, [pc, #120]	@ (8005250 <SD_PowerON+0x118>)
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fe08 	bl	8005dec <SDMMC_CmdAppOperCommand>
 80051dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80051e8:	e02e      	b.n	8005248 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fc6e 	bl	8005ad2 <SDMMC_GetResponse>
 80051f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	0fdb      	lsrs	r3, r3, #31
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <SD_PowerON+0xcc>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <SD_PowerON+0xce>
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]

    count++;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3301      	adds	r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005214:	4293      	cmp	r3, r2
 8005216:	d802      	bhi.n	800521e <SD_PowerON+0xe6>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0cc      	beq.n	80051b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005224:	4293      	cmp	r3, r2
 8005226:	d902      	bls.n	800522e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800522c:	e00c      	b.n	8005248 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
 800523e:	e002      	b.n	8005246 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	c1100000 	.word	0xc1100000

08005254 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005268:	e018      	b.n	800529c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 fe3a 	bl	8005ef0 <SDMMC_CmdSendStatus>
 800527c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	e009      	b.n	800529c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fc1f 	bl	8005ad2 <SDMMC_GetResponse>
 8005294:	4602      	mov	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d03f      	beq.n	800533e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e033      	b.n	800532c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fb91 	bl	80059f0 <SDMMC_ReadFIFO>
 80052ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3b01      	subs	r3, #1
 800530e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	0e1b      	lsrs	r3, r3, #24
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	701a      	strb	r2, [r3, #0]
      tmp++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3b01      	subs	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3301      	adds	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b07      	cmp	r3, #7
 8005330:	d9c8      	bls.n	80052c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800533e:	bf00      	nop
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d043      	beq.n	80053e8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e037      	b.n	80053d6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	021a      	lsls	r2, r3, #8
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4313      	orrs	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3b01      	subs	r3, #1
 800538e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	041a      	lsls	r2, r3, #16
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4313      	orrs	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	061a      	lsls	r2, r3, #24
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3b01      	subs	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f107 0208 	add.w	r2, r7, #8
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fb1d 	bl	8005a0a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3301      	adds	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b07      	cmp	r3, #7
 80053da:	d9c4      	bls.n	8005366 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e049      	b.n	8005496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f841 	bl	800549e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 f9e8 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e054      	b.n	8005576 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a26      	ldr	r2, [pc, #152]	@ (8005584 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d022      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f6:	d01d      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a22      	ldr	r2, [pc, #136]	@ (8005588 <HAL_TIM_Base_Start_IT+0xd4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	@ (800558c <HAL_TIM_Base_Start_IT+0xd8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <HAL_TIM_Base_Start_IT+0xdc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <HAL_TIM_Base_Start_IT+0xe0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d009      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <HAL_TIM_Base_Start_IT+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x80>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <HAL_TIM_Base_Start_IT+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d115      	bne.n	8005560 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	4b19      	ldr	r3, [pc, #100]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xec>)
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b06      	cmp	r3, #6
 8005544:	d015      	beq.n	8005572 <HAL_TIM_Base_Start_IT+0xbe>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554c:	d011      	beq.n	8005572 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	e008      	b.n	8005572 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e000      	b.n	8005574 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40001800 	.word	0x40001800
 80055a0:	00010007 	.word	0x00010007

080055a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d020      	beq.n	8005608 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01b      	beq.n	8005608 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8e9 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8db 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8ec 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d020      	beq.n	8005654 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01b      	beq.n	8005654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0204 	mvn.w	r2, #4
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8c3 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8b5 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8c6 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01b      	beq.n	80056a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0208 	mvn.w	r2, #8
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f89d 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f88f 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f8a0 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d020      	beq.n	80056ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0210 	mvn.w	r2, #16
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2208      	movs	r2, #8
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f877 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f869 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f87a 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00c      	beq.n	8005710 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0201 	mvn.w	r2, #1
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fb ff4e 	bl	80015ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f919 	bl	8005970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f911 	bl	8005984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800577e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f834 	bl	80057ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f06f 0220 	mvn.w	r2, #32
 80057a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8d9 	bl	800595c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a46      	ldr	r2, [pc, #280]	@ (8005930 <TIM_Base_SetConfig+0x12c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d00f      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a43      	ldr	r2, [pc, #268]	@ (8005934 <TIM_Base_SetConfig+0x130>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a42      	ldr	r2, [pc, #264]	@ (8005938 <TIM_Base_SetConfig+0x134>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a41      	ldr	r2, [pc, #260]	@ (800593c <TIM_Base_SetConfig+0x138>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a40      	ldr	r2, [pc, #256]	@ (8005940 <TIM_Base_SetConfig+0x13c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a35      	ldr	r2, [pc, #212]	@ (8005930 <TIM_Base_SetConfig+0x12c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d02b      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005864:	d027      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a32      	ldr	r2, [pc, #200]	@ (8005934 <TIM_Base_SetConfig+0x130>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d023      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a31      	ldr	r2, [pc, #196]	@ (8005938 <TIM_Base_SetConfig+0x134>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01f      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a30      	ldr	r2, [pc, #192]	@ (800593c <TIM_Base_SetConfig+0x138>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01b      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2f      	ldr	r2, [pc, #188]	@ (8005940 <TIM_Base_SetConfig+0x13c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d017      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2e      	ldr	r2, [pc, #184]	@ (8005944 <TIM_Base_SetConfig+0x140>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a2d      	ldr	r2, [pc, #180]	@ (8005948 <TIM_Base_SetConfig+0x144>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00f      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2c      	ldr	r2, [pc, #176]	@ (800594c <TIM_Base_SetConfig+0x148>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00b      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005950 <TIM_Base_SetConfig+0x14c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005954 <TIM_Base_SetConfig+0x150>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a29      	ldr	r2, [pc, #164]	@ (8005958 <TIM_Base_SetConfig+0x154>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d108      	bne.n	80058c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a10      	ldr	r2, [pc, #64]	@ (8005930 <TIM_Base_SetConfig+0x12c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0xf8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a12      	ldr	r2, [pc, #72]	@ (8005940 <TIM_Base_SetConfig+0x13c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d103      	bne.n	8005904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d105      	bne.n	8005922 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f023 0201 	bic.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]
  }
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40010400 	.word	0x40010400
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800
 8005950:	40001800 	.word	0x40001800
 8005954:	40001c00 	.word	0x40001c00
 8005958:	40002000 	.word	0x40002000

0800595c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005998:	b084      	sub	sp, #16
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	f107 001c 	add.w	r0, r7, #28
 80059a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80059ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80059b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80059b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80059b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80059ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80059be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80059c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <SDMMC_Init+0x54>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	b004      	add	sp, #16
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	ffff8100 	.word	0xffff8100

080059f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2203      	movs	r2, #3
 8005a38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0303 	and.w	r3, r3, #3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005a88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005a8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <SDMMC_SendCommand+0x50>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	fffff000 	.word	0xfffff000

08005ab8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	b2db      	uxtb	r3, r3
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
}  
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005b24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005b2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0

}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005b5e:	2310      	movs	r3, #16
 8005b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b62:	2340      	movs	r3, #64	@ 0x40
 8005b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b70:	f107 0308 	add.w	r3, r7, #8
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff74 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b80:	2110      	movs	r1, #16
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9d6 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ba2:	2311      	movs	r3, #17
 8005ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ba6:	2340      	movs	r3, #64	@ 0x40
 8005ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bb4:	f107 0308 	add.w	r3, r7, #8
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff ff52 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc4:	2111      	movs	r1, #17
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f9b4 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bce:	69fb      	ldr	r3, [r7, #28]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005be6:	2312      	movs	r3, #18
 8005be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bea:	2340      	movs	r3, #64	@ 0x40
 8005bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bf8:	f107 0308 	add.w	r3, r7, #8
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff ff30 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c08:	2112      	movs	r1, #18
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f992 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005c2a:	2318      	movs	r3, #24
 8005c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c2e:	2340      	movs	r3, #64	@ 0x40
 8005c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c3c:	f107 0308 	add.w	r3, r7, #8
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ff0e 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4c:	2118      	movs	r1, #24
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f970 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c56:	69fb      	ldr	r3, [r7, #28]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005c6e:	2319      	movs	r3, #25
 8005c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c72:	2340      	movs	r3, #64	@ 0x40
 8005c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff feec 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c90:	2119      	movs	r1, #25
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f94e 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cb4:	2340      	movs	r3, #64	@ 0x40
 8005cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fecb 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005cce:	4a05      	ldr	r2, [pc, #20]	@ (8005ce4 <SDMMC_CmdStopTransfer+0x40>)
 8005cd0:	210c      	movs	r1, #12
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f92e 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cda:	69fb      	ldr	r3, [r7, #28]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	05f5e100 	.word	0x05f5e100

08005ce8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	@ 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005cf8:	2307      	movs	r3, #7
 8005cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cfc:	2340      	movs	r3, #64	@ 0x40
 8005cfe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d08:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff fea7 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1a:	2107      	movs	r1, #7
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f909 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005d22:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b088      	sub	sp, #32
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fe86 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb23 	bl	80063a4 <SDMMC_GetCmdError>
 8005d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d60:	69fb      	ldr	r3, [r7, #28]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b088      	sub	sp, #32
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005d72:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005d78:	2308      	movs	r3, #8
 8005d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d7c:	2340      	movs	r3, #64	@ 0x40
 8005d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d8a:	f107 0308 	add.w	r3, r7, #8
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fe67 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fab6 	bl	8006308 <SDMMC_GetCmdResp7>
 8005d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005db6:	2337      	movs	r3, #55	@ 0x37
 8005db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005dba:	2340      	movs	r3, #64	@ 0x40
 8005dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dc8:	f107 0308 	add.w	r3, r7, #8
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff fe48 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd8:	2137      	movs	r1, #55	@ 0x37
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8aa 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <SDMMC_CmdAppOperCommand+0x44>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005dfe:	2329      	movs	r3, #41	@ 0x29
 8005e00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e02:	2340      	movs	r3, #64	@ 0x40
 8005e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e10:	f107 0308 	add.w	r3, r7, #8
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fe24 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f9bf 	bl	80061a0 <SDMMC_GetCmdResp3>
 8005e22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e24:	69fb      	ldr	r3, [r7, #28]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	80100000 	.word	0x80100000

08005e34 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005e40:	2302      	movs	r3, #2
 8005e42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005e44:	23c0      	movs	r3, #192	@ 0xc0
 8005e46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fe03 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f956 	bl	8006110 <SDMMC_GetCmdResp2>
 8005e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e66:	69fb      	ldr	r3, [r7, #28]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005e7e:	2309      	movs	r3, #9
 8005e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005e82:	23c0      	movs	r3, #192	@ 0xc0
 8005e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fde4 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f937 	bl	8006110 <SDMMC_GetCmdResp2>
 8005ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b088      	sub	sp, #32
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ec0:	2340      	movs	r3, #64	@ 0x40
 8005ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ecc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fdc5 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	2103      	movs	r1, #3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f99c 	bl	800621c <SDMMC_GetCmdResp6>
 8005ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005efe:	230d      	movs	r3, #13
 8005f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f02:	2340      	movs	r3, #64	@ 0x40
 8005f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fda4 	bl	8005a64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f20:	210d      	movs	r1, #13
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f806 	bl	8005f34 <SDMMC_GetCmdResp1>
 8005f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005f42:	4b70      	ldr	r3, [pc, #448]	@ (8006104 <SDMMC_GetCmdResp1+0x1d0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a70      	ldr	r2, [pc, #448]	@ (8006108 <SDMMC_GetCmdResp1+0x1d4>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	0a5a      	lsrs	r2, r3, #9
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
 8005f54:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	1e5a      	subs	r2, r3, #1
 8005f5a:	61fa      	str	r2, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f64:	e0c9      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0ef      	beq.n	8005f56 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ea      	bne.n	8005f56 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f92:	2304      	movs	r3, #4
 8005f94:	e0b1      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0a6      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	22c5      	movs	r2, #197	@ 0xc5
 8005fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fd80 	bl	8005ab8 <SDMMC_GetCommandResponse>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d001      	beq.n	8005fc6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e099      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff fd82 	bl	8005ad2 <SDMMC_GetResponse>
 8005fce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800610c <SDMMC_GetCmdResp1+0x1d8>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e08d      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da02      	bge.n	8005fea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005fe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fe8:	e087      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005ff4:	2340      	movs	r3, #64	@ 0x40
 8005ff6:	e080      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	e079      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006014:	e071      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006024:	e069      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006034:	e061      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006040:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006044:	e059      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006054:	e051      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006064:	e049      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006074:	e041      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006084:	e039      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006090:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006094:	e031      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80060a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80060a4:	e029      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80060b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80060b4:	e021      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80060c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80060c4:	e019      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80060d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80060d4:	e011      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80060e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80060e4:	e009      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80060f0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80060f4:	e001      	b.n	80060fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80060f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000000 	.word	0x20000000
 8006108:	10624dd3 	.word	0x10624dd3
 800610c:	fdffe008 	.word	0xfdffe008

08006110 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006118:	4b1f      	ldr	r3, [pc, #124]	@ (8006198 <SDMMC_GetCmdResp2+0x88>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <SDMMC_GetCmdResp2+0x8c>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	0a5b      	lsrs	r3, r3, #9
 8006124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	60fa      	str	r2, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006138:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800613c:	e026      	b.n	800618c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006142:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ef      	beq.n	800612e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2204      	movs	r2, #4
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800616a:	2304      	movs	r3, #4
 800616c:	e00e      	b.n	800618c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006180:	2301      	movs	r3, #1
 8006182:	e003      	b.n	800618c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	22c5      	movs	r2, #197	@ 0xc5
 8006188:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000000 	.word	0x20000000
 800619c:	10624dd3 	.word	0x10624dd3

080061a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <SDMMC_GetCmdResp3+0x74>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006218 <SDMMC_GetCmdResp3+0x78>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	0a5b      	lsrs	r3, r3, #9
 80061b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1e5a      	subs	r2, r3, #1
 80061c2:	60fa      	str	r2, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80061cc:	e01b      	b.n	8006206 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ef      	beq.n	80061be <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1ea      	bne.n	80061be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2204      	movs	r2, #4
 80061f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061fa:	2304      	movs	r3, #4
 80061fc:	e003      	b.n	8006206 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	22c5      	movs	r2, #197	@ 0xc5
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000000 	.word	0x20000000
 8006218:	10624dd3 	.word	0x10624dd3

0800621c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	460b      	mov	r3, r1
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800622a:	4b35      	ldr	r3, [pc, #212]	@ (8006300 <SDMMC_GetCmdResp6+0xe4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a35      	ldr	r2, [pc, #212]	@ (8006304 <SDMMC_GetCmdResp6+0xe8>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	0a5b      	lsrs	r3, r3, #9
 8006236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	1e5a      	subs	r2, r3, #1
 8006244:	61fa      	str	r2, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800624a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800624e:	e052      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006254:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ef      	beq.n	8006240 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ea      	bne.n	8006240 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2204      	movs	r2, #4
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800627c:	2304      	movs	r3, #4
 800627e:	e03a      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006292:	2301      	movs	r3, #1
 8006294:	e02f      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fc0e 	bl	8005ab8 <SDMMC_GetCommandResponse>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d001      	beq.n	80062aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e025      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	22c5      	movs	r2, #197	@ 0xc5
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80062b0:	2100      	movs	r1, #0
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fc0d 	bl	8005ad2 <SDMMC_GetResponse>
 80062b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	0c1b      	lsrs	r3, r3, #16
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e011      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80062dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80062e0:	e009      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80062ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062f0:	e001      	b.n	80062f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80062f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000000 	.word	0x20000000
 8006304:	10624dd3 	.word	0x10624dd3

08006308 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006310:	4b22      	ldr	r3, [pc, #136]	@ (800639c <SDMMC_GetCmdResp7+0x94>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <SDMMC_GetCmdResp7+0x98>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	0a5b      	lsrs	r3, r3, #9
 800631c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	60fa      	str	r2, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006330:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006334:	e02c      	b.n	8006390 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ef      	beq.n	8006326 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ea      	bne.n	8006326 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2204      	movs	r2, #4
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006362:	2304      	movs	r3, #4
 8006364:	e014      	b.n	8006390 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006378:	2301      	movs	r3, #1
 800637a:	e009      	b.n	8006390 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	@ 0x40
 800638c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
  
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000000 	.word	0x20000000
 80063a0:	10624dd3 	.word	0x10624dd3

080063a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063ac:	4b11      	ldr	r3, [pc, #68]	@ (80063f4 <SDMMC_GetCmdError+0x50>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a11      	ldr	r2, [pc, #68]	@ (80063f8 <SDMMC_GetCmdError+0x54>)
 80063b2:	fba2 2303 	umull	r2, r3, r2, r3
 80063b6:	0a5b      	lsrs	r3, r3, #9
 80063b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063bc:	fb02 f303 	mul.w	r3, r2, r3
 80063c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1e5a      	subs	r2, r3, #1
 80063c6:	60fa      	str	r2, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80063d0:	e009      	b.n	80063e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f1      	beq.n	80063c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	22c5      	movs	r2, #197	@ 0xc5
 80063e2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000000 	.word	0x20000000
 80063f8:	10624dd3 	.word	0x10624dd3

080063fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006400:	4904      	ldr	r1, [pc, #16]	@ (8006414 <MX_FATFS_Init+0x18>)
 8006402:	4805      	ldr	r0, [pc, #20]	@ (8006418 <MX_FATFS_Init+0x1c>)
 8006404:	f003 fc30 	bl	8009c68 <FATFS_LinkDriver>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	4b03      	ldr	r3, [pc, #12]	@ (800641c <MX_FATFS_Init+0x20>)
 800640e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000584 	.word	0x20000584
 8006418:	0800e5bc 	.word	0x0800e5bc
 800641c:	20000580 	.word	0x20000580

08006420 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006424:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006426:	4618      	mov	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800643a:	f000 f888 	bl	800654e <BSP_SD_IsDetected>
 800643e:	4603      	mov	r3, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	d001      	beq.n	8006448 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006444:	2302      	movs	r3, #2
 8006446:	e005      	b.n	8006454 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006448:	4804      	ldr	r0, [pc, #16]	@ (800645c <BSP_SD_Init+0x2c>)
 800644a:	f7fd fea8 	bl	800419e <HAL_SD_Init>
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006452:	79fb      	ldrb	r3, [r7, #7]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200003e8 	.word	0x200003e8

08006460 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	68f9      	ldr	r1, [r7, #12]
 8006476:	4806      	ldr	r0, [pc, #24]	@ (8006490 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006478:	f7fd ff4a 	bl	8004310 <HAL_SD_ReadBlocks_DMA>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200003e8 	.word	0x200003e8

08006494 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	4806      	ldr	r0, [pc, #24]	@ (80064c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80064ac:	f7fe f812 	bl	80044d4 <HAL_SD_WriteBlocks_DMA>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	200003e8 	.word	0x200003e8

080064c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80064cc:	4805      	ldr	r0, [pc, #20]	@ (80064e4 <BSP_SD_GetCardState+0x1c>)
 80064ce:	f7fe fc37 	bl	8004d40 <HAL_SD_GetCardState>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200003e8 	.word	0x200003e8

080064e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4803      	ldr	r0, [pc, #12]	@ (8006500 <BSP_SD_GetCardInfo+0x18>)
 80064f4:	f7fe fbf8 	bl	8004ce8 <HAL_SD_GetCardInfo>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	200003e8 	.word	0x200003e8

08006504 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800650c:	f000 f818 	bl	8006540 <BSP_SD_AbortCallback>
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006520:	f000 f9c4 	bl	80068ac <BSP_SD_WriteCpltCallback>
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006534:	f000 f9c8 	bl	80068c8 <BSP_SD_ReadCpltCallback>
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0

}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006554:	2301      	movs	r3, #1
 8006556:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006558:	f000 f80c 	bl	8006574 <BSP_PlatformIsDetected>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006562:	2300      	movs	r3, #0
 8006564:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	b2db      	uxtb	r3, r3
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800657a:	2301      	movs	r3, #1
 800657c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800657e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006582:	4806      	ldr	r0, [pc, #24]	@ (800659c <BSP_PlatformIsDetected+0x28>)
 8006584:	f7fc f9ce 	bl	8002924 <HAL_GPIO_ReadPin>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800658e:	2300      	movs	r3, #0
 8006590:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006592:	79fb      	ldrb	r3, [r7, #7]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40020800 	.word	0x40020800

080065a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80065a8:	f003 fbf6 	bl	8009d98 <osKernelSysTick>
 80065ac:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80065ae:	e006      	b.n	80065be <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065b0:	f7ff ff8a 	bl	80064c8 <BSP_SD_GetCardState>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e009      	b.n	80065d2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80065be:	f003 fbeb 	bl	8009d98 <osKernelSysTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d8f0      	bhi.n	80065b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <SD_CheckStatus+0x38>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065ec:	f7ff ff6c 	bl	80064c8 <BSP_SD_GetCardState>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d107      	bne.n	8006606 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80065f6:	4b07      	ldr	r3, [pc, #28]	@ (8006614 <SD_CheckStatus+0x38>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	4b04      	ldr	r3, [pc, #16]	@ (8006614 <SD_CheckStatus+0x38>)
 8006604:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006606:	4b03      	ldr	r3, [pc, #12]	@ (8006614 <SD_CheckStatus+0x38>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b2db      	uxtb	r3, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000009 	.word	0x20000009

08006618 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006622:	4b20      	ldr	r3, [pc, #128]	@ (80066a4 <SD_initialize+0x8c>)
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006628:	f003 fbaa 	bl	8009d80 <osKernelRunning>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d030      	beq.n	8006694 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006632:	f7ff fefd 	bl	8006430 <BSP_SD_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d107      	bne.n	800664c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ffcc 	bl	80065dc <SD_CheckStatus>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	4b16      	ldr	r3, [pc, #88]	@ (80066a4 <SD_initialize+0x8c>)
 800664a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800664c:	4b15      	ldr	r3, [pc, #84]	@ (80066a4 <SD_initialize+0x8c>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b01      	cmp	r3, #1
 8006654:	d01e      	beq.n	8006694 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8006656:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <SD_initialize+0x90>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800665e:	4b13      	ldr	r3, [pc, #76]	@ (80066ac <SD_initialize+0x94>)
 8006660:	f107 0408 	add.w	r4, r7, #8
 8006664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800666a:	f107 0308 	add.w	r3, r7, #8
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f003 fcca 	bl	800a00a <osMessageCreate>
 8006676:	4603      	mov	r3, r0
 8006678:	4a0b      	ldr	r2, [pc, #44]	@ (80066a8 <SD_initialize+0x90>)
 800667a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <SD_initialize+0x90>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d107      	bne.n	8006694 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8006684:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <SD_initialize+0x8c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	4b04      	ldr	r3, [pc, #16]	@ (80066a4 <SD_initialize+0x8c>)
 8006692:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006694:	4b03      	ldr	r3, [pc, #12]	@ (80066a4 <SD_initialize+0x8c>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
}
 800669a:	4618      	mov	r0, r3
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd90      	pop	{r4, r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000009 	.word	0x20000009
 80066a8:	20000588 	.word	0x20000588
 80066ac:	0800dfa8 	.word	0x0800dfa8

080066b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff8d 	bl	80065dc <SD_CheckStatus>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	@ 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80066e2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80066e6:	f7ff ff5b 	bl	80065a0 <SD_CheckStatusWithTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da02      	bge.n	80066f6 <SD_read+0x2a>
  {
    return res;
 80066f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066f4:	e032      	b.n	800675c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	68b8      	ldr	r0, [r7, #8]
 80066fc:	f7ff feb0 	bl	8006460 <BSP_SD_ReadBlocks_DMA>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8006706:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800670a:	2b00      	cmp	r3, #0
 800670c:	d124      	bne.n	8006758 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800670e:	4b15      	ldr	r3, [pc, #84]	@ (8006764 <SD_read+0x98>)
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	f247 5230 	movw	r2, #30000	@ 0x7530
 800671a:	4618      	mov	r0, r3
 800671c:	f003 fcde 	bl	800a0dc <osMessageGet>

    if (event.status == osEventMessage)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b10      	cmp	r3, #16
 8006724:	d118      	bne.n	8006758 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d115      	bne.n	8006758 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800672c:	f003 fb34 	bl	8009d98 <osKernelSysTick>
 8006730:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006732:	e008      	b.n	8006746 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006734:	f7ff fec8 	bl	80064c8 <BSP_SD_GetCardState>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <SD_read+0x7a>
              {
                res = RES_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006744:	e008      	b.n	8006758 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006746:	f003 fb27 	bl	8009d98 <osKernelSysTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006754:	4293      	cmp	r3, r2
 8006756:	d9ed      	bls.n	8006734 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800675c:	4618      	mov	r0, r3
 800675e:	3728      	adds	r7, #40	@ 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20000588 	.word	0x20000588

08006768 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	@ 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800677e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006782:	f7ff ff0d 	bl	80065a0 <SD_CheckStatusWithTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	da02      	bge.n	8006792 <SD_write+0x2a>
  {
    return res;
 800678c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006790:	e02e      	b.n	80067f0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f7ff fe7c 	bl	8006494 <BSP_SD_WriteBlocks_DMA>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d124      	bne.n	80067ec <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80067a2:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <SD_write+0x90>)
 80067a4:	6819      	ldr	r1, [r3, #0]
 80067a6:	f107 0314 	add.w	r3, r7, #20
 80067aa:	f247 5230 	movw	r2, #30000	@ 0x7530
 80067ae:	4618      	mov	r0, r3
 80067b0:	f003 fc94 	bl	800a0dc <osMessageGet>

    if (event.status == osEventMessage)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b10      	cmp	r3, #16
 80067b8:	d118      	bne.n	80067ec <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d115      	bne.n	80067ec <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80067c0:	f003 faea 	bl	8009d98 <osKernelSysTick>
 80067c4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80067c6:	e008      	b.n	80067da <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80067c8:	f7ff fe7e 	bl	80064c8 <BSP_SD_GetCardState>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d103      	bne.n	80067da <SD_write+0x72>
          {
            res = RES_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80067d8:	e008      	b.n	80067ec <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80067da:	f003 fadd 	bl	8009d98 <osKernelSysTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d9ed      	bls.n	80067c8 <SD_write+0x60>
    }

  }
#endif

  return res;
 80067ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	@ 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000588 	.word	0x20000588

080067fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	@ 0x30
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	603a      	str	r2, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
 8006808:	460b      	mov	r3, r1
 800680a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006812:	4b25      	ldr	r3, [pc, #148]	@ (80068a8 <SD_ioctl+0xac>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <SD_ioctl+0x28>
 8006820:	2303      	movs	r3, #3
 8006822:	e03c      	b.n	800689e <SD_ioctl+0xa2>

  switch (cmd)
 8006824:	79bb      	ldrb	r3, [r7, #6]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d834      	bhi.n	8006894 <SD_ioctl+0x98>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <SD_ioctl+0x34>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006841 	.word	0x08006841
 8006834:	08006849 	.word	0x08006849
 8006838:	08006861 	.word	0x08006861
 800683c:	0800687b 	.word	0x0800687b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006846:	e028      	b.n	800689a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fe4b 	bl	80064e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800685e:	e01c      	b.n	800689a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fe3f 	bl	80064e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	b29a      	uxth	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006878:	e00f      	b.n	800689a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800687a:	f107 030c 	add.w	r3, r7, #12
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fe32 	bl	80064e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	0a5a      	lsrs	r2, r3, #9
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006892:	e002      	b.n	800689a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006894:	2304      	movs	r3, #4
 8006896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800689a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3730      	adds	r7, #48	@ 0x30
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000009 	.word	0x20000009

080068ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80068b0:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <BSP_SD_WriteCpltCallback+0x18>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2200      	movs	r2, #0
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f003 fbcf 	bl	800a05c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000588 	.word	0x20000588

080068c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80068cc:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <BSP_SD_ReadCpltCallback+0x18>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2101      	movs	r1, #1
 80068d4:	4618      	mov	r0, r3
 80068d6:	f003 fbc1 	bl	800a05c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000588 	.word	0x20000588

080068e4 <TFT_FillScreen>:
#include "MyTFT.h"
#include "ltdc.h"

void TFT_FillScreen(uint32_t color)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	uint32_t n = hltdc.LayerCfg[0].ImageHeight * hltdc.LayerCfg[0].ImageWidth;
 80068ec:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <TFT_FillScreen+0x48>)
 80068ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f0:	4a0e      	ldr	r2, [pc, #56]	@ (800692c <TFT_FillScreen+0x48>)
 80068f2:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	60bb      	str	r3, [r7, #8]

	for(uint32_t i = 0; i < n; i++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e00a      	b.n	8006916 <TFT_FillScreen+0x32>
	{
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress + (i*2)) = (uint16_t)color;
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <TFT_FillScreen+0x48>)
 8006902:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	b292      	uxth	r2, r2
 800690e:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < n; i++)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3f0      	bcc.n	8006900 <TFT_FillScreen+0x1c>
	}
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	2000032c 	.word	0x2000032c

08006930 <TFT_FillRectangle>:
// <---- ------------------------------------- ---->
void TFT_FillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8006930:	b490      	push	{r4, r7}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	4623      	mov	r3, r4
 8006940:	80fb      	strh	r3, [r7, #6]
 8006942:	4603      	mov	r3, r0
 8006944:	80bb      	strh	r3, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	807b      	strh	r3, [r7, #2]
 800694a:	4613      	mov	r3, r2
 800694c:	803b      	strh	r3, [r7, #0]
	if(x1 > x2)
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	887b      	ldrh	r3, [r7, #2]
 8006952:	429a      	cmp	r2, r3
 8006954:	d905      	bls.n	8006962 <TFT_FillRectangle+0x32>
	{
		swap(x1, x2);
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	81fb      	strh	r3, [r7, #14]
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	80fb      	strh	r3, [r7, #6]
 800695e:	89fb      	ldrh	r3, [r7, #14]
 8006960:	807b      	strh	r3, [r7, #2]
	}
	if(y1 > y2)
 8006962:	88ba      	ldrh	r2, [r7, #4]
 8006964:	883b      	ldrh	r3, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d905      	bls.n	8006976 <TFT_FillRectangle+0x46>
	{
		swap(y1, y2);
 800696a:	88bb      	ldrh	r3, [r7, #4]
 800696c:	81bb      	strh	r3, [r7, #12]
 800696e:	883b      	ldrh	r3, [r7, #0]
 8006970:	80bb      	strh	r3, [r7, #4]
 8006972:	89bb      	ldrh	r3, [r7, #12]
 8006974:	803b      	strh	r3, [r7, #0]
	}

	for(uint32_t ypos = y1; ypos <= y2; ypos++)
 8006976:	88bb      	ldrh	r3, [r7, #4]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	e01a      	b.n	80069b2 <TFT_FillRectangle+0x82>
	{
		for(uint32_t xpos = x1; xpos <= x2; xpos++)
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	e010      	b.n	80069a4 <TFT_FillRectangle+0x74>
		{
			*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress + (2 * (ypos * hltdc.LayerCfg[0].ImageWidth + xpos))) = (uint16_t)color;
 8006982:	4b11      	ldr	r3, [pc, #68]	@ (80069c8 <TFT_FillRectangle+0x98>)
 8006984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006986:	4b10      	ldr	r3, [pc, #64]	@ (80069c8 <TFT_FillRectangle+0x98>)
 8006988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698a:	6979      	ldr	r1, [r7, #20]
 800698c:	fb03 f101 	mul.w	r1, r3, r1
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	440b      	add	r3, r1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	461a      	mov	r2, r3
 800699a:	8c3b      	ldrh	r3, [r7, #32]
 800699c:	8013      	strh	r3, [r2, #0]
		for(uint32_t xpos = x1; xpos <= x2; xpos++)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3301      	adds	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d9ea      	bls.n	8006982 <TFT_FillRectangle+0x52>
	for(uint32_t ypos = y1; ypos <= y2; ypos++)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3301      	adds	r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	883b      	ldrh	r3, [r7, #0]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d9e0      	bls.n	800697c <TFT_FillRectangle+0x4c>
		}
	}
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc90      	pop	{r4, r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	2000032c 	.word	0x2000032c

080069cc <TFT_DrawPixel>:
// <---- ------------------------------------- ---->
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	603a      	str	r2, [r7, #0]
 80069d6:	80fb      	strh	r3, [r7, #6]
 80069d8:	460b      	mov	r3, r1
 80069da:	80bb      	strh	r3, [r7, #4]
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress + (2 * (Ypos * hltdc.LayerCfg[0].ImageWidth + Xpos))) = (uint16_t)color;
 80069dc:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <TFT_DrawPixel+0x38>)
 80069de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069e0:	88bb      	ldrh	r3, [r7, #4]
 80069e2:	4908      	ldr	r1, [pc, #32]	@ (8006a04 <TFT_DrawPixel+0x38>)
 80069e4:	6e09      	ldr	r1, [r1, #96]	@ 0x60
 80069e6:	fb03 f101 	mul.w	r1, r3, r1
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	440b      	add	r3, r1
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	b292      	uxth	r2, r2
 80069f6:	801a      	strh	r2, [r3, #0]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	2000032c 	.word	0x2000032c

08006a08 <TFT_DrawLine>:
// <---- ------------------------------------- ---->
void TFT_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b08b      	sub	sp, #44	@ 0x2c
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4604      	mov	r4, r0
 8006a10:	4608      	mov	r0, r1
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	4623      	mov	r3, r4
 8006a18:	80fb      	strh	r3, [r7, #6]
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	80bb      	strh	r3, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	807b      	strh	r3, [r7, #2]
 8006a22:	4613      	mov	r3, r2
 8006a24:	803b      	strh	r3, [r7, #0]
	int steep = abs(y2 - y1) > abs(x2 - x1);
 8006a26:	883a      	ldrh	r2, [r7, #0]
 8006a28:	88bb      	ldrh	r3, [r7, #4]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8006a30:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006a34:	8879      	ldrh	r1, [r7, #2]
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	1acb      	subs	r3, r1, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfb8      	it	lt
 8006a3e:	425b      	neglt	r3, r3
 8006a40:	429a      	cmp	r2, r3
 8006a42:	bfcc      	ite	gt
 8006a44:	2301      	movgt	r3, #1
 8006a46:	2300      	movle	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	61fb      	str	r3, [r7, #28]

	if(steep)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <TFT_DrawLine+0x62>
	{
		swap(x1, y1);
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	837b      	strh	r3, [r7, #26]
 8006a56:	88bb      	ldrh	r3, [r7, #4]
 8006a58:	80fb      	strh	r3, [r7, #6]
 8006a5a:	8b7b      	ldrh	r3, [r7, #26]
 8006a5c:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8006a5e:	887b      	ldrh	r3, [r7, #2]
 8006a60:	833b      	strh	r3, [r7, #24]
 8006a62:	883b      	ldrh	r3, [r7, #0]
 8006a64:	807b      	strh	r3, [r7, #2]
 8006a66:	8b3b      	ldrh	r3, [r7, #24]
 8006a68:	803b      	strh	r3, [r7, #0]
	}
	if(x1 > x2)
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	887b      	ldrh	r3, [r7, #2]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d90b      	bls.n	8006a8a <TFT_DrawLine+0x82>
	{
		swap(x1, x2);
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	82fb      	strh	r3, [r7, #22]
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	80fb      	strh	r3, [r7, #6]
 8006a7a:	8afb      	ldrh	r3, [r7, #22]
 8006a7c:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8006a7e:	88bb      	ldrh	r3, [r7, #4]
 8006a80:	82bb      	strh	r3, [r7, #20]
 8006a82:	883b      	ldrh	r3, [r7, #0]
 8006a84:	80bb      	strh	r3, [r7, #4]
 8006a86:	8abb      	ldrh	r3, [r7, #20]
 8006a88:	803b      	strh	r3, [r7, #0]
	}

	int dx, dy;
	dx = x2 - x1;
 8006a8a:	887a      	ldrh	r2, [r7, #2]
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	613b      	str	r3, [r7, #16]
	dy = abs(y2 - y1);
 8006a92:	883a      	ldrh	r2, [r7, #0]
 8006a94:	88bb      	ldrh	r3, [r7, #4]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	bfb8      	it	lt
 8006a9c:	425b      	neglt	r3, r3
 8006a9e:	60fb      	str	r3, [r7, #12]

	int err = dx / 2;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da00      	bge.n	8006aa8 <TFT_DrawLine+0xa0>
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	105b      	asrs	r3, r3, #1
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
	int ystep;

	if(y1 < y2)
 8006aac:	88ba      	ldrh	r2, [r7, #4]
 8006aae:	883b      	ldrh	r3, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d202      	bcs.n	8006aba <TFT_DrawLine+0xb2>
	{
		ystep = 1;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	e024      	b.n	8006b04 <TFT_DrawLine+0xfc>
	}
	else
	{
		ystep = -1;
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295
 8006abe:	623b      	str	r3, [r7, #32]
	}

	for(; x1 <= x2; x1++)
 8006ac0:	e020      	b.n	8006b04 <TFT_DrawLine+0xfc>
	{
		if(steep)
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <TFT_DrawLine+0xce>
		{
			TFT_DrawPixel(y1, x1, color);
 8006ac8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8006aca:	88f9      	ldrh	r1, [r7, #6]
 8006acc:	88bb      	ldrh	r3, [r7, #4]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff ff7c 	bl	80069cc <TFT_DrawPixel>
 8006ad4:	e005      	b.n	8006ae2 <TFT_DrawLine+0xda>
		}
		else
		{
			TFT_DrawPixel(x1, y1, color);
 8006ad6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8006ad8:	88b9      	ldrh	r1, [r7, #4]
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff75 	bl	80069cc <TFT_DrawPixel>
		}

		err -= dy;
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
		if(err < 0)
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da06      	bge.n	8006afe <TFT_DrawLine+0xf6>
		{
			y1 += ystep;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	88bb      	ldrh	r3, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	80bb      	strh	r3, [r7, #4]
			err = dx;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
	for(; x1 <= x2; x1++)
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	3301      	adds	r3, #1
 8006b02:	80fb      	strh	r3, [r7, #6]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	887b      	ldrh	r3, [r7, #2]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d9da      	bls.n	8006ac2 <TFT_DrawLine+0xba>
		}
	}
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	372c      	adds	r7, #44	@ 0x2c
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd90      	pop	{r4, r7, pc}
	...

08006b18 <TFT_DrawBitmap>:
// <---- --------------------------------------- ---->
void TFT_DrawBitmap(uint16_t x, uint16_t y, const uint16_t *pBitmap)
{
 8006b18:	b490      	push	{r4, r7}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	603a      	str	r2, [r7, #0]
 8006b22:	80fb      	strh	r3, [r7, #6]
 8006b24:	460b      	mov	r3, r1
 8006b26:	80bb      	strh	r3, [r7, #4]
	uint16_t xpos, ypos;
	uint16_t width = 480;
 8006b28:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006b2c:	817b      	strh	r3, [r7, #10]
	uint16_t height = 272;
 8006b2e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006b32:	813b      	strh	r3, [r7, #8]

	for (ypos = 0; ypos < height; ypos++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	81bb      	strh	r3, [r7, #12]
 8006b38:	e027      	b.n	8006b8a <TFT_DrawBitmap+0x72>
	{
		for (xpos = 0; xpos < width; xpos++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	81fb      	strh	r3, [r7, #14]
 8006b3e:	e01d      	b.n	8006b7c <TFT_DrawBitmap+0x64>
		{
			// Calculate the framebuffer address
			*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress + (2 * ((y + ypos) * hltdc.LayerCfg[0].ImageWidth + (x + xpos)))) = pBitmap[ypos * width + xpos];
 8006b40:	89bb      	ldrh	r3, [r7, #12]
 8006b42:	897a      	ldrh	r2, [r7, #10]
 8006b44:	fb03 f202 	mul.w	r2, r3, r2
 8006b48:	89fb      	ldrh	r3, [r7, #14]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	4413      	add	r3, r2
 8006b52:	4a13      	ldr	r2, [pc, #76]	@ (8006ba0 <TFT_DrawBitmap+0x88>)
 8006b54:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8006b56:	88b8      	ldrh	r0, [r7, #4]
 8006b58:	89ba      	ldrh	r2, [r7, #12]
 8006b5a:	4402      	add	r2, r0
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ba0 <TFT_DrawBitmap+0x88>)
 8006b60:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006b62:	fb00 f202 	mul.w	r2, r0, r2
 8006b66:	88fc      	ldrh	r4, [r7, #6]
 8006b68:	89f8      	ldrh	r0, [r7, #14]
 8006b6a:	4420      	add	r0, r4
 8006b6c:	4402      	add	r2, r0
 8006b6e:	0052      	lsls	r2, r2, #1
 8006b70:	440a      	add	r2, r1
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	8013      	strh	r3, [r2, #0]
		for (xpos = 0; xpos < width; xpos++)
 8006b76:	89fb      	ldrh	r3, [r7, #14]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	81fb      	strh	r3, [r7, #14]
 8006b7c:	89fa      	ldrh	r2, [r7, #14]
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d3dd      	bcc.n	8006b40 <TFT_DrawBitmap+0x28>
	for (ypos = 0; ypos < height; ypos++)
 8006b84:	89bb      	ldrh	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	81bb      	strh	r3, [r7, #12]
 8006b8a:	89ba      	ldrh	r2, [r7, #12]
 8006b8c:	893b      	ldrh	r3, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d3d3      	bcc.n	8006b3a <TFT_DrawBitmap+0x22>
		}
	}
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc90      	pop	{r4, r7}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	2000032c 	.word	0x2000032c

08006ba4 <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;

//<---- --------------- Functions --------------- ---->
void Mount_SD(const TCHAR* path)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);
 8006bac:	2200      	movs	r2, #0
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	480e      	ldr	r0, [pc, #56]	@ (8006bec <Mount_SD+0x48>)
 8006bb2:	f002 f8d5 	bl	8008d60 <f_mount>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf0 <Mount_SD+0x4c>)
 8006bbc:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Mounting => %d \n", fresult);
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf0 <Mount_SD+0x4c>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	480b      	ldr	r0, [pc, #44]	@ (8006bf4 <Mount_SD+0x50>)
 8006bc6:	f006 f971 	bl	800ceac <iprintf>

	if(fresult == FR_OK)
 8006bca:	4b09      	ldr	r3, [pc, #36]	@ (8006bf0 <Mount_SD+0x4c>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <Mount_SD+0x36>
		printf("SD_CARD mounted successfully...\n");
 8006bd2:	4809      	ldr	r0, [pc, #36]	@ (8006bf8 <Mount_SD+0x54>)
 8006bd4:	f006 f9d2 	bl	800cf7c <puts>
	else
	{
		printf("Error! in mounting SD_CARD...\n");
		Error_Handler();
	}
}
 8006bd8:	e004      	b.n	8006be4 <Mount_SD+0x40>
		printf("Error! in mounting SD_CARD...\n");
 8006bda:	4808      	ldr	r0, [pc, #32]	@ (8006bfc <Mount_SD+0x58>)
 8006bdc:	f006 f9ce 	bl	800cf7c <puts>
		Error_Handler();
 8006be0:	f7fa fcf6 	bl	80015d0 <Error_Handler>
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	2004018c 	.word	0x2004018c
 8006bf0:	2004220c 	.word	0x2004220c
 8006bf4:	0800dfb8 	.word	0x0800dfb8
 8006bf8:	0800dfd4 	.word	0x0800dfd4
 8006bfc:	0800dff4 	.word	0x0800dff4

08006c00 <Unmount_SD>:

//<---- -------------------------------------------------------- ---->
void Unmount_SD(const TCHAR* path)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8006c08:	2201      	movs	r2, #1
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f002 f8a7 	bl	8008d60 <f_mount>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <Unmount_SD+0x48>)
 8006c18:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Unmounting => %d \n", fresult);
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <Unmount_SD+0x48>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	480a      	ldr	r0, [pc, #40]	@ (8006c4c <Unmount_SD+0x4c>)
 8006c22:	f006 f943 	bl	800ceac <iprintf>

	if(fresult == FR_OK)
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <Unmount_SD+0x48>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <Unmount_SD+0x36>
		printf("SD_CARD unmounted successfully...\n");
 8006c2e:	4808      	ldr	r0, [pc, #32]	@ (8006c50 <Unmount_SD+0x50>)
 8006c30:	f006 f9a4 	bl	800cf7c <puts>
	else
	{
		printf("Error! in unmounting SD_CARD...\n");
		Error_Handler();
	}
}
 8006c34:	e004      	b.n	8006c40 <Unmount_SD+0x40>
		printf("Error! in unmounting SD_CARD...\n");
 8006c36:	4807      	ldr	r0, [pc, #28]	@ (8006c54 <Unmount_SD+0x54>)
 8006c38:	f006 f9a0 	bl	800cf7c <puts>
		Error_Handler();
 8006c3c:	f7fa fcc8 	bl	80015d0 <Error_Handler>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	2004220c 	.word	0x2004220c
 8006c4c:	0800e014 	.word	0x0800e014
 8006c50:	0800e034 	.word	0x0800e034
 8006c54:	0800e058 	.word	0x0800e058

08006c58 <Create_File>:
    return fresult;
}
//<---- -------------------------------------------------------- ---->

FRESULT Create_File(char *name)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8006c60:	4928      	ldr	r1, [pc, #160]	@ (8006d04 <Create_File+0xac>)
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f002 feb8 	bl	80099d8 <f_stat>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b26      	ldr	r3, [pc, #152]	@ (8006d08 <Create_File+0xb0>)
 8006c6e:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8006c70:	4b25      	ldr	r3, [pc, #148]	@ (8006d08 <Create_File+0xb0>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	4619      	mov	r1, r3
 8006c76:	4825      	ldr	r0, [pc, #148]	@ (8006d0c <Create_File+0xb4>)
 8006c78:	f006 f918 	bl	800ceac <iprintf>

	if(fresult == FR_OK)
 8006c7c:	4b22      	ldr	r3, [pc, #136]	@ (8006d08 <Create_File+0xb0>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <Create_File+0x3a>
	{
		printf("Error! *%s* already exists!\n use Update_File Function \n", name);
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4822      	ldr	r0, [pc, #136]	@ (8006d10 <Create_File+0xb8>)
 8006c88:	f006 f910 	bl	800ceac <iprintf>
	    return fresult;
 8006c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006d08 <Create_File+0xb0>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	e034      	b.n	8006cfc <Create_File+0xa4>
	}
	else
	{
		fresult = f_open(&fil, name, (FA_CREATE_ALWAYS | FA_READ | FA_WRITE));
 8006c92:	220b      	movs	r2, #11
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	481f      	ldr	r0, [pc, #124]	@ (8006d14 <Create_File+0xbc>)
 8006c98:	f002 f8c6 	bl	8008e28 <f_open>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <Create_File+0xb0>)
 8006ca2:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8006ca4:	4b18      	ldr	r3, [pc, #96]	@ (8006d08 <Create_File+0xb0>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10f      	bne.n	8006ccc <Create_File+0x74>
			printf("*%s* created successfully\n Now use Write_File to write data\n", name);
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	481a      	ldr	r0, [pc, #104]	@ (8006d18 <Create_File+0xc0>)
 8006cb0:	f006 f8fc 	bl	800ceac <iprintf>
		{
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
		    return fresult;
		}

		fresult = f_close(&fil);
 8006cb4:	4817      	ldr	r0, [pc, #92]	@ (8006d14 <Create_File+0xbc>)
 8006cb6:	f002 fe60 	bl	800997a <f_close>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <Create_File+0xb0>)
 8006cc0:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8006cc2:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <Create_File+0xb0>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <Create_File+0x92>
 8006cca:	e009      	b.n	8006ce0 <Create_File+0x88>
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <Create_File+0xb0>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4811      	ldr	r0, [pc, #68]	@ (8006d1c <Create_File+0xc4>)
 8006cd6:	f006 f8e9 	bl	800ceac <iprintf>
		    return fresult;
 8006cda:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <Create_File+0xb0>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	e00d      	b.n	8006cfc <Create_File+0xa4>
			printf("File *%s* Closed Successfully\n", name);
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	480f      	ldr	r0, [pc, #60]	@ (8006d20 <Create_File+0xc8>)
 8006ce4:	f006 f8e2 	bl	800ceac <iprintf>
 8006ce8:	e006      	b.n	8006cf8 <Create_File+0xa0>
		else
			printf("Error! No. %d in closing file *%s* \n", fresult, name);
 8006cea:	4b07      	ldr	r3, [pc, #28]	@ (8006d08 <Create_File+0xb0>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	480c      	ldr	r0, [pc, #48]	@ (8006d24 <Create_File+0xcc>)
 8006cf4:	f006 f8da 	bl	800ceac <iprintf>
	}
    return fresult;
 8006cf8:	4b03      	ldr	r3, [pc, #12]	@ (8006d08 <Create_File+0xb0>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	200421f4 	.word	0x200421f4
 8006d08:	2004220c 	.word	0x2004220c
 8006d0c:	0800e0b4 	.word	0x0800e0b4
 8006d10:	0800e0d4 	.word	0x0800e0d4
 8006d14:	200411c4 	.word	0x200411c4
 8006d18:	0800e10c 	.word	0x0800e10c
 8006d1c:	0800e14c 	.word	0x0800e14c
 8006d20:	0800e174 	.word	0x0800e174
 8006d24:	0800e194 	.word	0x0800e194

08006d28 <Update_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Update_File(char *name, char *data)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	fresult = f_stat(name, &fno);
 8006d32:	493b      	ldr	r1, [pc, #236]	@ (8006e20 <Update_File+0xf8>)
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f002 fe4f 	bl	80099d8 <f_stat>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4b39      	ldr	r3, [pc, #228]	@ (8006e24 <Update_File+0xfc>)
 8006d40:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8006d42:	4b38      	ldr	r3, [pc, #224]	@ (8006e24 <Update_File+0xfc>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4837      	ldr	r0, [pc, #220]	@ (8006e28 <Update_File+0x100>)
 8006d4a:	f006 f8af 	bl	800ceac <iprintf>

	if(fresult == FR_OK)
 8006d4e:	4b35      	ldr	r3, [pc, #212]	@ (8006e24 <Update_File+0xfc>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d157      	bne.n	8006e06 <Update_File+0xde>
	{
		fresult = f_open(&fil, name, (FA_OPEN_APPEND | FA_WRITE));
 8006d56:	2232      	movs	r2, #50	@ 0x32
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4834      	ldr	r0, [pc, #208]	@ (8006e2c <Update_File+0x104>)
 8006d5c:	f002 f864 	bl	8008e28 <f_open>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	4b2f      	ldr	r3, [pc, #188]	@ (8006e24 <Update_File+0xfc>)
 8006d66:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK)
 8006d68:	4b2e      	ldr	r3, [pc, #184]	@ (8006e24 <Update_File+0xfc>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <Update_File+0x5c>
		{
			printf("Error! No. %d in opening file *%s*\n\n", fresult, name);
 8006d70:	4b2c      	ldr	r3, [pc, #176]	@ (8006e24 <Update_File+0xfc>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4619      	mov	r1, r3
 8006d78:	482d      	ldr	r0, [pc, #180]	@ (8006e30 <Update_File+0x108>)
 8006d7a:	f006 f897 	bl	800ceac <iprintf>
			return fresult;
 8006d7e:	4b29      	ldr	r3, [pc, #164]	@ (8006e24 <Update_File+0xfc>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	e049      	b.n	8006e18 <Update_File+0xf0>
		}

		fresult = f_write(&fil, data, strlen (data), &bw);					// Writing text
 8006d84:	6838      	ldr	r0, [r7, #0]
 8006d86:	f7f9 fa43 	bl	8000210 <strlen>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b29      	ldr	r3, [pc, #164]	@ (8006e34 <Update_File+0x10c>)
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	4826      	ldr	r0, [pc, #152]	@ (8006e2c <Update_File+0x104>)
 8006d92:	f002 fba6 	bl	80094e2 <f_write>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b22      	ldr	r3, [pc, #136]	@ (8006e24 <Update_File+0xfc>)
 8006d9c:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Write File => %d \n", fresult);
 8006d9e:	4b21      	ldr	r3, [pc, #132]	@ (8006e24 <Update_File+0xfc>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	4824      	ldr	r0, [pc, #144]	@ (8006e38 <Update_File+0x110>)
 8006da6:	f006 f881 	bl	800ceac <iprintf>

		if(fresult == FR_OK)
 8006daa:	4b1e      	ldr	r3, [pc, #120]	@ (8006e24 <Update_File+0xfc>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <Update_File+0x94>
			printf("*%s* UPDATED successfully\n", name);
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4821      	ldr	r0, [pc, #132]	@ (8006e3c <Update_File+0x114>)
 8006db6:	f006 f879 	bl	800ceac <iprintf>
 8006dba:	e006      	b.n	8006dca <Update_File+0xa2>
		else
			printf("Error! No. %d in writing file *%s*\n\n", fresult, name);
 8006dbc:	4b19      	ldr	r3, [pc, #100]	@ (8006e24 <Update_File+0xfc>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	481e      	ldr	r0, [pc, #120]	@ (8006e40 <Update_File+0x118>)
 8006dc6:	f006 f871 	bl	800ceac <iprintf>

		fresult = f_close(&fil);											// Close file
 8006dca:	4818      	ldr	r0, [pc, #96]	@ (8006e2c <Update_File+0x104>)
 8006dcc:	f002 fdd5 	bl	800997a <f_close>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4b13      	ldr	r3, [pc, #76]	@ (8006e24 <Update_File+0xfc>)
 8006dd6:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Closing File => %d \n", fresult);
 8006dd8:	4b12      	ldr	r3, [pc, #72]	@ (8006e24 <Update_File+0xfc>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4819      	ldr	r0, [pc, #100]	@ (8006e44 <Update_File+0x11c>)
 8006de0:	f006 f864 	bl	800ceac <iprintf>

		if(fresult == FR_OK)
 8006de4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e24 <Update_File+0xfc>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <Update_File+0xce>
			printf("File *%s* CLOSED successfully\n", name);
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4816      	ldr	r0, [pc, #88]	@ (8006e48 <Update_File+0x120>)
 8006df0:	f006 f85c 	bl	800ceac <iprintf>
 8006df4:	e00e      	b.n	8006e14 <Update_File+0xec>
		else
			printf("Error! No. %d in closing file *%s*\n\n", fresult, name);
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <Update_File+0xfc>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4813      	ldr	r0, [pc, #76]	@ (8006e4c <Update_File+0x124>)
 8006e00:	f006 f854 	bl	800ceac <iprintf>
 8006e04:	e006      	b.n	8006e14 <Update_File+0xec>
	}
	else
	{
		printf("Error! *%s* does not exists\n\n", name);
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4811      	ldr	r0, [pc, #68]	@ (8006e50 <Update_File+0x128>)
 8006e0a:	f006 f84f 	bl	800ceac <iprintf>
	    return fresult;
 8006e0e:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <Update_File+0xfc>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	e001      	b.n	8006e18 <Update_File+0xf0>
	}
    return fresult;
 8006e14:	4b03      	ldr	r3, [pc, #12]	@ (8006e24 <Update_File+0xfc>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	200421f4 	.word	0x200421f4
 8006e24:	2004220c 	.word	0x2004220c
 8006e28:	0800e0b4 	.word	0x0800e0b4
 8006e2c:	200411c4 	.word	0x200411c4
 8006e30:	0800e1bc 	.word	0x0800e1bc
 8006e34:	20042214 	.word	0x20042214
 8006e38:	0800e1e4 	.word	0x0800e1e4
 8006e3c:	0800e204 	.word	0x0800e204
 8006e40:	0800e220 	.word	0x0800e220
 8006e44:	0800e248 	.word	0x0800e248
 8006e48:	0800e268 	.word	0x0800e268
 8006e4c:	0800e288 	.word	0x0800e288
 8006e50:	0800e2b0 	.word	0x0800e2b0

08006e54 <Check_SD_Space>:
    return fresult;
}
//<---- -------------------------------------------------------- ---->

void Check_SD_Space(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
	uint32_t total, free_space;

    f_getfree("", &fre_clust, &pfs);						// Check free space
 8006e5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ee0 <Check_SD_Space+0x8c>)
 8006e5c:	4921      	ldr	r1, [pc, #132]	@ (8006ee4 <Check_SD_Space+0x90>)
 8006e5e:	4822      	ldr	r0, [pc, #136]	@ (8006ee8 <Check_SD_Space+0x94>)
 8006e60:	f002 fdfa 	bl	8009a58 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8006e64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee0 <Check_SD_Space+0x8c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	3b02      	subs	r3, #2
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <Check_SD_Space+0x8c>)
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	8952      	ldrh	r2, [r2, #10]
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7f9 fc8e 	bl	8000798 <__aeabi_ui2d>
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	4b1a      	ldr	r3, [pc, #104]	@ (8006eec <Check_SD_Space+0x98>)
 8006e82:	f7f9 fa1d 	bl	80002c0 <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f7f9 fcfd 	bl	800088c <__aeabi_d2uiz>
 8006e92:	4603      	mov	r3, r0
 8006e94:	607b      	str	r3, [r7, #4]
    printf("SD_CARD Total Size: \t%lu\n", total);
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4815      	ldr	r0, [pc, #84]	@ (8006ef0 <Check_SD_Space+0x9c>)
 8006e9a:	f006 f807 	bl	800ceac <iprintf>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8006e9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ee0 <Check_SD_Space+0x8c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	895b      	ldrh	r3, [r3, #10]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <Check_SD_Space+0x90>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7f9 fc72 	bl	8000798 <__aeabi_ui2d>
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <Check_SD_Space+0x98>)
 8006eba:	f7f9 fa01 	bl	80002c0 <__aeabi_dmul>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f7f9 fce1 	bl	800088c <__aeabi_d2uiz>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	603b      	str	r3, [r7, #0]
    printf("SD_CARD Free Space: \t%lu\n", free_space);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	4808      	ldr	r0, [pc, #32]	@ (8006ef4 <Check_SD_Space+0xa0>)
 8006ed2:	f005 ffeb 	bl	800ceac <iprintf>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20042218 	.word	0x20042218
 8006ee4:	2004221c 	.word	0x2004221c
 8006ee8:	0800e4d0 	.word	0x0800e4d0
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	0800e4d4 	.word	0x0800e4d4
 8006ef4:	0800e4f0 	.word	0x0800e4f0

08006ef8 <Read_Bitmap>:
//<---- -------------------------------------------------------- ---->

uint16_t* Read_Bitmap(char *filename)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b094      	sub	sp, #80	@ 0x50
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	uint8_t bmpHeader[BMP_HEADER_SIZE];
	uint8_t bmpPixelData[3]; // BMP stores 24-bit (B, G, R)

	Mount_SD(SDPath);
 8006f00:	4840      	ldr	r0, [pc, #256]	@ (8007004 <Read_Bitmap+0x10c>)
 8006f02:	f7ff fe4f 	bl	8006ba4 <Mount_SD>
	// Open BMP file
	fresult = f_open(&fil, filename, FA_READ);
 8006f06:	2201      	movs	r2, #1
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	483f      	ldr	r0, [pc, #252]	@ (8007008 <Read_Bitmap+0x110>)
 8006f0c:	f001 ff8c 	bl	8008e28 <f_open>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	4b3d      	ldr	r3, [pc, #244]	@ (800700c <Read_Bitmap+0x114>)
 8006f16:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 8006f18:	4b3c      	ldr	r3, [pc, #240]	@ (800700c <Read_Bitmap+0x114>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <Read_Bitmap+0x38>
	{
		printf("Error opening BMP file! Code: %d\n", fresult);
 8006f20:	4b3a      	ldr	r3, [pc, #232]	@ (800700c <Read_Bitmap+0x114>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	483a      	ldr	r0, [pc, #232]	@ (8007010 <Read_Bitmap+0x118>)
 8006f28:	f005 ffc0 	bl	800ceac <iprintf>
		return NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e064      	b.n	8006ffa <Read_Bitmap+0x102>
	}

	// Read the BMP header
	f_read(&fil, bmpHeader, BMP_HEADER_SIZE, &br);
 8006f30:	f107 0110 	add.w	r1, r7, #16
 8006f34:	4b37      	ldr	r3, [pc, #220]	@ (8007014 <Read_Bitmap+0x11c>)
 8006f36:	2236      	movs	r2, #54	@ 0x36
 8006f38:	4833      	ldr	r0, [pc, #204]	@ (8007008 <Read_Bitmap+0x110>)
 8006f3a:	f002 f944 	bl	80091c6 <f_read>

	// Verify BMP signature ('BM' = 0x42 0x4D)
	if(bmpHeader[0] != 'B' || bmpHeader[1] != 'M')
 8006f3e:	7c3b      	ldrb	r3, [r7, #16]
 8006f40:	2b42      	cmp	r3, #66	@ 0x42
 8006f42:	d102      	bne.n	8006f4a <Read_Bitmap+0x52>
 8006f44:	7c7b      	ldrb	r3, [r7, #17]
 8006f46:	2b4d      	cmp	r3, #77	@ 0x4d
 8006f48:	d007      	beq.n	8006f5a <Read_Bitmap+0x62>
	{
		printf("Error: Not a valid BMP file!\n");
 8006f4a:	4833      	ldr	r0, [pc, #204]	@ (8007018 <Read_Bitmap+0x120>)
 8006f4c:	f006 f816 	bl	800cf7c <puts>
		f_close(&fil);
 8006f50:	482d      	ldr	r0, [pc, #180]	@ (8007008 <Read_Bitmap+0x110>)
 8006f52:	f002 fd12 	bl	800997a <f_close>

		return NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e04f      	b.n	8006ffa <Read_Bitmap+0x102>
	}

    // BMP stores pixels bottom-up, so we read in reverse order
    for(uint16_t y = LCD_HEIGHT - 1; y >= 0; y--)
 8006f5a:	f240 130f 	movw	r3, #271	@ 0x10f
 8006f5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    {
        for(uint16_t x = 0; x < LCD_WIDTH; x++)
 8006f62:	2300      	movs	r3, #0
 8006f64:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006f68:	e03c      	b.n	8006fe4 <Read_Bitmap+0xec>
        {
            // Read 24-bit pixel (B, G, R)
            f_read(&fil, bmpPixelData, 3, &br);
 8006f6a:	f107 010c 	add.w	r1, r7, #12
 8006f6e:	4b29      	ldr	r3, [pc, #164]	@ (8007014 <Read_Bitmap+0x11c>)
 8006f70:	2203      	movs	r2, #3
 8006f72:	4825      	ldr	r0, [pc, #148]	@ (8007008 <Read_Bitmap+0x110>)
 8006f74:	f002 f927 	bl	80091c6 <f_read>

            // Convert 24-bit RGB888 to 16-bit RGB565
            uint16_t r = (bmpPixelData[2] >> 3) & 0x1F; // Red   (5 bits)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
            uint16_t g = (bmpPixelData[1] >> 2) & 0x3F; // Green (6 bits)
 8006f86:	7b7b      	ldrb	r3, [r7, #13]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f90:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            uint16_t b = (bmpPixelData[0] >> 3) & 0x1F; // Blue  (5 bits)
 8006f94:	7b3b      	ldrb	r3, [r7, #12]
 8006f96:	08db      	lsrs	r3, r3, #3
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

            // Merge into RGB565 format
            imageBuffer[y * LCD_WIDTH + x] = (r << 11) | (g << 5) | b;
 8006fa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006fa6:	02db      	lsls	r3, r3, #11
 8006fa8:	b21a      	sxth	r2, r3
 8006faa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006fae:	015b      	lsls	r3, r3, #5
 8006fb0:	b21b      	sxth	r3, r3
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b219      	sxth	r1, r3
 8006fbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	015b      	lsls	r3, r3, #5
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fd0:	4413      	add	r3, r2
 8006fd2:	b289      	uxth	r1, r1
 8006fd4:	4a11      	ldr	r2, [pc, #68]	@ (800701c <Read_Bitmap+0x124>)
 8006fd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for(uint16_t x = 0; x < LCD_WIDTH; x++)
 8006fda:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fde:	3301      	adds	r3, #1
 8006fe0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006fe4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fe8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8006fec:	d3bd      	bcc.n	8006f6a <Read_Bitmap+0x72>
    for(uint16_t y = LCD_HEIGHT - 1; y >= 0; y--)
 8006fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        for(uint16_t x = 0; x < LCD_WIDTH; x++)
 8006ff8:	e7b3      	b.n	8006f62 <Read_Bitmap+0x6a>
    // Close the file
    f_close(&fil);

    // Return pointer to the buffer
    return imageBuffer;
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3750      	adds	r7, #80	@ 0x50
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000584 	.word	0x20000584
 8007008:	200411c4 	.word	0x200411c4
 800700c:	2004220c 	.word	0x2004220c
 8007010:	0800e50c 	.word	0x0800e50c
 8007014:	20042210 	.word	0x20042210
 8007018:	0800e530 	.word	0x0800e530
 800701c:	2000058c 	.word	0x2000058c

08007020 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <disk_status+0x30>)
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	79fa      	ldrb	r2, [r7, #7]
 8007038:	4905      	ldr	r1, [pc, #20]	@ (8007050 <disk_status+0x30>)
 800703a:	440a      	add	r2, r1
 800703c:	7a12      	ldrb	r2, [r2, #8]
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20042248 	.word	0x20042248

08007054 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	4a0d      	ldr	r2, [pc, #52]	@ (800709c <disk_initialize+0x48>)
 8007066:	5cd3      	ldrb	r3, [r2, r3]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d111      	bne.n	8007090 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a0b      	ldr	r2, [pc, #44]	@ (800709c <disk_initialize+0x48>)
 8007070:	2101      	movs	r1, #1
 8007072:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	4a09      	ldr	r2, [pc, #36]	@ (800709c <disk_initialize+0x48>)
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	79fa      	ldrb	r2, [r7, #7]
 8007082:	4906      	ldr	r1, [pc, #24]	@ (800709c <disk_initialize+0x48>)
 8007084:	440a      	add	r2, r1
 8007086:	7a12      	ldrb	r2, [r2, #8]
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20042248 	.word	0x20042248

080070a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80070a0:	b590      	push	{r4, r7, lr}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	4a0a      	ldr	r2, [pc, #40]	@ (80070dc <disk_read+0x3c>)
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	689c      	ldr	r4, [r3, #8]
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	4a07      	ldr	r2, [pc, #28]	@ (80070dc <disk_read+0x3c>)
 80070c0:	4413      	add	r3, r2
 80070c2:	7a18      	ldrb	r0, [r3, #8]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	47a0      	blx	r4
 80070cc:	4603      	mov	r3, r0
 80070ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd90      	pop	{r4, r7, pc}
 80070da:	bf00      	nop
 80070dc:	20042248 	.word	0x20042248

080070e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	4a0a      	ldr	r2, [pc, #40]	@ (800711c <disk_write+0x3c>)
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68dc      	ldr	r4, [r3, #12]
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	4a07      	ldr	r2, [pc, #28]	@ (800711c <disk_write+0x3c>)
 8007100:	4413      	add	r3, r2
 8007102:	7a18      	ldrb	r0, [r3, #8]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	47a0      	blx	r4
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
}
 8007112:	4618      	mov	r0, r3
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd90      	pop	{r4, r7, pc}
 800711a:	bf00      	nop
 800711c:	20042248 	.word	0x20042248

08007120 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	603a      	str	r2, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
 800712c:	460b      	mov	r3, r1
 800712e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	4a09      	ldr	r2, [pc, #36]	@ (8007158 <disk_ioctl+0x38>)
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	79fa      	ldrb	r2, [r7, #7]
 800713e:	4906      	ldr	r1, [pc, #24]	@ (8007158 <disk_ioctl+0x38>)
 8007140:	440a      	add	r2, r1
 8007142:	7a10      	ldrb	r0, [r2, #8]
 8007144:	79b9      	ldrb	r1, [r7, #6]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	4798      	blx	r3
 800714a:	4603      	mov	r3, r0
 800714c:	73fb      	strb	r3, [r7, #15]
  return res;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20042248 	.word	0x20042248

0800715c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3301      	adds	r3, #1
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800716c:	89fb      	ldrh	r3, [r7, #14]
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	b21a      	sxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b21b      	sxth	r3, r3
 8007178:	4313      	orrs	r3, r2
 800717a:	b21b      	sxth	r3, r3
 800717c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800717e:	89fb      	ldrh	r3, [r7, #14]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3303      	adds	r3, #3
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	3202      	adds	r2, #2
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	3201      	adds	r2, #1
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80071c4:	68fb      	ldr	r3, [r7, #12]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	887a      	ldrh	r2, [r7, #2]
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	607a      	str	r2, [r7, #4]
 80071f6:	887a      	ldrh	r2, [r7, #2]
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	1c53      	adds	r3, r2, #1
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	6179      	str	r1, [r7, #20]
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3b01      	subs	r3, #1
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f1      	bne.n	800727a <mem_cpy+0x1a>
	}
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80072a2:	b480      	push	{r7}
 80072a4:	b087      	sub	sp, #28
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	617a      	str	r2, [r7, #20]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f3      	bne.n	80072b2 <mem_set+0x10>
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80072d8:	b480      	push	{r7}
 80072da:	b089      	sub	sp, #36	@ 0x24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	61fb      	str	r3, [r7, #28]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	61fa      	str	r2, [r7, #28]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	4619      	mov	r1, r3
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	61ba      	str	r2, [r7, #24]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	1acb      	subs	r3, r1, r3
 8007304:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3b01      	subs	r3, #1
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <mem_cmp+0x40>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0eb      	beq.n	80072f0 <mem_cmp+0x18>

	return r;
 8007318:	697b      	ldr	r3, [r7, #20]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3724      	adds	r7, #36	@ 0x24
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007330:	e002      	b.n	8007338 <chk_chr+0x12>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3301      	adds	r3, #1
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <chk_chr+0x26>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	4293      	cmp	r3, r2
 800734a:	d1f2      	bne.n	8007332 <chk_chr+0xc>
	return *str;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	781b      	ldrb	r3, [r3, #0]
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <lock_fs+0x22>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	4618      	mov	r0, r3
 8007370:	f002 fcb5 	bl	8009cde <ff_req_grant>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <lock_fs+0x22>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <lock_fs+0x24>
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <unlock_fs+0x2e>
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d00a      	beq.n	80073b6 <unlock_fs+0x2e>
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2b0b      	cmp	r3, #11
 80073a4:	d007      	beq.n	80073b6 <unlock_fs+0x2e>
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	2b0f      	cmp	r3, #15
 80073aa:	d004      	beq.n	80073b6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f002 fca9 	bl	8009d08 <ff_rel_grant>
	}
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073ca:	2300      	movs	r3, #0
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e029      	b.n	8007428 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80073d4:	4a27      	ldr	r2, [pc, #156]	@ (8007474 <chk_lock+0xb4>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	4413      	add	r3, r2
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01d      	beq.n	800741e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073e2:	4a24      	ldr	r2, [pc, #144]	@ (8007474 <chk_lock+0xb4>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	4413      	add	r3, r2
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d116      	bne.n	8007422 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80073f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007474 <chk_lock+0xb4>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	4413      	add	r3, r2
 80073fc:	3304      	adds	r3, #4
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007404:	429a      	cmp	r2, r3
 8007406:	d10c      	bne.n	8007422 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007408:	4a1a      	ldr	r2, [pc, #104]	@ (8007474 <chk_lock+0xb4>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	3308      	adds	r3, #8
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007418:	429a      	cmp	r2, r3
 800741a:	d102      	bne.n	8007422 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800741c:	e007      	b.n	800742e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800741e:	2301      	movs	r3, #1
 8007420:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d9d2      	bls.n	80073d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d109      	bne.n	8007448 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <chk_lock+0x80>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d101      	bne.n	8007444 <chk_lock+0x84>
 8007440:	2300      	movs	r3, #0
 8007442:	e010      	b.n	8007466 <chk_lock+0xa6>
 8007444:	2312      	movs	r3, #18
 8007446:	e00e      	b.n	8007466 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <chk_lock+0xa0>
 800744e:	4a09      	ldr	r2, [pc, #36]	@ (8007474 <chk_lock+0xb4>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	4413      	add	r3, r2
 8007456:	330c      	adds	r3, #12
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800745e:	d101      	bne.n	8007464 <chk_lock+0xa4>
 8007460:	2310      	movs	r3, #16
 8007462:	e000      	b.n	8007466 <chk_lock+0xa6>
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20042228 	.word	0x20042228

08007478 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	e002      	b.n	800748a <enq_lock+0x12>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d806      	bhi.n	800749e <enq_lock+0x26>
 8007490:	4a09      	ldr	r2, [pc, #36]	@ (80074b8 <enq_lock+0x40>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	4413      	add	r3, r2
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f2      	bne.n	8007484 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	bf14      	ite	ne
 80074a4:	2301      	movne	r3, #1
 80074a6:	2300      	moveq	r3, #0
 80074a8:	b2db      	uxtb	r3, r3
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20042228 	.word	0x20042228

080074bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e01f      	b.n	800750c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80074cc:	4a41      	ldr	r2, [pc, #260]	@ (80075d4 <inc_lock+0x118>)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	4413      	add	r3, r2
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d113      	bne.n	8007506 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80074de:	4a3d      	ldr	r2, [pc, #244]	@ (80075d4 <inc_lock+0x118>)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d109      	bne.n	8007506 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80074f2:	4a38      	ldr	r2, [pc, #224]	@ (80075d4 <inc_lock+0x118>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	3308      	adds	r3, #8
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007502:	429a      	cmp	r2, r3
 8007504:	d006      	beq.n	8007514 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d9dc      	bls.n	80074cc <inc_lock+0x10>
 8007512:	e000      	b.n	8007516 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007514:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d132      	bne.n	8007582 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e002      	b.n	8007528 <inc_lock+0x6c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d806      	bhi.n	800753c <inc_lock+0x80>
 800752e:	4a29      	ldr	r2, [pc, #164]	@ (80075d4 <inc_lock+0x118>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	4413      	add	r3, r2
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1f2      	bne.n	8007522 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d101      	bne.n	8007546 <inc_lock+0x8a>
 8007542:	2300      	movs	r3, #0
 8007544:	e040      	b.n	80075c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4922      	ldr	r1, [pc, #136]	@ (80075d4 <inc_lock+0x118>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	440b      	add	r3, r1
 8007552:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	491e      	ldr	r1, [pc, #120]	@ (80075d4 <inc_lock+0x118>)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	440b      	add	r3, r1
 8007560:	3304      	adds	r3, #4
 8007562:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695a      	ldr	r2, [r3, #20]
 8007568:	491a      	ldr	r1, [pc, #104]	@ (80075d4 <inc_lock+0x118>)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	440b      	add	r3, r1
 8007570:	3308      	adds	r3, #8
 8007572:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007574:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <inc_lock+0x118>)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	4413      	add	r3, r2
 800757c:	330c      	adds	r3, #12
 800757e:	2200      	movs	r2, #0
 8007580:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <inc_lock+0xe0>
 8007588:	4a12      	ldr	r2, [pc, #72]	@ (80075d4 <inc_lock+0x118>)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	4413      	add	r3, r2
 8007590:	330c      	adds	r3, #12
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <inc_lock+0xe0>
 8007598:	2300      	movs	r3, #0
 800759a:	e015      	b.n	80075c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <inc_lock+0xf8>
 80075a2:	4a0c      	ldr	r2, [pc, #48]	@ (80075d4 <inc_lock+0x118>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	011b      	lsls	r3, r3, #4
 80075a8:	4413      	add	r3, r2
 80075aa:	330c      	adds	r3, #12
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	e001      	b.n	80075b8 <inc_lock+0xfc>
 80075b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075b8:	4906      	ldr	r1, [pc, #24]	@ (80075d4 <inc_lock+0x118>)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	440b      	add	r3, r1
 80075c0:	330c      	adds	r3, #12
 80075c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	20042228 	.word	0x20042228

080075d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d825      	bhi.n	8007638 <dec_lock+0x60>
		n = Files[i].ctr;
 80075ec:	4a17      	ldr	r2, [pc, #92]	@ (800764c <dec_lock+0x74>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4413      	add	r3, r2
 80075f4:	330c      	adds	r3, #12
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80075fa:	89fb      	ldrh	r3, [r7, #14]
 80075fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007600:	d101      	bne.n	8007606 <dec_lock+0x2e>
 8007602:	2300      	movs	r3, #0
 8007604:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007606:	89fb      	ldrh	r3, [r7, #14]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <dec_lock+0x3a>
 800760c:	89fb      	ldrh	r3, [r7, #14]
 800760e:	3b01      	subs	r3, #1
 8007610:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007612:	4a0e      	ldr	r2, [pc, #56]	@ (800764c <dec_lock+0x74>)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	4413      	add	r3, r2
 800761a:	330c      	adds	r3, #12
 800761c:	89fa      	ldrh	r2, [r7, #14]
 800761e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <dec_lock+0x5a>
 8007626:	4a09      	ldr	r2, [pc, #36]	@ (800764c <dec_lock+0x74>)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	4413      	add	r3, r2
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	737b      	strb	r3, [r7, #13]
 8007636:	e001      	b.n	800763c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007638:	2302      	movs	r3, #2
 800763a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800763c:	7b7b      	ldrb	r3, [r7, #13]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20042228 	.word	0x20042228

08007650 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e010      	b.n	8007680 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800765e:	4a0d      	ldr	r2, [pc, #52]	@ (8007694 <clear_lock+0x44>)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	4413      	add	r3, r2
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d105      	bne.n	800767a <clear_lock+0x2a>
 800766e:	4a09      	ldr	r2, [pc, #36]	@ (8007694 <clear_lock+0x44>)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	4413      	add	r3, r2
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3301      	adds	r3, #1
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d9eb      	bls.n	800765e <clear_lock+0xe>
	}
}
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20042228 	.word	0x20042228

08007698 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d034      	beq.n	8007716 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7858      	ldrb	r0, [r3, #1]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80076bc:	2301      	movs	r3, #1
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	f7ff fd0e 	bl	80070e0 <disk_write>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	e022      	b.n	8007716 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	1ad2      	subs	r2, r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d217      	bcs.n	8007716 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	789b      	ldrb	r3, [r3, #2]
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	e010      	b.n	8007710 <sync_window+0x78>
					wsect += fs->fsize;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7858      	ldrb	r0, [r3, #1]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007702:	2301      	movs	r3, #1
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	f7ff fceb 	bl	80070e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3b01      	subs	r3, #1
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d8eb      	bhi.n	80076ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d01b      	beq.n	8007770 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ffad 	bl	8007698 <sync_window>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d113      	bne.n	8007770 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7858      	ldrb	r0, [r3, #1]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007752:	2301      	movs	r3, #1
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	f7ff fca3 	bl	80070a0 <disk_read>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d004      	beq.n	800776a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007760:	f04f 33ff 	mov.w	r3, #4294967295
 8007764:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ff87 	bl	8007698 <sync_window>
 800778a:	4603      	mov	r3, r0
 800778c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d159      	bne.n	8007848 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b03      	cmp	r3, #3
 800779a:	d149      	bne.n	8007830 <sync_fs+0xb4>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	791b      	ldrb	r3, [r3, #4]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d145      	bne.n	8007830 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	899b      	ldrh	r3, [r3, #12]
 80077ae:	461a      	mov	r2, r3
 80077b0:	2100      	movs	r1, #0
 80077b2:	f7ff fd76 	bl	80072a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3338      	adds	r3, #56	@ 0x38
 80077ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80077be:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fd05 	bl	80071d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3338      	adds	r3, #56	@ 0x38
 80077cc:	4921      	ldr	r1, [pc, #132]	@ (8007854 <sync_fs+0xd8>)
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fd1a 	bl	8007208 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3338      	adds	r3, #56	@ 0x38
 80077d8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80077dc:	491e      	ldr	r1, [pc, #120]	@ (8007858 <sync_fs+0xdc>)
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff fd12 	bl	8007208 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3338      	adds	r3, #56	@ 0x38
 80077e8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7ff fd08 	bl	8007208 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3338      	adds	r3, #56	@ 0x38
 80077fc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7ff fcfe 	bl	8007208 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7858      	ldrb	r0, [r3, #1]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007824:	2301      	movs	r3, #1
 8007826:	f7ff fc5b 	bl	80070e0 <disk_write>
			fs->fsi_flag = 0;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2200      	movs	r2, #0
 8007836:	2100      	movs	r1, #0
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fc71 	bl	8007120 <disk_ioctl>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <sync_fs+0xcc>
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	41615252 	.word	0x41615252
 8007858:	61417272 	.word	0x61417272

0800785c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	3b02      	subs	r3, #2
 800786a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	3b02      	subs	r3, #2
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d301      	bcc.n	800787c <clust2sect+0x20>
 8007878:	2300      	movs	r3, #0
 800787a:	e008      	b.n	800788e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	895b      	ldrh	r3, [r3, #10]
 8007880:	461a      	mov	r2, r3
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	fb03 f202 	mul.w	r2, r3, r2
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788c:	4413      	add	r3, r2
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d904      	bls.n	80078ba <get_fat+0x20>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d302      	bcc.n	80078c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80078ba:	2301      	movs	r3, #1
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e0ba      	b.n	8007a36 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	f000 8082 	beq.w	80079d4 <get_fat+0x13a>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	f300 80a6 	bgt.w	8007a22 <get_fat+0x188>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d002      	beq.n	80078e0 <get_fat+0x46>
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d055      	beq.n	800798a <get_fat+0xf0>
 80078de:	e0a0      	b.n	8007a22 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	899b      	ldrh	r3, [r3, #12]
 80078f6:	4619      	mov	r1, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80078fe:	4413      	add	r3, r2
 8007900:	4619      	mov	r1, r3
 8007902:	6938      	ldr	r0, [r7, #16]
 8007904:	f7ff ff0c 	bl	8007720 <move_window>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 808c 	bne.w	8007a28 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	60fa      	str	r2, [r7, #12]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	8992      	ldrh	r2, [r2, #12]
 800791a:	fbb3 f1f2 	udiv	r1, r3, r2
 800791e:	fb01 f202 	mul.w	r2, r1, r2
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4413      	add	r3, r2
 8007928:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800792c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	899b      	ldrh	r3, [r3, #12]
 8007936:	4619      	mov	r1, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	fbb3 f3f1 	udiv	r3, r3, r1
 800793e:	4413      	add	r3, r2
 8007940:	4619      	mov	r1, r3
 8007942:	6938      	ldr	r0, [r7, #16]
 8007944:	f7ff feec 	bl	8007720 <move_window>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d16e      	bne.n	8007a2c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	899b      	ldrh	r3, [r3, #12]
 8007952:	461a      	mov	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	fbb3 f1f2 	udiv	r1, r3, r2
 800795a:	fb01 f202 	mul.w	r2, r1, r2
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4413      	add	r3, r2
 8007964:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4313      	orrs	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <get_fat+0xe6>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	091b      	lsrs	r3, r3, #4
 800797e:	e002      	b.n	8007986 <get_fat+0xec>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007986:	617b      	str	r3, [r7, #20]
			break;
 8007988:	e055      	b.n	8007a36 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	899b      	ldrh	r3, [r3, #12]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	b29b      	uxth	r3, r3
 8007996:	4619      	mov	r1, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	fbb3 f3f1 	udiv	r3, r3, r1
 800799e:	4413      	add	r3, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	6938      	ldr	r0, [r7, #16]
 80079a4:	f7ff febc 	bl	8007720 <move_window>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d140      	bne.n	8007a30 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	8992      	ldrh	r2, [r2, #12]
 80079bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80079c0:	fb00 f202 	mul.w	r2, r0, r2
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	440b      	add	r3, r1
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fbc7 	bl	800715c <ld_word>
 80079ce:	4603      	mov	r3, r0
 80079d0:	617b      	str	r3, [r7, #20]
			break;
 80079d2:	e030      	b.n	8007a36 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	899b      	ldrh	r3, [r3, #12]
 80079dc:	089b      	lsrs	r3, r3, #2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	4619      	mov	r1, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80079e8:	4413      	add	r3, r2
 80079ea:	4619      	mov	r1, r3
 80079ec:	6938      	ldr	r0, [r7, #16]
 80079ee:	f7ff fe97 	bl	8007720 <move_window>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11d      	bne.n	8007a34 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	8992      	ldrh	r2, [r2, #12]
 8007a06:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a0a:	fb00 f202 	mul.w	r2, r0, r2
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	440b      	add	r3, r1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fbba 	bl	800718c <ld_dword>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a1e:	617b      	str	r3, [r7, #20]
			break;
 8007a20:	e009      	b.n	8007a36 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e006      	b.n	8007a36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a34:	bf00      	nop
		}
	}

	return val;
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a40:	b590      	push	{r4, r7, lr}
 8007a42:	b089      	sub	sp, #36	@ 0x24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	f240 8109 	bls.w	8007c6a <put_fat+0x22a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f080 8103 	bcs.w	8007c6a <put_fat+0x22a>
		switch (fs->fs_type) {
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	f000 80b6 	beq.w	8007bda <put_fat+0x19a>
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	f300 80fb 	bgt.w	8007c6a <put_fat+0x22a>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d003      	beq.n	8007a80 <put_fat+0x40>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	f000 8083 	beq.w	8007b84 <put_fat+0x144>
 8007a7e:	e0f4      	b.n	8007c6a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	899b      	ldrh	r3, [r3, #12]
 8007a96:	4619      	mov	r1, r3
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fe3c 	bl	8007720 <move_window>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007aac:	7ffb      	ldrb	r3, [r7, #31]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 80d4 	bne.w	8007c5c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	61ba      	str	r2, [r7, #24]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	8992      	ldrh	r2, [r2, #12]
 8007ac4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ac8:	fb00 f202 	mul.w	r2, r0, r2
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	440b      	add	r3, r1
 8007ad0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00d      	beq.n	8007af8 <put_fat+0xb8>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	b25a      	sxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	4313      	orrs	r3, r2
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e001      	b.n	8007afc <put_fat+0xbc>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	899b      	ldrh	r3, [r3, #12]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b16:	4413      	add	r3, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff fe00 	bl	8007720 <move_window>
 8007b20:	4603      	mov	r3, r0
 8007b22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f040 809a 	bne.w	8007c60 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	899b      	ldrh	r3, [r3, #12]
 8007b36:	461a      	mov	r2, r3
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b3e:	fb00 f202 	mul.w	r2, r0, r2
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	440b      	add	r3, r1
 8007b46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <put_fat+0x11a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	091b      	lsrs	r3, r3, #4
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	e00e      	b.n	8007b78 <put_fat+0x138>
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b25b      	sxtb	r3, r3
 8007b60:	f023 030f 	bic.w	r3, r3, #15
 8007b64:	b25a      	sxtb	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	70da      	strb	r2, [r3, #3]
			break;
 8007b82:	e072      	b.n	8007c6a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	899b      	ldrh	r3, [r3, #12]
 8007b8c:	085b      	lsrs	r3, r3, #1
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	4619      	mov	r1, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b98:	4413      	add	r3, r2
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7ff fdbf 	bl	8007720 <move_window>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ba6:	7ffb      	ldrb	r3, [r7, #31]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d15b      	bne.n	8007c64 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	8992      	ldrh	r2, [r2, #12]
 8007bba:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bbe:	fb00 f202 	mul.w	r2, r0, r2
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	b292      	uxth	r2, r2
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fb00 	bl	80071d2 <st_word>
			fs->wflag = 1;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	70da      	strb	r2, [r3, #3]
			break;
 8007bd8:	e047      	b.n	8007c6a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	899b      	ldrh	r3, [r3, #12]
 8007be2:	089b      	lsrs	r3, r3, #2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4619      	mov	r1, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bee:	4413      	add	r3, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fd94 	bl	8007720 <move_window>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bfc:	7ffb      	ldrb	r3, [r7, #31]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d132      	bne.n	8007c68 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	8992      	ldrh	r2, [r2, #12]
 8007c16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c1a:	fb00 f202 	mul.w	r2, r0, r2
 8007c1e:	1a9b      	subs	r3, r3, r2
 8007c20:	440b      	add	r3, r1
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fab2 	bl	800718c <ld_dword>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007c2e:	4323      	orrs	r3, r4
 8007c30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	8992      	ldrh	r2, [r2, #12]
 8007c40:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c44:	fb00 f202 	mul.w	r2, r0, r2
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff fada 	bl	8007208 <st_dword>
			fs->wflag = 1;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	70da      	strb	r2, [r3, #3]
			break;
 8007c5a:	e006      	b.n	8007c6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007c5c:	bf00      	nop
 8007c5e:	e004      	b.n	8007c6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007c60:	bf00      	nop
 8007c62:	e002      	b.n	8007c6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007c64:	bf00      	nop
 8007c66:	e000      	b.n	8007c6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007c68:	bf00      	nop
		}
	}
	return res;
 8007c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3724      	adds	r7, #36	@ 0x24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd90      	pop	{r4, r7, pc}

08007c74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d904      	bls.n	8007c9a <remove_chain+0x26>
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d301      	bcc.n	8007c9e <remove_chain+0x2a>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e04b      	b.n	8007d36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	69b8      	ldr	r0, [r7, #24]
 8007cac:	f7ff fec8 	bl	8007a40 <put_fat>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007cb4:	7ffb      	ldrb	r3, [r7, #31]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <remove_chain+0x4a>
 8007cba:	7ffb      	ldrb	r3, [r7, #31]
 8007cbc:	e03b      	b.n	8007d36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fdea 	bl	800789a <get_fat>
 8007cc6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d031      	beq.n	8007d32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <remove_chain+0x64>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e02e      	b.n	8007d36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d101      	bne.n	8007ce4 <remove_chain+0x70>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e028      	b.n	8007d36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	69b8      	ldr	r0, [r7, #24]
 8007cea:	f7ff fea9 	bl	8007a40 <put_fat>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007cf2:	7ffb      	ldrb	r3, [r7, #31]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <remove_chain+0x88>
 8007cf8:	7ffb      	ldrb	r3, [r7, #31]
 8007cfa:	e01c      	b.n	8007d36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	3b02      	subs	r3, #2
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d20b      	bcs.n	8007d22 <remove_chain+0xae>
			fs->free_clst++;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	791b      	ldrb	r3, [r3, #4]
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d3c6      	bcc.n	8007cbe <remove_chain+0x4a>
 8007d30:	e000      	b.n	8007d34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10d      	bne.n	8007d70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <create_chain+0x2c>
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d31b      	bcc.n	8007da2 <create_chain+0x64>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	e018      	b.n	8007da2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fd91 	bl	800789a <get_fat>
 8007d78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d801      	bhi.n	8007d84 <create_chain+0x46>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e070      	b.n	8007e66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d101      	bne.n	8007d90 <create_chain+0x52>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	e06a      	b.n	8007e66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d201      	bcs.n	8007d9e <create_chain+0x60>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	e063      	b.n	8007e66 <create_chain+0x128>
		scl = clst;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	3301      	adds	r3, #1
 8007daa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d307      	bcc.n	8007dc6 <create_chain+0x88>
				ncl = 2;
 8007db6:	2302      	movs	r3, #2
 8007db8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d901      	bls.n	8007dc6 <create_chain+0x88>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e04f      	b.n	8007e66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007dc6:	69f9      	ldr	r1, [r7, #28]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff fd66 	bl	800789a <get_fat>
 8007dce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d003      	beq.n	8007de4 <create_chain+0xa6>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d101      	bne.n	8007de8 <create_chain+0xaa>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	e03e      	b.n	8007e66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d1da      	bne.n	8007da6 <create_chain+0x68>
 8007df0:	2300      	movs	r3, #0
 8007df2:	e038      	b.n	8007e66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007df4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	69f9      	ldr	r1, [r7, #28]
 8007dfc:	6938      	ldr	r0, [r7, #16]
 8007dfe:	f7ff fe1f 	bl	8007a40 <put_fat>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d109      	bne.n	8007e20 <create_chain+0xe2>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d006      	beq.n	8007e20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6938      	ldr	r0, [r7, #16]
 8007e18:	f7ff fe12 	bl	8007a40 <put_fat>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d116      	bne.n	8007e54 <create_chain+0x116>
		fs->last_clst = ncl;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	699a      	ldr	r2, [r3, #24]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	3b02      	subs	r3, #2
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d804      	bhi.n	8007e44 <create_chain+0x106>
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	791b      	ldrb	r3, [r3, #4]
 8007e48:	f043 0301 	orr.w	r3, r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	711a      	strb	r2, [r3, #4]
 8007e52:	e007      	b.n	8007e64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d102      	bne.n	8007e60 <create_chain+0x122>
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	e000      	b.n	8007e62 <create_chain+0x124>
 8007e60:	2301      	movs	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e64:	69fb      	ldr	r3, [r7, #28]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	3304      	adds	r3, #4
 8007e84:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	899b      	ldrh	r3, [r3, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	8952      	ldrh	r2, [r2, #10]
 8007e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	613a      	str	r2, [r7, #16]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <clmt_clust+0x42>
 8007eac:	2300      	movs	r3, #0
 8007eae:	e010      	b.n	8007ed2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d307      	bcc.n	8007ec8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ec6:	e7e9      	b.n	8007e9c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007ec8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4413      	add	r3, r2
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ef4:	d204      	bcs.n	8007f00 <dir_sdi+0x22>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f00:	2302      	movs	r3, #2
 8007f02:	e071      	b.n	8007fe8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <dir_sdi+0x46>
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d902      	bls.n	8007f24 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f22:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10c      	bne.n	8007f44 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	8912      	ldrh	r2, [r2, #8]
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d301      	bcc.n	8007f3a <dir_sdi+0x5c>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e056      	b.n	8007fe8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	61da      	str	r2, [r3, #28]
 8007f42:	e02d      	b.n	8007fa0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	895b      	ldrh	r3, [r3, #10]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	899b      	ldrh	r3, [r3, #12]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f54:	e019      	b.n	8007f8a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fc9d 	bl	800789a <get_fat>
 8007f60:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d101      	bne.n	8007f6e <dir_sdi+0x90>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e03c      	b.n	8007fe8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d904      	bls.n	8007f7e <dir_sdi+0xa0>
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d301      	bcc.n	8007f82 <dir_sdi+0xa4>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e032      	b.n	8007fe8 <dir_sdi+0x10a>
			ofs -= csz;
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d2e1      	bcs.n	8007f56 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	6938      	ldr	r0, [r7, #16]
 8007f96:	f7ff fc61 	bl	800785c <clust2sect>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <dir_sdi+0xd4>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e01a      	b.n	8007fe8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69da      	ldr	r2, [r3, #28]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	899b      	ldrh	r3, [r3, #12]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	899b      	ldrh	r3, [r3, #12]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fda:	fb00 f202 	mul.w	r2, r0, r2
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	18ca      	adds	r2, r1, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	3320      	adds	r3, #32
 8008006:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <dir_next+0x28>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008016:	d301      	bcc.n	800801c <dir_next+0x2c>
 8008018:	2304      	movs	r3, #4
 800801a:	e0bb      	b.n	8008194 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	899b      	ldrh	r3, [r3, #12]
 8008020:	461a      	mov	r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	fbb3 f1f2 	udiv	r1, r3, r2
 8008028:	fb01 f202 	mul.w	r2, r1, r2
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 809d 	bne.w	800816e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	8912      	ldrh	r2, [r2, #8]
 800804e:	4293      	cmp	r3, r2
 8008050:	f0c0 808d 	bcc.w	800816e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	61da      	str	r2, [r3, #28]
 800805a:	2304      	movs	r3, #4
 800805c:	e09a      	b.n	8008194 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	899b      	ldrh	r3, [r3, #12]
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	fbb3 f3f2 	udiv	r3, r3, r2
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	8952      	ldrh	r2, [r2, #10]
 800806e:	3a01      	subs	r2, #1
 8008070:	4013      	ands	r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d17b      	bne.n	800816e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7ff fc0b 	bl	800789a <get_fat>
 8008084:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d801      	bhi.n	8008090 <dir_next+0xa0>
 800808c:	2302      	movs	r3, #2
 800808e:	e081      	b.n	8008194 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d101      	bne.n	800809c <dir_next+0xac>
 8008098:	2301      	movs	r3, #1
 800809a:	e07b      	b.n	8008194 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d359      	bcc.n	800815a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	61da      	str	r2, [r3, #28]
 80080b2:	2304      	movs	r3, #4
 80080b4:	e06e      	b.n	8008194 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f7ff fe3d 	bl	8007d3e <create_chain>
 80080c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <dir_next+0xe0>
 80080cc:	2307      	movs	r3, #7
 80080ce:	e061      	b.n	8008194 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <dir_next+0xea>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e05c      	b.n	8008194 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e0:	d101      	bne.n	80080e6 <dir_next+0xf6>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e056      	b.n	8008194 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fad6 	bl	8007698 <sync_window>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <dir_next+0x106>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e04e      	b.n	8008194 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	899b      	ldrh	r3, [r3, #12]
 8008100:	461a      	mov	r2, r3
 8008102:	2100      	movs	r1, #0
 8008104:	f7ff f8cd 	bl	80072a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	6979      	ldr	r1, [r7, #20]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fba4 	bl	800785c <clust2sect>
 8008114:	4602      	mov	r2, r0
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	635a      	str	r2, [r3, #52]	@ 0x34
 800811a:	e012      	b.n	8008142 <dir_next+0x152>
						fs->wflag = 1;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff fab8 	bl	8007698 <sync_window>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <dir_next+0x142>
 800812e:	2301      	movs	r3, #1
 8008130:	e030      	b.n	8008194 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	3301      	adds	r3, #1
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	635a      	str	r2, [r3, #52]	@ 0x34
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	895b      	ldrh	r3, [r3, #10]
 8008146:	461a      	mov	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	4293      	cmp	r3, r2
 800814c:	d3e6      	bcc.n	800811c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad2      	subs	r2, r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fb7a 	bl	800785c <clust2sect>
 8008168:	4602      	mov	r2, r0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	899b      	ldrh	r3, [r3, #12]
 800817e:	461a      	mov	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	fbb3 f0f2 	udiv	r0, r3, r2
 8008186:	fb00 f202 	mul.w	r2, r0, r2
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	18ca      	adds	r2, r1, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80081ac:	2100      	movs	r1, #0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fe95 	bl	8007ede <dir_sdi>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d12b      	bne.n	8008216 <dir_alloc+0x7a>
		n = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff faa9 	bl	8007720 <move_window>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d11d      	bne.n	8008214 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2be5      	cmp	r3, #229	@ 0xe5
 80081e0:	d004      	beq.n	80081ec <dir_alloc+0x50>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3301      	adds	r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d102      	bne.n	8008200 <dir_alloc+0x64>
 80081fa:	e00c      	b.n	8008216 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008200:	2101      	movs	r1, #1
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fef4 	bl	8007ff0 <dir_next>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0d7      	beq.n	80081c2 <dir_alloc+0x26>
 8008212:	e000      	b.n	8008216 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008214:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2b04      	cmp	r3, #4
 800821a:	d101      	bne.n	8008220 <dir_alloc+0x84>
 800821c:	2307      	movs	r3, #7
 800821e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	331a      	adds	r3, #26
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe ff8f 	bl	800715c <ld_word>
 800823e:	4603      	mov	r3, r0
 8008240:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b03      	cmp	r3, #3
 8008248:	d109      	bne.n	800825e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	3314      	adds	r3, #20
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe ff84 	bl	800715c <ld_word>
 8008254:	4603      	mov	r3, r0
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800825e:	68fb      	ldr	r3, [r7, #12]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	331a      	adds	r3, #26
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	b292      	uxth	r2, r2
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe ffa7 	bl	80071d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b03      	cmp	r3, #3
 800828a:	d109      	bne.n	80082a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f103 0214 	add.w	r2, r3, #20
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	0c1b      	lsrs	r3, r3, #16
 8008296:	b29b      	uxth	r3, r3
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7fe ff99 	bl	80071d2 <st_word>
	}
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff fe10 	bl	8007ede <dir_sdi>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <dir_find+0x24>
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	e03e      	b.n	800834a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	4619      	mov	r1, r3
 80082d2:	6938      	ldr	r0, [r7, #16]
 80082d4:	f7ff fa24 	bl	8007720 <move_window>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d12f      	bne.n	8008342 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <dir_find+0x4e>
 80082f0:	2304      	movs	r3, #4
 80082f2:	75fb      	strb	r3, [r7, #23]
 80082f4:	e028      	b.n	8008348 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	330b      	adds	r3, #11
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008302:	b2da      	uxtb	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	330b      	adds	r3, #11
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <dir_find+0x86>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a18      	ldr	r0, [r3, #32]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3324      	adds	r3, #36	@ 0x24
 8008320:	220b      	movs	r2, #11
 8008322:	4619      	mov	r1, r3
 8008324:	f7fe ffd8 	bl	80072d8 <mem_cmp>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff fe5d 	bl	8007ff0 <dir_next>
 8008336:	4603      	mov	r3, r0
 8008338:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0c5      	beq.n	80082cc <dir_find+0x24>
 8008340:	e002      	b.n	8008348 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008346:	bf00      	nop

	return res;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008360:	2101      	movs	r1, #1
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff ff1a 	bl	800819c <dir_alloc>
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d11c      	bne.n	80083ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	4619      	mov	r1, r3
 8008378:	68b8      	ldr	r0, [r7, #8]
 800837a:	f7ff f9d1 	bl	8007720 <move_window>
 800837e:	4603      	mov	r3, r0
 8008380:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d111      	bne.n	80083ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	2220      	movs	r2, #32
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe ff86 	bl	80072a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a18      	ldr	r0, [r3, #32]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3324      	adds	r3, #36	@ 0x24
 800839e:	220b      	movs	r2, #11
 80083a0:	4619      	mov	r1, r3
 80083a2:	f7fe ff5d 	bl	8007260 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2201      	movs	r2, #1
 80083aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d04f      	beq.n	800846e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80083d6:	e022      	b.n	800841e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	1c59      	adds	r1, r3, #1
 80083e0:	6179      	str	r1, [r7, #20]
 80083e2:	4413      	add	r3, r2
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d016      	beq.n	800841c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2b05      	cmp	r3, #5
 80083f2:	d101      	bne.n	80083f8 <get_fileinfo+0x42>
 80083f4:	23e5      	movs	r3, #229	@ 0xe5
 80083f6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d106      	bne.n	800840c <get_fileinfo+0x56>
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	613a      	str	r2, [r7, #16]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	4413      	add	r3, r2
 8008408:	222e      	movs	r2, #46	@ 0x2e
 800840a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	613a      	str	r2, [r7, #16]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4413      	add	r3, r2
 8008416:	7bfa      	ldrb	r2, [r7, #15]
 8008418:	725a      	strb	r2, [r3, #9]
 800841a:	e000      	b.n	800841e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800841c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b0a      	cmp	r3, #10
 8008422:	d9d9      	bls.n	80083d8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	4413      	add	r3, r2
 800842a:	3309      	adds	r3, #9
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	7ada      	ldrb	r2, [r3, #11]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	331c      	adds	r3, #28
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe fea3 	bl	800718c <ld_dword>
 8008446:	4602      	mov	r2, r0
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	3316      	adds	r3, #22
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe fe9a 	bl	800718c <ld_dword>
 8008458:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	b29a      	uxth	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	80da      	strh	r2, [r3, #6]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	0c1b      	lsrs	r3, r3, #16
 8008466:	b29a      	uxth	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	809a      	strh	r2, [r3, #4]
 800846c:	e000      	b.n	8008470 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800846e:	bf00      	nop
}
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3324      	adds	r3, #36	@ 0x24
 800848c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800848e:	220b      	movs	r2, #11
 8008490:	2120      	movs	r1, #32
 8008492:	68b8      	ldr	r0, [r7, #8]
 8008494:	f7fe ff05 	bl	80072a2 <mem_set>
	si = i = 0; ni = 8;
 8008498:	2300      	movs	r3, #0
 800849a:	613b      	str	r3, [r7, #16]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	61fb      	str	r3, [r7, #28]
 80084a0:	2308      	movs	r3, #8
 80084a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	61fa      	str	r2, [r7, #28]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084b2:	7efb      	ldrb	r3, [r7, #27]
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d94e      	bls.n	8008556 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80084b8:	7efb      	ldrb	r3, [r7, #27]
 80084ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80084bc:	d006      	beq.n	80084cc <create_name+0x54>
 80084be:	7efb      	ldrb	r3, [r7, #27]
 80084c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80084c2:	d110      	bne.n	80084e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80084c4:	e002      	b.n	80084cc <create_name+0x54>
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3301      	adds	r3, #1
 80084ca:	61fb      	str	r3, [r7, #28]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80084d6:	d0f6      	beq.n	80084c6 <create_name+0x4e>
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80084e2:	d0f0      	beq.n	80084c6 <create_name+0x4e>
			break;
 80084e4:	e038      	b.n	8008558 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80084e6:	7efb      	ldrb	r3, [r7, #27]
 80084e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80084ea:	d003      	beq.n	80084f4 <create_name+0x7c>
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d30c      	bcc.n	800850e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b0b      	cmp	r3, #11
 80084f8:	d002      	beq.n	8008500 <create_name+0x88>
 80084fa:	7efb      	ldrb	r3, [r7, #27]
 80084fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80084fe:	d001      	beq.n	8008504 <create_name+0x8c>
 8008500:	2306      	movs	r3, #6
 8008502:	e044      	b.n	800858e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008504:	2308      	movs	r3, #8
 8008506:	613b      	str	r3, [r7, #16]
 8008508:	230b      	movs	r3, #11
 800850a:	617b      	str	r3, [r7, #20]
			continue;
 800850c:	e022      	b.n	8008554 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800850e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008512:	2b00      	cmp	r3, #0
 8008514:	da04      	bge.n	8008520 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008516:	7efb      	ldrb	r3, [r7, #27]
 8008518:	3b80      	subs	r3, #128	@ 0x80
 800851a:	4a1f      	ldr	r2, [pc, #124]	@ (8008598 <create_name+0x120>)
 800851c:	5cd3      	ldrb	r3, [r2, r3]
 800851e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008520:	7efb      	ldrb	r3, [r7, #27]
 8008522:	4619      	mov	r1, r3
 8008524:	481d      	ldr	r0, [pc, #116]	@ (800859c <create_name+0x124>)
 8008526:	f7fe fefe 	bl	8007326 <chk_chr>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <create_name+0xbc>
 8008530:	2306      	movs	r3, #6
 8008532:	e02c      	b.n	800858e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008534:	7efb      	ldrb	r3, [r7, #27]
 8008536:	2b60      	cmp	r3, #96	@ 0x60
 8008538:	d905      	bls.n	8008546 <create_name+0xce>
 800853a:	7efb      	ldrb	r3, [r7, #27]
 800853c:	2b7a      	cmp	r3, #122	@ 0x7a
 800853e:	d802      	bhi.n	8008546 <create_name+0xce>
 8008540:	7efb      	ldrb	r3, [r7, #27]
 8008542:	3b20      	subs	r3, #32
 8008544:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	613a      	str	r2, [r7, #16]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	4413      	add	r3, r2
 8008550:	7efa      	ldrb	r2, [r7, #27]
 8008552:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008554:	e7a6      	b.n	80084a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008556:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	441a      	add	r2, r3
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <create_name+0xf4>
 8008568:	2306      	movs	r3, #6
 800856a:	e010      	b.n	800858e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2be5      	cmp	r3, #229	@ 0xe5
 8008572:	d102      	bne.n	800857a <create_name+0x102>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2205      	movs	r2, #5
 8008578:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800857a:	7efb      	ldrb	r3, [r7, #27]
 800857c:	2b20      	cmp	r3, #32
 800857e:	d801      	bhi.n	8008584 <create_name+0x10c>
 8008580:	2204      	movs	r2, #4
 8008582:	e000      	b.n	8008586 <create_name+0x10e>
 8008584:	2200      	movs	r2, #0
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	330b      	adds	r3, #11
 800858a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800858c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800858e:	4618      	mov	r0, r3
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	0800e5d0 	.word	0x0800e5d0
 800859c:	0800e550 	.word	0x0800e550

080085a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80085b4:	e002      	b.n	80085bc <follow_path+0x1c>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80085c2:	d0f8      	beq.n	80085b6 <follow_path+0x16>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80085ca:	d0f4      	beq.n	80085b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2200      	movs	r2, #0
 80085d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b1f      	cmp	r3, #31
 80085d8:	d80a      	bhi.n	80085f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2280      	movs	r2, #128	@ 0x80
 80085de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fc7a 	bl	8007ede <dir_sdi>
 80085ea:	4603      	mov	r3, r0
 80085ec:	75fb      	strb	r3, [r7, #23]
 80085ee:	e048      	b.n	8008682 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085f0:	463b      	mov	r3, r7
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff ff3f 	bl	8008478 <create_name>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d139      	bne.n	8008678 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff fe4f 	bl	80082a8 <dir_find>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008614:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00a      	beq.n	8008632 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b04      	cmp	r3, #4
 8008620:	d12c      	bne.n	800867c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d127      	bne.n	800867c <follow_path+0xdc>
 800862c:	2305      	movs	r3, #5
 800862e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008630:	e024      	b.n	800867c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d121      	bne.n	8008680 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	799b      	ldrb	r3, [r3, #6]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008648:	2305      	movs	r3, #5
 800864a:	75fb      	strb	r3, [r7, #23]
 800864c:	e019      	b.n	8008682 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	8992      	ldrh	r2, [r2, #12]
 800865c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008660:	fb00 f202 	mul.w	r2, r0, r2
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	440b      	add	r3, r1
 8008668:	4619      	mov	r1, r3
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff fddd 	bl	800822a <ld_clust>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008676:	e7bb      	b.n	80085f0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008678:	bf00      	nop
 800867a:	e002      	b.n	8008682 <follow_path+0xe2>
				break;
 800867c:	bf00      	nop
 800867e:	e000      	b.n	8008682 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008680:	bf00      	nop
			}
		}
	}

	return res;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008694:	f04f 33ff 	mov.w	r3, #4294967295
 8008698:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d031      	beq.n	8008706 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e002      	b.n	80086b0 <get_ldnumber+0x24>
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	3301      	adds	r3, #1
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d903      	bls.n	80086c0 <get_ldnumber+0x34>
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80086be:	d1f4      	bne.n	80086aa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80086c6:	d11c      	bne.n	8008702 <get_ldnumber+0x76>
			tp = *path;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	60fa      	str	r2, [r7, #12]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	3b30      	subs	r3, #48	@ 0x30
 80086d8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d80e      	bhi.n	80086fe <get_ldnumber+0x72>
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d10a      	bne.n	80086fe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d107      	bne.n	80086fe <get_ldnumber+0x72>
					vol = (int)i;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	3301      	adds	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	e002      	b.n	8008708 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008702:	2300      	movs	r3, #0
 8008704:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008706:	693b      	ldr	r3, [r7, #16]
}
 8008708:	4618      	mov	r0, r3
 800870a:	371c      	adds	r7, #28
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	70da      	strb	r2, [r3, #3]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fe fff6 	bl	8007720 <move_window>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <check_fs+0x2a>
 800873a:	2304      	movs	r3, #4
 800873c:	e038      	b.n	80087b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3338      	adds	r3, #56	@ 0x38
 8008742:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fd08 	bl	800715c <ld_word>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008754:	429a      	cmp	r2, r3
 8008756:	d001      	beq.n	800875c <check_fs+0x48>
 8008758:	2303      	movs	r3, #3
 800875a:	e029      	b.n	80087b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008762:	2be9      	cmp	r3, #233	@ 0xe9
 8008764:	d009      	beq.n	800877a <check_fs+0x66>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800876c:	2beb      	cmp	r3, #235	@ 0xeb
 800876e:	d11e      	bne.n	80087ae <check_fs+0x9a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008776:	2b90      	cmp	r3, #144	@ 0x90
 8008778:	d119      	bne.n	80087ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3338      	adds	r3, #56	@ 0x38
 800877e:	3336      	adds	r3, #54	@ 0x36
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fd03 	bl	800718c <ld_dword>
 8008786:	4603      	mov	r3, r0
 8008788:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800878c:	4a0a      	ldr	r2, [pc, #40]	@ (80087b8 <check_fs+0xa4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d101      	bne.n	8008796 <check_fs+0x82>
 8008792:	2300      	movs	r3, #0
 8008794:	e00c      	b.n	80087b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3338      	adds	r3, #56	@ 0x38
 800879a:	3352      	adds	r3, #82	@ 0x52
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fcf5 	bl	800718c <ld_dword>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4a05      	ldr	r2, [pc, #20]	@ (80087bc <check_fs+0xa8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d101      	bne.n	80087ae <check_fs+0x9a>
 80087aa:	2300      	movs	r3, #0
 80087ac:	e000      	b.n	80087b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80087ae:	2302      	movs	r3, #2
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	00544146 	.word	0x00544146
 80087bc:	33544146 	.word	0x33544146

080087c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b096      	sub	sp, #88	@ 0x58
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4613      	mov	r3, r2
 80087cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff ff59 	bl	800868c <get_ldnumber>
 80087da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80087dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da01      	bge.n	80087e6 <find_volume+0x26>
 80087e2:	230b      	movs	r3, #11
 80087e4:	e26a      	b.n	8008cbc <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80087e6:	4aa3      	ldr	r2, [pc, #652]	@ (8008a74 <find_volume+0x2b4>)
 80087e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <find_volume+0x3a>
 80087f6:	230c      	movs	r3, #12
 80087f8:	e260      	b.n	8008cbc <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80087fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087fc:	f7fe fdae 	bl	800735c <lock_fs>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <find_volume+0x4a>
 8008806:	230f      	movs	r3, #15
 8008808:	e258      	b.n	8008cbc <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800880e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	f023 0301 	bic.w	r3, r3, #1
 8008816:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01a      	beq.n	8008856 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fbfb 	bl	8007020 <disk_status>
 800882a:	4603      	mov	r3, r0
 800882c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008830:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10c      	bne.n	8008856 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d007      	beq.n	8008852 <find_volume+0x92>
 8008842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800884e:	230a      	movs	r3, #10
 8008850:	e234      	b.n	8008cbc <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8008852:	2300      	movs	r3, #0
 8008854:	e232      	b.n	8008cbc <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800885c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885e:	b2da      	uxtb	r2, r3
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fbf3 	bl	8007054 <disk_initialize>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008874:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008880:	2303      	movs	r3, #3
 8008882:	e21b      	b.n	8008cbc <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <find_volume+0xda>
 800888a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008896:	230a      	movs	r3, #10
 8008898:	e210      	b.n	8008cbc <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	7858      	ldrb	r0, [r3, #1]
 800889e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a0:	330c      	adds	r3, #12
 80088a2:	461a      	mov	r2, r3
 80088a4:	2102      	movs	r1, #2
 80088a6:	f7fe fc3b 	bl	8007120 <disk_ioctl>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <find_volume+0xf4>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e203      	b.n	8008cbc <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	899b      	ldrh	r3, [r3, #12]
 80088b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088bc:	d80d      	bhi.n	80088da <find_volume+0x11a>
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	899b      	ldrh	r3, [r3, #12]
 80088c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c6:	d308      	bcc.n	80088da <find_volume+0x11a>
 80088c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ca:	899b      	ldrh	r3, [r3, #12]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	899b      	ldrh	r3, [r3, #12]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	4013      	ands	r3, r2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <find_volume+0x11e>
 80088da:	2301      	movs	r3, #1
 80088dc:	e1ee      	b.n	8008cbc <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80088e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80088e6:	f7ff ff15 	bl	8008714 <check_fs>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80088f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d149      	bne.n	800898c <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80088f8:	2300      	movs	r3, #0
 80088fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80088fc:	e01e      	b.n	800893c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80088fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008900:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800890c:	4413      	add	r3, r2
 800890e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	3304      	adds	r3, #4
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <find_volume+0x168>
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	3308      	adds	r3, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fc34 	bl	800718c <ld_dword>
 8008924:	4602      	mov	r2, r0
 8008926:	e000      	b.n	800892a <find_volume+0x16a>
 8008928:	2200      	movs	r2, #0
 800892a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	3358      	adds	r3, #88	@ 0x58
 8008930:	443b      	add	r3, r7
 8008932:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008938:	3301      	adds	r3, #1
 800893a:	643b      	str	r3, [r7, #64]	@ 0x40
 800893c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800893e:	2b03      	cmp	r3, #3
 8008940:	d9dd      	bls.n	80088fe <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008942:	2300      	movs	r3, #0
 8008944:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <find_volume+0x192>
 800894c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800894e:	3b01      	subs	r3, #1
 8008950:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	3358      	adds	r3, #88	@ 0x58
 8008958:	443b      	add	r3, r7
 800895a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800895e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <find_volume+0x1b2>
 8008966:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008968:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800896a:	f7ff fed3 	bl	8008714 <check_fs>
 800896e:	4603      	mov	r3, r0
 8008970:	e000      	b.n	8008974 <find_volume+0x1b4>
 8008972:	2303      	movs	r3, #3
 8008974:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008978:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800897c:	2b01      	cmp	r3, #1
 800897e:	d905      	bls.n	800898c <find_volume+0x1cc>
 8008980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008982:	3301      	adds	r3, #1
 8008984:	643b      	str	r3, [r7, #64]	@ 0x40
 8008986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008988:	2b03      	cmp	r3, #3
 800898a:	d9e2      	bls.n	8008952 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800898c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008990:	2b04      	cmp	r3, #4
 8008992:	d101      	bne.n	8008998 <find_volume+0x1d8>
 8008994:	2301      	movs	r3, #1
 8008996:	e191      	b.n	8008cbc <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008998:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800899c:	2b01      	cmp	r3, #1
 800899e:	d901      	bls.n	80089a4 <find_volume+0x1e4>
 80089a0:	230d      	movs	r3, #13
 80089a2:	e18b      	b.n	8008cbc <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	3338      	adds	r3, #56	@ 0x38
 80089a8:	330b      	adds	r3, #11
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fbd6 	bl	800715c <ld_word>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b6:	899b      	ldrh	r3, [r3, #12]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d001      	beq.n	80089c0 <find_volume+0x200>
 80089bc:	230d      	movs	r3, #13
 80089be:	e17d      	b.n	8008cbc <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	3338      	adds	r3, #56	@ 0x38
 80089c4:	3316      	adds	r3, #22
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fbc8 	bl	800715c <ld_word>
 80089cc:	4603      	mov	r3, r0
 80089ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80089d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <find_volume+0x224>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	3338      	adds	r3, #56	@ 0x38
 80089da:	3324      	adds	r3, #36	@ 0x24
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fbd5 	bl	800718c <ld_dword>
 80089e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80089e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089e8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80089f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	789b      	ldrb	r3, [r3, #2]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d005      	beq.n	8008a08 <find_volume+0x248>
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	789b      	ldrb	r3, [r3, #2]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d001      	beq.n	8008a08 <find_volume+0x248>
 8008a04:	230d      	movs	r3, #13
 8008a06:	e159      	b.n	8008cbc <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	789b      	ldrb	r3, [r3, #2]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	895b      	ldrh	r3, [r3, #10]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <find_volume+0x27c>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2c:	895b      	ldrh	r3, [r3, #10]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	895b      	ldrh	r3, [r3, #10]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <find_volume+0x280>
 8008a3c:	230d      	movs	r3, #13
 8008a3e:	e13d      	b.n	8008cbc <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	3338      	adds	r3, #56	@ 0x38
 8008a44:	3311      	adds	r3, #17
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fb88 	bl	800715c <ld_word>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a56:	891b      	ldrh	r3, [r3, #8]
 8008a58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a5a:	8992      	ldrh	r2, [r2, #12]
 8008a5c:	0952      	lsrs	r2, r2, #5
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a64:	fb01 f202 	mul.w	r2, r1, r2
 8008a68:	1a9b      	subs	r3, r3, r2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <find_volume+0x2b8>
 8008a70:	230d      	movs	r3, #13
 8008a72:	e123      	b.n	8008cbc <find_volume+0x4fc>
 8008a74:	20042220 	.word	0x20042220

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7a:	3338      	adds	r3, #56	@ 0x38
 8008a7c:	3313      	adds	r3, #19
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fb6c 	bl	800715c <ld_word>
 8008a84:	4603      	mov	r3, r0
 8008a86:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <find_volume+0x2dc>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	3338      	adds	r3, #56	@ 0x38
 8008a92:	3320      	adds	r3, #32
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fb79 	bl	800718c <ld_dword>
 8008a9a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	3338      	adds	r3, #56	@ 0x38
 8008aa0:	330e      	adds	r3, #14
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fb5a 	bl	800715c <ld_word>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008aac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <find_volume+0x2f6>
 8008ab2:	230d      	movs	r3, #13
 8008ab4:	e102      	b.n	8008cbc <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008ab6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aba:	4413      	add	r3, r2
 8008abc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008abe:	8911      	ldrh	r1, [r2, #8]
 8008ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ac2:	8992      	ldrh	r2, [r2, #12]
 8008ac4:	0952      	lsrs	r2, r2, #5
 8008ac6:	b292      	uxth	r2, r2
 8008ac8:	fbb1 f2f2 	udiv	r2, r1, r2
 8008acc:	b292      	uxth	r2, r2
 8008ace:	4413      	add	r3, r2
 8008ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d201      	bcs.n	8008ade <find_volume+0x31e>
 8008ada:	230d      	movs	r3, #13
 8008adc:	e0ee      	b.n	8008cbc <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ae6:	8952      	ldrh	r2, [r2, #10]
 8008ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <find_volume+0x338>
 8008af4:	230d      	movs	r3, #13
 8008af6:	e0e1      	b.n	8008cbc <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008af8:	2303      	movs	r3, #3
 8008afa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b00:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d802      	bhi.n	8008b0e <find_volume+0x34e>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d802      	bhi.n	8008b1e <find_volume+0x35e>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	1c9a      	adds	r2, r3, #2
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b2a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008b2c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b30:	441a      	add	r2, r3
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008b36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3a:	441a      	add	r2, r3
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d11e      	bne.n	8008b86 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	3338      	adds	r3, #56	@ 0x38
 8008b4c:	332a      	adds	r3, #42	@ 0x2a
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fb04 	bl	800715c <ld_word>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <find_volume+0x39e>
 8008b5a:	230d      	movs	r3, #13
 8008b5c:	e0ae      	b.n	8008cbc <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	891b      	ldrh	r3, [r3, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <find_volume+0x3aa>
 8008b66:	230d      	movs	r3, #13
 8008b68:	e0a8      	b.n	8008cbc <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	3338      	adds	r3, #56	@ 0x38
 8008b6e:	332c      	adds	r3, #44	@ 0x2c
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fb0b 	bl	800718c <ld_dword>
 8008b76:	4602      	mov	r2, r0
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b84:	e01f      	b.n	8008bc6 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	891b      	ldrh	r3, [r3, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <find_volume+0x3d2>
 8008b8e:	230d      	movs	r3, #13
 8008b90:	e094      	b.n	8008cbc <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b98:	441a      	add	r2, r3
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d103      	bne.n	8008bae <find_volume+0x3ee>
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	e00a      	b.n	8008bc4 <find_volume+0x404>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	69da      	ldr	r2, [r3, #28]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	085a      	lsrs	r2, r3, #1
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008bc4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	6a1a      	ldr	r2, [r3, #32]
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	899b      	ldrh	r3, [r3, #12]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd2:	440b      	add	r3, r1
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008bd8:	8989      	ldrh	r1, [r1, #12]
 8008bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d201      	bcs.n	8008be6 <find_volume+0x426>
 8008be2:	230d      	movs	r3, #13
 8008be4:	e06a      	b.n	8008cbc <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bec:	619a      	str	r2, [r3, #24]
 8008bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf8:	2280      	movs	r2, #128	@ 0x80
 8008bfa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d149      	bne.n	8008c98 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	3338      	adds	r3, #56	@ 0x38
 8008c08:	3330      	adds	r3, #48	@ 0x30
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe faa6 	bl	800715c <ld_word>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d140      	bne.n	8008c98 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c1e:	f7fe fd7f 	bl	8007720 <move_window>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d137      	bne.n	8008c98 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	3338      	adds	r3, #56	@ 0x38
 8008c32:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fa90 	bl	800715c <ld_word>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d127      	bne.n	8008c98 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	3338      	adds	r3, #56	@ 0x38
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe fa9d 	bl	800718c <ld_dword>
 8008c52:	4603      	mov	r3, r0
 8008c54:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc4 <find_volume+0x504>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d11e      	bne.n	8008c98 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	3338      	adds	r3, #56	@ 0x38
 8008c5e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fa92 	bl	800718c <ld_dword>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4a17      	ldr	r2, [pc, #92]	@ (8008cc8 <find_volume+0x508>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d113      	bne.n	8008c98 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	3338      	adds	r3, #56	@ 0x38
 8008c74:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fa87 	bl	800718c <ld_dword>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	3338      	adds	r3, #56	@ 0x38
 8008c88:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fa7d 	bl	800718c <ld_dword>
 8008c92:	4602      	mov	r2, r0
 8008c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c96:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008c9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <find_volume+0x50c>)
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	4b08      	ldr	r3, [pc, #32]	@ (8008ccc <find_volume+0x50c>)
 8008caa:	801a      	strh	r2, [r3, #0]
 8008cac:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <find_volume+0x50c>)
 8008cae:	881a      	ldrh	r2, [r3, #0]
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008cb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cb6:	f7fe fccb 	bl	8007650 <clear_lock>
#endif
	return FR_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3758      	adds	r7, #88	@ 0x58
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	41615252 	.word	0x41615252
 8008cc8:	61417272 	.word	0x61417272
 8008ccc:	20042224 	.word	0x20042224

08008cd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008cda:	2309      	movs	r3, #9
 8008cdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02e      	beq.n	8008d42 <validate+0x72>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d02a      	beq.n	8008d42 <validate+0x72>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d025      	beq.n	8008d42 <validate+0x72>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	889a      	ldrh	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	88db      	ldrh	r3, [r3, #6]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d11e      	bne.n	8008d42 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fb27 	bl	800735c <lock_fs>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d014      	beq.n	8008d3e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe f980 	bl	8007020 <disk_status>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <validate+0x60>
				res = FR_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
 8008d2e:	e008      	b.n	8008d42 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fb26 	bl	8007388 <unlock_fs>
 8008d3c:	e001      	b.n	8008d42 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008d3e:	230f      	movs	r3, #15
 8008d40:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <validate+0x7e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	e000      	b.n	8008d50 <validate+0x80>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	6013      	str	r3, [r2, #0]
	return res;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008d72:	f107 0310 	add.w	r3, r7, #16
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff fc88 	bl	800868c <get_ldnumber>
 8008d7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da01      	bge.n	8008d88 <f_mount+0x28>
 8008d84:	230b      	movs	r3, #11
 8008d86:	e048      	b.n	8008e1a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008d88:	4a26      	ldr	r2, [pc, #152]	@ (8008e24 <f_mount+0xc4>)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00f      	beq.n	8008db8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008d98:	69b8      	ldr	r0, [r7, #24]
 8008d9a:	f7fe fc59 	bl	8007650 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 ff8f 	bl	8009cc6 <ff_del_syncobj>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <f_mount+0x52>
 8008dae:	2302      	movs	r3, #2
 8008db0:	e033      	b.n	8008e1a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00f      	beq.n	8008dde <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3310      	adds	r3, #16
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f000 ff59 	bl	8009c86 <ff_cre_syncobj>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <f_mount+0x7e>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e01d      	b.n	8008e1a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4910      	ldr	r1, [pc, #64]	@ (8008e24 <f_mount+0xc4>)
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <f_mount+0x94>
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d001      	beq.n	8008df8 <f_mount+0x98>
 8008df4:	2300      	movs	r3, #0
 8008df6:	e010      	b.n	8008e1a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008df8:	f107 010c 	add.w	r1, r7, #12
 8008dfc:	f107 0308 	add.w	r3, r7, #8
 8008e00:	2200      	movs	r2, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fcdc 	bl	80087c0 <find_volume>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	7dfa      	ldrb	r2, [r7, #23]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fab8 	bl	8007388 <unlock_fs>
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3720      	adds	r7, #32
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20042220 	.word	0x20042220

08008e28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b098      	sub	sp, #96	@ 0x60
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <f_open+0x18>
 8008e3c:	2309      	movs	r3, #9
 8008e3e:	e1be      	b.n	80091be <f_open+0x396>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008e48:	79fa      	ldrb	r2, [r7, #7]
 8008e4a:	f107 0110 	add.w	r1, r7, #16
 8008e4e:	f107 0308 	add.w	r3, r7, #8
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff fcb4 	bl	80087c0 <find_volume>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f040 819b 	bne.w	800919e <f_open+0x376>
		dj.obj.fs = fs;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	f107 0314 	add.w	r3, r7, #20
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fb93 	bl	80085a0 <follow_path>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008e80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d118      	bne.n	8008eba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008e88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e8c:	b25b      	sxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da03      	bge.n	8008e9a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008e92:	2306      	movs	r3, #6
 8008e94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e98:	e00f      	b.n	8008eba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	bf8c      	ite	hi
 8008ea0:	2301      	movhi	r3, #1
 8008ea2:	2300      	movls	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fa86 	bl	80073c0 <chk_lock>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	f003 031c 	and.w	r3, r3, #28
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d07f      	beq.n	8008fc4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d017      	beq.n	8008efc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d10e      	bne.n	8008ef2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ed4:	f7fe fad0 	bl	8007478 <enq_lock>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d006      	beq.n	8008eec <f_open+0xc4>
 8008ede:	f107 0314 	add.w	r3, r7, #20
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fa35 	bl	8008352 <dir_register>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	e000      	b.n	8008eee <f_open+0xc6>
 8008eec:	2312      	movs	r3, #18
 8008eee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	f043 0308 	orr.w	r3, r3, #8
 8008ef8:	71fb      	strb	r3, [r7, #7]
 8008efa:	e010      	b.n	8008f1e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008efc:	7ebb      	ldrb	r3, [r7, #26]
 8008efe:	f003 0311 	and.w	r3, r3, #17
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <f_open+0xe6>
					res = FR_DENIED;
 8008f06:	2307      	movs	r3, #7
 8008f08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008f0c:	e007      	b.n	8008f1e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <f_open+0xf6>
 8008f18:	2308      	movs	r3, #8
 8008f1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d168      	bne.n	8008ff8 <f_open+0x1d0>
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d063      	beq.n	8008ff8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008f30:	f7fd fa76 	bl	8006420 <get_fattime>
 8008f34:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f38:	330e      	adds	r3, #14
 8008f3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe f963 	bl	8007208 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f44:	3316      	adds	r3, #22
 8008f46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe f95d 	bl	8007208 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f50:	330b      	adds	r3, #11
 8008f52:	2220      	movs	r2, #32
 8008f54:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff f964 	bl	800822a <ld_clust>
 8008f62:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff f97c 	bl	8008268 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f72:	331c      	adds	r3, #28
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe f946 	bl	8007208 <st_dword>
					fs->wflag = 1;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d037      	beq.n	8008ff8 <f_open+0x1d0>
						dw = fs->winsect;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f8c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008f8e:	f107 0314 	add.w	r3, r7, #20
 8008f92:	2200      	movs	r2, #0
 8008f94:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fe6c 	bl	8007c74 <remove_chain>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d126      	bne.n	8008ff8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe fbb6 	bl	8007720 <move_window>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fbe:	3a01      	subs	r2, #1
 8008fc0:	615a      	str	r2, [r3, #20]
 8008fc2:	e019      	b.n	8008ff8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d115      	bne.n	8008ff8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008fcc:	7ebb      	ldrb	r3, [r7, #26]
 8008fce:	f003 0310 	and.w	r3, r3, #16
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <f_open+0x1b6>
					res = FR_NO_FILE;
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008fdc:	e00c      	b.n	8008ff8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <f_open+0x1d0>
 8008fe8:	7ebb      	ldrb	r3, [r7, #26]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <f_open+0x1d0>
						res = FR_DENIED;
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d126      	bne.n	800904e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	f003 0308 	and.w	r3, r3, #8
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009010:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800901a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b01      	cmp	r3, #1
 8009024:	bf8c      	ite	hi
 8009026:	2301      	movhi	r3, #1
 8009028:	2300      	movls	r3, #0
 800902a:	b2db      	uxtb	r3, r3
 800902c:	461a      	mov	r2, r3
 800902e:	f107 0314 	add.w	r3, r7, #20
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fa41 	bl	80074bc <inc_lock>
 800903a:	4602      	mov	r2, r0
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <f_open+0x226>
 8009048:	2302      	movs	r3, #2
 800904a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800904e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009052:	2b00      	cmp	r3, #0
 8009054:	f040 80a3 	bne.w	800919e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800905c:	4611      	mov	r1, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff f8e3 	bl	800822a <ld_clust>
 8009064:	4602      	mov	r2, r0
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800906a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906c:	331c      	adds	r3, #28
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe f88c 	bl	800718c <ld_dword>
 8009074:	4602      	mov	r2, r0
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	88da      	ldrh	r2, [r3, #6]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	79fa      	ldrb	r2, [r7, #7]
 8009092:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3330      	adds	r3, #48	@ 0x30
 80090aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe f8f6 	bl	80072a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d06e      	beq.n	800919e <f_open+0x376>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d06a      	beq.n	800919e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	895b      	ldrh	r3, [r3, #10]
 80090d4:	461a      	mov	r2, r3
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	899b      	ldrh	r3, [r3, #12]
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80090ec:	e016      	b.n	800911c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fbd1 	bl	800789a <get_fat>
 80090f8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80090fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d802      	bhi.n	8009106 <f_open+0x2de>
 8009100:	2302      	movs	r3, #2
 8009102:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d102      	bne.n	8009114 <f_open+0x2ec>
 800910e:	2301      	movs	r3, #1
 8009110:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	657b      	str	r3, [r7, #84]	@ 0x54
 800911c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d103      	bne.n	800912c <f_open+0x304>
 8009124:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009128:	429a      	cmp	r2, r3
 800912a:	d8e0      	bhi.n	80090ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009130:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009132:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009136:	2b00      	cmp	r3, #0
 8009138:	d131      	bne.n	800919e <f_open+0x376>
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	461a      	mov	r2, r3
 8009140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009142:	fbb3 f1f2 	udiv	r1, r3, r2
 8009146:	fb01 f202 	mul.w	r2, r1, r2
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d026      	beq.n	800919e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fb81 	bl	800785c <clust2sect>
 800915a:	6478      	str	r0, [r7, #68]	@ 0x44
 800915c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <f_open+0x342>
						res = FR_INT_ERR;
 8009162:	2302      	movs	r3, #2
 8009164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009168:	e019      	b.n	800919e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	899b      	ldrh	r3, [r3, #12]
 800916e:	461a      	mov	r2, r3
 8009170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009172:	fbb3 f2f2 	udiv	r2, r3, r2
 8009176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009178:	441a      	add	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	7858      	ldrb	r0, [r3, #1]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6a1a      	ldr	r2, [r3, #32]
 800918c:	2301      	movs	r3, #1
 800918e:	f7fd ff87 	bl	80070a0 <disk_read>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <f_open+0x376>
 8009198:	2301      	movs	r3, #1
 800919a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800919e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <f_open+0x384>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80091b2:	4611      	mov	r1, r2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe f8e7 	bl	8007388 <unlock_fs>
 80091ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3760      	adds	r7, #96	@ 0x60
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b08e      	sub	sp, #56	@ 0x38
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
 80091d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f107 0214 	add.w	r2, r7, #20
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff fd72 	bl	8008cd0 <validate>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80091f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d107      	bne.n	800920a <f_read+0x44>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	7d5b      	ldrb	r3, [r3, #21]
 80091fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <f_read+0x58>
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe f8b8 	bl	8007388 <unlock_fs>
 8009218:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800921c:	e15d      	b.n	80094da <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	7d1b      	ldrb	r3, [r3, #20]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d106      	bne.n	8009238 <f_read+0x72>
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2107      	movs	r1, #7
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe f8aa 	bl	8007388 <unlock_fs>
 8009234:	2307      	movs	r3, #7
 8009236:	e150      	b.n	80094da <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	429a      	cmp	r2, r3
 800924a:	f240 813c 	bls.w	80094c6 <f_read+0x300>
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009252:	e138      	b.n	80094c6 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	8992      	ldrh	r2, [r2, #12]
 800925c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009260:	fb01 f202 	mul.w	r2, r1, r2
 8009264:	1a9b      	subs	r3, r3, r2
 8009266:	2b00      	cmp	r3, #0
 8009268:	f040 80f3 	bne.w	8009452 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	8992      	ldrh	r2, [r2, #12]
 8009274:	fbb3 f3f2 	udiv	r3, r3, r2
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	8952      	ldrh	r2, [r2, #10]
 800927c:	3a01      	subs	r2, #1
 800927e:	4013      	ands	r3, r2
 8009280:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d139      	bne.n	80092fc <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	633b      	str	r3, [r7, #48]	@ 0x30
 8009296:	e013      	b.n	80092c0 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	4619      	mov	r1, r3
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7fe fde1 	bl	8007e6e <clmt_clust>
 80092ac:	6338      	str	r0, [r7, #48]	@ 0x30
 80092ae:	e007      	b.n	80092c0 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f7fe faee 	bl	800789a <get_fat>
 80092be:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d809      	bhi.n	80092da <f_read+0x114>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2202      	movs	r2, #2
 80092ca:	755a      	strb	r2, [r3, #21]
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2102      	movs	r1, #2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe f859 	bl	8007388 <unlock_fs>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e0ff      	b.n	80094da <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d109      	bne.n	80092f6 <f_read+0x130>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	755a      	strb	r2, [r3, #21]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2101      	movs	r1, #1
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe f84b 	bl	8007388 <unlock_fs>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e0f1      	b.n	80094da <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fa:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	4619      	mov	r1, r3
 8009304:	4610      	mov	r0, r2
 8009306:	f7fe faa9 	bl	800785c <clust2sect>
 800930a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <f_read+0x160>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2202      	movs	r2, #2
 8009316:	755a      	strb	r2, [r3, #21]
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2102      	movs	r1, #2
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe f833 	bl	8007388 <unlock_fs>
 8009322:	2302      	movs	r3, #2
 8009324:	e0d9      	b.n	80094da <f_read+0x314>
			sect += csect;
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	fbb3 f3f2 	udiv	r3, r3, r2
 800933a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933e:	2b00      	cmp	r3, #0
 8009340:	d046      	beq.n	80093d0 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	4413      	add	r3, r2
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	8952      	ldrh	r2, [r2, #10]
 800934c:	4293      	cmp	r3, r2
 800934e:	d905      	bls.n	800935c <f_read+0x196>
					cc = fs->csize - csect;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	895b      	ldrh	r3, [r3, #10]
 8009354:	461a      	mov	r2, r3
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	7858      	ldrb	r0, [r3, #1]
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009366:	f7fd fe9b 	bl	80070a0 <disk_read>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <f_read+0x1be>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	755a      	strb	r2, [r3, #21]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2101      	movs	r1, #1
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe f804 	bl	8007388 <unlock_fs>
 8009380:	2301      	movs	r3, #1
 8009382:	e0aa      	b.n	80094da <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	7d1b      	ldrb	r3, [r3, #20]
 8009388:	b25b      	sxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	da18      	bge.n	80093c0 <f_read+0x1fa>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6a1a      	ldr	r2, [r3, #32]
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009398:	429a      	cmp	r2, r3
 800939a:	d911      	bls.n	80093c0 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a1a      	ldr	r2, [r3, #32]
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	8992      	ldrh	r2, [r2, #12]
 80093a8:	fb02 f303 	mul.w	r3, r2, r3
 80093ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ae:	18d0      	adds	r0, r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	899b      	ldrh	r3, [r3, #12]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f7fd ff50 	bl	8007260 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	899b      	ldrh	r3, [r3, #12]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80093ce:	e066      	b.n	800949e <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d038      	beq.n	800944c <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	7d1b      	ldrb	r3, [r3, #20]
 80093de:	b25b      	sxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	da1d      	bge.n	8009420 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	7858      	ldrb	r0, [r3, #1]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a1a      	ldr	r2, [r3, #32]
 80093f2:	2301      	movs	r3, #1
 80093f4:	f7fd fe74 	bl	80070e0 <disk_write>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d009      	beq.n	8009412 <f_read+0x24c>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	755a      	strb	r2, [r3, #21]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2101      	movs	r1, #1
 8009408:	4618      	mov	r0, r3
 800940a:	f7fd ffbd 	bl	8007388 <unlock_fs>
 800940e:	2301      	movs	r3, #1
 8009410:	e063      	b.n	80094da <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	7d1b      	ldrb	r3, [r3, #20]
 8009416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800941a:	b2da      	uxtb	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	7858      	ldrb	r0, [r3, #1]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800942a:	2301      	movs	r3, #1
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	f7fd fe37 	bl	80070a0 <disk_read>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <f_read+0x286>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	755a      	strb	r2, [r3, #21]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2101      	movs	r1, #1
 8009442:	4618      	mov	r0, r3
 8009444:	f7fd ffa0 	bl	8007388 <unlock_fs>
 8009448:	2301      	movs	r3, #1
 800944a:	e046      	b.n	80094da <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	899b      	ldrh	r3, [r3, #12]
 8009456:	4618      	mov	r0, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	8992      	ldrh	r2, [r2, #12]
 8009460:	fbb3 f1f2 	udiv	r1, r3, r2
 8009464:	fb01 f202 	mul.w	r2, r1, r2
 8009468:	1a9b      	subs	r3, r3, r2
 800946a:	1ac3      	subs	r3, r0, r3
 800946c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800946e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	429a      	cmp	r2, r3
 8009474:	d901      	bls.n	800947a <f_read+0x2b4>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	8992      	ldrh	r2, [r2, #12]
 8009488:	fbb3 f0f2 	udiv	r0, r3, r2
 800948c:	fb00 f202 	mul.w	r2, r0, r2
 8009490:	1a9b      	subs	r3, r3, r2
 8009492:	440b      	add	r3, r1
 8009494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009496:	4619      	mov	r1, r3
 8009498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800949a:	f7fd fee1 	bl	8007260 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800949e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	4413      	add	r3, r2
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	441a      	add	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	619a      	str	r2, [r3, #24]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	441a      	add	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f47f aec3 	bne.w	8009254 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fd ff58 	bl	8007388 <unlock_fs>
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3738      	adds	r7, #56	@ 0x38
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b08c      	sub	sp, #48	@ 0x30
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f107 0210 	add.w	r2, r7, #16
 8009500:	4611      	mov	r1, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff fbe4 	bl	8008cd0 <validate>
 8009508:	4603      	mov	r3, r0
 800950a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800950e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <f_write+0x44>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	7d5b      	ldrb	r3, [r3, #21]
 800951a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800951e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <f_write+0x58>
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800952c:	4611      	mov	r1, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7fd ff2a 	bl	8007388 <unlock_fs>
 8009534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009538:	e192      	b.n	8009860 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	7d1b      	ldrb	r3, [r3, #20]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <f_write+0x72>
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2107      	movs	r1, #7
 800954a:	4618      	mov	r0, r3
 800954c:	f7fd ff1c 	bl	8007388 <unlock_fs>
 8009550:	2307      	movs	r3, #7
 8009552:	e185      	b.n	8009860 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	699a      	ldr	r2, [r3, #24]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	441a      	add	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	429a      	cmp	r2, r3
 8009562:	f080 816a 	bcs.w	800983a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	43db      	mvns	r3, r3
 800956c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800956e:	e164      	b.n	800983a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	8992      	ldrh	r2, [r2, #12]
 8009578:	fbb3 f1f2 	udiv	r1, r3, r2
 800957c:	fb01 f202 	mul.w	r2, r1, r2
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	2b00      	cmp	r3, #0
 8009584:	f040 810f 	bne.w	80097a6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	8992      	ldrh	r2, [r2, #12]
 8009590:	fbb3 f3f2 	udiv	r3, r3, r2
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	8952      	ldrh	r2, [r2, #10]
 8009598:	3a01      	subs	r2, #1
 800959a:	4013      	ands	r3, r2
 800959c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d14d      	bne.n	8009640 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10c      	bne.n	80095c6 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d11a      	bne.n	80095ee <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fbbe 	bl	8007d3e <create_chain>
 80095c2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80095c4:	e013      	b.n	80095ee <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	4619      	mov	r1, r3
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7fe fc4a 	bl	8007e6e <clmt_clust>
 80095da:	62b8      	str	r0, [r7, #40]	@ 0x28
 80095dc:	e007      	b.n	80095ee <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe fba9 	bl	8007d3e <create_chain>
 80095ec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 8127 	beq.w	8009844 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d109      	bne.n	8009610 <f_write+0x12e>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2202      	movs	r2, #2
 8009600:	755a      	strb	r2, [r3, #21]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2102      	movs	r1, #2
 8009606:	4618      	mov	r0, r3
 8009608:	f7fd febe 	bl	8007388 <unlock_fs>
 800960c:	2302      	movs	r3, #2
 800960e:	e127      	b.n	8009860 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d109      	bne.n	800962c <f_write+0x14a>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	755a      	strb	r2, [r3, #21]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2101      	movs	r1, #1
 8009622:	4618      	mov	r0, r3
 8009624:	f7fd feb0 	bl	8007388 <unlock_fs>
 8009628:	2301      	movs	r3, #1
 800962a:	e119      	b.n	8009860 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009630:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <f_write+0x15e>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800963e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	7d1b      	ldrb	r3, [r3, #20]
 8009644:	b25b      	sxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	da1d      	bge.n	8009686 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	7858      	ldrb	r0, [r3, #1]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a1a      	ldr	r2, [r3, #32]
 8009658:	2301      	movs	r3, #1
 800965a:	f7fd fd41 	bl	80070e0 <disk_write>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <f_write+0x196>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2201      	movs	r2, #1
 8009668:	755a      	strb	r2, [r3, #21]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	2101      	movs	r1, #1
 800966e:	4618      	mov	r0, r3
 8009670:	f7fd fe8a 	bl	8007388 <unlock_fs>
 8009674:	2301      	movs	r3, #1
 8009676:	e0f3      	b.n	8009860 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	7d1b      	ldrb	r3, [r3, #20]
 800967c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009680:	b2da      	uxtb	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f7fe f8e4 	bl	800785c <clust2sect>
 8009694:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <f_write+0x1ce>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2202      	movs	r2, #2
 80096a0:	755a      	strb	r2, [r3, #21]
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2102      	movs	r1, #2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd fe6e 	bl	8007388 <unlock_fs>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e0d7      	b.n	8009860 <f_write+0x37e>
			sect += csect;
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	4413      	add	r3, r2
 80096b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	899b      	ldrh	r3, [r3, #12]
 80096bc:	461a      	mov	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d048      	beq.n	800975e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	4413      	add	r3, r2
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	8952      	ldrh	r2, [r2, #10]
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d905      	bls.n	80096e6 <f_write+0x204>
					cc = fs->csize - csect;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	895b      	ldrh	r3, [r3, #10]
 80096de:	461a      	mov	r2, r3
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	7858      	ldrb	r0, [r3, #1]
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	69f9      	ldr	r1, [r7, #28]
 80096f0:	f7fd fcf6 	bl	80070e0 <disk_write>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <f_write+0x22c>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	755a      	strb	r2, [r3, #21]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2101      	movs	r1, #1
 8009704:	4618      	mov	r0, r3
 8009706:	f7fd fe3f 	bl	8007388 <unlock_fs>
 800970a:	2301      	movs	r3, #1
 800970c:	e0a8      	b.n	8009860 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a1a      	ldr	r2, [r3, #32]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	6a3a      	ldr	r2, [r7, #32]
 8009718:	429a      	cmp	r2, r3
 800971a:	d918      	bls.n	800974e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a1a      	ldr	r2, [r3, #32]
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	8992      	ldrh	r2, [r2, #12]
 800972e:	fb02 f303 	mul.w	r3, r2, r3
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	18d1      	adds	r1, r2, r3
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	899b      	ldrh	r3, [r3, #12]
 800973a:	461a      	mov	r2, r3
 800973c:	f7fd fd90 	bl	8007260 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	7d1b      	ldrb	r3, [r3, #20]
 8009744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009748:	b2da      	uxtb	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	899b      	ldrh	r3, [r3, #12]
 8009752:	461a      	mov	r2, r3
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	fb02 f303 	mul.w	r3, r2, r3
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800975c:	e050      	b.n	8009800 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	429a      	cmp	r2, r3
 8009766:	d01b      	beq.n	80097a0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	699a      	ldr	r2, [r3, #24]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009770:	429a      	cmp	r2, r3
 8009772:	d215      	bcs.n	80097a0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	7858      	ldrb	r0, [r3, #1]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800977e:	2301      	movs	r3, #1
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	f7fd fc8d 	bl	80070a0 <disk_read>
 8009786:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009788:	2b00      	cmp	r3, #0
 800978a:	d009      	beq.n	80097a0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	755a      	strb	r2, [r3, #21]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2101      	movs	r1, #1
 8009796:	4618      	mov	r0, r3
 8009798:	f7fd fdf6 	bl	8007388 <unlock_fs>
 800979c:	2301      	movs	r3, #1
 800979e:	e05f      	b.n	8009860 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	899b      	ldrh	r3, [r3, #12]
 80097aa:	4618      	mov	r0, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	8992      	ldrh	r2, [r2, #12]
 80097b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80097b8:	fb01 f202 	mul.w	r2, r1, r2
 80097bc:	1a9b      	subs	r3, r3, r2
 80097be:	1ac3      	subs	r3, r0, r3
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80097c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d901      	bls.n	80097ce <f_write+0x2ec>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	8992      	ldrh	r2, [r2, #12]
 80097dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80097e0:	fb00 f202 	mul.w	r2, r0, r2
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	440b      	add	r3, r1
 80097e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ea:	69f9      	ldr	r1, [r7, #28]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fd fd37 	bl	8007260 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	7d1b      	ldrb	r3, [r3, #20]
 80097f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009804:	4413      	add	r3, r2
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	699a      	ldr	r2, [r3, #24]
 800980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980e:	441a      	add	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	619a      	str	r2, [r3, #24]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	429a      	cmp	r2, r3
 800981e:	bf38      	it	cc
 8009820:	461a      	movcc	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	60da      	str	r2, [r3, #12]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	441a      	add	r2, r3
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f47f ae97 	bne.w	8009570 <f_write+0x8e>
 8009842:	e000      	b.n	8009846 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009844:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	7d1b      	ldrb	r3, [r3, #20]
 800984a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800984e:	b2da      	uxtb	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	2100      	movs	r1, #0
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd fd95 	bl	8007388 <unlock_fs>
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3730      	adds	r7, #48	@ 0x30
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f107 0208 	add.w	r2, r7, #8
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fa29 	bl	8008cd0 <validate>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d16d      	bne.n	8009964 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	d067      	beq.n	8009964 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7d1b      	ldrb	r3, [r3, #20]
 8009898:	b25b      	sxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	da1a      	bge.n	80098d4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	7858      	ldrb	r0, [r3, #1]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1a      	ldr	r2, [r3, #32]
 80098ac:	2301      	movs	r3, #1
 80098ae:	f7fd fc17 	bl	80070e0 <disk_write>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d006      	beq.n	80098c6 <f_sync+0x5e>
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2101      	movs	r1, #1
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fd63 	bl	8007388 <unlock_fs>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e055      	b.n	8009972 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80098d4:	f7fc fda4 	bl	8006420 <get_fattime>
 80098d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e0:	4619      	mov	r1, r3
 80098e2:	4610      	mov	r0, r2
 80098e4:	f7fd ff1c 	bl	8007720 <move_window>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d138      	bne.n	8009964 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	330b      	adds	r3, #11
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	330b      	adds	r3, #11
 8009902:	f042 0220 	orr.w	r2, r2, #32
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	461a      	mov	r2, r3
 8009914:	68f9      	ldr	r1, [r7, #12]
 8009916:	f7fe fca7 	bl	8008268 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f103 021c 	add.w	r2, r3, #28
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fd fc6e 	bl	8007208 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3316      	adds	r3, #22
 8009930:	6939      	ldr	r1, [r7, #16]
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd fc68 	bl	8007208 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3312      	adds	r3, #18
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f7fd fc47 	bl	80071d2 <st_word>
					fs->wflag = 1;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2201      	movs	r2, #1
 8009948:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4618      	mov	r0, r3
 800994e:	f7fd ff15 	bl	800777c <sync_fs>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	7d1b      	ldrb	r3, [r3, #20]
 800995a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800995e:	b2da      	uxtb	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	7dfa      	ldrb	r2, [r7, #23]
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd fd0c 	bl	8007388 <unlock_fs>
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff ff70 	bl	8009868 <f_sync>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d11d      	bne.n	80099ce <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f107 0208 	add.w	r2, r7, #8
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff f998 	bl	8008cd0 <validate>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d111      	bne.n	80099ce <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fd fe12 	bl	80075d8 <dec_lock>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d102      	bne.n	80099c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd fcdd 	bl	8007388 <unlock_fs>
#endif
		}
	}
	return res;
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b090      	sub	sp, #64	@ 0x40
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80099e2:	f107 010c 	add.w	r1, r7, #12
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	2200      	movs	r2, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fee8 	bl	80087c0 <find_volume>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 80099f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d11f      	bne.n	8009a3e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	f107 030c 	add.w	r3, r7, #12
 8009a04:	4611      	mov	r1, r2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fdca 	bl	80085a0 <follow_path>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009a12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d111      	bne.n	8009a3e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009a1a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009a1e:	b25b      	sxtb	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	da03      	bge.n	8009a2c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009a24:	2306      	movs	r3, #6
 8009a26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009a2a:	e008      	b.n	8009a3e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d005      	beq.n	8009a3e <f_stat+0x66>
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fcbc 	bl	80083b6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fd fc9e 	bl	8007388 <unlock_fs>
 8009a4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3740      	adds	r7, #64	@ 0x40
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b092      	sub	sp, #72	@ 0x48
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009a64:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009a68:	f107 030c 	add.w	r3, r7, #12
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe fea6 	bl	80087c0 <find_volume>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f040 8099 	bne.w	8009bb6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	699a      	ldr	r2, [r3, #24]
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	3b02      	subs	r3, #2
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d804      	bhi.n	8009aa2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	699a      	ldr	r2, [r3, #24]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	e089      	b.n	8009bb6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d128      	bne.n	8009b00 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009ab6:	f107 0314 	add.w	r3, r7, #20
 8009aba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fd feec 	bl	800789a <get_fat>
 8009ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d103      	bne.n	8009ad4 <f_getfree+0x7c>
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009ad2:	e063      	b.n	8009b9c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d103      	bne.n	8009ae2 <f_getfree+0x8a>
 8009ada:	2302      	movs	r3, #2
 8009adc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009ae0:	e05c      	b.n	8009b9c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <f_getfree+0x96>
 8009ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aea:	3301      	adds	r3, #1
 8009aec:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af0:	3301      	adds	r3, #1
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d3db      	bcc.n	8009ab6 <f_getfree+0x5e>
 8009afe:	e04d      	b.n	8009b9c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b10:	2300      	movs	r3, #0
 8009b12:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d113      	bne.n	8009b42 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009b22:	4619      	mov	r1, r3
 8009b24:	f7fd fdfc 	bl	8007720 <move_window>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009b2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d131      	bne.n	8009b9a <f_getfree+0x142>
							p = fs->win;
 8009b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b38:	3338      	adds	r3, #56	@ 0x38
 8009b3a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	899b      	ldrh	r3, [r3, #12]
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d10f      	bne.n	8009b6a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b4c:	f7fd fb06 	bl	800715c <ld_word>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d102      	bne.n	8009b5c <f_getfree+0x104>
 8009b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b58:	3301      	adds	r3, #1
 8009b5a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	3302      	adds	r3, #2
 8009b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b64:	3b02      	subs	r3, #2
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b68:	e010      	b.n	8009b8c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009b6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b6c:	f7fd fb0e 	bl	800718c <ld_dword>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <f_getfree+0x128>
 8009b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b82:	3304      	adds	r3, #4
 8009b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b88:	3b04      	subs	r3, #4
 8009b8a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1bd      	bne.n	8009b14 <f_getfree+0xbc>
 8009b98:	e000      	b.n	8009b9c <f_getfree+0x144>
							if (res != FR_OK) break;
 8009b9a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ba0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ba6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009baa:	791a      	ldrb	r2, [r3, #4]
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fd fbe2 	bl	8007388 <unlock_fs>
 8009bc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3748      	adds	r7, #72	@ 0x48
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009be6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009be8:	7a5b      	ldrb	r3, [r3, #9]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d131      	bne.n	8009c54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009bf2:	7a5b      	ldrb	r3, [r3, #9]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009bfe:	4b19      	ldr	r3, [pc, #100]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009c00:	7a5b      	ldrb	r3, [r3, #9]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	4a17      	ldr	r2, [pc, #92]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c0e:	4b15      	ldr	r3, [pc, #84]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009c10:	7a5b      	ldrb	r3, [r3, #9]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	461a      	mov	r2, r3
 8009c16:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009c18:	4413      	add	r3, r2
 8009c1a:	79fa      	ldrb	r2, [r7, #7]
 8009c1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c1e:	4b11      	ldr	r3, [pc, #68]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009c20:	7a5b      	ldrb	r3, [r3, #9]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	b2d1      	uxtb	r1, r2
 8009c28:	4a0e      	ldr	r2, [pc, #56]	@ (8009c64 <FATFS_LinkDriverEx+0x94>)
 8009c2a:	7251      	strb	r1, [r2, #9]
 8009c2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c2e:	7dbb      	ldrb	r3, [r7, #22]
 8009c30:	3330      	adds	r3, #48	@ 0x30
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	223a      	movs	r2, #58	@ 0x3a
 8009c3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	3302      	adds	r3, #2
 8009c44:	222f      	movs	r2, #47	@ 0x2f
 8009c46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	3303      	adds	r3, #3
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20042248 	.word	0x20042248

08009c68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c72:	2200      	movs	r2, #0
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff ffaa 	bl	8009bd0 <FATFS_LinkDriverEx>
 8009c7c:	4603      	mov	r3, r0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	6039      	str	r1, [r7, #0]
 8009c90:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	2300      	movs	r3, #0
 8009c98:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009c9a:	f107 030c 	add.w	r3, r7, #12
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 f8e9 	bl	8009e78 <osSemaphoreCreate>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bf14      	ite	ne
 8009cb4:	2301      	movne	r3, #1
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	617b      	str	r3, [r7, #20]

    return ret;
 8009cbc:	697b      	ldr	r3, [r7, #20]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f988 	bl	8009fe4 <osSemaphoreDelete>
#endif
    return 1;
 8009cd4:	2301      	movs	r3, #1
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009cea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f8f4 	bl	8009edc <osSemaphoreWait>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f931 	bl	8009f78 <osSemaphoreRelease>
#endif
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	4603      	mov	r3, r0
 8009d26:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d30:	2b84      	cmp	r3, #132	@ 0x84
 8009d32:	d005      	beq.n	8009d40 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3303      	adds	r3, #3
 8009d3e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d40:	68fb      	ldr	r3, [r7, #12]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d54:	f3ef 8305 	mrs	r3, IPSR
 8009d58:	607b      	str	r3, [r7, #4]
  return(result);
 8009d5a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bf14      	ite	ne
 8009d60:	2301      	movne	r3, #1
 8009d62:	2300      	moveq	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d76:	f001 fc65 	bl	800b644 <vTaskStartScheduler>
  
  return osOK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8009d84:	f002 f8b4 	bl	800bef0 <xTaskGetSchedulerState>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <osKernelRunning+0x12>
    return 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e000      	b.n	8009d94 <osKernelRunning+0x14>
  else
    return 1;
 8009d92:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009d9c:	f7ff ffd7 	bl	8009d4e <inHandlerMode>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009da6:	f001 fd79 	bl	800b89c <xTaskGetTickCountFromISR>
 8009daa:	4603      	mov	r3, r0
 8009dac:	e002      	b.n	8009db4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009dae:	f001 fd65 	bl	800b87c <xTaskGetTickCount>
 8009db2:	4603      	mov	r3, r0
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dba:	b089      	sub	sp, #36	@ 0x24
 8009dbc:	af04      	add	r7, sp, #16
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d020      	beq.n	8009e0c <osThreadCreate+0x54>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01c      	beq.n	8009e0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685c      	ldr	r4, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691e      	ldr	r6, [r3, #16]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff ff9a 	bl	8009d1e <makeFreeRtosPriority>
 8009dea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009df4:	9202      	str	r2, [sp, #8]
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	9100      	str	r1, [sp, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4620      	mov	r0, r4
 8009e02:	f001 fa2f 	bl	800b264 <xTaskCreateStatic>
 8009e06:	4603      	mov	r3, r0
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	e01c      	b.n	8009e46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685c      	ldr	r4, [r3, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e18:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff ff7c 	bl	8009d1e <makeFreeRtosPriority>
 8009e26:	4602      	mov	r2, r0
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	9200      	str	r2, [sp, #0]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	4632      	mov	r2, r6
 8009e34:	4629      	mov	r1, r5
 8009e36:	4620      	mov	r0, r4
 8009e38:	f001 fa7a 	bl	800b330 <xTaskCreate>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d001      	beq.n	8009e46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e000      	b.n	8009e48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e46:	68fb      	ldr	r3, [r7, #12]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <osDelay+0x16>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	e000      	b.n	8009e68 <osDelay+0x18>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f001 fbb3 	bl	800b5d4 <vTaskDelay>
  
  return osOK;
 8009e6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af02      	add	r7, sp, #8
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00f      	beq.n	8009eaa <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d10a      	bne.n	8009ea6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	2203      	movs	r2, #3
 8009e96:	9200      	str	r2, [sp, #0]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	f000 fab1 	bl	800a404 <xQueueGenericCreateStatic>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	e016      	b.n	8009ed4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	e014      	b.n	8009ed4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d110      	bne.n	8009ed2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	f000 fb2c 	bl	800a512 <xQueueGenericCreate>
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d005      	beq.n	8009ece <osSemaphoreCreate+0x56>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fb85 	bl	800a5d8 <xQueueGenericSend>
      return sema;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	e000      	b.n	8009ed4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009ed2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009ef0:	2380      	movs	r3, #128	@ 0x80
 8009ef2:	e03a      	b.n	8009f6a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efe:	d103      	bne.n	8009f08 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	e009      	b.n	8009f1c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d006      	beq.n	8009f1c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <osSemaphoreWait+0x40>
      ticks = 1;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009f1c:	f7ff ff17 	bl	8009d4e <inHandlerMode>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d017      	beq.n	8009f56 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009f26:	f107 0308 	add.w	r3, r7, #8
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 ff98 	bl	800ae64 <xQueueReceiveFromISR>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d001      	beq.n	8009f3e <osSemaphoreWait+0x62>
      return osErrorOS;
 8009f3a:	23ff      	movs	r3, #255	@ 0xff
 8009f3c:	e015      	b.n	8009f6a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d011      	beq.n	8009f68 <osSemaphoreWait+0x8c>
 8009f44:	4b0b      	ldr	r3, [pc, #44]	@ (8009f74 <osSemaphoreWait+0x98>)
 8009f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	e008      	b.n	8009f68 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fe6b 	bl	800ac34 <xQueueSemaphoreTake>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d001      	beq.n	8009f68 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009f64:	23ff      	movs	r3, #255	@ 0xff
 8009f66:	e000      	b.n	8009f6a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	e000ed04 	.word	0xe000ed04

08009f78 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009f88:	f7ff fee1 	bl	8009d4e <inHandlerMode>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d016      	beq.n	8009fc0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fcca 	bl	800a932 <xQueueGiveFromISR>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d001      	beq.n	8009fa8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009fa4:	23ff      	movs	r3, #255	@ 0xff
 8009fa6:	e017      	b.n	8009fd8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d013      	beq.n	8009fd6 <osSemaphoreRelease+0x5e>
 8009fae:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe0 <osSemaphoreRelease+0x68>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	e00a      	b.n	8009fd6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fb06 	bl	800a5d8 <xQueueGenericSend>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d001      	beq.n	8009fd6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009fd2:	23ff      	movs	r3, #255	@ 0xff
 8009fd4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009fec:	f7ff feaf 	bl	8009d4e <inHandlerMode>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009ff6:	2382      	movs	r3, #130	@ 0x82
 8009ff8:	e003      	b.n	800a002 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 ffba 	bl	800af74 <vQueueDelete>

  return osOK; 
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a00a:	b590      	push	{r4, r7, lr}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af02      	add	r7, sp, #8
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d011      	beq.n	800a040 <osMessageCreate+0x36>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00d      	beq.n	800a040 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6859      	ldr	r1, [r3, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2400      	movs	r4, #0
 800a036:	9400      	str	r4, [sp, #0]
 800a038:	f000 f9e4 	bl	800a404 <xQueueGenericCreateStatic>
 800a03c:	4603      	mov	r3, r0
 800a03e:	e008      	b.n	800a052 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	4619      	mov	r1, r3
 800a04c:	f000 fa61 	bl	800a512 <xQueueGenericCreate>
 800a050:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	bd90      	pop	{r4, r7, pc}
	...

0800a05c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a068:	2300      	movs	r3, #0
 800a06a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <osMessagePut+0x1e>
    ticks = 1;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a07a:	f7ff fe68 	bl	8009d4e <inHandlerMode>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d018      	beq.n	800a0b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a084:	f107 0210 	add.w	r2, r7, #16
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	2300      	movs	r3, #0
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fbac 	bl	800a7ec <xQueueGenericSendFromISR>
 800a094:	4603      	mov	r3, r0
 800a096:	2b01      	cmp	r3, #1
 800a098:	d001      	beq.n	800a09e <osMessagePut+0x42>
      return osErrorOS;
 800a09a:	23ff      	movs	r3, #255	@ 0xff
 800a09c:	e018      	b.n	800a0d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d014      	beq.n	800a0ce <osMessagePut+0x72>
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <osMessagePut+0x7c>)
 800a0a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	e00b      	b.n	800a0ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a0b6:	f107 0108 	add.w	r1, r7, #8
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 fa8a 	bl	800a5d8 <xQueueGenericSend>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d001      	beq.n	800a0ce <osMessagePut+0x72>
      return osErrorOS;
 800a0ca:	23ff      	movs	r3, #255	@ 0xff
 800a0cc:	e000      	b.n	800a0d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a0dc:	b590      	push	{r4, r7, lr}
 800a0de:	b08b      	sub	sp, #44	@ 0x2c
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a0f6:	2380      	movs	r3, #128	@ 0x80
 800a0f8:	617b      	str	r3, [r7, #20]
    return event;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	461c      	mov	r4, r3
 800a0fe:	f107 0314 	add.w	r3, r7, #20
 800a102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a10a:	e054      	b.n	800a1b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11a:	d103      	bne.n	800a124 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a11c:	f04f 33ff 	mov.w	r3, #4294967295
 800a120:	627b      	str	r3, [r7, #36]	@ 0x24
 800a122:	e009      	b.n	800a138 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <osMessageGet+0x5c>
      ticks = 1;
 800a134:	2301      	movs	r3, #1
 800a136:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a138:	f7ff fe09 	bl	8009d4e <inHandlerMode>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d01c      	beq.n	800a17c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a142:	f107 0220 	add.w	r2, r7, #32
 800a146:	f107 0314 	add.w	r3, r7, #20
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	68b8      	ldr	r0, [r7, #8]
 800a150:	f000 fe88 	bl	800ae64 <xQueueReceiveFromISR>
 800a154:	4603      	mov	r3, r0
 800a156:	2b01      	cmp	r3, #1
 800a158:	d102      	bne.n	800a160 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a15a:	2310      	movs	r3, #16
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	e001      	b.n	800a164 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01d      	beq.n	800a1a6 <osMessageGet+0xca>
 800a16a:	4b15      	ldr	r3, [pc, #84]	@ (800a1c0 <osMessageGet+0xe4>)
 800a16c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	e014      	b.n	800a1a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a17c:	f107 0314 	add.w	r3, r7, #20
 800a180:	3304      	adds	r3, #4
 800a182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a184:	4619      	mov	r1, r3
 800a186:	68b8      	ldr	r0, [r7, #8]
 800a188:	f000 fc6c 	bl	800aa64 <xQueueReceive>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d102      	bne.n	800a198 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a192:	2310      	movs	r3, #16
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	e006      	b.n	800a1a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <osMessageGet+0xc6>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e000      	b.n	800a1a4 <osMessageGet+0xc8>
 800a1a2:	2340      	movs	r3, #64	@ 0x40
 800a1a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	461c      	mov	r4, r3
 800a1aa:	f107 0314 	add.w	r3, r7, #20
 800a1ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	372c      	adds	r7, #44	@ 0x2c
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd90      	pop	{r4, r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f103 0208 	add.w	r2, r3, #8
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f103 0208 	add.w	r2, r3, #8
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f103 0208 	add.w	r2, r3, #8
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a21e:	b480      	push	{r7}
 800a220:	b085      	sub	sp, #20
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
}
 800a25a:	bf00      	nop
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a266:	b480      	push	{r7}
 800a268:	b085      	sub	sp, #20
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27c:	d103      	bne.n	800a286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e00c      	b.n	800a2a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3308      	adds	r3, #8
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	e002      	b.n	800a294 <vListInsert+0x2e>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d2f6      	bcs.n	800a28e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	601a      	str	r2, [r3, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	6892      	ldr	r2, [r2, #8]
 800a2ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	6852      	ldr	r2, [r2, #4]
 800a2f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d103      	bne.n	800a30c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	1e5a      	subs	r2, r3, #1
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10d      	bne.n	800a35c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a344:	b672      	cpsid	i
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	b662      	cpsie	i
 800a354:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	e7fd      	b.n	800a358 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a35c:	f002 f91e 	bl	800c59c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a368:	68f9      	ldr	r1, [r7, #12]
 800a36a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a36c:	fb01 f303 	mul.w	r3, r1, r3
 800a370:	441a      	add	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38c:	3b01      	subs	r3, #1
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a392:	fb01 f303 	mul.w	r3, r1, r3
 800a396:	441a      	add	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	22ff      	movs	r2, #255	@ 0xff
 800a3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	22ff      	movs	r2, #255	@ 0xff
 800a3a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d114      	bne.n	800a3dc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01a      	beq.n	800a3f0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3310      	adds	r3, #16
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fbc8 	bl	800bb54 <xTaskRemoveFromEventList>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d012      	beq.n	800a3f0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a400 <xQueueGenericReset+0xd4>)
 800a3cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	e009      	b.n	800a3f0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3310      	adds	r3, #16
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff feef 	bl	800a1c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3324      	adds	r3, #36	@ 0x24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff feea 	bl	800a1c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3f0:	f002 f90a 	bl	800c608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3f4:	2301      	movs	r3, #1
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	@ 0x38
 800a408:	af02      	add	r7, sp, #8
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10d      	bne.n	800a434 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41c:	b672      	cpsid	i
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	b662      	cpsie	i
 800a42c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a42e:	bf00      	nop
 800a430:	bf00      	nop
 800a432:	e7fd      	b.n	800a430 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10d      	bne.n	800a456 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43e:	b672      	cpsid	i
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	b662      	cpsie	i
 800a44e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <xQueueGenericCreateStatic+0x5e>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <xQueueGenericCreateStatic+0x62>
 800a462:	2301      	movs	r3, #1
 800a464:	e000      	b.n	800a468 <xQueueGenericCreateStatic+0x64>
 800a466:	2300      	movs	r3, #0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10d      	bne.n	800a488 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a470:	b672      	cpsid	i
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	b662      	cpsie	i
 800a480:	623b      	str	r3, [r7, #32]
}
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <xQueueGenericCreateStatic+0x90>
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <xQueueGenericCreateStatic+0x94>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <xQueueGenericCreateStatic+0x96>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10d      	bne.n	800a4ba <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	b672      	cpsid	i
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	b662      	cpsie	i
 800a4b2:	61fb      	str	r3, [r7, #28]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4ba:	2348      	movs	r3, #72	@ 0x48
 800a4bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b48      	cmp	r3, #72	@ 0x48
 800a4c2:	d00d      	beq.n	800a4e0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800a4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c8:	b672      	cpsid	i
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	b662      	cpsie	i
 800a4d8:	61bb      	str	r3, [r7, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00d      	beq.n	800a508 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f848 	bl	800a598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3730      	adds	r7, #48	@ 0x30
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a512:	b580      	push	{r7, lr}
 800a514:	b08a      	sub	sp, #40	@ 0x28
 800a516:	af02      	add	r7, sp, #8
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	4613      	mov	r3, r2
 800a51e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10d      	bne.n	800a542 <xQueueGenericCreate+0x30>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	b672      	cpsid	i
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	b662      	cpsie	i
 800a53a:	613b      	str	r3, [r7, #16]
}
 800a53c:	bf00      	nop
 800a53e:	bf00      	nop
 800a540:	e7fd      	b.n	800a53e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	61fb      	str	r3, [r7, #28]
 800a54c:	e004      	b.n	800a558 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3348      	adds	r3, #72	@ 0x48
 800a55c:	4618      	mov	r0, r3
 800a55e:	f002 f94b 	bl	800c7f8 <pvPortMalloc>
 800a562:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d011      	beq.n	800a58e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	3348      	adds	r3, #72	@ 0x48
 800a572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a57c:	79fa      	ldrb	r2, [r7, #7]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	4613      	mov	r3, r2
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 f805 	bl	800a598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a58e:	69bb      	ldr	r3, [r7, #24]
	}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	e002      	b.n	800a5ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	69b8      	ldr	r0, [r7, #24]
 800a5ca:	f7ff feaf 	bl	800a32c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08e      	sub	sp, #56	@ 0x38
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
 800a5e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10d      	bne.n	800a610 <xQueueGenericSend+0x38>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	b672      	cpsid	i
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	b662      	cpsie	i
 800a608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d103      	bne.n	800a61e <xQueueGenericSend+0x46>
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <xQueueGenericSend+0x4a>
 800a61e:	2301      	movs	r3, #1
 800a620:	e000      	b.n	800a624 <xQueueGenericSend+0x4c>
 800a622:	2300      	movs	r3, #0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10d      	bne.n	800a644 <xQueueGenericSend+0x6c>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62c:	b672      	cpsid	i
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	b662      	cpsie	i
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b02      	cmp	r3, #2
 800a648:	d103      	bne.n	800a652 <xQueueGenericSend+0x7a>
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <xQueueGenericSend+0x7e>
 800a652:	2301      	movs	r3, #1
 800a654:	e000      	b.n	800a658 <xQueueGenericSend+0x80>
 800a656:	2300      	movs	r3, #0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10d      	bne.n	800a678 <xQueueGenericSend+0xa0>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a660:	b672      	cpsid	i
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	b662      	cpsie	i
 800a670:	623b      	str	r3, [r7, #32]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a678:	f001 fc3a 	bl	800bef0 <xTaskGetSchedulerState>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d102      	bne.n	800a688 <xQueueGenericSend+0xb0>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d101      	bne.n	800a68c <xQueueGenericSend+0xb4>
 800a688:	2301      	movs	r3, #1
 800a68a:	e000      	b.n	800a68e <xQueueGenericSend+0xb6>
 800a68c:	2300      	movs	r3, #0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10d      	bne.n	800a6ae <xQueueGenericSend+0xd6>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a696:	b672      	cpsid	i
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	b662      	cpsie	i
 800a6a6:	61fb      	str	r3, [r7, #28]
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	e7fd      	b.n	800a6aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ae:	f001 ff75 	bl	800c59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d302      	bcc.n	800a6c4 <xQueueGenericSend+0xec>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d129      	bne.n	800a718 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6ca:	f000 fc91 	bl	800aff0 <prvCopyDataToQueue>
 800a6ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d010      	beq.n	800a6fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	3324      	adds	r3, #36	@ 0x24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 fa39 	bl	800bb54 <xTaskRemoveFromEventList>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d013      	beq.n	800a710 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6e8:	4b3f      	ldr	r3, [pc, #252]	@ (800a7e8 <xQueueGenericSend+0x210>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	e00a      	b.n	800a710 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d007      	beq.n	800a710 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a700:	4b39      	ldr	r3, [pc, #228]	@ (800a7e8 <xQueueGenericSend+0x210>)
 800a702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a710:	f001 ff7a 	bl	800c608 <vPortExitCritical>
				return pdPASS;
 800a714:	2301      	movs	r3, #1
 800a716:	e063      	b.n	800a7e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d103      	bne.n	800a726 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a71e:	f001 ff73 	bl	800c608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a722:	2300      	movs	r3, #0
 800a724:	e05c      	b.n	800a7e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d106      	bne.n	800a73a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a72c:	f107 0314 	add.w	r3, r7, #20
 800a730:	4618      	mov	r0, r3
 800a732:	f001 fa75 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a736:	2301      	movs	r3, #1
 800a738:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a73a:	f001 ff65 	bl	800c608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a73e:	f000 ffef 	bl	800b720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a742:	f001 ff2b 	bl	800c59c <vPortEnterCritical>
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a74c:	b25b      	sxtb	r3, r3
 800a74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a752:	d103      	bne.n	800a75c <xQueueGenericSend+0x184>
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a762:	b25b      	sxtb	r3, r3
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d103      	bne.n	800a772 <xQueueGenericSend+0x19a>
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a772:	f001 ff49 	bl	800c608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a776:	1d3a      	adds	r2, r7, #4
 800a778:	f107 0314 	add.w	r3, r7, #20
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f001 fa64 	bl	800bc4c <xTaskCheckForTimeOut>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d124      	bne.n	800a7d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a78a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a78c:	f000 fd28 	bl	800b1e0 <prvIsQueueFull>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d018      	beq.n	800a7c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	3310      	adds	r3, #16
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 f9b0 	bl	800bb04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7a6:	f000 fcb3 	bl	800b110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7aa:	f000 ffc7 	bl	800b73c <xTaskResumeAll>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f47f af7c 	bne.w	800a6ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <xQueueGenericSend+0x210>)
 800a7b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	e772      	b.n	800a6ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ca:	f000 fca1 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ce:	f000 ffb5 	bl	800b73c <xTaskResumeAll>
 800a7d2:	e76c      	b.n	800a6ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7d6:	f000 fc9b 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7da:	f000 ffaf 	bl	800b73c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3738      	adds	r7, #56	@ 0x38
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08e      	sub	sp, #56	@ 0x38
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10d      	bne.n	800a820 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a808:	b672      	cpsid	i
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	b662      	cpsie	i
 800a818:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a81a:	bf00      	nop
 800a81c:	bf00      	nop
 800a81e:	e7fd      	b.n	800a81c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <xQueueGenericSendFromISR+0x42>
 800a826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <xQueueGenericSendFromISR+0x46>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <xQueueGenericSendFromISR+0x48>
 800a832:	2300      	movs	r3, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10d      	bne.n	800a854 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	b672      	cpsid	i
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	b662      	cpsie	i
 800a84c:	623b      	str	r3, [r7, #32]
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	e7fd      	b.n	800a850 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b02      	cmp	r3, #2
 800a858:	d103      	bne.n	800a862 <xQueueGenericSendFromISR+0x76>
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <xQueueGenericSendFromISR+0x7a>
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <xQueueGenericSendFromISR+0x7c>
 800a866:	2300      	movs	r3, #0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10d      	bne.n	800a888 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a870:	b672      	cpsid	i
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	b662      	cpsie	i
 800a880:	61fb      	str	r3, [r7, #28]
}
 800a882:	bf00      	nop
 800a884:	bf00      	nop
 800a886:	e7fd      	b.n	800a884 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a888:	f001 ff70 	bl	800c76c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a88c:	f3ef 8211 	mrs	r2, BASEPRI
 800a890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a894:	b672      	cpsid	i
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	b662      	cpsie	i
 800a8a4:	61ba      	str	r2, [r7, #24]
 800a8a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d302      	bcc.n	800a8be <xQueueGenericSendFromISR+0xd2>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d12c      	bne.n	800a918 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ce:	f000 fb8f 	bl	800aff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d112      	bne.n	800a902 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d016      	beq.n	800a912 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	3324      	adds	r3, #36	@ 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 f933 	bl	800bb54 <xTaskRemoveFromEventList>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00b      	beq.n	800a912 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e007      	b.n	800a912 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a906:	3301      	adds	r3, #1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	b25a      	sxtb	r2, r3
 800a90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a912:	2301      	movs	r3, #1
 800a914:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a916:	e001      	b.n	800a91c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a926:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3738      	adds	r7, #56	@ 0x38
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b08e      	sub	sp, #56	@ 0x38
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10d      	bne.n	800a962 <xQueueGiveFromISR+0x30>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	b672      	cpsid	i
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	b662      	cpsie	i
 800a95a:	623b      	str	r3, [r7, #32]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00d      	beq.n	800a986 <xQueueGiveFromISR+0x54>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96e:	b672      	cpsid	i
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	b662      	cpsie	i
 800a97e:	61fb      	str	r3, [r7, #28]
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	e7fd      	b.n	800a982 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <xQueueGiveFromISR+0x64>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <xQueueGiveFromISR+0x68>
 800a996:	2301      	movs	r3, #1
 800a998:	e000      	b.n	800a99c <xQueueGiveFromISR+0x6a>
 800a99a:	2300      	movs	r3, #0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10d      	bne.n	800a9bc <xQueueGiveFromISR+0x8a>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	b672      	cpsid	i
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	b662      	cpsie	i
 800a9b4:	61bb      	str	r3, [r7, #24]
}
 800a9b6:	bf00      	nop
 800a9b8:	bf00      	nop
 800a9ba:	e7fd      	b.n	800a9b8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9bc:	f001 fed6 	bl	800c76c <vPortValidateInterruptPriority>
	__asm volatile
 800a9c0:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	b672      	cpsid	i
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	b662      	cpsie	i
 800a9d8:	617a      	str	r2, [r7, #20]
 800a9da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a9dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d22b      	bcs.n	800aa48 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d112      	bne.n	800aa32 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d016      	beq.n	800aa42 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	3324      	adds	r3, #36	@ 0x24
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 f89b 	bl	800bb54 <xTaskRemoveFromEventList>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00e      	beq.n	800aa42 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00b      	beq.n	800aa42 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	e007      	b.n	800aa42 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa36:	3301      	adds	r3, #1
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	b25a      	sxtb	r2, r3
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa42:	2301      	movs	r3, #1
 800aa44:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa46:	e001      	b.n	800aa4c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f383 8811 	msr	BASEPRI, r3
}
 800aa56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3738      	adds	r7, #56	@ 0x38
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08c      	sub	sp, #48	@ 0x30
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10d      	bne.n	800aa9a <xQueueReceive+0x36>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa82:	b672      	cpsid	i
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	b662      	cpsie	i
 800aa92:	623b      	str	r3, [r7, #32]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <xQueueReceive+0x44>
 800aaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <xQueueReceive+0x48>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e000      	b.n	800aaae <xQueueReceive+0x4a>
 800aaac:	2300      	movs	r3, #0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10d      	bne.n	800aace <xQueueReceive+0x6a>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	b672      	cpsid	i
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	b662      	cpsie	i
 800aac6:	61fb      	str	r3, [r7, #28]
}
 800aac8:	bf00      	nop
 800aaca:	bf00      	nop
 800aacc:	e7fd      	b.n	800aaca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aace:	f001 fa0f 	bl	800bef0 <xTaskGetSchedulerState>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <xQueueReceive+0x7a>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <xQueueReceive+0x7e>
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <xQueueReceive+0x80>
 800aae2:	2300      	movs	r3, #0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10d      	bne.n	800ab04 <xQueueReceive+0xa0>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaec:	b672      	cpsid	i
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	b662      	cpsie	i
 800aafc:	61bb      	str	r3, [r7, #24]
}
 800aafe:	bf00      	nop
 800ab00:	bf00      	nop
 800ab02:	e7fd      	b.n	800ab00 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab04:	f001 fd4a 	bl	800c59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d01f      	beq.n	800ab54 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab18:	f000 fad4 	bl	800b0c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00f      	beq.n	800ab4c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2e:	3310      	adds	r3, #16
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 f80f 	bl	800bb54 <xTaskRemoveFromEventList>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d007      	beq.n	800ab4c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab3c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac30 <xQueueReceive+0x1cc>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab4c:	f001 fd5c 	bl	800c608 <vPortExitCritical>
				return pdPASS;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e069      	b.n	800ac28 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d103      	bne.n	800ab62 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab5a:	f001 fd55 	bl	800c608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e062      	b.n	800ac28 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 f857 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab72:	2301      	movs	r3, #1
 800ab74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab76:	f001 fd47 	bl	800c608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab7a:	f000 fdd1 	bl	800b720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab7e:	f001 fd0d 	bl	800c59c <vPortEnterCritical>
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab88:	b25b      	sxtb	r3, r3
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d103      	bne.n	800ab98 <xQueueReceive+0x134>
 800ab90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab9e:	b25b      	sxtb	r3, r3
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba4:	d103      	bne.n	800abae <xQueueReceive+0x14a>
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abae:	f001 fd2b 	bl	800c608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abb2:	1d3a      	adds	r2, r7, #4
 800abb4:	f107 0310 	add.w	r3, r7, #16
 800abb8:	4611      	mov	r1, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 f846 	bl	800bc4c <xTaskCheckForTimeOut>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d123      	bne.n	800ac0e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abc8:	f000 faf4 	bl	800b1b4 <prvIsQueueEmpty>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d017      	beq.n	800ac02 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd4:	3324      	adds	r3, #36	@ 0x24
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 ff92 	bl	800bb04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abe2:	f000 fa95 	bl	800b110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abe6:	f000 fda9 	bl	800b73c <xTaskResumeAll>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d189      	bne.n	800ab04 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800abf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ac30 <xQueueReceive+0x1cc>)
 800abf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	e780      	b.n	800ab04 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac04:	f000 fa84 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac08:	f000 fd98 	bl	800b73c <xTaskResumeAll>
 800ac0c:	e77a      	b.n	800ab04 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac10:	f000 fa7e 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac14:	f000 fd92 	bl	800b73c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac1a:	f000 facb 	bl	800b1b4 <prvIsQueueEmpty>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f43f af6f 	beq.w	800ab04 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3730      	adds	r7, #48	@ 0x30
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	e000ed04 	.word	0xe000ed04

0800ac34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08e      	sub	sp, #56	@ 0x38
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac46:	2300      	movs	r3, #0
 800ac48:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10d      	bne.n	800ac6c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	b672      	cpsid	i
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	b662      	cpsie	i
 800ac64:	623b      	str	r3, [r7, #32]
}
 800ac66:	bf00      	nop
 800ac68:	bf00      	nop
 800ac6a:	e7fd      	b.n	800ac68 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00d      	beq.n	800ac90 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac78:	b672      	cpsid	i
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	b662      	cpsie	i
 800ac88:	61fb      	str	r3, [r7, #28]
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac90:	f001 f92e 	bl	800bef0 <xTaskGetSchedulerState>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <xQueueSemaphoreTake+0x6c>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <xQueueSemaphoreTake+0x70>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e000      	b.n	800aca6 <xQueueSemaphoreTake+0x72>
 800aca4:	2300      	movs	r3, #0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10d      	bne.n	800acc6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acae:	b672      	cpsid	i
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	b662      	cpsie	i
 800acbe:	61bb      	str	r3, [r7, #24]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acc6:	f001 fc69 	bl	800c59c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d024      	beq.n	800ad20 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acdc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d104      	bne.n	800acf0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ace6:	f001 facd 	bl	800c284 <pvTaskIncrementMutexHeldCount>
 800acea:	4602      	mov	r2, r0
 800acec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00f      	beq.n	800ad18 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfa:	3310      	adds	r3, #16
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 ff29 	bl	800bb54 <xTaskRemoveFromEventList>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d007      	beq.n	800ad18 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad08:	4b55      	ldr	r3, [pc, #340]	@ (800ae60 <xQueueSemaphoreTake+0x22c>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad18:	f001 fc76 	bl	800c608 <vPortExitCritical>
				return pdPASS;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e09a      	b.n	800ae56 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d114      	bne.n	800ad50 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00d      	beq.n	800ad48 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad30:	b672      	cpsid	i
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	b662      	cpsie	i
 800ad40:	617b      	str	r3, [r7, #20]
}
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
 800ad46:	e7fd      	b.n	800ad44 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad48:	f001 fc5e 	bl	800c608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	e082      	b.n	800ae56 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad56:	f107 030c 	add.w	r3, r7, #12
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 ff60 	bl	800bc20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad60:	2301      	movs	r3, #1
 800ad62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad64:	f001 fc50 	bl	800c608 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad68:	f000 fcda 	bl	800b720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad6c:	f001 fc16 	bl	800c59c <vPortEnterCritical>
 800ad70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad76:	b25b      	sxtb	r3, r3
 800ad78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7c:	d103      	bne.n	800ad86 <xQueueSemaphoreTake+0x152>
 800ad7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad8c:	b25b      	sxtb	r3, r3
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad92:	d103      	bne.n	800ad9c <xQueueSemaphoreTake+0x168>
 800ad94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad9c:	f001 fc34 	bl	800c608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ada0:	463a      	mov	r2, r7
 800ada2:	f107 030c 	add.w	r3, r7, #12
 800ada6:	4611      	mov	r1, r2
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 ff4f 	bl	800bc4c <xTaskCheckForTimeOut>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d132      	bne.n	800ae1a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adb6:	f000 f9fd 	bl	800b1b4 <prvIsQueueEmpty>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d026      	beq.n	800ae0e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d109      	bne.n	800addc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800adc8:	f001 fbe8 	bl	800c59c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	4618      	mov	r0, r3
 800add2:	f001 f8ab 	bl	800bf2c <xTaskPriorityInherit>
 800add6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800add8:	f001 fc16 	bl	800c608 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800addc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adde:	3324      	adds	r3, #36	@ 0x24
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	4611      	mov	r1, r2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 fe8d 	bl	800bb04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adec:	f000 f990 	bl	800b110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adf0:	f000 fca4 	bl	800b73c <xTaskResumeAll>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f47f af65 	bne.w	800acc6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800adfc:	4b18      	ldr	r3, [pc, #96]	@ (800ae60 <xQueueSemaphoreTake+0x22c>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	e75b      	b.n	800acc6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae10:	f000 f97e 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae14:	f000 fc92 	bl	800b73c <xTaskResumeAll>
 800ae18:	e755      	b.n	800acc6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae1c:	f000 f978 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae20:	f000 fc8c 	bl	800b73c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae26:	f000 f9c5 	bl	800b1b4 <prvIsQueueEmpty>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f43f af4a 	beq.w	800acc6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00d      	beq.n	800ae54 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ae38:	f001 fbb0 	bl	800c59c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae3e:	f000 f8bf 	bl	800afc0 <prvGetDisinheritPriorityAfterTimeout>
 800ae42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 f97a 	bl	800c144 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae50:	f001 fbda 	bl	800c608 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3738      	adds	r7, #56	@ 0x38
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08e      	sub	sp, #56	@ 0x38
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10d      	bne.n	800ae96 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7e:	b672      	cpsid	i
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	b662      	cpsie	i
 800ae8e:	623b      	str	r3, [r7, #32]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <xQueueReceiveFromISR+0x40>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <xQueueReceiveFromISR+0x44>
 800aea4:	2301      	movs	r3, #1
 800aea6:	e000      	b.n	800aeaa <xQueueReceiveFromISR+0x46>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10d      	bne.n	800aeca <xQueueReceiveFromISR+0x66>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb2:	b672      	cpsid	i
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	b662      	cpsie	i
 800aec2:	61fb      	str	r3, [r7, #28]
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop
 800aec8:	e7fd      	b.n	800aec6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aeca:	f001 fc4f 	bl	800c76c <vPortValidateInterruptPriority>
	__asm volatile
 800aece:	f3ef 8211 	mrs	r2, BASEPRI
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	61ba      	str	r2, [r7, #24]
 800aee8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aeea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aeec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d02f      	beq.n	800af5a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af04:	68b9      	ldr	r1, [r7, #8]
 800af06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af08:	f000 f8dc 	bl	800b0c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0e:	1e5a      	subs	r2, r3, #1
 800af10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1c:	d112      	bne.n	800af44 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d016      	beq.n	800af54 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	3310      	adds	r3, #16
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fe12 	bl	800bb54 <xTaskRemoveFromEventList>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00e      	beq.n	800af54 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e007      	b.n	800af54 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af48:	3301      	adds	r3, #1
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	b25a      	sxtb	r2, r3
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800af54:	2301      	movs	r3, #1
 800af56:	637b      	str	r3, [r7, #52]	@ 0x34
 800af58:	e001      	b.n	800af5e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f383 8811 	msr	BASEPRI, r3
}
 800af68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3738      	adds	r7, #56	@ 0x38
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10d      	bne.n	800afa2 <vQueueDelete+0x2e>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8a:	b672      	cpsid	i
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	b662      	cpsie	i
 800af9a:	60bb      	str	r3, [r7, #8]
}
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	e7fd      	b.n	800af9e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 f934 	bl	800b210 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d102      	bne.n	800afb8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f001 fcee 	bl	800c994 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afb8:	bf00      	nop
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d006      	beq.n	800afde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f1c3 0307 	rsb	r3, r3, #7
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	e001      	b.n	800afe2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afe2:	68fb      	ldr	r3, [r7, #12]
	}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800affc:	2300      	movs	r3, #0
 800affe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10d      	bne.n	800b02a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d14d      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 f806 	bl	800c02c <xTaskPriorityDisinherit>
 800b020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	e043      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d119      	bne.n	800b064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6858      	ldr	r0, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b038:	461a      	mov	r2, r3
 800b03a:	68b9      	ldr	r1, [r7, #8]
 800b03c:	f002 f97f 	bl	800d33e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b048:	441a      	add	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	429a      	cmp	r2, r3
 800b058:	d32b      	bcc.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	e026      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68d8      	ldr	r0, [r3, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06c:	461a      	mov	r2, r3
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	f002 f965 	bl	800d33e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07c:	425b      	negs	r3, r3
 800b07e:	441a      	add	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d207      	bcs.n	800b0a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b098:	425b      	negs	r3, r3
 800b09a:	441a      	add	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d105      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b0ba:	697b      	ldr	r3, [r7, #20]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d018      	beq.n	800b108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0de:	441a      	add	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d303      	bcc.n	800b0f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68d9      	ldr	r1, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	461a      	mov	r2, r3
 800b102:	6838      	ldr	r0, [r7, #0]
 800b104:	f002 f91b 	bl	800d33e <memcpy>
	}
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b118:	f001 fa40 	bl	800c59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b124:	e011      	b.n	800b14a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d012      	beq.n	800b154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3324      	adds	r3, #36	@ 0x24
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fd0e 	bl	800bb54 <xTaskRemoveFromEventList>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b13e:	f000 fded 	bl	800bd1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	3b01      	subs	r3, #1
 800b146:	b2db      	uxtb	r3, r3
 800b148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dce9      	bgt.n	800b126 <prvUnlockQueue+0x16>
 800b152:	e000      	b.n	800b156 <prvUnlockQueue+0x46>
					break;
 800b154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	22ff      	movs	r2, #255	@ 0xff
 800b15a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b15e:	f001 fa53 	bl	800c608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b162:	f001 fa1b 	bl	800c59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b16c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b16e:	e011      	b.n	800b194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3310      	adds	r3, #16
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fce9 	bl	800bb54 <xTaskRemoveFromEventList>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b188:	f000 fdc8 	bl	800bd1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	3b01      	subs	r3, #1
 800b190:	b2db      	uxtb	r3, r3
 800b192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dce9      	bgt.n	800b170 <prvUnlockQueue+0x60>
 800b19c:	e000      	b.n	800b1a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b19e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	22ff      	movs	r2, #255	@ 0xff
 800b1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b1a8:	f001 fa2e 	bl	800c608 <vPortExitCritical>
}
 800b1ac:	bf00      	nop
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1bc:	f001 f9ee 	bl	800c59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e001      	b.n	800b1d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1d2:	f001 fa19 	bl	800c608 <vPortExitCritical>

	return xReturn;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1e8:	f001 f9d8 	bl	800c59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d102      	bne.n	800b1fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e001      	b.n	800b202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b202:	f001 fa01 	bl	800c608 <vPortExitCritical>

	return xReturn;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e016      	b.n	800b24c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b21e:	4a10      	ldr	r2, [pc, #64]	@ (800b260 <vQueueUnregisterQueue+0x50>)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	4413      	add	r3, r2
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d10b      	bne.n	800b246 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b22e:	4a0c      	ldr	r2, [pc, #48]	@ (800b260 <vQueueUnregisterQueue+0x50>)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2100      	movs	r1, #0
 800b234:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b238:	4a09      	ldr	r2, [pc, #36]	@ (800b260 <vQueueUnregisterQueue+0x50>)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	4413      	add	r3, r2
 800b240:	2200      	movs	r2, #0
 800b242:	605a      	str	r2, [r3, #4]
				break;
 800b244:	e006      	b.n	800b254 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b07      	cmp	r3, #7
 800b250:	d9e5      	bls.n	800b21e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	20042254 	.word	0x20042254

0800b264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08e      	sub	sp, #56	@ 0x38
 800b268:	af04      	add	r7, sp, #16
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10d      	bne.n	800b294 <xTaskCreateStatic+0x30>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27c:	b672      	cpsid	i
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	b662      	cpsie	i
 800b28c:	623b      	str	r3, [r7, #32]
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	e7fd      	b.n	800b290 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10d      	bne.n	800b2b6 <xTaskCreateStatic+0x52>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29e:	b672      	cpsid	i
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	b662      	cpsie	i
 800b2ae:	61fb      	str	r3, [r7, #28]
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	e7fd      	b.n	800b2b2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2b6:	23a0      	movs	r3, #160	@ 0xa0
 800b2b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2ba0      	cmp	r3, #160	@ 0xa0
 800b2be:	d00d      	beq.n	800b2dc <xTaskCreateStatic+0x78>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	61bb      	str	r3, [r7, #24]
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	e7fd      	b.n	800b2d8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01e      	beq.n	800b322 <xTaskCreateStatic+0xbe>
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d01b      	beq.n	800b322 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	9303      	str	r3, [sp, #12]
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	68b9      	ldr	r1, [r7, #8]
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 f851 	bl	800b3bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b31a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b31c:	f000 f8f0 	bl	800b500 <prvAddNewTaskToReadyList>
 800b320:	e001      	b.n	800b326 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b326:	697b      	ldr	r3, [r7, #20]
	}
 800b328:	4618      	mov	r0, r3
 800b32a:	3728      	adds	r7, #40	@ 0x28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08c      	sub	sp, #48	@ 0x30
 800b334:	af04      	add	r7, sp, #16
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	603b      	str	r3, [r7, #0]
 800b33c:	4613      	mov	r3, r2
 800b33e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b340:	88fb      	ldrh	r3, [r7, #6]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4618      	mov	r0, r3
 800b346:	f001 fa57 	bl	800c7f8 <pvPortMalloc>
 800b34a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00e      	beq.n	800b370 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b352:	20a0      	movs	r0, #160	@ 0xa0
 800b354:	f001 fa50 	bl	800c7f8 <pvPortMalloc>
 800b358:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	631a      	str	r2, [r3, #48]	@ 0x30
 800b366:	e005      	b.n	800b374 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b368:	6978      	ldr	r0, [r7, #20]
 800b36a:	f001 fb13 	bl	800c994 <vPortFree>
 800b36e:	e001      	b.n	800b374 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b370:	2300      	movs	r3, #0
 800b372:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d017      	beq.n	800b3aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b382:	88fa      	ldrh	r2, [r7, #6]
 800b384:	2300      	movs	r3, #0
 800b386:	9303      	str	r3, [sp, #12]
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	9302      	str	r3, [sp, #8]
 800b38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	68b9      	ldr	r1, [r7, #8]
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 f80f 	bl	800b3bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b39e:	69f8      	ldr	r0, [r7, #28]
 800b3a0:	f000 f8ae 	bl	800b500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	61bb      	str	r3, [r7, #24]
 800b3a8:	e002      	b.n	800b3b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3b0:	69bb      	ldr	r3, [r7, #24]
	}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3720      	adds	r7, #32
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b3d4:	440b      	add	r3, r1
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f023 0307 	bic.w	r3, r3, #7
 800b3e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00d      	beq.n	800b40a <prvInitialiseNewTask+0x4e>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	b672      	cpsid	i
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	b662      	cpsie	i
 800b402:	617b      	str	r3, [r7, #20]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d01f      	beq.n	800b450 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b410:	2300      	movs	r3, #0
 800b412:	61fb      	str	r3, [r7, #28]
 800b414:	e012      	b.n	800b43c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	4413      	add	r3, r2
 800b41c:	7819      	ldrb	r1, [r3, #0]
 800b41e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	4413      	add	r3, r2
 800b424:	3334      	adds	r3, #52	@ 0x34
 800b426:	460a      	mov	r2, r1
 800b428:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d006      	beq.n	800b444 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	3301      	adds	r3, #1
 800b43a:	61fb      	str	r3, [r7, #28]
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	2b0f      	cmp	r3, #15
 800b440:	d9e9      	bls.n	800b416 <prvInitialiseNewTask+0x5a>
 800b442:	e000      	b.n	800b446 <prvInitialiseNewTask+0x8a>
			{
				break;
 800b444:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b44e:	e003      	b.n	800b458 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45a:	2b06      	cmp	r3, #6
 800b45c:	d901      	bls.n	800b462 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b45e:	2306      	movs	r3, #6
 800b460:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b466:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b46c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	2200      	movs	r2, #0
 800b472:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	3304      	adds	r3, #4
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe fec3 	bl	800a204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	3318      	adds	r3, #24
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe febe 	bl	800a204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b48c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b490:	f1c3 0207 	rsb	r2, r3, #7
 800b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b496:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b49c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	334c      	adds	r3, #76	@ 0x4c
 800b4b2:	224c      	movs	r2, #76	@ 0x4c
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f001 fe60 	bl	800d17c <memset>
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	4a0d      	ldr	r2, [pc, #52]	@ (800b4f4 <prvInitialiseNewTask+0x138>)
 800b4c0:	651a      	str	r2, [r3, #80]	@ 0x50
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f8 <prvInitialiseNewTask+0x13c>)
 800b4c6:	655a      	str	r2, [r3, #84]	@ 0x54
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b4fc <prvInitialiseNewTask+0x140>)
 800b4cc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	68f9      	ldr	r1, [r7, #12]
 800b4d2:	69b8      	ldr	r0, [r7, #24]
 800b4d4:	f000 ff50 	bl	800c378 <pxPortInitialiseStack>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4ea:	bf00      	nop
 800b4ec:	3720      	adds	r7, #32
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20045fe8 	.word	0x20045fe8
 800b4f8:	20046050 	.word	0x20046050
 800b4fc:	200460b8 	.word	0x200460b8

0800b500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b508:	f001 f848 	bl	800c59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b50c:	4b2a      	ldr	r3, [pc, #168]	@ (800b5b8 <prvAddNewTaskToReadyList+0xb8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	3301      	adds	r3, #1
 800b512:	4a29      	ldr	r2, [pc, #164]	@ (800b5b8 <prvAddNewTaskToReadyList+0xb8>)
 800b514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b516:	4b29      	ldr	r3, [pc, #164]	@ (800b5bc <prvAddNewTaskToReadyList+0xbc>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d109      	bne.n	800b532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b51e:	4a27      	ldr	r2, [pc, #156]	@ (800b5bc <prvAddNewTaskToReadyList+0xbc>)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b524:	4b24      	ldr	r3, [pc, #144]	@ (800b5b8 <prvAddNewTaskToReadyList+0xb8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d110      	bne.n	800b54e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b52c:	f000 fc1a 	bl	800bd64 <prvInitialiseTaskLists>
 800b530:	e00d      	b.n	800b54e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b532:	4b23      	ldr	r3, [pc, #140]	@ (800b5c0 <prvAddNewTaskToReadyList+0xc0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b53a:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <prvAddNewTaskToReadyList+0xbc>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b544:	429a      	cmp	r2, r3
 800b546:	d802      	bhi.n	800b54e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b548:	4a1c      	ldr	r2, [pc, #112]	@ (800b5bc <prvAddNewTaskToReadyList+0xbc>)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b54e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c4 <prvAddNewTaskToReadyList+0xc4>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	4a1b      	ldr	r2, [pc, #108]	@ (800b5c4 <prvAddNewTaskToReadyList+0xc4>)
 800b556:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55c:	2201      	movs	r2, #1
 800b55e:	409a      	lsls	r2, r3
 800b560:	4b19      	ldr	r3, [pc, #100]	@ (800b5c8 <prvAddNewTaskToReadyList+0xc8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4313      	orrs	r3, r2
 800b566:	4a18      	ldr	r2, [pc, #96]	@ (800b5c8 <prvAddNewTaskToReadyList+0xc8>)
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b56e:	4613      	mov	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4a15      	ldr	r2, [pc, #84]	@ (800b5cc <prvAddNewTaskToReadyList+0xcc>)
 800b578:	441a      	add	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3304      	adds	r3, #4
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f7fe fe4c 	bl	800a21e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b586:	f001 f83f 	bl	800c608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b58a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c0 <prvAddNewTaskToReadyList+0xc0>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00e      	beq.n	800b5b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b592:	4b0a      	ldr	r3, [pc, #40]	@ (800b5bc <prvAddNewTaskToReadyList+0xbc>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d207      	bcs.n	800b5b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d0 <prvAddNewTaskToReadyList+0xd0>)
 800b5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5b0:	bf00      	nop
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20042394 	.word	0x20042394
 800b5bc:	20042294 	.word	0x20042294
 800b5c0:	200423a0 	.word	0x200423a0
 800b5c4:	200423b0 	.word	0x200423b0
 800b5c8:	2004239c 	.word	0x2004239c
 800b5cc:	20042298 	.word	0x20042298
 800b5d0:	e000ed04 	.word	0xe000ed04

0800b5d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d01a      	beq.n	800b61c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5e6:	4b15      	ldr	r3, [pc, #84]	@ (800b63c <vTaskDelay+0x68>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00d      	beq.n	800b60a <vTaskDelay+0x36>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f2:	b672      	cpsid	i
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	b662      	cpsie	i
 800b602:	60bb      	str	r3, [r7, #8]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b60a:	f000 f889 	bl	800b720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b60e:	2100      	movs	r1, #0
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fe4b 	bl	800c2ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b616:	f000 f891 	bl	800b73c <xTaskResumeAll>
 800b61a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d107      	bne.n	800b632 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b622:	4b07      	ldr	r3, [pc, #28]	@ (800b640 <vTaskDelay+0x6c>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	200423bc 	.word	0x200423bc
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	@ 0x28
 800b648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b652:	463a      	mov	r2, r7
 800b654:	1d39      	adds	r1, r7, #4
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7f5 fad4 	bl	8000c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	9202      	str	r2, [sp, #8]
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	460a      	mov	r2, r1
 800b672:	4923      	ldr	r1, [pc, #140]	@ (800b700 <vTaskStartScheduler+0xbc>)
 800b674:	4823      	ldr	r0, [pc, #140]	@ (800b704 <vTaskStartScheduler+0xc0>)
 800b676:	f7ff fdf5 	bl	800b264 <xTaskCreateStatic>
 800b67a:	4603      	mov	r3, r0
 800b67c:	4a22      	ldr	r2, [pc, #136]	@ (800b708 <vTaskStartScheduler+0xc4>)
 800b67e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b680:	4b21      	ldr	r3, [pc, #132]	@ (800b708 <vTaskStartScheduler+0xc4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e001      	b.n	800b692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d11d      	bne.n	800b6d4 <vTaskStartScheduler+0x90>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69c:	b672      	cpsid	i
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	b662      	cpsie	i
 800b6ac:	613b      	str	r3, [r7, #16]
}
 800b6ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6b0:	4b16      	ldr	r3, [pc, #88]	@ (800b70c <vTaskStartScheduler+0xc8>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	334c      	adds	r3, #76	@ 0x4c
 800b6b6:	4a16      	ldr	r2, [pc, #88]	@ (800b710 <vTaskStartScheduler+0xcc>)
 800b6b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6ba:	4b16      	ldr	r3, [pc, #88]	@ (800b714 <vTaskStartScheduler+0xd0>)
 800b6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6c2:	4b15      	ldr	r3, [pc, #84]	@ (800b718 <vTaskStartScheduler+0xd4>)
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6c8:	4b14      	ldr	r3, [pc, #80]	@ (800b71c <vTaskStartScheduler+0xd8>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6ce:	f000 fee7 	bl	800c4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6d2:	e011      	b.n	800b6f8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d10d      	bne.n	800b6f8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	b672      	cpsid	i
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	b662      	cpsie	i
 800b6f0:	60fb      	str	r3, [r7, #12]
}
 800b6f2:	bf00      	nop
 800b6f4:	bf00      	nop
 800b6f6:	e7fd      	b.n	800b6f4 <vTaskStartScheduler+0xb0>
}
 800b6f8:	bf00      	nop
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	0800e594 	.word	0x0800e594
 800b704:	0800bd35 	.word	0x0800bd35
 800b708:	200423b8 	.word	0x200423b8
 800b70c:	20042294 	.word	0x20042294
 800b710:	2000001c 	.word	0x2000001c
 800b714:	200423b4 	.word	0x200423b4
 800b718:	200423a0 	.word	0x200423a0
 800b71c:	20042398 	.word	0x20042398

0800b720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b720:	b480      	push	{r7}
 800b722:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b724:	4b04      	ldr	r3, [pc, #16]	@ (800b738 <vTaskSuspendAll+0x18>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3301      	adds	r3, #1
 800b72a:	4a03      	ldr	r2, [pc, #12]	@ (800b738 <vTaskSuspendAll+0x18>)
 800b72c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b72e:	bf00      	nop
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	200423bc 	.word	0x200423bc

0800b73c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b746:	2300      	movs	r3, #0
 800b748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b74a:	4b43      	ldr	r3, [pc, #268]	@ (800b858 <xTaskResumeAll+0x11c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10d      	bne.n	800b76e <xTaskResumeAll+0x32>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	b672      	cpsid	i
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	b662      	cpsie	i
 800b766:	603b      	str	r3, [r7, #0]
}
 800b768:	bf00      	nop
 800b76a:	bf00      	nop
 800b76c:	e7fd      	b.n	800b76a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b76e:	f000 ff15 	bl	800c59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b772:	4b39      	ldr	r3, [pc, #228]	@ (800b858 <xTaskResumeAll+0x11c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3b01      	subs	r3, #1
 800b778:	4a37      	ldr	r2, [pc, #220]	@ (800b858 <xTaskResumeAll+0x11c>)
 800b77a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77c:	4b36      	ldr	r3, [pc, #216]	@ (800b858 <xTaskResumeAll+0x11c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d161      	bne.n	800b848 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b784:	4b35      	ldr	r3, [pc, #212]	@ (800b85c <xTaskResumeAll+0x120>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d05d      	beq.n	800b848 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b78c:	e02e      	b.n	800b7ec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b78e:	4b34      	ldr	r3, [pc, #208]	@ (800b860 <xTaskResumeAll+0x124>)
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3318      	adds	r3, #24
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe fd9c 	bl	800a2d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fd97 	bl	800a2d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	409a      	lsls	r2, r3
 800b7b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b864 <xTaskResumeAll+0x128>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b864 <xTaskResumeAll+0x128>)
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4a27      	ldr	r2, [pc, #156]	@ (800b868 <xTaskResumeAll+0x12c>)
 800b7ca:	441a      	add	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	f7fe fd23 	bl	800a21e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	4b23      	ldr	r3, [pc, #140]	@ (800b86c <xTaskResumeAll+0x130>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d302      	bcc.n	800b7ec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b7e6:	4b22      	ldr	r3, [pc, #136]	@ (800b870 <xTaskResumeAll+0x134>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b860 <xTaskResumeAll+0x124>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1cc      	bne.n	800b78e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7fa:	f000 fb59 	bl	800beb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b874 <xTaskResumeAll+0x138>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d010      	beq.n	800b82c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b80a:	f000 f859 	bl	800b8c0 <xTaskIncrementTick>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b814:	4b16      	ldr	r3, [pc, #88]	@ (800b870 <xTaskResumeAll+0x134>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f1      	bne.n	800b80a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b826:	4b13      	ldr	r3, [pc, #76]	@ (800b874 <xTaskResumeAll+0x138>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b82c:	4b10      	ldr	r3, [pc, #64]	@ (800b870 <xTaskResumeAll+0x134>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d009      	beq.n	800b848 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b834:	2301      	movs	r3, #1
 800b836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b838:	4b0f      	ldr	r3, [pc, #60]	@ (800b878 <xTaskResumeAll+0x13c>)
 800b83a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b848:	f000 fede 	bl	800c608 <vPortExitCritical>

	return xAlreadyYielded;
 800b84c:	68bb      	ldr	r3, [r7, #8]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	200423bc 	.word	0x200423bc
 800b85c:	20042394 	.word	0x20042394
 800b860:	20042354 	.word	0x20042354
 800b864:	2004239c 	.word	0x2004239c
 800b868:	20042298 	.word	0x20042298
 800b86c:	20042294 	.word	0x20042294
 800b870:	200423a8 	.word	0x200423a8
 800b874:	200423a4 	.word	0x200423a4
 800b878:	e000ed04 	.word	0xe000ed04

0800b87c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b882:	4b05      	ldr	r3, [pc, #20]	@ (800b898 <xTaskGetTickCount+0x1c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b888:	687b      	ldr	r3, [r7, #4]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	20042398 	.word	0x20042398

0800b89c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8a2:	f000 ff63 	bl	800c76c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b8aa:	4b04      	ldr	r3, [pc, #16]	@ (800b8bc <xTaskGetTickCountFromISR+0x20>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8b0:	683b      	ldr	r3, [r7, #0]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20042398 	.word	0x20042398

0800b8c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ca:	4b50      	ldr	r3, [pc, #320]	@ (800ba0c <xTaskIncrementTick+0x14c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f040 808b 	bne.w	800b9ea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8d4:	4b4e      	ldr	r3, [pc, #312]	@ (800ba10 <xTaskIncrementTick+0x150>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8dc:	4a4c      	ldr	r2, [pc, #304]	@ (800ba10 <xTaskIncrementTick+0x150>)
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d123      	bne.n	800b930 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8e8:	4b4a      	ldr	r3, [pc, #296]	@ (800ba14 <xTaskIncrementTick+0x154>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00d      	beq.n	800b90e <xTaskIncrementTick+0x4e>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f6:	b672      	cpsid	i
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	b662      	cpsie	i
 800b906:	603b      	str	r3, [r7, #0]
}
 800b908:	bf00      	nop
 800b90a:	bf00      	nop
 800b90c:	e7fd      	b.n	800b90a <xTaskIncrementTick+0x4a>
 800b90e:	4b41      	ldr	r3, [pc, #260]	@ (800ba14 <xTaskIncrementTick+0x154>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	4b40      	ldr	r3, [pc, #256]	@ (800ba18 <xTaskIncrementTick+0x158>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a3e      	ldr	r2, [pc, #248]	@ (800ba14 <xTaskIncrementTick+0x154>)
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	4a3e      	ldr	r2, [pc, #248]	@ (800ba18 <xTaskIncrementTick+0x158>)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	4b3e      	ldr	r3, [pc, #248]	@ (800ba1c <xTaskIncrementTick+0x15c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3301      	adds	r3, #1
 800b928:	4a3c      	ldr	r2, [pc, #240]	@ (800ba1c <xTaskIncrementTick+0x15c>)
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	f000 fac0 	bl	800beb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b930:	4b3b      	ldr	r3, [pc, #236]	@ (800ba20 <xTaskIncrementTick+0x160>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	429a      	cmp	r2, r3
 800b938:	d348      	bcc.n	800b9cc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b93a:	4b36      	ldr	r3, [pc, #216]	@ (800ba14 <xTaskIncrementTick+0x154>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d104      	bne.n	800b94e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b944:	4b36      	ldr	r3, [pc, #216]	@ (800ba20 <xTaskIncrementTick+0x160>)
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	601a      	str	r2, [r3, #0]
					break;
 800b94c:	e03e      	b.n	800b9cc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b94e:	4b31      	ldr	r3, [pc, #196]	@ (800ba14 <xTaskIncrementTick+0x154>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	429a      	cmp	r2, r3
 800b964:	d203      	bcs.n	800b96e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b966:	4a2e      	ldr	r2, [pc, #184]	@ (800ba20 <xTaskIncrementTick+0x160>)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b96c:	e02e      	b.n	800b9cc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	3304      	adds	r3, #4
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe fcb0 	bl	800a2d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	3318      	adds	r3, #24
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe fca7 	bl	800a2d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98e:	2201      	movs	r2, #1
 800b990:	409a      	lsls	r2, r3
 800b992:	4b24      	ldr	r3, [pc, #144]	@ (800ba24 <xTaskIncrementTick+0x164>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4313      	orrs	r3, r2
 800b998:	4a22      	ldr	r2, [pc, #136]	@ (800ba24 <xTaskIncrementTick+0x164>)
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4a1f      	ldr	r2, [pc, #124]	@ (800ba28 <xTaskIncrementTick+0x168>)
 800b9aa:	441a      	add	r2, r3
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f7fe fc33 	bl	800a21e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	@ (800ba2c <xTaskIncrementTick+0x16c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d3b9      	bcc.n	800b93a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ca:	e7b6      	b.n	800b93a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9cc:	4b17      	ldr	r3, [pc, #92]	@ (800ba2c <xTaskIncrementTick+0x16c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d2:	4915      	ldr	r1, [pc, #84]	@ (800ba28 <xTaskIncrementTick+0x168>)
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d907      	bls.n	800b9f4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e004      	b.n	800b9f4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9ea:	4b11      	ldr	r3, [pc, #68]	@ (800ba30 <xTaskIncrementTick+0x170>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	4a0f      	ldr	r2, [pc, #60]	@ (800ba30 <xTaskIncrementTick+0x170>)
 800b9f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ba34 <xTaskIncrementTick+0x174>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba00:	697b      	ldr	r3, [r7, #20]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	200423bc 	.word	0x200423bc
 800ba10:	20042398 	.word	0x20042398
 800ba14:	2004234c 	.word	0x2004234c
 800ba18:	20042350 	.word	0x20042350
 800ba1c:	200423ac 	.word	0x200423ac
 800ba20:	200423b4 	.word	0x200423b4
 800ba24:	2004239c 	.word	0x2004239c
 800ba28:	20042298 	.word	0x20042298
 800ba2c:	20042294 	.word	0x20042294
 800ba30:	200423a4 	.word	0x200423a4
 800ba34:	200423a8 	.word	0x200423a8

0800ba38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba3e:	4b2b      	ldr	r3, [pc, #172]	@ (800baec <vTaskSwitchContext+0xb4>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba46:	4b2a      	ldr	r3, [pc, #168]	@ (800baf0 <vTaskSwitchContext+0xb8>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba4c:	e047      	b.n	800bade <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ba4e:	4b28      	ldr	r3, [pc, #160]	@ (800baf0 <vTaskSwitchContext+0xb8>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba54:	4b27      	ldr	r3, [pc, #156]	@ (800baf4 <vTaskSwitchContext+0xbc>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	fab3 f383 	clz	r3, r3
 800ba60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	f1c3 031f 	rsb	r3, r3, #31
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	4923      	ldr	r1, [pc, #140]	@ (800baf8 <vTaskSwitchContext+0xc0>)
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	440b      	add	r3, r1
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10d      	bne.n	800ba9a <vTaskSwitchContext+0x62>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba82:	b672      	cpsid	i
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	b662      	cpsie	i
 800ba92:	607b      	str	r3, [r7, #4]
}
 800ba94:	bf00      	nop
 800ba96:	bf00      	nop
 800ba98:	e7fd      	b.n	800ba96 <vTaskSwitchContext+0x5e>
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4a14      	ldr	r2, [pc, #80]	@ (800baf8 <vTaskSwitchContext+0xc0>)
 800baa6:	4413      	add	r3, r2
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	605a      	str	r2, [r3, #4]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	3308      	adds	r3, #8
 800babc:	429a      	cmp	r2, r3
 800babe:	d104      	bne.n	800baca <vTaskSwitchContext+0x92>
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	605a      	str	r2, [r3, #4]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	4a0a      	ldr	r2, [pc, #40]	@ (800bafc <vTaskSwitchContext+0xc4>)
 800bad2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bad4:	4b09      	ldr	r3, [pc, #36]	@ (800bafc <vTaskSwitchContext+0xc4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	334c      	adds	r3, #76	@ 0x4c
 800bada:	4a09      	ldr	r2, [pc, #36]	@ (800bb00 <vTaskSwitchContext+0xc8>)
 800badc:	6013      	str	r3, [r2, #0]
}
 800bade:	bf00      	nop
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	200423bc 	.word	0x200423bc
 800baf0:	200423a8 	.word	0x200423a8
 800baf4:	2004239c 	.word	0x2004239c
 800baf8:	20042298 	.word	0x20042298
 800bafc:	20042294 	.word	0x20042294
 800bb00:	2000001c 	.word	0x2000001c

0800bb04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10d      	bne.n	800bb30 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb18:	b672      	cpsid	i
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	b662      	cpsie	i
 800bb28:	60fb      	str	r3, [r7, #12]
}
 800bb2a:	bf00      	nop
 800bb2c:	bf00      	nop
 800bb2e:	e7fd      	b.n	800bb2c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb30:	4b07      	ldr	r3, [pc, #28]	@ (800bb50 <vTaskPlaceOnEventList+0x4c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3318      	adds	r3, #24
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7fe fb94 	bl	800a266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb3e:	2101      	movs	r1, #1
 800bb40:	6838      	ldr	r0, [r7, #0]
 800bb42:	f000 fbb3 	bl	800c2ac <prvAddCurrentTaskToDelayedList>
}
 800bb46:	bf00      	nop
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20042294 	.word	0x20042294

0800bb54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10d      	bne.n	800bb86 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6e:	b672      	cpsid	i
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	b662      	cpsie	i
 800bb7e:	60fb      	str	r3, [r7, #12]
}
 800bb80:	bf00      	nop
 800bb82:	bf00      	nop
 800bb84:	e7fd      	b.n	800bb82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3318      	adds	r3, #24
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fba4 	bl	800a2d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb90:	4b1d      	ldr	r3, [pc, #116]	@ (800bc08 <xTaskRemoveFromEventList+0xb4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d11c      	bne.n	800bbd2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe fb9b 	bl	800a2d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba6:	2201      	movs	r2, #1
 800bba8:	409a      	lsls	r2, r3
 800bbaa:	4b18      	ldr	r3, [pc, #96]	@ (800bc0c <xTaskRemoveFromEventList+0xb8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	4a16      	ldr	r2, [pc, #88]	@ (800bc0c <xTaskRemoveFromEventList+0xb8>)
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4a13      	ldr	r2, [pc, #76]	@ (800bc10 <xTaskRemoveFromEventList+0xbc>)
 800bbc2:	441a      	add	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7fe fb27 	bl	800a21e <vListInsertEnd>
 800bbd0:	e005      	b.n	800bbde <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	3318      	adds	r3, #24
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	480e      	ldr	r0, [pc, #56]	@ (800bc14 <xTaskRemoveFromEventList+0xc0>)
 800bbda:	f7fe fb20 	bl	800a21e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800bc18 <xTaskRemoveFromEventList+0xc4>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d905      	bls.n	800bbf8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbec:	2301      	movs	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbf0:	4b0a      	ldr	r3, [pc, #40]	@ (800bc1c <xTaskRemoveFromEventList+0xc8>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	e001      	b.n	800bbfc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbfc:	697b      	ldr	r3, [r7, #20]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	200423bc 	.word	0x200423bc
 800bc0c:	2004239c 	.word	0x2004239c
 800bc10:	20042298 	.word	0x20042298
 800bc14:	20042354 	.word	0x20042354
 800bc18:	20042294 	.word	0x20042294
 800bc1c:	200423a8 	.word	0x200423a8

0800bc20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc28:	4b06      	ldr	r3, [pc, #24]	@ (800bc44 <vTaskInternalSetTimeOutState+0x24>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc30:	4b05      	ldr	r3, [pc, #20]	@ (800bc48 <vTaskInternalSetTimeOutState+0x28>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	200423ac 	.word	0x200423ac
 800bc48:	20042398 	.word	0x20042398

0800bc4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10d      	bne.n	800bc78 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc60:	b672      	cpsid	i
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	b662      	cpsie	i
 800bc70:	613b      	str	r3, [r7, #16]
}
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	e7fd      	b.n	800bc74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10d      	bne.n	800bc9a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc82:	b672      	cpsid	i
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	b662      	cpsie	i
 800bc92:	60fb      	str	r3, [r7, #12]
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	e7fd      	b.n	800bc96 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800bc9a:	f000 fc7f 	bl	800c59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bd14 <xTaskCheckForTimeOut+0xc8>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	69ba      	ldr	r2, [r7, #24]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d102      	bne.n	800bcbe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e023      	b.n	800bd06 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b15      	ldr	r3, [pc, #84]	@ (800bd18 <xTaskCheckForTimeOut+0xcc>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d007      	beq.n	800bcda <xTaskCheckForTimeOut+0x8e>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	69ba      	ldr	r2, [r7, #24]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d302      	bcc.n	800bcda <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	61fb      	str	r3, [r7, #28]
 800bcd8:	e015      	b.n	800bd06 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d20b      	bcs.n	800bcfc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff ff95 	bl	800bc20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	61fb      	str	r3, [r7, #28]
 800bcfa:	e004      	b.n	800bd06 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd02:	2301      	movs	r3, #1
 800bd04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd06:	f000 fc7f 	bl	800c608 <vPortExitCritical>

	return xReturn;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3720      	adds	r7, #32
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20042398 	.word	0x20042398
 800bd18:	200423ac 	.word	0x200423ac

0800bd1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd20:	4b03      	ldr	r3, [pc, #12]	@ (800bd30 <vTaskMissedYield+0x14>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	601a      	str	r2, [r3, #0]
}
 800bd26:	bf00      	nop
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	200423a8 	.word	0x200423a8

0800bd34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd3c:	f000 f852 	bl	800bde4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd40:	4b06      	ldr	r3, [pc, #24]	@ (800bd5c <prvIdleTask+0x28>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d9f9      	bls.n	800bd3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd48:	4b05      	ldr	r3, [pc, #20]	@ (800bd60 <prvIdleTask+0x2c>)
 800bd4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd58:	e7f0      	b.n	800bd3c <prvIdleTask+0x8>
 800bd5a:	bf00      	nop
 800bd5c:	20042298 	.word	0x20042298
 800bd60:	e000ed04 	.word	0xe000ed04

0800bd64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	e00c      	b.n	800bd8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4a12      	ldr	r2, [pc, #72]	@ (800bdc4 <prvInitialiseTaskLists+0x60>)
 800bd7c:	4413      	add	r3, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fa20 	bl	800a1c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3301      	adds	r3, #1
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b06      	cmp	r3, #6
 800bd8e:	d9ef      	bls.n	800bd70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd90:	480d      	ldr	r0, [pc, #52]	@ (800bdc8 <prvInitialiseTaskLists+0x64>)
 800bd92:	f7fe fa17 	bl	800a1c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd96:	480d      	ldr	r0, [pc, #52]	@ (800bdcc <prvInitialiseTaskLists+0x68>)
 800bd98:	f7fe fa14 	bl	800a1c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd9c:	480c      	ldr	r0, [pc, #48]	@ (800bdd0 <prvInitialiseTaskLists+0x6c>)
 800bd9e:	f7fe fa11 	bl	800a1c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bda2:	480c      	ldr	r0, [pc, #48]	@ (800bdd4 <prvInitialiseTaskLists+0x70>)
 800bda4:	f7fe fa0e 	bl	800a1c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bda8:	480b      	ldr	r0, [pc, #44]	@ (800bdd8 <prvInitialiseTaskLists+0x74>)
 800bdaa:	f7fe fa0b 	bl	800a1c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdae:	4b0b      	ldr	r3, [pc, #44]	@ (800bddc <prvInitialiseTaskLists+0x78>)
 800bdb0:	4a05      	ldr	r2, [pc, #20]	@ (800bdc8 <prvInitialiseTaskLists+0x64>)
 800bdb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bde0 <prvInitialiseTaskLists+0x7c>)
 800bdb6:	4a05      	ldr	r2, [pc, #20]	@ (800bdcc <prvInitialiseTaskLists+0x68>)
 800bdb8:	601a      	str	r2, [r3, #0]
}
 800bdba:	bf00      	nop
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20042298 	.word	0x20042298
 800bdc8:	20042324 	.word	0x20042324
 800bdcc:	20042338 	.word	0x20042338
 800bdd0:	20042354 	.word	0x20042354
 800bdd4:	20042368 	.word	0x20042368
 800bdd8:	20042380 	.word	0x20042380
 800bddc:	2004234c 	.word	0x2004234c
 800bde0:	20042350 	.word	0x20042350

0800bde4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdea:	e019      	b.n	800be20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdec:	f000 fbd6 	bl	800c59c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf0:	4b10      	ldr	r3, [pc, #64]	@ (800be34 <prvCheckTasksWaitingTermination+0x50>)
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe fa6b 	bl	800a2d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be02:	4b0d      	ldr	r3, [pc, #52]	@ (800be38 <prvCheckTasksWaitingTermination+0x54>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3b01      	subs	r3, #1
 800be08:	4a0b      	ldr	r2, [pc, #44]	@ (800be38 <prvCheckTasksWaitingTermination+0x54>)
 800be0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be0c:	4b0b      	ldr	r3, [pc, #44]	@ (800be3c <prvCheckTasksWaitingTermination+0x58>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3b01      	subs	r3, #1
 800be12:	4a0a      	ldr	r2, [pc, #40]	@ (800be3c <prvCheckTasksWaitingTermination+0x58>)
 800be14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be16:	f000 fbf7 	bl	800c608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f810 	bl	800be40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be20:	4b06      	ldr	r3, [pc, #24]	@ (800be3c <prvCheckTasksWaitingTermination+0x58>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e1      	bne.n	800bdec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20042368 	.word	0x20042368
 800be38:	20042394 	.word	0x20042394
 800be3c:	2004237c 	.word	0x2004237c

0800be40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	334c      	adds	r3, #76	@ 0x4c
 800be4c:	4618      	mov	r0, r3
 800be4e:	f001 f9ad 	bl	800d1ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d108      	bne.n	800be6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fd97 	bl	800c994 <vPortFree>
				vPortFree( pxTCB );
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fd94 	bl	800c994 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be6c:	e01b      	b.n	800bea6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be74:	2b01      	cmp	r3, #1
 800be76:	d103      	bne.n	800be80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fd8b 	bl	800c994 <vPortFree>
	}
 800be7e:	e012      	b.n	800bea6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be86:	2b02      	cmp	r3, #2
 800be88:	d00d      	beq.n	800bea6 <prvDeleteTCB+0x66>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8e:	b672      	cpsid	i
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	b662      	cpsie	i
 800be9e:	60fb      	str	r3, [r7, #12]
}
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
 800bea4:	e7fd      	b.n	800bea2 <prvDeleteTCB+0x62>
	}
 800bea6:	bf00      	nop
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bee8 <prvResetNextTaskUnblockTime+0x38>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d104      	bne.n	800beca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bec0:	4b0a      	ldr	r3, [pc, #40]	@ (800beec <prvResetNextTaskUnblockTime+0x3c>)
 800bec2:	f04f 32ff 	mov.w	r2, #4294967295
 800bec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bec8:	e008      	b.n	800bedc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beca:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <prvResetNextTaskUnblockTime+0x38>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	4a04      	ldr	r2, [pc, #16]	@ (800beec <prvResetNextTaskUnblockTime+0x3c>)
 800beda:	6013      	str	r3, [r2, #0]
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	2004234c 	.word	0x2004234c
 800beec:	200423b4 	.word	0x200423b4

0800bef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bef6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf24 <xTaskGetSchedulerState+0x34>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d102      	bne.n	800bf04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800befe:	2301      	movs	r3, #1
 800bf00:	607b      	str	r3, [r7, #4]
 800bf02:	e008      	b.n	800bf16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf04:	4b08      	ldr	r3, [pc, #32]	@ (800bf28 <xTaskGetSchedulerState+0x38>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	607b      	str	r3, [r7, #4]
 800bf10:	e001      	b.n	800bf16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf12:	2300      	movs	r3, #0
 800bf14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf16:	687b      	ldr	r3, [r7, #4]
	}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	200423a0 	.word	0x200423a0
 800bf28:	200423bc 	.word	0x200423bc

0800bf2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d069      	beq.n	800c016 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf46:	4b36      	ldr	r3, [pc, #216]	@ (800c020 <xTaskPriorityInherit+0xf4>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d259      	bcs.n	800c004 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	db06      	blt.n	800bf66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf58:	4b31      	ldr	r3, [pc, #196]	@ (800c020 <xTaskPriorityInherit+0xf4>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5e:	f1c3 0207 	rsb	r2, r3, #7
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6959      	ldr	r1, [r3, #20]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4a2b      	ldr	r2, [pc, #172]	@ (800c024 <xTaskPriorityInherit+0xf8>)
 800bf78:	4413      	add	r3, r2
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	d13a      	bne.n	800bff4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	3304      	adds	r3, #4
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe f9a8 	bl	800a2d8 <uxListRemove>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d115      	bne.n	800bfba <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf92:	4924      	ldr	r1, [pc, #144]	@ (800c024 <xTaskPriorityInherit+0xf8>)
 800bf94:	4613      	mov	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10a      	bne.n	800bfba <xTaskPriorityInherit+0x8e>
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	fa02 f303 	lsl.w	r3, r2, r3
 800bfae:	43da      	mvns	r2, r3
 800bfb0:	4b1d      	ldr	r3, [pc, #116]	@ (800c028 <xTaskPriorityInherit+0xfc>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	4a1c      	ldr	r2, [pc, #112]	@ (800c028 <xTaskPriorityInherit+0xfc>)
 800bfb8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfba:	4b19      	ldr	r3, [pc, #100]	@ (800c020 <xTaskPriorityInherit+0xf4>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc8:	2201      	movs	r2, #1
 800bfca:	409a      	lsls	r2, r3
 800bfcc:	4b16      	ldr	r3, [pc, #88]	@ (800c028 <xTaskPriorityInherit+0xfc>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	4a15      	ldr	r2, [pc, #84]	@ (800c028 <xTaskPriorityInherit+0xfc>)
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfda:	4613      	mov	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4413      	add	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4a10      	ldr	r2, [pc, #64]	@ (800c024 <xTaskPriorityInherit+0xf8>)
 800bfe4:	441a      	add	r2, r3
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	4619      	mov	r1, r3
 800bfec:	4610      	mov	r0, r2
 800bfee:	f7fe f916 	bl	800a21e <vListInsertEnd>
 800bff2:	e004      	b.n	800bffe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bff4:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <xTaskPriorityInherit+0xf4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bffe:	2301      	movs	r3, #1
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e008      	b.n	800c016 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c008:	4b05      	ldr	r3, [pc, #20]	@ (800c020 <xTaskPriorityInherit+0xf4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00e:	429a      	cmp	r2, r3
 800c010:	d201      	bcs.n	800c016 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c016:	68fb      	ldr	r3, [r7, #12]
	}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20042294 	.word	0x20042294
 800c024:	20042298 	.word	0x20042298
 800c028:	2004239c 	.word	0x2004239c

0800c02c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c038:	2300      	movs	r3, #0
 800c03a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d074      	beq.n	800c12c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c042:	4b3d      	ldr	r3, [pc, #244]	@ (800c138 <xTaskPriorityDisinherit+0x10c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	693a      	ldr	r2, [r7, #16]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d00d      	beq.n	800c068 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c050:	b672      	cpsid	i
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	b662      	cpsie	i
 800c060:	60fb      	str	r3, [r7, #12]
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	e7fd      	b.n	800c064 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10d      	bne.n	800c08c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	b672      	cpsid	i
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	b662      	cpsie	i
 800c084:	60bb      	str	r3, [r7, #8]
}
 800c086:	bf00      	nop
 800c088:	bf00      	nop
 800c08a:	e7fd      	b.n	800c088 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c090:	1e5a      	subs	r2, r3, #1
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d044      	beq.n	800c12c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d140      	bne.n	800c12c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe f912 	bl	800a2d8 <uxListRemove>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d115      	bne.n	800c0e6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0be:	491f      	ldr	r1, [pc, #124]	@ (800c13c <xTaskPriorityDisinherit+0x110>)
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	440b      	add	r3, r1
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <xTaskPriorityDisinherit+0xba>
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0da:	43da      	mvns	r2, r3
 800c0dc:	4b18      	ldr	r3, [pc, #96]	@ (800c140 <xTaskPriorityDisinherit+0x114>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	4a17      	ldr	r2, [pc, #92]	@ (800c140 <xTaskPriorityDisinherit+0x114>)
 800c0e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f2:	f1c3 0207 	rsb	r2, r3, #7
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0fe:	2201      	movs	r2, #1
 800c100:	409a      	lsls	r2, r3
 800c102:	4b0f      	ldr	r3, [pc, #60]	@ (800c140 <xTaskPriorityDisinherit+0x114>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4313      	orrs	r3, r2
 800c108:	4a0d      	ldr	r2, [pc, #52]	@ (800c140 <xTaskPriorityDisinherit+0x114>)
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4a08      	ldr	r2, [pc, #32]	@ (800c13c <xTaskPriorityDisinherit+0x110>)
 800c11a:	441a      	add	r2, r3
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	3304      	adds	r3, #4
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f7fe f87b 	bl	800a21e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c128:	2301      	movs	r3, #1
 800c12a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c12c:	697b      	ldr	r3, [r7, #20]
	}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20042294 	.word	0x20042294
 800c13c:	20042298 	.word	0x20042298
 800c140:	2004239c 	.word	0x2004239c

0800c144 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c152:	2301      	movs	r3, #1
 800c154:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 8089 	beq.w	800c270 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10d      	bne.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16a:	b672      	cpsid	i
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	b662      	cpsie	i
 800c17a:	60fb      	str	r3, [r7, #12]
}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	e7fd      	b.n	800c17e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d902      	bls.n	800c192 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	61fb      	str	r3, [r7, #28]
 800c190:	e002      	b.n	800c198 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c196:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19c:	69fa      	ldr	r2, [r7, #28]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d066      	beq.n	800c270 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d161      	bne.n	800c270 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1ac:	4b32      	ldr	r3, [pc, #200]	@ (800c278 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d10d      	bne.n	800c1d2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ba:	b672      	cpsid	i
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	b662      	cpsie	i
 800c1ca:	60bb      	str	r3, [r7, #8]
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	e7fd      	b.n	800c1ce <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	69fa      	ldr	r2, [r7, #28]
 800c1dc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db04      	blt.n	800c1f0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	f1c3 0207 	rsb	r2, r3, #7
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	6959      	ldr	r1, [r3, #20]
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4a1f      	ldr	r2, [pc, #124]	@ (800c27c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c200:	4413      	add	r3, r2
 800c202:	4299      	cmp	r1, r3
 800c204:	d134      	bne.n	800c270 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	3304      	adds	r3, #4
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe f864 	bl	800a2d8 <uxListRemove>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d115      	bne.n	800c242 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c21a:	4918      	ldr	r1, [pc, #96]	@ (800c27c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	440b      	add	r3, r1
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c230:	2201      	movs	r2, #1
 800c232:	fa02 f303 	lsl.w	r3, r2, r3
 800c236:	43da      	mvns	r2, r3
 800c238:	4b11      	ldr	r3, [pc, #68]	@ (800c280 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4013      	ands	r3, r2
 800c23e:	4a10      	ldr	r2, [pc, #64]	@ (800c280 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c240:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c246:	2201      	movs	r2, #1
 800c248:	409a      	lsls	r2, r3
 800c24a:	4b0d      	ldr	r3, [pc, #52]	@ (800c280 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4313      	orrs	r3, r2
 800c250:	4a0b      	ldr	r2, [pc, #44]	@ (800c280 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c258:	4613      	mov	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4a06      	ldr	r2, [pc, #24]	@ (800c27c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c262:	441a      	add	r2, r3
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	3304      	adds	r3, #4
 800c268:	4619      	mov	r1, r3
 800c26a:	4610      	mov	r0, r2
 800c26c:	f7fd ffd7 	bl	800a21e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c270:	bf00      	nop
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20042294 	.word	0x20042294
 800c27c:	20042298 	.word	0x20042298
 800c280:	2004239c 	.word	0x2004239c

0800c284 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c288:	4b07      	ldr	r3, [pc, #28]	@ (800c2a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d004      	beq.n	800c29a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c290:	4b05      	ldr	r3, [pc, #20]	@ (800c2a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c296:	3201      	adds	r2, #1
 800c298:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c29a:	4b03      	ldr	r3, [pc, #12]	@ (800c2a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c29c:	681b      	ldr	r3, [r3, #0]
	}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	20042294 	.word	0x20042294

0800c2ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2b6:	4b29      	ldr	r3, [pc, #164]	@ (800c35c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2bc:	4b28      	ldr	r3, [pc, #160]	@ (800c360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe f808 	bl	800a2d8 <uxListRemove>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10b      	bne.n	800c2e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c2ce:	4b24      	ldr	r3, [pc, #144]	@ (800c360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2da:	43da      	mvns	r2, r3
 800c2dc:	4b21      	ldr	r3, [pc, #132]	@ (800c364 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	4a20      	ldr	r2, [pc, #128]	@ (800c364 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ec:	d10a      	bne.n	800c304 <prvAddCurrentTaskToDelayedList+0x58>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d007      	beq.n	800c304 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	481a      	ldr	r0, [pc, #104]	@ (800c368 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2fe:	f7fd ff8e 	bl	800a21e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c302:	e026      	b.n	800c352 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4413      	add	r3, r2
 800c30a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c30c:	4b14      	ldr	r3, [pc, #80]	@ (800c360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d209      	bcs.n	800c330 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c31c:	4b13      	ldr	r3, [pc, #76]	@ (800c36c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	4b0f      	ldr	r3, [pc, #60]	@ (800c360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3304      	adds	r3, #4
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f7fd ff9c 	bl	800a266 <vListInsert>
}
 800c32e:	e010      	b.n	800c352 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c330:	4b0f      	ldr	r3, [pc, #60]	@ (800c370 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7fd ff92 	bl	800a266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c342:	4b0c      	ldr	r3, [pc, #48]	@ (800c374 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d202      	bcs.n	800c352 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c34c:	4a09      	ldr	r2, [pc, #36]	@ (800c374 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	6013      	str	r3, [r2, #0]
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20042398 	.word	0x20042398
 800c360:	20042294 	.word	0x20042294
 800c364:	2004239c 	.word	0x2004239c
 800c368:	20042380 	.word	0x20042380
 800c36c:	20042350 	.word	0x20042350
 800c370:	2004234c 	.word	0x2004234c
 800c374:	200423b4 	.word	0x200423b4

0800c378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3b04      	subs	r3, #4
 800c388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3b04      	subs	r3, #4
 800c396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	f023 0201 	bic.w	r2, r3, #1
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3b04      	subs	r3, #4
 800c3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3a8:	4a0c      	ldr	r2, [pc, #48]	@ (800c3dc <pxPortInitialiseStack+0x64>)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3b14      	subs	r3, #20
 800c3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3b04      	subs	r3, #4
 800c3be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f06f 0202 	mvn.w	r2, #2
 800c3c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3b20      	subs	r3, #32
 800c3cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	0800c3e1 	.word	0x0800c3e1

0800c3e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3ea:	4b15      	ldr	r3, [pc, #84]	@ (800c440 <prvTaskExitError+0x60>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f2:	d00d      	beq.n	800c410 <prvTaskExitError+0x30>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f8:	b672      	cpsid	i
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	b662      	cpsie	i
 800c408:	60fb      	str	r3, [r7, #12]
}
 800c40a:	bf00      	nop
 800c40c:	bf00      	nop
 800c40e:	e7fd      	b.n	800c40c <prvTaskExitError+0x2c>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c414:	b672      	cpsid	i
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	b662      	cpsie	i
 800c424:	60bb      	str	r3, [r7, #8]
}
 800c426:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c428:	bf00      	nop
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0fc      	beq.n	800c42a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c430:	bf00      	nop
 800c432:	bf00      	nop
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	2000000c 	.word	0x2000000c
	...

0800c450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c450:	4b07      	ldr	r3, [pc, #28]	@ (800c470 <pxCurrentTCBConst2>)
 800c452:	6819      	ldr	r1, [r3, #0]
 800c454:	6808      	ldr	r0, [r1, #0]
 800c456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45a:	f380 8809 	msr	PSP, r0
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f04f 0000 	mov.w	r0, #0
 800c466:	f380 8811 	msr	BASEPRI, r0
 800c46a:	4770      	bx	lr
 800c46c:	f3af 8000 	nop.w

0800c470 <pxCurrentTCBConst2>:
 800c470:	20042294 	.word	0x20042294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c474:	bf00      	nop
 800c476:	bf00      	nop

0800c478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c478:	4808      	ldr	r0, [pc, #32]	@ (800c49c <prvPortStartFirstTask+0x24>)
 800c47a:	6800      	ldr	r0, [r0, #0]
 800c47c:	6800      	ldr	r0, [r0, #0]
 800c47e:	f380 8808 	msr	MSP, r0
 800c482:	f04f 0000 	mov.w	r0, #0
 800c486:	f380 8814 	msr	CONTROL, r0
 800c48a:	b662      	cpsie	i
 800c48c:	b661      	cpsie	f
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	df00      	svc	0
 800c498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c49a:	bf00      	nop
 800c49c:	e000ed08 	.word	0xe000ed08

0800c4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4a6:	4b37      	ldr	r3, [pc, #220]	@ (800c584 <xPortStartScheduler+0xe4>)
 800c4a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	22ff      	movs	r2, #255	@ 0xff
 800c4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c588 <xPortStartScheduler+0xe8>)
 800c4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4ce:	4b2f      	ldr	r3, [pc, #188]	@ (800c58c <xPortStartScheduler+0xec>)
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4d4:	e009      	b.n	800c4ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c4d6:	4b2d      	ldr	r3, [pc, #180]	@ (800c58c <xPortStartScheduler+0xec>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a2b      	ldr	r2, [pc, #172]	@ (800c58c <xPortStartScheduler+0xec>)
 800c4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4f2:	2b80      	cmp	r3, #128	@ 0x80
 800c4f4:	d0ef      	beq.n	800c4d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4f6:	4b25      	ldr	r3, [pc, #148]	@ (800c58c <xPortStartScheduler+0xec>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f1c3 0307 	rsb	r3, r3, #7
 800c4fe:	2b04      	cmp	r3, #4
 800c500:	d00d      	beq.n	800c51e <xPortStartScheduler+0x7e>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	b672      	cpsid	i
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	b662      	cpsie	i
 800c516:	60bb      	str	r3, [r7, #8]
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c51e:	4b1b      	ldr	r3, [pc, #108]	@ (800c58c <xPortStartScheduler+0xec>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	4a19      	ldr	r2, [pc, #100]	@ (800c58c <xPortStartScheduler+0xec>)
 800c526:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c528:	4b18      	ldr	r3, [pc, #96]	@ (800c58c <xPortStartScheduler+0xec>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c530:	4a16      	ldr	r2, [pc, #88]	@ (800c58c <xPortStartScheduler+0xec>)
 800c532:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	b2da      	uxtb	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c53c:	4b14      	ldr	r3, [pc, #80]	@ (800c590 <xPortStartScheduler+0xf0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a13      	ldr	r2, [pc, #76]	@ (800c590 <xPortStartScheduler+0xf0>)
 800c542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c546:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c548:	4b11      	ldr	r3, [pc, #68]	@ (800c590 <xPortStartScheduler+0xf0>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a10      	ldr	r2, [pc, #64]	@ (800c590 <xPortStartScheduler+0xf0>)
 800c54e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c552:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c554:	f000 f8dc 	bl	800c710 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c558:	4b0e      	ldr	r3, [pc, #56]	@ (800c594 <xPortStartScheduler+0xf4>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c55e:	f000 f8fb 	bl	800c758 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c562:	4b0d      	ldr	r3, [pc, #52]	@ (800c598 <xPortStartScheduler+0xf8>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a0c      	ldr	r2, [pc, #48]	@ (800c598 <xPortStartScheduler+0xf8>)
 800c568:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c56c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c56e:	f7ff ff83 	bl	800c478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c572:	f7ff fa61 	bl	800ba38 <vTaskSwitchContext>
	prvTaskExitError();
 800c576:	f7ff ff33 	bl	800c3e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	e000e400 	.word	0xe000e400
 800c588:	200423c0 	.word	0x200423c0
 800c58c:	200423c4 	.word	0x200423c4
 800c590:	e000ed20 	.word	0xe000ed20
 800c594:	2000000c 	.word	0x2000000c
 800c598:	e000ef34 	.word	0xe000ef34

0800c59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a6:	b672      	cpsid	i
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	b662      	cpsie	i
 800c5b6:	607b      	str	r3, [r7, #4]
}
 800c5b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ba:	4b11      	ldr	r3, [pc, #68]	@ (800c600 <vPortEnterCritical+0x64>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800c600 <vPortEnterCritical+0x64>)
 800c5c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c600 <vPortEnterCritical+0x64>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d112      	bne.n	800c5f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c604 <vPortEnterCritical+0x68>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00d      	beq.n	800c5f2 <vPortEnterCritical+0x56>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5da:	b672      	cpsid	i
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	b662      	cpsie	i
 800c5ea:	603b      	str	r3, [r7, #0]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <vPortEnterCritical+0x52>
	}
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	2000000c 	.word	0x2000000c
 800c604:	e000ed04 	.word	0xe000ed04

0800c608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c60e:	4b13      	ldr	r3, [pc, #76]	@ (800c65c <vPortExitCritical+0x54>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10d      	bne.n	800c632 <vPortExitCritical+0x2a>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	b672      	cpsid	i
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	b662      	cpsie	i
 800c62a:	607b      	str	r3, [r7, #4]
}
 800c62c:	bf00      	nop
 800c62e:	bf00      	nop
 800c630:	e7fd      	b.n	800c62e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c632:	4b0a      	ldr	r3, [pc, #40]	@ (800c65c <vPortExitCritical+0x54>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3b01      	subs	r3, #1
 800c638:	4a08      	ldr	r2, [pc, #32]	@ (800c65c <vPortExitCritical+0x54>)
 800c63a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c63c:	4b07      	ldr	r3, [pc, #28]	@ (800c65c <vPortExitCritical+0x54>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d105      	bne.n	800c650 <vPortExitCritical+0x48>
 800c644:	2300      	movs	r3, #0
 800c646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f383 8811 	msr	BASEPRI, r3
}
 800c64e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	2000000c 	.word	0x2000000c

0800c660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c660:	f3ef 8009 	mrs	r0, PSP
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4b15      	ldr	r3, [pc, #84]	@ (800c6c0 <pxCurrentTCBConst>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	f01e 0f10 	tst.w	lr, #16
 800c670:	bf08      	it	eq
 800c672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	6010      	str	r0, [r2, #0]
 800c67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c684:	b672      	cpsid	i
 800c686:	f380 8811 	msr	BASEPRI, r0
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	b662      	cpsie	i
 800c694:	f7ff f9d0 	bl	800ba38 <vTaskSwitchContext>
 800c698:	f04f 0000 	mov.w	r0, #0
 800c69c:	f380 8811 	msr	BASEPRI, r0
 800c6a0:	bc09      	pop	{r0, r3}
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	6808      	ldr	r0, [r1, #0]
 800c6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6aa:	f01e 0f10 	tst.w	lr, #16
 800c6ae:	bf08      	it	eq
 800c6b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6b4:	f380 8809 	msr	PSP, r0
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop

0800c6c0 <pxCurrentTCBConst>:
 800c6c0:	20042294 	.word	0x20042294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop

0800c6c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d2:	b672      	cpsid	i
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	b662      	cpsie	i
 800c6e2:	607b      	str	r3, [r7, #4]
}
 800c6e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6e6:	f7ff f8eb 	bl	800b8c0 <xTaskIncrementTick>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6f0:	4b06      	ldr	r3, [pc, #24]	@ (800c70c <SysTick_Handler+0x44>)
 800c6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f383 8811 	msr	BASEPRI, r3
}
 800c702:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	e000ed04 	.word	0xe000ed04

0800c710 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c714:	4b0b      	ldr	r3, [pc, #44]	@ (800c744 <vPortSetupTimerInterrupt+0x34>)
 800c716:	2200      	movs	r2, #0
 800c718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c71a:	4b0b      	ldr	r3, [pc, #44]	@ (800c748 <vPortSetupTimerInterrupt+0x38>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c720:	4b0a      	ldr	r3, [pc, #40]	@ (800c74c <vPortSetupTimerInterrupt+0x3c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a0a      	ldr	r2, [pc, #40]	@ (800c750 <vPortSetupTimerInterrupt+0x40>)
 800c726:	fba2 2303 	umull	r2, r3, r2, r3
 800c72a:	099b      	lsrs	r3, r3, #6
 800c72c:	4a09      	ldr	r2, [pc, #36]	@ (800c754 <vPortSetupTimerInterrupt+0x44>)
 800c72e:	3b01      	subs	r3, #1
 800c730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c732:	4b04      	ldr	r3, [pc, #16]	@ (800c744 <vPortSetupTimerInterrupt+0x34>)
 800c734:	2207      	movs	r2, #7
 800c736:	601a      	str	r2, [r3, #0]
}
 800c738:	bf00      	nop
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	e000e010 	.word	0xe000e010
 800c748:	e000e018 	.word	0xe000e018
 800c74c:	20000000 	.word	0x20000000
 800c750:	10624dd3 	.word	0x10624dd3
 800c754:	e000e014 	.word	0xe000e014

0800c758 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c758:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c768 <vPortEnableVFP+0x10>
 800c75c:	6801      	ldr	r1, [r0, #0]
 800c75e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c762:	6001      	str	r1, [r0, #0]
 800c764:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c766:	bf00      	nop
 800c768:	e000ed88 	.word	0xe000ed88

0800c76c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c772:	f3ef 8305 	mrs	r3, IPSR
 800c776:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b0f      	cmp	r3, #15
 800c77c:	d917      	bls.n	800c7ae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c77e:	4a1a      	ldr	r2, [pc, #104]	@ (800c7e8 <vPortValidateInterruptPriority+0x7c>)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4413      	add	r3, r2
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c788:	4b18      	ldr	r3, [pc, #96]	@ (800c7ec <vPortValidateInterruptPriority+0x80>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	7afa      	ldrb	r2, [r7, #11]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d20d      	bcs.n	800c7ae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c796:	b672      	cpsid	i
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	b662      	cpsie	i
 800c7a6:	607b      	str	r3, [r7, #4]
}
 800c7a8:	bf00      	nop
 800c7aa:	bf00      	nop
 800c7ac:	e7fd      	b.n	800c7aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7ae:	4b10      	ldr	r3, [pc, #64]	@ (800c7f0 <vPortValidateInterruptPriority+0x84>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f4 <vPortValidateInterruptPriority+0x88>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d90d      	bls.n	800c7da <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c2:	b672      	cpsid	i
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	b662      	cpsie	i
 800c7d2:	603b      	str	r3, [r7, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop
 800c7d8:	e7fd      	b.n	800c7d6 <vPortValidateInterruptPriority+0x6a>
	}
 800c7da:	bf00      	nop
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	e000e3f0 	.word	0xe000e3f0
 800c7ec:	200423c0 	.word	0x200423c0
 800c7f0:	e000ed0c 	.word	0xe000ed0c
 800c7f4:	200423c4 	.word	0x200423c4

0800c7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b08a      	sub	sp, #40	@ 0x28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c800:	2300      	movs	r3, #0
 800c802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c804:	f7fe ff8c 	bl	800b720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c808:	4b5d      	ldr	r3, [pc, #372]	@ (800c980 <pvPortMalloc+0x188>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c810:	f000 f920 	bl	800ca54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c814:	4b5b      	ldr	r3, [pc, #364]	@ (800c984 <pvPortMalloc+0x18c>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4013      	ands	r3, r2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f040 8094 	bne.w	800c94a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d020      	beq.n	800c86a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c828:	2208      	movs	r2, #8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4413      	add	r3, r2
 800c82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b00      	cmp	r3, #0
 800c838:	d017      	beq.n	800c86a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f023 0307 	bic.w	r3, r3, #7
 800c840:	3308      	adds	r3, #8
 800c842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00d      	beq.n	800c86a <pvPortMalloc+0x72>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	b672      	cpsid	i
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	b662      	cpsie	i
 800c862:	617b      	str	r3, [r7, #20]
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop
 800c868:	e7fd      	b.n	800c866 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d06c      	beq.n	800c94a <pvPortMalloc+0x152>
 800c870:	4b45      	ldr	r3, [pc, #276]	@ (800c988 <pvPortMalloc+0x190>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	429a      	cmp	r2, r3
 800c878:	d867      	bhi.n	800c94a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c87a:	4b44      	ldr	r3, [pc, #272]	@ (800c98c <pvPortMalloc+0x194>)
 800c87c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c87e:	4b43      	ldr	r3, [pc, #268]	@ (800c98c <pvPortMalloc+0x194>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c884:	e004      	b.n	800c890 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	429a      	cmp	r2, r3
 800c898:	d903      	bls.n	800c8a2 <pvPortMalloc+0xaa>
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1f1      	bne.n	800c886 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8a2:	4b37      	ldr	r3, [pc, #220]	@ (800c980 <pvPortMalloc+0x188>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d04e      	beq.n	800c94a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	4413      	add	r3, r2
 800c8b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	1ad2      	subs	r2, r2, r3
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d922      	bls.n	800c914 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	f003 0307 	and.w	r3, r3, #7
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00d      	beq.n	800c8fc <pvPortMalloc+0x104>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e4:	b672      	cpsid	i
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	b662      	cpsie	i
 800c8f4:	613b      	str	r3, [r7, #16]
}
 800c8f6:	bf00      	nop
 800c8f8:	bf00      	nop
 800c8fa:	e7fd      	b.n	800c8f8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fe:	685a      	ldr	r2, [r3, #4]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	1ad2      	subs	r2, r2, r3
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c90e:	69b8      	ldr	r0, [r7, #24]
 800c910:	f000 f902 	bl	800cb18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c914:	4b1c      	ldr	r3, [pc, #112]	@ (800c988 <pvPortMalloc+0x190>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	4a1a      	ldr	r2, [pc, #104]	@ (800c988 <pvPortMalloc+0x190>)
 800c920:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c922:	4b19      	ldr	r3, [pc, #100]	@ (800c988 <pvPortMalloc+0x190>)
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	4b1a      	ldr	r3, [pc, #104]	@ (800c990 <pvPortMalloc+0x198>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d203      	bcs.n	800c936 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c92e:	4b16      	ldr	r3, [pc, #88]	@ (800c988 <pvPortMalloc+0x190>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a17      	ldr	r2, [pc, #92]	@ (800c990 <pvPortMalloc+0x198>)
 800c934:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c938:	685a      	ldr	r2, [r3, #4]
 800c93a:	4b12      	ldr	r3, [pc, #72]	@ (800c984 <pvPortMalloc+0x18c>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	431a      	orrs	r2, r3
 800c940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c942:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c94a:	f7fe fef7 	bl	800b73c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	f003 0307 	and.w	r3, r3, #7
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00d      	beq.n	800c974 <pvPortMalloc+0x17c>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95c:	b672      	cpsid	i
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	b662      	cpsie	i
 800c96c:	60fb      	str	r3, [r7, #12]
}
 800c96e:	bf00      	nop
 800c970:	bf00      	nop
 800c972:	e7fd      	b.n	800c970 <pvPortMalloc+0x178>
	return pvReturn;
 800c974:	69fb      	ldr	r3, [r7, #28]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3728      	adds	r7, #40	@ 0x28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20045fd0 	.word	0x20045fd0
 800c984:	20045fdc 	.word	0x20045fdc
 800c988:	20045fd4 	.word	0x20045fd4
 800c98c:	20045fc8 	.word	0x20045fc8
 800c990:	20045fd8 	.word	0x20045fd8

0800c994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d04e      	beq.n	800ca44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9a6:	2308      	movs	r3, #8
 800c9a8:	425b      	negs	r3, r3
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	4b24      	ldr	r3, [pc, #144]	@ (800ca4c <vPortFree+0xb8>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4013      	ands	r3, r2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10d      	bne.n	800c9de <vPortFree+0x4a>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c6:	b672      	cpsid	i
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	b662      	cpsie	i
 800c9d6:	60fb      	str	r3, [r7, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	e7fd      	b.n	800c9da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00d      	beq.n	800ca02 <vPortFree+0x6e>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ea:	b672      	cpsid	i
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	b662      	cpsie	i
 800c9fa:	60bb      	str	r3, [r7, #8]
}
 800c9fc:	bf00      	nop
 800c9fe:	bf00      	nop
 800ca00:	e7fd      	b.n	800c9fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	4b11      	ldr	r3, [pc, #68]	@ (800ca4c <vPortFree+0xb8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d019      	beq.n	800ca44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d115      	bne.n	800ca44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca4c <vPortFree+0xb8>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	43db      	mvns	r3, r3
 800ca22:	401a      	ands	r2, r3
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca28:	f7fe fe7a 	bl	800b720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	4b07      	ldr	r3, [pc, #28]	@ (800ca50 <vPortFree+0xbc>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4413      	add	r3, r2
 800ca36:	4a06      	ldr	r2, [pc, #24]	@ (800ca50 <vPortFree+0xbc>)
 800ca38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca3a:	6938      	ldr	r0, [r7, #16]
 800ca3c:	f000 f86c 	bl	800cb18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ca40:	f7fe fe7c 	bl	800b73c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca44:	bf00      	nop
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20045fdc 	.word	0x20045fdc
 800ca50:	20045fd4 	.word	0x20045fd4

0800ca54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca5a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ca5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca60:	4b27      	ldr	r3, [pc, #156]	@ (800cb00 <prvHeapInit+0xac>)
 800ca62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f003 0307 	and.w	r3, r3, #7
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00c      	beq.n	800ca88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3307      	adds	r3, #7
 800ca72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f023 0307 	bic.w	r3, r3, #7
 800ca7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	4a1f      	ldr	r2, [pc, #124]	@ (800cb00 <prvHeapInit+0xac>)
 800ca84:	4413      	add	r3, r2
 800ca86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca8c:	4a1d      	ldr	r2, [pc, #116]	@ (800cb04 <prvHeapInit+0xb0>)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca92:	4b1c      	ldr	r3, [pc, #112]	@ (800cb04 <prvHeapInit+0xb0>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800caa0:	2208      	movs	r2, #8
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	1a9b      	subs	r3, r3, r2
 800caa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 0307 	bic.w	r3, r3, #7
 800caae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4a15      	ldr	r2, [pc, #84]	@ (800cb08 <prvHeapInit+0xb4>)
 800cab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cab6:	4b14      	ldr	r3, [pc, #80]	@ (800cb08 <prvHeapInit+0xb4>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2200      	movs	r2, #0
 800cabc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cabe:	4b12      	ldr	r3, [pc, #72]	@ (800cb08 <prvHeapInit+0xb4>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	1ad2      	subs	r2, r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cad4:	4b0c      	ldr	r3, [pc, #48]	@ (800cb08 <prvHeapInit+0xb4>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	4a0a      	ldr	r2, [pc, #40]	@ (800cb0c <prvHeapInit+0xb8>)
 800cae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	4a09      	ldr	r2, [pc, #36]	@ (800cb10 <prvHeapInit+0xbc>)
 800caea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caec:	4b09      	ldr	r3, [pc, #36]	@ (800cb14 <prvHeapInit+0xc0>)
 800caee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800caf2:	601a      	str	r2, [r3, #0]
}
 800caf4:	bf00      	nop
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	200423c8 	.word	0x200423c8
 800cb04:	20045fc8 	.word	0x20045fc8
 800cb08:	20045fd0 	.word	0x20045fd0
 800cb0c:	20045fd8 	.word	0x20045fd8
 800cb10:	20045fd4 	.word	0x20045fd4
 800cb14:	20045fdc 	.word	0x20045fdc

0800cb18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb20:	4b28      	ldr	r3, [pc, #160]	@ (800cbc4 <prvInsertBlockIntoFreeList+0xac>)
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	e002      	b.n	800cb2c <prvInsertBlockIntoFreeList+0x14>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d8f7      	bhi.n	800cb26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	4413      	add	r3, r2
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d108      	bne.n	800cb5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	441a      	add	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	441a      	add	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d118      	bne.n	800cba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4b15      	ldr	r3, [pc, #84]	@ (800cbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d00d      	beq.n	800cb96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	441a      	add	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	e008      	b.n	800cba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb96:	4b0c      	ldr	r3, [pc, #48]	@ (800cbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	e003      	b.n	800cba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d002      	beq.n	800cbb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbb6:	bf00      	nop
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	20045fc8 	.word	0x20045fc8
 800cbc8:	20045fd0 	.word	0x20045fd0

0800cbcc <sbrk_aligned>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	4e0f      	ldr	r6, [pc, #60]	@ (800cc0c <sbrk_aligned+0x40>)
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	6831      	ldr	r1, [r6, #0]
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	b911      	cbnz	r1, 800cbde <sbrk_aligned+0x12>
 800cbd8:	f000 fb62 	bl	800d2a0 <_sbrk_r>
 800cbdc:	6030      	str	r0, [r6, #0]
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f000 fb5d 	bl	800d2a0 <_sbrk_r>
 800cbe6:	1c43      	adds	r3, r0, #1
 800cbe8:	d103      	bne.n	800cbf2 <sbrk_aligned+0x26>
 800cbea:	f04f 34ff 	mov.w	r4, #4294967295
 800cbee:	4620      	mov	r0, r4
 800cbf0:	bd70      	pop	{r4, r5, r6, pc}
 800cbf2:	1cc4      	adds	r4, r0, #3
 800cbf4:	f024 0403 	bic.w	r4, r4, #3
 800cbf8:	42a0      	cmp	r0, r4
 800cbfa:	d0f8      	beq.n	800cbee <sbrk_aligned+0x22>
 800cbfc:	1a21      	subs	r1, r4, r0
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f000 fb4e 	bl	800d2a0 <_sbrk_r>
 800cc04:	3001      	adds	r0, #1
 800cc06:	d1f2      	bne.n	800cbee <sbrk_aligned+0x22>
 800cc08:	e7ef      	b.n	800cbea <sbrk_aligned+0x1e>
 800cc0a:	bf00      	nop
 800cc0c:	20045fe0 	.word	0x20045fe0

0800cc10 <_malloc_r>:
 800cc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc14:	1ccd      	adds	r5, r1, #3
 800cc16:	f025 0503 	bic.w	r5, r5, #3
 800cc1a:	3508      	adds	r5, #8
 800cc1c:	2d0c      	cmp	r5, #12
 800cc1e:	bf38      	it	cc
 800cc20:	250c      	movcc	r5, #12
 800cc22:	2d00      	cmp	r5, #0
 800cc24:	4606      	mov	r6, r0
 800cc26:	db01      	blt.n	800cc2c <_malloc_r+0x1c>
 800cc28:	42a9      	cmp	r1, r5
 800cc2a:	d904      	bls.n	800cc36 <_malloc_r+0x26>
 800cc2c:	230c      	movs	r3, #12
 800cc2e:	6033      	str	r3, [r6, #0]
 800cc30:	2000      	movs	r0, #0
 800cc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd0c <_malloc_r+0xfc>
 800cc3a:	f000 f869 	bl	800cd10 <__malloc_lock>
 800cc3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc42:	461c      	mov	r4, r3
 800cc44:	bb44      	cbnz	r4, 800cc98 <_malloc_r+0x88>
 800cc46:	4629      	mov	r1, r5
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7ff ffbf 	bl	800cbcc <sbrk_aligned>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	4604      	mov	r4, r0
 800cc52:	d158      	bne.n	800cd06 <_malloc_r+0xf6>
 800cc54:	f8d8 4000 	ldr.w	r4, [r8]
 800cc58:	4627      	mov	r7, r4
 800cc5a:	2f00      	cmp	r7, #0
 800cc5c:	d143      	bne.n	800cce6 <_malloc_r+0xd6>
 800cc5e:	2c00      	cmp	r4, #0
 800cc60:	d04b      	beq.n	800ccfa <_malloc_r+0xea>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	4639      	mov	r1, r7
 800cc66:	4630      	mov	r0, r6
 800cc68:	eb04 0903 	add.w	r9, r4, r3
 800cc6c:	f000 fb18 	bl	800d2a0 <_sbrk_r>
 800cc70:	4581      	cmp	r9, r0
 800cc72:	d142      	bne.n	800ccfa <_malloc_r+0xea>
 800cc74:	6821      	ldr	r1, [r4, #0]
 800cc76:	1a6d      	subs	r5, r5, r1
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f7ff ffa6 	bl	800cbcc <sbrk_aligned>
 800cc80:	3001      	adds	r0, #1
 800cc82:	d03a      	beq.n	800ccfa <_malloc_r+0xea>
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	442b      	add	r3, r5
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	bb62      	cbnz	r2, 800ccec <_malloc_r+0xdc>
 800cc92:	f8c8 7000 	str.w	r7, [r8]
 800cc96:	e00f      	b.n	800ccb8 <_malloc_r+0xa8>
 800cc98:	6822      	ldr	r2, [r4, #0]
 800cc9a:	1b52      	subs	r2, r2, r5
 800cc9c:	d420      	bmi.n	800cce0 <_malloc_r+0xd0>
 800cc9e:	2a0b      	cmp	r2, #11
 800cca0:	d917      	bls.n	800ccd2 <_malloc_r+0xc2>
 800cca2:	1961      	adds	r1, r4, r5
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	6025      	str	r5, [r4, #0]
 800cca8:	bf18      	it	ne
 800ccaa:	6059      	strne	r1, [r3, #4]
 800ccac:	6863      	ldr	r3, [r4, #4]
 800ccae:	bf08      	it	eq
 800ccb0:	f8c8 1000 	streq.w	r1, [r8]
 800ccb4:	5162      	str	r2, [r4, r5]
 800ccb6:	604b      	str	r3, [r1, #4]
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f000 f82f 	bl	800cd1c <__malloc_unlock>
 800ccbe:	f104 000b 	add.w	r0, r4, #11
 800ccc2:	1d23      	adds	r3, r4, #4
 800ccc4:	f020 0007 	bic.w	r0, r0, #7
 800ccc8:	1ac2      	subs	r2, r0, r3
 800ccca:	bf1c      	itt	ne
 800cccc:	1a1b      	subne	r3, r3, r0
 800ccce:	50a3      	strne	r3, [r4, r2]
 800ccd0:	e7af      	b.n	800cc32 <_malloc_r+0x22>
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	42a3      	cmp	r3, r4
 800ccd6:	bf0c      	ite	eq
 800ccd8:	f8c8 2000 	streq.w	r2, [r8]
 800ccdc:	605a      	strne	r2, [r3, #4]
 800ccde:	e7eb      	b.n	800ccb8 <_malloc_r+0xa8>
 800cce0:	4623      	mov	r3, r4
 800cce2:	6864      	ldr	r4, [r4, #4]
 800cce4:	e7ae      	b.n	800cc44 <_malloc_r+0x34>
 800cce6:	463c      	mov	r4, r7
 800cce8:	687f      	ldr	r7, [r7, #4]
 800ccea:	e7b6      	b.n	800cc5a <_malloc_r+0x4a>
 800ccec:	461a      	mov	r2, r3
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	42a3      	cmp	r3, r4
 800ccf2:	d1fb      	bne.n	800ccec <_malloc_r+0xdc>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	6053      	str	r3, [r2, #4]
 800ccf8:	e7de      	b.n	800ccb8 <_malloc_r+0xa8>
 800ccfa:	230c      	movs	r3, #12
 800ccfc:	6033      	str	r3, [r6, #0]
 800ccfe:	4630      	mov	r0, r6
 800cd00:	f000 f80c 	bl	800cd1c <__malloc_unlock>
 800cd04:	e794      	b.n	800cc30 <_malloc_r+0x20>
 800cd06:	6005      	str	r5, [r0, #0]
 800cd08:	e7d6      	b.n	800ccb8 <_malloc_r+0xa8>
 800cd0a:	bf00      	nop
 800cd0c:	20045fe4 	.word	0x20045fe4

0800cd10 <__malloc_lock>:
 800cd10:	4801      	ldr	r0, [pc, #4]	@ (800cd18 <__malloc_lock+0x8>)
 800cd12:	f000 bb12 	b.w	800d33a <__retarget_lock_acquire_recursive>
 800cd16:	bf00      	nop
 800cd18:	20046128 	.word	0x20046128

0800cd1c <__malloc_unlock>:
 800cd1c:	4801      	ldr	r0, [pc, #4]	@ (800cd24 <__malloc_unlock+0x8>)
 800cd1e:	f000 bb0d 	b.w	800d33c <__retarget_lock_release_recursive>
 800cd22:	bf00      	nop
 800cd24:	20046128 	.word	0x20046128

0800cd28 <std>:
 800cd28:	2300      	movs	r3, #0
 800cd2a:	b510      	push	{r4, lr}
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd36:	6083      	str	r3, [r0, #8]
 800cd38:	8181      	strh	r1, [r0, #12]
 800cd3a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd3c:	81c2      	strh	r2, [r0, #14]
 800cd3e:	6183      	str	r3, [r0, #24]
 800cd40:	4619      	mov	r1, r3
 800cd42:	2208      	movs	r2, #8
 800cd44:	305c      	adds	r0, #92	@ 0x5c
 800cd46:	f000 fa19 	bl	800d17c <memset>
 800cd4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd80 <std+0x58>)
 800cd4c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd4e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd84 <std+0x5c>)
 800cd50:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd52:	4b0d      	ldr	r3, [pc, #52]	@ (800cd88 <std+0x60>)
 800cd54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd56:	4b0d      	ldr	r3, [pc, #52]	@ (800cd8c <std+0x64>)
 800cd58:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd90 <std+0x68>)
 800cd5c:	6224      	str	r4, [r4, #32]
 800cd5e:	429c      	cmp	r4, r3
 800cd60:	d006      	beq.n	800cd70 <std+0x48>
 800cd62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd66:	4294      	cmp	r4, r2
 800cd68:	d002      	beq.n	800cd70 <std+0x48>
 800cd6a:	33d0      	adds	r3, #208	@ 0xd0
 800cd6c:	429c      	cmp	r4, r3
 800cd6e:	d105      	bne.n	800cd7c <std+0x54>
 800cd70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd78:	f000 bade 	b.w	800d338 <__retarget_lock_init_recursive>
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	bf00      	nop
 800cd80:	0800cfcd 	.word	0x0800cfcd
 800cd84:	0800cfef 	.word	0x0800cfef
 800cd88:	0800d027 	.word	0x0800d027
 800cd8c:	0800d04b 	.word	0x0800d04b
 800cd90:	20045fe8 	.word	0x20045fe8

0800cd94 <stdio_exit_handler>:
 800cd94:	4a02      	ldr	r2, [pc, #8]	@ (800cda0 <stdio_exit_handler+0xc>)
 800cd96:	4903      	ldr	r1, [pc, #12]	@ (800cda4 <stdio_exit_handler+0x10>)
 800cd98:	4803      	ldr	r0, [pc, #12]	@ (800cda8 <stdio_exit_handler+0x14>)
 800cd9a:	f000 b869 	b.w	800ce70 <_fwalk_sglue>
 800cd9e:	bf00      	nop
 800cda0:	20000010 	.word	0x20000010
 800cda4:	0800dd49 	.word	0x0800dd49
 800cda8:	20000020 	.word	0x20000020

0800cdac <cleanup_stdio>:
 800cdac:	6841      	ldr	r1, [r0, #4]
 800cdae:	4b0c      	ldr	r3, [pc, #48]	@ (800cde0 <cleanup_stdio+0x34>)
 800cdb0:	4299      	cmp	r1, r3
 800cdb2:	b510      	push	{r4, lr}
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	d001      	beq.n	800cdbc <cleanup_stdio+0x10>
 800cdb8:	f000 ffc6 	bl	800dd48 <_fflush_r>
 800cdbc:	68a1      	ldr	r1, [r4, #8]
 800cdbe:	4b09      	ldr	r3, [pc, #36]	@ (800cde4 <cleanup_stdio+0x38>)
 800cdc0:	4299      	cmp	r1, r3
 800cdc2:	d002      	beq.n	800cdca <cleanup_stdio+0x1e>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 ffbf 	bl	800dd48 <_fflush_r>
 800cdca:	68e1      	ldr	r1, [r4, #12]
 800cdcc:	4b06      	ldr	r3, [pc, #24]	@ (800cde8 <cleanup_stdio+0x3c>)
 800cdce:	4299      	cmp	r1, r3
 800cdd0:	d004      	beq.n	800cddc <cleanup_stdio+0x30>
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd8:	f000 bfb6 	b.w	800dd48 <_fflush_r>
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	bf00      	nop
 800cde0:	20045fe8 	.word	0x20045fe8
 800cde4:	20046050 	.word	0x20046050
 800cde8:	200460b8 	.word	0x200460b8

0800cdec <global_stdio_init.part.0>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	4b0b      	ldr	r3, [pc, #44]	@ (800ce1c <global_stdio_init.part.0+0x30>)
 800cdf0:	4c0b      	ldr	r4, [pc, #44]	@ (800ce20 <global_stdio_init.part.0+0x34>)
 800cdf2:	4a0c      	ldr	r2, [pc, #48]	@ (800ce24 <global_stdio_init.part.0+0x38>)
 800cdf4:	601a      	str	r2, [r3, #0]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2104      	movs	r1, #4
 800cdfc:	f7ff ff94 	bl	800cd28 <std>
 800ce00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce04:	2201      	movs	r2, #1
 800ce06:	2109      	movs	r1, #9
 800ce08:	f7ff ff8e 	bl	800cd28 <std>
 800ce0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce10:	2202      	movs	r2, #2
 800ce12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce16:	2112      	movs	r1, #18
 800ce18:	f7ff bf86 	b.w	800cd28 <std>
 800ce1c:	20046120 	.word	0x20046120
 800ce20:	20045fe8 	.word	0x20045fe8
 800ce24:	0800cd95 	.word	0x0800cd95

0800ce28 <__sfp_lock_acquire>:
 800ce28:	4801      	ldr	r0, [pc, #4]	@ (800ce30 <__sfp_lock_acquire+0x8>)
 800ce2a:	f000 ba86 	b.w	800d33a <__retarget_lock_acquire_recursive>
 800ce2e:	bf00      	nop
 800ce30:	20046129 	.word	0x20046129

0800ce34 <__sfp_lock_release>:
 800ce34:	4801      	ldr	r0, [pc, #4]	@ (800ce3c <__sfp_lock_release+0x8>)
 800ce36:	f000 ba81 	b.w	800d33c <__retarget_lock_release_recursive>
 800ce3a:	bf00      	nop
 800ce3c:	20046129 	.word	0x20046129

0800ce40 <__sinit>:
 800ce40:	b510      	push	{r4, lr}
 800ce42:	4604      	mov	r4, r0
 800ce44:	f7ff fff0 	bl	800ce28 <__sfp_lock_acquire>
 800ce48:	6a23      	ldr	r3, [r4, #32]
 800ce4a:	b11b      	cbz	r3, 800ce54 <__sinit+0x14>
 800ce4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce50:	f7ff bff0 	b.w	800ce34 <__sfp_lock_release>
 800ce54:	4b04      	ldr	r3, [pc, #16]	@ (800ce68 <__sinit+0x28>)
 800ce56:	6223      	str	r3, [r4, #32]
 800ce58:	4b04      	ldr	r3, [pc, #16]	@ (800ce6c <__sinit+0x2c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1f5      	bne.n	800ce4c <__sinit+0xc>
 800ce60:	f7ff ffc4 	bl	800cdec <global_stdio_init.part.0>
 800ce64:	e7f2      	b.n	800ce4c <__sinit+0xc>
 800ce66:	bf00      	nop
 800ce68:	0800cdad 	.word	0x0800cdad
 800ce6c:	20046120 	.word	0x20046120

0800ce70 <_fwalk_sglue>:
 800ce70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce74:	4607      	mov	r7, r0
 800ce76:	4688      	mov	r8, r1
 800ce78:	4614      	mov	r4, r2
 800ce7a:	2600      	movs	r6, #0
 800ce7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce80:	f1b9 0901 	subs.w	r9, r9, #1
 800ce84:	d505      	bpl.n	800ce92 <_fwalk_sglue+0x22>
 800ce86:	6824      	ldr	r4, [r4, #0]
 800ce88:	2c00      	cmp	r4, #0
 800ce8a:	d1f7      	bne.n	800ce7c <_fwalk_sglue+0xc>
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce92:	89ab      	ldrh	r3, [r5, #12]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d907      	bls.n	800cea8 <_fwalk_sglue+0x38>
 800ce98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	d003      	beq.n	800cea8 <_fwalk_sglue+0x38>
 800cea0:	4629      	mov	r1, r5
 800cea2:	4638      	mov	r0, r7
 800cea4:	47c0      	blx	r8
 800cea6:	4306      	orrs	r6, r0
 800cea8:	3568      	adds	r5, #104	@ 0x68
 800ceaa:	e7e9      	b.n	800ce80 <_fwalk_sglue+0x10>

0800ceac <iprintf>:
 800ceac:	b40f      	push	{r0, r1, r2, r3}
 800ceae:	b507      	push	{r0, r1, r2, lr}
 800ceb0:	4906      	ldr	r1, [pc, #24]	@ (800cecc <iprintf+0x20>)
 800ceb2:	ab04      	add	r3, sp, #16
 800ceb4:	6808      	ldr	r0, [r1, #0]
 800ceb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceba:	6881      	ldr	r1, [r0, #8]
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	f000 fc19 	bl	800d6f4 <_vfiprintf_r>
 800cec2:	b003      	add	sp, #12
 800cec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec8:	b004      	add	sp, #16
 800ceca:	4770      	bx	lr
 800cecc:	2000001c 	.word	0x2000001c

0800ced0 <_puts_r>:
 800ced0:	6a03      	ldr	r3, [r0, #32]
 800ced2:	b570      	push	{r4, r5, r6, lr}
 800ced4:	6884      	ldr	r4, [r0, #8]
 800ced6:	4605      	mov	r5, r0
 800ced8:	460e      	mov	r6, r1
 800ceda:	b90b      	cbnz	r3, 800cee0 <_puts_r+0x10>
 800cedc:	f7ff ffb0 	bl	800ce40 <__sinit>
 800cee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cee2:	07db      	lsls	r3, r3, #31
 800cee4:	d405      	bmi.n	800cef2 <_puts_r+0x22>
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	0598      	lsls	r0, r3, #22
 800ceea:	d402      	bmi.n	800cef2 <_puts_r+0x22>
 800ceec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceee:	f000 fa24 	bl	800d33a <__retarget_lock_acquire_recursive>
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	0719      	lsls	r1, r3, #28
 800cef6:	d502      	bpl.n	800cefe <_puts_r+0x2e>
 800cef8:	6923      	ldr	r3, [r4, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d135      	bne.n	800cf6a <_puts_r+0x9a>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	f000 f8e5 	bl	800d0d0 <__swsetup_r>
 800cf06:	b380      	cbz	r0, 800cf6a <_puts_r+0x9a>
 800cf08:	f04f 35ff 	mov.w	r5, #4294967295
 800cf0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf0e:	07da      	lsls	r2, r3, #31
 800cf10:	d405      	bmi.n	800cf1e <_puts_r+0x4e>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	059b      	lsls	r3, r3, #22
 800cf16:	d402      	bmi.n	800cf1e <_puts_r+0x4e>
 800cf18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf1a:	f000 fa0f 	bl	800d33c <__retarget_lock_release_recursive>
 800cf1e:	4628      	mov	r0, r5
 800cf20:	bd70      	pop	{r4, r5, r6, pc}
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	da04      	bge.n	800cf30 <_puts_r+0x60>
 800cf26:	69a2      	ldr	r2, [r4, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	dc17      	bgt.n	800cf5c <_puts_r+0x8c>
 800cf2c:	290a      	cmp	r1, #10
 800cf2e:	d015      	beq.n	800cf5c <_puts_r+0x8c>
 800cf30:	6823      	ldr	r3, [r4, #0]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	6022      	str	r2, [r4, #0]
 800cf36:	7019      	strb	r1, [r3, #0]
 800cf38:	68a3      	ldr	r3, [r4, #8]
 800cf3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	60a3      	str	r3, [r4, #8]
 800cf42:	2900      	cmp	r1, #0
 800cf44:	d1ed      	bne.n	800cf22 <_puts_r+0x52>
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da11      	bge.n	800cf6e <_puts_r+0x9e>
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	210a      	movs	r1, #10
 800cf4e:	4628      	mov	r0, r5
 800cf50:	f000 f87f 	bl	800d052 <__swbuf_r>
 800cf54:	3001      	adds	r0, #1
 800cf56:	d0d7      	beq.n	800cf08 <_puts_r+0x38>
 800cf58:	250a      	movs	r5, #10
 800cf5a:	e7d7      	b.n	800cf0c <_puts_r+0x3c>
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f000 f877 	bl	800d052 <__swbuf_r>
 800cf64:	3001      	adds	r0, #1
 800cf66:	d1e7      	bne.n	800cf38 <_puts_r+0x68>
 800cf68:	e7ce      	b.n	800cf08 <_puts_r+0x38>
 800cf6a:	3e01      	subs	r6, #1
 800cf6c:	e7e4      	b.n	800cf38 <_puts_r+0x68>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	6022      	str	r2, [r4, #0]
 800cf74:	220a      	movs	r2, #10
 800cf76:	701a      	strb	r2, [r3, #0]
 800cf78:	e7ee      	b.n	800cf58 <_puts_r+0x88>
	...

0800cf7c <puts>:
 800cf7c:	4b02      	ldr	r3, [pc, #8]	@ (800cf88 <puts+0xc>)
 800cf7e:	4601      	mov	r1, r0
 800cf80:	6818      	ldr	r0, [r3, #0]
 800cf82:	f7ff bfa5 	b.w	800ced0 <_puts_r>
 800cf86:	bf00      	nop
 800cf88:	2000001c 	.word	0x2000001c

0800cf8c <siprintf>:
 800cf8c:	b40e      	push	{r1, r2, r3}
 800cf8e:	b500      	push	{lr}
 800cf90:	b09c      	sub	sp, #112	@ 0x70
 800cf92:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf94:	9002      	str	r0, [sp, #8]
 800cf96:	9006      	str	r0, [sp, #24]
 800cf98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf9c:	4809      	ldr	r0, [pc, #36]	@ (800cfc4 <siprintf+0x38>)
 800cf9e:	9107      	str	r1, [sp, #28]
 800cfa0:	9104      	str	r1, [sp, #16]
 800cfa2:	4909      	ldr	r1, [pc, #36]	@ (800cfc8 <siprintf+0x3c>)
 800cfa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa8:	9105      	str	r1, [sp, #20]
 800cfaa:	6800      	ldr	r0, [r0, #0]
 800cfac:	9301      	str	r3, [sp, #4]
 800cfae:	a902      	add	r1, sp, #8
 800cfb0:	f000 fa7a 	bl	800d4a8 <_svfiprintf_r>
 800cfb4:	9b02      	ldr	r3, [sp, #8]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	b01c      	add	sp, #112	@ 0x70
 800cfbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfc0:	b003      	add	sp, #12
 800cfc2:	4770      	bx	lr
 800cfc4:	2000001c 	.word	0x2000001c
 800cfc8:	ffff0208 	.word	0xffff0208

0800cfcc <__sread>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	460c      	mov	r4, r1
 800cfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd4:	f000 f952 	bl	800d27c <_read_r>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	bfab      	itete	ge
 800cfdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfde:	89a3      	ldrhlt	r3, [r4, #12]
 800cfe0:	181b      	addge	r3, r3, r0
 800cfe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cfe6:	bfac      	ite	ge
 800cfe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cfea:	81a3      	strhlt	r3, [r4, #12]
 800cfec:	bd10      	pop	{r4, pc}

0800cfee <__swrite>:
 800cfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff2:	461f      	mov	r7, r3
 800cff4:	898b      	ldrh	r3, [r1, #12]
 800cff6:	05db      	lsls	r3, r3, #23
 800cff8:	4605      	mov	r5, r0
 800cffa:	460c      	mov	r4, r1
 800cffc:	4616      	mov	r6, r2
 800cffe:	d505      	bpl.n	800d00c <__swrite+0x1e>
 800d000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d004:	2302      	movs	r3, #2
 800d006:	2200      	movs	r2, #0
 800d008:	f000 f926 	bl	800d258 <_lseek_r>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	4632      	mov	r2, r6
 800d01a:	463b      	mov	r3, r7
 800d01c:	4628      	mov	r0, r5
 800d01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d022:	f000 b94d 	b.w	800d2c0 <_write_r>

0800d026 <__sseek>:
 800d026:	b510      	push	{r4, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02e:	f000 f913 	bl	800d258 <_lseek_r>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	bf15      	itete	ne
 800d038:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d03a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d03e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d042:	81a3      	strheq	r3, [r4, #12]
 800d044:	bf18      	it	ne
 800d046:	81a3      	strhne	r3, [r4, #12]
 800d048:	bd10      	pop	{r4, pc}

0800d04a <__sclose>:
 800d04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04e:	f000 b89d 	b.w	800d18c <_close_r>

0800d052 <__swbuf_r>:
 800d052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d054:	460e      	mov	r6, r1
 800d056:	4614      	mov	r4, r2
 800d058:	4605      	mov	r5, r0
 800d05a:	b118      	cbz	r0, 800d064 <__swbuf_r+0x12>
 800d05c:	6a03      	ldr	r3, [r0, #32]
 800d05e:	b90b      	cbnz	r3, 800d064 <__swbuf_r+0x12>
 800d060:	f7ff feee 	bl	800ce40 <__sinit>
 800d064:	69a3      	ldr	r3, [r4, #24]
 800d066:	60a3      	str	r3, [r4, #8]
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	071a      	lsls	r2, r3, #28
 800d06c:	d501      	bpl.n	800d072 <__swbuf_r+0x20>
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	b943      	cbnz	r3, 800d084 <__swbuf_r+0x32>
 800d072:	4621      	mov	r1, r4
 800d074:	4628      	mov	r0, r5
 800d076:	f000 f82b 	bl	800d0d0 <__swsetup_r>
 800d07a:	b118      	cbz	r0, 800d084 <__swbuf_r+0x32>
 800d07c:	f04f 37ff 	mov.w	r7, #4294967295
 800d080:	4638      	mov	r0, r7
 800d082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	6922      	ldr	r2, [r4, #16]
 800d088:	1a98      	subs	r0, r3, r2
 800d08a:	6963      	ldr	r3, [r4, #20]
 800d08c:	b2f6      	uxtb	r6, r6
 800d08e:	4283      	cmp	r3, r0
 800d090:	4637      	mov	r7, r6
 800d092:	dc05      	bgt.n	800d0a0 <__swbuf_r+0x4e>
 800d094:	4621      	mov	r1, r4
 800d096:	4628      	mov	r0, r5
 800d098:	f000 fe56 	bl	800dd48 <_fflush_r>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d1ed      	bne.n	800d07c <__swbuf_r+0x2a>
 800d0a0:	68a3      	ldr	r3, [r4, #8]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	60a3      	str	r3, [r4, #8]
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	1c5a      	adds	r2, r3, #1
 800d0aa:	6022      	str	r2, [r4, #0]
 800d0ac:	701e      	strb	r6, [r3, #0]
 800d0ae:	6962      	ldr	r2, [r4, #20]
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d004      	beq.n	800d0c0 <__swbuf_r+0x6e>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	07db      	lsls	r3, r3, #31
 800d0ba:	d5e1      	bpl.n	800d080 <__swbuf_r+0x2e>
 800d0bc:	2e0a      	cmp	r6, #10
 800d0be:	d1df      	bne.n	800d080 <__swbuf_r+0x2e>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 fe40 	bl	800dd48 <_fflush_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0d9      	beq.n	800d080 <__swbuf_r+0x2e>
 800d0cc:	e7d6      	b.n	800d07c <__swbuf_r+0x2a>
	...

0800d0d0 <__swsetup_r>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	4b29      	ldr	r3, [pc, #164]	@ (800d178 <__swsetup_r+0xa8>)
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	6818      	ldr	r0, [r3, #0]
 800d0d8:	460c      	mov	r4, r1
 800d0da:	b118      	cbz	r0, 800d0e4 <__swsetup_r+0x14>
 800d0dc:	6a03      	ldr	r3, [r0, #32]
 800d0de:	b90b      	cbnz	r3, 800d0e4 <__swsetup_r+0x14>
 800d0e0:	f7ff feae 	bl	800ce40 <__sinit>
 800d0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e8:	0719      	lsls	r1, r3, #28
 800d0ea:	d422      	bmi.n	800d132 <__swsetup_r+0x62>
 800d0ec:	06da      	lsls	r2, r3, #27
 800d0ee:	d407      	bmi.n	800d100 <__swsetup_r+0x30>
 800d0f0:	2209      	movs	r2, #9
 800d0f2:	602a      	str	r2, [r5, #0]
 800d0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0f8:	81a3      	strh	r3, [r4, #12]
 800d0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fe:	e033      	b.n	800d168 <__swsetup_r+0x98>
 800d100:	0758      	lsls	r0, r3, #29
 800d102:	d512      	bpl.n	800d12a <__swsetup_r+0x5a>
 800d104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d106:	b141      	cbz	r1, 800d11a <__swsetup_r+0x4a>
 800d108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d10c:	4299      	cmp	r1, r3
 800d10e:	d002      	beq.n	800d116 <__swsetup_r+0x46>
 800d110:	4628      	mov	r0, r5
 800d112:	f000 f923 	bl	800d35c <_free_r>
 800d116:	2300      	movs	r3, #0
 800d118:	6363      	str	r3, [r4, #52]	@ 0x34
 800d11a:	89a3      	ldrh	r3, [r4, #12]
 800d11c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d120:	81a3      	strh	r3, [r4, #12]
 800d122:	2300      	movs	r3, #0
 800d124:	6063      	str	r3, [r4, #4]
 800d126:	6923      	ldr	r3, [r4, #16]
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	f043 0308 	orr.w	r3, r3, #8
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	6923      	ldr	r3, [r4, #16]
 800d134:	b94b      	cbnz	r3, 800d14a <__swsetup_r+0x7a>
 800d136:	89a3      	ldrh	r3, [r4, #12]
 800d138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d140:	d003      	beq.n	800d14a <__swsetup_r+0x7a>
 800d142:	4621      	mov	r1, r4
 800d144:	4628      	mov	r0, r5
 800d146:	f000 fe4d 	bl	800dde4 <__smakebuf_r>
 800d14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14e:	f013 0201 	ands.w	r2, r3, #1
 800d152:	d00a      	beq.n	800d16a <__swsetup_r+0x9a>
 800d154:	2200      	movs	r2, #0
 800d156:	60a2      	str	r2, [r4, #8]
 800d158:	6962      	ldr	r2, [r4, #20]
 800d15a:	4252      	negs	r2, r2
 800d15c:	61a2      	str	r2, [r4, #24]
 800d15e:	6922      	ldr	r2, [r4, #16]
 800d160:	b942      	cbnz	r2, 800d174 <__swsetup_r+0xa4>
 800d162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d166:	d1c5      	bne.n	800d0f4 <__swsetup_r+0x24>
 800d168:	bd38      	pop	{r3, r4, r5, pc}
 800d16a:	0799      	lsls	r1, r3, #30
 800d16c:	bf58      	it	pl
 800d16e:	6962      	ldrpl	r2, [r4, #20]
 800d170:	60a2      	str	r2, [r4, #8]
 800d172:	e7f4      	b.n	800d15e <__swsetup_r+0x8e>
 800d174:	2000      	movs	r0, #0
 800d176:	e7f7      	b.n	800d168 <__swsetup_r+0x98>
 800d178:	2000001c 	.word	0x2000001c

0800d17c <memset>:
 800d17c:	4402      	add	r2, r0
 800d17e:	4603      	mov	r3, r0
 800d180:	4293      	cmp	r3, r2
 800d182:	d100      	bne.n	800d186 <memset+0xa>
 800d184:	4770      	bx	lr
 800d186:	f803 1b01 	strb.w	r1, [r3], #1
 800d18a:	e7f9      	b.n	800d180 <memset+0x4>

0800d18c <_close_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d06      	ldr	r5, [pc, #24]	@ (800d1a8 <_close_r+0x1c>)
 800d190:	2300      	movs	r3, #0
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	602b      	str	r3, [r5, #0]
 800d198:	f7f4 fc99 	bl	8001ace <_close>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_close_r+0x1a>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_close_r+0x1a>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	20046124 	.word	0x20046124

0800d1ac <_reclaim_reent>:
 800d1ac:	4b29      	ldr	r3, [pc, #164]	@ (800d254 <_reclaim_reent+0xa8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4283      	cmp	r3, r0
 800d1b2:	b570      	push	{r4, r5, r6, lr}
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	d04b      	beq.n	800d250 <_reclaim_reent+0xa4>
 800d1b8:	69c3      	ldr	r3, [r0, #28]
 800d1ba:	b1ab      	cbz	r3, 800d1e8 <_reclaim_reent+0x3c>
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	b16b      	cbz	r3, 800d1dc <_reclaim_reent+0x30>
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	69e3      	ldr	r3, [r4, #28]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	5959      	ldr	r1, [r3, r5]
 800d1c8:	2900      	cmp	r1, #0
 800d1ca:	d13b      	bne.n	800d244 <_reclaim_reent+0x98>
 800d1cc:	3504      	adds	r5, #4
 800d1ce:	2d80      	cmp	r5, #128	@ 0x80
 800d1d0:	d1f7      	bne.n	800d1c2 <_reclaim_reent+0x16>
 800d1d2:	69e3      	ldr	r3, [r4, #28]
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	68d9      	ldr	r1, [r3, #12]
 800d1d8:	f000 f8c0 	bl	800d35c <_free_r>
 800d1dc:	69e3      	ldr	r3, [r4, #28]
 800d1de:	6819      	ldr	r1, [r3, #0]
 800d1e0:	b111      	cbz	r1, 800d1e8 <_reclaim_reent+0x3c>
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 f8ba 	bl	800d35c <_free_r>
 800d1e8:	6961      	ldr	r1, [r4, #20]
 800d1ea:	b111      	cbz	r1, 800d1f2 <_reclaim_reent+0x46>
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 f8b5 	bl	800d35c <_free_r>
 800d1f2:	69e1      	ldr	r1, [r4, #28]
 800d1f4:	b111      	cbz	r1, 800d1fc <_reclaim_reent+0x50>
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f000 f8b0 	bl	800d35c <_free_r>
 800d1fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d1fe:	b111      	cbz	r1, 800d206 <_reclaim_reent+0x5a>
 800d200:	4620      	mov	r0, r4
 800d202:	f000 f8ab 	bl	800d35c <_free_r>
 800d206:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d208:	b111      	cbz	r1, 800d210 <_reclaim_reent+0x64>
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 f8a6 	bl	800d35c <_free_r>
 800d210:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d212:	b111      	cbz	r1, 800d21a <_reclaim_reent+0x6e>
 800d214:	4620      	mov	r0, r4
 800d216:	f000 f8a1 	bl	800d35c <_free_r>
 800d21a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d21c:	b111      	cbz	r1, 800d224 <_reclaim_reent+0x78>
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 f89c 	bl	800d35c <_free_r>
 800d224:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d226:	b111      	cbz	r1, 800d22e <_reclaim_reent+0x82>
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 f897 	bl	800d35c <_free_r>
 800d22e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d230:	b111      	cbz	r1, 800d238 <_reclaim_reent+0x8c>
 800d232:	4620      	mov	r0, r4
 800d234:	f000 f892 	bl	800d35c <_free_r>
 800d238:	6a23      	ldr	r3, [r4, #32]
 800d23a:	b14b      	cbz	r3, 800d250 <_reclaim_reent+0xa4>
 800d23c:	4620      	mov	r0, r4
 800d23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d242:	4718      	bx	r3
 800d244:	680e      	ldr	r6, [r1, #0]
 800d246:	4620      	mov	r0, r4
 800d248:	f000 f888 	bl	800d35c <_free_r>
 800d24c:	4631      	mov	r1, r6
 800d24e:	e7bb      	b.n	800d1c8 <_reclaim_reent+0x1c>
 800d250:	bd70      	pop	{r4, r5, r6, pc}
 800d252:	bf00      	nop
 800d254:	2000001c 	.word	0x2000001c

0800d258 <_lseek_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d07      	ldr	r5, [pc, #28]	@ (800d278 <_lseek_r+0x20>)
 800d25c:	4604      	mov	r4, r0
 800d25e:	4608      	mov	r0, r1
 800d260:	4611      	mov	r1, r2
 800d262:	2200      	movs	r2, #0
 800d264:	602a      	str	r2, [r5, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	f7f4 fc58 	bl	8001b1c <_lseek>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_lseek_r+0x1e>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_lseek_r+0x1e>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	20046124 	.word	0x20046124

0800d27c <_read_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4d07      	ldr	r5, [pc, #28]	@ (800d29c <_read_r+0x20>)
 800d280:	4604      	mov	r4, r0
 800d282:	4608      	mov	r0, r1
 800d284:	4611      	mov	r1, r2
 800d286:	2200      	movs	r2, #0
 800d288:	602a      	str	r2, [r5, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	f7f4 fc02 	bl	8001a94 <_read>
 800d290:	1c43      	adds	r3, r0, #1
 800d292:	d102      	bne.n	800d29a <_read_r+0x1e>
 800d294:	682b      	ldr	r3, [r5, #0]
 800d296:	b103      	cbz	r3, 800d29a <_read_r+0x1e>
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	bd38      	pop	{r3, r4, r5, pc}
 800d29c:	20046124 	.word	0x20046124

0800d2a0 <_sbrk_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4d06      	ldr	r5, [pc, #24]	@ (800d2bc <_sbrk_r+0x1c>)
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	602b      	str	r3, [r5, #0]
 800d2ac:	f7f4 fc44 	bl	8001b38 <_sbrk>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d102      	bne.n	800d2ba <_sbrk_r+0x1a>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	b103      	cbz	r3, 800d2ba <_sbrk_r+0x1a>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	20046124 	.word	0x20046124

0800d2c0 <_write_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4d07      	ldr	r5, [pc, #28]	@ (800d2e0 <_write_r+0x20>)
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	4608      	mov	r0, r1
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	602a      	str	r2, [r5, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	f7f3 ff49 	bl	8001166 <_write>
 800d2d4:	1c43      	adds	r3, r0, #1
 800d2d6:	d102      	bne.n	800d2de <_write_r+0x1e>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	b103      	cbz	r3, 800d2de <_write_r+0x1e>
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	bd38      	pop	{r3, r4, r5, pc}
 800d2e0:	20046124 	.word	0x20046124

0800d2e4 <__errno>:
 800d2e4:	4b01      	ldr	r3, [pc, #4]	@ (800d2ec <__errno+0x8>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	2000001c 	.word	0x2000001c

0800d2f0 <__libc_init_array>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d328 <__libc_init_array+0x38>)
 800d2f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d32c <__libc_init_array+0x3c>)
 800d2f6:	1b64      	subs	r4, r4, r5
 800d2f8:	10a4      	asrs	r4, r4, #2
 800d2fa:	2600      	movs	r6, #0
 800d2fc:	42a6      	cmp	r6, r4
 800d2fe:	d109      	bne.n	800d314 <__libc_init_array+0x24>
 800d300:	4d0b      	ldr	r5, [pc, #44]	@ (800d330 <__libc_init_array+0x40>)
 800d302:	4c0c      	ldr	r4, [pc, #48]	@ (800d334 <__libc_init_array+0x44>)
 800d304:	f000 fe1c 	bl	800df40 <_init>
 800d308:	1b64      	subs	r4, r4, r5
 800d30a:	10a4      	asrs	r4, r4, #2
 800d30c:	2600      	movs	r6, #0
 800d30e:	42a6      	cmp	r6, r4
 800d310:	d105      	bne.n	800d31e <__libc_init_array+0x2e>
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	f855 3b04 	ldr.w	r3, [r5], #4
 800d318:	4798      	blx	r3
 800d31a:	3601      	adds	r6, #1
 800d31c:	e7ee      	b.n	800d2fc <__libc_init_array+0xc>
 800d31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d322:	4798      	blx	r3
 800d324:	3601      	adds	r6, #1
 800d326:	e7f2      	b.n	800d30e <__libc_init_array+0x1e>
 800d328:	0800e68c 	.word	0x0800e68c
 800d32c:	0800e68c 	.word	0x0800e68c
 800d330:	0800e68c 	.word	0x0800e68c
 800d334:	0800e690 	.word	0x0800e690

0800d338 <__retarget_lock_init_recursive>:
 800d338:	4770      	bx	lr

0800d33a <__retarget_lock_acquire_recursive>:
 800d33a:	4770      	bx	lr

0800d33c <__retarget_lock_release_recursive>:
 800d33c:	4770      	bx	lr

0800d33e <memcpy>:
 800d33e:	440a      	add	r2, r1
 800d340:	4291      	cmp	r1, r2
 800d342:	f100 33ff 	add.w	r3, r0, #4294967295
 800d346:	d100      	bne.n	800d34a <memcpy+0xc>
 800d348:	4770      	bx	lr
 800d34a:	b510      	push	{r4, lr}
 800d34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d350:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d354:	4291      	cmp	r1, r2
 800d356:	d1f9      	bne.n	800d34c <memcpy+0xe>
 800d358:	bd10      	pop	{r4, pc}
	...

0800d35c <_free_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4605      	mov	r5, r0
 800d360:	2900      	cmp	r1, #0
 800d362:	d041      	beq.n	800d3e8 <_free_r+0x8c>
 800d364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d368:	1f0c      	subs	r4, r1, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bfb8      	it	lt
 800d36e:	18e4      	addlt	r4, r4, r3
 800d370:	f7ff fcce 	bl	800cd10 <__malloc_lock>
 800d374:	4a1d      	ldr	r2, [pc, #116]	@ (800d3ec <_free_r+0x90>)
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	b933      	cbnz	r3, 800d388 <_free_r+0x2c>
 800d37a:	6063      	str	r3, [r4, #4]
 800d37c:	6014      	str	r4, [r2, #0]
 800d37e:	4628      	mov	r0, r5
 800d380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d384:	f7ff bcca 	b.w	800cd1c <__malloc_unlock>
 800d388:	42a3      	cmp	r3, r4
 800d38a:	d908      	bls.n	800d39e <_free_r+0x42>
 800d38c:	6820      	ldr	r0, [r4, #0]
 800d38e:	1821      	adds	r1, r4, r0
 800d390:	428b      	cmp	r3, r1
 800d392:	bf01      	itttt	eq
 800d394:	6819      	ldreq	r1, [r3, #0]
 800d396:	685b      	ldreq	r3, [r3, #4]
 800d398:	1809      	addeq	r1, r1, r0
 800d39a:	6021      	streq	r1, [r4, #0]
 800d39c:	e7ed      	b.n	800d37a <_free_r+0x1e>
 800d39e:	461a      	mov	r2, r3
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	b10b      	cbz	r3, 800d3a8 <_free_r+0x4c>
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d9fa      	bls.n	800d39e <_free_r+0x42>
 800d3a8:	6811      	ldr	r1, [r2, #0]
 800d3aa:	1850      	adds	r0, r2, r1
 800d3ac:	42a0      	cmp	r0, r4
 800d3ae:	d10b      	bne.n	800d3c8 <_free_r+0x6c>
 800d3b0:	6820      	ldr	r0, [r4, #0]
 800d3b2:	4401      	add	r1, r0
 800d3b4:	1850      	adds	r0, r2, r1
 800d3b6:	4283      	cmp	r3, r0
 800d3b8:	6011      	str	r1, [r2, #0]
 800d3ba:	d1e0      	bne.n	800d37e <_free_r+0x22>
 800d3bc:	6818      	ldr	r0, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	6053      	str	r3, [r2, #4]
 800d3c2:	4408      	add	r0, r1
 800d3c4:	6010      	str	r0, [r2, #0]
 800d3c6:	e7da      	b.n	800d37e <_free_r+0x22>
 800d3c8:	d902      	bls.n	800d3d0 <_free_r+0x74>
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	602b      	str	r3, [r5, #0]
 800d3ce:	e7d6      	b.n	800d37e <_free_r+0x22>
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	1821      	adds	r1, r4, r0
 800d3d4:	428b      	cmp	r3, r1
 800d3d6:	bf04      	itt	eq
 800d3d8:	6819      	ldreq	r1, [r3, #0]
 800d3da:	685b      	ldreq	r3, [r3, #4]
 800d3dc:	6063      	str	r3, [r4, #4]
 800d3de:	bf04      	itt	eq
 800d3e0:	1809      	addeq	r1, r1, r0
 800d3e2:	6021      	streq	r1, [r4, #0]
 800d3e4:	6054      	str	r4, [r2, #4]
 800d3e6:	e7ca      	b.n	800d37e <_free_r+0x22>
 800d3e8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20045fe4 	.word	0x20045fe4

0800d3f0 <__ssputs_r>:
 800d3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	688e      	ldr	r6, [r1, #8]
 800d3f6:	461f      	mov	r7, r3
 800d3f8:	42be      	cmp	r6, r7
 800d3fa:	680b      	ldr	r3, [r1, #0]
 800d3fc:	4682      	mov	sl, r0
 800d3fe:	460c      	mov	r4, r1
 800d400:	4690      	mov	r8, r2
 800d402:	d82d      	bhi.n	800d460 <__ssputs_r+0x70>
 800d404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d408:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d40c:	d026      	beq.n	800d45c <__ssputs_r+0x6c>
 800d40e:	6965      	ldr	r5, [r4, #20]
 800d410:	6909      	ldr	r1, [r1, #16]
 800d412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d416:	eba3 0901 	sub.w	r9, r3, r1
 800d41a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d41e:	1c7b      	adds	r3, r7, #1
 800d420:	444b      	add	r3, r9
 800d422:	106d      	asrs	r5, r5, #1
 800d424:	429d      	cmp	r5, r3
 800d426:	bf38      	it	cc
 800d428:	461d      	movcc	r5, r3
 800d42a:	0553      	lsls	r3, r2, #21
 800d42c:	d527      	bpl.n	800d47e <__ssputs_r+0x8e>
 800d42e:	4629      	mov	r1, r5
 800d430:	f7ff fbee 	bl	800cc10 <_malloc_r>
 800d434:	4606      	mov	r6, r0
 800d436:	b360      	cbz	r0, 800d492 <__ssputs_r+0xa2>
 800d438:	6921      	ldr	r1, [r4, #16]
 800d43a:	464a      	mov	r2, r9
 800d43c:	f7ff ff7f 	bl	800d33e <memcpy>
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d44a:	81a3      	strh	r3, [r4, #12]
 800d44c:	6126      	str	r6, [r4, #16]
 800d44e:	6165      	str	r5, [r4, #20]
 800d450:	444e      	add	r6, r9
 800d452:	eba5 0509 	sub.w	r5, r5, r9
 800d456:	6026      	str	r6, [r4, #0]
 800d458:	60a5      	str	r5, [r4, #8]
 800d45a:	463e      	mov	r6, r7
 800d45c:	42be      	cmp	r6, r7
 800d45e:	d900      	bls.n	800d462 <__ssputs_r+0x72>
 800d460:	463e      	mov	r6, r7
 800d462:	6820      	ldr	r0, [r4, #0]
 800d464:	4632      	mov	r2, r6
 800d466:	4641      	mov	r1, r8
 800d468:	f000 fcf8 	bl	800de5c <memmove>
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	1b9b      	subs	r3, r3, r6
 800d470:	60a3      	str	r3, [r4, #8]
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	4433      	add	r3, r6
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	2000      	movs	r0, #0
 800d47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47e:	462a      	mov	r2, r5
 800d480:	f000 fd28 	bl	800ded4 <_realloc_r>
 800d484:	4606      	mov	r6, r0
 800d486:	2800      	cmp	r0, #0
 800d488:	d1e0      	bne.n	800d44c <__ssputs_r+0x5c>
 800d48a:	6921      	ldr	r1, [r4, #16]
 800d48c:	4650      	mov	r0, sl
 800d48e:	f7ff ff65 	bl	800d35c <_free_r>
 800d492:	230c      	movs	r3, #12
 800d494:	f8ca 3000 	str.w	r3, [sl]
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d49e:	81a3      	strh	r3, [r4, #12]
 800d4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a4:	e7e9      	b.n	800d47a <__ssputs_r+0x8a>
	...

0800d4a8 <_svfiprintf_r>:
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	4698      	mov	r8, r3
 800d4ae:	898b      	ldrh	r3, [r1, #12]
 800d4b0:	061b      	lsls	r3, r3, #24
 800d4b2:	b09d      	sub	sp, #116	@ 0x74
 800d4b4:	4607      	mov	r7, r0
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	4614      	mov	r4, r2
 800d4ba:	d510      	bpl.n	800d4de <_svfiprintf_r+0x36>
 800d4bc:	690b      	ldr	r3, [r1, #16]
 800d4be:	b973      	cbnz	r3, 800d4de <_svfiprintf_r+0x36>
 800d4c0:	2140      	movs	r1, #64	@ 0x40
 800d4c2:	f7ff fba5 	bl	800cc10 <_malloc_r>
 800d4c6:	6028      	str	r0, [r5, #0]
 800d4c8:	6128      	str	r0, [r5, #16]
 800d4ca:	b930      	cbnz	r0, 800d4da <_svfiprintf_r+0x32>
 800d4cc:	230c      	movs	r3, #12
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	b01d      	add	sp, #116	@ 0x74
 800d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4da:	2340      	movs	r3, #64	@ 0x40
 800d4dc:	616b      	str	r3, [r5, #20]
 800d4de:	2300      	movs	r3, #0
 800d4e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4e2:	2320      	movs	r3, #32
 800d4e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ec:	2330      	movs	r3, #48	@ 0x30
 800d4ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d68c <_svfiprintf_r+0x1e4>
 800d4f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4f6:	f04f 0901 	mov.w	r9, #1
 800d4fa:	4623      	mov	r3, r4
 800d4fc:	469a      	mov	sl, r3
 800d4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d502:	b10a      	cbz	r2, 800d508 <_svfiprintf_r+0x60>
 800d504:	2a25      	cmp	r2, #37	@ 0x25
 800d506:	d1f9      	bne.n	800d4fc <_svfiprintf_r+0x54>
 800d508:	ebba 0b04 	subs.w	fp, sl, r4
 800d50c:	d00b      	beq.n	800d526 <_svfiprintf_r+0x7e>
 800d50e:	465b      	mov	r3, fp
 800d510:	4622      	mov	r2, r4
 800d512:	4629      	mov	r1, r5
 800d514:	4638      	mov	r0, r7
 800d516:	f7ff ff6b 	bl	800d3f0 <__ssputs_r>
 800d51a:	3001      	adds	r0, #1
 800d51c:	f000 80a7 	beq.w	800d66e <_svfiprintf_r+0x1c6>
 800d520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d522:	445a      	add	r2, fp
 800d524:	9209      	str	r2, [sp, #36]	@ 0x24
 800d526:	f89a 3000 	ldrb.w	r3, [sl]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 809f 	beq.w	800d66e <_svfiprintf_r+0x1c6>
 800d530:	2300      	movs	r3, #0
 800d532:	f04f 32ff 	mov.w	r2, #4294967295
 800d536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d53a:	f10a 0a01 	add.w	sl, sl, #1
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	9307      	str	r3, [sp, #28]
 800d542:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d546:	931a      	str	r3, [sp, #104]	@ 0x68
 800d548:	4654      	mov	r4, sl
 800d54a:	2205      	movs	r2, #5
 800d54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d550:	484e      	ldr	r0, [pc, #312]	@ (800d68c <_svfiprintf_r+0x1e4>)
 800d552:	f7f2 fe65 	bl	8000220 <memchr>
 800d556:	9a04      	ldr	r2, [sp, #16]
 800d558:	b9d8      	cbnz	r0, 800d592 <_svfiprintf_r+0xea>
 800d55a:	06d0      	lsls	r0, r2, #27
 800d55c:	bf44      	itt	mi
 800d55e:	2320      	movmi	r3, #32
 800d560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d564:	0711      	lsls	r1, r2, #28
 800d566:	bf44      	itt	mi
 800d568:	232b      	movmi	r3, #43	@ 0x2b
 800d56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d56e:	f89a 3000 	ldrb.w	r3, [sl]
 800d572:	2b2a      	cmp	r3, #42	@ 0x2a
 800d574:	d015      	beq.n	800d5a2 <_svfiprintf_r+0xfa>
 800d576:	9a07      	ldr	r2, [sp, #28]
 800d578:	4654      	mov	r4, sl
 800d57a:	2000      	movs	r0, #0
 800d57c:	f04f 0c0a 	mov.w	ip, #10
 800d580:	4621      	mov	r1, r4
 800d582:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d586:	3b30      	subs	r3, #48	@ 0x30
 800d588:	2b09      	cmp	r3, #9
 800d58a:	d94b      	bls.n	800d624 <_svfiprintf_r+0x17c>
 800d58c:	b1b0      	cbz	r0, 800d5bc <_svfiprintf_r+0x114>
 800d58e:	9207      	str	r2, [sp, #28]
 800d590:	e014      	b.n	800d5bc <_svfiprintf_r+0x114>
 800d592:	eba0 0308 	sub.w	r3, r0, r8
 800d596:	fa09 f303 	lsl.w	r3, r9, r3
 800d59a:	4313      	orrs	r3, r2
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	46a2      	mov	sl, r4
 800d5a0:	e7d2      	b.n	800d548 <_svfiprintf_r+0xa0>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	1d19      	adds	r1, r3, #4
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	9103      	str	r1, [sp, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfbb      	ittet	lt
 800d5ae:	425b      	neglt	r3, r3
 800d5b0:	f042 0202 	orrlt.w	r2, r2, #2
 800d5b4:	9307      	strge	r3, [sp, #28]
 800d5b6:	9307      	strlt	r3, [sp, #28]
 800d5b8:	bfb8      	it	lt
 800d5ba:	9204      	strlt	r2, [sp, #16]
 800d5bc:	7823      	ldrb	r3, [r4, #0]
 800d5be:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5c0:	d10a      	bne.n	800d5d8 <_svfiprintf_r+0x130>
 800d5c2:	7863      	ldrb	r3, [r4, #1]
 800d5c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5c6:	d132      	bne.n	800d62e <_svfiprintf_r+0x186>
 800d5c8:	9b03      	ldr	r3, [sp, #12]
 800d5ca:	1d1a      	adds	r2, r3, #4
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	9203      	str	r2, [sp, #12]
 800d5d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5d4:	3402      	adds	r4, #2
 800d5d6:	9305      	str	r3, [sp, #20]
 800d5d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d69c <_svfiprintf_r+0x1f4>
 800d5dc:	7821      	ldrb	r1, [r4, #0]
 800d5de:	2203      	movs	r2, #3
 800d5e0:	4650      	mov	r0, sl
 800d5e2:	f7f2 fe1d 	bl	8000220 <memchr>
 800d5e6:	b138      	cbz	r0, 800d5f8 <_svfiprintf_r+0x150>
 800d5e8:	9b04      	ldr	r3, [sp, #16]
 800d5ea:	eba0 000a 	sub.w	r0, r0, sl
 800d5ee:	2240      	movs	r2, #64	@ 0x40
 800d5f0:	4082      	lsls	r2, r0
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	3401      	adds	r4, #1
 800d5f6:	9304      	str	r3, [sp, #16]
 800d5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5fc:	4824      	ldr	r0, [pc, #144]	@ (800d690 <_svfiprintf_r+0x1e8>)
 800d5fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d602:	2206      	movs	r2, #6
 800d604:	f7f2 fe0c 	bl	8000220 <memchr>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d036      	beq.n	800d67a <_svfiprintf_r+0x1d2>
 800d60c:	4b21      	ldr	r3, [pc, #132]	@ (800d694 <_svfiprintf_r+0x1ec>)
 800d60e:	bb1b      	cbnz	r3, 800d658 <_svfiprintf_r+0x1b0>
 800d610:	9b03      	ldr	r3, [sp, #12]
 800d612:	3307      	adds	r3, #7
 800d614:	f023 0307 	bic.w	r3, r3, #7
 800d618:	3308      	adds	r3, #8
 800d61a:	9303      	str	r3, [sp, #12]
 800d61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d61e:	4433      	add	r3, r6
 800d620:	9309      	str	r3, [sp, #36]	@ 0x24
 800d622:	e76a      	b.n	800d4fa <_svfiprintf_r+0x52>
 800d624:	fb0c 3202 	mla	r2, ip, r2, r3
 800d628:	460c      	mov	r4, r1
 800d62a:	2001      	movs	r0, #1
 800d62c:	e7a8      	b.n	800d580 <_svfiprintf_r+0xd8>
 800d62e:	2300      	movs	r3, #0
 800d630:	3401      	adds	r4, #1
 800d632:	9305      	str	r3, [sp, #20]
 800d634:	4619      	mov	r1, r3
 800d636:	f04f 0c0a 	mov.w	ip, #10
 800d63a:	4620      	mov	r0, r4
 800d63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d640:	3a30      	subs	r2, #48	@ 0x30
 800d642:	2a09      	cmp	r2, #9
 800d644:	d903      	bls.n	800d64e <_svfiprintf_r+0x1a6>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0c6      	beq.n	800d5d8 <_svfiprintf_r+0x130>
 800d64a:	9105      	str	r1, [sp, #20]
 800d64c:	e7c4      	b.n	800d5d8 <_svfiprintf_r+0x130>
 800d64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d652:	4604      	mov	r4, r0
 800d654:	2301      	movs	r3, #1
 800d656:	e7f0      	b.n	800d63a <_svfiprintf_r+0x192>
 800d658:	ab03      	add	r3, sp, #12
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	462a      	mov	r2, r5
 800d65e:	4b0e      	ldr	r3, [pc, #56]	@ (800d698 <_svfiprintf_r+0x1f0>)
 800d660:	a904      	add	r1, sp, #16
 800d662:	4638      	mov	r0, r7
 800d664:	f3af 8000 	nop.w
 800d668:	1c42      	adds	r2, r0, #1
 800d66a:	4606      	mov	r6, r0
 800d66c:	d1d6      	bne.n	800d61c <_svfiprintf_r+0x174>
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	065b      	lsls	r3, r3, #25
 800d672:	f53f af2d 	bmi.w	800d4d0 <_svfiprintf_r+0x28>
 800d676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d678:	e72c      	b.n	800d4d4 <_svfiprintf_r+0x2c>
 800d67a:	ab03      	add	r3, sp, #12
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	462a      	mov	r2, r5
 800d680:	4b05      	ldr	r3, [pc, #20]	@ (800d698 <_svfiprintf_r+0x1f0>)
 800d682:	a904      	add	r1, sp, #16
 800d684:	4638      	mov	r0, r7
 800d686:	f000 f9bb 	bl	800da00 <_printf_i>
 800d68a:	e7ed      	b.n	800d668 <_svfiprintf_r+0x1c0>
 800d68c:	0800e650 	.word	0x0800e650
 800d690:	0800e65a 	.word	0x0800e65a
 800d694:	00000000 	.word	0x00000000
 800d698:	0800d3f1 	.word	0x0800d3f1
 800d69c:	0800e656 	.word	0x0800e656

0800d6a0 <__sfputc_r>:
 800d6a0:	6893      	ldr	r3, [r2, #8]
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	b410      	push	{r4}
 800d6a8:	6093      	str	r3, [r2, #8]
 800d6aa:	da08      	bge.n	800d6be <__sfputc_r+0x1e>
 800d6ac:	6994      	ldr	r4, [r2, #24]
 800d6ae:	42a3      	cmp	r3, r4
 800d6b0:	db01      	blt.n	800d6b6 <__sfputc_r+0x16>
 800d6b2:	290a      	cmp	r1, #10
 800d6b4:	d103      	bne.n	800d6be <__sfputc_r+0x1e>
 800d6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ba:	f7ff bcca 	b.w	800d052 <__swbuf_r>
 800d6be:	6813      	ldr	r3, [r2, #0]
 800d6c0:	1c58      	adds	r0, r3, #1
 800d6c2:	6010      	str	r0, [r2, #0]
 800d6c4:	7019      	strb	r1, [r3, #0]
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <__sfputs_r>:
 800d6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	460f      	mov	r7, r1
 800d6d4:	4614      	mov	r4, r2
 800d6d6:	18d5      	adds	r5, r2, r3
 800d6d8:	42ac      	cmp	r4, r5
 800d6da:	d101      	bne.n	800d6e0 <__sfputs_r+0x12>
 800d6dc:	2000      	movs	r0, #0
 800d6de:	e007      	b.n	800d6f0 <__sfputs_r+0x22>
 800d6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e4:	463a      	mov	r2, r7
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	f7ff ffda 	bl	800d6a0 <__sfputc_r>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d1f3      	bne.n	800d6d8 <__sfputs_r+0xa>
 800d6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6f4 <_vfiprintf_r>:
 800d6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	b09d      	sub	sp, #116	@ 0x74
 800d6fc:	4614      	mov	r4, r2
 800d6fe:	4698      	mov	r8, r3
 800d700:	4606      	mov	r6, r0
 800d702:	b118      	cbz	r0, 800d70c <_vfiprintf_r+0x18>
 800d704:	6a03      	ldr	r3, [r0, #32]
 800d706:	b90b      	cbnz	r3, 800d70c <_vfiprintf_r+0x18>
 800d708:	f7ff fb9a 	bl	800ce40 <__sinit>
 800d70c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d70e:	07d9      	lsls	r1, r3, #31
 800d710:	d405      	bmi.n	800d71e <_vfiprintf_r+0x2a>
 800d712:	89ab      	ldrh	r3, [r5, #12]
 800d714:	059a      	lsls	r2, r3, #22
 800d716:	d402      	bmi.n	800d71e <_vfiprintf_r+0x2a>
 800d718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d71a:	f7ff fe0e 	bl	800d33a <__retarget_lock_acquire_recursive>
 800d71e:	89ab      	ldrh	r3, [r5, #12]
 800d720:	071b      	lsls	r3, r3, #28
 800d722:	d501      	bpl.n	800d728 <_vfiprintf_r+0x34>
 800d724:	692b      	ldr	r3, [r5, #16]
 800d726:	b99b      	cbnz	r3, 800d750 <_vfiprintf_r+0x5c>
 800d728:	4629      	mov	r1, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff fcd0 	bl	800d0d0 <__swsetup_r>
 800d730:	b170      	cbz	r0, 800d750 <_vfiprintf_r+0x5c>
 800d732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d734:	07dc      	lsls	r4, r3, #31
 800d736:	d504      	bpl.n	800d742 <_vfiprintf_r+0x4e>
 800d738:	f04f 30ff 	mov.w	r0, #4294967295
 800d73c:	b01d      	add	sp, #116	@ 0x74
 800d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d742:	89ab      	ldrh	r3, [r5, #12]
 800d744:	0598      	lsls	r0, r3, #22
 800d746:	d4f7      	bmi.n	800d738 <_vfiprintf_r+0x44>
 800d748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d74a:	f7ff fdf7 	bl	800d33c <__retarget_lock_release_recursive>
 800d74e:	e7f3      	b.n	800d738 <_vfiprintf_r+0x44>
 800d750:	2300      	movs	r3, #0
 800d752:	9309      	str	r3, [sp, #36]	@ 0x24
 800d754:	2320      	movs	r3, #32
 800d756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d75e:	2330      	movs	r3, #48	@ 0x30
 800d760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d910 <_vfiprintf_r+0x21c>
 800d764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d768:	f04f 0901 	mov.w	r9, #1
 800d76c:	4623      	mov	r3, r4
 800d76e:	469a      	mov	sl, r3
 800d770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d774:	b10a      	cbz	r2, 800d77a <_vfiprintf_r+0x86>
 800d776:	2a25      	cmp	r2, #37	@ 0x25
 800d778:	d1f9      	bne.n	800d76e <_vfiprintf_r+0x7a>
 800d77a:	ebba 0b04 	subs.w	fp, sl, r4
 800d77e:	d00b      	beq.n	800d798 <_vfiprintf_r+0xa4>
 800d780:	465b      	mov	r3, fp
 800d782:	4622      	mov	r2, r4
 800d784:	4629      	mov	r1, r5
 800d786:	4630      	mov	r0, r6
 800d788:	f7ff ffa1 	bl	800d6ce <__sfputs_r>
 800d78c:	3001      	adds	r0, #1
 800d78e:	f000 80a7 	beq.w	800d8e0 <_vfiprintf_r+0x1ec>
 800d792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d794:	445a      	add	r2, fp
 800d796:	9209      	str	r2, [sp, #36]	@ 0x24
 800d798:	f89a 3000 	ldrb.w	r3, [sl]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 809f 	beq.w	800d8e0 <_vfiprintf_r+0x1ec>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ac:	f10a 0a01 	add.w	sl, sl, #1
 800d7b0:	9304      	str	r3, [sp, #16]
 800d7b2:	9307      	str	r3, [sp, #28]
 800d7b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7ba:	4654      	mov	r4, sl
 800d7bc:	2205      	movs	r2, #5
 800d7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c2:	4853      	ldr	r0, [pc, #332]	@ (800d910 <_vfiprintf_r+0x21c>)
 800d7c4:	f7f2 fd2c 	bl	8000220 <memchr>
 800d7c8:	9a04      	ldr	r2, [sp, #16]
 800d7ca:	b9d8      	cbnz	r0, 800d804 <_vfiprintf_r+0x110>
 800d7cc:	06d1      	lsls	r1, r2, #27
 800d7ce:	bf44      	itt	mi
 800d7d0:	2320      	movmi	r3, #32
 800d7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7d6:	0713      	lsls	r3, r2, #28
 800d7d8:	bf44      	itt	mi
 800d7da:	232b      	movmi	r3, #43	@ 0x2b
 800d7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7e6:	d015      	beq.n	800d814 <_vfiprintf_r+0x120>
 800d7e8:	9a07      	ldr	r2, [sp, #28]
 800d7ea:	4654      	mov	r4, sl
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	f04f 0c0a 	mov.w	ip, #10
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7f8:	3b30      	subs	r3, #48	@ 0x30
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	d94b      	bls.n	800d896 <_vfiprintf_r+0x1a2>
 800d7fe:	b1b0      	cbz	r0, 800d82e <_vfiprintf_r+0x13a>
 800d800:	9207      	str	r2, [sp, #28]
 800d802:	e014      	b.n	800d82e <_vfiprintf_r+0x13a>
 800d804:	eba0 0308 	sub.w	r3, r0, r8
 800d808:	fa09 f303 	lsl.w	r3, r9, r3
 800d80c:	4313      	orrs	r3, r2
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	46a2      	mov	sl, r4
 800d812:	e7d2      	b.n	800d7ba <_vfiprintf_r+0xc6>
 800d814:	9b03      	ldr	r3, [sp, #12]
 800d816:	1d19      	adds	r1, r3, #4
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	9103      	str	r1, [sp, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	bfbb      	ittet	lt
 800d820:	425b      	neglt	r3, r3
 800d822:	f042 0202 	orrlt.w	r2, r2, #2
 800d826:	9307      	strge	r3, [sp, #28]
 800d828:	9307      	strlt	r3, [sp, #28]
 800d82a:	bfb8      	it	lt
 800d82c:	9204      	strlt	r2, [sp, #16]
 800d82e:	7823      	ldrb	r3, [r4, #0]
 800d830:	2b2e      	cmp	r3, #46	@ 0x2e
 800d832:	d10a      	bne.n	800d84a <_vfiprintf_r+0x156>
 800d834:	7863      	ldrb	r3, [r4, #1]
 800d836:	2b2a      	cmp	r3, #42	@ 0x2a
 800d838:	d132      	bne.n	800d8a0 <_vfiprintf_r+0x1ac>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	1d1a      	adds	r2, r3, #4
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	9203      	str	r2, [sp, #12]
 800d842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d846:	3402      	adds	r4, #2
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d920 <_vfiprintf_r+0x22c>
 800d84e:	7821      	ldrb	r1, [r4, #0]
 800d850:	2203      	movs	r2, #3
 800d852:	4650      	mov	r0, sl
 800d854:	f7f2 fce4 	bl	8000220 <memchr>
 800d858:	b138      	cbz	r0, 800d86a <_vfiprintf_r+0x176>
 800d85a:	9b04      	ldr	r3, [sp, #16]
 800d85c:	eba0 000a 	sub.w	r0, r0, sl
 800d860:	2240      	movs	r2, #64	@ 0x40
 800d862:	4082      	lsls	r2, r0
 800d864:	4313      	orrs	r3, r2
 800d866:	3401      	adds	r4, #1
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86e:	4829      	ldr	r0, [pc, #164]	@ (800d914 <_vfiprintf_r+0x220>)
 800d870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d874:	2206      	movs	r2, #6
 800d876:	f7f2 fcd3 	bl	8000220 <memchr>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d03f      	beq.n	800d8fe <_vfiprintf_r+0x20a>
 800d87e:	4b26      	ldr	r3, [pc, #152]	@ (800d918 <_vfiprintf_r+0x224>)
 800d880:	bb1b      	cbnz	r3, 800d8ca <_vfiprintf_r+0x1d6>
 800d882:	9b03      	ldr	r3, [sp, #12]
 800d884:	3307      	adds	r3, #7
 800d886:	f023 0307 	bic.w	r3, r3, #7
 800d88a:	3308      	adds	r3, #8
 800d88c:	9303      	str	r3, [sp, #12]
 800d88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d890:	443b      	add	r3, r7
 800d892:	9309      	str	r3, [sp, #36]	@ 0x24
 800d894:	e76a      	b.n	800d76c <_vfiprintf_r+0x78>
 800d896:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89a:	460c      	mov	r4, r1
 800d89c:	2001      	movs	r0, #1
 800d89e:	e7a8      	b.n	800d7f2 <_vfiprintf_r+0xfe>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	3401      	adds	r4, #1
 800d8a4:	9305      	str	r3, [sp, #20]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f04f 0c0a 	mov.w	ip, #10
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b2:	3a30      	subs	r2, #48	@ 0x30
 800d8b4:	2a09      	cmp	r2, #9
 800d8b6:	d903      	bls.n	800d8c0 <_vfiprintf_r+0x1cc>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0c6      	beq.n	800d84a <_vfiprintf_r+0x156>
 800d8bc:	9105      	str	r1, [sp, #20]
 800d8be:	e7c4      	b.n	800d84a <_vfiprintf_r+0x156>
 800d8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e7f0      	b.n	800d8ac <_vfiprintf_r+0x1b8>
 800d8ca:	ab03      	add	r3, sp, #12
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	462a      	mov	r2, r5
 800d8d0:	4b12      	ldr	r3, [pc, #72]	@ (800d91c <_vfiprintf_r+0x228>)
 800d8d2:	a904      	add	r1, sp, #16
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f3af 8000 	nop.w
 800d8da:	4607      	mov	r7, r0
 800d8dc:	1c78      	adds	r0, r7, #1
 800d8de:	d1d6      	bne.n	800d88e <_vfiprintf_r+0x19a>
 800d8e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8e2:	07d9      	lsls	r1, r3, #31
 800d8e4:	d405      	bmi.n	800d8f2 <_vfiprintf_r+0x1fe>
 800d8e6:	89ab      	ldrh	r3, [r5, #12]
 800d8e8:	059a      	lsls	r2, r3, #22
 800d8ea:	d402      	bmi.n	800d8f2 <_vfiprintf_r+0x1fe>
 800d8ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8ee:	f7ff fd25 	bl	800d33c <__retarget_lock_release_recursive>
 800d8f2:	89ab      	ldrh	r3, [r5, #12]
 800d8f4:	065b      	lsls	r3, r3, #25
 800d8f6:	f53f af1f 	bmi.w	800d738 <_vfiprintf_r+0x44>
 800d8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8fc:	e71e      	b.n	800d73c <_vfiprintf_r+0x48>
 800d8fe:	ab03      	add	r3, sp, #12
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	462a      	mov	r2, r5
 800d904:	4b05      	ldr	r3, [pc, #20]	@ (800d91c <_vfiprintf_r+0x228>)
 800d906:	a904      	add	r1, sp, #16
 800d908:	4630      	mov	r0, r6
 800d90a:	f000 f879 	bl	800da00 <_printf_i>
 800d90e:	e7e4      	b.n	800d8da <_vfiprintf_r+0x1e6>
 800d910:	0800e650 	.word	0x0800e650
 800d914:	0800e65a 	.word	0x0800e65a
 800d918:	00000000 	.word	0x00000000
 800d91c:	0800d6cf 	.word	0x0800d6cf
 800d920:	0800e656 	.word	0x0800e656

0800d924 <_printf_common>:
 800d924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d928:	4616      	mov	r6, r2
 800d92a:	4698      	mov	r8, r3
 800d92c:	688a      	ldr	r2, [r1, #8]
 800d92e:	690b      	ldr	r3, [r1, #16]
 800d930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d934:	4293      	cmp	r3, r2
 800d936:	bfb8      	it	lt
 800d938:	4613      	movlt	r3, r2
 800d93a:	6033      	str	r3, [r6, #0]
 800d93c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d940:	4607      	mov	r7, r0
 800d942:	460c      	mov	r4, r1
 800d944:	b10a      	cbz	r2, 800d94a <_printf_common+0x26>
 800d946:	3301      	adds	r3, #1
 800d948:	6033      	str	r3, [r6, #0]
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	0699      	lsls	r1, r3, #26
 800d94e:	bf42      	ittt	mi
 800d950:	6833      	ldrmi	r3, [r6, #0]
 800d952:	3302      	addmi	r3, #2
 800d954:	6033      	strmi	r3, [r6, #0]
 800d956:	6825      	ldr	r5, [r4, #0]
 800d958:	f015 0506 	ands.w	r5, r5, #6
 800d95c:	d106      	bne.n	800d96c <_printf_common+0x48>
 800d95e:	f104 0a19 	add.w	sl, r4, #25
 800d962:	68e3      	ldr	r3, [r4, #12]
 800d964:	6832      	ldr	r2, [r6, #0]
 800d966:	1a9b      	subs	r3, r3, r2
 800d968:	42ab      	cmp	r3, r5
 800d96a:	dc26      	bgt.n	800d9ba <_printf_common+0x96>
 800d96c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d970:	6822      	ldr	r2, [r4, #0]
 800d972:	3b00      	subs	r3, #0
 800d974:	bf18      	it	ne
 800d976:	2301      	movne	r3, #1
 800d978:	0692      	lsls	r2, r2, #26
 800d97a:	d42b      	bmi.n	800d9d4 <_printf_common+0xb0>
 800d97c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d980:	4641      	mov	r1, r8
 800d982:	4638      	mov	r0, r7
 800d984:	47c8      	blx	r9
 800d986:	3001      	adds	r0, #1
 800d988:	d01e      	beq.n	800d9c8 <_printf_common+0xa4>
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	6922      	ldr	r2, [r4, #16]
 800d98e:	f003 0306 	and.w	r3, r3, #6
 800d992:	2b04      	cmp	r3, #4
 800d994:	bf02      	ittt	eq
 800d996:	68e5      	ldreq	r5, [r4, #12]
 800d998:	6833      	ldreq	r3, [r6, #0]
 800d99a:	1aed      	subeq	r5, r5, r3
 800d99c:	68a3      	ldr	r3, [r4, #8]
 800d99e:	bf0c      	ite	eq
 800d9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9a4:	2500      	movne	r5, #0
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	bfc4      	itt	gt
 800d9aa:	1a9b      	subgt	r3, r3, r2
 800d9ac:	18ed      	addgt	r5, r5, r3
 800d9ae:	2600      	movs	r6, #0
 800d9b0:	341a      	adds	r4, #26
 800d9b2:	42b5      	cmp	r5, r6
 800d9b4:	d11a      	bne.n	800d9ec <_printf_common+0xc8>
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	e008      	b.n	800d9cc <_printf_common+0xa8>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	4652      	mov	r2, sl
 800d9be:	4641      	mov	r1, r8
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	47c8      	blx	r9
 800d9c4:	3001      	adds	r0, #1
 800d9c6:	d103      	bne.n	800d9d0 <_printf_common+0xac>
 800d9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d0:	3501      	adds	r5, #1
 800d9d2:	e7c6      	b.n	800d962 <_printf_common+0x3e>
 800d9d4:	18e1      	adds	r1, r4, r3
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	2030      	movs	r0, #48	@ 0x30
 800d9da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9de:	4422      	add	r2, r4
 800d9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9e8:	3302      	adds	r3, #2
 800d9ea:	e7c7      	b.n	800d97c <_printf_common+0x58>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	4641      	mov	r1, r8
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	47c8      	blx	r9
 800d9f6:	3001      	adds	r0, #1
 800d9f8:	d0e6      	beq.n	800d9c8 <_printf_common+0xa4>
 800d9fa:	3601      	adds	r6, #1
 800d9fc:	e7d9      	b.n	800d9b2 <_printf_common+0x8e>
	...

0800da00 <_printf_i>:
 800da00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da04:	7e0f      	ldrb	r7, [r1, #24]
 800da06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da08:	2f78      	cmp	r7, #120	@ 0x78
 800da0a:	4691      	mov	r9, r2
 800da0c:	4680      	mov	r8, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	469a      	mov	sl, r3
 800da12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da16:	d807      	bhi.n	800da28 <_printf_i+0x28>
 800da18:	2f62      	cmp	r7, #98	@ 0x62
 800da1a:	d80a      	bhi.n	800da32 <_printf_i+0x32>
 800da1c:	2f00      	cmp	r7, #0
 800da1e:	f000 80d2 	beq.w	800dbc6 <_printf_i+0x1c6>
 800da22:	2f58      	cmp	r7, #88	@ 0x58
 800da24:	f000 80b9 	beq.w	800db9a <_printf_i+0x19a>
 800da28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da30:	e03a      	b.n	800daa8 <_printf_i+0xa8>
 800da32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da36:	2b15      	cmp	r3, #21
 800da38:	d8f6      	bhi.n	800da28 <_printf_i+0x28>
 800da3a:	a101      	add	r1, pc, #4	@ (adr r1, 800da40 <_printf_i+0x40>)
 800da3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da40:	0800da99 	.word	0x0800da99
 800da44:	0800daad 	.word	0x0800daad
 800da48:	0800da29 	.word	0x0800da29
 800da4c:	0800da29 	.word	0x0800da29
 800da50:	0800da29 	.word	0x0800da29
 800da54:	0800da29 	.word	0x0800da29
 800da58:	0800daad 	.word	0x0800daad
 800da5c:	0800da29 	.word	0x0800da29
 800da60:	0800da29 	.word	0x0800da29
 800da64:	0800da29 	.word	0x0800da29
 800da68:	0800da29 	.word	0x0800da29
 800da6c:	0800dbad 	.word	0x0800dbad
 800da70:	0800dad7 	.word	0x0800dad7
 800da74:	0800db67 	.word	0x0800db67
 800da78:	0800da29 	.word	0x0800da29
 800da7c:	0800da29 	.word	0x0800da29
 800da80:	0800dbcf 	.word	0x0800dbcf
 800da84:	0800da29 	.word	0x0800da29
 800da88:	0800dad7 	.word	0x0800dad7
 800da8c:	0800da29 	.word	0x0800da29
 800da90:	0800da29 	.word	0x0800da29
 800da94:	0800db6f 	.word	0x0800db6f
 800da98:	6833      	ldr	r3, [r6, #0]
 800da9a:	1d1a      	adds	r2, r3, #4
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6032      	str	r2, [r6, #0]
 800daa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daa8:	2301      	movs	r3, #1
 800daaa:	e09d      	b.n	800dbe8 <_printf_i+0x1e8>
 800daac:	6833      	ldr	r3, [r6, #0]
 800daae:	6820      	ldr	r0, [r4, #0]
 800dab0:	1d19      	adds	r1, r3, #4
 800dab2:	6031      	str	r1, [r6, #0]
 800dab4:	0606      	lsls	r6, r0, #24
 800dab6:	d501      	bpl.n	800dabc <_printf_i+0xbc>
 800dab8:	681d      	ldr	r5, [r3, #0]
 800daba:	e003      	b.n	800dac4 <_printf_i+0xc4>
 800dabc:	0645      	lsls	r5, r0, #25
 800dabe:	d5fb      	bpl.n	800dab8 <_printf_i+0xb8>
 800dac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	da03      	bge.n	800dad0 <_printf_i+0xd0>
 800dac8:	232d      	movs	r3, #45	@ 0x2d
 800daca:	426d      	negs	r5, r5
 800dacc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dad0:	4859      	ldr	r0, [pc, #356]	@ (800dc38 <_printf_i+0x238>)
 800dad2:	230a      	movs	r3, #10
 800dad4:	e011      	b.n	800dafa <_printf_i+0xfa>
 800dad6:	6821      	ldr	r1, [r4, #0]
 800dad8:	6833      	ldr	r3, [r6, #0]
 800dada:	0608      	lsls	r0, r1, #24
 800dadc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dae0:	d402      	bmi.n	800dae8 <_printf_i+0xe8>
 800dae2:	0649      	lsls	r1, r1, #25
 800dae4:	bf48      	it	mi
 800dae6:	b2ad      	uxthmi	r5, r5
 800dae8:	2f6f      	cmp	r7, #111	@ 0x6f
 800daea:	4853      	ldr	r0, [pc, #332]	@ (800dc38 <_printf_i+0x238>)
 800daec:	6033      	str	r3, [r6, #0]
 800daee:	bf14      	ite	ne
 800daf0:	230a      	movne	r3, #10
 800daf2:	2308      	moveq	r3, #8
 800daf4:	2100      	movs	r1, #0
 800daf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dafa:	6866      	ldr	r6, [r4, #4]
 800dafc:	60a6      	str	r6, [r4, #8]
 800dafe:	2e00      	cmp	r6, #0
 800db00:	bfa2      	ittt	ge
 800db02:	6821      	ldrge	r1, [r4, #0]
 800db04:	f021 0104 	bicge.w	r1, r1, #4
 800db08:	6021      	strge	r1, [r4, #0]
 800db0a:	b90d      	cbnz	r5, 800db10 <_printf_i+0x110>
 800db0c:	2e00      	cmp	r6, #0
 800db0e:	d04b      	beq.n	800dba8 <_printf_i+0x1a8>
 800db10:	4616      	mov	r6, r2
 800db12:	fbb5 f1f3 	udiv	r1, r5, r3
 800db16:	fb03 5711 	mls	r7, r3, r1, r5
 800db1a:	5dc7      	ldrb	r7, [r0, r7]
 800db1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db20:	462f      	mov	r7, r5
 800db22:	42bb      	cmp	r3, r7
 800db24:	460d      	mov	r5, r1
 800db26:	d9f4      	bls.n	800db12 <_printf_i+0x112>
 800db28:	2b08      	cmp	r3, #8
 800db2a:	d10b      	bne.n	800db44 <_printf_i+0x144>
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	07df      	lsls	r7, r3, #31
 800db30:	d508      	bpl.n	800db44 <_printf_i+0x144>
 800db32:	6923      	ldr	r3, [r4, #16]
 800db34:	6861      	ldr	r1, [r4, #4]
 800db36:	4299      	cmp	r1, r3
 800db38:	bfde      	ittt	le
 800db3a:	2330      	movle	r3, #48	@ 0x30
 800db3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db44:	1b92      	subs	r2, r2, r6
 800db46:	6122      	str	r2, [r4, #16]
 800db48:	f8cd a000 	str.w	sl, [sp]
 800db4c:	464b      	mov	r3, r9
 800db4e:	aa03      	add	r2, sp, #12
 800db50:	4621      	mov	r1, r4
 800db52:	4640      	mov	r0, r8
 800db54:	f7ff fee6 	bl	800d924 <_printf_common>
 800db58:	3001      	adds	r0, #1
 800db5a:	d14a      	bne.n	800dbf2 <_printf_i+0x1f2>
 800db5c:	f04f 30ff 	mov.w	r0, #4294967295
 800db60:	b004      	add	sp, #16
 800db62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	f043 0320 	orr.w	r3, r3, #32
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	4833      	ldr	r0, [pc, #204]	@ (800dc3c <_printf_i+0x23c>)
 800db70:	2778      	movs	r7, #120	@ 0x78
 800db72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	6831      	ldr	r1, [r6, #0]
 800db7a:	061f      	lsls	r7, r3, #24
 800db7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800db80:	d402      	bmi.n	800db88 <_printf_i+0x188>
 800db82:	065f      	lsls	r7, r3, #25
 800db84:	bf48      	it	mi
 800db86:	b2ad      	uxthmi	r5, r5
 800db88:	6031      	str	r1, [r6, #0]
 800db8a:	07d9      	lsls	r1, r3, #31
 800db8c:	bf44      	itt	mi
 800db8e:	f043 0320 	orrmi.w	r3, r3, #32
 800db92:	6023      	strmi	r3, [r4, #0]
 800db94:	b11d      	cbz	r5, 800db9e <_printf_i+0x19e>
 800db96:	2310      	movs	r3, #16
 800db98:	e7ac      	b.n	800daf4 <_printf_i+0xf4>
 800db9a:	4827      	ldr	r0, [pc, #156]	@ (800dc38 <_printf_i+0x238>)
 800db9c:	e7e9      	b.n	800db72 <_printf_i+0x172>
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	f023 0320 	bic.w	r3, r3, #32
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	e7f6      	b.n	800db96 <_printf_i+0x196>
 800dba8:	4616      	mov	r6, r2
 800dbaa:	e7bd      	b.n	800db28 <_printf_i+0x128>
 800dbac:	6833      	ldr	r3, [r6, #0]
 800dbae:	6825      	ldr	r5, [r4, #0]
 800dbb0:	6961      	ldr	r1, [r4, #20]
 800dbb2:	1d18      	adds	r0, r3, #4
 800dbb4:	6030      	str	r0, [r6, #0]
 800dbb6:	062e      	lsls	r6, r5, #24
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	d501      	bpl.n	800dbc0 <_printf_i+0x1c0>
 800dbbc:	6019      	str	r1, [r3, #0]
 800dbbe:	e002      	b.n	800dbc6 <_printf_i+0x1c6>
 800dbc0:	0668      	lsls	r0, r5, #25
 800dbc2:	d5fb      	bpl.n	800dbbc <_printf_i+0x1bc>
 800dbc4:	8019      	strh	r1, [r3, #0]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	6123      	str	r3, [r4, #16]
 800dbca:	4616      	mov	r6, r2
 800dbcc:	e7bc      	b.n	800db48 <_printf_i+0x148>
 800dbce:	6833      	ldr	r3, [r6, #0]
 800dbd0:	1d1a      	adds	r2, r3, #4
 800dbd2:	6032      	str	r2, [r6, #0]
 800dbd4:	681e      	ldr	r6, [r3, #0]
 800dbd6:	6862      	ldr	r2, [r4, #4]
 800dbd8:	2100      	movs	r1, #0
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7f2 fb20 	bl	8000220 <memchr>
 800dbe0:	b108      	cbz	r0, 800dbe6 <_printf_i+0x1e6>
 800dbe2:	1b80      	subs	r0, r0, r6
 800dbe4:	6060      	str	r0, [r4, #4]
 800dbe6:	6863      	ldr	r3, [r4, #4]
 800dbe8:	6123      	str	r3, [r4, #16]
 800dbea:	2300      	movs	r3, #0
 800dbec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbf0:	e7aa      	b.n	800db48 <_printf_i+0x148>
 800dbf2:	6923      	ldr	r3, [r4, #16]
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	47d0      	blx	sl
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d0ad      	beq.n	800db5c <_printf_i+0x15c>
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	079b      	lsls	r3, r3, #30
 800dc04:	d413      	bmi.n	800dc2e <_printf_i+0x22e>
 800dc06:	68e0      	ldr	r0, [r4, #12]
 800dc08:	9b03      	ldr	r3, [sp, #12]
 800dc0a:	4298      	cmp	r0, r3
 800dc0c:	bfb8      	it	lt
 800dc0e:	4618      	movlt	r0, r3
 800dc10:	e7a6      	b.n	800db60 <_printf_i+0x160>
 800dc12:	2301      	movs	r3, #1
 800dc14:	4632      	mov	r2, r6
 800dc16:	4649      	mov	r1, r9
 800dc18:	4640      	mov	r0, r8
 800dc1a:	47d0      	blx	sl
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d09d      	beq.n	800db5c <_printf_i+0x15c>
 800dc20:	3501      	adds	r5, #1
 800dc22:	68e3      	ldr	r3, [r4, #12]
 800dc24:	9903      	ldr	r1, [sp, #12]
 800dc26:	1a5b      	subs	r3, r3, r1
 800dc28:	42ab      	cmp	r3, r5
 800dc2a:	dcf2      	bgt.n	800dc12 <_printf_i+0x212>
 800dc2c:	e7eb      	b.n	800dc06 <_printf_i+0x206>
 800dc2e:	2500      	movs	r5, #0
 800dc30:	f104 0619 	add.w	r6, r4, #25
 800dc34:	e7f5      	b.n	800dc22 <_printf_i+0x222>
 800dc36:	bf00      	nop
 800dc38:	0800e661 	.word	0x0800e661
 800dc3c:	0800e672 	.word	0x0800e672

0800dc40 <__sflush_r>:
 800dc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc48:	0716      	lsls	r6, r2, #28
 800dc4a:	4605      	mov	r5, r0
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	d454      	bmi.n	800dcfa <__sflush_r+0xba>
 800dc50:	684b      	ldr	r3, [r1, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	dc02      	bgt.n	800dc5c <__sflush_r+0x1c>
 800dc56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	dd48      	ble.n	800dcee <__sflush_r+0xae>
 800dc5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc5e:	2e00      	cmp	r6, #0
 800dc60:	d045      	beq.n	800dcee <__sflush_r+0xae>
 800dc62:	2300      	movs	r3, #0
 800dc64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc68:	682f      	ldr	r7, [r5, #0]
 800dc6a:	6a21      	ldr	r1, [r4, #32]
 800dc6c:	602b      	str	r3, [r5, #0]
 800dc6e:	d030      	beq.n	800dcd2 <__sflush_r+0x92>
 800dc70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	0759      	lsls	r1, r3, #29
 800dc76:	d505      	bpl.n	800dc84 <__sflush_r+0x44>
 800dc78:	6863      	ldr	r3, [r4, #4]
 800dc7a:	1ad2      	subs	r2, r2, r3
 800dc7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc7e:	b10b      	cbz	r3, 800dc84 <__sflush_r+0x44>
 800dc80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc82:	1ad2      	subs	r2, r2, r3
 800dc84:	2300      	movs	r3, #0
 800dc86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc88:	6a21      	ldr	r1, [r4, #32]
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	47b0      	blx	r6
 800dc8e:	1c43      	adds	r3, r0, #1
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	d106      	bne.n	800dca2 <__sflush_r+0x62>
 800dc94:	6829      	ldr	r1, [r5, #0]
 800dc96:	291d      	cmp	r1, #29
 800dc98:	d82b      	bhi.n	800dcf2 <__sflush_r+0xb2>
 800dc9a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd44 <__sflush_r+0x104>)
 800dc9c:	410a      	asrs	r2, r1
 800dc9e:	07d6      	lsls	r6, r2, #31
 800dca0:	d427      	bmi.n	800dcf2 <__sflush_r+0xb2>
 800dca2:	2200      	movs	r2, #0
 800dca4:	6062      	str	r2, [r4, #4]
 800dca6:	04d9      	lsls	r1, r3, #19
 800dca8:	6922      	ldr	r2, [r4, #16]
 800dcaa:	6022      	str	r2, [r4, #0]
 800dcac:	d504      	bpl.n	800dcb8 <__sflush_r+0x78>
 800dcae:	1c42      	adds	r2, r0, #1
 800dcb0:	d101      	bne.n	800dcb6 <__sflush_r+0x76>
 800dcb2:	682b      	ldr	r3, [r5, #0]
 800dcb4:	b903      	cbnz	r3, 800dcb8 <__sflush_r+0x78>
 800dcb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcba:	602f      	str	r7, [r5, #0]
 800dcbc:	b1b9      	cbz	r1, 800dcee <__sflush_r+0xae>
 800dcbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcc2:	4299      	cmp	r1, r3
 800dcc4:	d002      	beq.n	800dccc <__sflush_r+0x8c>
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f7ff fb48 	bl	800d35c <_free_r>
 800dccc:	2300      	movs	r3, #0
 800dcce:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcd0:	e00d      	b.n	800dcee <__sflush_r+0xae>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b0      	blx	r6
 800dcd8:	4602      	mov	r2, r0
 800dcda:	1c50      	adds	r0, r2, #1
 800dcdc:	d1c9      	bne.n	800dc72 <__sflush_r+0x32>
 800dcde:	682b      	ldr	r3, [r5, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d0c6      	beq.n	800dc72 <__sflush_r+0x32>
 800dce4:	2b1d      	cmp	r3, #29
 800dce6:	d001      	beq.n	800dcec <__sflush_r+0xac>
 800dce8:	2b16      	cmp	r3, #22
 800dcea:	d11e      	bne.n	800dd2a <__sflush_r+0xea>
 800dcec:	602f      	str	r7, [r5, #0]
 800dcee:	2000      	movs	r0, #0
 800dcf0:	e022      	b.n	800dd38 <__sflush_r+0xf8>
 800dcf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcf6:	b21b      	sxth	r3, r3
 800dcf8:	e01b      	b.n	800dd32 <__sflush_r+0xf2>
 800dcfa:	690f      	ldr	r7, [r1, #16]
 800dcfc:	2f00      	cmp	r7, #0
 800dcfe:	d0f6      	beq.n	800dcee <__sflush_r+0xae>
 800dd00:	0793      	lsls	r3, r2, #30
 800dd02:	680e      	ldr	r6, [r1, #0]
 800dd04:	bf08      	it	eq
 800dd06:	694b      	ldreq	r3, [r1, #20]
 800dd08:	600f      	str	r7, [r1, #0]
 800dd0a:	bf18      	it	ne
 800dd0c:	2300      	movne	r3, #0
 800dd0e:	eba6 0807 	sub.w	r8, r6, r7
 800dd12:	608b      	str	r3, [r1, #8]
 800dd14:	f1b8 0f00 	cmp.w	r8, #0
 800dd18:	dde9      	ble.n	800dcee <__sflush_r+0xae>
 800dd1a:	6a21      	ldr	r1, [r4, #32]
 800dd1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd1e:	4643      	mov	r3, r8
 800dd20:	463a      	mov	r2, r7
 800dd22:	4628      	mov	r0, r5
 800dd24:	47b0      	blx	r6
 800dd26:	2800      	cmp	r0, #0
 800dd28:	dc08      	bgt.n	800dd3c <__sflush_r+0xfc>
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd32:	81a3      	strh	r3, [r4, #12]
 800dd34:	f04f 30ff 	mov.w	r0, #4294967295
 800dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd3c:	4407      	add	r7, r0
 800dd3e:	eba8 0800 	sub.w	r8, r8, r0
 800dd42:	e7e7      	b.n	800dd14 <__sflush_r+0xd4>
 800dd44:	dfbffffe 	.word	0xdfbffffe

0800dd48 <_fflush_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	690b      	ldr	r3, [r1, #16]
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	b913      	cbnz	r3, 800dd58 <_fflush_r+0x10>
 800dd52:	2500      	movs	r5, #0
 800dd54:	4628      	mov	r0, r5
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	b118      	cbz	r0, 800dd62 <_fflush_r+0x1a>
 800dd5a:	6a03      	ldr	r3, [r0, #32]
 800dd5c:	b90b      	cbnz	r3, 800dd62 <_fflush_r+0x1a>
 800dd5e:	f7ff f86f 	bl	800ce40 <__sinit>
 800dd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d0f3      	beq.n	800dd52 <_fflush_r+0xa>
 800dd6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd6c:	07d0      	lsls	r0, r2, #31
 800dd6e:	d404      	bmi.n	800dd7a <_fflush_r+0x32>
 800dd70:	0599      	lsls	r1, r3, #22
 800dd72:	d402      	bmi.n	800dd7a <_fflush_r+0x32>
 800dd74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd76:	f7ff fae0 	bl	800d33a <__retarget_lock_acquire_recursive>
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	f7ff ff5f 	bl	800dc40 <__sflush_r>
 800dd82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd84:	07da      	lsls	r2, r3, #31
 800dd86:	4605      	mov	r5, r0
 800dd88:	d4e4      	bmi.n	800dd54 <_fflush_r+0xc>
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	059b      	lsls	r3, r3, #22
 800dd8e:	d4e1      	bmi.n	800dd54 <_fflush_r+0xc>
 800dd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd92:	f7ff fad3 	bl	800d33c <__retarget_lock_release_recursive>
 800dd96:	e7dd      	b.n	800dd54 <_fflush_r+0xc>

0800dd98 <__swhatbuf_r>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda0:	2900      	cmp	r1, #0
 800dda2:	b096      	sub	sp, #88	@ 0x58
 800dda4:	4615      	mov	r5, r2
 800dda6:	461e      	mov	r6, r3
 800dda8:	da0d      	bge.n	800ddc6 <__swhatbuf_r+0x2e>
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddb0:	f04f 0100 	mov.w	r1, #0
 800ddb4:	bf14      	ite	ne
 800ddb6:	2340      	movne	r3, #64	@ 0x40
 800ddb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	6031      	str	r1, [r6, #0]
 800ddc0:	602b      	str	r3, [r5, #0]
 800ddc2:	b016      	add	sp, #88	@ 0x58
 800ddc4:	bd70      	pop	{r4, r5, r6, pc}
 800ddc6:	466a      	mov	r2, sp
 800ddc8:	f000 f862 	bl	800de90 <_fstat_r>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	dbec      	blt.n	800ddaa <__swhatbuf_r+0x12>
 800ddd0:	9901      	ldr	r1, [sp, #4]
 800ddd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddda:	4259      	negs	r1, r3
 800dddc:	4159      	adcs	r1, r3
 800ddde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dde2:	e7eb      	b.n	800ddbc <__swhatbuf_r+0x24>

0800dde4 <__smakebuf_r>:
 800dde4:	898b      	ldrh	r3, [r1, #12]
 800dde6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dde8:	079d      	lsls	r5, r3, #30
 800ddea:	4606      	mov	r6, r0
 800ddec:	460c      	mov	r4, r1
 800ddee:	d507      	bpl.n	800de00 <__smakebuf_r+0x1c>
 800ddf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	6123      	str	r3, [r4, #16]
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	6163      	str	r3, [r4, #20]
 800ddfc:	b003      	add	sp, #12
 800ddfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de00:	ab01      	add	r3, sp, #4
 800de02:	466a      	mov	r2, sp
 800de04:	f7ff ffc8 	bl	800dd98 <__swhatbuf_r>
 800de08:	9f00      	ldr	r7, [sp, #0]
 800de0a:	4605      	mov	r5, r0
 800de0c:	4639      	mov	r1, r7
 800de0e:	4630      	mov	r0, r6
 800de10:	f7fe fefe 	bl	800cc10 <_malloc_r>
 800de14:	b948      	cbnz	r0, 800de2a <__smakebuf_r+0x46>
 800de16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de1a:	059a      	lsls	r2, r3, #22
 800de1c:	d4ee      	bmi.n	800ddfc <__smakebuf_r+0x18>
 800de1e:	f023 0303 	bic.w	r3, r3, #3
 800de22:	f043 0302 	orr.w	r3, r3, #2
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	e7e2      	b.n	800ddf0 <__smakebuf_r+0xc>
 800de2a:	89a3      	ldrh	r3, [r4, #12]
 800de2c:	6020      	str	r0, [r4, #0]
 800de2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de32:	81a3      	strh	r3, [r4, #12]
 800de34:	9b01      	ldr	r3, [sp, #4]
 800de36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de3a:	b15b      	cbz	r3, 800de54 <__smakebuf_r+0x70>
 800de3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de40:	4630      	mov	r0, r6
 800de42:	f000 f837 	bl	800deb4 <_isatty_r>
 800de46:	b128      	cbz	r0, 800de54 <__smakebuf_r+0x70>
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	f023 0303 	bic.w	r3, r3, #3
 800de4e:	f043 0301 	orr.w	r3, r3, #1
 800de52:	81a3      	strh	r3, [r4, #12]
 800de54:	89a3      	ldrh	r3, [r4, #12]
 800de56:	431d      	orrs	r5, r3
 800de58:	81a5      	strh	r5, [r4, #12]
 800de5a:	e7cf      	b.n	800ddfc <__smakebuf_r+0x18>

0800de5c <memmove>:
 800de5c:	4288      	cmp	r0, r1
 800de5e:	b510      	push	{r4, lr}
 800de60:	eb01 0402 	add.w	r4, r1, r2
 800de64:	d902      	bls.n	800de6c <memmove+0x10>
 800de66:	4284      	cmp	r4, r0
 800de68:	4623      	mov	r3, r4
 800de6a:	d807      	bhi.n	800de7c <memmove+0x20>
 800de6c:	1e43      	subs	r3, r0, #1
 800de6e:	42a1      	cmp	r1, r4
 800de70:	d008      	beq.n	800de84 <memmove+0x28>
 800de72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de7a:	e7f8      	b.n	800de6e <memmove+0x12>
 800de7c:	4402      	add	r2, r0
 800de7e:	4601      	mov	r1, r0
 800de80:	428a      	cmp	r2, r1
 800de82:	d100      	bne.n	800de86 <memmove+0x2a>
 800de84:	bd10      	pop	{r4, pc}
 800de86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de8e:	e7f7      	b.n	800de80 <memmove+0x24>

0800de90 <_fstat_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4d07      	ldr	r5, [pc, #28]	@ (800deb0 <_fstat_r+0x20>)
 800de94:	2300      	movs	r3, #0
 800de96:	4604      	mov	r4, r0
 800de98:	4608      	mov	r0, r1
 800de9a:	4611      	mov	r1, r2
 800de9c:	602b      	str	r3, [r5, #0]
 800de9e:	f7f3 fe22 	bl	8001ae6 <_fstat>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	d102      	bne.n	800deac <_fstat_r+0x1c>
 800dea6:	682b      	ldr	r3, [r5, #0]
 800dea8:	b103      	cbz	r3, 800deac <_fstat_r+0x1c>
 800deaa:	6023      	str	r3, [r4, #0]
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	bf00      	nop
 800deb0:	20046124 	.word	0x20046124

0800deb4 <_isatty_r>:
 800deb4:	b538      	push	{r3, r4, r5, lr}
 800deb6:	4d06      	ldr	r5, [pc, #24]	@ (800ded0 <_isatty_r+0x1c>)
 800deb8:	2300      	movs	r3, #0
 800deba:	4604      	mov	r4, r0
 800debc:	4608      	mov	r0, r1
 800debe:	602b      	str	r3, [r5, #0]
 800dec0:	f7f3 fe21 	bl	8001b06 <_isatty>
 800dec4:	1c43      	adds	r3, r0, #1
 800dec6:	d102      	bne.n	800dece <_isatty_r+0x1a>
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	b103      	cbz	r3, 800dece <_isatty_r+0x1a>
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	bd38      	pop	{r3, r4, r5, pc}
 800ded0:	20046124 	.word	0x20046124

0800ded4 <_realloc_r>:
 800ded4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded8:	4680      	mov	r8, r0
 800deda:	4615      	mov	r5, r2
 800dedc:	460c      	mov	r4, r1
 800dede:	b921      	cbnz	r1, 800deea <_realloc_r+0x16>
 800dee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dee4:	4611      	mov	r1, r2
 800dee6:	f7fe be93 	b.w	800cc10 <_malloc_r>
 800deea:	b92a      	cbnz	r2, 800def8 <_realloc_r+0x24>
 800deec:	f7ff fa36 	bl	800d35c <_free_r>
 800def0:	2400      	movs	r4, #0
 800def2:	4620      	mov	r0, r4
 800def4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def8:	f000 f81a 	bl	800df30 <_malloc_usable_size_r>
 800defc:	4285      	cmp	r5, r0
 800defe:	4606      	mov	r6, r0
 800df00:	d802      	bhi.n	800df08 <_realloc_r+0x34>
 800df02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df06:	d8f4      	bhi.n	800def2 <_realloc_r+0x1e>
 800df08:	4629      	mov	r1, r5
 800df0a:	4640      	mov	r0, r8
 800df0c:	f7fe fe80 	bl	800cc10 <_malloc_r>
 800df10:	4607      	mov	r7, r0
 800df12:	2800      	cmp	r0, #0
 800df14:	d0ec      	beq.n	800def0 <_realloc_r+0x1c>
 800df16:	42b5      	cmp	r5, r6
 800df18:	462a      	mov	r2, r5
 800df1a:	4621      	mov	r1, r4
 800df1c:	bf28      	it	cs
 800df1e:	4632      	movcs	r2, r6
 800df20:	f7ff fa0d 	bl	800d33e <memcpy>
 800df24:	4621      	mov	r1, r4
 800df26:	4640      	mov	r0, r8
 800df28:	f7ff fa18 	bl	800d35c <_free_r>
 800df2c:	463c      	mov	r4, r7
 800df2e:	e7e0      	b.n	800def2 <_realloc_r+0x1e>

0800df30 <_malloc_usable_size_r>:
 800df30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df34:	1f18      	subs	r0, r3, #4
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfbc      	itt	lt
 800df3a:	580b      	ldrlt	r3, [r1, r0]
 800df3c:	18c0      	addlt	r0, r0, r3
 800df3e:	4770      	bx	lr

0800df40 <_init>:
 800df40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df42:	bf00      	nop
 800df44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df46:	bc08      	pop	{r3}
 800df48:	469e      	mov	lr, r3
 800df4a:	4770      	bx	lr

0800df4c <_fini>:
 800df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4e:	bf00      	nop
 800df50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df52:	bc08      	pop	{r3}
 800df54:	469e      	mov	lr, r3
 800df56:	4770      	bx	lr
