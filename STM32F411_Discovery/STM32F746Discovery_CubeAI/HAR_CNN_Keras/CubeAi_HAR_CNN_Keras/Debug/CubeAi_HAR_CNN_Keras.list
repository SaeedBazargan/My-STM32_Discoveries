
CubeAi_HAR_CNN_Keras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005cf10  0800afc0  0800afc0  0000bfc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08067ed0  08067ed0  00069bb0  2**0
                  CONTENTS
  4 .ARM          00000008  08067ed0  08067ed0  00068ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08067ed8  08067ed8  00069bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08067ed8  08067ed8  00068ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08067edc  08067edc  00068edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000bb0  20000000  08067ee0  00069000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a98  20000bc0  08068a90  00069bc0  2**5
                  ALLOC
 10 ._user_heap_stack 00002800  20007658  08068a90  0006a658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00069bb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a866  00000000  00000000  00069be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a85  00000000  00000000  00084446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00088ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb9  00000000  00000000  00089b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdb7  00000000  00000000  0008a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017419  00000000  00000000  000a67a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ecf7  00000000  00000000  000bdbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015c8b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  0015c938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00008883  00000000  00000000  0015fde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00168663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000bc0 	.word	0x20000bc0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af94 	.word	0x0800af94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000bc4 	.word	0x20000bc4
 80001dc:	0800af94 	.word	0x0800af94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_frsub>:
 8000bb8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bbc:	e002      	b.n	8000bc4 <__addsf3>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fsub>:
 8000bc0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc4 <__addsf3>:
 8000bc4:	0042      	lsls	r2, r0, #1
 8000bc6:	bf1f      	itttt	ne
 8000bc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bcc:	ea92 0f03 	teqne	r2, r3
 8000bd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd8:	d06a      	beq.n	8000cb0 <__addsf3+0xec>
 8000bda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000be2:	bfc1      	itttt	gt
 8000be4:	18d2      	addgt	r2, r2, r3
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	4048      	eorgt	r0, r1
 8000bea:	4041      	eorgt	r1, r0
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	2b19      	cmp	r3, #25
 8000bf2:	bf88      	it	hi
 8000bf4:	4770      	bxhi	lr
 8000bf6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4249      	negne	r1, r1
 8000c16:	ea92 0f03 	teq	r2, r3
 8000c1a:	d03f      	beq.n	8000c9c <__addsf3+0xd8>
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	fa41 fc03 	asr.w	ip, r1, r3
 8000c24:	eb10 000c 	adds.w	r0, r0, ip
 8000c28:	f1c3 0320 	rsb	r3, r3, #32
 8000c2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__addsf3+0x78>
 8000c36:	4249      	negs	r1, r1
 8000c38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c40:	d313      	bcc.n	8000c6a <__addsf3+0xa6>
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c46:	d306      	bcc.n	8000c56 <__addsf3+0x92>
 8000c48:	0840      	lsrs	r0, r0, #1
 8000c4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4e:	f102 0201 	add.w	r2, r2, #1
 8000c52:	2afe      	cmp	r2, #254	@ 0xfe
 8000c54:	d251      	bcs.n	8000cfa <__addsf3+0x136>
 8000c56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5e:	bf08      	it	eq
 8000c60:	f020 0001 	biceq.w	r0, r0, #1
 8000c64:	ea40 0003 	orr.w	r0, r0, r3
 8000c68:	4770      	bx	lr
 8000c6a:	0049      	lsls	r1, r1, #1
 8000c6c:	eb40 0000 	adc.w	r0, r0, r0
 8000c70:	3a01      	subs	r2, #1
 8000c72:	bf28      	it	cs
 8000c74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c78:	d2ed      	bcs.n	8000c56 <__addsf3+0x92>
 8000c7a:	fab0 fc80 	clz	ip, r0
 8000c7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c82:	ebb2 020c 	subs.w	r2, r2, ip
 8000c86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c8a:	bfaa      	itet	ge
 8000c8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c90:	4252      	neglt	r2, r2
 8000c92:	4318      	orrge	r0, r3
 8000c94:	bfbc      	itt	lt
 8000c96:	40d0      	lsrlt	r0, r2
 8000c98:	4318      	orrlt	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	f092 0f00 	teq	r2, #0
 8000ca0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca4:	bf06      	itte	eq
 8000ca6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000caa:	3201      	addeq	r2, #1
 8000cac:	3b01      	subne	r3, #1
 8000cae:	e7b5      	b.n	8000c1c <__addsf3+0x58>
 8000cb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cbe:	d021      	beq.n	8000d04 <__addsf3+0x140>
 8000cc0:	ea92 0f03 	teq	r2, r3
 8000cc4:	d004      	beq.n	8000cd0 <__addsf3+0x10c>
 8000cc6:	f092 0f00 	teq	r2, #0
 8000cca:	bf08      	it	eq
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	4770      	bx	lr
 8000cd0:	ea90 0f01 	teq	r0, r1
 8000cd4:	bf1c      	itt	ne
 8000cd6:	2000      	movne	r0, #0
 8000cd8:	4770      	bxne	lr
 8000cda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cde:	d104      	bne.n	8000cea <__addsf3+0x126>
 8000ce0:	0040      	lsls	r0, r0, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cee:	bf3c      	itt	cc
 8000cf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bxcc	lr
 8000cf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d02:	4770      	bx	lr
 8000d04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d08:	bf16      	itet	ne
 8000d0a:	4608      	movne	r0, r1
 8000d0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d10:	4601      	movne	r1, r0
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	bf06      	itte	eq
 8000d16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d1a:	ea90 0f01 	teqeq	r0, r1
 8000d1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_ui2f>:
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e004      	b.n	8000d34 <__aeabi_i2f+0x8>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_i2f>:
 8000d2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d30:	bf48      	it	mi
 8000d32:	4240      	negmi	r0, r0
 8000d34:	ea5f 0c00 	movs.w	ip, r0
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d40:	4601      	mov	r1, r0
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	e01c      	b.n	8000d82 <__aeabi_l2f+0x2a>

08000d48 <__aeabi_ul2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e00a      	b.n	8000d6c <__aeabi_l2f+0x14>
 8000d56:	bf00      	nop

08000d58 <__aeabi_l2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_l2f+0x14>
 8000d66:	4240      	negs	r0, r0
 8000d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6c:	ea5f 0c01 	movs.w	ip, r1
 8000d70:	bf02      	ittt	eq
 8000d72:	4684      	moveq	ip, r0
 8000d74:	4601      	moveq	r1, r0
 8000d76:	2000      	moveq	r0, #0
 8000d78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d7c:	bf08      	it	eq
 8000d7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d86:	fabc f28c 	clz	r2, ip
 8000d8a:	3a08      	subs	r2, #8
 8000d8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d90:	db10      	blt.n	8000db4 <__aeabi_l2f+0x5c>
 8000d92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da4:	fa20 f202 	lsr.w	r2, r0, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f102 0220 	add.w	r2, r2, #32
 8000db8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_uldivmod>:
 8000dd4:	b953      	cbnz	r3, 8000dec <__aeabi_uldivmod+0x18>
 8000dd6:	b94a      	cbnz	r2, 8000dec <__aeabi_uldivmod+0x18>
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	bf08      	it	eq
 8000ddc:	2800      	cmpeq	r0, #0
 8000dde:	bf1c      	itt	ne
 8000de0:	f04f 31ff 	movne.w	r1, #4294967295
 8000de4:	f04f 30ff 	movne.w	r0, #4294967295
 8000de8:	f000 b988 	b.w	80010fc <__aeabi_idiv0>
 8000dec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df4:	f000 f824 	bl	8000e40 <__udivmoddi4>
 8000df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e00:	b004      	add	sp, #16
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_d2ulz>:
 8000e04:	b5d0      	push	{r4, r6, r7, lr}
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <__aeabi_d2ulz+0x34>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4606      	mov	r6, r0
 8000e0c:	460f      	mov	r7, r1
 8000e0e:	f7ff fbfb 	bl	8000608 <__aeabi_dmul>
 8000e12:	f000 f975 	bl	8001100 <__aeabi_d2uiz>
 8000e16:	4604      	mov	r4, r0
 8000e18:	f7ff fb7c 	bl	8000514 <__aeabi_ui2d>
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <__aeabi_d2ulz+0x38>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f7ff fbf2 	bl	8000608 <__aeabi_dmul>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4630      	mov	r0, r6
 8000e2a:	4639      	mov	r1, r7
 8000e2c:	f7ff fa34 	bl	8000298 <__aeabi_dsub>
 8000e30:	f000 f966 	bl	8001100 <__aeabi_d2uiz>
 8000e34:	4621      	mov	r1, r4
 8000e36:	bdd0      	pop	{r4, r6, r7, pc}
 8000e38:	3df00000 	.word	0x3df00000
 8000e3c:	41f00000 	.word	0x41f00000

08000e40 <__udivmoddi4>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	9d08      	ldr	r5, [sp, #32]
 8000e46:	460c      	mov	r4, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14e      	bne.n	8000eea <__udivmoddi4+0xaa>
 8000e4c:	4694      	mov	ip, r2
 8000e4e:	458c      	cmp	ip, r1
 8000e50:	4686      	mov	lr, r0
 8000e52:	fab2 f282 	clz	r2, r2
 8000e56:	d962      	bls.n	8000f1e <__udivmoddi4+0xde>
 8000e58:	b14a      	cbz	r2, 8000e6e <__udivmoddi4+0x2e>
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	fa20 f303 	lsr.w	r3, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f f68c 	uxth.w	r6, ip
 8000e76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb04 f106 	mul.w	r1, r4, r6
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d90a      	bls.n	8000ea4 <__udivmoddi4+0x64>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e96:	f080 8112 	bcs.w	80010be <__udivmoddi4+0x27e>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 810f 	bls.w	80010be <__udivmoddi4+0x27e>
 8000ea0:	3c02      	subs	r4, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a59      	subs	r1, r3, r1
 8000ea6:	fa1f f38e 	uxth.w	r3, lr
 8000eaa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eae:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f606 	mul.w	r6, r0, r6
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	d90a      	bls.n	8000ed4 <__udivmoddi4+0x94>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec6:	f080 80fc 	bcs.w	80010c2 <__udivmoddi4+0x282>
 8000eca:	429e      	cmp	r6, r3
 8000ecc:	f240 80f9 	bls.w	80010c2 <__udivmoddi4+0x282>
 8000ed0:	4463      	add	r3, ip
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	b11d      	cbz	r5, 8000ee6 <__udivmoddi4+0xa6>
 8000ede:	40d3      	lsrs	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d905      	bls.n	8000efa <__udivmoddi4+0xba>
 8000eee:	b10d      	cbz	r5, 8000ef4 <__udivmoddi4+0xb4>
 8000ef0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e7f5      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000efa:	fab3 f183 	clz	r1, r3
 8000efe:	2900      	cmp	r1, #0
 8000f00:	d146      	bne.n	8000f90 <__udivmoddi4+0x150>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d302      	bcc.n	8000f0c <__udivmoddi4+0xcc>
 8000f06:	4290      	cmp	r0, r2
 8000f08:	f0c0 80f0 	bcc.w	80010ec <__udivmoddi4+0x2ac>
 8000f0c:	1a86      	subs	r6, r0, r2
 8000f0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d0e6      	beq.n	8000ee6 <__udivmoddi4+0xa6>
 8000f18:	e9c5 6300 	strd	r6, r3, [r5]
 8000f1c:	e7e3      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	f040 8090 	bne.w	8001044 <__udivmoddi4+0x204>
 8000f24:	eba1 040c 	sub.w	r4, r1, ip
 8000f28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f2c:	fa1f f78c 	uxth.w	r7, ip
 8000f30:	2101      	movs	r1, #1
 8000f32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f42:	fb07 f006 	mul.w	r0, r7, r6
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x11c>
 8000f4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x11a>
 8000f54:	4298      	cmp	r0, r3
 8000f56:	f200 80cd 	bhi.w	80010f4 <__udivmoddi4+0x2b4>
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	1a1c      	subs	r4, r3, r0
 8000f5e:	fa1f f38e 	uxth.w	r3, lr
 8000f62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f66:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	fb00 f707 	mul.w	r7, r0, r7
 8000f72:	429f      	cmp	r7, r3
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x148>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7e:	d202      	bcs.n	8000f86 <__udivmoddi4+0x146>
 8000f80:	429f      	cmp	r7, r3
 8000f82:	f200 80b0 	bhi.w	80010e6 <__udivmoddi4+0x2a6>
 8000f86:	4620      	mov	r0, r4
 8000f88:	1bdb      	subs	r3, r3, r7
 8000f8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8e:	e7a5      	b.n	8000edc <__udivmoddi4+0x9c>
 8000f90:	f1c1 0620 	rsb	r6, r1, #32
 8000f94:	408b      	lsls	r3, r1
 8000f96:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa0:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa4:	ea43 030c 	orr.w	r3, r3, ip
 8000fa8:	40f4      	lsrs	r4, r6
 8000faa:	fa00 f801 	lsl.w	r8, r0, r1
 8000fae:	0c38      	lsrs	r0, r7, #16
 8000fb0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb4:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb8:	fa1f fc87 	uxth.w	ip, r7
 8000fbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc8:	45a1      	cmp	r9, r4
 8000fca:	fa02 f201 	lsl.w	r2, r2, r1
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x1a6>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd6:	f080 8084 	bcs.w	80010e2 <__udivmoddi4+0x2a2>
 8000fda:	45a1      	cmp	r9, r4
 8000fdc:	f240 8081 	bls.w	80010e2 <__udivmoddi4+0x2a2>
 8000fe0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe4:	443c      	add	r4, r7
 8000fe6:	eba4 0409 	sub.w	r4, r4, r9
 8000fea:	fa1f f983 	uxth.w	r9, r3
 8000fee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffe:	45a4      	cmp	ip, r4
 8001000:	d907      	bls.n	8001012 <__udivmoddi4+0x1d2>
 8001002:	193c      	adds	r4, r7, r4
 8001004:	f103 30ff 	add.w	r0, r3, #4294967295
 8001008:	d267      	bcs.n	80010da <__udivmoddi4+0x29a>
 800100a:	45a4      	cmp	ip, r4
 800100c:	d965      	bls.n	80010da <__udivmoddi4+0x29a>
 800100e:	3b02      	subs	r3, #2
 8001010:	443c      	add	r4, r7
 8001012:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001016:	fba0 9302 	umull	r9, r3, r0, r2
 800101a:	eba4 040c 	sub.w	r4, r4, ip
 800101e:	429c      	cmp	r4, r3
 8001020:	46ce      	mov	lr, r9
 8001022:	469c      	mov	ip, r3
 8001024:	d351      	bcc.n	80010ca <__udivmoddi4+0x28a>
 8001026:	d04e      	beq.n	80010c6 <__udivmoddi4+0x286>
 8001028:	b155      	cbz	r5, 8001040 <__udivmoddi4+0x200>
 800102a:	ebb8 030e 	subs.w	r3, r8, lr
 800102e:	eb64 040c 	sbc.w	r4, r4, ip
 8001032:	fa04 f606 	lsl.w	r6, r4, r6
 8001036:	40cb      	lsrs	r3, r1
 8001038:	431e      	orrs	r6, r3
 800103a:	40cc      	lsrs	r4, r1
 800103c:	e9c5 6400 	strd	r6, r4, [r5]
 8001040:	2100      	movs	r1, #0
 8001042:	e750      	b.n	8000ee6 <__udivmoddi4+0xa6>
 8001044:	f1c2 0320 	rsb	r3, r2, #32
 8001048:	fa20 f103 	lsr.w	r1, r0, r3
 800104c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001050:	fa24 f303 	lsr.w	r3, r4, r3
 8001054:	4094      	lsls	r4, r2
 8001056:	430c      	orrs	r4, r1
 8001058:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800105c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3110 	mls	r1, r8, r0, r3
 800106c:	0c23      	lsrs	r3, r4, #16
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	fb00 f107 	mul.w	r1, r0, r7
 8001076:	4299      	cmp	r1, r3
 8001078:	d908      	bls.n	800108c <__udivmoddi4+0x24c>
 800107a:	eb1c 0303 	adds.w	r3, ip, r3
 800107e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001082:	d22c      	bcs.n	80010de <__udivmoddi4+0x29e>
 8001084:	4299      	cmp	r1, r3
 8001086:	d92a      	bls.n	80010de <__udivmoddi4+0x29e>
 8001088:	3802      	subs	r0, #2
 800108a:	4463      	add	r3, ip
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f1f8 	udiv	r1, r3, r8
 8001094:	fb08 3311 	mls	r3, r8, r1, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb01 f307 	mul.w	r3, r1, r7
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x276>
 80010a4:	eb1c 0404 	adds.w	r4, ip, r4
 80010a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80010ac:	d213      	bcs.n	80010d6 <__udivmoddi4+0x296>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d911      	bls.n	80010d6 <__udivmoddi4+0x296>
 80010b2:	3902      	subs	r1, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	1ae4      	subs	r4, r4, r3
 80010b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010bc:	e739      	b.n	8000f32 <__udivmoddi4+0xf2>
 80010be:	4604      	mov	r4, r0
 80010c0:	e6f0      	b.n	8000ea4 <__udivmoddi4+0x64>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e706      	b.n	8000ed4 <__udivmoddi4+0x94>
 80010c6:	45c8      	cmp	r8, r9
 80010c8:	d2ae      	bcs.n	8001028 <__udivmoddi4+0x1e8>
 80010ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d2:	3801      	subs	r0, #1
 80010d4:	e7a8      	b.n	8001028 <__udivmoddi4+0x1e8>
 80010d6:	4631      	mov	r1, r6
 80010d8:	e7ed      	b.n	80010b6 <__udivmoddi4+0x276>
 80010da:	4603      	mov	r3, r0
 80010dc:	e799      	b.n	8001012 <__udivmoddi4+0x1d2>
 80010de:	4630      	mov	r0, r6
 80010e0:	e7d4      	b.n	800108c <__udivmoddi4+0x24c>
 80010e2:	46d6      	mov	lr, sl
 80010e4:	e77f      	b.n	8000fe6 <__udivmoddi4+0x1a6>
 80010e6:	4463      	add	r3, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e74d      	b.n	8000f88 <__udivmoddi4+0x148>
 80010ec:	4606      	mov	r6, r0
 80010ee:	4623      	mov	r3, r4
 80010f0:	4608      	mov	r0, r1
 80010f2:	e70f      	b.n	8000f14 <__udivmoddi4+0xd4>
 80010f4:	3e02      	subs	r6, #2
 80010f6:	4463      	add	r3, ip
 80010f8:	e730      	b.n	8000f5c <__udivmoddi4+0x11c>
 80010fa:	bf00      	nop

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <__aeabi_d2uiz>:
 8001100:	004a      	lsls	r2, r1, #1
 8001102:	d211      	bcs.n	8001128 <__aeabi_d2uiz+0x28>
 8001104:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001108:	d211      	bcs.n	800112e <__aeabi_d2uiz+0x2e>
 800110a:	d50d      	bpl.n	8001128 <__aeabi_d2uiz+0x28>
 800110c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001110:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001114:	d40e      	bmi.n	8001134 <__aeabi_d2uiz+0x34>
 8001116:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800111a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001122:	fa23 f002 	lsr.w	r0, r3, r2
 8001126:	4770      	bx	lr
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001132:	d102      	bne.n	800113a <__aeabi_d2uiz+0x3a>
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b510      	push	{r4, lr}
 8001142:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001144:	2210      	movs	r2, #16
 8001146:	2100      	movs	r1, #0
 8001148:	a80a      	add	r0, sp, #40	@ 0x28
 800114a:	f007 ff36 	bl	8008fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114e:	2214      	movs	r2, #20
 8001150:	2100      	movs	r1, #0
 8001152:	a803      	add	r0, sp, #12
 8001154:	f007 ff31 	bl	8008fba <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <SystemClock_Config+0x98>)
 800115a:	2100      	movs	r1, #0
 800115c:	9101      	str	r1, [sp, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001160:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <SystemClock_Config+0x9c>)
 8001172:	9102      	str	r1, [sp, #8]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001196:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
 800119a:	2104      	movs	r1, #4
 800119c:	2364      	movs	r3, #100	@ 0x64
 800119e:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a4:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a6:	9412      	str	r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f000 fb0f 	bl	80017cc <HAL_RCC_OscConfig>
 80011ae:	b108      	cbz	r0, 80011b4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c4:	2103      	movs	r1, #3
 80011c6:	a803      	add	r0, sp, #12
 80011c8:	f000 fcdc 	bl	8001b84 <HAL_RCC_ClockConfig>
 80011cc:	b108      	cbz	r0, 80011d2 <SystemClock_Config+0x92>
 80011ce:	b672      	cpsid	i
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <SystemClock_Config+0x90>
}
 80011d2:	b014      	add	sp, #80	@ 0x50
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <main>:
{
 80011e0:	b500      	push	{lr}
 80011e2:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 80011e4:	f000 f964 	bl	80014b0 <HAL_Init>
  SystemClock_Config();
 80011e8:	f7ff ffaa 	bl	8001140 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	2214      	movs	r2, #20
 80011ee:	2100      	movs	r1, #0
 80011f0:	eb0d 0002 	add.w	r0, sp, r2
 80011f4:	f007 fee1 	bl	8008fba <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f8:	2400      	movs	r4, #0
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <main+0xb4>)
 80011fc:	9401      	str	r4, [sp, #4]
 80011fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001200:	4825      	ldr	r0, [pc, #148]	@ (8001298 <main+0xb8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001206:	631a      	str	r2, [r3, #48]	@ 0x30
 8001208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800120a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	9402      	str	r4, [sp, #8]
 8001214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	631a      	str	r2, [r3, #48]	@ 0x30
 800121c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800121e:	f002 0201 	and.w	r2, r2, #1
 8001222:	9202      	str	r2, [sp, #8]
 8001224:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	9403      	str	r4, [sp, #12]
 8001228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001232:	f002 0208 	and.w	r2, r2, #8
 8001236:	9203      	str	r2, [sp, #12]
 8001238:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	9404      	str	r4, [sp, #16]
 800123c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800123e:	f042 0202 	orr.w	r2, r2, #2
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800124c:	4622      	mov	r2, r4
 800124e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001254:	f000 faac 	bl	80017b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125a:	480f      	ldr	r0, [pc, #60]	@ (8001298 <main+0xb8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126a:	f000 f9db 	bl	8001624 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800126e:	480b      	ldr	r0, [pc, #44]	@ (800129c <main+0xbc>)
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <main+0xc0>)
 8001272:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001274:	f000 f9c6 	bl	8001604 <HAL_CRC_Init>
 8001278:	b108      	cbz	r0, 800127e <main+0x9e>
 800127a:	b672      	cpsid	i
  while (1)
 800127c:	e7fe      	b.n	800127c <main+0x9c>
  MX_X_CUBE_AI_Init();
 800127e:	f002 fc83 	bl	8003b88 <MX_X_CUBE_AI_Init>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001282:	4c05      	ldr	r4, [pc, #20]	@ (8001298 <main+0xb8>)
	  MX_X_CUBE_AI_Process();
 8001284:	f002 fc87 	bl	8003b96 <MX_X_CUBE_AI_Process>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001288:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800128c:	4620      	mov	r0, r4
 800128e:	f000 fa94 	bl	80017ba <HAL_GPIO_TogglePin>
  while (1)
 8001292:	e7f7      	b.n	8001284 <main+0xa4>
 8001294:	40023800 	.word	0x40023800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	20000c24 	.word	0x20000c24
 80012a0:	40023000 	.word	0x40023000

080012a4 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 80012a4:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 115200;
 80012a6:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <MX_USART2_UART_Init+0x30>)
{
 80012a8:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80012aa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012ae:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c2:	f000 fddd 	bl	8001e80 <HAL_UART_Init>
 80012c6:	b108      	cbz	r0, 80012cc <MX_USART2_UART_Init+0x28>
 80012c8:	b672      	cpsid	i
  while (1)
 80012ca:	e7fe      	b.n	80012ca <MX_USART2_UART_Init+0x26>
}
 80012cc:	bd08      	pop	{r3, pc}
 80012ce:	bf00      	nop
 80012d0:	20000bdc 	.word	0x20000bdc
 80012d4:	40004400 	.word	0x40004400

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x34>)
 80012dc:	2100      	movs	r1, #0
 80012de:	9100      	str	r1, [sp, #0]
 80012e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80012e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ea:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	9101      	str	r1, [sp, #4]
 80012f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	b002      	add	sp, #8
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001310:	6802      	ldr	r2, [r0, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_CRC_MspInit+0x28>)
 8001314:	429a      	cmp	r2, r3
{
 8001316:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001318:	d10b      	bne.n	8001332 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_CRC_MspInit+0x2c>)
 8001320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001322:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001332:	b002      	add	sp, #8
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023000 	.word	0x40023000
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	2214      	movs	r2, #20
 8001348:	2100      	movs	r1, #0
 800134a:	a803      	add	r0, sp, #12
 800134c:	f007 fe35 	bl	8008fba <memset>
  if(huart->Instance==USART2)
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_UART_MspInit+0x64>)
 8001354:	429a      	cmp	r2, r3
 8001356:	d122      	bne.n	800139e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001358:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 800135c:	2100      	movs	r1, #0
 800135e:	9101      	str	r1, [sp, #4]
 8001360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001364:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
 800136a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001370:	9201      	str	r2, [sp, #4]
 8001372:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	9102      	str	r1, [sp, #8]
 8001376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	220c      	movs	r2, #12
 800138a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	a903      	add	r1, sp, #12
 800139a:	f000 f943 	bl	8001624 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800139e:	b008      	add	sp, #32
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40020000 	.word	0x40020000

080013ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler>

080013ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler>

080013b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler>

080013b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler>

080013b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler>

080013b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 b892 	b.w	80014e4 <HAL_IncTick>

080013c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <_sbrk+0x30>)
 80013c2:	6811      	ldr	r1, [r2, #0]
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80013c8:	b909      	cbnz	r1, 80013ce <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80013ca:	490a      	ldr	r1, [pc, #40]	@ (80013f4 <_sbrk+0x34>)
 80013cc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	6810      	ldr	r0, [r2, #0]
 80013d0:	4909      	ldr	r1, [pc, #36]	@ (80013f8 <_sbrk+0x38>)
 80013d2:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <_sbrk+0x3c>)
 80013d4:	4403      	add	r3, r0
 80013d6:	1b09      	subs	r1, r1, r4
 80013d8:	428b      	cmp	r3, r1
 80013da:	d906      	bls.n	80013ea <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80013dc:	f007 fe62 	bl	80090a4 <__errno>
 80013e0:	230c      	movs	r3, #12
 80013e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80013e8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80013ea:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80013ec:	e7fc      	b.n	80013e8 <_sbrk+0x28>
 80013ee:	bf00      	nop
 80013f0:	20000c2c 	.word	0x20000c2c
 80013f4:	20007658 	.word	0x20007658
 80013f8:	20020000 	.word	0x20020000
 80013fc:	00000800 	.word	0x00000800

08001400 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4a03      	ldr	r2, [pc, #12]	@ (8001410 <SystemInit+0x10>)
 8001402:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001406:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800144c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001418:	f7ff fff2 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f007 fe35 	bl	80090b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fecb 	bl	80011e0 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800144c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000bb0 	.word	0x20000bb0
  ldr r2, =_sidata
 8001458:	08067ee0 	.word	0x08067ee0
  ldr r2, =_sbss
 800145c:	20000bc0 	.word	0x20000bc0
  ldr r4, =_ebss
 8001460:	20007658 	.word	0x20007658

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_InitTick+0x3c>)
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f2 	udiv	r3, r3, r2
 8001476:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <HAL_InitTick+0x40>)
{
 8001478:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147a:	6810      	ldr	r0, [r2, #0]
 800147c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001480:	f000 f8ac 	bl	80015dc <HAL_SYSTICK_Config>
 8001484:	4604      	mov	r4, r0
 8001486:	b958      	cbnz	r0, 80014a0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001488:	2d0f      	cmp	r5, #15
 800148a:	d809      	bhi.n	80014a0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	4602      	mov	r2, r0
 800148e:	4629      	mov	r1, r5
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f870 	bl	8001578 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <HAL_InitTick+0x44>)
 800149a:	4620      	mov	r0, r4
 800149c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800149e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e7fc      	b.n	800149e <HAL_InitTick+0x36>
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_Init>:
{
 80014b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <HAL_Init+0x30>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80014c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f841 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f7ff ffc8 	bl	8001468 <HAL_InitTick>
  HAL_MspInit();
 80014d8:	f7ff fefe 	bl	80012d8 <HAL_MspInit>
}
 80014dc:	2000      	movs	r0, #0
 80014de:	bd08      	pop	{r3, pc}
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014e4:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <HAL_IncTick+0x10>)
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_IncTick+0x14>)
 80014e8:	6811      	ldr	r1, [r2, #0]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	440b      	add	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000c30 	.word	0x20000c30
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014fc:	4b01      	ldr	r3, [pc, #4]	@ (8001504 <HAL_GetTick+0x8>)
 80014fe:	6818      	ldr	r0, [r3, #0]
}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000c30 	.word	0x20000c30

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fff6 	bl	80014fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001510:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	bf1c      	itt	ne
 8001514:	4b05      	ldrne	r3, [pc, #20]	@ (800152c <HAL_Delay+0x24>)
 8001516:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001518:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800151a:	bf18      	it	ne
 800151c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151e:	f7ff ffed 	bl	80014fc <HAL_GetTick>
 8001522:	1b43      	subs	r3, r0, r5
 8001524:	42a3      	cmp	r3, r4
 8001526:	d3fa      	bcc.n	800151e <HAL_Delay+0x16>
  {
  }
}
 8001528:	bd38      	pop	{r3, r4, r5, pc}
 800152a:	bf00      	nop
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8001530:	4800      	ldr	r0, [pc, #0]	@ (8001534 <HAL_GetHalVersion+0x4>)
 8001532:	4770      	bx	lr
 8001534:	01080300 	.word	0x01080300

08001538 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001538:	4b01      	ldr	r3, [pc, #4]	@ (8001540 <HAL_GetREVID+0x8>)
 800153a:	6818      	ldr	r0, [r3, #0]
}
 800153c:	0c00      	lsrs	r0, r0, #16
 800153e:	4770      	bx	lr
 8001540:	e0042000 	.word	0xe0042000

08001544 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001544:	4b02      	ldr	r3, [pc, #8]	@ (8001550 <HAL_GetDEVID+0xc>)
 8001546:	6818      	ldr	r0, [r3, #0]
}
 8001548:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e0042000 	.word	0xe0042000

08001554 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001556:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001558:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001564:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001570:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b530      	push	{r4, r5, lr}
 800157c:	68dc      	ldr	r4, [r3, #12]
 800157e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001582:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	2b04      	cmp	r3, #4
 800158a:	bf28      	it	cs
 800158c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001594:	bf8c      	ite	hi
 8001596:	3c03      	subhi	r4, #3
 8001598:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159a:	fa05 f303 	lsl.w	r3, r5, r3
 800159e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a2:	40a5      	lsls	r5, r4
 80015a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80015aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	bfac      	ite	ge
 80015b2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	4a08      	ldrlt	r2, [pc, #32]	@ (80015d8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	bfb8      	it	lt
 80015be:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	bfaa      	itet	ge
 80015c6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015d0:	bd30      	pop	{r4, r5, pc}
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	e000ed14 	.word	0xe000ed14

080015dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	3801      	subs	r0, #1
 80015de:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80015e2:	d20b      	bcs.n	80015fc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	21f0      	movs	r1, #240	@ 0xf0
 80015ee:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015fc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001604:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001606:	4604      	mov	r4, r0
 8001608:	b150      	cbz	r0, 8001620 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800160a:	7943      	ldrb	r3, [r0, #5]
 800160c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001610:	b913      	cbnz	r3, 8001618 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001612:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001614:	f7ff fe7c 	bl	8001310 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001618:	2301      	movs	r3, #1
 800161a:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800161c:	2000      	movs	r0, #0
}
 800161e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
 8001622:	e7fc      	b.n	800161e <HAL_CRC_Init+0x1a>

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001628:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 80017ac <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162c:	4a5d      	ldr	r2, [pc, #372]	@ (80017a4 <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001630:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001632:	2401      	movs	r4, #1
 8001634:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800163a:	43ac      	bics	r4, r5
 800163c:	f040 80a3 	bne.w	8001786 <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001640:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001642:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001644:	f005 0403 	and.w	r4, r5, #3
 8001648:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001650:	1e67      	subs	r7, r4, #1
 8001652:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001654:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001658:	d834      	bhi.n	80016c4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800165a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800165c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001660:	68cf      	ldr	r7, [r1, #12]
 8001662:	fa07 f708 	lsl.w	r7, r7, r8
 8001666:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800166a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800166c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166e:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001672:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001676:	409f      	lsls	r7, r3
 8001678:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800167c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800167e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001680:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001684:	688f      	ldr	r7, [r1, #8]
 8001686:	fa07 f708 	lsl.w	r7, r7, r8
 800168a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001690:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	d119      	bne.n	80016c8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001694:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001698:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80016a8:	f04f 0e0f 	mov.w	lr, #15
 80016ac:	fa0e fe0b 	lsl.w	lr, lr, fp
 80016b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b4:	690f      	ldr	r7, [r1, #16]
 80016b6:	fa07 f70b 	lsl.w	r7, r7, fp
 80016ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80016be:	f8ca 7020 	str.w	r7, [sl, #32]
 80016c2:	e001      	b.n	80016c8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	2c03      	cmp	r4, #3
 80016c6:	d1da      	bne.n	800167e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80016c8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ca:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ce:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d2:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80016d8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016da:	d054      	beq.n	8001786 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	2400      	movs	r4, #0
 80016de:	9401      	str	r4, [sp, #4]
 80016e0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80016e4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80016e8:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80016ec:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80016f0:	f023 0703 	bic.w	r7, r3, #3
 80016f4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80016f8:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80016fc:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001700:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001702:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001708:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800170c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001710:	240f      	movs	r4, #15
 8001712:	fa04 f40c 	lsl.w	r4, r4, ip
 8001716:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171a:	4c23      	ldr	r4, [pc, #140]	@ (80017a8 <HAL_GPIO_Init+0x184>)
 800171c:	42a0      	cmp	r0, r4
 800171e:	d039      	beq.n	8001794 <HAL_GPIO_Init+0x170>
 8001720:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001724:	42a0      	cmp	r0, r4
 8001726:	d037      	beq.n	8001798 <HAL_GPIO_Init+0x174>
 8001728:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800172c:	42a0      	cmp	r0, r4
 800172e:	d035      	beq.n	800179c <HAL_GPIO_Init+0x178>
 8001730:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001734:	42a0      	cmp	r0, r4
 8001736:	d033      	beq.n	80017a0 <HAL_GPIO_Init+0x17c>
 8001738:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800173c:	42a0      	cmp	r0, r4
 800173e:	bf14      	ite	ne
 8001740:	2407      	movne	r4, #7
 8001742:	2404      	moveq	r4, #4
 8001744:	fa04 f40c 	lsl.w	r4, r4, ip
 8001748:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800174c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 800174e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001750:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001752:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001756:	bf0c      	ite	eq
 8001758:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800175a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 800175c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800175e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001764:	bf0c      	ite	eq
 8001766:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001768:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 800176a:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800176c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001772:	bf0c      	ite	eq
 8001774:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001776:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8001778:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177c:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800177e:	bf54      	ite	pl
 8001780:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001782:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001784:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	3301      	adds	r3, #1
 8001788:	2b10      	cmp	r3, #16
 800178a:	f47f af51 	bne.w	8001630 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800178e:	b003      	add	sp, #12
 8001790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001794:	2400      	movs	r4, #0
 8001796:	e7d5      	b.n	8001744 <HAL_GPIO_Init+0x120>
 8001798:	2401      	movs	r4, #1
 800179a:	e7d3      	b.n	8001744 <HAL_GPIO_Init+0x120>
 800179c:	2402      	movs	r4, #2
 800179e:	e7d1      	b.n	8001744 <HAL_GPIO_Init+0x120>
 80017a0:	2403      	movs	r4, #3
 80017a2:	e7cf      	b.n	8001744 <HAL_GPIO_Init+0x120>
 80017a4:	40013c00 	.word	0x40013c00
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	b10a      	cbz	r2, 80017b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b2:	6181      	str	r1, [r0, #24]
  }
}
 80017b4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	0409      	lsls	r1, r1, #16
 80017b8:	e7fb      	b.n	80017b2 <HAL_GPIO_WritePin+0x2>

080017ba <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ba:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017bc:	ea01 0203 	and.w	r2, r1, r3
 80017c0:	ea21 0103 	bic.w	r1, r1, r3
 80017c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80017c8:	6181      	str	r1, [r0, #24]
}
 80017ca:	4770      	bx	lr

080017cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d0:	4604      	mov	r4, r0
 80017d2:	b340      	cbz	r0, 8001826 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d4:	6803      	ldr	r3, [r0, #0]
 80017d6:	07de      	lsls	r6, r3, #31
 80017d8:	d410      	bmi.n	80017fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	079d      	lsls	r5, r3, #30
 80017de:	d45b      	bmi.n	8001898 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	0719      	lsls	r1, r3, #28
 80017e4:	f100 809d 	bmi.w	8001922 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	075a      	lsls	r2, r3, #29
 80017ec:	f100 80bd 	bmi.w	800196a <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f0:	69a3      	ldr	r3, [r4, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8124 	bne.w	8001a40 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2000      	movs	r0, #0
 80017fa:	e02c      	b.n	8001856 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	f002 020c 	and.w	r2, r2, #12
 8001804:	2a04      	cmp	r2, #4
 8001806:	d007      	beq.n	8001818 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800180e:	2a08      	cmp	r2, #8
 8001810:	d10b      	bne.n	800182a <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0259      	lsls	r1, r3, #9
 8001816:	d508      	bpl.n	800182a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b86      	ldr	r3, [pc, #536]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	039a      	lsls	r2, r3, #14
 800181e:	d5dc      	bpl.n	80017da <HAL_RCC_OscConfig+0xe>
 8001820:	6863      	ldr	r3, [r4, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1d9      	bne.n	80017da <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e015      	b.n	8001856 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	6863      	ldr	r3, [r4, #4]
 800182c:	4d81      	ldr	r5, [pc, #516]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 800182e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001832:	d113      	bne.n	800185c <HAL_RCC_OscConfig+0x90>
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800183c:	f7ff fe5e 	bl	80014fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001840:	4e7c      	ldr	r6, [pc, #496]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8001842:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001844:	6833      	ldr	r3, [r6, #0]
 8001846:	039b      	lsls	r3, r3, #14
 8001848:	d4c7      	bmi.n	80017da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184a:	f7ff fe57 	bl	80014fc <HAL_GetTick>
 800184e:	1b40      	subs	r0, r0, r5
 8001850:	2864      	cmp	r0, #100	@ 0x64
 8001852:	d9f7      	bls.n	8001844 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001854:	2003      	movs	r0, #3
}
 8001856:	b002      	add	sp, #8
 8001858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001860:	d104      	bne.n	800186c <HAL_RCC_OscConfig+0xa0>
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001868:	602b      	str	r3, [r5, #0]
 800186a:	e7e3      	b.n	8001834 <HAL_RCC_OscConfig+0x68>
 800186c:	682a      	ldr	r2, [r5, #0]
 800186e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001872:	602a      	str	r2, [r5, #0]
 8001874:	682a      	ldr	r2, [r5, #0]
 8001876:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800187a:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1dd      	bne.n	800183c <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8001880:	f7ff fe3c 	bl	80014fc <HAL_GetTick>
 8001884:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	039f      	lsls	r7, r3, #14
 800188a:	d5a6      	bpl.n	80017da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fe36 	bl	80014fc <HAL_GetTick>
 8001890:	1b80      	subs	r0, r0, r6
 8001892:	2864      	cmp	r0, #100	@ 0x64
 8001894:	d9f7      	bls.n	8001886 <HAL_RCC_OscConfig+0xba>
 8001896:	e7dd      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001898:	4b66      	ldr	r3, [pc, #408]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	f012 0f0c 	tst.w	r2, #12
 80018a0:	d007      	beq.n	80018b2 <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018a8:	2a08      	cmp	r2, #8
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	025d      	lsls	r5, r3, #9
 80018b0:	d40e      	bmi.n	80018d0 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	4a60      	ldr	r2, [pc, #384]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	0799      	lsls	r1, r3, #30
 80018b8:	d502      	bpl.n	80018c0 <HAL_RCC_OscConfig+0xf4>
 80018ba:	68e3      	ldr	r3, [r4, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d1b2      	bne.n	8001826 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	6921      	ldr	r1, [r4, #16]
 80018c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018cc:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e787      	b.n	80017e0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018d0:	68e2      	ldr	r2, [r4, #12]
 80018d2:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	b1b2      	cbz	r2, 8001904 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018da:	f7ff fe0f 	bl	80014fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	4d55      	ldr	r5, [pc, #340]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80018e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	682b      	ldr	r3, [r5, #0]
 80018e4:	079b      	lsls	r3, r3, #30
 80018e6:	d507      	bpl.n	80018f8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	6922      	ldr	r2, [r4, #16]
 80018ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	e773      	b.n	80017e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fe00 	bl	80014fc <HAL_GetTick>
 80018fc:	1b80      	subs	r0, r0, r6
 80018fe:	2802      	cmp	r0, #2
 8001900:	d9ef      	bls.n	80018e2 <HAL_RCC_OscConfig+0x116>
 8001902:	e7a7      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001904:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001906:	f7ff fdf9 	bl	80014fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4e4a      	ldr	r6, [pc, #296]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800190c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	6833      	ldr	r3, [r6, #0]
 8001910:	079f      	lsls	r7, r3, #30
 8001912:	f57f af65 	bpl.w	80017e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fdf1 	bl	80014fc <HAL_GetTick>
 800191a:	1b40      	subs	r0, r0, r5
 800191c:	2802      	cmp	r0, #2
 800191e:	d9f6      	bls.n	800190e <HAL_RCC_OscConfig+0x142>
 8001920:	e798      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001922:	6962      	ldr	r2, [r4, #20]
 8001924:	4b44      	ldr	r3, [pc, #272]	@ (8001a38 <HAL_RCC_OscConfig+0x26c>)
 8001926:	b182      	cbz	r2, 800194a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001928:	2201      	movs	r2, #1
 800192a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800192e:	f7ff fde5 	bl	80014fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4e40      	ldr	r6, [pc, #256]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001934:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001938:	079b      	lsls	r3, r3, #30
 800193a:	f53f af55 	bmi.w	80017e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff fddd 	bl	80014fc <HAL_GetTick>
 8001942:	1b40      	subs	r0, r0, r5
 8001944:	2802      	cmp	r0, #2
 8001946:	d9f6      	bls.n	8001936 <HAL_RCC_OscConfig+0x16a>
 8001948:	e784      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800194a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800194e:	f7ff fdd5 	bl	80014fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	4e38      	ldr	r6, [pc, #224]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001954:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001958:	079f      	lsls	r7, r3, #30
 800195a:	f57f af45 	bpl.w	80017e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fdcd 	bl	80014fc <HAL_GetTick>
 8001962:	1b40      	subs	r0, r0, r5
 8001964:	2802      	cmp	r0, #2
 8001966:	d9f6      	bls.n	8001956 <HAL_RCC_OscConfig+0x18a>
 8001968:	e774      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 800196c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800196e:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8001972:	d128      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001978:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001988:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4d2c      	ldr	r5, [pc, #176]	@ (8001a3c <HAL_RCC_OscConfig+0x270>)
 800198c:	682b      	ldr	r3, [r5, #0]
 800198e:	05d8      	lsls	r0, r3, #23
 8001990:	d51b      	bpl.n	80019ca <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	68a3      	ldr	r3, [r4, #8]
 8001994:	4d27      	ldr	r5, [pc, #156]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 8001996:	2b01      	cmp	r3, #1
 8001998:	d127      	bne.n	80019ea <HAL_RCC_OscConfig+0x21e>
 800199a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80019a2:	f7ff fdab 	bl	80014fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a6:	4e23      	ldr	r6, [pc, #140]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80019a8:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80019b0:	079a      	lsls	r2, r3, #30
 80019b2:	d539      	bpl.n	8001a28 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 80019b4:	2f00      	cmp	r7, #0
 80019b6:	f43f af1b 	beq.w	80017f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <HAL_RCC_OscConfig+0x268>)
 80019bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80019be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c4:	e714      	b.n	80017f0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2700      	movs	r7, #0
 80019c8:	e7df      	b.n	800198a <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	682b      	ldr	r3, [r5, #0]
 80019cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019d2:	f7ff fd93 	bl	80014fc <HAL_GetTick>
 80019d6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	05d9      	lsls	r1, r3, #23
 80019dc:	d4d9      	bmi.n	8001992 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fd8d 	bl	80014fc <HAL_GetTick>
 80019e2:	1b80      	subs	r0, r0, r6
 80019e4:	2802      	cmp	r0, #2
 80019e6:	d9f7      	bls.n	80019d8 <HAL_RCC_OscConfig+0x20c>
 80019e8:	e734      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d104      	bne.n	80019f8 <HAL_RCC_OscConfig+0x22c>
 80019ee:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	672b      	str	r3, [r5, #112]	@ 0x70
 80019f6:	e7d0      	b.n	800199a <HAL_RCC_OscConfig+0x1ce>
 80019f8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	672a      	str	r2, [r5, #112]	@ 0x70
 8001a00:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001a02:	f022 0204 	bic.w	r2, r2, #4
 8001a06:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ca      	bne.n	80019a2 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fd76 	bl	80014fc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001a14:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a16:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001a18:	079b      	lsls	r3, r3, #30
 8001a1a:	d5cb      	bpl.n	80019b4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fd6e 	bl	80014fc <HAL_GetTick>
 8001a20:	1b80      	subs	r0, r0, r6
 8001a22:	4540      	cmp	r0, r8
 8001a24:	d9f7      	bls.n	8001a16 <HAL_RCC_OscConfig+0x24a>
 8001a26:	e715      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f7ff fd68 	bl	80014fc <HAL_GetTick>
 8001a2c:	1b40      	subs	r0, r0, r5
 8001a2e:	4540      	cmp	r0, r8
 8001a30:	d9bd      	bls.n	80019ae <HAL_RCC_OscConfig+0x1e2>
 8001a32:	e70f      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
 8001a34:	40023800 	.word	0x40023800
 8001a38:	42470000 	.word	0x42470000
 8001a3c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a40:	4d37      	ldr	r5, [pc, #220]	@ (8001b20 <HAL_RCC_OscConfig+0x354>)
 8001a42:	68aa      	ldr	r2, [r5, #8]
 8001a44:	f002 020c 	and.w	r2, r2, #12
 8001a48:	2a08      	cmp	r2, #8
 8001a4a:	d03e      	beq.n	8001aca <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <HAL_RCC_OscConfig+0x358>)
 8001a50:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8001a54:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a56:	d12b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8001a58:	f7ff fd50 	bl	80014fc <HAL_GetTick>
 8001a5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	0199      	lsls	r1, r3, #6
 8001a62:	d41f      	bmi.n	8001aa4 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a64:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001a6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001a72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a76:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a78:	0852      	lsrs	r2, r2, #1
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a84:	4d26      	ldr	r5, [pc, #152]	@ (8001b20 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8001a86:	2201      	movs	r2, #1
 8001a88:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fd37 	bl	80014fc <HAL_GetTick>
 8001a8e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	019a      	lsls	r2, r3, #6
 8001a94:	f53f aeb0 	bmi.w	80017f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff fd30 	bl	80014fc <HAL_GetTick>
 8001a9c:	1b00      	subs	r0, r0, r4
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d9f6      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2c4>
 8001aa2:	e6d7      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fd2a 	bl	80014fc <HAL_GetTick>
 8001aa8:	1b80      	subs	r0, r0, r6
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9d7      	bls.n	8001a5e <HAL_RCC_OscConfig+0x292>
 8001aae:	e6d1      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fd24 	bl	80014fc <HAL_GetTick>
 8001ab4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	f57f ae9d 	bpl.w	80017f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fd1d 	bl	80014fc <HAL_GetTick>
 8001ac2:	1b00      	subs	r0, r0, r4
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ea>
 8001ac8:	e6c4      	b.n	8001854 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	f43f aeab 	beq.w	8001826 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8001ad0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	4291      	cmp	r1, r2
 8001ada:	f47f aea4 	bne.w	8001826 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	428a      	cmp	r2, r1
 8001ae6:	f47f ae9e 	bne.w	8001826 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aec:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001af0:	401a      	ands	r2, r3
 8001af2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001af6:	f47f ae96 	bne.w	8001826 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001afc:	0852      	lsrs	r2, r2, #1
 8001afe:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001b02:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b04:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b08:	f47f ae8d 	bne.w	8001826 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b0c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b0e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b12:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001b16:	bf14      	ite	ne
 8001b18:	2001      	movne	r0, #1
 8001b1a:	2000      	moveq	r0, #0
 8001b1c:	e69b      	b.n	8001856 <HAL_RCC_OscConfig+0x8a>
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	42470000 	.word	0x42470000

08001b28 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4913      	ldr	r1, [pc, #76]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b2c:	688b      	ldr	r3, [r1, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d01c      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x48>
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b40:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b44:	bf14      	ite	ne
 8001b46:	480d      	ldrne	r0, [pc, #52]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b48:	480d      	ldreq	r0, [pc, #52]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b4e:	bf18      	it	ne
 8001b50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	fba1 0100 	umull	r0, r1, r1, r0
 8001b5a:	f7ff f93b 	bl	8000dd4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001b6a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b6e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x54>)
 8001b72:	e7fc      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001b76:	e7fa      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x46>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	007a1200 	.word	0x007a1200
 8001b80:	00f42400 	.word	0x00f42400

08001b84 <HAL_RCC_ClockConfig>:
{
 8001b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b88:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	b910      	cbnz	r0, 8001b94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
}
 8001b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_RCC_ClockConfig+0x120>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f002 0207 	and.w	r2, r2, #7
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	d328      	bcc.n	8001bf2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	6821      	ldr	r1, [r4, #0]
 8001ba2:	078f      	lsls	r7, r1, #30
 8001ba4:	d42d      	bmi.n	8001c02 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	07c8      	lsls	r0, r1, #31
 8001ba8:	d440      	bmi.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001baa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_RCC_ClockConfig+0x120>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f002 0207 	and.w	r2, r2, #7
 8001bb2:	42aa      	cmp	r2, r5
 8001bb4:	d865      	bhi.n	8001c82 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	0751      	lsls	r1, r2, #29
 8001bba:	d46b      	bmi.n	8001c94 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	0713      	lsls	r3, r2, #28
 8001bbe:	d507      	bpl.n	8001bd0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc0:	4a39      	ldr	r2, [pc, #228]	@ (8001ca8 <HAL_RCC_ClockConfig+0x124>)
 8001bc2:	6921      	ldr	r1, [r4, #16]
 8001bc4:	6893      	ldr	r3, [r2, #8]
 8001bc6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001bca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd0:	f7ff ffaa 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_RCC_ClockConfig+0x124>)
 8001bd6:	4a35      	ldr	r2, [pc, #212]	@ (8001cac <HAL_RCC_ClockConfig+0x128>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	40d8      	lsrs	r0, r3
 8001be2:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <HAL_RCC_ClockConfig+0x12c>)
 8001be4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_RCC_ClockConfig+0x130>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	f7ff fc3d 	bl	8001468 <HAL_InitTick>
  return HAL_OK;
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e7ce      	b.n	8001b90 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	428b      	cmp	r3, r1
 8001bfe:	d1c6      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xa>
 8001c00:	e7ce      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <HAL_RCC_ClockConfig+0x124>)
 8001c04:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	bf1e      	ittt	ne
 8001c0a:	689a      	ldrne	r2, [r3, #8]
 8001c0c:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8001c10:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	bf42      	ittt	mi
 8001c16:	689a      	ldrmi	r2, [r3, #8]
 8001c18:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8001c1c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	68a0      	ldr	r0, [r4, #8]
 8001c22:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001c26:	4302      	orrs	r2, r0
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e7bc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2c:	6862      	ldr	r2, [r4, #4]
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_RCC_ClockConfig+0x124>)
 8001c30:	2a01      	cmp	r2, #1
 8001c32:	d11c      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	d0a8      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4e1a      	ldr	r6, [pc, #104]	@ (8001ca8 <HAL_RCC_ClockConfig+0x124>)
 8001c3e:	68b3      	ldr	r3, [r6, #8]
 8001c40:	f023 0303 	bic.w	r3, r3, #3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001c48:	f7ff fc58 	bl	80014fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001c50:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	68b3      	ldr	r3, [r6, #8]
 8001c54:	6862      	ldr	r2, [r4, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c5e:	d0a4      	beq.n	8001baa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff fc4c 	bl	80014fc <HAL_GetTick>
 8001c64:	1bc0      	subs	r0, r0, r7
 8001c66:	4540      	cmp	r0, r8
 8001c68:	d9f3      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	e790      	b.n	8001b90 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	1e91      	subs	r1, r2, #2
 8001c70:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c74:	d802      	bhi.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c7a:	e7de      	b.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	f013 0f02 	tst.w	r3, #2
 8001c80:	e7db      	b.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	b2ea      	uxtb	r2, r5
 8001c84:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	42ab      	cmp	r3, r5
 8001c8e:	f47f af7e 	bne.w	8001b8e <HAL_RCC_ClockConfig+0xa>
 8001c92:	e790      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4904      	ldr	r1, [pc, #16]	@ (8001ca8 <HAL_RCC_ClockConfig+0x124>)
 8001c96:	68e0      	ldr	r0, [r4, #12]
 8001c98:	688b      	ldr	r3, [r1, #8]
 8001c9a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001c9e:	4303      	orrs	r3, r0
 8001ca0:	608b      	str	r3, [r1, #8]
 8001ca2:	e78b      	b.n	8001bbc <HAL_RCC_ClockConfig+0x38>
 8001ca4:	40023c00 	.word	0x40023c00
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	0800b8f4 	.word	0x0800b8f4
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001cb8:	4b01      	ldr	r3, [pc, #4]	@ (8001cc0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	4a03      	ldr	r2, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cd2:	6810      	ldr	r0, [r2, #0]
}
 8001cd4:	40d8      	lsrs	r0, r3
 8001cd6:	4770      	bx	lr
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	0800b8ec 	.word	0x0800b8ec
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	4a03      	ldr	r2, [pc, #12]	@ (8001d00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cf2:	6810      	ldr	r0, [r2, #0]
}
 8001cf4:	40d8      	lsrs	r0, r3
 8001cf6:	4770      	bx	lr
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	0800b8ec 	.word	0x0800b8ec
 8001d00:	20000000 	.word	0x20000000

08001d04 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d06:	f102 030c 	add.w	r3, r2, #12
 8001d0a:	e853 3f00 	ldrex	r3, [r3]
 8001d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d12:	320c      	adds	r2, #12
 8001d14:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001d18:	6802      	ldr	r2, [r0, #0]
 8001d1a:	2900      	cmp	r1, #0
 8001d1c:	d1f2      	bne.n	8001d04 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1e:	f102 0314 	add.w	r3, r2, #20
 8001d22:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d26:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d2a:	f102 0c14 	add.w	ip, r2, #20
 8001d2e:	e84c 3100 	strex	r1, r3, [ip]
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d1f3      	bne.n	8001d1e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10b      	bne.n	8001d54 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3c:	f102 030c 	add.w	r3, r2, #12
 8001d40:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d44:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d48:	f102 0c0c 	add.w	ip, r2, #12
 8001d4c:	e84c 3100 	strex	r1, r3, [ip]
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d1f3      	bne.n	8001d3c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d54:	2320      	movs	r3, #32
 8001d56:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001d5e:	4770      	bx	lr

08001d60 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d60:	6802      	ldr	r2, [r0, #0]
 8001d62:	68c1      	ldr	r1, [r0, #12]
{
 8001d64:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d66:	6913      	ldr	r3, [r2, #16]
 8001d68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6113      	str	r3, [r2, #16]
{
 8001d70:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d72:	6883      	ldr	r3, [r0, #8]
 8001d74:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001d76:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d78:	4303      	orrs	r3, r0
 8001d7a:	6968      	ldr	r0, [r5, #20]
 8001d7c:	4303      	orrs	r3, r0
 8001d7e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001d80:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8001d84:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d88:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d8e:	6953      	ldr	r3, [r2, #20]
 8001d90:	69a9      	ldr	r1, [r5, #24]
 8001d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <UART_SetConfig+0xb8>)
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d003      	beq.n	8001da8 <UART_SetConfig+0x48>
 8001da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d124      	bne.n	8001df2 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001da8:	f7ff ff9c 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dac:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dae:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001db0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001db4:	e9d5 4300 	ldrd	r4, r3, [r5]
 8001db8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dbc:	d11c      	bne.n	8001df8 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dbe:	18da      	adds	r2, r3, r3
 8001dc0:	f04f 0500 	mov.w	r5, #0
 8001dc4:	eb45 0305 	adc.w	r3, r5, r5
 8001dc8:	f7ff f804 	bl	8000dd4 <__aeabi_uldivmod>
 8001dcc:	2264      	movs	r2, #100	@ 0x64
 8001dce:	fbb0 f1f2 	udiv	r1, r0, r2
 8001dd2:	fb02 0311 	mls	r3, r2, r1, r0
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	3332      	adds	r3, #50	@ 0x32
 8001dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dde:	f003 0207 	and.w	r2, r3, #7
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001de8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001dec:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dee:	60a3      	str	r3, [r4, #8]
  }
}
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001df2:	f7ff ff67 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8001df6:	e7d9      	b.n	8001dac <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001df8:	009a      	lsls	r2, r3, #2
 8001dfa:	0f9b      	lsrs	r3, r3, #30
 8001dfc:	f7fe ffea 	bl	8000dd4 <__aeabi_uldivmod>
 8001e00:	2264      	movs	r2, #100	@ 0x64
 8001e02:	fbb0 f1f2 	udiv	r1, r0, r2
 8001e06:	fb02 0311 	mls	r3, r2, r1, r0
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	3332      	adds	r3, #50	@ 0x32
 8001e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e12:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001e16:	e7ea      	b.n	8001dee <UART_SetConfig+0x8e>
 8001e18:	40011000 	.word	0x40011000

08001e1c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e1e:	4605      	mov	r5, r0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4617      	mov	r7, r2
 8001e24:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e26:	682a      	ldr	r2, [r5, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	ea34 0303 	bics.w	r3, r4, r3
 8001e2e:	d101      	bne.n	8001e34 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
 8001e32:	e021      	b.n	8001e78 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	1c70      	adds	r0, r6, #1
 8001e36:	d0f7      	beq.n	8001e28 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e38:	f7ff fb60 	bl	80014fc <HAL_GetTick>
 8001e3c:	1bc0      	subs	r0, r0, r7
 8001e3e:	4286      	cmp	r6, r0
 8001e40:	d31c      	bcc.n	8001e7c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8001e42:	b1de      	cbz	r6, 8001e7c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	0751      	lsls	r1, r2, #29
 8001e4a:	d5ec      	bpl.n	8001e26 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001e4c:	2c80      	cmp	r4, #128	@ 0x80
 8001e4e:	d0ea      	beq.n	8001e26 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001e50:	2c40      	cmp	r4, #64	@ 0x40
 8001e52:	d0e8      	beq.n	8001e26 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	0712      	lsls	r2, r2, #28
 8001e58:	d5e5      	bpl.n	8001e26 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	9401      	str	r4, [sp, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	9201      	str	r2, [sp, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001e66:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e68:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001e6a:	f7ff ff4b 	bl	8001d04 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e6e:	2308      	movs	r3, #8
 8001e70:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001e72:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	b003      	add	sp, #12
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	e7fb      	b.n	8001e78 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08001e80 <HAL_UART_Init>:
{
 8001e80:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001e82:	4604      	mov	r4, r0
 8001e84:	b348      	cbz	r0, 8001eda <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e86:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001e8a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8e:	b91b      	cbnz	r3, 8001e98 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e90:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001e94:	f7ff fa54 	bl	8001340 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e98:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e9a:	2324      	movs	r3, #36	@ 0x24
 8001e9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001ea0:	68d3      	ldr	r3, [r2, #12]
 8001ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ea6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ff59 	bl	8001d60 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001eb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ebe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ec6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001eca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ece:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ed2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ed6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001ed8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
 8001edc:	e7fc      	b.n	8001ed8 <HAL_UART_Init+0x58>

08001ede <HAL_UART_Transmit>:
{
 8001ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ee2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ee4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001ee8:	2b20      	cmp	r3, #32
{
 8001eea:	4604      	mov	r4, r0
 8001eec:	460e      	mov	r6, r1
 8001eee:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ef0:	d13f      	bne.n	8001f72 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d03f      	beq.n	8001f76 <HAL_UART_Transmit+0x98>
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d03d      	beq.n	8001f76 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efa:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	2500      	movs	r5, #0
 8001efe:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f00:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001f04:	f7ff fafa 	bl	80014fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f08:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8001f0a:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8001f10:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8001f12:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f14:	d103      	bne.n	8001f1e <HAL_UART_Transmit+0x40>
 8001f16:	6923      	ldr	r3, [r4, #16]
 8001f18:	b90b      	cbnz	r3, 8001f1e <HAL_UART_Transmit+0x40>
 8001f1a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001f1c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8001f1e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b953      	cbnz	r3, 8001f3a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f24:	4643      	mov	r3, r8
 8001f26:	464a      	mov	r2, r9
 8001f28:	2140      	movs	r1, #64	@ 0x40
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7ff ff76 	bl	8001e1c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001f30:	2320      	movs	r3, #32
 8001f32:	b950      	cbnz	r0, 8001f4a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8001f34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001f38:	e00a      	b.n	8001f50 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3a:	4643      	mov	r3, r8
 8001f3c:	464a      	mov	r2, r9
 8001f3e:	2180      	movs	r1, #128	@ 0x80
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff ff6b 	bl	8001e1c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001f46:	b128      	cbz	r0, 8001f54 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001f4e:	2003      	movs	r0, #3
}
 8001f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f54:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001f56:	b94e      	cbnz	r6, 8001f6c <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f58:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f60:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001f62:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8001f64:	3901      	subs	r1, #1
 8001f66:	b289      	uxth	r1, r1
 8001f68:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8001f6a:	e7d8      	b.n	8001f1e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f6c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001f70:	e7f6      	b.n	8001f60 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001f72:	2002      	movs	r0, #2
 8001f74:	e7ec      	b.n	8001f50 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
 8001f78:	e7ea      	b.n	8001f50 <HAL_UART_Transmit+0x72>

08001f7a <HAL_UART_Receive>:
{
 8001f7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f7e:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f80:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8001f84:	2b20      	cmp	r3, #32
{
 8001f86:	4604      	mov	r4, r0
 8001f88:	460e      	mov	r6, r1
 8001f8a:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8c:	d148      	bne.n	8002020 <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8001f8e:	2900      	cmp	r1, #0
 8001f90:	d048      	beq.n	8002024 <HAL_UART_Receive+0xaa>
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d046      	beq.n	8002024 <HAL_UART_Receive+0xaa>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f96:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f98:	2500      	movs	r5, #0
 8001f9a:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f9c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa0:	6305      	str	r5, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8001fa2:	f7ff faab 	bl	80014fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001fa8:	f8a4 902c 	strh.w	r9, [r4, #44]	@ 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8001fb0:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8001fb2:	f8a4 902e 	strh.w	r9, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb6:	d103      	bne.n	8001fc0 <HAL_UART_Receive+0x46>
 8001fb8:	6923      	ldr	r3, [r4, #16]
 8001fba:	b90b      	cbnz	r3, 8001fc0 <HAL_UART_Receive+0x46>
 8001fbc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001fbe:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8001fc0:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 8001fc2:	b280      	uxth	r0, r0
 8001fc4:	b918      	cbnz	r0, 8001fce <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8001fcc:	e00a      	b.n	8001fe4 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4642      	mov	r2, r8
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff ff21 	bl	8001e1c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001fda:	b128      	cbz	r0, 8001fe8 <HAL_UART_Receive+0x6e>
        huart->RxState = HAL_UART_STATE_READY;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8001fe2:	2003      	movs	r0, #3
}
 8001fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fe8:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8001fea:	b94e      	cbnz	r6, 8002000 <HAL_UART_Receive+0x86>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff2:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001ff6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8001ffe:	e7df      	b.n	8001fc0 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002000:	68a2      	ldr	r2, [r4, #8]
 8002002:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8002006:	d002      	beq.n	800200e <HAL_UART_Receive+0x94>
 8002008:	b932      	cbnz	r2, 8002018 <HAL_UART_Receive+0x9e>
 800200a:	6922      	ldr	r2, [r4, #16]
 800200c:	b922      	cbnz	r2, 8002018 <HAL_UART_Receive+0x9e>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	b2c9      	uxtb	r1, r1
 8002012:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8002016:	e7ee      	b.n	8001ff6 <HAL_UART_Receive+0x7c>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800201e:	e7f8      	b.n	8002012 <HAL_UART_Receive+0x98>
    return HAL_BUSY;
 8002020:	2002      	movs	r0, #2
 8002022:	e7df      	b.n	8001fe4 <HAL_UART_Receive+0x6a>
      return  HAL_ERROR;
 8002024:	2001      	movs	r0, #1
 8002026:	e7dd      	b.n	8001fe4 <HAL_UART_Receive+0x6a>

08002028 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800202a:	4d0e      	ldr	r5, [pc, #56]	@ (8002064 <write_callback+0x3c>)
{
 800202c:	460e      	mov	r6, r1
 800202e:	4614      	mov	r4, r2
  bool res = true;
 8002030:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8002032:	2700      	movs	r7, #0
  while (count) {
 8002034:	b93c      	cbnz	r4, 8002046 <write_callback+0x1e>
 8002036:	e00b      	b.n	8002050 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8002038:	18ea      	adds	r2, r5, r3
 800203a:	f816 1b01 	ldrb.w	r1, [r6], #1
 800203e:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002040:	3301      	adds	r3, #1
      count--;
 8002042:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002044:	702b      	strb	r3, [r5, #0]
 8002046:	782b      	ldrb	r3, [r5, #0]
 8002048:	2b1f      	cmp	r3, #31
 800204a:	d802      	bhi.n	8002052 <write_callback+0x2a>
 800204c:	2c00      	cmp	r4, #0
 800204e:	d1f3      	bne.n	8002038 <write_callback+0x10>
    }
  }
  return res;
}
 8002050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002052:	2b20      	cmp	r3, #32
 8002054:	d1ee      	bne.n	8002034 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002056:	2121      	movs	r1, #33	@ 0x21
 8002058:	4628      	mov	r0, r5
 800205a:	f000 fc7f 	bl	800295c <ioRawWriteBuffer>
      o_packet.pw = 0;
 800205e:	702f      	strb	r7, [r5, #0]
 8002060:	e7e8      	b.n	8002034 <write_callback+0xc>
 8002062:	bf00      	nop
 8002064:	20000c59 	.word	0x20000c59

08002068 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800206c:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 800206e:	4615      	mov	r5, r2
 8002070:	b35a      	cbz	r2, 80020ca <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002072:	4e20      	ldr	r6, [pc, #128]	@ (80020f4 <read_callback+0x8c>)
 8002074:	4f20      	ldr	r7, [pc, #128]	@ (80020f8 <read_callback+0x90>)
 8002076:	7833      	ldrb	r3, [r6, #0]
 8002078:	2bff      	cmp	r3, #255	@ 0xff
 800207a:	d008      	beq.n	800208e <read_callback+0x26>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800207c:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80020f4 <read_callback+0x8c>
{
 8002080:	f04f 0900 	mov.w	r9, #0
    res = read_packet();

  if (res == false)
    return res;

  while (count) {
 8002084:	683b      	ldr	r3, [r7, #0]
{
 8002086:	2200      	movs	r2, #0
 8002088:	18f0      	adds	r0, r6, r3
 800208a:	1b1b      	subs	r3, r3, r4
 800208c:	e013      	b.n	80020b6 <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800208e:	2121      	movs	r1, #33	@ 0x21
 8002090:	4630      	mov	r0, r6
 8002092:	f000 fc71 	bl	8002978 <ioRawReadBuffer>
  i_ridx = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
  if (res == false)
 800209a:	2800      	cmp	r0, #0
 800209c:	d1ee      	bne.n	800207c <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 800209e:	b003      	add	sp, #12
 80020a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 80020a4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80020a8:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80020ac:	7832      	ldrb	r2, [r6, #0]
 80020ae:	3a01      	subs	r2, #1
 80020b0:	7032      	strb	r2, [r6, #0]
      count--;
 80020b2:	3d01      	subs	r5, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80020b4:	2201      	movs	r2, #1
 80020b6:	f896 c000 	ldrb.w	ip, [r6]
 80020ba:	18e1      	adds	r1, r4, r3
 80020bc:	f1bc 0f00 	cmp.w	ip, #0
 80020c0:	d005      	beq.n	80020ce <read_callback+0x66>
 80020c2:	2d00      	cmp	r5, #0
 80020c4:	d1ee      	bne.n	80020a4 <read_callback+0x3c>
 80020c6:	b102      	cbz	r2, 80020ca <read_callback+0x62>
 80020c8:	6039      	str	r1, [r7, #0]
    return true;
 80020ca:	2001      	movs	r0, #1
 80020cc:	e7e7      	b.n	800209e <read_callback+0x36>
 80020ce:	b102      	cbz	r2, 80020d2 <read_callback+0x6a>
 80020d0:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 80020d2:	2d00      	cmp	r5, #0
 80020d4:	d0f9      	beq.n	80020ca <read_callback+0x62>
      uint8_t sync = 0xAA;
 80020d6:	23aa      	movs	r3, #170	@ 0xaa
      ioRawWriteBuffer(&sync, 1);
 80020d8:	2101      	movs	r1, #1
 80020da:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 80020de:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 80020e2:	f000 fc3b 	bl	800295c <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 80020e6:	2121      	movs	r1, #33	@ 0x21
 80020e8:	4640      	mov	r0, r8
 80020ea:	f000 fc45 	bl	8002978 <ioRawReadBuffer>
  i_ridx = 0;
 80020ee:	f8c7 9000 	str.w	r9, [r7]
  return res;
 80020f2:	e7c7      	b.n	8002084 <read_callback+0x1c>
 80020f4:	20000c38 	.word	0x20000c38
 80020f8:	20000c34 	.word	0x20000c34

080020fc <pb_io_flush_ostream>:
{
 80020fc:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80020fe:	4c06      	ldr	r4, [pc, #24]	@ (8002118 <pb_io_flush_ostream+0x1c>)
 8002100:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002102:	2121      	movs	r1, #33	@ 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002104:	f063 037f 	orn	r3, r3, #127	@ 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002108:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800210a:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800210c:	f000 fc26 	bl	800295c <ioRawWriteBuffer>
  o_packet.pw = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	7023      	strb	r3, [r4, #0]
}
 8002114:	bd10      	pop	{r4, pc}
 8002116:	bf00      	nop
 8002118:	20000c59 	.word	0x20000c59

0800211c <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <pb_io_flush_istream+0x10>)
 800211e:	22ff      	movs	r2, #255	@ 0xff
 8002120:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8002122:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <pb_io_flush_istream+0x14>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000c38 	.word	0x20000c38
 8002130:	20000c34 	.word	0x20000c34

08002134 <pb_io_ostream>:
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
#endif
  return stream;
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <pb_io_ostream+0x14>)
 8002136:	e9c0 2100 	strd	r2, r1, [r0]
 800213a:	f04f 31ff 	mov.w	r1, #4294967295
 800213e:	2200      	movs	r2, #0
 8002140:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	08002029 	.word	0x08002029

0800214c <pb_io_istream>:
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
#endif
  return stream;
 800214c:	4a03      	ldr	r2, [pc, #12]	@ (800215c <pb_io_istream+0x10>)
 800214e:	e9c0 2100 	strd	r2, r1, [r0]
 8002152:	f04f 32ff 	mov.w	r2, #4294967295
 8002156:	6082      	str	r2, [r0, #8]
}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	08002069 	.word	0x08002069

08002160 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8002160:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8002162:	f000 fc17 	bl	8002994 <ioRawDisableLLWrite>
  return 0;
}
 8002166:	2000      	movs	r0, #0
 8002168:	bd08      	pop	{r3, pc}

0800216a <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 800216a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 800216e:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
 8002172:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (size_t i = 0; i < array->size; i++)
 8002176:	2600      	movs	r6, #0
 8002178:	2c00      	cmp	r4, #0
{
 800217a:	4607      	mov	r7, r0
 800217c:	4689      	mov	r9, r1
 800217e:	bf08      	it	eq
 8002180:	2404      	moveq	r4, #4
  for (size_t i = 0; i < array->size; i++)
 8002182:	4635      	mov	r5, r6
 8002184:	f8d8 3000 	ldr.w	r3, [r8]
 8002188:	42ab      	cmp	r3, r5
 800218a:	d801      	bhi.n	8002190 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 800218c:	2001      	movs	r0, #1
 800218e:	e005      	b.n	800219c <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8002190:	4649      	mov	r1, r9
 8002192:	4638      	mov	r0, r7
 8002194:	f002 ffe4 	bl	8005160 <pb_encode_tag_for_field>
 8002198:	b910      	cbnz	r0, 80021a0 <encode_uint32+0x36>
      return false;
 800219a:	2000      	movs	r0, #0
}
 800219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 80021a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 80021a4:	2c02      	cmp	r4, #2
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 80021a6:	bf14      	ite	ne
 80021a8:	599a      	ldrne	r2, [r3, r6]
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 80021aa:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 80021ae:	4638      	mov	r0, r7
 80021b0:	17d3      	asrs	r3, r2, #31
 80021b2:	f002 ff2d 	bl	8005010 <pb_encode_varint>
 80021b6:	4426      	add	r6, r4
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d0ee      	beq.n	800219a <encode_uint32+0x30>
  for (size_t i = 0; i < array->size; i++)
 80021bc:	3501      	adds	r5, #1
 80021be:	e7e1      	b.n	8002184 <encode_uint32+0x1a>

080021c0 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 80021c0:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 80021c2:	6815      	ldr	r5, [r2, #0]
{
 80021c4:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 80021c6:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 80021c8:	f002 ffca 	bl	8005160 <pb_encode_tag_for_field>
 80021cc:	b130      	cbz	r0, 80021dc <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 80021ce:	686a      	ldr	r2, [r5, #4]
 80021d0:	4631      	mov	r1, r6
 80021d2:	4620      	mov	r0, r4
    return false;

  return true;
}
 80021d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 80021d8:	f003 b8f2 	b.w	80053c0 <pb_encode_string>
}
 80021dc:	bd70      	pop	{r4, r5, r6, pc}

080021de <decode_data_cb>:
{
 80021de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 80021e0:	6814      	ldr	r4, [r2, #0]
  uint8_t *pw = (uint8_t *)data->addr;
 80021e2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
{
 80021e6:	4605      	mov	r5, r0
  data->nb_read = 0;
 80021e8:	2300      	movs	r3, #0
    data->nb_read += itsize;
 80021ea:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 80021ec:	68ab      	ldr	r3, [r5, #8]
 80021ee:	b913      	cbnz	r3, 80021f6 <decode_data_cb+0x18>
  return true;
 80021f0:	2001      	movs	r0, #1
}
 80021f2:	b003      	add	sp, #12
 80021f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 80021f6:	2201      	movs	r2, #1
 80021f8:	4669      	mov	r1, sp
 80021fa:	4628      	mov	r0, r5
 80021fc:	f002 fab0 	bl	8004760 <pb_read>
 8002200:	2800      	cmp	r0, #0
 8002202:	d0f6      	beq.n	80021f2 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8002204:	b13f      	cbz	r7, 8002216 <decode_data_cb+0x38>
 8002206:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 8002208:	bfc2      	ittt	gt
 800220a:	f89d 3000 	ldrbgt.w	r3, [sp]
 800220e:	f807 3b01 	strbgt.w	r3, [r7], #1
      maxr--;
 8002212:	f106 36ff 	addgt.w	r6, r6, #4294967295
    data->nb_read += itsize;
 8002216:	68e3      	ldr	r3, [r4, #12]
 8002218:	3301      	adds	r3, #1
 800221a:	e7e6      	b.n	80021ea <decode_data_cb+0xc>

0800221c <aiPbMgrInit>:
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800221e:	4c1b      	ldr	r4, [pc, #108]	@ (800228c <aiPbMgrInit+0x70>)
{
 8002220:	b089      	sub	sp, #36	@ 0x24
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002222:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
 8002226:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8002228:	ae04      	add	r6, sp, #16
{
 800222a:	4605      	mov	r5, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800222c:	4620      	mov	r0, r4
 800222e:	f006 fec4 	bl	8008fba <memset>
  pb_io_stream_init();
 8002232:	f7ff ff95 	bl	8002160 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8002236:	4630      	mov	r0, r6
 8002238:	2100      	movs	r1, #0
 800223a:	f7ff ff87 	bl	800214c <pb_io_istream>
 800223e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002242:	466e      	mov	r6, sp
  pbContextMgr.input = pb_io_istream(0);
 8002244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002248:	2100      	movs	r1, #0
 800224a:	4630      	mov	r0, r6
 800224c:	f7ff ff72 	bl	8002134 <pb_io_ostream>
 8002250:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002254:	f104 070c 	add.w	r7, r4, #12
 8002258:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  pbContextMgr.n_func = 0;
 800225c:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 800225e:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (funcs) {
 8002262:	b97d      	cbnz	r5, 8002284 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002264:	2301      	movs	r3, #1
 8002266:	f884 31d0 	strb.w	r3, [r4, #464]	@ 0x1d0
}
 800226a:	b009      	add	sp, #36	@ 0x24
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 800226e:	320c      	adds	r2, #12
 8002270:	4633      	mov	r3, r6
 8002272:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002274:	6850      	ldr	r0, [r2, #4]
 8002276:	1c5e      	adds	r6, r3, #1
 8002278:	2800      	cmp	r0, #0
 800227a:	d1f8      	bne.n	800226e <aiPbMgrInit+0x52>
 800227c:	b101      	cbz	r1, 8002280 <aiPbMgrInit+0x64>
 800227e:	6223      	str	r3, [r4, #32]
    pbContextMgr.funcs = funcs;
 8002280:	61e5      	str	r5, [r4, #28]
 8002282:	e7ef      	b.n	8002264 <aiPbMgrInit+0x48>
 8002284:	462a      	mov	r2, r5
 8002286:	4619      	mov	r1, r3
 8002288:	e7f4      	b.n	8002274 <aiPbMgrInit+0x58>
 800228a:	bf00      	nop
 800228c:	20000c80 	.word	0x20000c80

08002290 <aiPbStrCopy>:
{
 8002290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002292:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8002294:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <aiPbStrCopy+0x48>)
{
 8002296:	4605      	mov	r5, r0
 8002298:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 800229a:	6810      	ldr	r0, [r2, #0]
 800229c:	6851      	ldr	r1, [r2, #4]
 800229e:	8912      	ldrh	r2, [r2, #8]
 80022a0:	ab01      	add	r3, sp, #4
 80022a2:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 80022a4:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 80022a6:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 80022a8:	f7fd ffea 	bl	8000280 <strlen>
  if (l > max)
 80022ac:	42b0      	cmp	r0, r6
    l = max-1;
 80022ae:	bf88      	it	hi
 80022b0:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 80022b4:	b174      	cbz	r4, 80022d4 <aiPbStrCopy+0x44>
  if (src && l)
 80022b6:	b138      	cbz	r0, 80022c8 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 80022b8:	1c42      	adds	r2, r0, #1
 80022ba:	4629      	mov	r1, r5
 80022bc:	4620      	mov	r0, r4
}
 80022be:	b004      	add	sp, #16
 80022c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 80022c4:	f006 bf1b 	b.w	80090fe <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 80022c8:	ab01      	add	r3, sp, #4
 80022ca:	cb03      	ldmia	r3!, {r0, r1}
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	6020      	str	r0, [r4, #0]
 80022d0:	6061      	str	r1, [r4, #4]
 80022d2:	8123      	strh	r3, [r4, #8]
}
 80022d4:	b004      	add	sp, #16
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	0800b904 	.word	0x0800b904

080022dc <encode_tensor_desc>:
{
 80022dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 80022e0:	6816      	ldr	r6, [r2, #0]
    msg.dims.funcs.encode = encode_uint32;
 80022e2:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 800233c <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80022e6:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8002340 <encode_tensor_desc+0x64>
{
 80022ea:	b09c      	sub	sp, #112	@ 0x70
 80022ec:	4605      	mov	r5, r0
 80022ee:	4688      	mov	r8, r1
  for (size_t i = 0; i < tensors->size; i++)
 80022f0:	2400      	movs	r4, #0
 80022f2:	6873      	ldr	r3, [r6, #4]
 80022f4:	42a3      	cmp	r3, r4
 80022f6:	d801      	bhi.n	80022fc <encode_tensor_desc+0x20>
  return true;
 80022f8:	2001      	movs	r0, #1
 80022fa:	e01c      	b.n	8002336 <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 80022fc:	2264      	movs	r2, #100	@ 0x64
 80022fe:	2100      	movs	r1, #0
 8002300:	a803      	add	r0, sp, #12
 8002302:	f006 fe5a 	bl	8008fba <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 8002306:	68b1      	ldr	r1, [r6, #8]
 8002308:	6837      	ldr	r7, [r6, #0]
 800230a:	4620      	mov	r0, r4
 800230c:	466b      	mov	r3, sp
 800230e:	aa03      	add	r2, sp, #12
 8002310:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 8002312:	4641      	mov	r1, r8
 8002314:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 8002316:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
    msg.dims.arg = &array_u32;
 800231a:	f8cd d05c 	str.w	sp, [sp, #92]	@ 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 800231e:	f002 ff1f 	bl	8005160 <pb_encode_tag_for_field>
 8002322:	b138      	cbz	r0, 8002334 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002324:	aa03      	add	r2, sp, #12
 8002326:	4651      	mov	r1, sl
 8002328:	4628      	mov	r0, r5
 800232a:	f003 f88a 	bl	8005442 <pb_encode_submessage>
 800232e:	b108      	cbz	r0, 8002334 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 8002330:	3401      	adds	r4, #1
 8002332:	e7de      	b.n	80022f2 <encode_tensor_desc+0x16>
      return false;
 8002334:	2000      	movs	r0, #0
}
 8002336:	b01c      	add	sp, #112	@ 0x70
 8002338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233c:	0800216b 	.word	0x0800216b
 8002340:	080679f0 	.word	0x080679f0

08002344 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8002344:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8002346:	6803      	ldr	r3, [r0, #0]
 8002348:	600b      	str	r3, [r1, #0]
  resp->state = state;
 800234a:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 800234c:	4804      	ldr	r0, [pc, #16]	@ (8002360 <aiPbMgrSendResp+0x1c>)
 800234e:	460a      	mov	r2, r1
 8002350:	4904      	ldr	r1, [pc, #16]	@ (8002364 <aiPbMgrSendResp+0x20>)
 8002352:	f003 f801 	bl	8005358 <pb_encode>
  pb_io_flush_ostream();
}
 8002356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 800235a:	f7ff becf 	b.w	80020fc <pb_io_flush_ostream>
 800235e:	bf00      	nop
 8002360:	20000c8c 	.word	0x20000c8c
 8002364:	08067610 	.word	0x08067610

08002368 <aiPbMgrWaitAndProcess>:
{
 8002368:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 800236a:	4c1d      	ldr	r4, [pc, #116]	@ (80023e0 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 800236c:	f7ff fed6 	bl	800211c <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002370:	491c      	ldr	r1, [pc, #112]	@ (80023e4 <aiPbMgrWaitAndProcess+0x7c>)
 8002372:	f104 0224 	add.w	r2, r4, #36	@ 0x24
 8002376:	4620      	mov	r0, r4
 8002378:	f002 fd73 	bl	8004e62 <pb_decode_delimited>
 800237c:	b348      	cbz	r0, 80023d2 <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 800237e:	f7ff fecd 	bl	800211c <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002382:	2302      	movs	r3, #2
 8002384:	f884 31d0 	strb.w	r3, [r4, #464]	@ 0x1d0
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002388:	6a21      	ldr	r1, [r4, #32]
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 800238a:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800238e:	69e3      	ldr	r3, [r4, #28]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002390:	2500      	movs	r5, #0
 8002392:	42a9      	cmp	r1, r5
 8002394:	d00d      	beq.n	80023b2 <aiPbMgrWaitAndProcess+0x4a>
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002396:	461a      	mov	r2, r3
 8002398:	f812 6b0c 	ldrb.w	r6, [r2], #12
 800239c:	4286      	cmp	r6, r0
 800239e:	d11c      	bne.n	80023da <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 80023a0:	4911      	ldr	r1, [pc, #68]	@ (80023e8 <aiPbMgrWaitAndProcess+0x80>)
 80023a2:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
 80023a6:	f1a1 0054 	sub.w	r0, r1, #84	@ 0x54
 80023aa:	47b0      	blx	r6
    if (idx == pbContextMgr.n_func) {
 80023ac:	6a23      	ldr	r3, [r4, #32]
 80023ae:	42ab      	cmp	r3, r5
 80023b0:	d10c      	bne.n	80023cc <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 80023b2:	490d      	ldr	r1, [pc, #52]	@ (80023e8 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 80023b4:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 80023b6:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 80023b8:	f1a1 0054 	sub.w	r0, r1, #84	@ 0x54
  resp->which_payload = respMsg_ack_tag;
 80023bc:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
  resp->payload.ack.param = param;
 80023c0:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  resp->payload.ack.error = error;
 80023c4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  aiPbMgrSendResp(req, resp, state);
 80023c8:	f7ff ffbc 	bl	8002344 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f884 31d0 	strb.w	r3, [r4, #464]	@ 0x1d0
  pb_io_flush_istream();
 80023d2:	f7ff fea3 	bl	800211c <pb_io_flush_istream>
}
 80023d6:	2000      	movs	r0, #0
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80023da:	3501      	adds	r5, #1
 80023dc:	4613      	mov	r3, r2
 80023de:	e7d8      	b.n	8002392 <aiPbMgrWaitAndProcess+0x2a>
 80023e0:	20000c80 	.word	0x20000c80
 80023e4:	08067a90 	.word	0x08067a90
 80023e8:	20000cf8 	.word	0x20000cf8

080023ec <aiPbMgrSendAck>:
{
 80023ec:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 80023ee:	260c      	movs	r6, #12
{
 80023f0:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 80023f4:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 80023f6:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 80023f8:	608b      	str	r3, [r1, #8]
}
 80023fa:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 80023fc:	f7ff bfa2 	b.w	8002344 <aiPbMgrSendResp>

08002400 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8002400:	b513      	push	{r0, r1, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8002402:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002404:	4906      	ldr	r1, [pc, #24]	@ (8002420 <aiPbMgrWaitAck+0x20>)
 8002406:	4807      	ldr	r0, [pc, #28]	@ (8002424 <aiPbMgrWaitAck+0x24>)
  ackMsg ack = ackMsg_init_default;
 8002408:	9300      	str	r3, [sp, #0]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800240a:	466a      	mov	r2, sp
  ackMsg ack = ackMsg_init_default;
 800240c:	f88d 3004 	strb.w	r3, [sp, #4]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002410:	f002 fd27 	bl	8004e62 <pb_decode_delimited>
 8002414:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002416:	f7ff fe81 	bl	800211c <pb_io_flush_istream>
  return res;
}
 800241a:	4620      	mov	r0, r4
 800241c:	b002      	add	sp, #8
 800241e:	bd10      	pop	{r4, pc}
 8002420:	080676f0 	.word	0x080676f0
 8002424:	20000c80 	.word	0x20000c80

08002428 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8002428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 800242a:	4c19      	ldr	r4, [pc, #100]	@ (8002490 <aiPbMgrSendLogV2+0x68>)
 800242c:	f894 31d0 	ldrb.w	r3, [r4, #464]	@ 0x1d0
{
 8002430:	4606      	mov	r6, r0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002432:	2b02      	cmp	r3, #2
  ackMsg ack = ackMsg_init_default;
 8002434:	f04f 0000 	mov.w	r0, #0
{
 8002438:	460f      	mov	r7, r1
 800243a:	4615      	mov	r5, r2
  ackMsg ack = ackMsg_init_default;
 800243c:	9000      	str	r0, [sp, #0]
 800243e:	f88d 0004 	strb.w	r0, [sp, #4]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002442:	d122      	bne.n	800248a <aiPbMgrSendLogV2+0x62>
    return false;

  size_t len = strlen(str);
 8002444:	4610      	mov	r0, r2
 8002446:	f7fd ff1b 	bl	8000280 <strlen>

  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
 800244a:	287f      	cmp	r0, #127	@ 0x7f
 800244c:	bf28      	it	cs
 800244e:	207f      	movcs	r0, #127	@ 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002450:	230d      	movs	r3, #13
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002452:	1c42      	adds	r2, r0, #1
 8002454:	4629      	mov	r1, r5
 8002456:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 800245a:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
  pbContextMgr.resp.payload.log.level = lvl;
 800245e:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002462:	f006 fe4c 	bl	80090fe <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002466:	f104 0178 	add.w	r1, r4, #120	@ 0x78
 800246a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800246e:	4632      	mov	r2, r6
 8002470:	f7ff ff68 	bl	8002344 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002474:	4620      	mov	r0, r4
 8002476:	4907      	ldr	r1, [pc, #28]	@ (8002494 <aiPbMgrSendLogV2+0x6c>)
 8002478:	466a      	mov	r2, sp
 800247a:	f002 fcf2 	bl	8004e62 <pb_decode_delimited>
 800247e:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002480:	f7ff fe4c 	bl	800211c <pb_io_flush_istream>
  return res;
}
 8002484:	4620      	mov	r0, r4
 8002486:	b003      	add	sp, #12
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 800248a:	4604      	mov	r4, r0
 800248c:	e7fa      	b.n	8002484 <aiPbMgrSendLogV2+0x5c>
 800248e:	bf00      	nop
 8002490:	20000c80 	.word	0x20000c80
 8002494:	080676f0 	.word	0x080676f0

08002498 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8002498:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <aiPbMgrReceiveData+0x28>)
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 800249c:	4909      	ldr	r1, [pc, #36]	@ (80024c4 <aiPbMgrReceiveData+0x2c>)
{
 800249e:	b086      	sub	sp, #24
  msg.datas.arg = (void *)data;
 80024a0:	e9cd 3004 	strd	r3, r0, [sp, #16]
{
 80024a4:	4604      	mov	r4, r0
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 80024a6:	aa01      	add	r2, sp, #4
 80024a8:	4807      	ldr	r0, [pc, #28]	@ (80024c8 <aiPbMgrReceiveData+0x30>)
 80024aa:	f002 fcda 	bl	8004e62 <pb_decode_delimited>
  pb_io_flush_istream();
 80024ae:	f7ff fe35 	bl	800211c <pb_io_flush_istream>

  data->type = msg.type;
 80024b2:	9b01      	ldr	r3, [sp, #4]
 80024b4:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 80024b6:	9b03      	ldr	r3, [sp, #12]
 80024b8:	60a3      	str	r3, [r4, #8]

  return true;
}
 80024ba:	2001      	movs	r0, #1
 80024bc:	b006      	add	sp, #24
 80024be:	bd10      	pop	{r4, pc}
 80024c0:	080021df 	.word	0x080021df
 80024c4:	080679a0 	.word	0x080679a0
 80024c8:	20000c80 	.word	0x20000c80

080024cc <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	4617      	mov	r7, r2
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 80024d2:	2210      	movs	r2, #16
{
 80024d4:	4606      	mov	r6, r0
 80024d6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  resp->which_payload = respMsg_op_tag;
 80024d8:	80ca      	strh	r2, [r1, #6]
{
 80024da:	460c      	mov	r4, r1
  if (name)
 80024dc:	4618      	mov	r0, r3
 80024de:	b31b      	cbz	r3, 8002528 <aiPbMgrSendOperator+0x5c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 80024e0:	2240      	movs	r2, #64	@ 0x40
 80024e2:	3108      	adds	r1, #8
 80024e4:	f7ff fed4 	bl	8002290 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 80024e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80024ea:	64a3      	str	r3, [r4, #72]	@ 0x48
  resp->payload.op.id = id;
 80024ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80024ee:	64e3      	str	r3, [r4, #76]	@ 0x4c

  if (perf) {
 80024f0:	b1f5      	cbz	r5, 8002530 <aiPbMgrSendOperator+0x64>
    resp->payload.op.stack_used = perf->stack_usage;
 80024f2:	692b      	ldr	r3, [r5, #16]
 80024f4:	6623      	str	r3, [r4, #96]	@ 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 80024f6:	696b      	ldr	r3, [r5, #20]
 80024f8:	6663      	str	r3, [r4, #100]	@ 0x64
    resp->payload.op.duration = perf->duration;
 80024fa:	682b      	ldr	r3, [r5, #0]
 80024fc:	6523      	str	r3, [r4, #80]	@ 0x50
    resp->payload.op.counter_type = perf->counter_type;
 80024fe:	686b      	ldr	r3, [r5, #4]
 8002500:	6563      	str	r3, [r4, #84]	@ 0x54
    if (perf->counters) {
 8002502:	68eb      	ldr	r3, [r5, #12]
 8002504:	b193      	cbz	r3, 800252c <aiPbMgrSendOperator+0x60>
      array.size = perf->counter_n;
 8002506:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8002508:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 800250c:	2304      	movs	r3, #4
 800250e:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <aiPbMgrSendOperator+0x70>)
 8002512:	65a3      	str	r3, [r4, #88]	@ 0x58
      resp->payload.op.counters.arg = &array;
 8002514:	ab01      	add	r3, sp, #4
 8002516:	65e3      	str	r3, [r4, #92]	@ 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8002518:	4630      	mov	r0, r6
 800251a:	463a      	mov	r2, r7
 800251c:	4621      	mov	r1, r4
 800251e:	f7ff ff11 	bl	8002344 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8002522:	2001      	movs	r0, #1
 8002524:	b005      	add	sp, #20
 8002526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8002528:	720b      	strb	r3, [r1, #8]
 800252a:	e7dd      	b.n	80024e8 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 800252c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800252e:	e7f3      	b.n	8002518 <aiPbMgrSendOperator+0x4c>
    resp->payload.op.duration = 0.0f;
 8002530:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8002532:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
    resp->payload.op.duration = 0.0f;
 8002536:	6523      	str	r3, [r4, #80]	@ 0x50
    resp->payload.op.counter_type = 0;
 8002538:	e7ee      	b.n	8002518 <aiPbMgrSendOperator+0x4c>
 800253a:	bf00      	nop
 800253c:	0800216b 	.word	0x0800216b

08002540 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8002540:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8002542:	240a      	movs	r4, #10
 8002544:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8002546:	f240 3401 	movw	r4, #769	@ 0x301
 800254a:	608c      	str	r4, [r1, #8]
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 800254c:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 800254e:	0c12      	lsrs	r2, r2, #16

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8002550:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8002554:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8002556:	610a      	str	r2, [r1, #16]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8002558:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800255c:	2200      	movs	r2, #0
 800255e:	f7ff bef1 	b.w	8002344 <aiPbMgrSendResp>
	...

08002564 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 8002564:	b570      	push	{r4, r5, r6, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002566:	e9d1 6500 	ldrd	r6, r5, [r1]
{
 800256a:	4604      	mov	r4, r0
 800256c:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 800256e:	2101      	movs	r1, #1
 8002570:	f003 f808 	bl	8005584 <ai_buffer_get_size>
 8002574:	4631      	mov	r1, r6
 8002576:	f003 f839 	bl	80055ec <ai_buffer_get_byte_size>
 800257a:	462a      	mov	r2, r5
 800257c:	4603      	mov	r3, r0
 800257e:	4621      	mov	r1, r4
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <_aiPrintDataInfo+0x28>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 8002582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002586:	f000 ba43 	b.w	8002a10 <lc_print>
 800258a:	bf00      	nop
 800258c:	0800afc0 	.word	0x0800afc0

08002590 <aiPlatformVersion>:
{
 8002590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8002592:	f003 f989 	bl	80058a8 <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8002596:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	2201      	movs	r2, #1
 800259e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80025a2:	b2c0      	uxtb	r0, r0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	9000      	str	r0, [sp, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	4803      	ldr	r0, [pc, #12]	@ (80025b8 <aiPlatformVersion+0x28>)
 80025ac:	4611      	mov	r1, r2
 80025ae:	f000 fa2f 	bl	8002a10 <lc_print>
}
 80025b2:	b007      	add	sp, #28
 80025b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b8:	0800afd3 	.word	0x0800afd3

080025bc <aiLogErr>:
{
 80025bc:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80025be:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80025c2:	b2c4      	uxtb	r4, r0
  if (fct)
 80025c4:	b129      	cbz	r1, 80025d2 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80025c6:	4622      	mov	r2, r4
 80025c8:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <aiLogErr+0x24>)
}
 80025ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80025ce:	f000 ba1f 	b.w	8002a10 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80025d2:	4621      	mov	r1, r4
 80025d4:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <aiLogErr+0x28>)
}
 80025d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80025da:	461a      	mov	r2, r3
 80025dc:	f000 ba18 	b.w	8002a10 <lc_print>
 80025e0:	0800b005 	.word	0x0800b005
 80025e4:	0800b032 	.word	0x0800b032

080025e8 <aiPrintBufferInfo>:
{
 80025e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LC_PRINT("(%d,%d,%d,",
 80025ec:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 80025ee:	6807      	ldr	r7, [r0, #0]
{
 80025f0:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 80025f2:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80025f6:	4868      	ldr	r0, [pc, #416]	@ (8002798 <aiPrintBufferInfo+0x1b0>)
 80025f8:	6809      	ldr	r1, [r1, #0]
 80025fa:	f000 fa09 	bl	8002a10 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 80025fe:	696a      	ldr	r2, [r5, #20]
 8002600:	69a8      	ldr	r0, [r5, #24]
 8002602:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002606:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 800260a:	d119      	bne.n	8002640 <aiPrintBufferInfo+0x58>
    LC_PRINT("%d,%d)",
 800260c:	6842      	ldr	r2, [r0, #4]
 800260e:	6901      	ldr	r1, [r0, #16]
 8002610:	4862      	ldr	r0, [pc, #392]	@ (800279c <aiPrintBufferInfo+0x1b4>)
 8002612:	f000 f9fd 	bl	8002a10 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002616:	2101      	movs	r1, #1
 8002618:	4628      	mov	r0, r5
 800261a:	f002 ffb3 	bl	8005584 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800261e:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002622:	4601      	mov	r1, r0
 8002624:	485e      	ldr	r0, [pc, #376]	@ (80027a0 <aiPrintBufferInfo+0x1b8>)
 8002626:	f000 f9f3 	bl	8002a10 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800262a:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800262c:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8002630:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002634:	d113      	bne.n	800265e <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002636:	485b      	ldr	r0, [pc, #364]	@ (80027a4 <aiPrintBufferInfo+0x1bc>)
 8002638:	4621      	mov	r1, r4
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800263a:	f000 f9e9 	bl	8002a10 <lc_print>
 800263e:	e046      	b.n	80026ce <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8002640:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
    LC_PRINT("%d,%d,%d)",
 8002644:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8002646:	d105      	bne.n	8002654 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 8002648:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800264c:	4856      	ldr	r0, [pc, #344]	@ (80027a8 <aiPrintBufferInfo+0x1c0>)
 800264e:	f000 f9df 	bl	8002a10 <lc_print>
 8002652:	e7e0      	b.n	8002616 <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8002654:	4855      	ldr	r0, [pc, #340]	@ (80027ac <aiPrintBufferInfo+0x1c4>)
 8002656:	4619      	mov	r1, r3
 8002658:	f000 f9da 	bl	8002a10 <lc_print>
 800265c:	e7db      	b.n	8002616 <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 800265e:	2e03      	cmp	r6, #3
 8002660:	d102      	bne.n	8002668 <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002662:	4853      	ldr	r0, [pc, #332]	@ (80027b0 <aiPrintBufferInfo+0x1c8>)
 8002664:	4621      	mov	r1, r4
 8002666:	e7e8      	b.n	800263a <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8002668:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 80027c8 <aiPrintBufferInfo+0x1e0>
 800266c:	f417 0f00 	tst.w	r7, #8388608	@ 0x800000
 8002670:	f108 0102 	add.w	r1, r8, #2
 8002674:	4622      	mov	r2, r4
 8002676:	bf18      	it	ne
 8002678:	4641      	movne	r1, r8
 800267a:	f108 003b 	add.w	r0, r8, #59	@ 0x3b
 800267e:	f000 f9c7 	bl	8002a10 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8002682:	2e02      	cmp	r6, #2
 8002684:	d123      	bne.n	80026ce <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8002686:	68ab      	ldr	r3, [r5, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d068      	beq.n	800275e <aiPrintBufferInfo+0x176>
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	07d2      	lsls	r2, r2, #31
 8002690:	d565      	bpl.n	800275e <aiPrintBufferInfo+0x176>
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d062      	beq.n	800275e <aiPrintBufferInfo+0x176>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8002698:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 800269c:	f108 0040 	add.w	r0, r8, #64	@ 0x40
      const int max_ = s_> 4?4:s_;
 80026a0:	f1b9 0f04 	cmp.w	r9, #4
      LC_PRINT(" %d:", s_);
 80026a4:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 80026a6:	46ca      	mov	sl, r9
 80026a8:	bf28      	it	cs
 80026aa:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 80026ae:	f000 f9af 	bl	8002a10 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80026b2:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80026b4:	f04f 0b00 	mov.w	fp, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80026b8:	f108 0845 	add.w	r8, r8, #69	@ 0x45
      for (int idx=0; idx<max_; idx++) {
 80026bc:	4556      	cmp	r6, sl
 80026be:	db18      	blt.n	80026f2 <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 80026c0:	4b3c      	ldr	r3, [pc, #240]	@ (80027b4 <aiPrintBufferInfo+0x1cc>)
 80026c2:	1ed8      	subs	r0, r3, #3
 80026c4:	45ca      	cmp	sl, r9
 80026c6:	bf28      	it	cs
 80026c8:	4618      	movcs	r0, r3
 80026ca:	f000 f9a1 	bl	8002a10 <lc_print>
  if (buffer->data)
 80026ce:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 80026d0:	2101      	movs	r1, #1
 80026d2:	4628      	mov	r0, r5
  if (buffer->data)
 80026d4:	2c00      	cmp	r4, #0
 80026d6:	d053      	beq.n	8002780 <aiPrintBufferInfo+0x198>
    LC_PRINT(" @0x%X/%d",
 80026d8:	f002 ff54 	bl	8005584 <ai_buffer_get_size>
 80026dc:	4639      	mov	r1, r7
 80026de:	f002 ff85 	bl	80055ec <ai_buffer_get_byte_size>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4834      	ldr	r0, [pc, #208]	@ (80027b8 <aiPrintBufferInfo+0x1d0>)
 80026e6:	4621      	mov	r1, r4
}
 80026e8:	b003      	add	sp, #12
 80026ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 80026ee:	f000 b98f 	b.w	8002a10 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80026f2:	68ab      	ldr	r3, [r5, #8]
 80026f4:	b35b      	cbz	r3, 800274e <aiPrintBufferInfo+0x166>
 80026f6:	681c      	ldr	r4, [r3, #0]
 80026f8:	f014 0401 	ands.w	r4, r4, #1
 80026fc:	d02a      	beq.n	8002754 <aiPrintBufferInfo+0x16c>
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	b352      	cbz	r2, 8002758 <aiPrintBufferInfo+0x170>
 8002702:	6853      	ldr	r3, [r2, #4]
 8002704:	b1d3      	cbz	r3, 800273c <aiPrintBufferInfo+0x154>
 8002706:	8851      	ldrh	r1, [r2, #2]
 8002708:	42b1      	cmp	r1, r6
 800270a:	dd17      	ble.n	800273c <aiPrintBufferInfo+0x154>
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8002712:	6808      	ldr	r0, [r1, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002714:	8814      	ldrh	r4, [r2, #0]
 8002716:	f014 0402 	ands.w	r4, r4, #2
 800271a:	d011      	beq.n	8002740 <aiPrintBufferInfo+0x158>
 800271c:	b1c3      	cbz	r3, 8002750 <aiPrintBufferInfo+0x168>
 800271e:	8852      	ldrh	r2, [r2, #2]
 8002720:	42b2      	cmp	r2, r6
 8002722:	dd1a      	ble.n	800275a <aiPrintBufferInfo+0x172>
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8002728:	f7fd ff16 	bl	8000558 <__aeabi_f2d>
 800272c:	9400      	str	r4, [sp, #0]
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4640      	mov	r0, r8
 8002734:	f000 f96c 	bl	8002a10 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8002738:	3601      	adds	r6, #1
 800273a:	e7bf      	b.n	80026bc <aiPrintBufferInfo+0xd4>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800273c:	2000      	movs	r0, #0
 800273e:	e7e9      	b.n	8002714 <aiPrintBufferInfo+0x12c>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002740:	b133      	cbz	r3, 8002750 <aiPrintBufferInfo+0x168>
 8002742:	8852      	ldrh	r2, [r2, #2]
 8002744:	42b2      	cmp	r2, r6
 8002746:	ddef      	ble.n	8002728 <aiPrintBufferInfo+0x140>
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	579c      	ldrsb	r4, [r3, r6]
 800274c:	e7ec      	b.n	8002728 <aiPrintBufferInfo+0x140>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800274e:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002750:	461c      	mov	r4, r3
 8002752:	e7e9      	b.n	8002728 <aiPrintBufferInfo+0x140>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002754:	4658      	mov	r0, fp
 8002756:	e7e7      	b.n	8002728 <aiPrintBufferInfo+0x140>
 8002758:	2000      	movs	r0, #0
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800275a:	2400      	movs	r4, #0
 800275c:	e7e4      	b.n	8002728 <aiPrintBufferInfo+0x140>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 800275e:	f019 0f78 	tst.w	r9, #120	@ 0x78
 8002762:	d102      	bne.n	800276a <aiPrintBufferInfo+0x182>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002764:	4815      	ldr	r0, [pc, #84]	@ (80027bc <aiPrintBufferInfo+0x1d4>)
 8002766:	4621      	mov	r1, r4
 8002768:	e767      	b.n	800263a <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 800276a:	f007 027f 	and.w	r2, r7, #127	@ 0x7f
 800276e:	3a40      	subs	r2, #64	@ 0x40
 8002770:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 8002774:	4411      	add	r1, r2
 8002776:	4812      	ldr	r0, [pc, #72]	@ (80027c0 <aiPrintBufferInfo+0x1d8>)
 8002778:	1a61      	subs	r1, r4, r1
 800277a:	f000 f949 	bl	8002a10 <lc_print>
 800277e:	e7a6      	b.n	80026ce <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 8002780:	f002 ff00 	bl	8005584 <ai_buffer_get_size>
 8002784:	4639      	mov	r1, r7
 8002786:	f002 ff31 	bl	80055ec <ai_buffer_get_byte_size>
 800278a:	4601      	mov	r1, r0
 800278c:	480d      	ldr	r0, [pc, #52]	@ (80027c4 <aiPrintBufferInfo+0x1dc>)
}
 800278e:	b003      	add	sp, #12
 8002790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 8002794:	f000 b93c 	b.w	8002a10 <lc_print>
 8002798:	0800b062 	.word	0x0800b062
 800279c:	0800b06d 	.word	0x0800b06d
 80027a0:	0800b082 	.word	0x0800b082
 80027a4:	0800b086 	.word	0x0800b086
 80027a8:	0800b074 	.word	0x0800b074
 80027ac:	0800b07e 	.word	0x0800b07e
 80027b0:	0800b08e 	.word	0x0800b08e
 80027b4:	0800b061 	.word	0x0800b061
 80027b8:	0800b0bb 	.word	0x0800b0bb
 80027bc:	0800b0a8 	.word	0x0800b0a8
 80027c0:	0800b0b3 	.word	0x0800b0b3
 80027c4:	0800b0c5 	.word	0x0800b0c5
 80027c8:	0800b05a 	.word	0x0800b05a

080027cc <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 80027cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d0:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 80027d2:	4842      	ldr	r0, [pc, #264]	@ (80028dc <aiPrintNetworkInfo+0x110>)
 80027d4:	f000 f91c 	bl	8002a10 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80027d8:	6821      	ldr	r1, [r4, #0]
 80027da:	4841      	ldr	r0, [pc, #260]	@ (80028e0 <aiPrintNetworkInfo+0x114>)
 80027dc:	f000 f918 	bl	8002a10 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 80027e0:	6861      	ldr	r1, [r4, #4]
 80027e2:	4840      	ldr	r0, [pc, #256]	@ (80028e4 <aiPrintNetworkInfo+0x118>)
 80027e4:	f000 f914 	bl	8002a10 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 80027e8:	68a1      	ldr	r1, [r4, #8]
 80027ea:	483f      	ldr	r0, [pc, #252]	@ (80028e8 <aiPrintNetworkInfo+0x11c>)
 80027ec:	f000 f910 	bl	8002a10 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 80027f0:	68e1      	ldr	r1, [r4, #12]
 80027f2:	483e      	ldr	r0, [pc, #248]	@ (80028ec <aiPrintNetworkInfo+0x120>)
 80027f4:	f000 f90c 	bl	8002a10 <lc_print>

  if (report->tool_revision[0])
 80027f8:	69a1      	ldr	r1, [r4, #24]
 80027fa:	780b      	ldrb	r3, [r1, #0]
 80027fc:	b113      	cbz	r3, 8002804 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 80027fe:	483c      	ldr	r0, [pc, #240]	@ (80028f0 <aiPrintNetworkInfo+0x124>)
 8002800:	f000 f906 	bl	8002a10 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002804:	7fa3      	ldrb	r3, [r4, #30]
 8002806:	7f62      	ldrb	r2, [r4, #29]
 8002808:	7f21      	ldrb	r1, [r4, #28]
 800280a:	483a      	ldr	r0, [pc, #232]	@ (80028f4 <aiPrintNetworkInfo+0x128>)
 800280c:	f000 f900 	bl	8002a10 <lc_print>
      report->tool_version.major,
      report->tool_version.minor,
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8002810:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 8002814:	f000 f8e4 	bl	80029e0 <uint64ToDecimal>
 8002818:	4601      	mov	r1, r0
 800281a:	4837      	ldr	r0, [pc, #220]	@ (80028f8 <aiPrintNetworkInfo+0x12c>)
 800281c:	f000 f8f8 	bl	8002a10 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8002820:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002822:	4836      	ldr	r0, [pc, #216]	@ (80028fc <aiPrintNetworkInfo+0x130>)
 8002824:	f000 f8f4 	bl	8002a10 <lc_print>

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8002828:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 800282c:	4834      	ldr	r0, [pc, #208]	@ (8002900 <aiPrintNetworkInfo+0x134>)
 800282e:	f000 f8ef 	bl	8002a10 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002832:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002834:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002836:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800283a:	42ab      	cmp	r3, r5
 800283c:	dc21      	bgt.n	8002882 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 800283e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8002842:	4830      	ldr	r0, [pc, #192]	@ (8002904 <aiPrintNetworkInfo+0x138>)
 8002844:	f000 f8e4 	bl	8002a10 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002848:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800284a:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800284c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8002850:	42ab      	cmp	r3, r5
 8002852:	dc1e      	bgt.n	8002892 <aiPrintNetworkInfo+0xc6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8002854:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8002856:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8002858:	482b      	ldr	r0, [pc, #172]	@ (8002908 <aiPrintNetworkInfo+0x13c>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 800285a:	4e2c      	ldr	r6, [pc, #176]	@ (800290c <aiPrintNetworkInfo+0x140>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 800285c:	f000 f8d8 	bl	8002a10 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8002860:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8002862:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8002864:	f106 0809 	add.w	r8, r6, #9
  for (int i=0; i<report->n_inputs; i++) {
 8002868:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800286a:	42ab      	cmp	r3, r5
 800286c:	dc19      	bgt.n	80028a2 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 800286e:	4e28      	ldr	r6, [pc, #160]	@ (8002910 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 8002870:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8002872:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8002874:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 8002878:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800287a:	42ab      	cmp	r3, r5
 800287c:	dc1f      	bgt.n	80028be <aiPrintNetworkInfo+0xf2>
  }
}
 800287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002882:	6d61      	ldr	r1, [r4, #84]	@ 0x54
      _aiPrintDataInfo(idx, buffer);
 8002884:	4628      	mov	r0, r5
 8002886:	fb06 1105 	mla	r1, r6, r5, r1
 800288a:	f7ff fe6b 	bl	8002564 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800288e:	3501      	adds	r5, #1
 8002890:	e7d1      	b.n	8002836 <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002892:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      _aiPrintDataInfo(idx, buffer);
 8002894:	4628      	mov	r0, r5
 8002896:	fb06 1105 	mla	r1, r6, r5, r1
 800289a:	f7ff fe63 	bl	8002564 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800289e:	3501      	adds	r5, #1
 80028a0:	e7d4      	b.n	800284c <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 80028a2:	4629      	mov	r1, r5
 80028a4:	4630      	mov	r0, r6
 80028a6:	f000 f8b3 	bl	8002a10 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 80028aa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80028ac:	fb07 0005 	mla	r0, r7, r5, r0
 80028b0:	f7ff fe9a 	bl	80025e8 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80028b4:	4640      	mov	r0, r8
 80028b6:	f000 f8ab 	bl	8002a10 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80028ba:	3501      	adds	r5, #1
 80028bc:	e7d4      	b.n	8002868 <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 80028be:	4629      	mov	r1, r5
 80028c0:	4630      	mov	r0, r6
 80028c2:	f000 f8a5 	bl	8002a10 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 80028c6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80028c8:	fb07 0005 	mla	r0, r7, r5, r0
 80028cc:	f7ff fe8c 	bl	80025e8 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80028d0:	4640      	mov	r0, r8
 80028d2:	f000 f89d 	bl	8002a10 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 80028d6:	3501      	adds	r5, #1
 80028d8:	e7ce      	b.n	8002878 <aiPrintNetworkInfo+0xac>
 80028da:	bf00      	nop
 80028dc:	0800b0d7 	.word	0x0800b0d7
 80028e0:	0800b0f1 	.word	0x0800b0f1
 80028e4:	0800b10c 	.word	0x0800b10c
 80028e8:	0800b127 	.word	0x0800b127
 80028ec:	0800b142 	.word	0x0800b142
 80028f0:	0800b15d 	.word	0x0800b15d
 80028f4:	0800b178 	.word	0x0800b178
 80028f8:	0800b199 	.word	0x0800b199
 80028fc:	0800b1b9 	.word	0x0800b1b9
 8002900:	0800b1d4 	.word	0x0800b1d4
 8002904:	0800b1ef 	.word	0x0800b1ef
 8002908:	0800b20a 	.word	0x0800b20a
 800290c:	0800b228 	.word	0x0800b228
 8002910:	0800b234 	.word	0x0800b234

08002914 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8002914:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8002918:	3b01      	subs	r3, #1
 800291a:	429a      	cmp	r2, r3
 800291c:	d207      	bcs.n	800292e <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
 8002922:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8002924:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 8002926:	3301      	adds	r3, #1
    buffer->buffer[buffer->pos] = 0;
 8002928:	2100      	movs	r1, #0
    buffer->pos++;
 800292a:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800292c:	54d1      	strb	r1, [r2, r3]
  }
}
 800292e:	4770      	bx	lr

08002930 <_put_c_driver>:
{
 8002930:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <_put_c_driver+0x24>)
{
 8002934:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b13b      	cbz	r3, 800294c <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 800293c:	4806      	ldr	r0, [pc, #24]	@ (8002958 <_put_c_driver+0x28>)
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	2201      	movs	r2, #1
 8002944:	f10d 0107 	add.w	r1, sp, #7
 8002948:	f7ff fac9 	bl	8001ede <HAL_UART_Transmit>
}
 800294c:	b003      	add	sp, #12
 800294e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002952:	bf00      	nop
 8002954:	2000000c 	.word	0x2000000c
 8002958:	20000bdc 	.word	0x20000bdc

0800295c <ioRawWriteBuffer>:
{
 800295c:	b508      	push	{r3, lr}
 800295e:	b28a      	uxth	r2, r1
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	4601      	mov	r1, r0
 8002966:	4803      	ldr	r0, [pc, #12]	@ (8002974 <ioRawWriteBuffer+0x18>)
 8002968:	f7ff fab9 	bl	8001ede <HAL_UART_Transmit>
}
 800296c:	fab0 f080 	clz	r0, r0
 8002970:	0940      	lsrs	r0, r0, #5
 8002972:	bd08      	pop	{r3, pc}
 8002974:	20000bdc 	.word	0x20000bdc

08002978 <ioRawReadBuffer>:
{
 8002978:	b508      	push	{r3, lr}

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 800297a:	b28a      	uxth	r2, r1
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	4601      	mov	r1, r0
 8002982:	4803      	ldr	r0, [pc, #12]	@ (8002990 <ioRawReadBuffer+0x18>)
 8002984:	f7ff faf9 	bl	8001f7a <HAL_UART_Receive>
}
 8002988:	fab0 f080 	clz	r0, r0
 800298c:	0940      	lsrs	r0, r0, #5
 800298e:	bd08      	pop	{r3, pc}
 8002990:	20000bdc 	.word	0x20000bdc

08002994 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8002994:	4b01      	ldr	r3, [pc, #4]	@ (800299c <ioRawDisableLLWrite+0x8>)
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
}
 800299a:	4770      	bx	lr
 800299c:	2000000c 	.word	0x2000000c

080029a0 <_write>:
{
 80029a0:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80029a2:	1e14      	subs	r4, r2, #0
 80029a4:	da0a      	bge.n	80029bc <_write+0x1c>
 80029a6:	3801      	subs	r0, #1
 80029a8:	2801      	cmp	r0, #1
 80029aa:	d907      	bls.n	80029bc <_write+0x1c>
    errno = EBADF;
 80029ac:	f006 fb7a 	bl	80090a4 <__errno>
 80029b0:	2309      	movs	r3, #9
 80029b2:	6003      	str	r3, [r0, #0]
    return -1;
 80029b4:	f04f 34ff 	mov.w	r4, #4294967295
}
 80029b8:	4620      	mov	r0, r4
 80029ba:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <_write+0x38>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f9      	beq.n	80029b8 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80029c4:	b2a2      	uxth	r2, r4
 80029c6:	4805      	ldr	r0, [pc, #20]	@ (80029dc <_write+0x3c>)
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	f7ff fa87 	bl	8001ede <HAL_UART_Transmit>
  return (status ? count : 0);
 80029d0:	2800      	cmp	r0, #0
 80029d2:	bf18      	it	ne
 80029d4:	2400      	movne	r4, #0
 80029d6:	e7ef      	b.n	80029b8 <_write+0x18>
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	20000bdc 	.word	0x20000bdc

080029e0 <uint64ToDecimal>:
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 80029e0:	b510      	push	{r4, lr}
  *(--p) = '\0';
 80029e2:	4c0a      	ldr	r4, [pc, #40]	@ (8002a0c <uint64ToDecimal+0x2c>)
 80029e4:	2300      	movs	r3, #0
 80029e6:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 80029ea:	2301      	movs	r3, #1
 80029ec:	ea50 0201 	orrs.w	r2, r0, r1
 80029f0:	d102      	bne.n	80029f8 <uint64ToDecimal+0x18>
 80029f2:	b90b      	cbnz	r3, 80029f8 <uint64ToDecimal+0x18>
}
 80029f4:	4620      	mov	r0, r4
 80029f6:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 80029f8:	220a      	movs	r2, #10
 80029fa:	2300      	movs	r3, #0
 80029fc:	f7fe f9ea 	bl	8000dd4 <__aeabi_uldivmod>
    const char c = '0' + digit;
 8002a00:	3230      	adds	r2, #48	@ 0x30
    *(--p) = c;
 8002a02:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	e7f0      	b.n	80029ec <uint64ToDecimal+0xc>
 8002a0a:	bf00      	nop
 8002a0c:	20000ea0 	.word	0x20000ea0

08002a10 <lc_print>:
{
 8002a10:	b40f      	push	{r0, r1, r2, r3}
 8002a12:	b507      	push	{r0, r1, r2, lr}
 8002a14:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002a16:	2100      	movs	r1, #0
{
 8002a18:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002a1c:	4804      	ldr	r0, [pc, #16]	@ (8002a30 <lc_print+0x20>)
  va_start(ap, fmt);
 8002a1e:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002a20:	f001 fb54 	bl	80040cc <vlc_print>
}
 8002a24:	b003      	add	sp, #12
 8002a26:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a2a:	b004      	add	sp, #16
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	08002931 	.word	0x08002931

08002a34 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8002a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 8002a36:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8002a3e:	4804      	ldr	r0, [pc, #16]	@ (8002a50 <lc_vsnprint+0x1c>)
 8002a40:	a901      	add	r1, sp, #4
 8002a42:	f001 fb43 	bl	80040cc <vlc_print>
  return buffer.pos - 1;
}
 8002a46:	9803      	ldr	r0, [sp, #12]
 8002a48:	3801      	subs	r0, #1
 8002a4a:	b005      	add	sp, #20
 8002a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a50:	08002915 	.word	0x08002915

08002a54 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002a54:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8002a56:	4d11      	ldr	r5, [pc, #68]	@ (8002a9c <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002a58:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002a5a:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002a5c:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 8002a60:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002a64:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002a68:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002a6a:	f005 fc8b 	bl	8008384 <malloc>

  /* remember size */
  if (ptr) {
 8002a6e:	b1a0      	cbz	r0, 8002a9a <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002a70:	1903      	adds	r3, r0, r4
 8002a72:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa0 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002a74:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002a76:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	07db      	lsls	r3, r3, #31
 8002a7c:	d50c      	bpl.n	8002a98 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002a7e:	68eb      	ldr	r3, [r5, #12]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8002a84:	686b      	ldr	r3, [r5, #4]
 8002a86:	4423      	add	r3, r4
 8002a88:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8002a8a:	69ab      	ldr	r3, [r5, #24]
 8002a8c:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8002a8e:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8002a90:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8002a92:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8002a94:	bf88      	it	hi
 8002a96:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8002a98:	3004      	adds	r0, #4
}
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000e84 	.word	0x20000e84
 8002aa0:	efdcba98 	.word	0xefdcba98

08002aa4 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <__wrap_free+0x48>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	f042 0204 	orr.w	r2, r2, #4
{
 8002aac:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8002aae:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	b1c0      	cbz	r0, 8002ae6 <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8002ab4:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8002ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8002af0 <__wrap_free+0x4c>)
 8002aba:	5855      	ldr	r5, [r2, r1]
 8002abc:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8002abe:	bf04      	itt	eq
 8002ac0:	2400      	moveq	r4, #0
 8002ac2:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 8002ac8:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 8002acc:	d508      	bpl.n	8002ae0 <__wrap_free+0x3c>
    io_malloc.free_req++;
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	3201      	adds	r2, #1
 8002ad2:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	1a52      	subs	r2, r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8002ae0:	bc30      	pop	{r4, r5}
  __real_free(p);
 8002ae2:	f005 bc57 	b.w	8008394 <free>
}
 8002ae6:	bc30      	pop	{r4, r5}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000e84 	.word	0x20000e84
 8002af0:	efdcba98 	.word	0xefdcba98

08002af4 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8002af4:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <stackMonInit+0x4c>)
 8002af8:	2500      	movs	r5, #0

  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
 8002afa:	1f1c      	subs	r4, r3, #4
  memset(&io_stack, 0, sizeof(struct io_stack));
 8002afc:	609d      	str	r5, [r3, #8]
 8002afe:	e9c3 5500 	strd	r5, r5, [r3]
  io_stack.ctrl = ctrl;
 8002b02:	f843 0c04 	str.w	r0, [r3, #-4]
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <stackMonInit+0x50>)
 8002b08:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8002b0e:	0783      	lsls	r3, r0, #30
  io_stack.mstack_size = msize;
 8002b10:	6162      	str	r2, [r4, #20]
  io_stack.cstack = cstack;
 8002b12:	61a1      	str	r1, [r4, #24]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8002b14:	d511      	bpl.n	8002b3a <stackMonInit+0x46>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8002b16:	480c      	ldr	r0, [pc, #48]	@ (8002b48 <stackMonInit+0x54>)
 8002b18:	f7ff ff7a 	bl	8002a10 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8002b1c:	6921      	ldr	r1, [r4, #16]
 8002b1e:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8002b20:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8002b22:	1ac9      	subs	r1, r1, r3
 8002b24:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8002b26:	b13d      	cbz	r5, 8002b38 <stackMonInit+0x44>
 8002b28:	6962      	ldr	r2, [r4, #20]
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	d904      	bls.n	8002b38 <stackMonInit+0x44>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8002b2e:	4807      	ldr	r0, [pc, #28]	@ (8002b4c <stackMonInit+0x58>)
 8002b30:	f7ff ff6e 	bl	8002a10 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8002b34:	2300      	movs	r3, #0
 8002b36:	7123      	strb	r3, [r4, #4]
  }
}
 8002b38:	bd38      	pop	{r3, r4, r5, pc}
 8002b3a:	2501      	movs	r5, #1
 8002b3c:	e7ee      	b.n	8002b1c <stackMonInit+0x28>
 8002b3e:	bf00      	nop
 8002b40:	20000e68 	.word	0x20000e68
 8002b44:	20020000 	.word	0x20020000
 8002b48:	0800b23d 	.word	0x0800b23d
 8002b4c:	0800b27d 	.word	0x0800b27d

08002b50 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8002b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b54:	4604      	mov	r4, r0
 8002b56:	468a      	mov	sl, r1
  if (!t)
 8002b58:	4616      	mov	r6, r2
 8002b5a:	b38a      	cbz	r2, 8002bc0 <dwtCyclesToTime+0x70>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002b5c:	f7ff f8ac 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8002b60:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002b62:	4607      	mov	r7, r0
  uint64_t s  = clks / fcpu;
 8002b64:	4602      	mov	r2, r0
 8002b66:	4651      	mov	r1, sl
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7fe f933 	bl	8000dd4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8002b6e:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
  uint64_t s  = clks / fcpu;
 8002b72:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8002b74:	fba4 0105 	umull	r0, r1, r4, r5
 8002b78:	463a      	mov	r2, r7
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	fb05 110a 	mla	r1, r5, sl, r1
 8002b80:	f7fe f928 	bl	8000dd4 <__aeabi_uldivmod>
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002b84:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8002bc8 <dwtCyclesToTime+0x78>
  ms -= (s * 1000);
 8002b88:	fbab 3205 	umull	r3, r2, fp, r5
 8002b8c:	1ac3      	subs	r3, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002b8e:	fba4 0109 	umull	r0, r1, r4, r9
  ms -= (s * 1000);
 8002b92:	9301      	str	r3, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002b94:	fb09 110a 	mla	r1, r9, sl, r1
 8002b98:	2300      	movs	r3, #0
 8002b9a:	463a      	mov	r2, r7
 8002b9c:	f7fe f91a 	bl	8000dd4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8002ba0:	9b01      	ldr	r3, [sp, #4]
 8002ba2:	60b3      	str	r3, [r6, #8]
  us -= (ms * 1000 + s * 1000000);
 8002ba4:	fbab 8909 	umull	r8, r9, fp, r9
 8002ba8:	eba0 0008 	sub.w	r0, r0, r8
 8002bac:	fba3 3505 	umull	r3, r5, r3, r5
  t->s = s;
 8002bb0:	e9c6 7b00 	strd	r7, fp, [r6]
  us -= (ms * 1000 + s * 1000000);
 8002bb4:	1ac0      	subs	r0, r0, r3
  t->us = us;
 8002bb6:	60f0      	str	r0, [r6, #12]
  return 0;
 8002bb8:	2000      	movs	r0, #0
}
 8002bba:	b003      	add	sp, #12
 8002bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	e7f9      	b.n	8002bba <dwtCyclesToTime+0x6a>
 8002bc6:	bf00      	nop
 8002bc8:	000f4240 	.word	0x000f4240

08002bcc <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	ed2d 8b02 	vpush	{d8}
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	460c      	mov	r4, r1
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 8002bd6:	f7ff f86f 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 8002bda:	4621      	mov	r1, r4
  float fcpu = (float)port_hal_get_cpu_freq();
 8002bdc:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7fe f8b1 	bl	8000d48 <__aeabi_ul2f>
 8002be6:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8002c00 <dwtCyclesToFloatMs+0x34>
 8002bea:	ee00 0a10 	vmov	s0, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8002bee:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8002bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
  return res;
}
 8002bf6:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8002bfa:	ecbd 8b02 	vpop	{d8}
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
 8002c00:	447a0000 	.word	0x447a0000

08002c04 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <getFlashCacheConf+0x38>)
{
 8002c06:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002c0c:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002c0e:	9b01      	ldr	r3, [sp, #4]
 8002c10:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8002c12:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002c14:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 8002c18:	bf4c      	ite	mi
 8002c1a:	f040 2001 	orrmi.w	r0, r0, #16777472	@ 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002c1e:	f040 7080 	orrpl.w	r0, r0, #16777216	@ 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8002c22:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8002c24:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8002c26:	bf48      	it	mi
 8002c28:	f440 7000 	orrmi.w	r0, r0, #512	@ 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8002c2c:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8002c2e:	bf48      	it	mi
 8002c30:	f440 6080 	orrmi.w	r0, r0, #1024	@ 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8002c34:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8002c38:	b002      	add	sp, #8
 8002c3a:	4770      	bx	lr
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8002c44:	f7ff f838 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8002c48:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8002c4a:	f7ff f835 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8002c4e:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8002c50:	f7ff ffd8 	bl	8002c04 <getFlashCacheConf>
 8002c54:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8002c56:	f7fe fc75 	bl	8001544 <HAL_GetDEVID>
 8002c5a:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8002c5c:	f7fe fc6c 	bl	8001538 <HAL_GetREVID>
 8002c60:	6120      	str	r0, [r4, #16]
}
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <getSysConf>:
  if (!conf)
 8002c64:	b108      	cbz	r0, 8002c6a <getSysConf+0x6>
 8002c66:	f7ff bfeb 	b.w	8002c40 <getSysConf.part.0>
}
 8002c6a:	4770      	bx	lr

08002c6c <systemSettingLog>:

void systemSettingLog(void)
{
 8002c6c:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002c6e:	2203      	movs	r2, #3
{
 8002c70:	b089      	sub	sp, #36	@ 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002c72:	2301      	movs	r3, #1
 8002c74:	210c      	movs	r1, #12
 8002c76:	4826      	ldr	r0, [pc, #152]	@ (8002d10 <systemSettingLog+0xa4>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002c78:	4c26      	ldr	r4, [pc, #152]	@ (8002d14 <systemSettingLog+0xa8>)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002c7a:	f7ff fec9 	bl	8002a10 <lc_print>
  if (!conf)
 8002c7e:	a803      	add	r0, sp, #12
 8002c80:	f7ff ffde 	bl	8002c40 <getSysConf.part.0>
  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8002c84:	4824      	ldr	r0, [pc, #144]	@ (8002d18 <systemSettingLog+0xac>)
 8002c86:	f7ff fec3 	bl	8002a10 <lc_print>
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002c8a:	9906      	ldr	r1, [sp, #24]
 8002c8c:	4823      	ldr	r0, [pc, #140]	@ (8002d1c <systemSettingLog+0xb0>)
 8002c8e:	f2a1 4313 	subw	r3, r1, #1043	@ 0x413
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b50      	cmp	r3, #80	@ 0x50
 8002c96:	bf96      	itet	ls
 8002c98:	4a21      	ldrls	r2, [pc, #132]	@ (8002d20 <systemSettingLog+0xb4>)
 8002c9a:	4a22      	ldrhi	r2, [pc, #136]	@ (8002d24 <systemSettingLog+0xb8>)
 8002c9c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8002ca0:	9b07      	ldr	r3, [sp, #28]
 8002ca2:	f7ff feb5 	bl	8002a10 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <systemSettingLog+0xbc>)
 8002ca8:	2104      	movs	r1, #4
 8002caa:	1d5a      	adds	r2, r3, #5
 8002cac:	f103 000a 	add.w	r0, r3, #10
 8002cb0:	f7ff feae 	bl	8002a10 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8002cb4:	f7fe fc3c 	bl	8001530 <HAL_GetHalVersion>
 8002cb8:	4601      	mov	r1, r0
 8002cba:	481c      	ldr	r0, [pc, #112]	@ (8002d2c <systemSettingLog+0xc0>)
 8002cbc:	f7ff fea8 	bl	8002a10 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002cc0:	9903      	ldr	r1, [sp, #12]
 8002cc2:	481b      	ldr	r0, [pc, #108]	@ (8002d30 <systemSettingLog+0xc4>)
 8002cc4:	fb91 f1f4 	sdiv	r1, r1, r4
 8002cc8:	f7ff fea2 	bl	8002a10 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8002ccc:	9904      	ldr	r1, [sp, #16]
 8002cce:	4819      	ldr	r0, [pc, #100]	@ (8002d34 <systemSettingLog+0xc8>)
 8002cd0:	fb91 f1f4 	sdiv	r1, r1, r4
 8002cd4:	f7ff fe9c 	bl	8002a10 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <systemSettingLog+0xcc>)
    return "True";
 8002cda:	4818      	ldr	r0, [pc, #96]	@ (8002d3c <systemSettingLog+0xd0>)
  uint32_t acr = FLASH->ACR;
 8002cdc:	6819      	ldr	r1, [r3, #0]
    return "True";
 8002cde:	1f44      	subs	r4, r0, #5
 8002ce0:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8002ce4:	bf0c      	ite	eq
 8002ce6:	4602      	moveq	r2, r0
 8002ce8:	4622      	movne	r2, r4
 8002cea:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8002cee:	bf0c      	ite	eq
 8002cf0:	4603      	moveq	r3, r0
 8002cf2:	4623      	movne	r3, r4
 8002cf4:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8002cf8:	bf08      	it	eq
 8002cfa:	4604      	moveq	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8002cfc:	f001 0507 	and.w	r5, r1, #7
 8002d00:	e9cd 4500 	strd	r4, r5, [sp]
 8002d04:	30e7      	adds	r0, #231	@ 0xe7
 8002d06:	f7ff fe83 	bl	8002a10 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8002d0a:	b009      	add	sp, #36	@ 0x24
 8002d0c:	bd30      	pop	{r4, r5, pc}
 8002d0e:	bf00      	nop
 8002d10:	0800b2b6 	.word	0x0800b2b6
 8002d14:	000f4240 	.word	0x000f4240
 8002d18:	0800b2d3 	.word	0x0800b2d3
 8002d1c:	0800b2f3 	.word	0x0800b2f3
 8002d20:	0800b910 	.word	0x0800b910
 8002d24:	0800b2a3 	.word	0x0800b2a3
 8002d28:	0800b324 	.word	0x0800b324
 8002d2c:	0800b34c 	.word	0x0800b34c
 8002d30:	0800b365 	.word	0x0800b365
 8002d34:	0800b37e 	.word	0x0800b37e
 8002d38:	40023c00 	.word	0x40023c00
 8002d3c:	0800b2b0 	.word	0x0800b2b0

08002d40 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8002d44:	221c      	movs	r2, #28
 8002d46:	2100      	movs	r1, #0
 8002d48:	4805      	ldr	r0, [pc, #20]	@ (8002d60 <_mon_alloc_reset+0x20>)
 8002d4a:	f006 f936 	bl	8008fba <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8002d4e:	200a      	movs	r0, #10
 8002d50:	f7ff fe80 	bl	8002a54 <__wrap_malloc>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fea4 	bl	8002aa4 <__wrap_free>
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000e84 	.word	0x20000e84

08002d64 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8002d64:	b530      	push	{r4, r5, lr}
 8002d66:	b089      	sub	sp, #36	@ 0x24
 8002d68:	460c      	mov	r4, r1
 8002d6a:	4605      	mov	r5, r0
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 8002d6c:	a803      	add	r0, sp, #12
 8002d6e:	f7ff ff79 	bl	8002c64 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 8002d72:	230b      	movs	r3, #11
 8002d74:	80e3      	strh	r3, [r4, #6]

  resp->payload.sinfo.devid = conf.devid;
 8002d76:	9b06      	ldr	r3, [sp, #24]
 8002d78:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 8002d7e:	9b04      	ldr	r3, [sp, #16]
 8002d80:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8002d82:	9b05      	ldr	r3, [sp, #20]
 8002d84:	6163      	str	r3, [r4, #20]
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 8002d86:	2200      	movs	r2, #0
  array_u32.offset = 4;
 8002d88:	2304      	movs	r3, #4
  array_u32.data = NULL;
 8002d8a:	e9cd 2301 	strd	r2, r3, [sp, #4]
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <aiPbCmdSysInfo+0x40>)
 8002d90:	61a3      	str	r3, [r4, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 8002d92:	f8c4 d01c 	str.w	sp, [r4, #28]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002d96:	4621      	mov	r1, r4
 8002d98:	4628      	mov	r0, r5
  array_u32.size = 0;
 8002d9a:	9200      	str	r2, [sp, #0]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002d9c:	f7ff fad2 	bl	8002344 <aiPbMgrSendResp>
}
 8002da0:	b009      	add	sp, #36	@ 0x24
 8002da2:	bd30      	pop	{r4, r5, pc}
 8002da4:	0800216b 	.word	0x0800216b

08002da8 <aiExecCtx>:
{
 8002da8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8002dac:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8002dae:	7800      	ldrb	r0, [r0, #0]
 8002db0:	b140      	cbz	r0, 8002dc4 <aiExecCtx+0x1c>
      if (cur->handle &&
 8002db2:	4e12      	ldr	r6, [pc, #72]	@ (8002dfc <aiExecCtx+0x54>)
 8002db4:	6830      	ldr	r0, [r6, #0]
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8002db6:	f8d6 9008 	ldr.w	r9, [r6, #8]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8002dba:	f04f 0800 	mov.w	r8, #0
      if (cur->handle &&
 8002dbe:	b948      	cbnz	r0, 8002dd4 <aiExecCtx+0x2c>
}
 8002dc0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8002dc4:	2900      	cmp	r1, #0
 8002dc6:	d1fb      	bne.n	8002dc0 <aiExecCtx+0x18>
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <aiExecCtx+0x54>)
 8002dca:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[idx];
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	bf18      	it	ne
 8002dd0:	4618      	movne	r0, r3
 8002dd2:	e7f5      	b.n	8002dc0 <aiExecCtx+0x18>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8002dd4:	4648      	mov	r0, r9
 8002dd6:	f7fd fa53 	bl	8000280 <strlen>
 8002dda:	4605      	mov	r5, r0
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7fd fa4f 	bl	8000280 <strlen>
      if (cur->handle &&
 8002de2:	4285      	cmp	r5, r0
 8002de4:	d105      	bne.n	8002df2 <aiExecCtx+0x4a>
          (strncmp(cur->report.model_name, nn_name,
 8002de6:	462a      	mov	r2, r5
 8002de8:	4621      	mov	r1, r4
 8002dea:	4648      	mov	r0, r9
 8002dec:	f006 f8ed 	bl	8008fca <strncmp>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8002df0:	b108      	cbz	r0, 8002df6 <aiExecCtx+0x4e>
    return NULL;
 8002df2:	4640      	mov	r0, r8
 8002df4:	e7e4      	b.n	8002dc0 <aiExecCtx+0x18>
      cur = &net_exec_ctx[idx];
 8002df6:	4630      	mov	r0, r6
 8002df8:	e7e2      	b.n	8002dc0 <aiExecCtx+0x18>
 8002dfa:	bf00      	nop
 8002dfc:	20000eb8 	.word	0x20000eb8

08002e00 <encode_mempool_to_tensor_desc>:
{
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	461e      	mov	r6, r3
  array_u32->size = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	6033      	str	r3, [r6, #0]
  if (info->name)
 8002e08:	6808      	ldr	r0, [r1, #0]
  array_u32->data = (void *)&info->size;
 8002e0a:	1d0b      	adds	r3, r1, #4
 8002e0c:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8002e0e:	2304      	movs	r3, #4
{
 8002e10:	460d      	mov	r5, r1
 8002e12:	4614      	mov	r4, r2
  array_u32->offset = 4;
 8002e14:	60b3      	str	r3, [r6, #8]
  if (info->name)
 8002e16:	b1a0      	cbz	r0, 8002e42 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 8002e18:	2240      	movs	r2, #64	@ 0x40
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	f7ff fa38 	bl	8002290 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8002e20:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <encode_mempool_to_tensor_desc+0x48>)
 8002e22:	6423      	str	r3, [r4, #64]	@ 0x40
  msg->size = info->size;
 8002e24:	686b      	ldr	r3, [r5, #4]
 8002e26:	6463      	str	r3, [r4, #68]	@ 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 8002e28:	6833      	ldr	r3, [r6, #0]
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2e:	64a3      	str	r3, [r4, #72]	@ 0x48
  msg->scale = 0.0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	6563      	str	r3, [r4, #84]	@ 0x54
  msg->zeropoint = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	65a3      	str	r3, [r4, #88]	@ 0x58
  msg->addr = (uint32_t)info->addr;
 8002e38:	68ab      	ldr	r3, [r5, #8]
 8002e3a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8002e40:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 8002e42:	7010      	strb	r0, [r2, #0]
 8002e44:	e7ec      	b.n	8002e20 <encode_mempool_to_tensor_desc+0x20>
 8002e46:	bf00      	nop
 8002e48:	00040440 	.word	0x00040440

08002e4c <fill_tensor_desc_msg>:
{
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 8002e50:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8002e52:	6986      	ldr	r6, [r0, #24]
  array_u32->size = buff->shape.size;
 8002e54:	f3c1 2117 	ubfx	r1, r1, #8, #24
  array_u32->offset = sizeof(buff->shape.data[0]);
 8002e58:	f04f 0c04 	mov.w	ip, #4
{
 8002e5c:	ed2d 8b02 	vpush	{d8}
  array_u32->offset = sizeof(buff->shape.data[0]);
 8002e60:	f8c2 c008 	str.w	ip, [r2, #8]
  array_u32->size = buff->shape.size;
 8002e64:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 8002e66:	6056      	str	r6, [r2, #4]
  msg->name[0] = 0;
 8002e68:	2200      	movs	r2, #0
 8002e6a:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8002e6c:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8002e6e:	6623      	str	r3, [r4, #96]	@ 0x60
  if (buff->shape.type == AI_SHAPE_BCWH)
 8002e70:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 8002e72:	6422      	str	r2, [r4, #64]	@ 0x40
  if (buff->shape.type == AI_SHAPE_BCWH)
 8002e74:	f103 3cff 	add.w	ip, r3, #4294967295
 8002e78:	f1dc 0300 	rsbs	r3, ip, #0
 8002e7c:	eb43 030c 	adc.w	r3, r3, ip
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 8002e80:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  msg->n_dims = _shape_to_n_dims(buff);
 8002e84:	64a1      	str	r1, [r4, #72]	@ 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002e86:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002e88:	6836      	ldr	r6, [r6, #0]
{
 8002e8a:	4605      	mov	r5, r0
 8002e8c:	eeb0 8a40 	vmov.f32	s16, s0
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002e90:	f002 fb78 	bl	8005584 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8002e94:	68ab      	ldr	r3, [r5, #8]
  msg->zeropoint = zero_point;
 8002e96:	9a06      	ldr	r2, [sp, #24]
  msg->scale = scale;
 8002e98:	ed84 8a15 	vstr	s16, [r4, #84]	@ 0x54
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002e9c:	4346      	muls	r6, r0
  msg->size = _get_buffer_element_size(buff);
 8002e9e:	6466      	str	r6, [r4, #68]	@ 0x44
  msg->zeropoint = zero_point;
 8002ea0:	65a2      	str	r2, [r4, #88]	@ 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8002ea2:	b1a3      	cbz	r3, 8002ece <fill_tensor_desc_msg+0x82>
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	07d0      	lsls	r0, r2, #31
 8002ea8:	d511      	bpl.n	8002ece <fill_tensor_desc_msg+0x82>
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	b17b      	cbz	r3, 8002ece <fill_tensor_desc_msg+0x82>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	b192      	cbz	r2, 8002ed8 <fill_tensor_desc_msg+0x8c>
 8002eb2:	8859      	ldrh	r1, [r3, #2]
 8002eb4:	b181      	cbz	r1, 8002ed8 <fill_tensor_desc_msg+0x8c>
 8002eb6:	6811      	ldr	r1, [r2, #0]
 8002eb8:	6809      	ldr	r1, [r1, #0]
 8002eba:	6561      	str	r1, [r4, #84]	@ 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8002ebc:	8819      	ldrh	r1, [r3, #0]
 8002ebe:	0789      	lsls	r1, r1, #30
 8002ec0:	d50c      	bpl.n	8002edc <fill_tensor_desc_msg+0x90>
 8002ec2:	b19a      	cbz	r2, 8002eec <fill_tensor_desc_msg+0xa0>
 8002ec4:	885b      	ldrh	r3, [r3, #2]
 8002ec6:	b10b      	cbz	r3, 8002ecc <fill_tensor_desc_msg+0x80>
 8002ec8:	6853      	ldr	r3, [r2, #4]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002ece:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8002ed2:	686b      	ldr	r3, [r5, #4]
 8002ed4:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	e7ee      	b.n	8002eba <fill_tensor_desc_msg+0x6e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8002edc:	b132      	cbz	r2, 8002eec <fill_tensor_desc_msg+0xa0>
 8002ede:	885b      	ldrh	r3, [r3, #2]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f3      	beq.n	8002ecc <fill_tensor_desc_msg+0x80>
 8002ee4:	6853      	ldr	r3, [r2, #4]
 8002ee6:	f993 3000 	ldrsb.w	r3, [r3]
 8002eea:	e7ef      	b.n	8002ecc <fill_tensor_desc_msg+0x80>
 8002eec:	4613      	mov	r3, r2
 8002eee:	e7ed      	b.n	8002ecc <fill_tensor_desc_msg+0x80>

08002ef0 <encode_ai_buffer_to_tensor_desc>:
{
 8002ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8002ef8:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8002efa:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	ed94 0a02 	vldr	s0, [r4, #8]
 8002f02:	6863      	ldr	r3, [r4, #4]
 8002f04:	241c      	movs	r4, #28
 8002f06:	fb04 5000 	mla	r0, r4, r0, r5
 8002f0a:	f7ff ff9f 	bl	8002e4c <fill_tensor_desc_msg>
}
 8002f0e:	b003      	add	sp, #12
 8002f10:	bd30      	pop	{r4, r5, pc}
	...

08002f14 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8002f14:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 8002f16:	f7fe faf1 	bl	80014fc <HAL_GetTick>
 8002f1a:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8002f1c:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = port_hal_get_tick();
 8002f1e:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8002f20:	2100      	movs	r1, #0
 8002f22:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8002f24:	6852      	ldr	r2, [r2, #4]
 8002f26:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8002f28:	bd08      	pop	{r3, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000e58 	.word	0x20000e58
 8002f30:	e0001000 	.word	0xe0001000

08002f34 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002f36:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <cyclesCounterEnd+0x40>)
 8002f38:	4e0f      	ldr	r6, [pc, #60]	@ (8002f78 <cyclesCounterEnd+0x44>)
 8002f3a:	685d      	ldr	r5, [r3, #4]
 8002f3c:	6873      	ldr	r3, [r6, #4]
 8002f3e:	1aed      	subs	r5, r5, r3
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002f40:	f7fe fadc 	bl	80014fc <HAL_GetTick>
 8002f44:	68b3      	ldr	r3, [r6, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8002f46:	6832      	ldr	r2, [r6, #0]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002f48:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8002f4a:	4290      	cmp	r0, r2
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002f4c:	f04f 0400 	mov.w	r4, #0
  if (tick_e > cyclesCount.dwt_max) {
 8002f50:	d90d      	bls.n	8002f6e <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002f52:	4623      	mov	r3, r4
 8002f54:	4621      	mov	r1, r4
 8002f56:	f7fd ff3d 	bl	8000dd4 <__aeabi_uldivmod>
 8002f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8002f5e:	fba0 0404 	umull	r0, r4, r0, r4
 8002f62:	1940      	adds	r0, r0, r5
 8002f64:	eba4 0401 	sub.w	r4, r4, r1
 8002f68:	4605      	mov	r5, r0
 8002f6a:	f144 0400 	adc.w	r4, r4, #0
  }
  return dwt_e;
#endif
#endif
}
 8002f6e:	4628      	mov	r0, r5
 8002f70:	4621      	mov	r1, r4
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	e0001000 	.word	0xe0001000
 8002f78:	20000e58 	.word	0x20000e58

08002f7c <_get_buffer_size>:
{
 8002f7c:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002f7e:	6983      	ldr	r3, [r0, #24]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002f80:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002f82:	681d      	ldr	r5, [r3, #0]
{
 8002f84:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002f86:	f002 fafd 	bl	8005584 <ai_buffer_get_size>
 8002f8a:	6821      	ldr	r1, [r4, #0]
 8002f8c:	4368      	muls	r0, r5
}
 8002f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002f92:	f002 bb2b 	b.w	80055ec <ai_buffer_get_byte_size>
	...

08002f98 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002f98:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8002f9c:	b08b      	sub	sp, #44	@ 0x2c
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
  resp->which_payload = respMsg_tensor_tag;
 8002fa4:	2311      	movs	r3, #17
 8002fa6:	80cb      	strh	r3, [r1, #6]
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002fa8:	f10d 0a0c 	add.w	sl, sp, #12
 8002fac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002fae:	9300      	str	r3, [sp, #0]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002fb0:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002fb2:	464b      	mov	r3, r9
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	4690      	mov	r8, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002fb8:	3108      	adds	r1, #8
 8002fba:	4652      	mov	r2, sl
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f7ff ff45 	bl	8002e4c <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8002fc4:	f419 7f00 	tst.w	r9, #512	@ 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8002fc8:	e9c4 3a15 	strd	r3, sl, [r4, #84]	@ 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8002fcc:	686b      	ldr	r3, [r5, #4]
 8002fce:	6763      	str	r3, [r4, #116]	@ 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8002fd0:	d115      	bne.n	8002ffe <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f7ff ffd2 	bl	8002f7c <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002fd8:	6f62      	ldr	r2, [r4, #116]	@ 0x74
    resp->payload.tensor.data.size = 0;
 8002fda:	6720      	str	r0, [r4, #112]	@ 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e9cd 3006 	strd	r3, r0, [sp, #24]
 8002fe2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <send_ai_io_tensor.isra.0+0x70>)
 8002fe8:	67a3      	str	r3, [r4, #120]	@ 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8002fea:	ab06      	add	r3, sp, #24
 8002fec:	67e3      	str	r3, [r4, #124]	@ 0x7c
  aiPbMgrSendResp(req, resp, state);
 8002fee:	4642      	mov	r2, r8
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7ff f9a6 	bl	8002344 <aiPbMgrSendResp>
}
 8002ff8:	b00b      	add	sp, #44	@ 0x2c
 8002ffa:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7ea      	b.n	8002fd8 <send_ai_io_tensor.isra.0+0x40>
 8003002:	bf00      	nop
 8003004:	0800216b 	.word	0x0800216b
 8003008:	080021c1 	.word	0x080021c1

0800300c <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 800300c:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003010:	ed2d 8b02 	vpush	{d8}
 8003014:	b095      	sub	sp, #84	@ 0x54
 8003016:	4688      	mov	r8, r1
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003018:	f8d0 4098 	ldr.w	r4, [r0, #152]	@ 0x98
    const ai_observer_node *node) {
 800301c:	4615      	mov	r5, r2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 800301e:	f7ff ff89 	bl	8002f34 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003022:	f018 0602 	ands.w	r6, r8, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003026:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 800302a:	d012      	beq.n	8003052 <aiOnExecNode_cb+0x46>
    obs_ctx->n_cb_in++;
 800302c:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 800302e:	f418 7f80 	tst.w	r8, #256	@ 0x100
    obs_ctx->n_cb_in++;
 8003032:	f103 0301 	add.w	r3, r3, #1
 8003036:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003038:	d003      	beq.n	8003042 <aiOnExecNode_cb+0x36>
      obs_ctx->tnodes = ts;
 800303a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800303e:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8003042:	f7ff ff67 	bl	8002f14 <cyclesCounterStart>
}
 8003046:	2000      	movs	r0, #0
 8003048:	b015      	add	sp, #84	@ 0x54
 800304a:	ecbd 8b02 	vpop	{d8}
 800304e:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8003052:	f018 0f04 	tst.w	r8, #4
 8003056:	d0f4      	beq.n	8003042 <aiOnExecNode_cb+0x36>
    cyclesCounterStart();
 8003058:	f7ff ff5c 	bl	8002f14 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 800305c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003060:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003064:	181b      	adds	r3, r3, r0
 8003066:	eb42 0201 	adc.w	r2, r2, r1
 800306a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 800306e:	68a3      	ldr	r3, [r4, #8]
    type = (EnumOperatorFlag_OPERATOR_FLAG_INTERNAL << 24);
 8003070:	f418 7f00 	tst.w	r8, #512	@ 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8003074:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    obs_ctx->n_cb_out++;
 8003078:	f103 0301 	add.w	r3, r3, #1
 800307c:	60a3      	str	r3, [r4, #8]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 800307e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type = (EnumOperatorFlag_OPERATOR_FLAG_INTERNAL << 24);
 8003082:	bf14      	ite	ne
 8003084:	f04f 7340 	movne.w	r3, #50331648	@ 0x3000000
 8003088:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
    type |= (node->type & (ai_u16)0x7FFF);
 800308c:	f3c8 080e 	ubfx	r8, r8, #0, #15
 8003090:	ea48 0803 	orr.w	r8, r8, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003094:	f7ff fd9a 	bl	8002bcc <dwtCyclesToFloatMs>
 8003098:	ab04      	add	r3, sp, #16
 800309a:	930a      	str	r3, [sp, #40]	@ 0x28
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
 80030a0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80030a4:	ab07      	add	r3, sp, #28
 80030a6:	9302      	str	r3, [sp, #8]
 80030a8:	88ab      	ldrh	r3, [r5, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 80030aa:	ed8d 0a07 	vstr	s0, [sp, #28]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80030ae:	e9cd 8300 	strd	r8, r3, [sp]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 80030b2:	2202      	movs	r2, #2
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80030b4:	4633      	mov	r3, r6
 80030b6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 80030ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80030bc:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80030be:	f7ff fa05 	bl	80024cc <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 80030c2:	68eb      	ldr	r3, [r5, #12]
 80030c4:	881a      	ldrh	r2, [r3, #0]
 80030c6:	2a01      	cmp	r2, #1
 80030c8:	d910      	bls.n	80030ec <aiOnExecNode_cb+0xe0>
 80030ca:	f8d3 9004 	ldr.w	r9, [r3, #4]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80030ce:	eddf 8a3d 	vldr	s17, [pc, #244]	@ 80031c4 <aiOnExecNode_cb+0x1b8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80030d2:	46b2      	mov	sl, r6
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80030d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80030d8:	42b3      	cmp	r3, r6
 80030da:	d907      	bls.n	80030ec <aiOnExecNode_cb+0xe0>
 80030dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80030e0:	b123      	cbz	r3, 80030ec <aiOnExecNode_cb+0xe0>
 80030e2:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 80030e6:	f1b8 0f00 	cmp.w	r8, #0
 80030ea:	d109      	bne.n	8003100 <aiOnExecNode_cb+0xf4>
    obs_ctx->tcom += cyclesCounterEnd();
 80030ec:	f7ff ff22 	bl	8002f34 <cyclesCounterEnd>
 80030f0:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80030f4:	181b      	adds	r3, r3, r0
 80030f6:	eb42 0201 	adc.w	r2, r2, r1
 80030fa:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80030fe:	e7a0      	b.n	8003042 <aiOnExecNode_cb+0x36>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003100:	f8d8 3000 	ldr.w	r3, [r8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d04a      	beq.n	800319e <aiOnExecNode_cb+0x192>
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	2a00      	cmp	r2, #0
 800310c:	d047      	beq.n	800319e <aiOnExecNode_cb+0x192>
 800310e:	8859      	ldrh	r1, [r3, #2]
 8003110:	2900      	cmp	r1, #0
 8003112:	d044      	beq.n	800319e <aiOnExecNode_cb+0x192>
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 800311a:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800311e:	6802      	ldr	r2, [r0, #0]
 8003120:	f412 0500 	ands.w	r5, r2, #8388608	@ 0x800000
 8003124:	d03e      	beq.n	80031a4 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003126:	2b00      	cmp	r3, #0
 8003128:	d047      	beq.n	80031ba <aiOnExecNode_cb+0x1ae>
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	2900      	cmp	r1, #0
 800312e:	d046      	beq.n	80031be <aiOnExecNode_cb+0x1b2>
 8003130:	885d      	ldrh	r5, [r3, #2]
 8003132:	b115      	cbz	r5, 800313a <aiOnExecNode_cb+0x12e>
 8003134:	684b      	ldr	r3, [r1, #4]
 8003136:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 800313a:	68c3      	ldr	r3, [r0, #12]
 800313c:	920d      	str	r2, [sp, #52]	@ 0x34
          AI_BUFFER_INIT(
 800313e:	2101      	movs	r1, #1
 8003140:	4640      	mov	r0, r8
      ai_buffer buffer =
 8003142:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	@ 0x38
 8003146:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
          AI_BUFFER_INIT(
 800314a:	f002 f9ef 	bl	800552c <get_tensor_size>
      ai_buffer buffer =
 800314e:	f898 3008 	ldrb.w	r3, [r8, #8]
 8003152:	f88d 3048 	strb.w	r3, [sp, #72]	@ 0x48
          AI_BUFFER_INIT(
 8003156:	f8d8 3008 	ldr.w	r3, [r8, #8]
      ai_buffer buffer =
 800315a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800315c:	9011      	str	r0, [sp, #68]	@ 0x44
          AI_BUFFER_INIT(
 800315e:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8003162:	f363 221f 	bfi	r2, r3, #8, #24
 8003166:	9212      	str	r2, [sp, #72]	@ 0x48
 8003168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800316c:	9313      	str	r3, [sp, #76]	@ 0x4c
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 800316e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
      if (obs_ctx->no_data)
 8003172:	7d22      	ldrb	r2, [r4, #20]
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8003174:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003176:	42b3      	cmp	r3, r6
 8003178:	bf14      	ite	ne
 800317a:	2304      	movne	r3, #4
 800317c:	f44f 7382 	moveq.w	r3, #260	@ 0x104
      if (obs_ctx->no_data)
 8003180:	b10a      	cbz	r2, 8003186 <aiOnExecNode_cb+0x17a>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003186:	e9cd 3500 	strd	r3, r5, [sp]
 800318a:	eeb0 0a48 	vmov.f32	s0, s16
 800318e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003192:	ab0d      	add	r3, sp, #52	@ 0x34
 8003194:	2202      	movs	r2, #2
 8003196:	f7ff feff 	bl	8002f98 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 800319a:	3601      	adds	r6, #1
 800319c:	e79a      	b.n	80030d4 <aiOnExecNode_cb+0xc8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 800319e:	eeb0 8a68 	vmov.f32	s16, s17
 80031a2:	e7ba      	b.n	800311a <aiOnExecNode_cb+0x10e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0c8      	beq.n	800313a <aiOnExecNode_cb+0x12e>
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	2900      	cmp	r1, #0
 80031ac:	d0c5      	beq.n	800313a <aiOnExecNode_cb+0x12e>
 80031ae:	885b      	ldrh	r3, [r3, #2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0c2      	beq.n	800313a <aiOnExecNode_cb+0x12e>
 80031b4:	684b      	ldr	r3, [r1, #4]
 80031b6:	781d      	ldrb	r5, [r3, #0]
 80031b8:	e7bf      	b.n	800313a <aiOnExecNode_cb+0x12e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80031ba:	461d      	mov	r5, r3
 80031bc:	e7bd      	b.n	800313a <aiOnExecNode_cb+0x12e>
 80031be:	460d      	mov	r5, r1
 80031c0:	e7bb      	b.n	800313a <aiOnExecNode_cb+0x12e>
 80031c2:	bf00      	nop
 80031c4:	00000000 	.word	0x00000000

080031c8 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80031c8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80031cc:	4606      	mov	r6, r0
 80031ce:	b0a2      	sub	sp, #136	@ 0x88
 80031d0:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 80031d2:	300c      	adds	r0, #12
 80031d4:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80031d8:	f7ff fde6 	bl	8002da8 <aiExecCtx>
  if (ctx)
 80031dc:	4605      	mov	r5, r0
 80031de:	2800      	cmp	r0, #0
 80031e0:	f000 80d6 	beq.w	8003390 <aiPbCmdNNInfo+0x1c8>
  resp->which_payload = respMsg_minfo_tag;
 80031e4:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 80031e6:	f890 9090 	ldrb.w	r9, [r0, #144]	@ 0x90
 80031ea:	f890 8091 	ldrb.w	r8, [r0, #145]	@ 0x91
  resp->which_payload = respMsg_minfo_tag;
 80031ee:	80e3      	strh	r3, [r4, #6]
  stai_runtime_get_info(&rt_info);
 80031f0:	a81c      	add	r0, sp, #112	@ 0x70
 80031f2:	f002 f96b 	bl	80054cc <stai_runtime_get_info>
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80031f6:	68a8      	ldr	r0, [r5, #8]
 80031f8:	2240      	movs	r2, #64	@ 0x40
 80031fa:	f104 0108 	add.w	r1, r4, #8
 80031fe:	f7ff f847 	bl	8002290 <aiPbStrCopy>
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 8003202:	68e8      	ldr	r0, [r5, #12]
 8003204:	2240      	movs	r2, #64	@ 0x40
 8003206:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 800320a:	f7ff f841 	bl	8002290 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 800320e:	6968      	ldr	r0, [r5, #20]
 8003210:	2240      	movs	r2, #64	@ 0x40
 8003212:	f104 018c 	add.w	r1, r4, #140	@ 0x8c
 8003216:	f7ff f83b 	bl	8002290 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 800321a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800321c:	ba1b      	rev	r3, r3
 800321e:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003222:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003224:	ba1b      	rev	r3, r3
 8003226:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 800322a:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
  if (id == STAI_COMPILER_ID_GCC) {
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00f      	beq.n	8003252 <aiPbCmdNNInfo+0x8a>
  else if (id == STAI_COMPILER_ID_GHS) {
 8003232:	2b10      	cmp	r3, #16
 8003234:	f000 80a0 	beq.w	8003378 <aiPbCmdNNInfo+0x1b0>
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 8003238:	2b20      	cmp	r3, #32
 800323a:	f000 809f 	beq.w	800337c <aiPbCmdNNInfo+0x1b4>
  else if  (id == STAI_COMPILER_ID_IAR) {
 800323e:	2b30      	cmp	r3, #48	@ 0x30
 8003240:	f000 809e 	beq.w	8003380 <aiPbCmdNNInfo+0x1b8>
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 8003244:	2b50      	cmp	r3, #80	@ 0x50
 8003246:	f000 809d 	beq.w	8003384 <aiPbCmdNNInfo+0x1bc>
  return STAI_COMPILER_ID_NONE;
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	bf0c      	ite	eq
 800324e:	2303      	moveq	r3, #3
 8003250:	2300      	movne	r3, #0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	f043 0301 	orr.w	r3, r3, #1
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8003258:	9821      	ldr	r0, [sp, #132]	@ 0x84
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 800325a:	64a3      	str	r3, [r4, #72]	@ 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 800325c:	2240      	movs	r2, #64	@ 0x40
 800325e:	f504 718a 	add.w	r1, r4, #276	@ 0x114
 8003262:	f7ff f815 	bl	8002290 <aiPbStrCopy>
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003266:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
  flags = EnumTensorFlag_TENSOR_FLAG_INPUT;
 800326a:	f1b9 0f00 	cmp.w	r9, #0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 800326e:	e9c4 2336 	strd	r2, r3, [r4, #216]	@ 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003272:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003276:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003278:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  flags = EnumTensorFlag_TENSOR_FLAG_INPUT;
 800327c:	f240 4301 	movw	r3, #1025	@ 0x401
 8003280:	bf08      	it	eq
 8003282:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003284:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003288:	f8b5 2040 	ldrh.w	r2, [r5, #64]	@ 0x40
  struct _encode_tensor_desc tensor_ins = {
 800328c:	9203      	str	r2, [sp, #12]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800328e:	2300      	movs	r3, #0
  resp->payload.minfo.n_inputs = nn->n_inputs;
 8003290:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003294:	aa02      	add	r2, sp, #8
  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 8003296:	4598      	cmp	r8, r3
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003298:	f8c4 20ec 	str.w	r2, [r4, #236]	@ 0xec
  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 800329c:	f240 4202 	movw	r2, #1026	@ 0x402
 80032a0:	bf18      	it	ne
 80032a2:	4694      	movne	ip, r2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80032a4:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  struct _encode_tensor_desc tensor_ins = {
 80032a6:	483e      	ldr	r0, [pc, #248]	@ (80033a0 <aiPbCmdNNInfo+0x1d8>)
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	a914      	add	r1, sp, #80	@ 0x50
  flags = EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 80032ac:	bf08      	it	eq
 80032ae:	f04f 0c02 	moveq.w	ip, #2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80032b2:	e9cd 2c18 	strd	r2, ip, [sp, #96]	@ 0x60
  struct _encode_tensor_desc tensor_ins = {
 80032b6:	9104      	str	r1, [sp, #16]
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 80032b8:	f8b5 2042 	ldrh.w	r2, [r5, #66]	@ 0x42
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 80032bc:	4939      	ldr	r1, [pc, #228]	@ (80033a4 <aiPbCmdNNInfo+0x1dc>)
  if (nn->map_activations.size) {
 80032be:	f8b5 c05a 	ldrh.w	ip, [r5, #90]	@ 0x5a
  struct _encode_tensor_desc tensor_outs = {
 80032c2:	9005      	str	r0, [sp, #20]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80032c4:	f04f 0e00 	mov.w	lr, #0
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 80032c8:	e9c4 213c 	strd	r2, r1, [r4, #240]	@ 0xf0
  struct _encode_tensor_desc tensor_outs = {
 80032cc:	9206      	str	r2, [sp, #24]
 80032ce:	a818      	add	r0, sp, #96	@ 0x60
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 80032d0:	aa05      	add	r2, sp, #20
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80032d2:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 80032d6:	9317      	str	r3, [sp, #92]	@ 0x5c
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 80032d8:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80032dc:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
 80032e0:	931b      	str	r3, [sp, #108]	@ 0x6c
  struct _encode_tensor_desc tensor_outs = {
 80032e2:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 80032e4:	f8c4 20f8 	str.w	r2, [r4, #248]	@ 0xf8
  if (nn->map_activations.size) {
 80032e8:	f1bc 0f00 	cmp.w	ip, #0
 80032ec:	d04c      	beq.n	8003388 <aiPbCmdNNInfo+0x1c0>
      size_acts += nn->map_activations.buffer[i].size;
 80032ee:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 80032f0:	4618      	mov	r0, r3
      size_acts += nn->map_activations.buffer[i].size;
 80032f2:	3210      	adds	r2, #16
 80032f4:	f04f 081c 	mov.w	r8, #28
 80032f8:	fb08 fe00 	mul.w	lr, r8, r0
    for (int i=0; i<nn->map_activations.size; i++)
 80032fc:	3001      	adds	r0, #1
      size_acts += nn->map_activations.buffer[i].size;
 80032fe:	f852 e00e 	ldr.w	lr, [r2, lr]
    for (int i=0; i<nn->map_activations.size; i++)
 8003302:	4560      	cmp	r0, ip
      size_acts += nn->map_activations.buffer[i].size;
 8003304:	4473      	add	r3, lr
    for (int i=0; i<nn->map_activations.size; i++)
 8003306:	dbf7      	blt.n	80032f8 <aiPbCmdNNInfo+0x130>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003308:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <aiPbCmdNNInfo+0x1e0>)
  struct _encode_tensor_desc tensor_acts = {
 800330a:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80033b0 <aiPbCmdNNInfo+0x1e8>
 800330e:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8003312:	a808      	add	r0, sp, #32
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003314:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 8003318:	900d      	str	r0, [sp, #52]	@ 0x34
 800331a:	2201      	movs	r2, #1
  if (nn->map_weights.size) {
 800331c:	f8b5 0052 	ldrh.w	r0, [r5, #82]	@ 0x52
  struct _encode_tensor_desc tensor_acts = {
 8003320:	920c      	str	r2, [sp, #48]	@ 0x30
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8003322:	e9c4 213f 	strd	r2, r1, [r4, #252]	@ 0xfc
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003326:	2300      	movs	r3, #0
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003328:	aa0b      	add	r2, sp, #44	@ 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800332a:	930a      	str	r3, [sp, #40]	@ 0x28
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 800332c:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
  if (nn->map_weights.size) {
 8003330:	b360      	cbz	r0, 800338c <aiPbCmdNNInfo+0x1c4>
      size_params += nn->map_weights.buffer[i].size;
 8003332:	6d6d      	ldr	r5, [r5, #84]	@ 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 8003334:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8003336:	3510      	adds	r5, #16
 8003338:	f04f 081c 	mov.w	r8, #28
 800333c:	fb08 fe02 	mul.w	lr, r8, r2
    for (int i=0; i<nn->map_weights.size; i++)
 8003340:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 8003342:	f855 e00e 	ldr.w	lr, [r5, lr]
    for (int i=0; i<nn->map_weights.size; i++)
 8003346:	4290      	cmp	r0, r2
      size_params += nn->map_weights.buffer[i].size;
 8003348:	4473      	add	r3, lr
    for (int i=0; i<nn->map_weights.size; i++)
 800334a:	dcf7      	bgt.n	800333c <aiPbCmdNNInfo+0x174>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 800334c:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <aiPbCmdNNInfo+0x1e4>)
 800334e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  struct _encode_tensor_desc tensor_w = {
 8003352:	2301      	movs	r3, #1
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 8003354:	e9c4 3142 	strd	r3, r1, [r4, #264]	@ 0x108
  struct _encode_tensor_desc tensor_w = {
 8003358:	a80e      	add	r0, sp, #56	@ 0x38
 800335a:	9312      	str	r3, [sp, #72]	@ 0x48
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 800335c:	ab11      	add	r3, sp, #68	@ 0x44
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 800335e:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 8003360:	9013      	str	r0, [sp, #76]	@ 0x4c
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003362:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  aiPbMgrSendResp(req, resp, state);
 8003366:	4621      	mov	r1, r4
 8003368:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 800336a:	e9cd 2c10 	strd	r2, ip, [sp, #64]	@ 0x40
  aiPbMgrSendResp(req, resp, state);
 800336e:	f7fe ffe9 	bl	8002344 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8003372:	b022      	add	sp, #136	@ 0x88
 8003374:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return EnumTools_AI_GHS;
 8003378:	2306      	movs	r3, #6
 800337a:	e76a      	b.n	8003252 <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_HTC;
 800337c:	2305      	movs	r3, #5
 800337e:	e768      	b.n	8003252 <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_IAR;
 8003380:	2302      	movs	r3, #2
 8003382:	e766      	b.n	8003252 <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_MDK_6;
 8003384:	2304      	movs	r3, #4
 8003386:	e764      	b.n	8003252 <aiPbCmdNNInfo+0x8a>
  ai_size size_acts = 0;
 8003388:	4663      	mov	r3, ip
 800338a:	e7bd      	b.n	8003308 <aiPbCmdNNInfo+0x140>
  ai_size size_params = 0;
 800338c:	4603      	mov	r3, r0
 800338e:	e7dd      	b.n	800334c <aiPbCmdNNInfo+0x184>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003390:	2304      	movs	r3, #4
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4621      	mov	r1, r4
 8003398:	4630      	mov	r0, r6
 800339a:	f7ff f827 	bl	80023ec <aiPbMgrSendAck>
}
 800339e:	e7e8      	b.n	8003372 <aiPbCmdNNInfo+0x1aa>
 80033a0:	08002ef1 	.word	0x08002ef1
 80033a4:	080022dd 	.word	0x080022dd
 80033a8:	0800b44a 	.word	0x0800b44a
 80033ac:	0800b44f 	.word	0x0800b44f
 80033b0:	08002e01 	.word	0x08002e01

080033b4 <_print_debug>:
{
 80033b4:	b40e      	push	{r1, r2, r3}
 80033b6:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 80033b8:	b178      	cbz	r0, 80033da <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80033ba:	4c0f      	ldr	r4, [pc, #60]	@ (80033f8 <_print_debug+0x44>)
 80033bc:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, fmt);
 80033be:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80033c0:	2150      	movs	r1, #80	@ 0x50
 80033c2:	4620      	mov	r0, r4
  va_start(ap, fmt);
 80033c4:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80033c6:	f7ff fb35 	bl	8002a34 <lc_vsnprint>
      _print_buffer[s] = 0;
 80033ca:	2100      	movs	r1, #0
 80033cc:	1903      	adds	r3, r0, r4
  while (s) {
 80033ce:	b948      	cbnz	r0, 80033e4 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 80033d0:	2101      	movs	r1, #1
 80033d2:	4a09      	ldr	r2, [pc, #36]	@ (80033f8 <_print_debug+0x44>)
 80033d4:	4608      	mov	r0, r1
 80033d6:	f7ff f827 	bl	8002428 <aiPbMgrSendLogV2>
}
 80033da:	b003      	add	sp, #12
 80033dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e0:	b003      	add	sp, #12
 80033e2:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	2a0a      	cmp	r2, #10
 80033e8:	d001      	beq.n	80033ee <_print_debug+0x3a>
 80033ea:	2a0d      	cmp	r2, #13
 80033ec:	d100      	bne.n	80033f0 <_print_debug+0x3c>
      _print_buffer[s] = 0;
 80033ee:	7019      	strb	r1, [r3, #0]
    s--;
 80033f0:	3801      	subs	r0, #1
 80033f2:	3b01      	subs	r3, #1
 80033f4:	e7eb      	b.n	80033ce <_print_debug+0x1a>
 80033f6:	bf00      	nop
 80033f8:	20000f98 	.word	0x20000f98

080033fc <aiPbCmdNNRun>:
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
}


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 80033fc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003400:	ed2d 8b02 	vpush	{d8}
 8003404:	4605      	mov	r5, r0
 8003406:	b0a2      	sub	sp, #136	@ 0x88
 8003408:	460e      	mov	r6, r1
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800340a:	f3ef 8014 	mrs	r0, CONTROL
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800340e:	f3ef 8108 	mrs	r1, MSP
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 8003412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003416:	f7ff fb6d 	bl	8002af4 <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 800341a:	f04f 31ff 	mov.w	r1, #4294967295
 800341e:	f105 000c 	add.w	r0, r5, #12
 8003422:	f7ff fcc1 	bl	8002da8 <aiExecCtx>
  if (!ctx) {
 8003426:	4604      	mov	r4, r0
 8003428:	b910      	cbnz	r0, 8003430 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800342a:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	e19b      	b.n	8003768 <aiPbCmdNNRun+0x36c>
  _set_context(req, ctx);
 8003430:	68a8      	ldr	r0, [r5, #8]
  ctx->emit_intermediate_data = false;
 8003432:	2300      	movs	r3, #0
 8003434:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8003438:	0743      	lsls	r3, r0, #29
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 800343a:	bf53      	iteet	pl
 800343c:	f3c0 0340 	ubfxpl	r3, r0, #1, #1
    ctx->observer_is_enabled = true;
 8003440:	f240 1301 	movwmi	r3, #257	@ 0x101
 8003444:	f8a4 3092 	strhmi.w	r3, [r4, #146]	@ 0x92
 8003448:	f884 3092 	strbpl.w	r3, [r4, #146]	@ 0x92
  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 800344c:	f3c0 2380 	ubfx	r3, r0, #10, #1
 8003450:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 8003454:	f3c0 2340 	ubfx	r3, r0, #9, #1
 8003458:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
  net_obs_ctx.no_data = true;
 800345c:	4bc8      	ldr	r3, [pc, #800]	@ (8003780 <aiPbCmdNNRun+0x384>)
 800345e:	f894 1092 	ldrb.w	r1, [r4, #146]	@ 0x92
 8003462:	7019      	strb	r1, [r3, #0]
  if (ctx->emit_intermediate_data) {
 8003464:	f894 1093 	ldrb.w	r1, [r4, #147]	@ 0x93
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003468:	f3c0 2000 	ubfx	r0, r0, #8, #1
  net_obs_ctx.no_data = true;
 800346c:	2201      	movs	r2, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800346e:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
  net_obs_ctx.no_data = true;
 8003472:	751a      	strb	r2, [r3, #20]
  if (ctx->emit_intermediate_data) {
 8003474:	b111      	cbz	r1, 800347c <aiPbCmdNNRun+0x80>
    net_obs_ctx.is_enabled = true;
 8003476:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 8003478:	2200      	movs	r2, #0
 800347a:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 800347c:	f04f 0800 	mov.w	r8, #0
 8003480:	f04f 0900 	mov.w	r9, #0
 8003484:	e9c3 8906 	strd	r8, r9, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8003488:	e9c3 8908 	strd	r8, r9, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 800348c:	e9c3 8801 	strd	r8, r8, [r3, #4]
  ctx->obs_ctx = &net_obs_ctx;
 8003490:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  ai_input = ctx->report.inputs;
 8003494:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003496:	9304      	str	r3, [sp, #16]
  ai_output = ctx->report.outputs;
 8003498:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 800349a:	68a2      	ldr	r2, [r4, #8]
 800349c:	49b9      	ldr	r1, [pc, #740]	@ (8003784 <aiPbCmdNNRun+0x388>)
  ai_output = ctx->report.outputs;
 800349e:	9305      	str	r3, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 80034a0:	2301      	movs	r3, #1
 80034a2:	f7ff ff87 	bl	80033b4 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 80034a6:	f894 1095 	ldrb.w	r1, [r4, #149]	@ 0x95
 80034aa:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 80034ae:	f894 2092 	ldrb.w	r2, [r4, #146]	@ 0x92
 80034b2:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 80034b6:	9101      	str	r1, [sp, #4]
 80034b8:	f894 1094 	ldrb.w	r1, [r4, #148]	@ 0x94
 80034bc:	9100      	str	r1, [sp, #0]
 80034be:	49b2      	ldr	r1, [pc, #712]	@ (8003788 <aiPbCmdNNRun+0x38c>)
 80034c0:	f7ff ff78 	bl	80033b4 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%x, param=0x%x\r\n",
 80034c4:	9804      	ldr	r0, [sp, #16]
 80034c6:	f894 9096 	ldrb.w	r9, [r4, #150]	@ 0x96
 80034ca:	f7ff fd57 	bl	8002f7c <_get_buffer_size>
 80034ce:	68ab      	ldr	r3, [r5, #8]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	4602      	mov	r2, r0
 80034d4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80034d6:	49ad      	ldr	r1, [pc, #692]	@ (800378c <aiPbCmdNNRun+0x390>)
 80034d8:	4648      	mov	r0, r9
 80034da:	f7ff ff6b 	bl	80033b4 <_print_debug>
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80034de:	9804      	ldr	r0, [sp, #16]
 80034e0:	f7ff fd4c 	bl	8002f7c <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80034e4:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80034e6:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80034e8:	4631      	mov	r1, r6
 80034ea:	4628      	mov	r0, r5
 80034ec:	f8cd 8000 	str.w	r8, [sp]
 80034f0:	f7fe ff7c 	bl	80023ec <aiPbMgrSendAck>
  tick = port_hal_get_tick();
 80034f4:	f7fe f802 	bl	80014fc <HAL_GetTick>
 80034f8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80034fc:	9008      	str	r0, [sp, #32]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80034fe:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8003502:	4543      	cmp	r3, r8
 8003504:	f300 80f6 	bgt.w	80036f4 <aiPbCmdNNRun+0x2f8>
  tick = port_hal_get_tick() - tick;
 8003508:	f7fd fff8 	bl	80014fc <HAL_GetTick>
  PB_LC_PRINT(ctx->debug, "RUN: %d ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 800350c:	9a08      	ldr	r2, [sp, #32]
 800350e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8003512:	499f      	ldr	r1, [pc, #636]	@ (8003790 <aiPbCmdNNRun+0x394>)
 8003514:	1a82      	subs	r2, r0, r2
 8003516:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 800351a:	f7ff ff4b 	bl	80033b4 <_print_debug>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800351e:	f8d4 8098 	ldr.w	r8, [r4, #152]	@ 0x98
  if (obs_ctx->is_enabled == false)
 8003522:	f898 3000 	ldrb.w	r3, [r8]
 8003526:	b193      	cbz	r3, 800354e <aiPbCmdNNRun+0x152>
  if (ctx->handle == AI_HANDLE_NULL)
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	b180      	cbz	r0, 800354e <aiPbCmdNNRun+0x152>
  ai_mnetwork_get_private_handle(ctx->handle,
 800352c:	a90e      	add	r1, sp, #56	@ 0x38
  obs_ctx->cresp = cresp;
 800352e:	e9c8 5603 	strd	r5, r6, [r8, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8003532:	aa14      	add	r2, sp, #80	@ 0x50
 8003534:	f000 fbc3 	bl	8003cbe <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8003538:	4b96      	ldr	r3, [pc, #600]	@ (8003794 <aiPbCmdNNRun+0x398>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 800353a:	e9c8 340a 	strd	r3, r4, [r8, #40]	@ 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 800353e:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003540:	980e      	ldr	r0, [sp, #56]	@ 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003542:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003546:	f108 0128 	add.w	r1, r8, #40	@ 0x28
 800354a:	f002 ff4b 	bl	80063e4 <ai_platform_observer_register_s>
  MON_ALLOC_ENABLE();
 800354e:	f8df 9264 	ldr.w	r9, [pc, #612]	@ 80037b4 <aiPbCmdNNRun+0x3b8>
  MON_ALLOC_RESET();
 8003552:	f7ff fbf5 	bl	8002d40 <_mon_alloc_reset>
  MON_ALLOC_ENABLE();
 8003556:	f8d9 3000 	ldr.w	r3, [r9]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 800355a:	f894 8096 	ldrb.w	r8, [r4, #150]	@ 0x96
  MON_ALLOC_ENABLE();
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	f8c9 3000 	str.w	r3, [r9]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8003566:	f7fd ffc9 	bl	80014fc <HAL_GetTick>
 800356a:	498b      	ldr	r1, [pc, #556]	@ (8003798 <aiPbCmdNNRun+0x39c>)
 800356c:	4602      	mov	r2, r0
 800356e:	4640      	mov	r0, r8
 8003570:	f7ff ff20 	bl	80033b4 <_print_debug>
 8003574:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8003578:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 80037b8 <aiPbCmdNNRun+0x3bc>
 800357c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d004      	beq.n	800358e <aiPbCmdNNRun+0x192>
 8003584:	f3ef 8108 	mrs	r1, MSP
 8003588:	4884      	ldr	r0, [pc, #528]	@ (800379c <aiPbCmdNNRun+0x3a0>)
 800358a:	f7ff fa41 	bl	8002a10 <lc_print>
  MON_STACK_MARK();
 800358e:	f898 3004 	ldrb.w	r3, [r8, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 813f 	bne.w	8003816 <aiPbCmdNNRun+0x41a>
  tick = port_hal_get_tick();
 8003598:	f7fd ffb0 	bl	80014fc <HAL_GetTick>
 800359c:	4682      	mov	sl, r0
  cyclesCounterStart();
 800359e:	f7ff fcb9 	bl	8002f14 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80035a2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	f000 fb7b 	bl	8003ca2 <ai_mnetwork_run>
  if (batch != 1) {
 80035ac:	2801      	cmp	r0, #1
 80035ae:	f040 8141 	bne.w	8003834 <aiPbCmdNNRun+0x438>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
  }
  tend = cyclesCounterEnd();
 80035b2:	f7ff fcbf 	bl	8002f34 <cyclesCounterEnd>
 80035b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  tick = port_hal_get_tick() - tick;
 80035ba:	f7fd ff9f 	bl	80014fc <HAL_GetTick>

  MON_ALLOC_DISABLE();
 80035be:	f8d9 3000 	ldr.w	r3, [r9]
  tick = port_hal_get_tick() - tick;
 80035c2:	eba0 0a0a 	sub.w	sl, r0, sl
  MON_STACK_EVALUATE();
 80035c6:	f898 0004 	ldrb.w	r0, [r8, #4]
  MON_ALLOC_DISABLE();
 80035ca:	f023 0301 	bic.w	r3, r3, #1
  MON_STACK_EVALUATE();
 80035ce:	2200      	movs	r2, #0
  MON_ALLOC_DISABLE();
 80035d0:	f8c9 3000 	str.w	r3, [r9]
  MON_STACK_EVALUATE();
 80035d4:	f8c8 2008 	str.w	r2, [r8, #8]
 80035d8:	b338      	cbz	r0, 800362a <aiPbCmdNNRun+0x22e>
 80035da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80035de:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80035e2:	1ac9      	subs	r1, r1, r3
 80035e4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80035e8:	3303      	adds	r3, #3
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	f103 0c20 	add.w	ip, r3, #32
 80035f2:	f853 eb04 	ldr.w	lr, [r3], #4
 80035f6:	f1be 3fde 	cmp.w	lr, #3739147998	@ 0xdededede
 80035fa:	bf18      	it	ne
 80035fc:	4602      	movne	r2, r0
 80035fe:	4563      	cmp	r3, ip
 8003600:	d1f7      	bne.n	80035f2 <aiPbCmdNNRun+0x1f6>
 8003602:	2a00      	cmp	r2, #0
 8003604:	f040 8123 	bne.w	800384e <aiPbCmdNNRun+0x452>
 8003608:	2220      	movs	r2, #32
 800360a:	f8d8 c018 	ldr.w	ip, [r8, #24]
 800360e:	f8c8 2008 	str.w	r2, [r8, #8]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003618:	f1b2 3fde 	cmp.w	r2, #3739147998	@ 0xdededede
 800361c:	d102      	bne.n	8003624 <aiPbCmdNNRun+0x228>
 800361e:	4563      	cmp	r3, ip
 8003620:	f0c0 8110 	bcc.w	8003844 <aiPbCmdNNRun+0x448>
 8003624:	1a08      	subs	r0, r1, r0
 8003626:	f8c8 0008 	str.w	r0, [r8, #8]

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800362a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
    }
    if ((i + 1) == ctx->report.n_outputs) {
      state = EnumState_S_DONE;
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800362e:	ed9f 8a5c 	vldr	s16, [pc, #368]	@ 80037a0 <aiPbCmdNNRun+0x3a4>
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8003632:	e9d1 3206 	ldrd	r3, r2, [r1, #24]
 8003636:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800363a:	181b      	adds	r3, r3, r0
 800363c:	eb42 0201 	adc.w	r2, r2, r1
 8003640:	990c      	ldr	r1, [sp, #48]	@ 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 8003642:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8003646:	18c9      	adds	r1, r1, r3
 8003648:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800364a:	eb42 0303 	adc.w	r3, r2, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800364e:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 8003652:	4652      	mov	r2, sl
 8003654:	4953      	ldr	r1, [pc, #332]	@ (80037a4 <aiPbCmdNNRun+0x3a8>)
 8003656:	f7ff fead 	bl	80033b4 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 800365a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800365e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003662:	4951      	ldr	r1, [pc, #324]	@ (80037a8 <aiPbCmdNNRun+0x3ac>)
 8003664:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 8003668:	f7ff fea4 	bl	80033b4 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 800366c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003670:	f7ff faac 	bl	8002bcc <dwtCyclesToFloatMs>
 8003674:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8003678:	9113      	str	r1, [sp, #76]	@ 0x4c
  if (ctx->observer_is_enabled)
 800367a:	f894 1092 	ldrb.w	r1, [r4, #146]	@ 0x92
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 800367e:	ed8d 0a0e 	vstr	s0, [sp, #56]	@ 0x38
 8003682:	f04f 0a00 	mov.w	sl, #0
    perf.stack_usage = -1;
 8003686:	4551      	cmp	r1, sl
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003688:	ab0c      	add	r3, sp, #48	@ 0x30
 800368a:	9311      	str	r3, [sp, #68]	@ 0x44
 800368c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003690:	f8cd a000 	str.w	sl, [sp]
    perf.stack_usage = -1;
 8003694:	bf18      	it	ne
 8003696:	f04f 33ff 	movne.w	r3, #4294967295
 800369a:	9312      	str	r3, [sp, #72]	@ 0x48
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800369c:	ab0e      	add	r3, sp, #56	@ 0x38
 800369e:	e9cd a301 	strd	sl, r3, [sp, #4]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80036a2:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80036aa:	e9cd a20f 	strd	sl, r2, [sp, #60]	@ 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80036ae:	f7fe ff0d 	bl	80024cc <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 80036b2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	@ 0x42
 80036b6:	493d      	ldr	r1, [pc, #244]	@ (80037ac <aiPbCmdNNRun+0x3b0>)
 80036b8:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 80036bc:	f7ff fe7a 	bl	80033b4 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80036c0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80036c4:	46d0      	mov	r8, sl
    uint32_t flags =  EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 80036c6:	f240 2a02 	movw	sl, #514	@ 0x202
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80036ca:	f8b4 2042 	ldrh.w	r2, [r4, #66]	@ 0x42
 80036ce:	4542      	cmp	r2, r8
 80036d0:	f300 80c8 	bgt.w	8003864 <aiPbCmdNNRun+0x468>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80036d4:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  if (obs_ctx->is_enabled == false)
 80036d8:	782b      	ldrb	r3, [r5, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d049      	beq.n	8003772 <aiPbCmdNNRun+0x376>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80036de:	a90b      	add	r1, sp, #44	@ 0x2c
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	aa14      	add	r2, sp, #80	@ 0x50
 80036e4:	f000 faeb 	bl	8003cbe <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 80036e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80036ea:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 80036ee:	f002 feb5 	bl	800645c <ai_platform_observer_unregister_s>
  return 0;
 80036f2:	e03e      	b.n	8003772 <aiPbCmdNNRun+0x376>
    if ((i + 1) == ctx->report.n_inputs)
 80036f4:	f108 0801 	add.w	r8, r8, #1
      state = EnumState_S_PROCESSING;
 80036f8:	4598      	cmp	r8, r3
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2302      	moveq	r3, #2
    batch += _get_buffer_size(&ai_input[i]);
 8003700:	4648      	mov	r0, r9
      state = EnumState_S_PROCESSING;
 8003702:	9307      	str	r3, [sp, #28]
    batch += _get_buffer_size(&ai_input[i]);
 8003704:	f7ff fc3a 	bl	8002f7c <_get_buffer_size>
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003708:	2300      	movs	r3, #0
 800370a:	4648      	mov	r0, r9
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 800370c:	f894 b094 	ldrb.w	fp, [r4, #148]	@ 0x94
 8003710:	f894 a095 	ldrb.w	sl, [r4, #149]	@ 0x95
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003714:	9314      	str	r3, [sp, #80]	@ 0x50
 8003716:	f7ff fc31 	bl	8002f7c <_get_buffer_size>
 800371a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800371e:	9316      	str	r3, [sp, #88]	@ 0x58
 8003720:	2300      	movs	r3, #0
 8003722:	9015      	str	r0, [sp, #84]	@ 0x54
 8003724:	9317      	str	r3, [sp, #92]	@ 0x5c
  if ((simple_value) || (direct_write))
 8003726:	f1bb 0f00 	cmp.w	fp, #0
 800372a:	d102      	bne.n	8003732 <aiPbCmdNNRun+0x336>
 800372c:	f1ba 0f00 	cmp.w	sl, #0
 8003730:	d011      	beq.n	8003756 <aiPbCmdNNRun+0x35a>
    data.size = _get_element_size(buffer);
 8003732:	f8d9 1000 	ldr.w	r1, [r9]
  const ai_bool is_binary = (AI_BUFFER_FMT_SAME(AI_BUFFER_FORMAT(buffer), AI_BUFFER_FORMAT_S1) ||
 8003736:	4a1e      	ldr	r2, [pc, #120]	@ (80037b0 <aiPbCmdNNRun+0x3b4>)
 8003738:	f021 437e 	bic.w	r3, r1, #4261412864	@ 0xfe000000
 800373c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003740:	4293      	cmp	r3, r2
 8003742:	d01b      	beq.n	800377c <aiPbCmdNNRun+0x380>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8003744:	2001      	movs	r0, #1
 8003746:	f001 ff51 	bl	80055ec <ai_buffer_get_byte_size>
    data.size = _get_element_size(buffer);
 800374a:	9015      	str	r0, [sp, #84]	@ 0x54
  if (direct_write)
 800374c:	f1ba 0f00 	cmp.w	sl, #0
 8003750:	d001      	beq.n	8003756 <aiPbCmdNNRun+0x35a>
    data.addr = (uintptr_t)&temp;
 8003752:	ab0e      	add	r3, sp, #56	@ 0x38
 8003754:	9316      	str	r3, [sp, #88]	@ 0x58
  aiPbMgrReceiveData(&data);
 8003756:	a814      	add	r0, sp, #80	@ 0x50
 8003758:	f7fe fe9e 	bl	8002498 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 800375c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800375e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003760:	4293      	cmp	r3, r2
 8003762:	d02b      	beq.n	80037bc <aiPbCmdNNRun+0x3c0>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003764:	2201      	movs	r2, #1
 8003766:	9200      	str	r2, [sp, #0]
 8003768:	2204      	movs	r2, #4
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	f7fe fe3d 	bl	80023ec <aiPbMgrSendAck>
  }

  aiObserverUnbind(ctx);
}
 8003772:	b022      	add	sp, #136	@ 0x88
 8003774:	ecbd 8b02 	vpop	{d8}
 8003778:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    return 4;
 800377c:	2004      	movs	r0, #4
 800377e:	e7e4      	b.n	800374a <aiPbCmdNNRun+0x34e>
 8003780:	20000f58 	.word	0x20000f58
 8003784:	0800b456 	.word	0x0800b456
 8003788:	0800b470 	.word	0x0800b470
 800378c:	0800b4a9 	.word	0x0800b4a9
 8003790:	0800b4df 	.word	0x0800b4df
 8003794:	0800300d 	.word	0x0800300d
 8003798:	0800b507 	.word	0x0800b507
 800379c:	0800b52c 	.word	0x0800b52c
 80037a0:	00000000 	.word	0x00000000
 80037a4:	0800b5fd 	.word	0x0800b5fd
 80037a8:	0800b624 	.word	0x0800b624
 80037ac:	0800b642 	.word	0x0800b642
 80037b0:	000400c0 	.word	0x000400c0
 80037b4:	20000e84 	.word	0x20000e84
 80037b8:	20000e64 	.word	0x20000e64
  if ((simple_value) && (!direct_write))/* broadcast the value */
 80037bc:	f1bb 0f00 	cmp.w	fp, #0
 80037c0:	d10c      	bne.n	80037dc <aiPbCmdNNRun+0x3e0>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 80037c2:	2300      	movs	r3, #0
 80037c4:	9a07      	ldr	r2, [sp, #28]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	4631      	mov	r1, r6
 80037ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80037cc:	4628      	mov	r0, r5
 80037ce:	f7fe fe0d 	bl	80023ec <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 80037d2:	f109 091c 	add.w	r9, r9, #28
 80037d6:	f7fe fe13 	bl	8002400 <aiPbMgrWaitAck>
    if (res != true)
 80037da:	e690      	b.n	80034fe <aiPbCmdNNRun+0x102>
  if ((simple_value) && (!direct_write))/* broadcast the value */
 80037dc:	f1ba 0f00 	cmp.w	sl, #0
 80037e0:	d1ef      	bne.n	80037c2 <aiPbCmdNNRun+0x3c6>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 80037e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80037e6:	9306      	str	r3, [sp, #24]
      uintptr_t w_ptr = r_ptr + el_s;
 80037e8:	eb03 0a02 	add.w	sl, r3, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 80037ec:	f04f 0b01 	mov.w	fp, #1
 80037f0:	4648      	mov	r0, r9
 80037f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80037f4:	f7ff fbc2 	bl	8002f7c <_get_buffer_size>
 80037f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037fa:	fbb0 f0f2 	udiv	r0, r0, r2
 80037fe:	4583      	cmp	fp, r0
 8003800:	d2df      	bcs.n	80037c2 <aiPbCmdNNRun+0x3c6>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8003802:	4650      	mov	r0, sl
 8003804:	9906      	ldr	r1, [sp, #24]
 8003806:	9209      	str	r2, [sp, #36]	@ 0x24
 8003808:	f005 fc79 	bl	80090fe <memcpy>
        w_ptr += el_s;
 800380c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 800380e:	f10b 0b01 	add.w	fp, fp, #1
        w_ptr += el_s;
 8003812:	4492      	add	sl, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003814:	e7ec      	b.n	80037f0 <aiPbCmdNNRun+0x3f4>
  MON_STACK_MARK();
 8003816:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800381a:	3303      	adds	r3, #3
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f04f 31de 	mov.w	r1, #3739147998	@ 0xdededede
 8003824:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8003828:	4293      	cmp	r3, r2
 800382a:	f4bf aeb5 	bcs.w	8003598 <aiPbCmdNNRun+0x19c>
 800382e:	f843 1b04 	str.w	r1, [r3], #4
 8003832:	e7f7      	b.n	8003824 <aiPbCmdNNRun+0x428>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	f000 fa08 	bl	8003c4a <ai_mnetwork_get_error>
 800383a:	4919      	ldr	r1, [pc, #100]	@ (80038a0 <aiPbCmdNNRun+0x4a4>)
 800383c:	f7fe febe 	bl	80025bc <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003840:	230a      	movs	r3, #10
 8003842:	e5f3      	b.n	800342c <aiPbCmdNNRun+0x30>
  MON_STACK_EVALUATE();
 8003844:	3004      	adds	r0, #4
 8003846:	3304      	adds	r3, #4
 8003848:	f8c8 0008 	str.w	r0, [r8, #8]
 800384c:	e6e1      	b.n	8003612 <aiPbCmdNNRun+0x216>
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	4814      	ldr	r0, [pc, #80]	@ (80038a4 <aiPbCmdNNRun+0x4a8>)
 8003854:	f8c8 3008 	str.w	r3, [r8, #8]
 8003858:	f7ff f8da 	bl	8002a10 <lc_print>
 800385c:	4812      	ldr	r0, [pc, #72]	@ (80038a8 <aiPbCmdNNRun+0x4ac>)
 800385e:	f7ff f8d7 	bl	8002a10 <lc_print>
 8003862:	e6e2      	b.n	800362a <aiPbCmdNNRun+0x22e>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8003864:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8003866:	f108 0801 	add.w	r8, r8, #1
    uint32_t flags =  EnumTensorFlag_TENSOR_FLAG_OUTPUT;
 800386a:	f013 0f08 	tst.w	r3, #8
 800386e:	bf14      	ite	ne
 8003870:	4653      	movne	r3, sl
 8003872:	2302      	moveq	r3, #2
    if ((i + 1) == ctx->report.n_outputs) {
 8003874:	4590      	cmp	r8, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003876:	bf08      	it	eq
 8003878:	f443 7380 	orreq.w	r3, r3, #256	@ 0x100
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	e9cd 3100 	strd	r3, r1, [sp]
      state = EnumState_S_DONE;
 8003884:	bf08      	it	eq
 8003886:	2203      	moveq	r2, #3
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003888:	464b      	mov	r3, r9
    EnumState state = EnumState_S_PROCESSING;
 800388a:	bf18      	it	ne
 800388c:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800388e:	eeb0 0a48 	vmov.f32	s0, s16
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	f7ff fb7f 	bl	8002f98 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800389a:	f109 091c 	add.w	r9, r9, #28
 800389e:	e714      	b.n	80036ca <aiPbCmdNNRun+0x2ce>
 80038a0:	0800b570 	.word	0x0800b570
 80038a4:	0800b580 	.word	0x0800b580
 80038a8:	0800b5a4 	.word	0x0800b5a4

080038ac <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 80038ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 80038ae:	4c1f      	ldr	r4, [pc, #124]	@ (800392c <aiValidationInit+0x80>)
  port_dwt_reset();
 80038b0:	4e1f      	ldr	r6, [pc, #124]	@ (8003930 <aiValidationInit+0x84>)
 80038b2:	f204 2016 	addw	r0, r4, #534	@ 0x216
 80038b6:	f7ff f8ab 	bl	8002a10 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80038ba:	2301      	movs	r3, #1
 80038bc:	f504 7107 	add.w	r1, r4, #540	@ 0x21c
 80038c0:	2207      	movs	r2, #7
 80038c2:	f204 202a 	addw	r0, r4, #554	@ 0x22a
 80038c6:	f7ff f8a3 	bl	8002a10 <lc_print>
 80038ca:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 80038cc:	f204 2037 	addw	r0, r4, #567	@ 0x237
 80038d0:	f7ff f89e 	bl	8002a10 <lc_print>

  systemSettingLog();
 80038d4:	f7ff f9ca 	bl	8002c6c <systemSettingLog>
  port_dwt_init();
 80038d8:	f000 f920 	bl	8003b1c <port_dwt_init_imp>
  port_dwt_reset();
 80038dc:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 80038de:	2064      	movs	r0, #100	@ 0x64
 80038e0:	f7fd fe12 	bl	8001508 <HAL_Delay>
  st = port_dwt_get_cycles();
 80038e4:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 80038e6:	466a      	mov	r2, sp
 80038e8:	2664      	movs	r6, #100	@ 0x64
 80038ea:	4629      	mov	r1, r5
 80038ec:	fbb0 f0f6 	udiv	r0, r0, r6
 80038f0:	f7ff f92e 	bl	8002b50 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 80038f4:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80038f8:	9a03      	ldr	r2, [sp, #12]
 80038fa:	fb06 3101 	mla	r1, r6, r1, r3
 80038fe:	f204 203b 	addw	r0, r4, #571	@ 0x23b
 8003902:	f7ff f885 	bl	8002a10 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8003906:	466a      	mov	r2, sp
 8003908:	2100      	movs	r1, #0
 800390a:	f04f 30ff 	mov.w	r0, #4294967295
 800390e:	f7ff f91f 	bl	8002b50 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003912:	9a01      	ldr	r2, [sp, #4]
 8003914:	9b02      	ldr	r3, [sp, #8]
 8003916:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800391a:	fb01 3302 	mla	r3, r1, r2, r3
 800391e:	4a05      	ldr	r2, [pc, #20]	@ (8003934 <aiValidationInit+0x88>)
 8003920:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8003922:	f000 f8fb 	bl	8003b1c <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 8003926:	4628      	mov	r0, r5
 8003928:	b004      	add	sp, #16
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	0800b44a 	.word	0x0800b44a
 8003930:	e0001000 	.word	0xe0001000
 8003934:	20000e58 	.word	0x20000e58

08003938 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8003938:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800393c:	4c65      	ldr	r4, [pc, #404]	@ (8003ad4 <aiValidationProcess+0x19c>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800393e:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 8003b14 <aiValidationProcess+0x1dc>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003942:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8003b18 <aiValidationProcess+0x1e0>
  aiPlatformVersion();
 8003946:	f7fe fe23 	bl	8002590 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800394a:	2500      	movs	r5, #0
  LC_PRINT("Discovering the network(s)...\r\n");
 800394c:	4862      	ldr	r0, [pc, #392]	@ (8003ad8 <aiValidationProcess+0x1a0>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800394e:	f844 5b08 	str.w	r5, [r4], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8003952:	f7ff f85d 	bl	8002a10 <lc_print>
  idx = 0;
 8003956:	46a8      	mov	r8, r5
  int res = -1;
 8003958:	f04f 36ff 	mov.w	r6, #4294967295
    nn_name = ai_mnetwork_find(NULL, idx);
 800395c:	4641      	mov	r1, r8
 800395e:	2000      	movs	r0, #0
 8003960:	f000 f91c 	bl	8003b9c <ai_mnetwork_find>
    if (nn_name) {
 8003964:	4605      	mov	r5, r0
 8003966:	b1b0      	cbz	r0, 8003996 <aiValidationProcess+0x5e>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003968:	4601      	mov	r1, r0
 800396a:	4648      	mov	r0, r9
 800396c:	f7ff f850 	bl	8002a10 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8003970:	485a      	ldr	r0, [pc, #360]	@ (8003adc <aiValidationProcess+0x1a4>)
 8003972:	4629      	mov	r1, r5
 8003974:	f7ff f84c 	bl	8002a10 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003978:	2200      	movs	r2, #0
 800397a:	f1a4 0108 	sub.w	r1, r4, #8
 800397e:	4628      	mov	r0, r5
 8003980:	f000 f91a 	bl	8003bb8 <ai_mnetwork_create>
  if (err.type) {
 8003984:	f010 06ff 	ands.w	r6, r0, #255	@ 0xff
 8003988:	d017      	beq.n	80039ba <aiValidationProcess+0x82>
    aiLogErr(err, "ai_mnetwork_create");
 800398a:	4955      	ldr	r1, [pc, #340]	@ (8003ae0 <aiValidationProcess+0x1a8>)
 800398c:	f7fe fe16 	bl	80025bc <aiLogErr>
        nn_name = NULL;
 8003990:	2500      	movs	r5, #0
    return -1;
 8003992:	f04f 36ff 	mov.w	r6, #4294967295
    idx++;
 8003996:	f108 0801 	add.w	r8, r8, #1
  } while (nn_name);
 800399a:	34a0      	adds	r4, #160	@ 0xa0
 800399c:	2d00      	cmp	r5, #0
 800399e:	d1dd      	bne.n	800395c <aiValidationProcess+0x24>
  int r;

  r = aiInit();
  if (r) {
 80039a0:	2e00      	cmp	r6, #0
 80039a2:	d073      	beq.n	8003a8c <aiValidationProcess+0x154>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 80039a4:	484f      	ldr	r0, [pc, #316]	@ (8003ae4 <aiValidationProcess+0x1ac>)
 80039a6:	4631      	mov	r1, r6
 80039a8:	f7ff f832 	bl	8002a10 <lc_print>
    port_hal_delay(2000);
 80039ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039b0:	f7fd fdaa 	bl	8001508 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 80039b4:	4630      	mov	r0, r6
 80039b6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 80039ba:	484b      	ldr	r0, [pc, #300]	@ (8003ae8 <aiValidationProcess+0x1b0>)
 80039bc:	f7ff f828 	bl	8002a10 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80039c0:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80039c4:	4621      	mov	r1, r4
 80039c6:	f000 f935 	bl	8003c34 <ai_mnetwork_get_report>
 80039ca:	b980      	cbnz	r0, 80039ee <aiValidationProcess+0xb6>
    err = ai_mnetwork_get_error(ctx->handle);
 80039cc:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80039d0:	f000 f93b 	bl	8003c4a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 80039d4:	4945      	ldr	r1, [pc, #276]	@ (8003aec <aiValidationProcess+0x1b4>)
 80039d6:	f7fe fdf1 	bl	80025bc <aiLogErr>
    ctx->handle = AI_HANDLE_NULL;
 80039da:	2500      	movs	r5, #0
    ai_mnetwork_destroy(ctx->handle);
 80039dc:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80039e0:	f000 f910 	bl	8003c04 <ai_mnetwork_destroy>
    return -2;
 80039e4:	f06f 0601 	mvn.w	r6, #1
    ctx->handle = AI_HANDLE_NULL;
 80039e8:	f844 5c08 	str.w	r5, [r4, #-8]
 80039ec:	e7d3      	b.n	8003996 <aiValidationProcess+0x5e>
  if (!ai_mnetwork_init(ctx->handle)) {
 80039ee:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80039f2:	f000 f937 	bl	8003c64 <ai_mnetwork_init>
 80039f6:	4683      	mov	fp, r0
 80039f8:	b980      	cbnz	r0, 8003a1c <aiValidationProcess+0xe4>
    err = ai_mnetwork_get_error(ctx->handle);
 80039fa:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80039fe:	f000 f924 	bl	8003c4a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003a02:	493b      	ldr	r1, [pc, #236]	@ (8003af0 <aiValidationProcess+0x1b8>)
 8003a04:	f7fe fdda 	bl	80025bc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003a08:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003a0c:	f000 f8fa 	bl	8003c04 <ai_mnetwork_destroy>
        nn_name = NULL;
 8003a10:	465d      	mov	r5, fp
    ctx->handle = AI_HANDLE_NULL;
 8003a12:	f844 bc08 	str.w	fp, [r4, #-8]
    return -4;
 8003a16:	f06f 0603 	mvn.w	r6, #3
 8003a1a:	e7bc      	b.n	8003996 <aiValidationProcess+0x5e>
  if (ai_mnetwork_get_report(ctx->handle,
 8003a1c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003a20:	4621      	mov	r1, r4
 8003a22:	f000 f907 	bl	8003c34 <ai_mnetwork_get_report>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0d0      	beq.n	80039cc <aiValidationProcess+0x94>
    aiPrintNetworkInfo(&ctx->report);
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7fe fece 	bl	80027cc <aiPrintNetworkInfo>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003a30:	4930      	ldr	r1, [pc, #192]	@ (8003af4 <aiValidationProcess+0x1bc>)
  ctx->inputs_in_activations = false;
 8003a32:	f884 6088 	strb.w	r6, [r4, #136]	@ 0x88
  ctx->outputs_in_activations = false;
 8003a36:	f884 6089 	strb.w	r6, [r4, #137]	@ 0x89
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003a3a:	4630      	mov	r0, r6
    if (!ctx->report.inputs[i].data)
 8003a3c:	f04f 0c1c 	mov.w	ip, #28
      ctx->inputs_in_activations = true;
 8003a40:	2601      	movs	r6, #1
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003a42:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003a44:	4298      	cmp	r0, r3
 8003a46:	db07      	blt.n	8003a58 <aiValidationProcess+0x120>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003a48:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8003a4a:	211c      	movs	r1, #28
      ctx->outputs_in_activations = true;
 8003a4c:	2601      	movs	r6, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003a4e:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8003a50:	4293      	cmp	r3, r2
 8003a52:	db0e      	blt.n	8003a72 <aiValidationProcess+0x13a>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8003a54:	2600      	movs	r6, #0
 8003a56:	e79e      	b.n	8003996 <aiValidationProcess+0x5e>
    if (!ctx->report.inputs[i].data)
 8003a58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a5a:	fb0c 3300 	mla	r3, ip, r0, r3
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	b922      	cbnz	r2, 8003a6c <aiValidationProcess+0x134>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003a62:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8003a66:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003a68:	3001      	adds	r0, #1
 8003a6a:	e7ea      	b.n	8003a42 <aiValidationProcess+0x10a>
      ctx->inputs_in_activations = true;
 8003a6c:	f884 6088 	strb.w	r6, [r4, #136]	@ 0x88
 8003a70:	e7fa      	b.n	8003a68 <aiValidationProcess+0x130>
    if (!ctx->report.outputs[i].data)
 8003a72:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a74:	fb01 2203 	mla	r2, r1, r3, r2
 8003a78:	6850      	ldr	r0, [r2, #4]
 8003a7a:	b920      	cbnz	r0, 8003a86 <aiValidationProcess+0x14e>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003a7c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8003a80:	6050      	str	r0, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003a82:	3301      	adds	r3, #1
 8003a84:	e7e3      	b.n	8003a4e <aiValidationProcess+0x116>
      ctx->outputs_in_activations = true;
 8003a86:	f884 6089 	strb.w	r6, [r4, #137]	@ 0x89
 8003a8a:	e7fa      	b.n	8003a82 <aiValidationProcess+0x14a>
    LC_PRINT("\r\n");
 8003a8c:	481a      	ldr	r0, [pc, #104]	@ (8003af8 <aiValidationProcess+0x1c0>)
 8003a8e:	f7fe ffbf 	bl	8002a10 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003a92:	481a      	ldr	r0, [pc, #104]	@ (8003afc <aiValidationProcess+0x1c4>)
 8003a94:	f7fe ffbc 	bl	8002a10 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8003a98:	4819      	ldr	r0, [pc, #100]	@ (8003b00 <aiValidationProcess+0x1c8>)
 8003a9a:	f7fe ffb9 	bl	8002a10 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003a9e:	4817      	ldr	r0, [pc, #92]	@ (8003afc <aiValidationProcess+0x1c4>)
 8003aa0:	f7fe ffb6 	bl	8002a10 <lc_print>
    LC_PRINT("\r\n");
 8003aa4:	4814      	ldr	r0, [pc, #80]	@ (8003af8 <aiValidationProcess+0x1c0>)
 8003aa6:	f7fe ffb3 	bl	8002a10 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8003aaa:	4816      	ldr	r0, [pc, #88]	@ (8003b04 <aiValidationProcess+0x1cc>)
 8003aac:	f7fe ffb0 	bl	8002a10 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 8003ab0:	4815      	ldr	r0, [pc, #84]	@ (8003b08 <aiValidationProcess+0x1d0>)
 8003ab2:	f7fe ffad 	bl	8002a10 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 8003ab6:	4815      	ldr	r0, [pc, #84]	@ (8003b0c <aiValidationProcess+0x1d4>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2103      	movs	r1, #3
 8003abc:	f7fe ffa8 	bl	8002a10 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8003ac0:	4813      	ldr	r0, [pc, #76]	@ (8003b10 <aiValidationProcess+0x1d8>)
 8003ac2:	f7fe fbab 	bl	800221c <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8003ac6:	f7fe fc4f 	bl	8002368 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8003aca:	4606      	mov	r6, r0
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d0fa      	beq.n	8003ac6 <aiValidationProcess+0x18e>
 8003ad0:	e770      	b.n	80039b4 <aiValidationProcess+0x7c>
 8003ad2:	bf00      	nop
 8003ad4:	20000eb8 	.word	0x20000eb8
 8003ad8:	0800b6bb 	.word	0x0800b6bb
 8003adc:	0800b6f2 	.word	0x0800b6f2
 8003ae0:	0800b710 	.word	0x0800b710
 8003ae4:	0800b764 	.word	0x0800b764
 8003ae8:	0800b723 	.word	0x0800b723
 8003aec:	0800b73e 	.word	0x0800b73e
 8003af0:	0800b753 	.word	0x0800b753
 8003af4:	20000054 	.word	0x20000054
 8003af8:	0800b77a 	.word	0x0800b77a
 8003afc:	0800b77d 	.word	0x0800b77d
 8003b00:	0800b7ab 	.word	0x0800b7ab
 8003b04:	0800b7d9 	.word	0x0800b7d9
 8003b08:	0800b81f 	.word	0x0800b81f
 8003b0c:	0800b84d 	.word	0x0800b84d
 8003b10:	20000010 	.word	0x20000010
 8003b14:	0800b6db 	.word	0x0800b6db
 8003b18:	20000050 	.word	0x20000050

08003b1c <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003b1c:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <port_dwt_init_imp+0x20>)
 8003b1e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 8003b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003b2a:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <port_dwt_init_imp+0x24>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00
 8003b40:	e0001000 	.word	0xe0001000

08003b44 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <ai_mnetwork_handle+0x18>)
 8003b46:	b120      	cbz	r0, 8003b52 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003b48:	4298      	cmp	r0, r3
 8003b4a:	bf0c      	ite	eq
 8003b4c:	4618      	moveq	r0, r3
 8003b4e:	2000      	movne	r0, #0
 8003b50:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003b52:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003b54:	2a00      	cmp	r2, #0
 8003b56:	bf08      	it	eq
 8003b58:	4618      	moveq	r0, r3
}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000fe8 	.word	0x20000fe8

08003b60 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003b60:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003b62:	4604      	mov	r4, r0
 8003b64:	b160      	cbz	r0, 8003b80 <ai_mnetwork_is_valid.constprop.0+0x20>
 8003b66:	f7fc fb8b 	bl	8000280 <strlen>
 8003b6a:	2809      	cmp	r0, #9
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	d107      	bne.n	8003b80 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003b70:	4804      	ldr	r0, [pc, #16]	@ (8003b84 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003b72:	4621      	mov	r1, r4
 8003b74:	f005 fa29 	bl	8008fca <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003b78:	fab0 f080 	clz	r0, r0
 8003b7c:	0940      	lsrs	r0, r0, #5
}
 8003b7e:	bd10      	pop	{r4, pc}
    return false;
 8003b80:	2000      	movs	r0, #0
 8003b82:	e7fc      	b.n	8003b7e <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003b84:	0800ba54 	.word	0x0800ba54

08003b88 <MX_X_CUBE_AI_Init>:
{
 8003b88:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003b8a:	f7fd fb8b 	bl	80012a4 <MX_USART2_UART_Init>
}
 8003b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8003b92:	f7ff be8b 	b.w	80038ac <aiValidationInit>

08003b96 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8003b96:	f7ff becf 	b.w	8003938 <aiValidationProcess>
	...

08003b9c <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003ba0:	f7ff ffde 	bl	8003b60 <ai_mnetwork_is_valid.constprop.0>
 8003ba4:	b920      	cbnz	r0, 8003bb0 <ai_mnetwork_find+0x14>
            return entry->name;
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	4802      	ldr	r0, [pc, #8]	@ (8003bb4 <ai_mnetwork_find+0x18>)
 8003baa:	bf18      	it	ne
 8003bac:	2000      	movne	r0, #0
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
}
 8003bae:	bd10      	pop	{r4, pc}
            return entry->name;
 8003bb0:	4800      	ldr	r0, [pc, #0]	@ (8003bb4 <ai_mnetwork_find+0x18>)
 8003bb2:	e7fc      	b.n	8003bae <ai_mnetwork_find+0x12>
 8003bb4:	0800ba54 	.word	0x0800ba54

08003bb8 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003bbc:	2000      	movs	r0, #0
{
 8003bbe:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003bc0:	f7ff ffc0 	bl	8003b44 <ai_mnetwork_handle>
{
 8003bc4:	460c      	mov	r4, r1

    if (!inst) {
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	b1a8      	cbz	r0, 8003bf6 <ai_mnetwork_create+0x3e>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f7ff ffc8 	bl	8003b60 <ai_mnetwork_is_valid.constprop.0>
 8003bd0:	b1a0      	cbz	r0, 8003bfc <ai_mnetwork_create+0x44>
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4620      	mov	r0, r4
    else
        err = found->ai_create(network, network_config);
 8003bd6:	f000 f8e1 	bl	8003d9c <ai_har_model_create>
 8003bda:	b2c2      	uxtb	r2, r0
 8003bdc:	f3c0 2017 	ubfx	r0, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003be0:	ea52 2100 	orrs.w	r1, r2, r0, lsl #8
 8003be4:	d104      	bne.n	8003bf0 <ai_mnetwork_create+0x38>
        inst->entry = found;
 8003be6:	4906      	ldr	r1, [pc, #24]	@ (8003c00 <ai_mnetwork_create+0x48>)
 8003be8:	6029      	str	r1, [r5, #0]
        inst->handle = *network;
 8003bea:	6821      	ldr	r1, [r4, #0]
 8003bec:	6069      	str	r1, [r5, #4]
        *network = (ai_handle*)inst;
 8003bee:	6025      	str	r5, [r4, #0]
    }

    return err;
}
 8003bf0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8003bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf6:	2231      	movs	r2, #49	@ 0x31
        if (ai_mnetwork_is_valid(name, entry)) {
 8003bf8:	2010      	movs	r0, #16
 8003bfa:	e7f9      	b.n	8003bf0 <ai_mnetwork_create+0x38>
 8003bfc:	2214      	movs	r2, #20
 8003bfe:	e7fb      	b.n	8003bf8 <ai_mnetwork_create+0x40>
 8003c00:	0800ba60 	.word	0x0800ba60

08003c04 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4605      	mov	r5, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c08:	f7ff ff9c 	bl	8003b44 <ai_mnetwork_handle>
    if (inn) {
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	b160      	cbz	r0, 8003c2a <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003c10:	6803      	ldr	r3, [r0, #0]
 8003c12:	6840      	ldr	r0, [r0, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003c18:	6863      	ldr	r3, [r4, #4]
 8003c1a:	4283      	cmp	r3, r0
 8003c1c:	d005      	beq.n	8003c2a <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003c1e:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <ai_mnetwork_destroy+0x2c>)
 8003c20:	429c      	cmp	r4, r3
 8003c22:	d101      	bne.n	8003c28 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	6023      	str	r3, [r4, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
 8003c28:	2500      	movs	r5, #0
        }
    }
    return network;
}
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	bd38      	pop	{r3, r4, r5, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000fe8 	.word	0x20000fe8

08003c34 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003c34:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c36:	f7ff ff85 	bl	8003b44 <ai_mnetwork_handle>
    if (inn)
 8003c3a:	b128      	cbz	r0, 8003c48 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003c3c:	6802      	ldr	r2, [r0, #0]
 8003c3e:	6840      	ldr	r0, [r0, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003c46:	4710      	bx	r2
}
 8003c48:	bd10      	pop	{r4, pc}

08003c4a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003c4a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c4c:	f7ff ff7a 	bl	8003b44 <ai_mnetwork_handle>
    if (inn)
 8003c50:	b128      	cbz	r0, 8003c5e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003c52:	6803      	ldr	r3, [r0, #0]
 8003c54:	6840      	ldr	r0, [r0, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003c5c:	4718      	bx	r3
}
 8003c5e:	f241 0014 	movw	r0, #4116	@ 0x1014
 8003c62:	bd10      	pop	{r4, pc}

08003c64 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003c64:	b530      	push	{r4, r5, lr}
 8003c66:	b08f      	sub	sp, #60	@ 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c68:	f7ff ff6c 	bl	8003b44 <ai_mnetwork_handle>
    if (inn) {
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	b168      	cbz	r0, 8003c8c <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003c70:	6803      	ldr	r3, [r0, #0]
 8003c72:	4668      	mov	r0, sp
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003c78:	2500      	movs	r5, #0
 8003c7a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003c7e:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003c80:	42aa      	cmp	r2, r5
 8003c82:	dc05      	bgt.n	8003c90 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	6860      	ldr	r0, [r4, #4]
 8003c88:	4669      	mov	r1, sp
 8003c8a:	4798      	blx	r3
    }
    else
        return false;
}
 8003c8c:	b00f      	add	sp, #60	@ 0x3c
 8003c8e:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	4629      	mov	r1, r5
 8003c94:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8003c98:	a803      	add	r0, sp, #12
 8003c9a:	f001 fcb9 	bl	8005610 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	e7eb      	b.n	8003c7a <ai_mnetwork_init+0x16>

08003ca2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8003ca2:	b570      	push	{r4, r5, r6, lr}
 8003ca4:	4614      	mov	r4, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003ca6:	f7ff ff4d 	bl	8003b44 <ai_mnetwork_handle>
    if (inn)
 8003caa:	b138      	cbz	r0, 8003cbc <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 8003cac:	6802      	ldr	r2, [r0, #0]
 8003cae:	6840      	ldr	r0, [r0, #4]
 8003cb0:	6a15      	ldr	r5, [r2, #32]
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
    else
        return 0;
}
 8003cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8003cba:	4718      	bx	r3
}
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}

08003cbe <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003cbe:	b538      	push	{r3, r4, r5, lr}
 8003cc0:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003cc2:	f7ff ff3f 	bl	8003b44 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003cc6:	b188      	cbz	r0, 8003cec <ai_mnetwork_get_private_handle+0x2e>
 8003cc8:	b181      	cbz	r1, 8003cec <ai_mnetwork_get_private_handle+0x2e>
 8003cca:	b17d      	cbz	r5, 8003cec <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003ccc:	6843      	ldr	r3, [r0, #4]
 8003cce:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003cd0:	f100 0408 	add.w	r4, r0, #8
 8003cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce4:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8003ce8:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	e7fb      	b.n	8003cea <ai_mnetwork_get_private_handle+0x2c>
	...

08003cf4 <ai_har_model_get_report>:


AI_API_ENTRY
ai_bool ai_har_model_get_report(
  ai_handle network, ai_network_report* report)
{
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	b0a2      	sub	sp, #136	@ 0x88
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8003cfc:	f001 fe16 	bl	800592c <ai_platform_context_acquire>
 8003d00:	4604      	mov	r4, r0

  if (report && net_ctx)
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	d035      	beq.n	8003d72 <ai_har_model_get_report+0x7e>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d030      	beq.n	8003d6c <ai_har_model_get_report+0x78>
  {
    ai_network_report r = {
 8003d0a:	2278      	movs	r2, #120	@ 0x78
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	a804      	add	r0, sp, #16
 8003d10:	f005 f953 	bl	8008fba <memset>
 8003d14:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <ai_har_model_get_report+0x84>)
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <ai_har_model_get_report+0x88>)
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	4b18      	ldr	r3, [pc, #96]	@ (8003d80 <ai_har_model_get_report+0x8c>)
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	4b18      	ldr	r3, [pc, #96]	@ (8003d84 <ai_har_model_get_report+0x90>)
 8003d22:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_HAR_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8003d24:	f001 fdbc 	bl	80058a0 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8003d28:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003d2a:	f001 fdbd 	bl	80058a8 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8003d2e:	4b16      	ldr	r3, [pc, #88]	@ (8003d88 <ai_har_model_get_report+0x94>)
 8003d30:	9306      	str	r3, [sp, #24]
 8003d32:	2301      	movs	r3, #1
 8003d34:	f88d 301c 	strb.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003d38:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8003d3a:	f001 fdcb 	bl	80058d4 <ai_platform_api_get_version>
 8003d3e:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003d40:	f001 fdde 	bl	8005900 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8003d44:	4a11      	ldr	r2, [pc, #68]	@ (8003d8c <ai_har_model_get_report+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003d46:	900a      	str	r0, [sp, #40]	@ 0x28
    ai_network_report r = {
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <ai_har_model_get_report+0x9c>)
 8003d50:	9311      	str	r3, [sp, #68]	@ 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xc58b2752,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003d52:	4669      	mov	r1, sp
    ai_network_report r = {
 8003d54:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <ai_har_model_get_report+0xa0>)
 8003d56:	9320      	str	r3, [sp, #128]	@ 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f001 fe01 	bl	8005960 <ai_platform_api_get_network_report>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	b120      	cbz	r0, 8003d6c <ai_har_model_get_report+0x78>

    *report = r;
 8003d62:	2288      	movs	r2, #136	@ 0x88
 8003d64:	4669      	mov	r1, sp
 8003d66:	4628      	mov	r0, r5
 8003d68:	f005 f9c9 	bl	80090fe <memcpy>
    return true;
  }
  return false;
}
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	b022      	add	sp, #136	@ 0x88
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8003d72:	462c      	mov	r4, r5
 8003d74:	e7fa      	b.n	8003d6c <ai_har_model_get_report+0x78>
 8003d76:	bf00      	nop
 8003d78:	0800ba54 	.word	0x0800ba54
 8003d7c:	0800ba8c 	.word	0x0800ba8c
 8003d80:	0800baaf 	.word	0x0800baaf
 8003d84:	0800bac8 	.word	0x0800bac8
 8003d88:	08067da5 	.word	0x08067da5
 8003d8c:	000d5ae0 	.word	0x000d5ae0
 8003d90:	a1facade 	.word	0xa1facade
 8003d94:	c58b2752 	.word	0xc58b2752

08003d98 <ai_har_model_get_error>:


AI_API_ENTRY
ai_error ai_har_model_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003d98:	f001 bdd0 	b.w	800593c <ai_platform_network_get_error>

08003d9c <ai_har_model_create>:


AI_API_ENTRY
ai_error ai_har_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003d9c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003d9e:	2305      	movs	r3, #5
 8003da0:	2200      	movs	r2, #0
 8003da2:	e9cd 3200 	strd	r3, r2, [sp]
 8003da6:	4a03      	ldr	r2, [pc, #12]	@ (8003db4 <ai_har_model_create+0x18>)
 8003da8:	2301      	movs	r3, #1
 8003daa:	f001 ff89 	bl	8005cc0 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003dae:	b003      	add	sp, #12
 8003db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003db4:	20000058 	.word	0x20000058

08003db8 <ai_har_model_destroy>:


AI_API_ENTRY
ai_handle ai_har_model_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8003db8:	f001 bfc4 	b.w	8005d44 <ai_platform_network_destroy>

08003dbc <ai_har_model_init>:


AI_API_ENTRY
ai_bool ai_har_model_init(
  ai_handle network, const ai_network_params* params)
{
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	4688      	mov	r8, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8003dc4:	f001 ffd0 	bl	8005d68 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8003dc8:	4604      	mov	r4, r0
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	f000 8096 	beq.w	8003efc <ai_har_model_init+0x140>
  if (ai_platform_get_weights_map(g_har_model_weights_map, 1, params)) {
 8003dd0:	4e51      	ldr	r6, [pc, #324]	@ (8003f18 <ai_har_model_init+0x15c>)
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f001 fc98 	bl	800570c <ai_platform_get_weights_map>
 8003ddc:	4605      	mov	r5, r0
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f000 808e 	beq.w	8003f00 <ai_har_model_init+0x144>
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8003de4:	4a4d      	ldr	r2, [pc, #308]	@ (8003f1c <ai_har_model_init+0x160>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dec:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_har_model_weights_map[0] + 0);
 8003dee:	6833      	ldr	r3, [r6, #0]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_har_model_weights_map[0] + 0);
 8003df0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8003df4:	4a4a      	ldr	r2, [pc, #296]	@ (8003f20 <ai_har_model_init+0x164>)
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003dfc:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_har_model_weights_map[0] + 2048);
 8003dfe:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_har_model_weights_map[0] + 2048);
 8003e02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e06:	4a47      	ldr	r2, [pc, #284]	@ (8003f24 <ai_har_model_init+0x168>)
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e0e:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_har_model_weights_map[0] + 2624);
 8003e10:	f503 6124 	add.w	r1, r3, #2624	@ 0xa40
 8003e14:	6091      	str	r1, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_har_model_weights_map[0] + 2560);
 8003e16:	f503 6120 	add.w	r1, r3, #2560	@ 0xa00
 8003e1a:	60d1      	str	r1, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e1c:	4942      	ldr	r1, [pc, #264]	@ (8003f28 <ai_har_model_init+0x16c>)
 8003e1e:	680a      	ldr	r2, [r1, #0]
 8003e20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e24:	600a      	str	r2, [r1, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_har_model_weights_map[0] + 363072);
 8003e26:	f503 22b1 	add.w	r2, r3, #362496	@ 0x58800
 8003e2a:	f502 7010 	add.w	r0, r2, #576	@ 0x240
    dense_1_dense_bias_array.data_start = AI_PTR(g_har_model_weights_map[0] + 363072);
 8003e2e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e32:	493e      	ldr	r1, [pc, #248]	@ (8003f2c <ai_har_model_init+0x170>)
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8003e3a:	6008      	str	r0, [r1, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_har_model_weights_map[0] + 363648);
 8003e3c:	f502 6090 	add.w	r0, r2, #1152	@ 0x480
    dense_2_dense_weights_array.data_start = AI_PTR(g_har_model_weights_map[0] + 363584);
 8003e40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8003e44:	60ca      	str	r2, [r1, #12]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e46:	4a3a      	ldr	r2, [pc, #232]	@ (8003f30 <ai_har_model_init+0x174>)
    dense_2_dense_weights_array.data = AI_PTR(g_har_model_weights_map[0] + 363648);
 8003e48:	6088      	str	r0, [r1, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e4a:	6811      	ldr	r1, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_har_model_weights_map[0] + 371840);
 8003e4c:	f503 26b5 	add.w	r6, r3, #370688	@ 0x5a800
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e50:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e54:	6011      	str	r1, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_har_model_weights_map[0] + 371840);
 8003e56:	f506 6190 	add.w	r1, r6, #1152	@ 0x480
    dense_2_dense_bias_array.data_start = AI_PTR(g_har_model_weights_map[0] + 371840);
 8003e5a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e5e:	4a35      	ldr	r2, [pc, #212]	@ (8003f34 <ai_har_model_init+0x178>)
 8003e60:	6811      	ldr	r1, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(g_har_model_weights_map[0] + 372352);
 8003e62:	f506 66d0 	add.w	r6, r6, #1664	@ 0x680
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003e66:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003e6a:	6011      	str	r1, [r2, #0]
    dense_3_dense_weights_array.data_start = AI_PTR(g_har_model_weights_map[0] + 372352);
 8003e6c:	e9c2 6602 	strd	r6, r6, [r2, #8]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e70:	4a31      	ldr	r2, [pc, #196]	@ (8003f38 <ai_har_model_init+0x17c>)
 8003e72:	6811      	ldr	r1, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(g_har_model_weights_map[0] + 375424);
 8003e74:	f503 23b7 	add.w	r3, r3, #374784	@ 0x5b800
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e78:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
    dense_3_dense_bias_array.data = AI_PTR(g_har_model_weights_map[0] + 375424);
 8003e7c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003e80:	6011      	str	r1, [r2, #0]
    dense_3_dense_bias_array.data_start = AI_PTR(g_har_model_weights_map[0] + 375424);
 8003e82:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_har_model_activations_map, 1, params)) {
 8003e86:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8003f64 <ai_har_model_init+0x1a8>
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4648      	mov	r0, r9
 8003e90:	f001 fc90 	bl	80057b4 <ai_platform_get_activations_map>
 8003e94:	4606      	mov	r6, r0
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d038      	beq.n	8003f0c <ai_har_model_init+0x150>
    input_0_output_array.data = AI_PTR(g_har_model_activations_map[0] + 22472);
 8003e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8003e9e:	4927      	ldr	r1, [pc, #156]	@ (8003f3c <ai_har_model_init+0x180>)
 8003ea0:	f503 42af 	add.w	r2, r3, #22400	@ 0x5780
 8003ea4:	3248      	adds	r2, #72	@ 0x48
    input_0_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 22472);
 8003ea6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_har_model_activations_map[0] + 23552);
 8003eaa:	4a25      	ldr	r2, [pc, #148]	@ (8003f40 <ai_har_model_init+0x184>)
 8003eac:	f503 41b8 	add.w	r1, r3, #23552	@ 0x5c00
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_har_model_activations_map[0] + 23552);
 8003eb0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_scratch1_array.data = AI_PTR(g_har_model_activations_map[0] + 23568);
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	4923      	ldr	r1, [pc, #140]	@ (8003f44 <ai_har_model_init+0x188>)
 8003eb8:	3210      	adds	r2, #16
    conv2d_1_conv2d_scratch1_array.data_start = AI_PTR(g_har_model_activations_map[0] + 23568);
 8003eba:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_har_model_activations_map[0] + 0);
 8003ebe:	4a22      	ldr	r2, [pc, #136]	@ (8003f48 <ai_har_model_init+0x18c>)
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 0);
 8003ec0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_har_model_activations_map[0] + 22528);
 8003ec4:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <ai_har_model_init+0x190>)
 8003ec6:	f503 41b0 	add.w	r1, r3, #22528	@ 0x5800
    dense_1_dense_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 22528);
 8003eca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_har_model_activations_map[0] + 0);
 8003ece:	4a20      	ldr	r2, [pc, #128]	@ (8003f50 <ai_har_model_init+0x194>)
    dense_2_dense_output_array.data = AI_PTR(g_har_model_activations_map[0] + 512);
 8003ed0:	4920      	ldr	r1, [pc, #128]	@ (8003f54 <ai_har_model_init+0x198>)
    dense_1_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 0);
 8003ed2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_dense_output_array.data = AI_PTR(g_har_model_activations_map[0] + 512);
 8003ed6:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    dense_2_dense_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 512);
 8003eda:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_har_model_activations_map[0] + 0);
 8003ede:	491e      	ldr	r1, [pc, #120]	@ (8003f58 <ai_har_model_init+0x19c>)
    dense_2_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 0);
 8003ee0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_3_dense_output_array.data = AI_PTR(g_har_model_activations_map[0] + 512);
 8003ee4:	491d      	ldr	r1, [pc, #116]	@ (8003f5c <ai_har_model_init+0x1a0>)
    dense_3_dense_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 512);
 8003ee6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_3_output_array.data = AI_PTR(g_har_model_activations_map[0] + 0);
 8003eea:	4a1d      	ldr	r2, [pc, #116]	@ (8003f60 <ai_har_model_init+0x1a4>)
    dense_3_output_array.data_start = AI_PTR(g_har_model_activations_map[0] + 0);
 8003eec:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= har_model_configure_weights(net_ctx, params);
  ok &= har_model_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	f002 f807 	bl	8005f04 <ai_platform_network_post_init>
 8003ef6:	4030      	ands	r0, r6
 8003ef8:	4005      	ands	r5, r0
 8003efa:	b2e8      	uxtb	r0, r5

  return ok;
}
 8003efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003f00:	2212      	movs	r2, #18
 8003f02:	2130      	movs	r1, #48	@ 0x30
 8003f04:	4620      	mov	r0, r4
 8003f06:	f001 fd25 	bl	8005954 <ai_platform_network_set_error>
  return false;
 8003f0a:	e7bc      	b.n	8003e86 <ai_har_model_init+0xca>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003f0c:	2213      	movs	r2, #19
 8003f0e:	2130      	movs	r1, #48	@ 0x30
 8003f10:	4620      	mov	r0, r4
 8003f12:	f001 fd1f 	bl	8005954 <ai_platform_network_set_error>
  return false;
 8003f16:	e7eb      	b.n	8003ef0 <ai_har_model_init+0x134>
 8003f18:	20007504 	.word	0x20007504
 8003f1c:	20000900 	.word	0x20000900
 8003f20:	200008f0 	.word	0x200008f0
 8003f24:	200008e0 	.word	0x200008e0
 8003f28:	200008d0 	.word	0x200008d0
 8003f2c:	200008c0 	.word	0x200008c0
 8003f30:	200008b0 	.word	0x200008b0
 8003f34:	200008a0 	.word	0x200008a0
 8003f38:	20000890 	.word	0x20000890
 8003f3c:	20000980 	.word	0x20000980
 8003f40:	20000880 	.word	0x20000880
 8003f44:	20000870 	.word	0x20000870
 8003f48:	20000970 	.word	0x20000970
 8003f4c:	20000960 	.word	0x20000960
 8003f50:	20000950 	.word	0x20000950
 8003f54:	20000940 	.word	0x20000940
 8003f58:	20000930 	.word	0x20000930
 8003f5c:	20000920 	.word	0x20000920
 8003f60:	20000910 	.word	0x20000910
 8003f64:	20007508 	.word	0x20007508

08003f68 <ai_har_model_run>:

AI_API_ENTRY
ai_i32 ai_har_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003f68:	f001 bffc 	b.w	8005f64 <ai_platform_network_process>

08003f6c <ai_har_model_forward>:


AI_API_ENTRY
ai_i32 ai_har_model_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f001 bff9 	b.w	8005f64 <ai_platform_network_process>
	...

08003f74 <ai_har_model_data_params_get>:
 * @ingroup har_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_har_model_data_params_get(ai_network_params* params)
{
 8003f74:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8003f76:	4603      	mov	r3, r0
{
 8003f78:	b085      	sub	sp, #20
  if (!params) return false;
 8003f7a:	b170      	cbz	r0, 8003f9a <ai_har_model_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003f7c:	4c08      	ldr	r4, [pc, #32]	@ (8003fa0 <ai_har_model_data_params_get+0x2c>)
 8003f7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f82:	466a      	mov	r2, sp
 8003f84:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_HAR_MODEL_DATA_ACTIVATIONS_COUNT, g_har_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003f88:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003f8c:	ad02      	add	r5, sp, #8
 8003f8e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_HAR_MODEL_DATA_WEIGHTS_COUNT, g_har_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003f92:	4629      	mov	r1, r5
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fc61 	bl	800585c <ai_platform_bind_network_params>
}
 8003f9a:	b005      	add	sp, #20
 8003f9c:	bd30      	pop	{r4, r5, pc}
 8003f9e:	bf00      	nop
 8003fa0:	0800b8cc 	.word	0x0800b8cc

08003fa4 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003fa8:	6896      	ldr	r6, [r2, #8]
{
 8003faa:	b091      	sub	sp, #68	@ 0x44
  buf[idx--] = 0;
 8003fac:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003fae:	f016 0304 	ands.w	r3, r6, #4
{
 8003fb2:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8003fb4:	f88d 503f 	strb.w	r5, [sp, #63]	@ 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003fb8:	d028      	beq.n	800400c <_write_number+0x68>
    if ((int64_t)number < 0) {
 8003fba:	42a9      	cmp	r1, r5
 8003fbc:	da07      	bge.n	8003fce <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8003fbe:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8003fc0:	4240      	negs	r0, r0
      specifier->width -= 1;
 8003fc2:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8003fc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8003fca:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8003fcc:	252d      	movs	r5, #45	@ 0x2d
 8003fce:	f016 0f08 	tst.w	r6, #8
 8003fd2:	bf14      	ite	ne
 8003fd4:	f04f 0841 	movne.w	r8, #65	@ 0x41
 8003fd8:	f04f 0861 	moveq.w	r8, #97	@ 0x61
 8003fdc:	f10d 093f 	add.w	r9, sp, #63	@ 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003fe0:	273e      	movs	r7, #62	@ 0x3e
    if (specifier->flags & FLAG_HEX) {
 8003fe2:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003fe6:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8003fea:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8003fee:	f1ba 0f00 	cmp.w	sl, #0
 8003ff2:	d033      	beq.n	800405c <_write_number+0xb8>
      chr = number & 0x0F;
 8003ff4:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8003ff8:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003ffa:	2b09      	cmp	r3, #9
      t = number >> 4;
 8003ffc:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004000:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004004:	d906      	bls.n	8004014 <_write_number+0x70>
 8004006:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e004      	b.n	8004016 <_write_number+0x72>
  char sign_neg = 0;
 800400c:	461d      	mov	r5, r3
 800400e:	e7de      	b.n	8003fce <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004010:	4617      	mov	r7, r2
 8004012:	e7ea      	b.n	8003fea <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004014:	3330      	adds	r3, #48	@ 0x30
    buf[idx--] = chr;
 8004016:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 800401a:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 800401e:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004022:	f1c7 0b3f 	rsb	fp, r7, #63	@ 0x3f
  } while (number);
 8004026:	d1f3      	bne.n	8004010 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004028:	f006 0101 	and.w	r1, r6, #1
 800402c:	b155      	cbz	r5, 8004044 <_write_number+0xa0>
 800402e:	b949      	cbnz	r1, 8004044 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8004030:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8004034:	eb0d 0203 	add.w	r2, sp, r3
 8004038:	232d      	movs	r3, #45	@ 0x2d
 800403a:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 800403e:	f1c7 0b40 	rsb	fp, r7, #64	@ 0x40
    buf[idx--] = sign_neg;
 8004042:	1eba      	subs	r2, r7, #2
 8004044:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	bf14      	ite	ne
 800404a:	2130      	movne	r1, #48	@ 0x30
 800404c:	2120      	moveq	r1, #32
 800404e:	f006 0602 	and.w	r6, r6, #2
 8004052:	455b      	cmp	r3, fp
 8004054:	dd13      	ble.n	800407e <_write_number+0xda>
 8004056:	b166      	cbz	r6, 8004072 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004058:	b9a5      	cbnz	r5, 8004084 <_write_number+0xe0>
 800405a:	e01c      	b.n	8004096 <_write_number+0xf2>
      t = number / 10;
 800405c:	220a      	movs	r2, #10
 800405e:	2300      	movs	r3, #0
 8004060:	f7fc feb8 	bl	8000dd4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004064:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
 8004068:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800406c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8004070:	e7ca      	b.n	8004008 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004072:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004076:	f10b 0b01 	add.w	fp, fp, #1
 800407a:	3a01      	subs	r2, #1
 800407c:	e7e9      	b.n	8004052 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 800407e:	b155      	cbz	r5, 8004096 <_write_number+0xf2>
 8004080:	455b      	cmp	r3, fp
 8004082:	db08      	blt.n	8004096 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8004084:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8004088:	446b      	add	r3, sp
 800408a:	212d      	movs	r1, #45	@ 0x2d
 800408c:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 8004090:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004094:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004096:	eb0d 0602 	add.w	r6, sp, r2
 800409a:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800409c:	68e3      	ldr	r3, [r4, #12]
 800409e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040a2:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 80040a4:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80040a6:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80040a8:	45ab      	cmp	fp, r5
 80040aa:	d1f7      	bne.n	800409c <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	079b      	lsls	r3, r3, #30
 80040b0:	d408      	bmi.n	80040c4 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 80040b2:	4628      	mov	r0, r5
 80040b4:	b011      	add	sp, #68	@ 0x44
 80040b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	6920      	ldr	r0, [r4, #16]
 80040be:	2120      	movs	r1, #32
 80040c0:	4798      	blx	r3
 80040c2:	3501      	adds	r5, #1
    while (count < specifier->width) {
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	42ab      	cmp	r3, r5
 80040c8:	dcf7      	bgt.n	80040ba <_write_number+0x116>
 80040ca:	e7f2      	b.n	80040b2 <_write_number+0x10e>

080040cc <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	4606      	mov	r6, r0
 80040d2:	b09d      	sub	sp, #116	@ 0x74
 80040d4:	460f      	mov	r7, r1
 80040d6:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 80040d8:	2500      	movs	r5, #0
  return *(*fmtP)++;
 80040da:	4613      	mov	r3, r2
 80040dc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80040e0:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 80040e2:	b919      	cbnz	r1, 80040ec <vlc_print+0x20>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 80040e4:	4628      	mov	r0, r5
 80040e6:	b01d      	add	sp, #116	@ 0x74
 80040e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 80040ec:	290a      	cmp	r1, #10
 80040ee:	d103      	bne.n	80040f8 <vlc_print+0x2c>
      putc_fct(user, c);
 80040f0:	4638      	mov	r0, r7
 80040f2:	47b0      	blx	r6
      count++;
 80040f4:	3501      	adds	r5, #1
 80040f6:	e0c9      	b.n	800428c <vlc_print+0x1c0>
    else if (c == '%')
 80040f8:	2925      	cmp	r1, #37	@ 0x25
 80040fa:	d1f9      	bne.n	80040f0 <vlc_print+0x24>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80040fc:	2300      	movs	r3, #0
 80040fe:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004102:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
 8004106:	970b      	str	r7, [sp, #44]	@ 0x2c
      bool has_precision = false;
 8004108:	4618      	mov	r0, r3
  return *(*fmtP)++;
 800410a:	9a04      	ldr	r2, [sp, #16]
 800410c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004110:	9204      	str	r2, [sp, #16]
        if (!c)
 8004112:	b321      	cbz	r1, 800415e <vlc_print+0x92>
        else if (c == '0')
 8004114:	2939      	cmp	r1, #57	@ 0x39
 8004116:	d814      	bhi.n	8004142 <vlc_print+0x76>
 8004118:	292c      	cmp	r1, #44	@ 0x2c
 800411a:	d91e      	bls.n	800415a <vlc_print+0x8e>
 800411c:	f1a1 022d 	sub.w	r2, r1, #45	@ 0x2d
 8004120:	2a0c      	cmp	r2, #12
 8004122:	d810      	bhi.n	8004146 <vlc_print+0x7a>
 8004124:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004128:	01da003c 	.word	0x01da003c
 800412c:	0027000f 	.word	0x0027000f
 8004130:	00400040 	.word	0x00400040
 8004134:	00400040 	.word	0x00400040
 8004138:	00400040 	.word	0x00400040
 800413c:	00400040 	.word	0x00400040
 8004140:	0040      	.short	0x0040
 8004142:	296c      	cmp	r1, #108	@ 0x6c
 8004144:	d03d      	beq.n	80041c2 <vlc_print+0xf6>
          switch(c)
 8004146:	2978      	cmp	r1, #120	@ 0x78
 8004148:	d809      	bhi.n	800415e <vlc_print+0x92>
 800414a:	2962      	cmp	r1, #98	@ 0x62
 800414c:	d83b      	bhi.n	80041c6 <vlc_print+0xfa>
 800414e:	2946      	cmp	r1, #70	@ 0x46
 8004150:	f000 80df 	beq.w	8004312 <vlc_print+0x246>
 8004154:	2958      	cmp	r1, #88	@ 0x58
 8004156:	f000 80c3 	beq.w	80042e0 <vlc_print+0x214>
 800415a:	2925      	cmp	r1, #37	@ 0x25
 800415c:	d0c8      	beq.n	80040f0 <vlc_print+0x24>
        putc_fct(user, '<');
 800415e:	213c      	movs	r1, #60	@ 0x3c
 8004160:	4638      	mov	r0, r7
 8004162:	47b0      	blx	r6
        putc_fct(user, '!');
 8004164:	2121      	movs	r1, #33	@ 0x21
 8004166:	4638      	mov	r0, r7
 8004168:	47b0      	blx	r6
        putc_fct(user, '>');
 800416a:	213e      	movs	r1, #62	@ 0x3e
 800416c:	4638      	mov	r0, r7
 800416e:	47b0      	blx	r6
        va_arg(vl, signed long);
 8004170:	3404      	adds	r4, #4
        count += 3;
 8004172:	3503      	adds	r5, #3
        error = false;
 8004174:	e08a      	b.n	800428c <vlc_print+0x1c0>
          if (!specifier.width && !specifier.precision) {
 8004176:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 800417a:	ea52 0c01 	orrs.w	ip, r2, r1
 800417e:	d104      	bne.n	800418a <vlc_print+0xbe>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004182:	f042 0201 	orr.w	r2, r2, #1
          specifier.flags |= FLAG_NEG_PAD;
 8004186:	9209      	str	r2, [sp, #36]	@ 0x24
 8004188:	e7bf      	b.n	800410a <vlc_print+0x3e>
          } else if (has_precision) {
 800418a:	f04f 0c0a 	mov.w	ip, #10
 800418e:	b118      	cbz	r0, 8004198 <vlc_print+0xcc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004190:	fb0c f101 	mul.w	r1, ip, r1
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004194:	9108      	str	r1, [sp, #32]
 8004196:	e7b8      	b.n	800410a <vlc_print+0x3e>
            specifier.width = specifier.width * 10 + (c - '0');
 8004198:	fb0c f202 	mul.w	r2, ip, r2
 800419c:	9207      	str	r2, [sp, #28]
 800419e:	e7b4      	b.n	800410a <vlc_print+0x3e>
          specifier.flags |= FLAG_NEG_PAD;
 80041a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041a2:	f042 0202 	orr.w	r2, r2, #2
 80041a6:	e7ee      	b.n	8004186 <vlc_print+0xba>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041a8:	3930      	subs	r1, #48	@ 0x30
 80041aa:	f04f 0c0a 	mov.w	ip, #10
          if (has_precision) {
 80041ae:	b118      	cbz	r0, 80041b8 <vlc_print+0xec>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041b0:	9a08      	ldr	r2, [sp, #32]
 80041b2:	fb0c 1102 	mla	r1, ip, r2, r1
 80041b6:	e7ed      	b.n	8004194 <vlc_print+0xc8>
            specifier.width = specifier.width * 10 + (c - '0');
 80041b8:	9a07      	ldr	r2, [sp, #28]
 80041ba:	fb0c 1102 	mla	r1, ip, r2, r1
 80041be:	9107      	str	r1, [sp, #28]
 80041c0:	e7a3      	b.n	800410a <vlc_print+0x3e>
          long_type += 1;
 80041c2:	3301      	adds	r3, #1
 80041c4:	e7a1      	b.n	800410a <vlc_print+0x3e>
          switch(c)
 80041c6:	3963      	subs	r1, #99	@ 0x63
 80041c8:	2915      	cmp	r1, #21
 80041ca:	d8c8      	bhi.n	800415e <vlc_print+0x92>
 80041cc:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <vlc_print+0x108>)
 80041ce:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004241 	.word	0x08004241
 80041d8:	08004301 	.word	0x08004301
 80041dc:	0800415f 	.word	0x0800415f
 80041e0:	08004313 	.word	0x08004313
 80041e4:	0800415f 	.word	0x0800415f
 80041e8:	0800415f 	.word	0x0800415f
 80041ec:	08004301 	.word	0x08004301
 80041f0:	0800415f 	.word	0x0800415f
 80041f4:	0800415f 	.word	0x0800415f
 80041f8:	0800415f 	.word	0x0800415f
 80041fc:	0800415f 	.word	0x0800415f
 8004200:	0800415f 	.word	0x0800415f
 8004204:	0800415f 	.word	0x0800415f
 8004208:	080042d5 	.word	0x080042d5
 800420c:	0800415f 	.word	0x0800415f
 8004210:	0800415f 	.word	0x0800415f
 8004214:	08004247 	.word	0x08004247
 8004218:	0800415f 	.word	0x0800415f
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800415f 	.word	0x0800415f
 8004224:	0800415f 	.word	0x0800415f
 8004228:	080042e9 	.word	0x080042e9
                val = va_arg(vl, unsigned int);
 800422c:	46a0      	mov	r8, r4
 800422e:	2100      	movs	r1, #0
 8004230:	f858 0b04 	ldr.w	r0, [r8], #4
            count += _write_number(val, &specifier);
 8004234:	aa07      	add	r2, sp, #28
 8004236:	f7ff feb5 	bl	8003fa4 <_write_number>
            break;
 800423a:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 800423c:	4405      	add	r5, r0
            break;
 800423e:	e025      	b.n	800428c <vlc_print+0x1c0>
            putc_fct(user, t);
 8004240:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004244:	e754      	b.n	80040f0 <vlc_print+0x24>
            if (!str) str = "(null)";
 8004246:	4ba6      	ldr	r3, [pc, #664]	@ (80044e0 <vlc_print+0x414>)
            str = va_arg(vl, char*);
 8004248:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 800424c:	f1bb 0f00 	cmp.w	fp, #0
 8004250:	bf08      	it	eq
 8004252:	469b      	moveq	fp, r3
  int len = strlen(str);
 8004254:	4658      	mov	r0, fp
 8004256:	f7fc f813 	bl	8000280 <strlen>
  if (specifier->precision) {
 800425a:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 800425c:	4681      	mov	r9, r0
  if (specifier->precision) {
 800425e:	b113      	cbz	r3, 8004266 <vlc_print+0x19a>
    len = (len > specifier->precision)?specifier->precision:len;
 8004260:	4298      	cmp	r0, r3
 8004262:	bfa8      	it	ge
 8004264:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004268:	f013 0a02 	ands.w	sl, r3, #2
 800426c:	d01b      	beq.n	80042a6 <vlc_print+0x1da>
  int count = 0;
 800426e:	f04f 0800 	mov.w	r8, #0
 8004272:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 8004274:	eba3 020b 	sub.w	r2, r3, fp
 8004278:	4591      	cmp	r9, r2
 800427a:	dc16      	bgt.n	80042aa <vlc_print+0x1de>
 800427c:	f1b9 0f00 	cmp.w	r9, #0
 8004280:	bfa8      	it	ge
 8004282:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 8004284:	f1ba 0f00 	cmp.w	sl, #0
 8004288:	d121      	bne.n	80042ce <vlc_print+0x202>
            count += _write_string(str, &specifier);
 800428a:	4445      	add	r5, r8
          switch(c)
 800428c:	9a04      	ldr	r2, [sp, #16]
 800428e:	e724      	b.n	80040da <vlc_print+0xe>
      _WRITE_C(' ');
 8004290:	2120      	movs	r1, #32
 8004292:	4638      	mov	r0, r7
 8004294:	47b0      	blx	r6
 8004296:	f108 0801 	add.w	r8, r8, #1
    for(int i = len; i < specifier->width; i++) {
 800429a:	9a07      	ldr	r2, [sp, #28]
 800429c:	eb08 0309 	add.w	r3, r8, r9
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dcf5      	bgt.n	8004290 <vlc_print+0x1c4>
 80042a4:	e7e5      	b.n	8004272 <vlc_print+0x1a6>
  int count = 0;
 80042a6:	46d0      	mov	r8, sl
 80042a8:	e7f7      	b.n	800429a <vlc_print+0x1ce>
    _WRITE_C(*str++);
 80042aa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	4638      	mov	r0, r7
 80042b2:	47b0      	blx	r6
 80042b4:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < len; i++) {
 80042b6:	e7dd      	b.n	8004274 <vlc_print+0x1a8>
      _WRITE_C(' ');
 80042b8:	2120      	movs	r1, #32
 80042ba:	4638      	mov	r0, r7
 80042bc:	47b0      	blx	r6
 80042be:	f108 0801 	add.w	r8, r8, #1
    for(int i = len; i < specifier->width; i++) {
 80042c2:	9a07      	ldr	r2, [sp, #28]
 80042c4:	eb09 0308 	add.w	r3, r9, r8
 80042c8:	429a      	cmp	r2, r3
 80042ca:	dcf5      	bgt.n	80042b8 <vlc_print+0x1ec>
 80042cc:	e7dd      	b.n	800428a <vlc_print+0x1be>
 80042ce:	eba9 0908 	sub.w	r9, r9, r8
 80042d2:	e7f6      	b.n	80042c2 <vlc_print+0x1f6>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80042d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.width = 8;
 80042dc:	2308      	movs	r3, #8
 80042de:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 80042e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.flags |= FLAG_HEX;
 80042e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 80042ea:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 80042ee:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 80042f2:	aa07      	add	r2, sp, #28
 80042f4:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 80042f6:	9309      	str	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 80042f8:	f7ff fe54 	bl	8003fa4 <_write_number>
 80042fc:	4405      	add	r5, r0
            break;
 80042fe:	e7c5      	b.n	800428c <vlc_print+0x1c0>
            specifier.flags |= FLAG_IS_SIGNED;
 8004300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004302:	f042 0204 	orr.w	r2, r2, #4
 8004306:	9209      	str	r2, [sp, #36]	@ 0x24
                val = va_arg(vl, signed int);
 8004308:	6820      	ldr	r0, [r4, #0]
                val = va_arg(vl, unsigned int);
 800430a:	f104 0804 	add.w	r8, r4, #4
                val = va_arg(vl, signed int);
 800430e:	17c1      	asrs	r1, r0, #31
 8004310:	e790      	b.n	8004234 <vlc_print+0x168>
            dbl = va_arg(vl, double);
 8004312:	3407      	adds	r4, #7
 8004314:	f024 0407 	bic.w	r4, r4, #7
 8004318:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 800431c:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 800431e:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004322:	b90b      	cbnz	r3, 8004328 <vlc_print+0x25c>
              specifier.precision = 6;
 8004324:	2306      	movs	r3, #6
 8004326:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004328:	f8dd 8020 	ldr.w	r8, [sp, #32]
  double mul = 1.0;
 800432c:	f8df b1bc 	ldr.w	fp, [pc, #444]	@ 80044ec <vlc_print+0x420>
  for (int i=0;i <specifier->precision; i++)
 8004330:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8004334:	f04f 0a00 	mov.w	sl, #0
  for (int i=0;i <specifier->precision; i++)
 8004338:	45c1      	cmp	r9, r8
    mul *= 10;
 800433a:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 800433e:	f2c0 80b9 	blt.w	80044b4 <vlc_print+0x3e8>
  if (is_signed)
 8004342:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004346:	2300      	movs	r3, #0
 8004348:	f7fc fbd0 	bl	8000aec <__aeabi_dcmplt>
 800434c:	2800      	cmp	r0, #0
 800434e:	f000 80bb 	beq.w	80044c8 <vlc_print+0x3fc>
    number = -number;
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800435c:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 800435e:	4652      	mov	r2, sl
 8004360:	465b      	mov	r3, fp
 8004362:	4960      	ldr	r1, [pc, #384]	@ (80044e4 <vlc_print+0x418>)
 8004364:	2000      	movs	r0, #0
 8004366:	f7fc fa79 	bl	800085c <__aeabi_ddiv>
 800436a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800436e:	f7fb ff95 	bl	800029c <__adddf3>
  val = (uint64_t)(number * mul);
 8004372:	4652      	mov	r2, sl
 8004374:	465b      	mov	r3, fp
 8004376:	f7fc f947 	bl	8000608 <__aeabi_dmul>
 800437a:	f7fc fd43 	bl	8000e04 <__aeabi_d2ulz>
  uint32_t count = 0;
 800437e:	f04f 0900 	mov.w	r9, #0
  val = (uint64_t)(number * mul);
 8004382:	4603      	mov	r3, r0
  uint32_t idx = sizeof(buf) - 1;
 8004384:	f04f 0a3f 	mov.w	sl, #63	@ 0x3f
    uint64_t t = val / 10;
 8004388:	469b      	mov	fp, r3
 800438a:	220a      	movs	r2, #10
 800438c:	2300      	movs	r3, #0
 800438e:	4658      	mov	r0, fp
 8004390:	9105      	str	r1, [sp, #20]
 8004392:	f7fc fd1f 	bl	8000dd4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004396:	f10b 0c30 	add.w	ip, fp, #48	@ 0x30
    uint64_t t = val / 10;
 800439a:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 800439c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043a0:	ebac 0c40 	sub.w	ip, ip, r0, lsl #1
    buf[idx--] = chr;
 80043a4:	f10a 0070 	add.w	r0, sl, #112	@ 0x70
 80043a8:	4468      	add	r0, sp
 80043aa:	f10a 32ff 	add.w	r2, sl, #4294967295
 80043ae:	f800 cc40 	strb.w	ip, [r0, #-64]
    count++;
 80043b2:	f109 0001 	add.w	r0, r9, #1
    if (count == specifier->precision) {
 80043b6:	4580      	cmp	r8, r0
      buf[idx--] = '.';
 80043b8:	bf01      	itttt	eq
 80043ba:	3270      	addeq	r2, #112	@ 0x70
 80043bc:	446a      	addeq	r2, sp
 80043be:	202e      	moveq	r0, #46	@ 0x2e
 80043c0:	f802 0c40 	strbeq.w	r0, [r2, #-64]
    buf[idx--] = chr;
 80043c4:	bf18      	it	ne
 80043c6:	4692      	movne	sl, r2
  } while (val);
 80043c8:	9a05      	ldr	r2, [sp, #20]
      buf[idx--] = '.';
 80043ca:	bf06      	itte	eq
 80043cc:	f1aa 0a02 	subeq.w	sl, sl, #2
      count++;
 80043d0:	f109 0902 	addeq.w	r9, r9, #2
    count++;
 80043d4:	4681      	movne	r9, r0
  } while (val);
 80043d6:	f1bb 0f0a 	cmp.w	fp, #10
 80043da:	f172 0200 	sbcs.w	r2, r2, #0
 80043de:	d2d3      	bcs.n	8004388 <vlc_print+0x2bc>
    buf[idx--] = '0';
 80043e0:	45c1      	cmp	r9, r8
 80043e2:	f1c8 0001 	rsb	r0, r8, #1
 80043e6:	4448      	add	r0, r9
 80043e8:	f04f 0130 	mov.w	r1, #48	@ 0x30
 80043ec:	bf88      	it	hi
 80043ee:	2001      	movhi	r0, #1
 80043f0:	eba8 0b09 	sub.w	fp, r8, r9
 80043f4:	eb0d 0301 	add.w	r3, sp, r1
 80043f8:	bf88      	it	hi
 80043fa:	f04f 0b00 	movhi.w	fp, #0
 80043fe:	4450      	add	r0, sl
 8004400:	4418      	add	r0, r3
 8004402:	465a      	mov	r2, fp
 8004404:	f004 fdd9 	bl	8008fba <memset>
 8004408:	eba9 0308 	sub.w	r3, r9, r8
 800440c:	45c1      	cmp	r9, r8
 800440e:	bf88      	it	hi
 8004410:	2300      	movhi	r3, #0
 8004412:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 8004414:	45c8      	cmp	r8, r9
 8004416:	449a      	add	sl, r3
 8004418:	f108 0801 	add.w	r8, r8, #1
 800441c:	d108      	bne.n	8004430 <vlc_print+0x364>
    buf[idx--] = '.';
 800441e:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 8004422:	446b      	add	r3, sp
 8004424:	222e      	movs	r2, #46	@ 0x2e
 8004426:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 800442a:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 800442c:	f10a 3aff 	add.w	sl, sl, #4294967295
  if (count == specifier->precision + 1)
 8004430:	45c8      	cmp	r8, r9
 8004432:	d109      	bne.n	8004448 <vlc_print+0x37c>
    buf[idx--] = '0';
 8004434:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 8004438:	446b      	add	r3, sp
 800443a:	2230      	movs	r2, #48	@ 0x30
 800443c:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004440:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 8004444:	f10a 3aff 	add.w	sl, sl, #4294967295
  if (is_signed) {
 8004448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	f7fc fb4c 	bl	8000aec <__aeabi_dcmplt>
 8004454:	b148      	cbz	r0, 800446a <vlc_print+0x39e>
    buf[idx--] = '-';
 8004456:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 800445a:	446b      	add	r3, sp
 800445c:	222d      	movs	r2, #45	@ 0x2d
 800445e:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004462:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 8004466:	f10a 3aff 	add.w	sl, sl, #4294967295
  while (count < specifier->width) {
 800446a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    buf[idx--] = ' ';
 800446e:	45c8      	cmp	r8, r9
 8004470:	f1c8 0001 	rsb	r0, r8, #1
 8004474:	4448      	add	r0, r9
 8004476:	bf38      	it	cc
 8004478:	2001      	movcc	r0, #1
 800447a:	eba8 0b09 	sub.w	fp, r8, r9
 800447e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004480:	bf38      	it	cc
 8004482:	f04f 0b00 	movcc.w	fp, #0
 8004486:	4450      	add	r0, sl
 8004488:	465a      	mov	r2, fp
 800448a:	4418      	add	r0, r3
 800448c:	2120      	movs	r1, #32
 800448e:	f004 fd94 	bl	8008fba <memset>
 8004492:	eba9 0308 	sub.w	r3, r9, r8
 8004496:	45c8      	cmp	r8, r9
 8004498:	bf38      	it	cc
 800449a:	2300      	movcc	r3, #0
 800449c:	4453      	add	r3, sl
 800449e:	44cb      	add	fp, r9
  for(int i = 0; i < count; i++) {
 80044a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80044a2:	eb02 0803 	add.w	r8, r2, r3
 80044a6:	445b      	add	r3, fp
 80044a8:	eb03 0902 	add.w	r9, r3, r2
 80044ac:	45c1      	cmp	r9, r8
 80044ae:	d110      	bne.n	80044d2 <vlc_print+0x406>
            count += _write_double(dbl, &specifier);
 80044b0:	445d      	add	r5, fp
            break;
 80044b2:	e6eb      	b.n	800428c <vlc_print+0x1c0>
    mul *= 10;
 80044b4:	4650      	mov	r0, sl
 80044b6:	4659      	mov	r1, fp
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <vlc_print+0x41c>)
 80044ba:	f7fc f8a5 	bl	8000608 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 80044be:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 80044c2:	4682      	mov	sl, r0
 80044c4:	468b      	mov	fp, r1
  for (int i=0;i <specifier->precision; i++)
 80044c6:	e737      	b.n	8004338 <vlc_print+0x26c>
 80044c8:	ed9d 7b00 	vldr	d7, [sp]
 80044cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80044d0:	e745      	b.n	800435e <vlc_print+0x292>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80044d2:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80044d6:	4638      	mov	r0, r7
 80044d8:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 80044da:	e7e7      	b.n	80044ac <vlc_print+0x3e0>
        if (!c)
 80044dc:	2001      	movs	r0, #1
 80044de:	e614      	b.n	800410a <vlc_print+0x3e>
 80044e0:	080675b8 	.word	0x080675b8
 80044e4:	3fe00000 	.word	0x3fe00000
 80044e8:	40240000 	.word	0x40240000
 80044ec:	3ff00000 	.word	0x3ff00000

080044f0 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80044f0:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 80044f2:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80044f6:	888b      	ldrh	r3, [r1, #4]
 80044f8:	441a      	add	r2, r3
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80044fa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80044fe:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004500:	441a      	add	r2, r3
    iter->pos = fields;
 8004502:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004506:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8004508:	8808      	ldrh	r0, [r1, #0]
}
 800450a:	3800      	subs	r0, #0
 800450c:	bf18      	it	ne
 800450e:	2001      	movne	r0, #1
 8004510:	4770      	bx	lr

08004512 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8004512:	6842      	ldr	r2, [r0, #4]

    if (prev_field->tag == 0)
 8004514:	8811      	ldrh	r1, [r2, #0]
{
 8004516:	b570      	push	{r4, r5, r6, lr}
 8004518:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 800451a:	b141      	cbz	r1, 800452e <pb_field_iter_next+0x1c>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 800451c:	f102 0110 	add.w	r1, r2, #16
 8004520:	6041      	str	r1, [r0, #4]
    
    if (iter->pos->tag == 0)
 8004522:	8a11      	ldrh	r1, [r2, #16]
 8004524:	b929      	cbnz	r1, 8004532 <pb_field_iter_next+0x20>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8004526:	68c2      	ldr	r2, [r0, #12]
 8004528:	6801      	ldr	r1, [r0, #0]
 800452a:	f7ff ffe1 	bl	80044f0 <pb_field_iter_begin>
        return false;
 800452e:	2000      	movs	r0, #0
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8004530:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004532:	7890      	ldrb	r0, [r2, #2]
        size_t prev_size = prev_field->data_size;
 8004534:	8911      	ldrh	r1, [r2, #8]
            iter->pos->data_offset == PB_SIZE_MAX)
 8004536:	8a94      	ldrh	r4, [r2, #20]
 8004538:	f000 0630 	and.w	r6, r0, #48	@ 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800453c:	2e30      	cmp	r6, #48	@ 0x30
 800453e:	d10a      	bne.n	8004556 <pb_field_iter_next+0x44>
 8004540:	7c95      	ldrb	r5, [r2, #18]
 8004542:	f005 0530 	and.w	r5, r5, #48	@ 0x30
 8004546:	2d30      	cmp	r5, #48	@ 0x30
 8004548:	d114      	bne.n	8004574 <pb_field_iter_next+0x62>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800454a:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800454e:	42ac      	cmp	r4, r5
 8004550:	d110      	bne.n	8004574 <pb_field_iter_next+0x62>
            return true;
 8004552:	2001      	movs	r0, #1
 8004554:	e7ec      	b.n	8004530 <pb_field_iter_next+0x1e>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8004556:	f000 05f0 	and.w	r5, r0, #240	@ 0xf0
 800455a:	2d20      	cmp	r5, #32
 800455c:	d10a      	bne.n	8004574 <pb_field_iter_next+0x62>
            prev_size *= prev_field->array_size;
 800455e:	8950      	ldrh	r0, [r2, #10]
 8004560:	4341      	muls	r1, r0
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004562:	440c      	add	r4, r1
 8004564:	6919      	ldr	r1, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004566:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800456a:	4421      	add	r1, r4
 800456c:	6119      	str	r1, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800456e:	4411      	add	r1, r2
 8004570:	6159      	str	r1, [r3, #20]
        return true;
 8004572:	e7ee      	b.n	8004552 <pb_field_iter_next+0x40>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8004574:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
            prev_size = sizeof(void*);
 8004578:	2880      	cmp	r0, #128	@ 0x80
 800457a:	bf08      	it	eq
 800457c:	2104      	moveq	r1, #4
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800457e:	2e00      	cmp	r6, #0
 8004580:	d1ef      	bne.n	8004562 <pb_field_iter_next+0x50>
            iter->required_field_index++;
 8004582:	6898      	ldr	r0, [r3, #8]
 8004584:	3001      	adds	r0, #1
 8004586:	6098      	str	r0, [r3, #8]
 8004588:	e7eb      	b.n	8004562 <pb_field_iter_next+0x50>

0800458a <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800458a:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 800458c:	6846      	ldr	r6, [r0, #4]
{
 800458e:	4604      	mov	r4, r0
 8004590:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	42aa      	cmp	r2, r5
 8004598:	d104      	bne.n	80045a4 <pb_field_iter_find+0x1a>
 800459a:	789b      	ldrb	r3, [r3, #2]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d107      	bne.n	80045b4 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff ffb4 	bl	8004512 <pb_field_iter_next>
    } while (iter->pos != start);
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	42b3      	cmp	r3, r6
 80045ae:	d1f0      	bne.n	8004592 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80045b0:	2000      	movs	r0, #0
}
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80045b4:	2001      	movs	r0, #1
 80045b6:	e7fc      	b.n	80045b2 <pb_field_iter_find+0x28>

080045b8 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80045b8:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80045ba:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 80045bc:	18a3      	adds	r3, r4, r2
 80045be:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 80045c0:	b939      	cbnz	r1, 80045d2 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 80045c2:	2001      	movs	r0, #1
 80045c4:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 80045c6:	5ce0      	ldrb	r0, [r4, r3]
 80045c8:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 80045ca:	3301      	adds	r3, #1
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d1fa      	bne.n	80045c6 <buf_read+0xe>
 80045d0:	e7f7      	b.n	80045c2 <buf_read+0xa>
 80045d2:	2300      	movs	r3, #0
 80045d4:	e7fa      	b.n	80045cc <buf_read+0x14>

080045d6 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
    if (stream->bytes_left == 0)
 80045d6:	6883      	ldr	r3, [r0, #8]
{
 80045d8:	b510      	push	{r4, lr}
 80045da:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 80045dc:	b90b      	cbnz	r3, 80045e2 <pb_readbyte+0xc>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80045de:	2000      	movs	r0, #0
#endif

    stream->bytes_left--;
    
    return true;    
}
 80045e0:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 80045e2:	6803      	ldr	r3, [r0, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4798      	blx	r3
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d0f8      	beq.n	80045de <pb_readbyte+0x8>
    stream->bytes_left--;
 80045ec:	68a3      	ldr	r3, [r4, #8]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	60a3      	str	r3, [r4, #8]
    return true;    
 80045f2:	e7f5      	b.n	80045e0 <pb_readbyte+0xa>

080045f4 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 80045f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045f8:	4688      	mov	r8, r1
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80045fa:	f10d 0107 	add.w	r1, sp, #7
{
 80045fe:	4607      	mov	r7, r0
 8004600:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8004602:	f7ff ffe8 	bl	80045d6 <pb_readbyte>
 8004606:	4606      	mov	r6, r0
 8004608:	b958      	cbnz	r0, 8004622 <pb_decode_varint32_eof+0x2e>
    {
        if (stream->bytes_left == 0)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	b123      	cbz	r3, 8004618 <pb_decode_varint32_eof+0x24>
            {
                *eof = true;
            }
        }

        return false;
 800460e:	2600      	movs	r6, #0
        }
   }
   
   *dest = result;
   return true;
}
 8004610:	4630      	mov	r0, r6
 8004612:	b002      	add	sp, #8
 8004614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (eof)
 8004618:	2c00      	cmp	r4, #0
 800461a:	d0f8      	beq.n	800460e <pb_decode_varint32_eof+0x1a>
                *eof = true;
 800461c:	2301      	movs	r3, #1
 800461e:	7023      	strb	r3, [r4, #0]
 8004620:	e7f5      	b.n	800460e <pb_decode_varint32_eof+0x1a>
    if ((byte & 0x80) == 0)
 8004622:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8004626:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800462a:	2b00      	cmp	r3, #0
 800462c:	da21      	bge.n	8004672 <pb_decode_varint32_eof+0x7e>
        result = byte & 0x7F;
 800462e:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
        uint_fast8_t bitpos = 7;
 8004632:	2507      	movs	r5, #7
            if (!pb_readbyte(stream, &byte))
 8004634:	f10d 0107 	add.w	r1, sp, #7
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff ffcc 	bl	80045d6 <pb_readbyte>
 800463e:	2800      	cmp	r0, #0
 8004640:	d0e5      	beq.n	800460e <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004642:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8004646:	2d1f      	cmp	r5, #31
 8004648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800464c:	d914      	bls.n	8004678 <pb_decode_varint32_eof+0x84>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800464e:	2d3f      	cmp	r5, #63	@ 0x3f
 8004650:	bf34      	ite	cc
 8004652:	21ff      	movcc	r1, #255	@ 0xff
 8004654:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004656:	b11a      	cbz	r2, 8004660 <pb_decode_varint32_eof+0x6c>
 8004658:	2c00      	cmp	r4, #0
 800465a:	dad8      	bge.n	800460e <pb_decode_varint32_eof+0x1a>
 800465c:	4299      	cmp	r1, r3
 800465e:	d1d6      	bne.n	800460e <pb_decode_varint32_eof+0x1a>
        } while (byte & 0x80);
 8004660:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8004662:	f105 0507 	add.w	r5, r5, #7
        } while (byte & 0x80);
 8004666:	d4e5      	bmi.n	8004634 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8004668:	2d23      	cmp	r5, #35	@ 0x23
 800466a:	d102      	bne.n	8004672 <pb_decode_varint32_eof+0x7e>
 800466c:	f013 0f70 	tst.w	r3, #112	@ 0x70
 8004670:	d1cd      	bne.n	800460e <pb_decode_varint32_eof+0x1a>
   *dest = result;
 8004672:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8004676:	e7cb      	b.n	8004610 <pb_decode_varint32_eof+0x1c>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8004678:	40aa      	lsls	r2, r5
 800467a:	4314      	orrs	r4, r2
 800467c:	e7f0      	b.n	8004660 <pb_decode_varint32_eof+0x6c>

0800467e <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800467e:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8004680:	6841      	ldr	r1, [r0, #4]
 8004682:	788a      	ldrb	r2, [r1, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004684:	f002 050f 	and.w	r5, r2, #15
 8004688:	2d08      	cmp	r5, #8
{
 800468a:	b086      	sub	sp, #24
 800468c:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800468e:	d11f      	bne.n	80046d0 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004690:	6903      	ldr	r3, [r0, #16]
 8004692:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8004694:	2600      	movs	r6, #0
        while (ext != NULL)
 8004696:	b90c      	cbnz	r4, 800469c <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8004698:	b006      	add	sp, #24
 800469a:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800469c:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800469e:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80046a0:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 80046a2:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80046a4:	4629      	mov	r1, r5
 80046a6:	4668      	mov	r0, sp
 80046a8:	f7ff ff22 	bl	80044f0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 80046b0:	f104 030c 	add.w	r3, r4, #12
 80046b4:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80046b6:	78ab      	ldrb	r3, [r5, #2]
 80046b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046bc:	2b80      	cmp	r3, #128	@ 0x80
        iter->pData = &extension->dest;
 80046be:	bf08      	it	eq
 80046c0:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 80046c2:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 80046c4:	bf08      	it	eq
 80046c6:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 80046c8:	f7ff ffd9 	bl	800467e <pb_field_set_to_default>
            ext = ext->next;
 80046cc:	68a4      	ldr	r4, [r4, #8]
 80046ce:	e7e2      	b.n	8004696 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80046d0:	2a3f      	cmp	r2, #63	@ 0x3f
 80046d2:	d827      	bhi.n	8004724 <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 80046d4:	f002 0030 	and.w	r0, r2, #48	@ 0x30
 80046d8:	2810      	cmp	r0, #16
 80046da:	d110      	bne.n	80046fe <pb_field_set_to_default+0x80>
 80046dc:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 80046e0:	4282      	cmp	r2, r0
 80046e2:	d001      	beq.n	80046e8 <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 80046e4:	2000      	movs	r0, #0
 80046e6:	7010      	strb	r0, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80046e8:	2d07      	cmp	r5, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80046ea:	68cc      	ldr	r4, [r1, #12]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80046ec:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80046ee:	d10c      	bne.n	800470a <pb_field_set_to_default+0x8c>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80046f0:	4601      	mov	r1, r0
 80046f2:	4620      	mov	r0, r4
}
 80046f4:	b006      	add	sp, #24
 80046f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80046fa:	f000 b81f 	b.w	800473c <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80046fe:	0690      	lsls	r0, r2, #26
 8004700:	d5f2      	bpl.n	80046e8 <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	2200      	movs	r2, #0
 8004706:	801a      	strh	r2, [r3, #0]
        if (init_data)
 8004708:	e7c6      	b.n	8004698 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800470a:	890a      	ldrh	r2, [r1, #8]
 800470c:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 800470e:	b124      	cbz	r4, 800471a <pb_field_set_to_default+0x9c>
}
 8004710:	b006      	add	sp, #24
 8004712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004716:	f004 bcf2 	b.w	80090fe <memcpy>
}
 800471a:	b006      	add	sp, #24
 800471c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8004720:	f004 bc4b 	b.w	8008fba <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8004724:	f002 01c0 	and.w	r1, r2, #192	@ 0xc0
 8004728:	2980      	cmp	r1, #128	@ 0x80
 800472a:	d1b5      	bne.n	8004698 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 800472c:	6900      	ldr	r0, [r0, #16]
 800472e:	2100      	movs	r1, #0
 8004730:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004732:	0692      	lsls	r2, r2, #26
            *(pb_size_t*)iter->pSize = 0;
 8004734:	bf44      	itt	mi
 8004736:	695b      	ldrmi	r3, [r3, #20]
 8004738:	8019      	strhmi	r1, [r3, #0]
}
 800473a:	e7ad      	b.n	8004698 <pb_field_set_to_default+0x1a>

0800473c <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800473c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800473e:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8004740:	4601      	mov	r1, r0
 8004742:	4668      	mov	r0, sp
 8004744:	f7ff fed4 	bl	80044f0 <pb_field_iter_begin>
 8004748:	b130      	cbz	r0, 8004758 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800474a:	4668      	mov	r0, sp
 800474c:	f7ff ff97 	bl	800467e <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8004750:	4668      	mov	r0, sp
 8004752:	f7ff fede 	bl	8004512 <pb_field_iter_next>
 8004756:	e7f7      	b.n	8004748 <pb_message_set_to_defaults+0xc>
}
 8004758:	b007      	add	sp, #28
 800475a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004760 <pb_read>:
{
 8004760:	b530      	push	{r4, r5, lr}
 8004762:	4604      	mov	r4, r0
 8004764:	b085      	sub	sp, #20
 8004766:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8004768:	b9a9      	cbnz	r1, 8004796 <pb_read+0x36>
 800476a:	6802      	ldr	r2, [r0, #0]
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <pb_read+0x54>)
 800476e:	429a      	cmp	r2, r3
 8004770:	d011      	beq.n	8004796 <pb_read+0x36>
		while (count > 16)
 8004772:	2d10      	cmp	r5, #16
 8004774:	d806      	bhi.n	8004784 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8004776:	462a      	mov	r2, r5
 8004778:	4669      	mov	r1, sp
 800477a:	4620      	mov	r0, r4
 800477c:	f7ff fff0 	bl	8004760 <pb_read>
}
 8004780:	b005      	add	sp, #20
 8004782:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8004784:	2210      	movs	r2, #16
 8004786:	4669      	mov	r1, sp
 8004788:	4620      	mov	r0, r4
 800478a:	f7ff ffe9 	bl	8004760 <pb_read>
 800478e:	2800      	cmp	r0, #0
 8004790:	d0f6      	beq.n	8004780 <pb_read+0x20>
			count -= 16;
 8004792:	3d10      	subs	r5, #16
 8004794:	e7ed      	b.n	8004772 <pb_read+0x12>
    if (stream->bytes_left < count)
 8004796:	68a3      	ldr	r3, [r4, #8]
 8004798:	42ab      	cmp	r3, r5
 800479a:	d201      	bcs.n	80047a0 <pb_read+0x40>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800479c:	2000      	movs	r0, #0
 800479e:	e7ef      	b.n	8004780 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	462a      	mov	r2, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	4798      	blx	r3
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0f7      	beq.n	800479c <pb_read+0x3c>
    stream->bytes_left -= count;
 80047ac:	68a3      	ldr	r3, [r4, #8]
 80047ae:	1b5b      	subs	r3, r3, r5
 80047b0:	60a3      	str	r3, [r4, #8]
    return true;
 80047b2:	e7e5      	b.n	8004780 <pb_read+0x20>
 80047b4:	080045b9 	.word	0x080045b9

080047b8 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 80047b8:	2200      	movs	r2, #0
 80047ba:	f7ff bf1b 	b.w	80045f4 <pb_decode_varint32_eof>

080047be <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80047be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c0:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 80047c2:	a901      	add	r1, sp, #4
{
 80047c4:	4606      	mov	r6, r0
 80047c6:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80047c8:	f7ff fff6 	bl	80047b8 <pb_decode_varint32>
 80047cc:	4604      	mov	r4, r0
 80047ce:	b140      	cbz	r0, 80047e2 <pb_dec_fixed_length_bytes+0x24>
        return false;

    if (size > PB_SIZE_MAX)
 80047d0:	9901      	ldr	r1, [sp, #4]
 80047d2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80047d6:	d211      	bcs.n	80047fc <pb_dec_fixed_length_bytes+0x3e>
        PB_RETURN_ERROR(stream, "bytes overflow");

    if (size == 0)
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 80047d8:	893a      	ldrh	r2, [r7, #8]
    if (size == 0)
 80047da:	b929      	cbnz	r1, 80047e8 <pb_dec_fixed_length_bytes+0x2a>
        memset(dest, 0, field->data_size);
 80047dc:	4628      	mov	r0, r5
 80047de:	f004 fbec 	bl	8008fba <memset>

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 80047e2:	4620      	mov	r0, r4
 80047e4:	b003      	add	sp, #12
 80047e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 80047e8:	4291      	cmp	r1, r2
 80047ea:	d107      	bne.n	80047fc <pb_dec_fixed_length_bytes+0x3e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80047ec:	460a      	mov	r2, r1
 80047ee:	4630      	mov	r0, r6
 80047f0:	4629      	mov	r1, r5
}
 80047f2:	b003      	add	sp, #12
 80047f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80047f8:	f7ff bfb2 	b.w	8004760 <pb_read>
        return false;
 80047fc:	2400      	movs	r4, #0
 80047fe:	e7f0      	b.n	80047e2 <pb_dec_fixed_length_bytes+0x24>

08004800 <pb_dec_string>:
{
 8004800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004804:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8004806:	a901      	add	r1, sp, #4
{
 8004808:	4680      	mov	r8, r0
 800480a:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 800480c:	f7ff ffd4 	bl	80047b8 <pb_decode_varint32>
 8004810:	b1a0      	cbz	r0, 800483c <pb_dec_string+0x3c>
    alloc_size = size + 1;
 8004812:	9c01      	ldr	r4, [sp, #4]
 8004814:	1c62      	adds	r2, r4, #1
 8004816:	f04f 0500 	mov.w	r5, #0
 800481a:	d204      	bcs.n	8004826 <pb_dec_string+0x26>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800481c:	78bb      	ldrb	r3, [r7, #2]
 800481e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004822:	2b80      	cmp	r3, #128	@ 0x80
 8004824:	d101      	bne.n	800482a <pb_dec_string+0x2a>
        return false;
 8004826:	4628      	mov	r0, r5
 8004828:	e008      	b.n	800483c <pb_dec_string+0x3c>
        if (alloc_size > field->data_size)
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	4293      	cmp	r3, r2
 800482e:	d3fa      	bcc.n	8004826 <pb_dec_string+0x26>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8004830:	4622      	mov	r2, r4
 8004832:	4631      	mov	r1, r6
 8004834:	4640      	mov	r0, r8
 8004836:	f7ff ff93 	bl	8004760 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 800483a:	5535      	strb	r5, [r6, r4]
}
 800483c:	b002      	add	sp, #8
 800483e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004842 <pb_dec_bytes>:
{
 8004842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004844:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004846:	a901      	add	r1, sp, #4
{
 8004848:	4606      	mov	r6, r0
 800484a:	4614      	mov	r4, r2
    if (!pb_decode_varint32(stream, &size))
 800484c:	f7ff ffb4 	bl	80047b8 <pb_decode_varint32>
 8004850:	b1b0      	cbz	r0, 8004880 <pb_dec_bytes+0x3e>
    if (size > PB_SIZE_MAX)
 8004852:	9a01      	ldr	r2, [sp, #4]
 8004854:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004858:	d212      	bcs.n	8004880 <pb_dec_bytes+0x3e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800485a:	78ab      	ldrb	r3, [r5, #2]
 800485c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004860:	2b80      	cmp	r3, #128	@ 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004862:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004866:	d00b      	beq.n	8004880 <pb_dec_bytes+0x3e>
        if (alloc_size > field->data_size)
 8004868:	892b      	ldrh	r3, [r5, #8]
 800486a:	428b      	cmp	r3, r1
 800486c:	d308      	bcc.n	8004880 <pb_dec_bytes+0x3e>
    bdest->size = (pb_size_t)size;
 800486e:	4621      	mov	r1, r4
    return pb_read(stream, bdest->bytes, size);
 8004870:	4630      	mov	r0, r6
    bdest->size = (pb_size_t)size;
 8004872:	f821 2b02 	strh.w	r2, [r1], #2
}
 8004876:	b002      	add	sp, #8
 8004878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 800487c:	f7ff bf70 	b.w	8004760 <pb_read>
}
 8004880:	2000      	movs	r0, #0
 8004882:	b002      	add	sp, #8
 8004884:	bd70      	pop	{r4, r5, r6, pc}

08004886 <pb_decode_varint>:
{
 8004886:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 800488a:	2500      	movs	r5, #0
{
 800488c:	4606      	mov	r6, r0
 800488e:	460f      	mov	r7, r1
    uint64_t result = 0;
 8004890:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8004892:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8004894:	f10d 0107 	add.w	r1, sp, #7
 8004898:	4630      	mov	r0, r6
 800489a:	f7ff fe9c 	bl	80045d6 <pb_readbyte>
 800489e:	b1c0      	cbz	r0, 80048d2 <pb_decode_varint+0x4c>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80048a0:	f89d c007 	ldrb.w	ip, [sp, #7]
 80048a4:	f1a4 0320 	sub.w	r3, r4, #32
 80048a8:	f00c 027f 	and.w	r2, ip, #127	@ 0x7f
 80048ac:	f1c4 0120 	rsb	r1, r4, #32
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	fa22 f101 	lsr.w	r1, r2, r1
 80048b8:	430b      	orrs	r3, r1
 80048ba:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 80048bc:	f01c 0f80 	tst.w	ip, #128	@ 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80048c0:	ea45 0502 	orr.w	r5, r5, r2
 80048c4:	ea43 0808 	orr.w	r8, r3, r8
        bitpos = (uint_fast8_t)(bitpos + 7);
 80048c8:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 80048cc:	d104      	bne.n	80048d8 <pb_decode_varint+0x52>
    *dest = result;
 80048ce:	e9c7 5800 	strd	r5, r8, [r7]
}
 80048d2:	b002      	add	sp, #8
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bitpos >= 64)
 80048d8:	2c46      	cmp	r4, #70	@ 0x46
 80048da:	d1db      	bne.n	8004894 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 80048dc:	2000      	movs	r0, #0
 80048de:	e7f8      	b.n	80048d2 <pb_decode_varint+0x4c>

080048e0 <pb_dec_uvarint>:
{
 80048e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e2:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 80048e4:	4669      	mov	r1, sp
{
 80048e6:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 80048e8:	f7ff ffcd 	bl	8004886 <pb_decode_varint>
 80048ec:	b170      	cbz	r0, 800490c <pb_dec_uvarint+0x2c>
    if (field->data_size == sizeof(pb_uint64_t))
 80048ee:	892b      	ldrh	r3, [r5, #8]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d10d      	bne.n	8004910 <pb_dec_uvarint+0x30>
        clamped = *(pb_uint64_t*)dest = value;
 80048f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80048f8:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 80048fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004900:	4291      	cmp	r1, r2
 8004902:	bf08      	it	eq
 8004904:	4298      	cmpeq	r0, r3
 8004906:	bf0c      	ite	eq
 8004908:	2001      	moveq	r0, #1
 800490a:	2000      	movne	r0, #0
}
 800490c:	b003      	add	sp, #12
 800490e:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(uint32_t))
 8004910:	2b04      	cmp	r3, #4
 8004912:	d103      	bne.n	800491c <pb_dec_uvarint+0x3c>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8004914:	9b00      	ldr	r3, [sp, #0]
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	2200      	movs	r2, #0
 800491a:	e7ef      	b.n	80048fc <pb_dec_uvarint+0x1c>
    else if (field->data_size == sizeof(uint_least16_t))
 800491c:	2b02      	cmp	r3, #2
 800491e:	d103      	bne.n	8004928 <pb_dec_uvarint+0x48>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8004920:	9b00      	ldr	r3, [sp, #0]
 8004922:	8023      	strh	r3, [r4, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	e7f7      	b.n	8004918 <pb_dec_uvarint+0x38>
    else if (field->data_size == sizeof(uint_least8_t))
 8004928:	2b01      	cmp	r3, #1
 800492a:	d104      	bne.n	8004936 <pb_dec_uvarint+0x56>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800492c:	9b00      	ldr	r3, [sp, #0]
 800492e:	7023      	strb	r3, [r4, #0]
 8004930:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8004934:	e7f0      	b.n	8004918 <pb_dec_uvarint+0x38>
        return false;
 8004936:	2000      	movs	r0, #0
 8004938:	e7e8      	b.n	800490c <pb_dec_uvarint+0x2c>

0800493a <pb_dec_varint>:
{
 800493a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800493c:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 800493e:	4669      	mov	r1, sp
{
 8004940:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004942:	f7ff ffa0 	bl	8004886 <pb_decode_varint>
 8004946:	b130      	cbz	r0, 8004956 <pb_dec_varint+0x1c>
    if (field->data_size == sizeof(pb_int64_t))
 8004948:	892b      	ldrh	r3, [r5, #8]
 800494a:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 800494c:	e9dd 1200 	ldrd	r1, r2, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8004950:	d103      	bne.n	800495a <pb_dec_varint+0x20>
        clamped = *(pb_int64_t*)dest = svalue;
 8004952:	e9c4 1200 	strd	r1, r2, [r4]
}
 8004956:	b003      	add	sp, #12
 8004958:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 800495a:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 800495c:	ea4f 70e1 	mov.w	r0, r1, asr #31
    else if (field->data_size == sizeof(int32_t))
 8004960:	d109      	bne.n	8004976 <pb_dec_varint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8004962:	6021      	str	r1, [r4, #0]
 8004964:	460b      	mov	r3, r1
 8004966:	4602      	mov	r2, r0
    if (clamped != svalue)
 8004968:	4282      	cmp	r2, r0
 800496a:	bf08      	it	eq
 800496c:	428b      	cmpeq	r3, r1
 800496e:	bf0c      	ite	eq
 8004970:	2001      	moveq	r0, #1
 8004972:	2000      	movne	r0, #0
 8004974:	e7ef      	b.n	8004956 <pb_dec_varint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8004976:	2b02      	cmp	r3, #2
 8004978:	d103      	bne.n	8004982 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800497a:	b20b      	sxth	r3, r1
 800497c:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800497e:	17da      	asrs	r2, r3, #31
 8004980:	e7f2      	b.n	8004968 <pb_dec_varint+0x2e>
    else if (field->data_size == sizeof(int_least8_t))
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004986:	b24b      	sxtb	r3, r1
 8004988:	7023      	strb	r3, [r4, #0]
 800498a:	e7f8      	b.n	800497e <pb_dec_varint+0x44>
        return false;
 800498c:	2000      	movs	r0, #0
 800498e:	e7e2      	b.n	8004956 <pb_dec_varint+0x1c>

08004990 <pb_decode_tag>:
{
 8004990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004992:	461d      	mov	r5, r3
    *eof = false;
 8004994:	2300      	movs	r3, #0
 8004996:	702b      	strb	r3, [r5, #0]
{
 8004998:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 800499a:	700b      	strb	r3, [r1, #0]
{
 800499c:	4617      	mov	r7, r2
    *tag = 0;
 800499e:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80049a0:	a901      	add	r1, sp, #4
 80049a2:	462a      	mov	r2, r5
 80049a4:	f7ff fe26 	bl	80045f4 <pb_decode_varint32_eof>
 80049a8:	b118      	cbz	r0, 80049b2 <pb_decode_tag+0x22>
    if (temp == 0)
 80049aa:	9c01      	ldr	r4, [sp, #4]
 80049ac:	b924      	cbnz	r4, 80049b8 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 80049ae:	2301      	movs	r3, #1
 80049b0:	702b      	strb	r3, [r5, #0]
        return false;
 80049b2:	2000      	movs	r0, #0
}
 80049b4:	b003      	add	sp, #12
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 80049b8:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 80049ba:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 80049be:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80049c0:	7034      	strb	r4, [r6, #0]
    return true;
 80049c2:	e7f7      	b.n	80049b4 <pb_decode_tag+0x24>

080049c4 <pb_skip_field>:
{
 80049c4:	b513      	push	{r0, r1, r4, lr}
 80049c6:	4604      	mov	r4, r0
    switch (wire_type)
 80049c8:	2905      	cmp	r1, #5
 80049ca:	d821      	bhi.n	8004a10 <pb_skip_field+0x4c>
 80049cc:	e8df f001 	tbb	[pc, r1]
 80049d0:	20170f03 	.word	0x20170f03
 80049d4:	1e20      	.short	0x1e20
        if (!pb_read(stream, &byte, 1))
 80049d6:	2201      	movs	r2, #1
 80049d8:	a901      	add	r1, sp, #4
 80049da:	4620      	mov	r0, r4
 80049dc:	f7ff fec0 	bl	8004760 <pb_read>
 80049e0:	b118      	cbz	r0, 80049ea <pb_skip_field+0x26>
    } while (byte & 0x80);
 80049e2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	dbf5      	blt.n	80049d6 <pb_skip_field+0x12>
}
 80049ea:	b002      	add	sp, #8
 80049ec:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80049ee:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80049f0:	2100      	movs	r1, #0
 80049f2:	4620      	mov	r0, r4
}
 80049f4:	b002      	add	sp, #8
 80049f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80049fa:	f7ff beb1 	b.w	8004760 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 80049fe:	a901      	add	r1, sp, #4
 8004a00:	f7ff feda 	bl	80047b8 <pb_decode_varint32>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d0f0      	beq.n	80049ea <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8004a08:	9a01      	ldr	r2, [sp, #4]
 8004a0a:	e7f1      	b.n	80049f0 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	e7ef      	b.n	80049f0 <pb_skip_field+0x2c>
    switch (wire_type)
 8004a10:	2000      	movs	r0, #0
 8004a12:	e7ea      	b.n	80049ea <pb_skip_field+0x26>

08004a14 <pb_make_string_substream>:
{
 8004a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a16:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004a18:	a901      	add	r1, sp, #4
{
 8004a1a:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8004a1c:	f7ff fecc 	bl	80047b8 <pb_decode_varint32>
 8004a20:	4603      	mov	r3, r0
 8004a22:	b918      	cbnz	r0, 8004a2c <pb_make_string_substream+0x18>
        return false;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	b003      	add	sp, #12
 8004a2a:	bd30      	pop	{r4, r5, pc}
    *substream = *stream;
 8004a2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (substream->bytes_left < size)
 8004a34:	9901      	ldr	r1, [sp, #4]
 8004a36:	428a      	cmp	r2, r1
 8004a38:	d3f4      	bcc.n	8004a24 <pb_make_string_substream+0x10>
    substream->bytes_left = size;
 8004a3a:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8004a3c:	68a2      	ldr	r2, [r4, #8]
 8004a3e:	1a52      	subs	r2, r2, r1
 8004a40:	60a2      	str	r2, [r4, #8]
    return true;
 8004a42:	e7f0      	b.n	8004a26 <pb_make_string_substream+0x12>

08004a44 <pb_close_string_substream>:
    if (substream->bytes_left) {
 8004a44:	688a      	ldr	r2, [r1, #8]
{
 8004a46:	b538      	push	{r3, r4, r5, lr}
 8004a48:	4605      	mov	r5, r0
 8004a4a:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8004a4c:	b91a      	cbnz	r2, 8004a56 <pb_close_string_substream+0x12>
    stream->state = substream->state;
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	606b      	str	r3, [r5, #4]
    return true;
 8004a52:	2001      	movs	r0, #1
}
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8004a56:	2100      	movs	r1, #0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7ff fe81 	bl	8004760 <pb_read>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d1f5      	bne.n	8004a4e <pb_close_string_substream+0xa>
 8004a62:	e7f7      	b.n	8004a54 <pb_close_string_substream+0x10>

08004a64 <decode_field>:
{
 8004a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a68:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8004a6a:	6851      	ldr	r1, [r2, #4]
{
 8004a6c:	4614      	mov	r4, r2
    switch (PB_ATYPE(iter->pos->type))
 8004a6e:	788a      	ldrb	r2, [r1, #2]
 8004a70:	f012 0cc0 	ands.w	ip, r2, #192	@ 0xc0
{
 8004a74:	b087      	sub	sp, #28
 8004a76:	4606      	mov	r6, r0
    switch (PB_ATYPE(iter->pos->type))
 8004a78:	d004      	beq.n	8004a84 <decode_field+0x20>
 8004a7a:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 8004a7e:	d06d      	beq.n	8004b5c <decode_field+0xf8>
            return false;
 8004a80:	2500      	movs	r5, #0
 8004a82:	e04b      	b.n	8004b1c <decode_field+0xb8>
    func = PB_DECODERS[PB_LTYPE(type)];
 8004a84:	f002 050f 	and.w	r5, r2, #15
 8004a88:	4f60      	ldr	r7, [pc, #384]	@ (8004c0c <decode_field+0x1a8>)
 8004a8a:	f002 0230 	and.w	r2, r2, #48	@ 0x30
    switch (PB_HTYPE(type))
 8004a8e:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8004a90:	f857 7025 	ldr.w	r7, [r7, r5, lsl #2]
    switch (PB_HTYPE(type))
 8004a94:	d025      	beq.n	8004ae2 <decode_field+0x7e>
 8004a96:	d80a      	bhi.n	8004aae <decode_field+0x4a>
 8004a98:	b1ea      	cbz	r2, 8004ad6 <decode_field+0x72>
 8004a9a:	2a10      	cmp	r2, #16
 8004a9c:	d1f0      	bne.n	8004a80 <decode_field+0x1c>
            if (iter->pSize != iter->pData)
 8004a9e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004aa2:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8004aa4:	bf1c      	itt	ne
 8004aa6:	2001      	movne	r0, #1
 8004aa8:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8004aaa:	4630      	mov	r0, r6
 8004aac:	e014      	b.n	8004ad8 <decode_field+0x74>
    switch (PB_HTYPE(type))
 8004aae:	2a30      	cmp	r2, #48	@ 0x30
 8004ab0:	d1e6      	bne.n	8004a80 <decode_field+0x1c>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004ab2:	6963      	ldr	r3, [r4, #20]
 8004ab4:	880a      	ldrh	r2, [r1, #0]
 8004ab6:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004ab8:	2d07      	cmp	r5, #7
 8004aba:	d109      	bne.n	8004ad0 <decode_field+0x6c>
                memset(iter->pData, 0, iter->pos->data_size);
 8004abc:	890a      	ldrh	r2, [r1, #8]
 8004abe:	6920      	ldr	r0, [r4, #16]
 8004ac0:	4661      	mov	r1, ip
 8004ac2:	f004 fa7a 	bl	8008fba <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	6921      	ldr	r1, [r4, #16]
 8004aca:	68d8      	ldr	r0, [r3, #12]
 8004acc:	f7ff fe36 	bl	800473c <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	6861      	ldr	r1, [r4, #4]
 8004ad4:	e7e9      	b.n	8004aaa <decode_field+0x46>
            return func(stream, iter->pos, iter->pData);
 8004ad6:	6922      	ldr	r2, [r4, #16]
            return func(stream, iter->pos, iter->pData);
 8004ad8:	463b      	mov	r3, r7
}
 8004ada:	b007      	add	sp, #28
 8004adc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8004ae0:	4718      	bx	r3
            if (wire_type == PB_WT_STRING
 8004ae2:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8004ae4:	f8d4 8014 	ldr.w	r8, [r4, #20]
            if (wire_type == PB_WT_STRING
 8004ae8:	d12b      	bne.n	8004b42 <decode_field+0xde>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8004aea:	2d04      	cmp	r5, #4
 8004aec:	d829      	bhi.n	8004b42 <decode_field+0xde>
                if (!pb_make_string_substream(stream, &substream))
 8004aee:	a903      	add	r1, sp, #12
 8004af0:	f7ff ff90 	bl	8004a14 <pb_make_string_substream>
 8004af4:	4605      	mov	r5, r0
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d0c2      	beq.n	8004a80 <decode_field+0x1c>
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8004afa:	9b05      	ldr	r3, [sp, #20]
 8004afc:	b12b      	cbz	r3, 8004b0a <decode_field+0xa6>
 8004afe:	6861      	ldr	r1, [r4, #4]
 8004b00:	f8b8 3000 	ldrh.w	r3, [r8]
 8004b04:	894a      	ldrh	r2, [r1, #10]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d80c      	bhi.n	8004b24 <decode_field+0xc0>
                if (substream.bytes_left != 0)
 8004b0a:	9b05      	ldr	r3, [sp, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1b7      	bne.n	8004a80 <decode_field+0x1c>
                if (!pb_close_string_substream(stream, &substream))
 8004b10:	a903      	add	r1, sp, #12
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff ff96 	bl	8004a44 <pb_close_string_substream>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d0b1      	beq.n	8004a80 <decode_field+0x1c>
}
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	b007      	add	sp, #28
 8004b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004b24:	8908      	ldrh	r0, [r1, #8]
 8004b26:	6922      	ldr	r2, [r4, #16]
                    if (!func(&substream, iter->pos, pItem))
 8004b28:	fb03 2200 	mla	r2, r3, r0, r2
 8004b2c:	a803      	add	r0, sp, #12
 8004b2e:	47b8      	blx	r7
 8004b30:	b128      	cbz	r0, 8004b3e <decode_field+0xda>
                    (*size)++;
 8004b32:	f8b8 3000 	ldrh.w	r3, [r8]
 8004b36:	3301      	adds	r3, #1
 8004b38:	f8a8 3000 	strh.w	r3, [r8]
 8004b3c:	e7dd      	b.n	8004afa <decode_field+0x96>
                        status = false;
 8004b3e:	4605      	mov	r5, r0
 8004b40:	e7e3      	b.n	8004b0a <decode_field+0xa6>
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004b42:	f8b8 3000 	ldrh.w	r3, [r8]
 8004b46:	6922      	ldr	r2, [r4, #16]
 8004b48:	8908      	ldrh	r0, [r1, #8]
                if ((*size)++ >= iter->pos->array_size)
 8004b4a:	1c5c      	adds	r4, r3, #1
 8004b4c:	f8a8 4000 	strh.w	r4, [r8]
 8004b50:	894c      	ldrh	r4, [r1, #10]
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d994      	bls.n	8004a80 <decode_field+0x1c>
                return func(stream, iter->pos, pItem);
 8004b56:	fb03 2200 	mla	r2, r3, r0, r2
 8004b5a:	e7a6      	b.n	8004aaa <decode_field+0x46>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8004b5c:	6927      	ldr	r7, [r4, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8004b5e:	b10f      	cbz	r7, 8004b64 <decode_field+0x100>
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b932      	cbnz	r2, 8004b72 <decode_field+0x10e>
        return pb_skip_field(stream, wire_type);
 8004b64:	4619      	mov	r1, r3
 8004b66:	4630      	mov	r0, r6
}
 8004b68:	b007      	add	sp, #28
 8004b6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8004b6e:	f7ff bf29 	b.w	80049c4 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8004b72:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8004b74:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8004b78:	d116      	bne.n	8004ba8 <decode_field+0x144>
        if (!pb_make_string_substream(stream, &substream))
 8004b7a:	a903      	add	r1, sp, #12
 8004b7c:	f7ff ff4a 	bl	8004a14 <pb_make_string_substream>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f43f af7d 	beq.w	8004a80 <decode_field+0x1c>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	a803      	add	r0, sp, #12
 8004b8e:	4798      	blx	r3
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f43f af75 	beq.w	8004a80 <decode_field+0x1c>
        } while (substream.bytes_left);
 8004b96:	9b05      	ldr	r3, [sp, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f4      	bne.n	8004b86 <decode_field+0x122>
        if (!pb_close_string_substream(stream, &substream))
 8004b9c:	a903      	add	r1, sp, #12
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7ff ff50 	bl	8004a44 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	e7b9      	b.n	8004b1c <decode_field+0xb8>
    switch (wire_type)
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d021      	beq.n	8004bf0 <decode_field+0x18c>
 8004bac:	2b05      	cmp	r3, #5
 8004bae:	d027      	beq.n	8004c00 <decode_field+0x19c>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f47f af65 	bne.w	8004a80 <decode_field+0x1c>
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	46e9      	mov	r9, sp
                (*size)++;
 8004bba:	3501      	adds	r5, #1
                if (*size > max_size) return false;
 8004bbc:	2d0b      	cmp	r5, #11
 8004bbe:	f43f af5f 	beq.w	8004a80 <decode_field+0x1c>
                if (!pb_read(stream, buf, 1)) return false;
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff fdca 	bl	8004760 <pb_read>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f43f af57 	beq.w	8004a80 <decode_field+0x1c>
            } while (*buf++ & 0x80);
 8004bd2:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dbef      	blt.n	8004bba <decode_field+0x156>
        substream = pb_istream_from_buffer(buffer, size);
 8004bda:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <decode_field+0x1ac>)
 8004bdc:	9303      	str	r3, [sp, #12]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004bde:	6861      	ldr	r1, [r4, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
        substream = pb_istream_from_buffer(buffer, size);
 8004be2:	f8cd d010 	str.w	sp, [sp, #16]
 8004be6:	9505      	str	r5, [sp, #20]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004be8:	4642      	mov	r2, r8
 8004bea:	a803      	add	r0, sp, #12
 8004bec:	4798      	blx	r3
 8004bee:	e7d9      	b.n	8004ba4 <decode_field+0x140>
            return pb_read(stream, buf, 8);
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	4669      	mov	r1, sp
 8004bf4:	f7ff fdb4 	bl	8004760 <pb_read>
            *size = 8;
 8004bf8:	2508      	movs	r5, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d1ed      	bne.n	8004bda <decode_field+0x176>
 8004bfe:	e73f      	b.n	8004a80 <decode_field+0x1c>
            return pb_read(stream, buf, 4);
 8004c00:	2204      	movs	r2, #4
 8004c02:	4669      	mov	r1, sp
 8004c04:	f7ff fdac 	bl	8004760 <pb_read>
            *size = 4;
 8004c08:	2504      	movs	r5, #4
            return pb_read(stream, buf, 4);
 8004c0a:	e7f6      	b.n	8004bfa <decode_field+0x196>
 8004c0c:	080675c0 	.word	0x080675c0
 8004c10:	080045b9 	.word	0x080045b9

08004c14 <pb_decode_noinit>:
{
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	b091      	sub	sp, #68	@ 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8004c1a:	2400      	movs	r4, #0
{
 8004c1c:	4605      	mov	r5, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8004c1e:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8004c20:	e9cd 4402 	strd	r4, r4, [sp, #8]
    pb_size_t fixed_count_size = 0;
 8004c24:	f8ad 4002 	strh.w	r4, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8004c28:	f7ff fc62 	bl	80044f0 <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 8004c2c:	46a0      	mov	r8, r4
    while (stream->bytes_left)
 8004c2e:	68ab      	ldr	r3, [r5, #8]
 8004c30:	bb93      	cbnz	r3, 8004c98 <pb_decode_noinit+0x84>
    if (fixed_count_field != NULL &&
 8004c32:	b124      	cbz	r4, 8004c3e <pb_decode_noinit+0x2a>
 8004c34:	8962      	ldrh	r2, [r4, #10]
 8004c36:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d138      	bne.n	8004cb0 <pb_decode_noinit+0x9c>
            last_type = iter.pos->type;
 8004c3e:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        } while (pb_field_iter_next(&iter));
 8004c42:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8004c44:	789d      	ldrb	r5, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8004c46:	f7ff fc64 	bl	8004512 <pb_field_iter_next>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d1f7      	bne.n	8004c3e <pb_decode_noinit+0x2a>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8004c4e:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8004c52:	d103      	bne.n	8004c5c <pb_decode_noinit+0x48>
 8004c54:	9b05      	ldr	r3, [sp, #20]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b103      	cbz	r3, 8004c5c <pb_decode_noinit+0x48>
            req_field_count++;
 8004c5a:	3401      	adds	r4, #1
        if (req_field_count > 0)
 8004c5c:	2c00      	cmp	r4, #0
 8004c5e:	f000 80c6 	beq.w	8004dee <pb_decode_noinit+0x1da>
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004c62:	2c40      	cmp	r4, #64	@ 0x40
 8004c64:	bf28      	it	cs
 8004c66:	2440      	movcs	r4, #64	@ 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8004c68:	0963      	lsrs	r3, r4, #5
 8004c6a:	a902      	add	r1, sp, #8
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f040 80b6 	bne.w	8004de0 <pb_decode_noinit+0x1cc>
            if ((req_field_count & 31) != 0)
 8004c74:	f014 041f 	ands.w	r4, r4, #31
 8004c78:	f000 80b9 	beq.w	8004dee <pb_decode_noinit+0x1da>
                if (fields_seen[req_field_count >> 5] !=
 8004c7c:	aa10      	add	r2, sp, #64	@ 0x40
 8004c7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8004c82:	f1c4 0420 	rsb	r4, r4, #32
                if (fields_seen[req_field_count >> 5] !=
 8004c86:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	40e0      	lsrs	r0, r4
                if (fields_seen[req_field_count >> 5] !=
 8004c90:	1ac3      	subs	r3, r0, r3
 8004c92:	4258      	negs	r0, r3
 8004c94:	4158      	adcs	r0, r3
 8004c96:	e00c      	b.n	8004cb2 <pb_decode_noinit+0x9e>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004c98:	f10d 0301 	add.w	r3, sp, #1
 8004c9c:	aa01      	add	r2, sp, #4
 8004c9e:	4669      	mov	r1, sp
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f7ff fe75 	bl	8004990 <pb_decode_tag>
 8004ca6:	b938      	cbnz	r0, 8004cb8 <pb_decode_noinit+0xa4>
            if (eof)
 8004ca8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1c0      	bne.n	8004c32 <pb_decode_noinit+0x1e>
            for (i = 0; i < (req_field_count >> 5); i++)
 8004cb0:	2000      	movs	r0, #0
}
 8004cb2:	b011      	add	sp, #68	@ 0x44
 8004cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8004cb8:	9f01      	ldr	r7, [sp, #4]
 8004cba:	a804      	add	r0, sp, #16
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	f7ff fc64 	bl	800458a <pb_field_iter_find>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d159      	bne.n	8004d7a <pb_decode_noinit+0x166>
            if (tag >= extension_range_start)
 8004cc6:	4547      	cmp	r7, r8
 8004cc8:	d34e      	bcc.n	8004d68 <pb_decode_noinit+0x154>
    const pb_field_t *start = iter->pos;
 8004cca:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8004ccc:	9a05      	ldr	r2, [sp, #20]
 8004cce:	7893      	ldrb	r3, [r2, #2]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	f000 808c 	beq.w	8004df2 <pb_decode_noinit+0x1de>
        (void)pb_field_iter_next(iter);
 8004cda:	a804      	add	r0, sp, #16
 8004cdc:	f7ff fc19 	bl	8004512 <pb_field_iter_next>
    } while (iter->pos != start);
 8004ce0:	9b05      	ldr	r3, [sp, #20]
 8004ce2:	429e      	cmp	r6, r3
 8004ce4:	d1f2      	bne.n	8004ccc <pb_decode_noinit+0xb8>
                    extension_range_start = (uint32_t)-1;
 8004ce6:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8004cea:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8004cec:	f89d a000 	ldrb.w	sl, [sp]
                if (tag >= extension_range_start)
 8004cf0:	d33a      	bcc.n	8004d68 <pb_decode_noinit+0x154>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8004cf2:	9b08      	ldr	r3, [sp, #32]
                    size_t pos = stream->bytes_left;
 8004cf4:	f8d5 9008 	ldr.w	r9, [r5, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8004cf8:	681e      	ldr	r6, [r3, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004cfa:	68ab      	ldr	r3, [r5, #8]
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	d030      	beq.n	8004d62 <pb_decode_noinit+0x14e>
 8004d00:	4599      	cmp	r9, r3
 8004d02:	d194      	bne.n	8004c2e <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	f8d3 b000 	ldr.w	fp, [r3]
 8004d0a:	f1bb 0f00 	cmp.w	fp, #0
 8004d0e:	d008      	beq.n	8004d22 <pb_decode_noinit+0x10e>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8004d10:	4653      	mov	r3, sl
 8004d12:	463a      	mov	r2, r7
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47d8      	blx	fp
        if (!status)
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0c8      	beq.n	8004cb0 <pb_decode_noinit+0x9c>
        extension = extension->next;
 8004d1e:	68b6      	ldr	r6, [r6, #8]
 8004d20:	e7eb      	b.n	8004cfa <pb_decode_noinit+0xe6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004d22:	f8d3 b008 	ldr.w	fp, [r3, #8]
    if (field->tag != tag)
 8004d26:	f8bb 3000 	ldrh.w	r3, [fp]
 8004d2a:	429f      	cmp	r7, r3
 8004d2c:	d1f7      	bne.n	8004d1e <pb_decode_noinit+0x10a>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004d2e:	6872      	ldr	r2, [r6, #4]
 8004d30:	4659      	mov	r1, fp
 8004d32:	a80a      	add	r0, sp, #40	@ 0x28
 8004d34:	f7ff fbdc 	bl	80044f0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8004d38:	6873      	ldr	r3, [r6, #4]
 8004d3a:	930e      	str	r3, [sp, #56]	@ 0x38
    iter->pSize = &extension->found;
 8004d3c:	f106 030c 	add.w	r3, r6, #12
 8004d40:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004d42:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8004d46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d4a:	2b80      	cmp	r3, #128	@ 0x80
        iter->pData = &extension->dest;
 8004d4c:	bf04      	itt	eq
 8004d4e:	1d33      	addeq	r3, r6, #4
 8004d50:	930e      	streq	r3, [sp, #56]	@ 0x38
    extension->found = true;
 8004d52:	2301      	movs	r3, #1
 8004d54:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8004d56:	aa0a      	add	r2, sp, #40	@ 0x28
 8004d58:	4651      	mov	r1, sl
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f7ff fe82 	bl	8004a64 <decode_field>
 8004d60:	e7db      	b.n	8004d1a <pb_decode_noinit+0x106>
                    if (pos != stream->bytes_left)
 8004d62:	4599      	cmp	r9, r3
 8004d64:	f47f af63 	bne.w	8004c2e <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8004d68:	f89d 1000 	ldrb.w	r1, [sp]
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f7ff fe29 	bl	80049c4 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f47f af5b 	bne.w	8004c2e <pb_decode_noinit+0x1a>
 8004d78:	e79a      	b.n	8004cb0 <pb_decode_noinit+0x9c>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8004d7a:	9a05      	ldr	r2, [sp, #20]
 8004d7c:	7893      	ldrb	r3, [r2, #2]
 8004d7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d119      	bne.n	8004dba <pb_decode_noinit+0x1a6>
            && iter.pSize == iter.pData)
 8004d86:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8004d8a:	4299      	cmp	r1, r3
 8004d8c:	d10e      	bne.n	8004dac <pb_decode_noinit+0x198>
            if (fixed_count_field != iter.pos) {
 8004d8e:	42a2      	cmp	r2, r4
 8004d90:	d008      	beq.n	8004da4 <pb_decode_noinit+0x190>
                if (fixed_count_field != NULL &&
 8004d92:	b124      	cbz	r4, 8004d9e <pb_decode_noinit+0x18a>
 8004d94:	8961      	ldrh	r1, [r4, #10]
 8004d96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004d9a:	4299      	cmp	r1, r3
 8004d9c:	d188      	bne.n	8004cb0 <pb_decode_noinit+0x9c>
                fixed_count_size = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8004da4:	f10d 0302 	add.w	r3, sp, #2
 8004da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004daa:	4614      	mov	r4, r2
        if (!decode_field(stream, wire_type, &iter))
 8004dac:	f89d 1000 	ldrb.w	r1, [sp]
 8004db0:	aa04      	add	r2, sp, #16
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7ff fe56 	bl	8004a64 <decode_field>
 8004db8:	e7db      	b.n	8004d72 <pb_decode_noinit+0x15e>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f6      	bne.n	8004dac <pb_decode_noinit+0x198>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8004dbe:	9a06      	ldr	r2, [sp, #24]
 8004dc0:	2a3f      	cmp	r2, #63	@ 0x3f
 8004dc2:	d8f3      	bhi.n	8004dac <pb_decode_noinit+0x198>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004dc4:	0951      	lsrs	r1, r2, #5
 8004dc6:	ab10      	add	r3, sp, #64	@ 0x40
 8004dc8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004dcc:	f002 021f 	and.w	r2, r2, #31
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004dd4:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f841 3c38 	str.w	r3, [r1, #-56]
 8004dde:	e7e5      	b.n	8004dac <pb_decode_noinit+0x198>
                if (fields_seen[i] != allbits)
 8004de0:	f851 0b04 	ldr.w	r0, [r1], #4
 8004de4:	3001      	adds	r0, #1
 8004de6:	f47f af63 	bne.w	8004cb0 <pb_decode_noinit+0x9c>
            for (i = 0; i < (req_field_count >> 5); i++)
 8004dea:	3201      	adds	r2, #1
 8004dec:	e73f      	b.n	8004c6e <pb_decode_noinit+0x5a>
    return true;
 8004dee:	2001      	movs	r0, #1
 8004df0:	e75f      	b.n	8004cb2 <pb_decode_noinit+0x9e>
                    extension_range_start = iter.pos->tag;
 8004df2:	f8b2 8000 	ldrh.w	r8, [r2]
 8004df6:	e778      	b.n	8004cea <pb_decode_noinit+0xd6>

08004df8 <pb_decode>:
{
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	4615      	mov	r5, r2
    pb_message_set_to_defaults(fields, dest_struct);
 8004e00:	4611      	mov	r1, r2
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff fc9a 	bl	800473c <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4630      	mov	r0, r6
}
 8004e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8004e12:	f7ff beff 	b.w	8004c14 <pb_decode_noinit>

08004e16 <pb_dec_submessage>:
{
 8004e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e18:	b085      	sub	sp, #20
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8004e1a:	68cf      	ldr	r7, [r1, #12]
{
 8004e1c:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8004e1e:	a901      	add	r1, sp, #4
{
 8004e20:	4606      	mov	r6, r0
 8004e22:	4615      	mov	r5, r2
    if (!pb_make_string_substream(stream, &substream))
 8004e24:	f7ff fdf6 	bl	8004a14 <pb_make_string_substream>
 8004e28:	b918      	cbnz	r0, 8004e32 <pb_dec_submessage+0x1c>
        return false;
 8004e2a:	2400      	movs	r4, #0
}
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	b005      	add	sp, #20
 8004e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (field->ptr == NULL)
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f8      	beq.n	8004e2a <pb_dec_submessage+0x14>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8004e38:	78a3      	ldrb	r3, [r4, #2]
 8004e3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e3e:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 8004e40:	462a      	mov	r2, r5
 8004e42:	4639      	mov	r1, r7
 8004e44:	a801      	add	r0, sp, #4
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8004e46:	d109      	bne.n	8004e5c <pb_dec_submessage+0x46>
        status = pb_decode(&substream, submsg_fields, dest);
 8004e48:	f7ff ffd6 	bl	8004df8 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8004e4c:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8004e4e:	a901      	add	r1, sp, #4
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff fdf7 	bl	8004a44 <pb_close_string_substream>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d1e8      	bne.n	8004e2c <pb_dec_submessage+0x16>
 8004e5a:	e7e6      	b.n	8004e2a <pb_dec_submessage+0x14>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8004e5c:	f7ff feda 	bl	8004c14 <pb_decode_noinit>
 8004e60:	e7f4      	b.n	8004e4c <pb_dec_submessage+0x36>

08004e62 <pb_decode_delimited>:
{
 8004e62:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004e64:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8004e66:	a901      	add	r1, sp, #4
{
 8004e68:	4605      	mov	r5, r0
 8004e6a:	4616      	mov	r6, r2
    if (!pb_make_string_substream(stream, &substream))
 8004e6c:	f7ff fdd2 	bl	8004a14 <pb_make_string_substream>
 8004e70:	b918      	cbnz	r0, 8004e7a <pb_decode_delimited+0x18>
        return false;
 8004e72:	2400      	movs	r4, #0
}
 8004e74:	4620      	mov	r0, r4
 8004e76:	b004      	add	sp, #16
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
    status = pb_decode(&substream, fields, dest_struct);
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	a801      	add	r0, sp, #4
 8004e80:	f7ff ffba 	bl	8004df8 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8004e84:	a901      	add	r1, sp, #4
    status = pb_decode(&substream, fields, dest_struct);
 8004e86:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f7ff fddb 	bl	8004a44 <pb_close_string_substream>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d1f0      	bne.n	8004e74 <pb_decode_delimited+0x12>
 8004e92:	e7ee      	b.n	8004e72 <pb_decode_delimited+0x10>

08004e94 <pb_decode_svarint>:
{
 8004e94:	b513      	push	{r0, r1, r4, lr}
 8004e96:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8004e98:	4669      	mov	r1, sp
 8004e9a:	f7ff fcf4 	bl	8004886 <pb_decode_varint>
 8004e9e:	b160      	cbz	r0, 8004eba <pb_decode_svarint+0x26>
    if (value & 1)
 8004ea0:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8004ea4:	084a      	lsrs	r2, r1, #1
 8004ea6:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 8004eaa:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8004eac:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8004eb0:	bf44      	itt	mi
 8004eb2:	43d2      	mvnmi	r2, r2
 8004eb4:	43db      	mvnmi	r3, r3
 8004eb6:	e9c4 2300 	strd	r2, r3, [r4]
}
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd10      	pop	{r4, pc}

08004ebe <pb_dec_svarint>:
{
 8004ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ec0:	460d      	mov	r5, r1
    if (!pb_decode_svarint(stream, &value))
 8004ec2:	4669      	mov	r1, sp
{
 8004ec4:	4614      	mov	r4, r2
    if (!pb_decode_svarint(stream, &value))
 8004ec6:	f7ff ffe5 	bl	8004e94 <pb_decode_svarint>
 8004eca:	b170      	cbz	r0, 8004eea <pb_dec_svarint+0x2c>
    if (field->data_size == sizeof(pb_int64_t))
 8004ecc:	892b      	ldrh	r3, [r5, #8]
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d10d      	bne.n	8004eee <pb_dec_svarint+0x30>
        clamped = *(pb_int64_t*)dest = value;
 8004ed2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004ed6:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8004eda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ede:	4291      	cmp	r1, r2
 8004ee0:	bf08      	it	eq
 8004ee2:	4298      	cmpeq	r0, r3
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2001      	moveq	r0, #1
 8004ee8:	2000      	movne	r0, #0
}
 8004eea:	b003      	add	sp, #12
 8004eec:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d103      	bne.n	8004efa <pb_dec_svarint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)value;
 8004ef2:	9b00      	ldr	r3, [sp, #0]
 8004ef4:	6023      	str	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8004ef6:	17da      	asrs	r2, r3, #31
 8004ef8:	e7ef      	b.n	8004eda <pb_dec_svarint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d103      	bne.n	8004f06 <pb_dec_svarint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8004efe:	f9bd 3000 	ldrsh.w	r3, [sp]
 8004f02:	8023      	strh	r3, [r4, #0]
 8004f04:	e7f7      	b.n	8004ef6 <pb_dec_svarint+0x38>
    else if (field->data_size == sizeof(int_least8_t))
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d103      	bne.n	8004f12 <pb_dec_svarint+0x54>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8004f0a:	f99d 3000 	ldrsb.w	r3, [sp]
 8004f0e:	7023      	strb	r3, [r4, #0]
 8004f10:	e7f1      	b.n	8004ef6 <pb_dec_svarint+0x38>
        return false;
 8004f12:	2000      	movs	r0, #0
 8004f14:	e7e9      	b.n	8004eea <pb_dec_svarint+0x2c>

08004f16 <pb_decode_fixed32>:
{
 8004f16:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 8004f18:	2204      	movs	r2, #4
{
 8004f1a:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8004f1c:	eb0d 0102 	add.w	r1, sp, r2
 8004f20:	f7ff fc1e 	bl	8004760 <pb_read>
 8004f24:	b108      	cbz	r0, 8004f2a <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8004f26:	9b01      	ldr	r3, [sp, #4]
 8004f28:	6023      	str	r3, [r4, #0]
}
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd10      	pop	{r4, pc}

08004f2e <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8004f2e:	4611      	mov	r1, r2
 8004f30:	f7ff bff1 	b.w	8004f16 <pb_decode_fixed32>

08004f34 <pb_decode_fixed64>:
{
 8004f34:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8004f36:	2208      	movs	r2, #8
{
 8004f38:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8004f3a:	4669      	mov	r1, sp
 8004f3c:	f7ff fc10 	bl	8004760 <pb_read>
 8004f40:	b118      	cbz	r0, 8004f4a <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8004f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f46:	e9c4 2300 	strd	r2, r3, [r4]
}
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd10      	pop	{r4, pc}

08004f4e <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8004f4e:	4611      	mov	r1, r2
 8004f50:	f7ff bff0 	b.w	8004f34 <pb_decode_fixed64>

08004f54 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8004f54:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 8004f56:	7883      	ldrb	r3, [r0, #2]
{
 8004f58:	4604      	mov	r4, r0
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8004f5a:	f013 0030 	ands.w	r0, r3, #48	@ 0x30
{
 8004f5e:	b086      	sub	sp, #24
 8004f60:	460a      	mov	r2, r1
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8004f62:	d010      	beq.n	8004f86 <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8004f64:	2820      	cmp	r0, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8004f66:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8004f6a:	d104      	bne.n	8004f76 <pb_check_proto3_default_value+0x22>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8004f6c:	5a50      	ldrh	r0, [r2, r1]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8004f6e:	fab0 f080 	clz	r0, r0
 8004f72:	0940      	lsrs	r0, r0, #5
 8004f74:	e007      	b.n	8004f86 <pb_check_proto3_default_value+0x32>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004f76:	2830      	cmp	r0, #48	@ 0x30
 8004f78:	d0f8      	beq.n	8004f6c <pb_check_proto3_default_value+0x18>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8004f7a:	2810      	cmp	r0, #16
 8004f7c:	d105      	bne.n	8004f8a <pb_check_proto3_default_value+0x36>
 8004f7e:	b121      	cbz	r1, 8004f8a <pb_check_proto3_default_value+0x36>
        return *(const bool*)pSize == false;
 8004f80:	5c50      	ldrb	r0, [r2, r1]
 8004f82:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8004f86:	b006      	add	sp, #24
 8004f88:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f8c:	d905      	bls.n	8004f9a <pb_check_proto3_default_value+0x46>
 8004f8e:	8923      	ldrh	r3, [r4, #8]
 8004f90:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d121      	bne.n	8004fda <pb_check_proto3_default_value+0x86>
	    return true;
 8004f96:	2001      	movs	r0, #1
 8004f98:	e7f5      	b.n	8004f86 <pb_check_proto3_default_value+0x32>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d101      	bne.n	8004fa6 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8004fa2:	8810      	ldrh	r0, [r2, #0]
 8004fa4:	e7e3      	b.n	8004f6e <pb_check_proto3_default_value+0x1a>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d101      	bne.n	8004fae <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 8004faa:	7810      	ldrb	r0, [r2, #0]
 8004fac:	e7df      	b.n	8004f6e <pb_check_proto3_default_value+0x1a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8004fae:	2b09      	cmp	r3, #9
 8004fb0:	d101      	bne.n	8004fb6 <pb_check_proto3_default_value+0x62>
            return field->data_size == 0;
 8004fb2:	8920      	ldrh	r0, [r4, #8]
 8004fb4:	e7db      	b.n	8004f6e <pb_check_proto3_default_value+0x1a>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004fb6:	2b07      	cmp	r3, #7
 8004fb8:	d1e9      	bne.n	8004f8e <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8004fba:	68e1      	ldr	r1, [r4, #12]
 8004fbc:	4668      	mov	r0, sp
 8004fbe:	f7ff fa97 	bl	80044f0 <pb_field_iter_begin>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0e7      	beq.n	8004f96 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8004fc6:	9904      	ldr	r1, [sp, #16]
 8004fc8:	9801      	ldr	r0, [sp, #4]
 8004fca:	f7ff ffc3 	bl	8004f54 <pb_check_proto3_default_value>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d0d9      	beq.n	8004f86 <pb_check_proto3_default_value+0x32>
                } while (pb_field_iter_next(&iter));
 8004fd2:	4668      	mov	r0, sp
 8004fd4:	f7ff fa9d 	bl	8004512 <pb_field_iter_next>
 8004fd8:	e7f3      	b.n	8004fc2 <pb_check_proto3_default_value+0x6e>
	        if (p[i] != 0)
 8004fda:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d0d7      	beq.n	8004f92 <pb_check_proto3_default_value+0x3e>
        return false;
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e7cf      	b.n	8004f86 <pb_check_proto3_default_value+0x32>

08004fe6 <pb_write>:
{
 8004fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8004fe8:	6806      	ldr	r6, [r0, #0]
        if (stream->bytes_written + count > stream->max_size)
 8004fea:	68c3      	ldr	r3, [r0, #12]
{
 8004fec:	4604      	mov	r4, r0
 8004fee:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8004ff0:	b926      	cbnz	r6, 8004ffc <pb_write+0x16>
    stream->bytes_written += count;
 8004ff2:	68e3      	ldr	r3, [r4, #12]
 8004ff4:	442b      	add	r3, r5
 8004ff6:	60e3      	str	r3, [r4, #12]
    return true;
 8004ff8:	2001      	movs	r0, #1
}
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (stream->bytes_written + count > stream->max_size)
 8004ffc:	6887      	ldr	r7, [r0, #8]
 8004ffe:	4413      	add	r3, r2
 8005000:	429f      	cmp	r7, r3
 8005002:	d201      	bcs.n	8005008 <pb_write+0x22>
            PB_RETURN_ERROR(stream, "stream full");
 8005004:	2000      	movs	r0, #0
 8005006:	e7f8      	b.n	8004ffa <pb_write+0x14>
        if (!stream->callback(stream, buf, count))
 8005008:	47b0      	blx	r6
 800500a:	2800      	cmp	r0, #0
 800500c:	d1f1      	bne.n	8004ff2 <pb_write+0xc>
 800500e:	e7f9      	b.n	8005004 <pb_write+0x1e>

08005010 <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005010:	b5f0      	push	{r4, r5, r6, r7, lr}
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8005012:	2a80      	cmp	r2, #128	@ 0x80
{
 8005014:	4611      	mov	r1, r2
    if (value <= 0x7F)
 8005016:	f173 0200 	sbcs.w	r2, r3, #0
{
 800501a:	b085      	sub	sp, #20
 800501c:	4604      	mov	r4, r0
    if (value <= 0x7F)
 800501e:	d207      	bcs.n	8005030 <pb_encode_varint+0x20>
    {
        pb_byte_t v = (pb_byte_t)value;
 8005020:	f88d 1004 	strb.w	r1, [sp, #4]
        return pb_write(stream, &v, 1);
 8005024:	2201      	movs	r2, #1
 8005026:	a901      	add	r1, sp, #4
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005028:	f7ff ffdd 	bl	8004fe6 <pb_write>
}
 800502c:	b005      	add	sp, #20
 800502e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005030:	ad01      	add	r5, sp, #4
    size_t i = 0;
 8005032:	2200      	movs	r2, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005034:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 8005038:	b2ce      	uxtb	r6, r1
        value >>= 7;
 800503a:	09c9      	lsrs	r1, r1, #7
 800503c:	ea41 6143 	orr.w	r1, r1, r3, lsl #25
 8005040:	09db      	lsrs	r3, r3, #7
    while (value)
 8005042:	ea51 0703 	orrs.w	r7, r1, r3
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005046:	f805 0b01 	strb.w	r0, [r5], #1
        i++;
 800504a:	4610      	mov	r0, r2
 800504c:	f102 0201 	add.w	r2, r2, #1
    while (value)
 8005050:	d1f0      	bne.n	8005034 <pb_encode_varint+0x24>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005052:	f100 0310 	add.w	r3, r0, #16
 8005056:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
 8005058:	a901      	add	r1, sp, #4
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800505a:	f803 6c0c 	strb.w	r6, [r3, #-12]
    return pb_write(stream, buffer, i);
 800505e:	4620      	mov	r0, r4
 8005060:	e7e2      	b.n	8005028 <pb_encode_varint+0x18>

08005062 <pb_enc_uvarint>:
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
}

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8005062:	4613      	mov	r3, r2
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005064:	890a      	ldrh	r2, [r1, #8]
 8005066:	2a01      	cmp	r2, #1
 8005068:	d103      	bne.n	8005072 <pb_enc_uvarint+0x10>
        value = *(const uint_least8_t*)src;
 800506a:	781a      	ldrb	r2, [r3, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
 800506c:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 800506e:	f7ff bfcf 	b.w	8005010 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005072:	2a02      	cmp	r2, #2
 8005074:	d101      	bne.n	800507a <pb_enc_uvarint+0x18>
        value = *(const uint_least16_t*)src;
 8005076:	881a      	ldrh	r2, [r3, #0]
 8005078:	e7f8      	b.n	800506c <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 800507a:	2a04      	cmp	r2, #4
 800507c:	d101      	bne.n	8005082 <pb_enc_uvarint+0x20>
        value = *(const uint32_t*)src;
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	e7f4      	b.n	800506c <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005082:	2a08      	cmp	r2, #8
 8005084:	d102      	bne.n	800508c <pb_enc_uvarint+0x2a>
        value = *(const pb_uint64_t*)src;
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	e7f0      	b.n	800506e <pb_enc_uvarint+0xc>
}
 800508c:	2000      	movs	r0, #0
 800508e:	4770      	bx	lr

08005090 <pb_enc_varint>:
{
 8005090:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8005092:	890a      	ldrh	r2, [r1, #8]
 8005094:	2a01      	cmp	r2, #1
 8005096:	d104      	bne.n	80050a2 <pb_enc_varint+0x12>
        value = *(const int_least8_t*)src;
 8005098:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int_least16_t*)src;
 800509c:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800509e:	f7ff bfb7 	b.w	8005010 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 80050a2:	2a02      	cmp	r2, #2
 80050a4:	d102      	bne.n	80050ac <pb_enc_varint+0x1c>
        value = *(const int_least16_t*)src;
 80050a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050aa:	e7f7      	b.n	800509c <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(int32_t))
 80050ac:	2a04      	cmp	r2, #4
 80050ae:	d101      	bne.n	80050b4 <pb_enc_varint+0x24>
        value = *(const int32_t*)src;
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	e7f3      	b.n	800509c <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 80050b4:	2a08      	cmp	r2, #8
 80050b6:	d102      	bne.n	80050be <pb_enc_varint+0x2e>
        value = *(const pb_int64_t*)src;
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	e7ef      	b.n	800509e <pb_enc_varint+0xe>
}
 80050be:	2000      	movs	r0, #0
 80050c0:	4770      	bx	lr

080050c2 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 80050c2:	1892      	adds	r2, r2, r2
 80050c4:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 80050c8:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 80050cc:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 80050d0:	f7ff bf9e 	b.w	8005010 <pb_encode_varint>

080050d4 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80050d4:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 80050d6:	890a      	ldrh	r2, [r1, #8]
 80050d8:	2a01      	cmp	r2, #1
 80050da:	d104      	bne.n	80050e6 <pb_enc_svarint+0x12>
        value = *(const int_least8_t*)src;
 80050dc:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
 80050e0:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 80050e2:	f7ff bfee 	b.w	80050c2 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 80050e6:	2a02      	cmp	r2, #2
 80050e8:	d102      	bne.n	80050f0 <pb_enc_svarint+0x1c>
        value = *(const int_least16_t*)src;
 80050ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050ee:	e7f7      	b.n	80050e0 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(int32_t))
 80050f0:	2a04      	cmp	r2, #4
 80050f2:	d101      	bne.n	80050f8 <pb_enc_svarint+0x24>
        value = *(const int32_t*)src;
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	e7f3      	b.n	80050e0 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 80050f8:	2a08      	cmp	r2, #8
 80050fa:	d102      	bne.n	8005102 <pb_enc_svarint+0x2e>
        value = *(const pb_int64_t*)src;
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	e7ef      	b.n	80050e2 <pb_enc_svarint+0xe>
}
 8005102:	2000      	movs	r0, #0
 8005104:	4770      	bx	lr

08005106 <pb_encode_fixed32>:
{
 8005106:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8005108:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800510a:	680b      	ldr	r3, [r1, #0]
 800510c:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 800510e:	eb0d 0102 	add.w	r1, sp, r2
 8005112:	f7ff ff68 	bl	8004fe6 <pb_write>
}
 8005116:	b003      	add	sp, #12
 8005118:	f85d fb04 	ldr.w	pc, [sp], #4

0800511c <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800511c:	4611      	mov	r1, r2
 800511e:	f7ff bff2 	b.w	8005106 <pb_encode_fixed32>

08005122 <pb_encode_fixed64>:
{
 8005122:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005124:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005128:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800512a:	0a1a      	lsrs	r2, r3, #8
 800512c:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005130:	0c1a      	lsrs	r2, r3, #16
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8005132:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005136:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800513a:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 800513c:	2208      	movs	r2, #8
 800513e:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005140:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8005144:	f7ff ff4f 	bl	8004fe6 <pb_write>
}
 8005148:	b003      	add	sp, #12
 800514a:	f85d fb04 	ldr.w	pc, [sp], #4

0800514e <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 800514e:	4611      	mov	r1, r2
 8005150:	f7ff bfe7 	b.w	8005122 <pb_encode_fixed64>

08005154 <pb_encode_tag>:
{
 8005154:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005156:	0f5b      	lsrs	r3, r3, #29
 8005158:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 800515c:	f7ff bf58 	b.w	8005010 <pb_encode_varint>

08005160 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8005160:	788a      	ldrb	r2, [r1, #2]
 8005162:	f002 020f 	and.w	r2, r2, #15
{
 8005166:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 8005168:	2a09      	cmp	r2, #9
 800516a:	d810      	bhi.n	800518e <pb_encode_tag_for_field+0x2e>
 800516c:	e8df f002 	tbb	[pc, r2]
 8005170:	0d050505 	.word	0x0d050505
 8005174:	0b0b0b09 	.word	0x0b0b0b09
 8005178:	0b0f      	.short	0x0b0f
            wiretype = PB_WT_VARINT;
 800517a:	2100      	movs	r1, #0
    return pb_encode_tag(stream, wiretype, field->tag);
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	f7ff bfe9 	b.w	8005154 <pb_encode_tag>
            wiretype = PB_WT_64BIT;
 8005182:	2101      	movs	r1, #1
            break;
 8005184:	e7fa      	b.n	800517c <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_STRING;
 8005186:	2102      	movs	r1, #2
            break;
 8005188:	e7f8      	b.n	800517c <pb_encode_tag_for_field+0x1c>
    switch (PB_LTYPE(field->type))
 800518a:	2105      	movs	r1, #5
 800518c:	e7f6      	b.n	800517c <pb_encode_tag_for_field+0x1c>
}
 800518e:	2000      	movs	r0, #0
 8005190:	4770      	bx	lr
	...

08005194 <encode_field>:
{
 8005194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	4615      	mov	r5, r2
    switch (PB_ATYPE(field->type))
 800519a:	788a      	ldrb	r2, [r1, #2]
 800519c:	f002 03c0 	and.w	r3, r2, #192	@ 0xc0
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
{
 80051a2:	b086      	sub	sp, #24
 80051a4:	4606      	mov	r6, r0
 80051a6:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 80051a8:	f000 80ce 	beq.w	8005348 <encode_field+0x1b4>
 80051ac:	0653      	lsls	r3, r2, #25
 80051ae:	d41b      	bmi.n	80051e8 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80051b0:	4b68      	ldr	r3, [pc, #416]	@ (8005354 <encode_field+0x1c0>)
 80051b2:	f002 010f 	and.w	r1, r2, #15
 80051b6:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
    if (field->size_offset)
 80051ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80051be:	b1bb      	cbz	r3, 80051f0 <encode_field+0x5c>
        pSize = (const char*)pData + field->size_offset;
 80051c0:	442b      	add	r3, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80051c2:	78a2      	ldrb	r2, [r4, #2]
 80051c4:	f002 00c0 	and.w	r0, r2, #192	@ 0xc0
 80051c8:	2880      	cmp	r0, #128	@ 0x80
 80051ca:	d105      	bne.n	80051d8 <encode_field+0x44>
        pData = *(const void* const*)pData;
 80051cc:	682d      	ldr	r5, [r5, #0]
        implicit_has = (pData != NULL);
 80051ce:	1e29      	subs	r1, r5, #0
 80051d0:	bf18      	it	ne
 80051d2:	2101      	movne	r1, #1
 80051d4:	f88d 1007 	strb.w	r1, [sp, #7]
    switch (PB_HTYPE(field->type))
 80051d8:	f002 0130 	and.w	r1, r2, #48	@ 0x30
 80051dc:	2920      	cmp	r1, #32
 80051de:	d035      	beq.n	800524c <encode_field+0xb8>
 80051e0:	d818      	bhi.n	8005214 <encode_field+0x80>
 80051e2:	b1f1      	cbz	r1, 8005222 <encode_field+0x8e>
 80051e4:	2910      	cmp	r1, #16
 80051e6:	d02c      	beq.n	8005242 <encode_field+0xae>
    switch (PB_ATYPE(field->type))
 80051e8:	2000      	movs	r0, #0
}
 80051ea:	b006      	add	sp, #24
 80051ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 80051f0:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80051f4:	2a10      	cmp	r2, #16
 80051f6:	d10b      	bne.n	8005210 <encode_field+0x7c>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 80051f8:	4629      	mov	r1, r5
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff feaa 	bl	8004f54 <pb_check_proto3_default_value>
 8005200:	f080 0001 	eor.w	r0, r0, #1
 8005204:	b2c0      	uxtb	r0, r0
        implicit_has = true;
 8005206:	f88d 0007 	strb.w	r0, [sp, #7]
    const void *pSize = &implicit_has;
 800520a:	f10d 0307 	add.w	r3, sp, #7
 800520e:	e7d8      	b.n	80051c2 <encode_field+0x2e>
 8005210:	2001      	movs	r0, #1
 8005212:	e7f8      	b.n	8005206 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 8005214:	2930      	cmp	r1, #48	@ 0x30
 8005216:	d1e7      	bne.n	80051e8 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	8823      	ldrh	r3, [r4, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d113      	bne.n	8005248 <encode_field+0xb4>
 8005220:	e001      	b.n	8005226 <encode_field+0x92>
            if (!pData)
 8005222:	2d00      	cmp	r5, #0
 8005224:	d0e0      	beq.n	80051e8 <encode_field+0x54>
                if (!pb_encode_tag_for_field(stream, field))
 8005226:	4621      	mov	r1, r4
 8005228:	4630      	mov	r0, r6
 800522a:	f7ff ff99 	bl	8005160 <pb_encode_tag_for_field>
 800522e:	2800      	cmp	r0, #0
 8005230:	d0da      	beq.n	80051e8 <encode_field+0x54>
                if (!func(stream, field, pData))
 8005232:	462a      	mov	r2, r5
 8005234:	4621      	mov	r1, r4
 8005236:	4630      	mov	r0, r6
 8005238:	4643      	mov	r3, r8
}
 800523a:	b006      	add	sp, #24
 800523c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (!callback->funcs.encode(stream, field, arg))
 8005240:	4718      	bx	r3
            if (*(const bool*)pSize)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ee      	bne.n	8005226 <encode_field+0x92>
    return true;
 8005248:	2001      	movs	r0, #1
 800524a:	e7ce      	b.n	80051ea <encode_field+0x56>
            if (field->size_offset != 0) {
 800524c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8005250:	b349      	cbz	r1, 80052a6 <encode_field+0x112>
                count = *(const pb_size_t*)pSize;
 8005252:	881f      	ldrh	r7, [r3, #0]
    if (count == 0)
 8005254:	2f00      	cmp	r7, #0
 8005256:	d0f7      	beq.n	8005248 <encode_field+0xb4>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8005258:	2880      	cmp	r0, #128	@ 0x80
 800525a:	d002      	beq.n	8005262 <encode_field+0xce>
 800525c:	8963      	ldrh	r3, [r4, #10]
 800525e:	429f      	cmp	r7, r3
 8005260:	d8c2      	bhi.n	80051e8 <encode_field+0x54>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8005262:	f002 020f 	and.w	r2, r2, #15
 8005266:	2a04      	cmp	r2, #4
 8005268:	d84b      	bhi.n	8005302 <encode_field+0x16e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800526a:	8822      	ldrh	r2, [r4, #0]
 800526c:	2102      	movs	r1, #2
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff ff70 	bl	8005154 <pb_encode_tag>
 8005274:	2800      	cmp	r0, #0
 8005276:	d0b7      	beq.n	80051e8 <encode_field+0x54>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8005278:	78a3      	ldrb	r3, [r4, #2]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	2b03      	cmp	r3, #3
 8005280:	d113      	bne.n	80052aa <encode_field+0x116>
            size = 4 * count;
 8005282:	ea4f 0987 	mov.w	r9, r7, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005286:	464a      	mov	r2, r9
 8005288:	2300      	movs	r3, #0
 800528a:	4630      	mov	r0, r6
 800528c:	f7ff fec0 	bl	8005010 <pb_encode_varint>
 8005290:	2800      	cmp	r0, #0
 8005292:	d0a9      	beq.n	80051e8 <encode_field+0x54>
        if (stream->callback == NULL)
 8005294:	6831      	ldr	r1, [r6, #0]
 8005296:	bb21      	cbnz	r1, 80052e2 <encode_field+0x14e>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005298:	464a      	mov	r2, r9
 800529a:	4630      	mov	r0, r6
}
 800529c:	b006      	add	sp, #24
 800529e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80052a2:	f7ff bea0 	b.w	8004fe6 <pb_write>
                count = field->array_size;
 80052a6:	8967      	ldrh	r7, [r4, #10]
 80052a8:	e7d4      	b.n	8005254 <encode_field+0xc0>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d102      	bne.n	80052b4 <encode_field+0x120>
            size = 8 * count;
 80052ae:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80052b2:	e7e8      	b.n	8005286 <encode_field+0xf2>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80052b4:	2210      	movs	r2, #16
 80052b6:	2100      	movs	r1, #0
 80052b8:	a802      	add	r0, sp, #8
 80052ba:	f003 fe7e 	bl	8008fba <memset>
 80052be:	46aa      	mov	sl, r5
            for (i = 0; i < count; i++)
 80052c0:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 80052c4:	4652      	mov	r2, sl
 80052c6:	4621      	mov	r1, r4
 80052c8:	a802      	add	r0, sp, #8
 80052ca:	47c0      	blx	r8
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d08b      	beq.n	80051e8 <encode_field+0x54>
                p = (const char*)p + field->data_size;
 80052d0:	8923      	ldrh	r3, [r4, #8]
            for (i = 0; i < count; i++)
 80052d2:	f109 0901 	add.w	r9, r9, #1
 80052d6:	454f      	cmp	r7, r9
                p = (const char*)p + field->data_size;
 80052d8:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 80052da:	d8f3      	bhi.n	80052c4 <encode_field+0x130>
            size = sizestream.bytes_written;
 80052dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052e0:	e7d1      	b.n	8005286 <encode_field+0xf2>
        for (i = 0; i < count; i++)
 80052e2:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 80052e6:	462a      	mov	r2, r5
 80052e8:	4621      	mov	r1, r4
 80052ea:	4630      	mov	r0, r6
 80052ec:	47c0      	blx	r8
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f af7a 	beq.w	80051e8 <encode_field+0x54>
            p = (const char*)p + field->data_size;
 80052f4:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 80052f6:	f109 0901 	add.w	r9, r9, #1
 80052fa:	454f      	cmp	r7, r9
            p = (const char*)p + field->data_size;
 80052fc:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 80052fe:	d8f2      	bhi.n	80052e6 <encode_field+0x152>
 8005300:	e7a2      	b.n	8005248 <encode_field+0xb4>
        for (i = 0; i < count; i++)
 8005302:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8005306:	4621      	mov	r1, r4
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff ff29 	bl	8005160 <pb_encode_tag_for_field>
 800530e:	2800      	cmp	r0, #0
 8005310:	f43f af6a 	beq.w	80051e8 <encode_field+0x54>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005314:	78a3      	ldrb	r3, [r4, #2]
 8005316:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800531a:	2a80      	cmp	r2, #128	@ 0x80
 800531c:	d112      	bne.n	8005344 <encode_field+0x1b0>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005324:	2b01      	cmp	r3, #1
 8005326:	d80d      	bhi.n	8005344 <encode_field+0x1b0>
                if (!func(stream, field, *(const void* const*)p))
 8005328:	682a      	ldr	r2, [r5, #0]
                if (!func(stream, field, p))
 800532a:	4621      	mov	r1, r4
 800532c:	4630      	mov	r0, r6
 800532e:	47c0      	blx	r8
 8005330:	2800      	cmp	r0, #0
 8005332:	f43f af59 	beq.w	80051e8 <encode_field+0x54>
            p = (const char*)p + field->data_size;
 8005336:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8005338:	f109 0901 	add.w	r9, r9, #1
 800533c:	454f      	cmp	r7, r9
            p = (const char*)p + field->data_size;
 800533e:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 8005340:	d8e1      	bhi.n	8005306 <encode_field+0x172>
 8005342:	e781      	b.n	8005248 <encode_field+0xb4>
                if (!func(stream, field, p))
 8005344:	462a      	mov	r2, r5
 8005346:	e7f0      	b.n	800532a <encode_field+0x196>
    if (callback->funcs.encode != NULL)
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f43f af7c 	beq.w	8005248 <encode_field+0xb4>
        if (!callback->funcs.encode(stream, field, arg))
 8005350:	1d2a      	adds	r2, r5, #4
 8005352:	e772      	b.n	800523a <encode_field+0xa6>
 8005354:	080675e8 	.word	0x080675e8

08005358 <pb_encode>:
{
 8005358:	b530      	push	{r4, r5, lr}
 800535a:	b087      	sub	sp, #28
 800535c:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800535e:	4668      	mov	r0, sp
 8005360:	f7ff f8c6 	bl	80044f0 <pb_field_iter_begin>
 8005364:	b910      	cbnz	r0, 800536c <pb_encode+0x14>
        return true; /* Empty message type */
 8005366:	2001      	movs	r0, #1
}
 8005368:	b007      	add	sp, #28
 800536a:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800536c:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800536e:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8005370:	788b      	ldrb	r3, [r1, #2]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	2b08      	cmp	r3, #8
 8005378:	d11c      	bne.n	80053b4 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800537a:	6814      	ldr	r4, [r2, #0]
    while (extension)
 800537c:	b91c      	cbnz	r4, 8005386 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800537e:	4668      	mov	r0, sp
 8005380:	f7ff f8c7 	bl	8004512 <pb_field_iter_next>
 8005384:	e7ee      	b.n	8005364 <pb_encode+0xc>
        if (extension->type->encode)
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	b12a      	cbz	r2, 8005398 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	4790      	blx	r2
        if (!status)
 8005392:	b968      	cbnz	r0, 80053b0 <pb_encode+0x58>
                return false;
 8005394:	2000      	movs	r0, #0
 8005396:	e7e7      	b.n	8005368 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005398:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800539a:	788b      	ldrb	r3, [r1, #2]
 800539c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053a0:	2b80      	cmp	r3, #128	@ 0x80
        return encode_field(stream, field, extension->dest);
 80053a2:	bf14      	ite	ne
 80053a4:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 80053a6:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff fef3 	bl	8005194 <encode_field>
 80053ae:	e7f0      	b.n	8005392 <pb_encode+0x3a>
        extension = extension->next;
 80053b0:	68a4      	ldr	r4, [r4, #8]
 80053b2:	e7e3      	b.n	800537c <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 80053b4:	4628      	mov	r0, r5
 80053b6:	f7ff feed 	bl	8005194 <encode_field>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d1df      	bne.n	800537e <pb_encode+0x26>
 80053be:	e7e9      	b.n	8005394 <pb_encode+0x3c>

080053c0 <pb_encode_string>:
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80053c2:	2300      	movs	r3, #0
{
 80053c4:	4604      	mov	r4, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80053ca:	f7ff fe21 	bl	8005010 <pb_encode_varint>
 80053ce:	b130      	cbz	r0, 80053de <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
 80053d0:	4632      	mov	r2, r6
 80053d2:	4629      	mov	r1, r5
 80053d4:	4620      	mov	r0, r4
}
 80053d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
 80053da:	f7ff be04 	b.w	8004fe6 <pb_write>
}
 80053de:	bd70      	pop	{r4, r5, r6, pc}

080053e0 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80053e0:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 80053e2:	890a      	ldrh	r2, [r1, #8]
 80053e4:	4619      	mov	r1, r3
 80053e6:	f7ff bfeb 	b.w	80053c0 <pb_encode_string>

080053ea <pb_enc_string>:
{
 80053ea:	b410      	push	{r4}
    size_t max_size = field->data_size;
 80053ec:	890b      	ldrh	r3, [r1, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80053ee:	7889      	ldrb	r1, [r1, #2]
 80053f0:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
    size_t max_size = field->data_size;
 80053f4:	2980      	cmp	r1, #128	@ 0x80
 80053f6:	bf08      	it	eq
 80053f8:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 80053fc:	4611      	mov	r1, r2
 80053fe:	b122      	cbz	r2, 800540a <pb_enc_string+0x20>
    size_t size = 0;
 8005400:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8005402:	429a      	cmp	r2, r3
 8005404:	d001      	beq.n	800540a <pb_enc_string+0x20>
 8005406:	5c8c      	ldrb	r4, [r1, r2]
 8005408:	b91c      	cbnz	r4, 8005412 <pb_enc_string+0x28>
}
 800540a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800540e:	f7ff bfd7 	b.w	80053c0 <pb_encode_string>
            size++;
 8005412:	3201      	adds	r2, #1
            p++;
 8005414:	e7f5      	b.n	8005402 <pb_enc_string+0x18>

08005416 <pb_enc_bytes>:
{
 8005416:	b430      	push	{r4, r5}
 8005418:	460b      	mov	r3, r1
 800541a:	4604      	mov	r4, r0
    if (src == NULL)
 800541c:	4611      	mov	r1, r2
 800541e:	b912      	cbnz	r2, 8005426 <pb_enc_bytes+0x10>
}
 8005420:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005422:	f7ff bfcd 	b.w	80053c0 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005426:	7898      	ldrb	r0, [r3, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8005428:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800542a:	283f      	cmp	r0, #63	@ 0x3f
 800542c:	d803      	bhi.n	8005436 <pb_enc_bytes+0x20>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800542e:	891d      	ldrh	r5, [r3, #8]
 8005430:	1c90      	adds	r0, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005432:	42a8      	cmp	r0, r5
 8005434:	d802      	bhi.n	800543c <pb_enc_bytes+0x26>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005436:	3102      	adds	r1, #2
 8005438:	4620      	mov	r0, r4
 800543a:	e7f1      	b.n	8005420 <pb_enc_bytes+0xa>
}
 800543c:	2000      	movs	r0, #0
 800543e:	bc30      	pop	{r4, r5}
 8005440:	4770      	bx	lr

08005442 <pb_encode_submessage>:
{
 8005442:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005446:	460e      	mov	r6, r1
 8005448:	4617      	mov	r7, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800544a:	2100      	movs	r1, #0
 800544c:	2210      	movs	r2, #16
{
 800544e:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005450:	4668      	mov	r0, sp
 8005452:	f003 fdb2 	bl	8008fba <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8005456:	463a      	mov	r2, r7
 8005458:	4631      	mov	r1, r6
 800545a:	4668      	mov	r0, sp
 800545c:	f7ff ff7c 	bl	8005358 <pb_encode>
 8005460:	b918      	cbnz	r0, 800546a <pb_encode_submessage+0x28>
        return false;
 8005462:	2000      	movs	r0, #0
}
 8005464:	b004      	add	sp, #16
 8005466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size = substream.bytes_written;
 800546a:	9d03      	ldr	r5, [sp, #12]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800546c:	f04f 0800 	mov.w	r8, #0
 8005470:	462a      	mov	r2, r5
 8005472:	4643      	mov	r3, r8
 8005474:	4620      	mov	r0, r4
 8005476:	f7ff fdcb 	bl	8005010 <pb_encode_varint>
 800547a:	2800      	cmp	r0, #0
 800547c:	d0f1      	beq.n	8005462 <pb_encode_submessage+0x20>
    if (stream->callback == NULL)
 800547e:	6821      	ldr	r1, [r4, #0]
 8005480:	b921      	cbnz	r1, 800548c <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005482:	462a      	mov	r2, r5
 8005484:	4620      	mov	r0, r4
 8005486:	f7ff fdae 	bl	8004fe6 <pb_write>
 800548a:	e7eb      	b.n	8005464 <pb_encode_submessage+0x22>
    if (stream->bytes_written + size > stream->max_size)
 800548c:	68e2      	ldr	r2, [r4, #12]
 800548e:	68a3      	ldr	r3, [r4, #8]
 8005490:	442a      	add	r2, r5
 8005492:	429a      	cmp	r2, r3
 8005494:	d8e5      	bhi.n	8005462 <pb_encode_submessage+0x20>
    substream.state = stream->state;
 8005496:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 8005498:	9100      	str	r1, [sp, #0]
    status = pb_encode(&substream, fields, src_struct);
 800549a:	463a      	mov	r2, r7
 800549c:	4631      	mov	r1, r6
 800549e:	4668      	mov	r0, sp
    substream.max_size = size;
 80054a0:	e9cd 3501 	strd	r3, r5, [sp, #4]
    substream.bytes_written = 0;
 80054a4:	f8cd 800c 	str.w	r8, [sp, #12]
    status = pb_encode(&substream, fields, src_struct);
 80054a8:	f7ff ff56 	bl	8005358 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 80054ac:	9a03      	ldr	r2, [sp, #12]
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 80054b4:	42aa      	cmp	r2, r5
    stream->state = substream.state;
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	6063      	str	r3, [r4, #4]
    if (substream.bytes_written != size)
 80054ba:	d1d2      	bne.n	8005462 <pb_encode_submessage+0x20>
 80054bc:	e7d2      	b.n	8005464 <pb_encode_submessage+0x22>

080054be <pb_enc_submessage>:
    if (field->ptr == NULL)
 80054be:	68c9      	ldr	r1, [r1, #12]
 80054c0:	b109      	cbz	r1, 80054c6 <pb_enc_submessage+0x8>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 80054c2:	f7ff bfbe 	b.w	8005442 <pb_encode_submessage>
}
 80054c6:	4608      	mov	r0, r1
 80054c8:	4770      	bx	lr
	...

080054cc <stai_runtime_get_info>:
 80054cc:	b170      	cbz	r0, 80054ec <stai_runtime_get_info+0x20>
 80054ce:	b410      	push	{r4}
 80054d0:	4c08      	ldr	r4, [pc, #32]	@ (80054f4 <stai_runtime_get_info+0x28>)
 80054d2:	4684      	mov	ip, r0
 80054d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80054da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054de:	e88c 0003 	stmia.w	ip, {r0, r1}
 80054e2:	2300      	movs	r3, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	4b02      	ldr	r3, [pc, #8]	@ (80054f8 <stai_runtime_get_info+0x2c>)
 80054ee:	4618      	mov	r0, r3
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	08067b24 	.word	0x08067b24
 80054f8:	00020001 	.word	0x00020001

080054fc <ai_version_get>:
 80054fc:	0212      	lsls	r2, r2, #8
 80054fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005502:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005506:	4770      	bx	lr

08005508 <ai_platform_version_get>:
 8005508:	0e02      	lsrs	r2, r0, #24
 800550a:	2300      	movs	r3, #0
 800550c:	f362 0307 	bfi	r3, r2, #0, #8
 8005510:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8005514:	f362 230f 	bfi	r3, r2, #8, #8
 8005518:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800551c:	f360 4317 	bfi	r3, r0, #16, #8
 8005520:	b082      	sub	sp, #8
 8005522:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8005526:	b002      	add	sp, #8
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <get_tensor_size>:
 800552c:	b111      	cbz	r1, 8005534 <get_tensor_size+0x8>
 800552e:	6983      	ldr	r3, [r0, #24]
 8005530:	6858      	ldr	r0, [r3, #4]
 8005532:	4770      	bx	lr
 8005534:	6883      	ldr	r3, [r0, #8]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	d00a      	beq.n	8005550 <get_tensor_size+0x24>
 800553a:	68c1      	ldr	r1, [r0, #12]
 800553c:	2001      	movs	r0, #1
 800553e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005542:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005546:	4299      	cmp	r1, r3
 8005548:	fb02 f000 	mul.w	r0, r2, r0
 800554c:	d1f9      	bne.n	8005542 <get_tensor_size+0x16>
 800554e:	4770      	bx	lr
 8005550:	2001      	movs	r0, #1
 8005552:	4770      	bx	lr

08005554 <get_tensor_byte_size>:
 8005554:	b410      	push	{r4}
 8005556:	6983      	ldr	r3, [r0, #24]
 8005558:	68c4      	ldr	r4, [r0, #12]
 800555a:	6941      	ldr	r1, [r0, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	4a07      	ldr	r2, [pc, #28]	@ (8005580 <get_tensor_byte_size+0x2c>)
 8005562:	68c9      	ldr	r1, [r1, #12]
 8005564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005568:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800556c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005570:	fb01 f000 	mul.w	r0, r1, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	bf04      	itt	eq
 8005578:	3007      	addeq	r0, #7
 800557a:	08c0      	lsreq	r0, r0, #3
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	000400c0 	.word	0x000400c0

08005584 <ai_buffer_get_size>:
 8005584:	b378      	cbz	r0, 80055e6 <ai_buffer_get_size+0x62>
 8005586:	b410      	push	{r4}
 8005588:	6803      	ldr	r3, [r0, #0]
 800558a:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <ai_buffer_get_size+0x64>)
 800558c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8005590:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005594:	4293      	cmp	r3, r2
 8005596:	d01e      	beq.n	80055d6 <ai_buffer_get_size+0x52>
 8005598:	6984      	ldr	r4, [r0, #24]
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	7d03      	ldrb	r3, [r0, #20]
 800559e:	6941      	ldr	r1, [r0, #20]
 80055a0:	f1a3 0301 	sub.w	r3, r3, #1
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80055ae:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80055b2:	da0b      	bge.n	80055cc <ai_buffer_get_size+0x48>
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <ai_buffer_get_size+0x3a>
 80055b8:	2802      	cmp	r0, #2
 80055ba:	d007      	beq.n	80055cc <ai_buffer_get_size+0x48>
 80055bc:	2302      	movs	r3, #2
 80055be:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80055c2:	3301      	adds	r3, #1
 80055c4:	4298      	cmp	r0, r3
 80055c6:	fb01 f202 	mul.w	r2, r1, r2
 80055ca:	d1f3      	bne.n	80055b4 <ai_buffer_get_size+0x30>
 80055cc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80055d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d0de      	beq.n	8005598 <ai_buffer_get_size+0x14>
 80055da:	6984      	ldr	r4, [r0, #24]
 80055dc:	6862      	ldr	r2, [r4, #4]
 80055de:	321f      	adds	r2, #31
 80055e0:	f022 021f 	bic.w	r2, r2, #31
 80055e4:	e7da      	b.n	800559c <ai_buffer_get_size+0x18>
 80055e6:	4770      	bx	lr
 80055e8:	000400c0 	.word	0x000400c0

080055ec <ai_buffer_get_byte_size>:
 80055ec:	b128      	cbz	r0, 80055fa <ai_buffer_get_byte_size+0xe>
 80055ee:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80055f2:	fb01 f000 	mul.w	r0, r1, r0
 80055f6:	3007      	adds	r0, #7
 80055f8:	08c0      	lsrs	r0, r0, #3
 80055fa:	4770      	bx	lr

080055fc <ai_buffer_array_sane>:
 80055fc:	b138      	cbz	r0, 800560e <ai_buffer_array_sane+0x12>
 80055fe:	6843      	ldr	r3, [r0, #4]
 8005600:	b123      	cbz	r3, 800560c <ai_buffer_array_sane+0x10>
 8005602:	8840      	ldrh	r0, [r0, #2]
 8005604:	3800      	subs	r0, #0
 8005606:	bf18      	it	ne
 8005608:	2001      	movne	r0, #1
 800560a:	4770      	bx	lr
 800560c:	4618      	mov	r0, r3
 800560e:	4770      	bx	lr

08005610 <ai_buffer_array_item_set_address>:
 8005610:	b150      	cbz	r0, 8005628 <ai_buffer_array_item_set_address+0x18>
 8005612:	6843      	ldr	r3, [r0, #4]
 8005614:	b14b      	cbz	r3, 800562a <ai_buffer_array_item_set_address+0x1a>
 8005616:	8840      	ldrh	r0, [r0, #2]
 8005618:	b900      	cbnz	r0, 800561c <ai_buffer_array_item_set_address+0xc>
 800561a:	4770      	bx	lr
 800561c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005620:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005624:	2001      	movs	r0, #1
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	4770      	bx	lr
 800562a:	4618      	mov	r0, r3
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop

08005630 <_platform_observer_node_exec_cb>:
 8005630:	2a00      	cmp	r2, #0
 8005632:	d061      	beq.n	80056f8 <_platform_observer_node_exec_cb+0xc8>
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	6815      	ldr	r5, [r2, #0]
 8005638:	b084      	sub	sp, #16
 800563a:	4614      	mov	r4, r2
 800563c:	2d00      	cmp	r5, #0
 800563e:	d05d      	beq.n	80056fc <_platform_observer_node_exec_cb+0xcc>
 8005640:	8993      	ldrh	r3, [r2, #12]
 8005642:	89d2      	ldrh	r2, [r2, #14]
 8005644:	fab3 fc83 	clz	ip, r3
 8005648:	3a01      	subs	r2, #1
 800564a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800564e:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8005652:	429a      	cmp	r2, r3
 8005654:	460e      	mov	r6, r1
 8005656:	bf08      	it	eq
 8005658:	f44c 7c00 	orreq.w	ip, ip, #512	@ 0x200
 800565c:	b300      	cbz	r0, 80056a0 <_platform_observer_node_exec_cb+0x70>
 800565e:	2801      	cmp	r0, #1
 8005660:	d04f      	beq.n	8005702 <_platform_observer_node_exec_cb+0xd2>
 8005662:	2802      	cmp	r0, #2
 8005664:	d031      	beq.n	80056ca <_platform_observer_node_exec_cb+0x9a>
 8005666:	2803      	cmp	r0, #3
 8005668:	d117      	bne.n	800569a <_platform_observer_node_exec_cb+0x6a>
 800566a:	68a2      	ldr	r2, [r4, #8]
 800566c:	0752      	lsls	r2, r2, #29
 800566e:	d512      	bpl.n	8005696 <_platform_observer_node_exec_cb+0x66>
 8005670:	6922      	ldr	r2, [r4, #16]
 8005672:	f8ad 3000 	strh.w	r3, [sp]
 8005676:	8853      	ldrh	r3, [r2, #2]
 8005678:	f8ad 3004 	strh.w	r3, [sp, #4]
 800567c:	8813      	ldrh	r3, [r2, #0]
 800567e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005682:	6992      	ldr	r2, [r2, #24]
 8005684:	6860      	ldr	r0, [r4, #4]
 8005686:	2300      	movs	r3, #0
 8005688:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800568c:	f04c 0104 	orr.w	r1, ip, #4
 8005690:	466a      	mov	r2, sp
 8005692:	47a8      	blx	r5
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	2000      	movs	r0, #0
 800569c:	b004      	add	sp, #16
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	68a2      	ldr	r2, [r4, #8]
 80056a2:	07d2      	lsls	r2, r2, #31
 80056a4:	d5f7      	bpl.n	8005696 <_platform_observer_node_exec_cb+0x66>
 80056a6:	f8ad 3000 	strh.w	r3, [sp]
 80056aa:	8873      	ldrh	r3, [r6, #2]
 80056ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 80056b0:	8833      	ldrh	r3, [r6, #0]
 80056b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80056b6:	69b3      	ldr	r3, [r6, #24]
 80056b8:	9002      	str	r0, [sp, #8]
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	6860      	ldr	r0, [r4, #4]
 80056be:	466a      	mov	r2, sp
 80056c0:	f04c 0101 	orr.w	r1, ip, #1
 80056c4:	47a8      	blx	r5
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	e7e5      	b.n	8005696 <_platform_observer_node_exec_cb+0x66>
 80056ca:	68a2      	ldr	r2, [r4, #8]
 80056cc:	6121      	str	r1, [r4, #16]
 80056ce:	0791      	lsls	r1, r2, #30
 80056d0:	d5e3      	bpl.n	800569a <_platform_observer_node_exec_cb+0x6a>
 80056d2:	f8ad 3000 	strh.w	r3, [sp]
 80056d6:	8873      	ldrh	r3, [r6, #2]
 80056d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80056dc:	69b3      	ldr	r3, [r6, #24]
 80056de:	8832      	ldrh	r2, [r6, #0]
 80056e0:	6860      	ldr	r0, [r4, #4]
 80056e2:	f8ad 2002 	strh.w	r2, [sp, #2]
 80056e6:	2400      	movs	r4, #0
 80056e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80056ec:	f04c 0102 	orr.w	r1, ip, #2
 80056f0:	466a      	mov	r2, sp
 80056f2:	47a8      	blx	r5
 80056f4:	4620      	mov	r0, r4
 80056f6:	e7d1      	b.n	800569c <_platform_observer_node_exec_cb+0x6c>
 80056f8:	2001      	movs	r0, #1
 80056fa:	4770      	bx	lr
 80056fc:	2001      	movs	r0, #1
 80056fe:	b004      	add	sp, #16
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	2000      	movs	r0, #0
 8005704:	6121      	str	r1, [r4, #16]
 8005706:	81a0      	strh	r0, [r4, #12]
 8005708:	b004      	add	sp, #16
 800570a:	bd70      	pop	{r4, r5, r6, pc}

0800570c <ai_platform_get_weights_map>:
 800570c:	2a00      	cmp	r2, #0
 800570e:	d037      	beq.n	8005780 <ai_platform_get_weights_map+0x74>
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	b1a0      	cbz	r0, 8005740 <ai_platform_get_weights_map+0x34>
 8005716:	460f      	mov	r7, r1
 8005718:	b191      	cbz	r1, 8005740 <ai_platform_get_weights_map+0x34>
 800571a:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <ai_platform_get_weights_map+0xa4>)
 800571c:	6810      	ldr	r0, [r2, #0]
 800571e:	4298      	cmp	r0, r3
 8005720:	4615      	mov	r5, r2
 8005722:	d00f      	beq.n	8005744 <ai_platform_get_weights_map+0x38>
 8005724:	6855      	ldr	r5, [r2, #4]
 8005726:	b15d      	cbz	r5, 8005740 <ai_platform_get_weights_map+0x34>
 8005728:	682e      	ldr	r6, [r5, #0]
 800572a:	429e      	cmp	r6, r3
 800572c:	d02a      	beq.n	8005784 <ai_platform_get_weights_map+0x78>
 800572e:	f1a1 0001 	sub.w	r0, r1, #1
 8005732:	6025      	str	r5, [r4, #0]
 8005734:	fab0 f080 	clz	r0, r0
 8005738:	0940      	lsrs	r0, r0, #5
 800573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573c:	42a7      	cmp	r7, r4
 800573e:	d034      	beq.n	80057aa <ai_platform_get_weights_map+0x9e>
 8005740:	2000      	movs	r0, #0
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005744:	1d10      	adds	r0, r2, #4
 8005746:	f7ff ff59 	bl	80055fc <ai_buffer_array_sane>
 800574a:	2800      	cmp	r0, #0
 800574c:	d0f8      	beq.n	8005740 <ai_platform_get_weights_map+0x34>
 800574e:	88eb      	ldrh	r3, [r5, #6]
 8005750:	429f      	cmp	r7, r3
 8005752:	d1f5      	bne.n	8005740 <ai_platform_get_weights_map+0x34>
 8005754:	f04f 0c00 	mov.w	ip, #0
 8005758:	1f20      	subs	r0, r4, #4
 800575a:	46e6      	mov	lr, ip
 800575c:	68ab      	ldr	r3, [r5, #8]
 800575e:	4463      	add	r3, ip
 8005760:	f10c 0c1c 	add.w	ip, ip, #28
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	b12b      	cbz	r3, 8005774 <ai_platform_get_weights_map+0x68>
 8005768:	f10e 0e01 	add.w	lr, lr, #1
 800576c:	4577      	cmp	r7, lr
 800576e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005772:	d1f3      	bne.n	800575c <ai_platform_get_weights_map+0x50>
 8005774:	eba7 000e 	sub.w	r0, r7, lr
 8005778:	fab0 f080 	clz	r0, r0
 800577c:	0940      	lsrs	r0, r0, #5
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005780:	2000      	movs	r0, #0
 8005782:	4770      	bx	lr
 8005784:	1f20      	subs	r0, r4, #4
 8005786:	462a      	mov	r2, r5
 8005788:	2400      	movs	r4, #0
 800578a:	e000      	b.n	800578e <ai_platform_get_weights_map+0x82>
 800578c:	461c      	mov	r4, r3
 800578e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005792:	42b3      	cmp	r3, r6
 8005794:	d0d2      	beq.n	800573c <ai_platform_get_weights_map+0x30>
 8005796:	f840 3f04 	str.w	r3, [r0, #4]!
 800579a:	1c63      	adds	r3, r4, #1
 800579c:	429f      	cmp	r7, r3
 800579e:	d1f5      	bne.n	800578c <ai_platform_get_weights_map+0x80>
 80057a0:	3402      	adds	r4, #2
 80057a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80057a6:	42b3      	cmp	r3, r6
 80057a8:	d1ca      	bne.n	8005740 <ai_platform_get_weights_map+0x34>
 80057aa:	2001      	movs	r0, #1
 80057ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ae:	bf00      	nop
 80057b0:	a1facade 	.word	0xa1facade

080057b4 <ai_platform_get_activations_map>:
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	d038      	beq.n	800582a <ai_platform_get_activations_map+0x76>
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	b1a0      	cbz	r0, 80057e8 <ai_platform_get_activations_map+0x34>
 80057be:	460f      	mov	r7, r1
 80057c0:	b191      	cbz	r1, 80057e8 <ai_platform_get_activations_map+0x34>
 80057c2:	4b25      	ldr	r3, [pc, #148]	@ (8005858 <ai_platform_get_activations_map+0xa4>)
 80057c4:	6810      	ldr	r0, [r2, #0]
 80057c6:	4298      	cmp	r0, r3
 80057c8:	4615      	mov	r5, r2
 80057ca:	d00f      	beq.n	80057ec <ai_platform_get_activations_map+0x38>
 80057cc:	6a15      	ldr	r5, [r2, #32]
 80057ce:	b15d      	cbz	r5, 80057e8 <ai_platform_get_activations_map+0x34>
 80057d0:	682e      	ldr	r6, [r5, #0]
 80057d2:	429e      	cmp	r6, r3
 80057d4:	d02b      	beq.n	800582e <ai_platform_get_activations_map+0x7a>
 80057d6:	f1a1 0001 	sub.w	r0, r1, #1
 80057da:	6025      	str	r5, [r4, #0]
 80057dc:	fab0 f080 	clz	r0, r0
 80057e0:	0940      	lsrs	r0, r0, #5
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	42a7      	cmp	r7, r4
 80057e6:	d035      	beq.n	8005854 <ai_platform_get_activations_map+0xa0>
 80057e8:	2000      	movs	r0, #0
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	f102 000c 	add.w	r0, r2, #12
 80057f0:	f7ff ff04 	bl	80055fc <ai_buffer_array_sane>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d0f7      	beq.n	80057e8 <ai_platform_get_activations_map+0x34>
 80057f8:	89eb      	ldrh	r3, [r5, #14]
 80057fa:	429f      	cmp	r7, r3
 80057fc:	d1f4      	bne.n	80057e8 <ai_platform_get_activations_map+0x34>
 80057fe:	f04f 0c00 	mov.w	ip, #0
 8005802:	1f20      	subs	r0, r4, #4
 8005804:	46e6      	mov	lr, ip
 8005806:	692b      	ldr	r3, [r5, #16]
 8005808:	4463      	add	r3, ip
 800580a:	f10c 0c1c 	add.w	ip, ip, #28
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	b12b      	cbz	r3, 800581e <ai_platform_get_activations_map+0x6a>
 8005812:	f10e 0e01 	add.w	lr, lr, #1
 8005816:	4577      	cmp	r7, lr
 8005818:	f840 3f04 	str.w	r3, [r0, #4]!
 800581c:	d1f3      	bne.n	8005806 <ai_platform_get_activations_map+0x52>
 800581e:	eba7 000e 	sub.w	r0, r7, lr
 8005822:	fab0 f080 	clz	r0, r0
 8005826:	0940      	lsrs	r0, r0, #5
 8005828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582a:	2000      	movs	r0, #0
 800582c:	4770      	bx	lr
 800582e:	1f20      	subs	r0, r4, #4
 8005830:	462a      	mov	r2, r5
 8005832:	2400      	movs	r4, #0
 8005834:	e000      	b.n	8005838 <ai_platform_get_activations_map+0x84>
 8005836:	461c      	mov	r4, r3
 8005838:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800583c:	42b3      	cmp	r3, r6
 800583e:	d0d1      	beq.n	80057e4 <ai_platform_get_activations_map+0x30>
 8005840:	f840 3f04 	str.w	r3, [r0, #4]!
 8005844:	1c63      	adds	r3, r4, #1
 8005846:	429f      	cmp	r7, r3
 8005848:	d1f5      	bne.n	8005836 <ai_platform_get_activations_map+0x82>
 800584a:	3402      	adds	r4, #2
 800584c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005850:	42b3      	cmp	r3, r6
 8005852:	d1c9      	bne.n	80057e8 <ai_platform_get_activations_map+0x34>
 8005854:	2001      	movs	r0, #1
 8005856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005858:	a1facade 	.word	0xa1facade

0800585c <ai_platform_bind_network_params>:
 800585c:	b1a0      	cbz	r0, 8005888 <ai_platform_bind_network_params+0x2c>
 800585e:	b1b1      	cbz	r1, 800588e <ai_platform_bind_network_params+0x32>
 8005860:	b1c2      	cbz	r2, 8005894 <ai_platform_bind_network_params+0x38>
 8005862:	b410      	push	{r4}
 8005864:	4603      	mov	r3, r0
 8005866:	4c0d      	ldr	r4, [pc, #52]	@ (800589c <ai_platform_bind_network_params+0x40>)
 8005868:	f843 4b04 	str.w	r4, [r3], #4
 800586c:	f100 0c0c 	add.w	ip, r0, #12
 8005870:	c903      	ldmia	r1, {r0, r1}
 8005872:	e883 0003 	stmia.w	r3, {r0, r1}
 8005876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800587a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800587e:	2301      	movs	r3, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	4603      	mov	r3, r0
 800588a:	4618      	mov	r0, r3
 800588c:	4770      	bx	lr
 800588e:	460b      	mov	r3, r1
 8005890:	4618      	mov	r0, r3
 8005892:	4770      	bx	lr
 8005894:	4613      	mov	r3, r2
 8005896:	4618      	mov	r0, r3
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	a1facade 	.word	0xa1facade

080058a0 <ai_platform_runtime_get_revision>:
 80058a0:	4800      	ldr	r0, [pc, #0]	@ (80058a4 <ai_platform_runtime_get_revision+0x4>)
 80058a2:	4770      	bx	lr
 80058a4:	08067b3c 	.word	0x08067b3c

080058a8 <ai_platform_runtime_get_version>:
 80058a8:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <ai_platform_runtime_get_version+0x28>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2000      	movs	r0, #0
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	f362 0007 	bfi	r0, r2, #0, #8
 80058b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80058b8:	f362 200f 	bfi	r0, r2, #8, #8
 80058bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80058c0:	f362 4017 	bfi	r0, r2, #16, #8
 80058c4:	0e1b      	lsrs	r3, r3, #24
 80058c6:	b082      	sub	sp, #8
 80058c8:	f363 601f 	bfi	r0, r3, #24, #8
 80058cc:	b002      	add	sp, #8
 80058ce:	4770      	bx	lr
 80058d0:	08067b40 	.word	0x08067b40

080058d4 <ai_platform_api_get_version>:
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <ai_platform_api_get_version+0x28>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2000      	movs	r0, #0
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	f362 0007 	bfi	r0, r2, #0, #8
 80058e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80058e4:	f362 200f 	bfi	r0, r2, #8, #8
 80058e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80058ec:	f362 4017 	bfi	r0, r2, #16, #8
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	b082      	sub	sp, #8
 80058f4:	f363 601f 	bfi	r0, r3, #24, #8
 80058f8:	b002      	add	sp, #8
 80058fa:	4770      	bx	lr
 80058fc:	08067b44 	.word	0x08067b44

08005900 <ai_platform_interface_api_get_version>:
 8005900:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <ai_platform_interface_api_get_version+0x28>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2000      	movs	r0, #0
 8005906:	b2da      	uxtb	r2, r3
 8005908:	f362 0007 	bfi	r0, r2, #0, #8
 800590c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005910:	f362 200f 	bfi	r0, r2, #8, #8
 8005914:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005918:	f362 4017 	bfi	r0, r2, #16, #8
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	b082      	sub	sp, #8
 8005920:	f363 601f 	bfi	r0, r3, #24, #8
 8005924:	b002      	add	sp, #8
 8005926:	4770      	bx	lr
 8005928:	08067b48 	.word	0x08067b48

0800592c <ai_platform_context_acquire>:
 800592c:	6802      	ldr	r2, [r0, #0]
 800592e:	4b02      	ldr	r3, [pc, #8]	@ (8005938 <ai_platform_context_acquire+0xc>)
 8005930:	4393      	bics	r3, r2
 8005932:	bf18      	it	ne
 8005934:	2000      	movne	r0, #0
 8005936:	4770      	bx	lr
 8005938:	a1c00100 	.word	0xa1c00100

0800593c <ai_platform_network_get_error>:
 800593c:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <ai_platform_network_get_error+0x14>)
 800593e:	6802      	ldr	r2, [r0, #0]
 8005940:	4393      	bics	r3, r2
 8005942:	d102      	bne.n	800594a <ai_platform_network_get_error+0xe>
 8005944:	300c      	adds	r0, #12
 8005946:	f000 bda3 	b.w	8006490 <core_get_error>
 800594a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800594e:	4770      	bx	lr
 8005950:	a1c00100 	.word	0xa1c00100

08005954 <ai_platform_network_set_error>:
 8005954:	b110      	cbz	r0, 800595c <ai_platform_network_set_error+0x8>
 8005956:	300c      	adds	r0, #12
 8005958:	f000 bda0 	b.w	800649c <core_set_error>
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <ai_platform_api_get_network_report>:
 8005960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	4ba5      	ldr	r3, [pc, #660]	@ (8005bfc <ai_platform_api_get_network_report+0x29c>)
 8005966:	6802      	ldr	r2, [r0, #0]
 8005968:	b089      	sub	sp, #36	@ 0x24
 800596a:	4393      	bics	r3, r2
 800596c:	9002      	str	r0, [sp, #8]
 800596e:	9103      	str	r1, [sp, #12]
 8005970:	d164      	bne.n	8005a3c <ai_platform_api_get_network_report+0xdc>
 8005972:	2900      	cmp	r1, #0
 8005974:	d075      	beq.n	8005a62 <ai_platform_api_get_network_report+0x102>
 8005976:	2400      	movs	r4, #0
 8005978:	67cc      	str	r4, [r1, #124]	@ 0x7c
 800597a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800597c:	b143      	cbz	r3, 8005990 <ai_platform_api_get_network_report+0x30>
 800597e:	3401      	adds	r4, #1
 8005980:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d003      	beq.n	8005990 <ai_platform_api_get_network_report+0x30>
 8005988:	b112      	cbz	r2, 8005990 <ai_platform_api_get_network_report+0x30>
 800598a:	4613      	mov	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f6      	bne.n	800597e <ai_platform_api_get_network_report+0x1e>
 8005990:	2c00      	cmp	r4, #0
 8005992:	f000 812b 	beq.w	8005bec <ai_platform_api_get_network_report+0x28c>
 8005996:	9a02      	ldr	r2, [sp, #8]
 8005998:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 800599a:	2b00      	cmp	r3, #0
 800599c:	d053      	beq.n	8005a46 <ai_platform_api_get_network_report+0xe6>
 800599e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80059a2:	f1ba 0f00 	cmp.w	sl, #0
 80059a6:	d04e      	beq.n	8005a46 <ai_platform_api_get_network_report+0xe6>
 80059a8:	f04f 0b00 	mov.w	fp, #0
 80059ac:	465d      	mov	r5, fp
 80059ae:	e015      	b.n	80059dc <ai_platform_api_get_network_report+0x7c>
 80059b0:	00e9      	lsls	r1, r5, #3
 80059b2:	2201      	movs	r2, #1
 80059b4:	507a      	str	r2, [r7, r1]
 80059b6:	69b1      	ldr	r1, [r6, #24]
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	60a3      	str	r3, [r4, #8]
 80059bc:	f04f 0201 	mov.w	r2, #1
 80059c0:	7522      	strb	r2, [r4, #20]
 80059c2:	6963      	ldr	r3, [r4, #20]
 80059c4:	6121      	str	r1, [r4, #16]
 80059c6:	f369 231f 	bfi	r3, r9, #8, #24
 80059ca:	e9c4 0c00 	strd	r0, ip, [r4]
 80059ce:	e9c4 3805 	strd	r3, r8, [r4, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	60e2      	str	r2, [r4, #12]
 80059d6:	3501      	adds	r5, #1
 80059d8:	f10b 0b1c 	add.w	fp, fp, #28
 80059dc:	f8ba 3000 	ldrh.w	r3, [sl]
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	b2aa      	uxth	r2, r5
 80059e4:	d942      	bls.n	8005a6c <ai_platform_api_get_network_report+0x10c>
 80059e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d03e      	beq.n	8005a6c <ai_platform_api_get_network_report+0x10c>
 80059ee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	d03a      	beq.n	8005a6c <ai_platform_api_get_network_report+0x10c>
 80059f6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80059fa:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80059fe:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005a02:	69b3      	ldr	r3, [r6, #24]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	68b3      	ldr	r3, [r6, #8]
 8005a08:	00ea      	lsls	r2, r5, #3
 8005a0a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005a0e:	9201      	str	r2, [sp, #4]
 8005a10:	f002 fc0e 	bl	8008230 <ai_array_to_buffer_fmt>
 8005a14:	69b1      	ldr	r1, [r6, #24]
 8005a16:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005a1a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005a1e:	445c      	add	r4, fp
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0c9      	beq.n	80059b8 <ai_platform_api_get_network_report+0x58>
 8005a24:	2100      	movs	r1, #0
 8005a26:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005a2a:	6831      	ldr	r1, [r6, #0]
 8005a2c:	6059      	str	r1, [r3, #4]
 8005a2e:	b111      	cbz	r1, 8005a36 <ai_platform_api_get_network_report+0xd6>
 8005a30:	8849      	ldrh	r1, [r1, #2]
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d1bc      	bne.n	80059b0 <ai_platform_api_get_network_report+0x50>
 8005a36:	69b1      	ldr	r1, [r6, #24]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e7bd      	b.n	80059b8 <ai_platform_api_get_network_report+0x58>
 8005a3c:	2400      	movs	r4, #0
 8005a3e:	4620      	mov	r0, r4
 8005a40:	b009      	add	sp, #36	@ 0x24
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	9802      	ldr	r0, [sp, #8]
 8005a4a:	2400      	movs	r4, #0
 8005a4c:	63dc      	str	r4, [r3, #60]	@ 0x3c
 8005a4e:	871c      	strh	r4, [r3, #56]	@ 0x38
 8005a50:	2218      	movs	r2, #24
 8005a52:	2112      	movs	r1, #18
 8005a54:	300c      	adds	r0, #12
 8005a56:	f000 fd21 	bl	800649c <core_set_error>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	b009      	add	sp, #36	@ 0x24
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	460c      	mov	r4, r1
 8005a64:	4620      	mov	r0, r4
 8005a66:	b009      	add	sp, #36	@ 0x24
 8005a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	d0ea      	beq.n	8005a46 <ai_platform_api_get_network_report+0xe6>
 8005a70:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005a74:	9903      	ldr	r1, [sp, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8005a7a:	9b02      	ldr	r3, [sp, #8]
 8005a7c:	870a      	strh	r2, [r1, #56]	@ 0x38
 8005a7e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f240 80a5 	bls.w	8005bd0 <ai_platform_api_get_network_report+0x270>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	f04f 0900 	mov.w	r9, #0
 8005a8c:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8005a90:	464d      	mov	r5, r9
 8005a92:	46cb      	mov	fp, r9
 8005a94:	e016      	b.n	8005ac4 <ai_platform_api_get_network_report+0x164>
 8005a96:	2201      	movs	r2, #1
 8005a98:	f84a 200e 	str.w	r2, [sl, lr]
 8005a9c:	69b1      	ldr	r1, [r6, #24]
 8005a9e:	684a      	ldr	r2, [r1, #4]
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	61a3      	str	r3, [r4, #24]
 8005aa6:	f04f 0301 	mov.w	r3, #1
 8005aaa:	7523      	strb	r3, [r4, #20]
 8005aac:	6963      	ldr	r3, [r4, #20]
 8005aae:	6122      	str	r2, [r4, #16]
 8005ab0:	e9c4 0c00 	strd	r0, ip, [r4]
 8005ab4:	f367 231f 	bfi	r3, r7, #8, #24
 8005ab8:	f8c4 b00c 	str.w	fp, [r4, #12]
 8005abc:	3501      	adds	r5, #1
 8005abe:	f109 091c 	add.w	r9, r9, #28
 8005ac2:	6163      	str	r3, [r4, #20]
 8005ac4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	b2aa      	uxth	r2, r5
 8005acc:	d927      	bls.n	8005b1e <ai_platform_api_get_network_report+0x1be>
 8005ace:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005ad2:	b323      	cbz	r3, 8005b1e <ai_platform_api_get_network_report+0x1be>
 8005ad4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005ad8:	b30e      	cbz	r6, 8005b1e <ai_platform_api_get_network_report+0x1be>
 8005ada:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005ade:	68b7      	ldr	r7, [r6, #8]
 8005ae0:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8005ae4:	69b3      	ldr	r3, [r6, #24]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68f3      	ldr	r3, [r6, #12]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	f002 fba0 	bl	8008230 <ai_array_to_buffer_fmt>
 8005af0:	69b1      	ldr	r1, [r6, #24]
 8005af2:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 8005af6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005afa:	444c      	add	r4, r9
 8005afc:	f3c7 2717 	ubfx	r7, r7, #8, #24
 8005b00:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ca      	beq.n	8005a9e <ai_platform_api_get_network_report+0x13e>
 8005b08:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 8005b0c:	6831      	ldr	r1, [r6, #0]
 8005b0e:	6059      	str	r1, [r3, #4]
 8005b10:	b111      	cbz	r1, 8005b18 <ai_platform_api_get_network_report+0x1b8>
 8005b12:	8849      	ldrh	r1, [r1, #2]
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d1be      	bne.n	8005a96 <ai_platform_api_get_network_report+0x136>
 8005b18:	69b1      	ldr	r1, [r6, #24]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e7bf      	b.n	8005a9e <ai_platform_api_get_network_report+0x13e>
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d056      	beq.n	8005bd0 <ai_platform_api_get_network_report+0x270>
 8005b22:	9902      	ldr	r1, [sp, #8]
 8005b24:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005b28:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	640b      	str	r3, [r1, #64]	@ 0x40
 8005b32:	874a      	strh	r2, [r1, #58]	@ 0x3a
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff fd61 	bl	80055fc <ai_buffer_array_sane>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b968      	cbnz	r0, 8005b5a <ai_platform_api_get_network_report+0x1fa>
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff fd5c 	bl	80055fc <ai_buffer_array_sane>
 8005b44:	b148      	cbz	r0, 8005b5a <ai_platform_api_get_network_report+0x1fa>
 8005b46:	9b02      	ldr	r3, [sp, #8]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b133      	cbz	r3, 8005b5a <ai_platform_api_get_network_report+0x1fa>
 8005b4c:	9802      	ldr	r0, [sp, #8]
 8005b4e:	2213      	movs	r2, #19
 8005b50:	2111      	movs	r1, #17
 8005b52:	300c      	adds	r0, #12
 8005b54:	f000 fca2 	bl	800649c <core_set_error>
 8005b58:	e771      	b.n	8005a3e <ai_platform_api_get_network_report+0xde>
 8005b5a:	9d02      	ldr	r5, [sp, #8]
 8005b5c:	f105 0720 	add.w	r7, r5, #32
 8005b60:	4638      	mov	r0, r7
 8005b62:	f7ff fd4b 	bl	80055fc <ai_buffer_array_sane>
 8005b66:	4604      	mov	r4, r0
 8005b68:	b960      	cbnz	r0, 8005b84 <ai_platform_api_get_network_report+0x224>
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f7ff fd46 	bl	80055fc <ai_buffer_array_sane>
 8005b70:	b140      	cbz	r0, 8005b84 <ai_platform_api_get_network_report+0x224>
 8005b72:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8005b74:	b133      	cbz	r3, 8005b84 <ai_platform_api_get_network_report+0x224>
 8005b76:	9802      	ldr	r0, [sp, #8]
 8005b78:	2212      	movs	r2, #18
 8005b7a:	2111      	movs	r1, #17
 8005b7c:	300c      	adds	r0, #12
 8005b7e:	f000 fc8d 	bl	800649c <core_set_error>
 8005b82:	e75c      	b.n	8005a3e <ai_platform_api_get_network_report+0xde>
 8005b84:	9a02      	ldr	r2, [sp, #8]
 8005b86:	9c03      	ldr	r4, [sp, #12]
 8005b88:	6853      	ldr	r3, [r2, #4]
 8005b8a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c00 <ai_platform_api_get_network_report+0x2a0>)
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	f240 1309 	movw	r3, #265	@ 0x109
 8005b96:	6163      	str	r3, [r4, #20]
 8005b98:	f240 2c01 	movw	ip, #513	@ 0x201
 8005b9c:	f240 5301 	movw	r3, #1281	@ 0x501
 8005ba0:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 8005ba4:	6890      	ldr	r0, [r2, #8]
 8005ba6:	f7ff fcaf 	bl	8005508 <ai_platform_version_get>
 8005baa:	4b16      	ldr	r3, [pc, #88]	@ (8005c04 <ai_platform_api_get_network_report+0x2a4>)
 8005bac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005bae:	6220      	str	r0, [r4, #32]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d129      	bne.n	8005c08 <ai_platform_api_get_network_report+0x2a8>
 8005bb4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005bb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bbc:	e882 0003 	stmia.w	r2, {r0, r1}
 8005bc0:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005bc4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8005bc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8005bcc:	2401      	movs	r4, #1
 8005bce:	e736      	b.n	8005a3e <ai_platform_api_get_network_report+0xde>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	9802      	ldr	r0, [sp, #8]
 8005bd4:	2400      	movs	r4, #0
 8005bd6:	641c      	str	r4, [r3, #64]	@ 0x40
 8005bd8:	875c      	strh	r4, [r3, #58]	@ 0x3a
 8005bda:	2218      	movs	r2, #24
 8005bdc:	2113      	movs	r1, #19
 8005bde:	300c      	adds	r0, #12
 8005be0:	f000 fc5c 	bl	800649c <core_set_error>
 8005be4:	4620      	mov	r0, r4
 8005be6:	b009      	add	sp, #36	@ 0x24
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	9802      	ldr	r0, [sp, #8]
 8005bee:	2218      	movs	r2, #24
 8005bf0:	2111      	movs	r1, #17
 8005bf2:	300c      	adds	r0, #12
 8005bf4:	f000 fc52 	bl	800649c <core_set_error>
 8005bf8:	e721      	b.n	8005a3e <ai_platform_api_get_network_report+0xde>
 8005bfa:	bf00      	nop
 8005bfc:	a1c00100 	.word	0xa1c00100
 8005c00:	08067b3c 	.word	0x08067b3c
 8005c04:	a1facade 	.word	0xa1facade
 8005c08:	9903      	ldr	r1, [sp, #12]
 8005c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb8 <ai_platform_api_get_network_report+0x358>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 8005c12:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 8005c16:	4a29      	ldr	r2, [pc, #164]	@ (8005cbc <ai_platform_api_get_network_report+0x35c>)
 8005c18:	644a      	str	r2, [r1, #68]	@ 0x44
 8005c1a:	f10d 0c10 	add.w	ip, sp, #16
 8005c1e:	f240 4201 	movw	r2, #1025	@ 0x401
 8005c22:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 8005c26:	658a      	str	r2, [r1, #88]	@ 0x58
 8005c28:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 8005c2c:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 8005c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c32:	4645      	mov	r5, r8
 8005c34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3a:	464c      	mov	r4, r9
 8005c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff fcd8 	bl	80055fc <ai_buffer_array_sane>
 8005c4c:	b998      	cbnz	r0, 8005c76 <ai_platform_api_get_network_report+0x316>
 8005c4e:	4638      	mov	r0, r7
 8005c50:	f7ff fcd4 	bl	80055fc <ai_buffer_array_sane>
 8005c54:	b908      	cbnz	r0, 8005c5a <ai_platform_api_get_network_report+0x2fa>
 8005c56:	2401      	movs	r4, #1
 8005c58:	e6f1      	b.n	8005a3e <ai_platform_api_get_network_report+0xde>
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f7ff fcce 	bl	80055fc <ai_buffer_array_sane>
 8005c60:	b1b8      	cbz	r0, 8005c92 <ai_platform_api_get_network_report+0x332>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c68:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8005c6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005c70:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8005c74:	e7ef      	b.n	8005c56 <ai_platform_api_get_network_report+0x2f6>
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff fcc0 	bl	80055fc <ai_buffer_array_sane>
 8005c7c:	b190      	cbz	r0, 8005ca4 <ai_platform_api_get_network_report+0x344>
 8005c7e:	9b02      	ldr	r3, [sp, #8]
 8005c80:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c84:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8005c88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005c8c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8005c90:	e7dd      	b.n	8005c4e <ai_platform_api_get_network_report+0x2ee>
 8005c92:	4604      	mov	r4, r0
 8005c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c96:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8005c9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005c9e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8005ca2:	deff      	udf	#255	@ 0xff
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8005cac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005cb0:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8005cb4:	deff      	udf	#255	@ 0xff
 8005cb6:	bf00      	nop
 8005cb8:	0800b8dc 	.word	0x0800b8dc
 8005cbc:	00040440 	.word	0x00040440

08005cc0 <ai_platform_network_create>:
 8005cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8005cca:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8005cce:	b320      	cbz	r0, 8005d1a <ai_platform_network_create+0x5a>
 8005cd0:	6002      	str	r2, [r0, #0]
 8005cd2:	4616      	mov	r6, r2
 8005cd4:	461f      	mov	r7, r3
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	f000 fbd8 	bl	800648c <core_init>
 8005cdc:	b970      	cbnz	r0, 8005cfc <ai_platform_network_create+0x3c>
 8005cde:	2530      	movs	r5, #48	@ 0x30
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	2410      	movs	r4, #16
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff fc06 	bl	80054fc <ai_version_get>
 8005cf0:	60b0      	str	r0, [r6, #8]
 8005cf2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005cf6:	b003      	add	sp, #12
 8005cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff fbfb 	bl	80054fc <ai_version_get>
 8005d06:	2200      	movs	r2, #0
 8005d08:	4605      	mov	r5, r0
 8005d0a:	2105      	movs	r1, #5
 8005d0c:	2001      	movs	r0, #1
 8005d0e:	f7ff fbf5 	bl	80054fc <ai_version_get>
 8005d12:	4285      	cmp	r5, r0
 8005d14:	d008      	beq.n	8005d28 <ai_platform_network_create+0x68>
 8005d16:	2501      	movs	r5, #1
 8005d18:	e7e2      	b.n	8005ce0 <ai_platform_network_create+0x20>
 8005d1a:	2510      	movs	r5, #16
 8005d1c:	462c      	mov	r4, r5
 8005d1e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005d22:	b003      	add	sp, #12
 8005d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <ai_platform_network_create+0x80>)
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	a801      	add	r0, sp, #4
 8005d2e:	f000 fbc1 	bl	80064b4 <ai_check_custom_types>
 8005d32:	b110      	cbz	r0, 8005d3a <ai_platform_network_create+0x7a>
 8005d34:	2400      	movs	r4, #0
 8005d36:	4625      	mov	r5, r4
 8005d38:	e7d5      	b.n	8005ce6 <ai_platform_network_create+0x26>
 8005d3a:	2502      	movs	r5, #2
 8005d3c:	e7d0      	b.n	8005ce0 <ai_platform_network_create+0x20>
 8005d3e:	bf00      	nop
 8005d40:	84048403 	.word	0x84048403

08005d44 <ai_platform_network_destroy>:
 8005d44:	b508      	push	{r3, lr}
 8005d46:	4a07      	ldr	r2, [pc, #28]	@ (8005d64 <ai_platform_network_destroy+0x20>)
 8005d48:	6801      	ldr	r1, [r0, #0]
 8005d4a:	ea01 0c02 	and.w	ip, r1, r2
 8005d4e:	438a      	bics	r2, r1
 8005d50:	d102      	bne.n	8005d58 <ai_platform_network_destroy+0x14>
 8005d52:	4561      	cmp	r1, ip
 8005d54:	d001      	beq.n	8005d5a <ai_platform_network_destroy+0x16>
 8005d56:	2000      	movs	r0, #0
 8005d58:	bd08      	pop	{r3, pc}
 8005d5a:	f000 fc41 	bl	80065e0 <ai_layers_destroy_all>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	bd08      	pop	{r3, pc}
 8005d62:	bf00      	nop
 8005d64:	a1c00100 	.word	0xa1c00100

08005d68 <ai_platform_network_init>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	4b63      	ldr	r3, [pc, #396]	@ (8005efc <ai_platform_network_init+0x194>)
 8005d6e:	6802      	ldr	r2, [r0, #0]
 8005d70:	4393      	bics	r3, r2
 8005d72:	b083      	sub	sp, #12
 8005d74:	d156      	bne.n	8005e24 <ai_platform_network_init+0xbc>
 8005d76:	4604      	mov	r4, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	f000 80a9 	beq.w	8005ed2 <ai_platform_network_init+0x16a>
 8005d80:	680b      	ldr	r3, [r1, #0]
 8005d82:	495f      	ldr	r1, [pc, #380]	@ (8005f00 <ai_platform_network_init+0x198>)
 8005d84:	428b      	cmp	r3, r1
 8005d86:	d113      	bne.n	8005db0 <ai_platform_network_init+0x48>
 8005d88:	495c      	ldr	r1, [pc, #368]	@ (8005efc <ai_platform_network_init+0x194>)
 8005d8a:	89bd      	ldrh	r5, [r7, #12]
 8005d8c:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8005d90:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8005d94:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8005d98:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8005d9c:	68be      	ldr	r6, [r7, #8]
 8005d9e:	428a      	cmp	r2, r1
 8005da0:	d02c      	beq.n	8005dfc <ai_platform_network_init+0x94>
 8005da2:	2303      	movs	r3, #3
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	4627      	mov	r7, r4
 8005da8:	4638      	mov	r0, r7
 8005daa:	b003      	add	sp, #12
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	2101      	movs	r1, #1
 8005db2:	4638      	mov	r0, r7
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005dba:	f7ff fbe3 	bl	8005584 <ai_buffer_get_size>
 8005dbe:	f107 081c 	add.w	r8, r7, #28
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	463e      	mov	r6, r7
 8005dca:	6a3f      	ldr	r7, [r7, #32]
 8005dcc:	f7ff fbda 	bl	8005584 <ai_buffer_get_size>
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	9b01      	ldr	r3, [sp, #4]
 8005dd4:	bf0a      	itet	eq
 8005dd6:	46a9      	moveq	r9, r5
 8005dd8:	f04f 0901 	movne.w	r9, #1
 8005ddc:	462e      	moveq	r6, r5
 8005dde:	b330      	cbz	r0, 8005e2e <ai_platform_network_init+0xc6>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 8084 	beq.w	8005eee <ai_platform_network_init+0x186>
 8005de6:	f04f 0a01 	mov.w	sl, #1
 8005dea:	f1bb 0f00 	cmp.w	fp, #0
 8005dee:	d021      	beq.n	8005e34 <ai_platform_network_init+0xcc>
 8005df0:	2500      	movs	r5, #0
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	4941      	ldr	r1, [pc, #260]	@ (8005efc <ai_platform_network_init+0x194>)
 8005df6:	428a      	cmp	r2, r1
 8005df8:	46ab      	mov	fp, r5
 8005dfa:	d1d2      	bne.n	8005da2 <ai_platform_network_init+0x3a>
 8005dfc:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8005dfe:	454a      	cmp	r2, r9
 8005e00:	4a3f      	ldr	r2, [pc, #252]	@ (8005f00 <ai_platform_network_init+0x198>)
 8005e02:	d221      	bcs.n	8005e48 <ai_platform_network_init+0xe0>
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d15c      	bne.n	8005ec2 <ai_platform_network_init+0x15a>
 8005e08:	6266      	str	r6, [r4, #36]	@ 0x24
 8005e0a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005e0e:	f8a4 b020 	strh.w	fp, [r4, #32]
 8005e12:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8005e16:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8005e1a:	8525      	strh	r5, [r4, #40]	@ 0x28
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fb73 	bl	8006508 <ai_layers_init_all>
 8005e22:	e7be      	b.n	8005da2 <ai_platform_network_init+0x3a>
 8005e24:	2700      	movs	r7, #0
 8005e26:	4638      	mov	r0, r7
 8005e28:	b003      	add	sp, #12
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	4680      	mov	r8, r0
 8005e30:	4682      	mov	sl, r0
 8005e32:	e7da      	b.n	8005dea <ai_platform_network_init+0x82>
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	d0dc      	beq.n	8005df2 <ai_platform_network_init+0x8a>
 8005e38:	2212      	movs	r2, #18
 8005e3a:	2110      	movs	r1, #16
 8005e3c:	f104 000c 	add.w	r0, r4, #12
 8005e40:	f000 fb2c 	bl	800649c <core_set_error>
 8005e44:	465f      	mov	r7, fp
 8005e46:	e7af      	b.n	8005da8 <ai_platform_network_init+0x40>
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d0dd      	beq.n	8005e08 <ai_platform_network_init+0xa0>
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	d018      	beq.n	8005e84 <ai_platform_network_init+0x11c>
 8005e52:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e5c:	2700      	movs	r7, #0
 8005e5e:	4699      	mov	r9, r3
 8005e60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e62:	eb06 0e07 	add.w	lr, r6, r7
 8005e66:	eb03 0c07 	add.w	ip, r3, r7
 8005e6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005e6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e72:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005e76:	371c      	adds	r7, #28
 8005e78:	45b9      	cmp	r9, r7
 8005e7a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005e7e:	d1ef      	bne.n	8005e60 <ai_platform_network_init+0xf8>
 8005e80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005e86:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005e8a:	4553      	cmp	r3, sl
 8005e8c:	f8a4 b020 	strh.w	fp, [r4, #32]
 8005e90:	d325      	bcc.n	8005ede <ai_platform_network_init+0x176>
 8005e92:	f1ba 0f00 	cmp.w	sl, #0
 8005e96:	d0be      	beq.n	8005e16 <ai_platform_network_init+0xae>
 8005e98:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8005e9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005ea0:	f04f 0c00 	mov.w	ip, #0
 8005ea4:	eb08 070c 	add.w	r7, r8, ip
 8005ea8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eac:	4466      	add	r6, ip
 8005eae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005eb0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005eb4:	f10c 0c1c 	add.w	ip, ip, #28
 8005eb8:	45f4      	cmp	ip, lr
 8005eba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005ebe:	d1f1      	bne.n	8005ea4 <ai_platform_network_init+0x13c>
 8005ec0:	e7a9      	b.n	8005e16 <ai_platform_network_init+0xae>
 8005ec2:	2212      	movs	r2, #18
 8005ec4:	2116      	movs	r1, #22
 8005ec6:	f104 000c 	add.w	r0, r4, #12
 8005eca:	f000 fae7 	bl	800649c <core_set_error>
 8005ece:	2700      	movs	r7, #0
 8005ed0:	e76a      	b.n	8005da8 <ai_platform_network_init+0x40>
 8005ed2:	2211      	movs	r2, #17
 8005ed4:	2110      	movs	r1, #16
 8005ed6:	300c      	adds	r0, #12
 8005ed8:	f000 fae0 	bl	800649c <core_set_error>
 8005edc:	e764      	b.n	8005da8 <ai_platform_network_init+0x40>
 8005ede:	2213      	movs	r2, #19
 8005ee0:	2116      	movs	r1, #22
 8005ee2:	f104 000c 	add.w	r0, r4, #12
 8005ee6:	f000 fad9 	bl	800649c <core_set_error>
 8005eea:	2700      	movs	r7, #0
 8005eec:	e75c      	b.n	8005da8 <ai_platform_network_init+0x40>
 8005eee:	2213      	movs	r2, #19
 8005ef0:	2110      	movs	r1, #16
 8005ef2:	f104 000c 	add.w	r0, r4, #12
 8005ef6:	f000 fad1 	bl	800649c <core_set_error>
 8005efa:	e755      	b.n	8005da8 <ai_platform_network_init+0x40>
 8005efc:	a1c00100 	.word	0xa1c00100
 8005f00:	a1facade 	.word	0xa1facade

08005f04 <ai_platform_network_post_init>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4b16      	ldr	r3, [pc, #88]	@ (8005f60 <ai_platform_network_post_init+0x5c>)
 8005f08:	6802      	ldr	r2, [r0, #0]
 8005f0a:	ea02 0103 	and.w	r1, r2, r3
 8005f0e:	4393      	bics	r3, r2
 8005f10:	d108      	bne.n	8005f24 <ai_platform_network_post_init+0x20>
 8005f12:	6903      	ldr	r3, [r0, #16]
 8005f14:	f013 0502 	ands.w	r5, r3, #2
 8005f18:	4604      	mov	r4, r0
 8005f1a:	d005      	beq.n	8005f28 <ai_platform_network_post_init+0x24>
 8005f1c:	428a      	cmp	r2, r1
 8005f1e:	d00a      	beq.n	8005f36 <ai_platform_network_post_init+0x32>
 8005f20:	2001      	movs	r0, #1
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	2000      	movs	r0, #0
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	2210      	movs	r2, #16
 8005f2a:	2111      	movs	r1, #17
 8005f2c:	300c      	adds	r0, #12
 8005f2e:	f000 fab5 	bl	800649c <core_set_error>
 8005f32:	4628      	mov	r0, r5
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	f000 faf5 	bl	8006524 <ai_layers_post_init_all>
 8005f3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ef      	beq.n	8005f20 <ai_platform_network_post_init+0x1c>
 8005f40:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005f42:	e008      	b.n	8005f56 <ai_platform_network_post_init+0x52>
 8005f44:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8005f48:	4798      	blx	r3
 8005f4a:	692b      	ldr	r3, [r5, #16]
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	d0e7      	beq.n	8005f20 <ai_platform_network_post_init+0x1c>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0e5      	beq.n	8005f20 <ai_platform_network_post_init+0x1c>
 8005f54:	461d      	mov	r5, r3
 8005f56:	4629      	mov	r1, r5
 8005f58:	2000      	movs	r0, #0
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	d1f2      	bne.n	8005f44 <ai_platform_network_post_init+0x40>
 8005f5e:	e7df      	b.n	8005f20 <ai_platform_network_post_init+0x1c>
 8005f60:	a1c00100 	.word	0xa1c00100

08005f64 <ai_platform_network_process>:
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	4bb5      	ldr	r3, [pc, #724]	@ (8006240 <ai_platform_network_process+0x2dc>)
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	b085      	sub	sp, #20
 8005f70:	4383      	bics	r3, r0
 8005f72:	9202      	str	r2, [sp, #8]
 8005f74:	f040 8140 	bne.w	80061f8 <ai_platform_network_process+0x294>
 8005f78:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8125 	beq.w	80061ca <ai_platform_network_process+0x266>
 8005f80:	692b      	ldr	r3, [r5, #16]
 8005f82:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2700      	movs	r7, #0
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	61af      	str	r7, [r5, #24]
 8005f90:	f040 8137 	bne.w	8006202 <ai_platform_network_process+0x29e>
 8005f94:	2900      	cmp	r1, #0
 8005f96:	f000 811e 	beq.w	80061d6 <ai_platform_network_process+0x272>
 8005f9a:	f1ba 0f00 	cmp.w	sl, #0
 8005f9e:	f000 811a 	beq.w	80061d6 <ai_platform_network_process+0x272>
 8005fa2:	f8ba 3000 	ldrh.w	r3, [sl]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8115 	beq.w	80061d6 <ai_platform_network_process+0x272>
 8005fac:	698b      	ldr	r3, [r1, #24]
 8005fae:	9503      	str	r5, [sp, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	460e      	mov	r6, r1
 8005fb6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d072      	beq.n	80060a4 <ai_platform_network_process+0x140>
 8005fbe:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005fc2:	2c00      	cmp	r4, #0
 8005fc4:	d06e      	beq.n	80060a4 <ai_platform_network_process+0x140>
 8005fc6:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005fca:	f8d3 9000 	ldr.w	r9, [r3]
 8005fce:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005fd2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005fd6:	f000 81d3 	beq.w	8006380 <ai_platform_network_process+0x41c>
 8005fda:	69a3      	ldr	r3, [r4, #24]
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4630      	mov	r0, r6
 8005fe0:	685d      	ldr	r5, [r3, #4]
 8005fe2:	f7ff facf 	bl	8005584 <ai_buffer_get_size>
 8005fe6:	4285      	cmp	r5, r0
 8005fe8:	f0c0 8116 	bcc.w	8006218 <ai_platform_network_process+0x2b4>
 8005fec:	68e0      	ldr	r0, [r4, #12]
 8005fee:	69b1      	ldr	r1, [r6, #24]
 8005ff0:	68c2      	ldr	r2, [r0, #12]
 8005ff2:	68cb      	ldr	r3, [r1, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	f040 810f 	bne.w	8006218 <ai_platform_network_process+0x2b4>
 8005ffa:	6882      	ldr	r2, [r0, #8]
 8005ffc:	688b      	ldr	r3, [r1, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	f040 810a 	bne.w	8006218 <ai_platform_network_process+0x2b4>
 8006004:	6842      	ldr	r2, [r0, #4]
 8006006:	684b      	ldr	r3, [r1, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	f040 8105 	bne.w	8006218 <ai_platform_network_process+0x2b4>
 800600e:	69a3      	ldr	r3, [r4, #24]
 8006010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006014:	f002 f9a4 	bl	8008360 <ai_array_get_data_byte_size>
 8006018:	4605      	mov	r5, r0
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff fa9a 	bl	8005554 <get_tensor_byte_size>
 8006020:	4285      	cmp	r5, r0
 8006022:	f0c0 80f9 	bcc.w	8006218 <ai_platform_network_process+0x2b4>
 8006026:	69a3      	ldr	r3, [r4, #24]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f002 f901 	bl	8008230 <ai_array_to_buffer_fmt>
 800602e:	6833      	ldr	r3, [r6, #0]
 8006030:	4058      	eors	r0, r3
 8006032:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8006036:	f040 81a5 	bne.w	8006384 <ai_platform_network_process+0x420>
 800603a:	6873      	ldr	r3, [r6, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 819f 	beq.w	8006380 <ai_platform_network_process+0x41c>
 8006042:	69b3      	ldr	r3, [r6, #24]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 81a5 	beq.w	8006396 <ai_platform_network_process+0x432>
 800604c:	9a01      	ldr	r2, [sp, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf38      	it	cc
 8006052:	461a      	movcc	r2, r3
 8006054:	4620      	mov	r0, r4
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	f7ff fa7c 	bl	8005554 <get_tensor_byte_size>
 800605c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006060:	69b3      	ldr	r3, [r6, #24]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	fb00 f303 	mul.w	r3, r0, r3
 8006068:	f8c8 300c 	str.w	r3, [r8, #12]
 800606c:	6871      	ldr	r1, [r6, #4]
 800606e:	f8c8 1004 	str.w	r1, [r8, #4]
 8006072:	440b      	add	r3, r1
 8006074:	f849 300b 	str.w	r3, [r9, fp]
 8006078:	69a0      	ldr	r0, [r4, #24]
 800607a:	6803      	ldr	r3, [r0, #0]
 800607c:	009a      	lsls	r2, r3, #2
 800607e:	f107 0701 	add.w	r7, r7, #1
 8006082:	f106 061c 	add.w	r6, r6, #28
 8006086:	f100 80b1 	bmi.w	80061ec <ai_platform_network_process+0x288>
 800608a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	4419      	add	r1, r3
 8006092:	6081      	str	r1, [r0, #8]
 8006094:	69a3      	ldr	r3, [r4, #24]
 8006096:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	f8ba 3000 	ldrh.w	r3, [sl]
 80060a0:	42bb      	cmp	r3, r7
 80060a2:	d888      	bhi.n	8005fb6 <ai_platform_network_process+0x52>
 80060a4:	9d03      	ldr	r5, [sp, #12]
 80060a6:	9b02      	ldr	r3, [sp, #8]
 80060a8:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 817c 	beq.w	80063a8 <ai_platform_network_process+0x444>
 80060b0:	2a01      	cmp	r2, #1
 80060b2:	f240 80bd 	bls.w	8006230 <ai_platform_network_process+0x2cc>
 80060b6:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 80060ba:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80b6 	beq.w	8006230 <ai_platform_network_process+0x2cc>
 80060c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80060c8:	2700      	movs	r7, #0
 80060ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80bd 	beq.w	800624e <ai_platform_network_process+0x2ea>
 80060d4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80060d8:	2e00      	cmp	r6, #0
 80060da:	f000 80b8 	beq.w	800624e <ai_platform_network_process+0x2ea>
 80060de:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80060e2:	681c      	ldr	r4, [r3, #0]
 80060e4:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 80060e8:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80060ec:	f000 8160 	beq.w	80063b0 <ai_platform_network_process+0x44c>
 80060f0:	69b3      	ldr	r3, [r6, #24]
 80060f2:	2101      	movs	r1, #1
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	4658      	mov	r0, fp
 80060fa:	f7ff fa43 	bl	8005584 <ai_buffer_get_size>
 80060fe:	9b02      	ldr	r3, [sp, #8]
 8006100:	4283      	cmp	r3, r0
 8006102:	f0c0 8095 	bcc.w	8006230 <ai_platform_network_process+0x2cc>
 8006106:	68f0      	ldr	r0, [r6, #12]
 8006108:	f8db 1018 	ldr.w	r1, [fp, #24]
 800610c:	68c2      	ldr	r2, [r0, #12]
 800610e:	68cb      	ldr	r3, [r1, #12]
 8006110:	429a      	cmp	r2, r3
 8006112:	f040 808d 	bne.w	8006230 <ai_platform_network_process+0x2cc>
 8006116:	6882      	ldr	r2, [r0, #8]
 8006118:	688b      	ldr	r3, [r1, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	f040 8088 	bne.w	8006230 <ai_platform_network_process+0x2cc>
 8006120:	6842      	ldr	r2, [r0, #4]
 8006122:	684b      	ldr	r3, [r1, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	f040 8083 	bne.w	8006230 <ai_platform_network_process+0x2cc>
 800612a:	69b3      	ldr	r3, [r6, #24]
 800612c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006130:	f002 f916 	bl	8008360 <ai_array_get_data_byte_size>
 8006134:	9002      	str	r0, [sp, #8]
 8006136:	4630      	mov	r0, r6
 8006138:	f7ff fa0c 	bl	8005554 <get_tensor_byte_size>
 800613c:	9b02      	ldr	r3, [sp, #8]
 800613e:	4283      	cmp	r3, r0
 8006140:	d376      	bcc.n	8006230 <ai_platform_network_process+0x2cc>
 8006142:	69b3      	ldr	r3, [r6, #24]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f002 f873 	bl	8008230 <ai_array_to_buffer_fmt>
 800614a:	f8db 3000 	ldr.w	r3, [fp]
 800614e:	4058      	eors	r0, r3
 8006150:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8006154:	f040 8134 	bne.w	80063c0 <ai_platform_network_process+0x45c>
 8006158:	f8db 3004 	ldr.w	r3, [fp, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8127 	beq.w	80063b0 <ai_platform_network_process+0x44c>
 8006162:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8133 	beq.w	80063d4 <ai_platform_network_process+0x470>
 800616e:	9a01      	ldr	r2, [sp, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	bf38      	it	cc
 8006174:	461a      	movcc	r2, r3
 8006176:	4630      	mov	r0, r6
 8006178:	9201      	str	r2, [sp, #4]
 800617a:	f7ff f9eb 	bl	8005554 <get_tensor_byte_size>
 800617e:	f8c9 0008 	str.w	r0, [r9, #8]
 8006182:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	fb00 f303 	mul.w	r3, r0, r3
 800618c:	f8c9 300c 	str.w	r3, [r9, #12]
 8006190:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006194:	f8c9 1004 	str.w	r1, [r9, #4]
 8006198:	440b      	add	r3, r1
 800619a:	f844 300a 	str.w	r3, [r4, sl]
 800619e:	69b0      	ldr	r0, [r6, #24]
 80061a0:	6803      	ldr	r3, [r0, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	f107 0701 	add.w	r7, r7, #1
 80061a8:	f10b 0b1c 	add.w	fp, fp, #28
 80061ac:	d44a      	bmi.n	8006244 <ai_platform_network_process+0x2e0>
 80061ae:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	4419      	add	r1, r3
 80061b6:	6081      	str	r1, [r0, #8]
 80061b8:	69b3      	ldr	r3, [r6, #24]
 80061ba:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80061be:	60da      	str	r2, [r3, #12]
 80061c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80061c4:	42bb      	cmp	r3, r7
 80061c6:	d880      	bhi.n	80060ca <ai_platform_network_process+0x166>
 80061c8:	e041      	b.n	800624e <ai_platform_network_process+0x2ea>
 80061ca:	692a      	ldr	r2, [r5, #16]
 80061cc:	61ab      	str	r3, [r5, #24]
 80061ce:	f002 0203 	and.w	r2, r2, #3
 80061d2:	2a03      	cmp	r2, #3
 80061d4:	d115      	bne.n	8006202 <ai_platform_network_process+0x29e>
 80061d6:	2217      	movs	r2, #23
 80061d8:	2112      	movs	r1, #18
 80061da:	f105 000c 	add.w	r0, r5, #12
 80061de:	f000 f95d 	bl	800649c <core_set_error>
 80061e2:	2400      	movs	r4, #0
 80061e4:	4620      	mov	r0, r4
 80061e6:	b005      	add	sp, #20
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	f8ba 3000 	ldrh.w	r3, [sl]
 80061f0:	429f      	cmp	r7, r3
 80061f2:	f4ff aee0 	bcc.w	8005fb6 <ai_platform_network_process+0x52>
 80061f6:	e755      	b.n	80060a4 <ai_platform_network_process+0x140>
 80061f8:	2400      	movs	r4, #0
 80061fa:	4620      	mov	r0, r4
 80061fc:	b005      	add	sp, #20
 80061fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006202:	2230      	movs	r2, #48	@ 0x30
 8006204:	2111      	movs	r1, #17
 8006206:	f105 000c 	add.w	r0, r5, #12
 800620a:	f000 f947 	bl	800649c <core_set_error>
 800620e:	2400      	movs	r4, #0
 8006210:	4620      	mov	r0, r4
 8006212:	b005      	add	sp, #20
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	9d03      	ldr	r5, [sp, #12]
 800621a:	2218      	movs	r2, #24
 800621c:	2112      	movs	r1, #18
 800621e:	f105 000c 	add.w	r0, r5, #12
 8006222:	f000 f93b 	bl	800649c <core_set_error>
 8006226:	2400      	movs	r4, #0
 8006228:	4620      	mov	r0, r4
 800622a:	b005      	add	sp, #20
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	2218      	movs	r2, #24
 8006232:	2113      	movs	r1, #19
 8006234:	f105 000c 	add.w	r0, r5, #12
 8006238:	f000 f930 	bl	800649c <core_set_error>
 800623c:	2400      	movs	r4, #0
 800623e:	e7d1      	b.n	80061e4 <ai_platform_network_process+0x280>
 8006240:	a1c00100 	.word	0xa1c00100
 8006244:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006248:	429f      	cmp	r7, r3
 800624a:	f4ff af3e 	bcc.w	80060ca <ai_platform_network_process+0x166>
 800624e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006252:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006254:	832b      	strh	r3, [r5, #24]
 8006256:	2a00      	cmp	r2, #0
 8006258:	f040 808c 	bne.w	8006374 <ai_platform_network_process+0x410>
 800625c:	4616      	mov	r6, r2
 800625e:	4617      	mov	r7, r2
 8006260:	8b6c      	ldrh	r4, [r5, #26]
 8006262:	429c      	cmp	r4, r3
 8006264:	bf38      	it	cc
 8006266:	46ab      	movcc	fp, r5
 8006268:	d2bc      	bcs.n	80061e4 <ai_platform_network_process+0x280>
 800626a:	2e00      	cmp	r6, #0
 800626c:	d030      	beq.n	80062d0 <ai_platform_network_process+0x36c>
 800626e:	f04f 0800 	mov.w	r8, #0
 8006272:	e014      	b.n	800629e <ai_platform_network_process+0x33a>
 8006274:	6882      	ldr	r2, [r0, #8]
 8006276:	68c5      	ldr	r5, [r0, #12]
 8006278:	6863      	ldr	r3, [r4, #4]
 800627a:	1b52      	subs	r2, r2, r5
 800627c:	4413      	add	r3, r2
 800627e:	6083      	str	r3, [r0, #8]
 8006280:	698b      	ldr	r3, [r1, #24]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800628a:	f859 200a 	ldr.w	r2, [r9, sl]
 800628e:	440b      	add	r3, r1
 8006290:	4293      	cmp	r3, r2
 8006292:	bf24      	itt	cs
 8006294:	68e3      	ldrcs	r3, [r4, #12]
 8006296:	1ad3      	subcs	r3, r2, r3
 8006298:	6063      	str	r3, [r4, #4]
 800629a:	f108 0801 	add.w	r8, r8, #1
 800629e:	8833      	ldrh	r3, [r6, #0]
 80062a0:	4543      	cmp	r3, r8
 80062a2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80062a6:	d913      	bls.n	80062d0 <ai_platform_network_process+0x36c>
 80062a8:	6873      	ldr	r3, [r6, #4]
 80062aa:	b18b      	cbz	r3, 80062d0 <ai_platform_network_process+0x36c>
 80062ac:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80062b0:	b171      	cbz	r1, 80062d0 <ai_platform_network_process+0x36c>
 80062b2:	6988      	ldr	r0, [r1, #24]
 80062b4:	68b2      	ldr	r2, [r6, #8]
 80062b6:	6803      	ldr	r3, [r0, #0]
 80062b8:	f8d2 9000 	ldr.w	r9, [r2]
 80062bc:	009d      	lsls	r5, r3, #2
 80062be:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80062c2:	d5d7      	bpl.n	8006274 <ai_platform_network_process+0x310>
 80062c4:	6881      	ldr	r1, [r0, #8]
 80062c6:	68a2      	ldr	r2, [r4, #8]
 80062c8:	6860      	ldr	r0, [r4, #4]
 80062ca:	f001 ff2b 	bl	8008124 <st_int8_copy>
 80062ce:	e7da      	b.n	8006286 <ai_platform_network_process+0x322>
 80062d0:	4658      	mov	r0, fp
 80062d2:	f000 f93b 	bl	800654c <ai_layers_forward_all>
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	d03d      	beq.n	8006356 <ai_platform_network_process+0x3f2>
 80062da:	2400      	movs	r4, #0
 80062dc:	e016      	b.n	800630c <ai_platform_network_process+0x3a8>
 80062de:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80062e2:	f859 100a 	ldr.w	r1, [r9, sl]
 80062e6:	4413      	add	r3, r2
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf24      	itt	cs
 80062ec:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80062f0:	1acb      	subcs	r3, r1, r3
 80062f2:	f8c8 3004 	str.w	r3, [r8, #4]
 80062f6:	6981      	ldr	r1, [r0, #24]
 80062f8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80062fc:	1b52      	subs	r2, r2, r5
 80062fe:	4413      	add	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
 8006302:	6983      	ldr	r3, [r0, #24]
 8006304:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	3401      	adds	r4, #1
 800630c:	883b      	ldrh	r3, [r7, #0]
 800630e:	42a3      	cmp	r3, r4
 8006310:	d921      	bls.n	8006356 <ai_platform_network_process+0x3f2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	b1fb      	cbz	r3, 8006356 <ai_platform_network_process+0x3f2>
 8006316:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800631a:	b1e0      	cbz	r0, 8006356 <ai_platform_network_process+0x3f2>
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	6983      	ldr	r3, [r0, #24]
 8006320:	f8d2 9000 	ldr.w	r9, [r2]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	0092      	lsls	r2, r2, #2
 8006328:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800632c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006330:	d5d5      	bpl.n	80062de <ai_platform_network_process+0x37a>
 8006332:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006336:	6898      	ldr	r0, [r3, #8]
 8006338:	f001 fef4 	bl	8008124 <st_int8_copy>
 800633c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006340:	f859 200a 	ldr.w	r2, [r9, sl]
 8006344:	440b      	add	r3, r1
 8006346:	4293      	cmp	r3, r2
 8006348:	bf24      	itt	cs
 800634a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800634e:	1ad3      	subcs	r3, r2, r3
 8006350:	f8c8 3004 	str.w	r3, [r8, #4]
 8006354:	e7d9      	b.n	800630a <ai_platform_network_process+0x3a6>
 8006356:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800635a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800635e:	3401      	adds	r4, #1
 8006360:	b2a4      	uxth	r4, r4
 8006362:	42a3      	cmp	r3, r4
 8006364:	f8ab 401a 	strh.w	r4, [fp, #26]
 8006368:	f63f af7f 	bhi.w	800626a <ai_platform_network_process+0x306>
 800636c:	4620      	mov	r0, r4
 800636e:	b005      	add	sp, #20
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	2a01      	cmp	r2, #1
 8006376:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8006378:	d02a      	beq.n	80063d0 <ai_platform_network_process+0x46c>
 800637a:	f106 070c 	add.w	r7, r6, #12
 800637e:	e76f      	b.n	8006260 <ai_platform_network_process+0x2fc>
 8006380:	9d03      	ldr	r5, [sp, #12]
 8006382:	e728      	b.n	80061d6 <ai_platform_network_process+0x272>
 8006384:	9d03      	ldr	r5, [sp, #12]
 8006386:	2219      	movs	r2, #25
 8006388:	2112      	movs	r1, #18
 800638a:	f105 000c 	add.w	r0, r5, #12
 800638e:	f000 f885 	bl	800649c <core_set_error>
 8006392:	2400      	movs	r4, #0
 8006394:	e726      	b.n	80061e4 <ai_platform_network_process+0x280>
 8006396:	9d03      	ldr	r5, [sp, #12]
 8006398:	4604      	mov	r4, r0
 800639a:	2221      	movs	r2, #33	@ 0x21
 800639c:	2112      	movs	r1, #18
 800639e:	f105 000c 	add.w	r0, r5, #12
 80063a2:	f000 f87b 	bl	800649c <core_set_error>
 80063a6:	e71d      	b.n	80061e4 <ai_platform_network_process+0x280>
 80063a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80063ac:	832b      	strh	r3, [r5, #24]
 80063ae:	e752      	b.n	8006256 <ai_platform_network_process+0x2f2>
 80063b0:	2217      	movs	r2, #23
 80063b2:	2113      	movs	r1, #19
 80063b4:	f105 000c 	add.w	r0, r5, #12
 80063b8:	f000 f870 	bl	800649c <core_set_error>
 80063bc:	2400      	movs	r4, #0
 80063be:	e711      	b.n	80061e4 <ai_platform_network_process+0x280>
 80063c0:	2219      	movs	r2, #25
 80063c2:	2113      	movs	r1, #19
 80063c4:	f105 000c 	add.w	r0, r5, #12
 80063c8:	f000 f868 	bl	800649c <core_set_error>
 80063cc:	2400      	movs	r4, #0
 80063ce:	e709      	b.n	80061e4 <ai_platform_network_process+0x280>
 80063d0:	2700      	movs	r7, #0
 80063d2:	e745      	b.n	8006260 <ai_platform_network_process+0x2fc>
 80063d4:	4604      	mov	r4, r0
 80063d6:	2221      	movs	r2, #33	@ 0x21
 80063d8:	2113      	movs	r1, #19
 80063da:	f105 000c 	add.w	r0, r5, #12
 80063de:	f000 f85d 	bl	800649c <core_set_error>
 80063e2:	e6ff      	b.n	80061e4 <ai_platform_network_process+0x280>

080063e4 <ai_platform_observer_register_s>:
 80063e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <ai_platform_observer_register_s+0x70>)
 80063e6:	6802      	ldr	r2, [r0, #0]
 80063e8:	4393      	bics	r3, r2
 80063ea:	d129      	bne.n	8006440 <ai_platform_observer_register_s+0x5c>
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4686      	mov	lr, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	b1f1      	cbz	r1, 8006432 <ai_platform_observer_register_s+0x4e>
 80063f4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80063f6:	bb2b      	cbnz	r3, 8006444 <ai_platform_observer_register_s+0x60>
 80063f8:	81cb      	strh	r3, [r1, #14]
 80063fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80063fc:	f04f 0c01 	mov.w	ip, #1
 8006400:	e008      	b.n	8006414 <ai_platform_observer_register_s+0x30>
 8006402:	f8a4 c00e 	strh.w	ip, [r4, #14]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	fa1f fc81 	uxth.w	ip, r1
 800640e:	d005      	beq.n	800641c <ai_platform_observer_register_s+0x38>
 8006410:	b122      	cbz	r2, 800641c <ai_platform_observer_register_s+0x38>
 8006412:	4613      	mov	r3, r2
 8006414:	f10c 0101 	add.w	r1, ip, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f2      	bne.n	8006402 <ai_platform_observer_register_s+0x1e>
 800641c:	7a23      	ldrb	r3, [r4, #8]
 800641e:	4a0e      	ldr	r2, [pc, #56]	@ (8006458 <ai_platform_observer_register_s+0x74>)
 8006420:	2100      	movs	r1, #0
 8006422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006426:	81a1      	strh	r1, [r4, #12]
 8006428:	60a3      	str	r3, [r4, #8]
 800642a:	e9ce 2410 	strd	r2, r4, [lr, #64]	@ 0x40
 800642e:	2001      	movs	r0, #1
 8006430:	bd10      	pop	{r4, pc}
 8006432:	2211      	movs	r2, #17
 8006434:	2110      	movs	r1, #16
 8006436:	300c      	adds	r0, #12
 8006438:	f000 f830 	bl	800649c <core_set_error>
 800643c:	4620      	mov	r0, r4
 800643e:	bd10      	pop	{r4, pc}
 8006440:	2000      	movs	r0, #0
 8006442:	4770      	bx	lr
 8006444:	2240      	movs	r2, #64	@ 0x40
 8006446:	2111      	movs	r1, #17
 8006448:	300c      	adds	r0, #12
 800644a:	f000 f827 	bl	800649c <core_set_error>
 800644e:	2000      	movs	r0, #0
 8006450:	bd10      	pop	{r4, pc}
 8006452:	bf00      	nop
 8006454:	a1c00100 	.word	0xa1c00100
 8006458:	08005631 	.word	0x08005631

0800645c <ai_platform_observer_unregister_s>:
 800645c:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <ai_platform_observer_unregister_s+0x2c>)
 800645e:	6802      	ldr	r2, [r0, #0]
 8006460:	4393      	bics	r3, r2
 8006462:	d10e      	bne.n	8006482 <ai_platform_observer_unregister_s+0x26>
 8006464:	b510      	push	{r4, lr}
 8006466:	460c      	mov	r4, r1
 8006468:	b121      	cbz	r1, 8006474 <ai_platform_observer_unregister_s+0x18>
 800646a:	2300      	movs	r3, #0
 800646c:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
 8006470:	2001      	movs	r0, #1
 8006472:	bd10      	pop	{r4, pc}
 8006474:	2211      	movs	r2, #17
 8006476:	2110      	movs	r1, #16
 8006478:	300c      	adds	r0, #12
 800647a:	f000 f80f 	bl	800649c <core_set_error>
 800647e:	4620      	mov	r0, r4
 8006480:	bd10      	pop	{r4, pc}
 8006482:	2000      	movs	r0, #0
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	a1c00100 	.word	0xa1c00100

0800648c <core_init>:
 800648c:	2001      	movs	r0, #1
 800648e:	4770      	bx	lr

08006490 <core_get_error>:
 8006490:	4603      	mov	r3, r0
 8006492:	2200      	movs	r2, #0
 8006494:	6800      	ldr	r0, [r0, #0]
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop

0800649c <core_set_error>:
 800649c:	4603      	mov	r3, r0
 800649e:	7800      	ldrb	r0, [r0, #0]
 80064a0:	b108      	cbz	r0, 80064a6 <core_set_error+0xa>
 80064a2:	2000      	movs	r0, #0
 80064a4:	4770      	bx	lr
 80064a6:	7019      	strb	r1, [r3, #0]
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	f362 211f 	bfi	r1, r2, #8, #24
 80064ae:	2001      	movs	r0, #1
 80064b0:	6019      	str	r1, [r3, #0]
 80064b2:	4770      	bx	lr

080064b4 <ai_check_custom_types>:
 80064b4:	b082      	sub	sp, #8
 80064b6:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <ai_check_custom_types+0x50>)
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	b118      	cbz	r0, 80064c4 <ai_check_custom_types+0x10>
 80064bc:	7803      	ldrb	r3, [r0, #0]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d002      	beq.n	80064c8 <ai_check_custom_types+0x14>
 80064c2:	2000      	movs	r0, #0
 80064c4:	b002      	add	sp, #8
 80064c6:	4770      	bx	lr
 80064c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <ai_check_custom_types+0x26>
 80064d0:	2001      	movs	r0, #1
 80064d2:	f080 0001 	eor.w	r0, r0, #1
 80064d6:	b002      	add	sp, #8
 80064d8:	4770      	bx	lr
 80064da:	7842      	ldrb	r2, [r0, #1]
 80064dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f100 0001 	add.w	r0, r0, #1
 80064e6:	d1f3      	bne.n	80064d0 <ai_check_custom_types+0x1c>
 80064e8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80064ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d1ed      	bne.n	80064d0 <ai_check_custom_types+0x1c>
 80064f4:	7842      	ldrb	r2, [r0, #1]
 80064f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d1e8      	bne.n	80064d0 <ai_check_custom_types+0x1c>
 80064fe:	2000      	movs	r0, #0
 8006500:	e7e7      	b.n	80064d2 <ai_check_custom_types+0x1e>
 8006502:	bf00      	nop
 8006504:	84048403 	.word	0x84048403

08006508 <ai_layers_init_all>:
 8006508:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800650a:	2100      	movs	r1, #0
 800650c:	b143      	cbz	r3, 8006520 <ai_layers_init_all+0x18>
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	60d8      	str	r0, [r3, #12]
 8006512:	429a      	cmp	r2, r3
 8006514:	f101 0101 	add.w	r1, r1, #1
 8006518:	d002      	beq.n	8006520 <ai_layers_init_all+0x18>
 800651a:	b10a      	cbz	r2, 8006520 <ai_layers_init_all+0x18>
 800651c:	4613      	mov	r3, r2
 800651e:	e7f5      	b.n	800650c <ai_layers_init_all+0x4>
 8006520:	4608      	mov	r0, r1
 8006522:	4770      	bx	lr

08006524 <ai_layers_post_init_all>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006528:	2500      	movs	r5, #0
 800652a:	b16c      	cbz	r4, 8006548 <ai_layers_post_init_all+0x24>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	07db      	lsls	r3, r3, #31
 8006530:	d504      	bpl.n	800653c <ai_layers_post_init_all+0x18>
 8006532:	6a23      	ldr	r3, [r4, #32]
 8006534:	4620      	mov	r0, r4
 8006536:	b10b      	cbz	r3, 800653c <ai_layers_post_init_all+0x18>
 8006538:	4798      	blx	r3
 800653a:	3501      	adds	r5, #1
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	42a3      	cmp	r3, r4
 8006540:	d002      	beq.n	8006548 <ai_layers_post_init_all+0x24>
 8006542:	b10b      	cbz	r3, 8006548 <ai_layers_post_init_all+0x24>
 8006544:	461c      	mov	r4, r3
 8006546:	e7f0      	b.n	800652a <ai_layers_post_init_all+0x6>
 8006548:	4628      	mov	r0, r5
 800654a:	bd38      	pop	{r3, r4, r5, pc}

0800654c <ai_layers_forward_all>:
 800654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006550:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8006554:	4604      	mov	r4, r0
 8006556:	f1b8 0f00 	cmp.w	r8, #0
 800655a:	d02b      	beq.n	80065b4 <ai_layers_forward_all+0x68>
 800655c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800655e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8006560:	b321      	cbz	r1, 80065ac <ai_layers_forward_all+0x60>
 8006562:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006564:	2001      	movs	r0, #1
 8006566:	47c0      	blx	r8
 8006568:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800656a:	b1fe      	cbz	r6, 80065ac <ai_layers_forward_all+0x60>
 800656c:	2700      	movs	r7, #0
 800656e:	4631      	mov	r1, r6
 8006570:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006572:	2002      	movs	r0, #2
 8006574:	47c0      	blx	r8
 8006576:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8006578:	4628      	mov	r0, r5
 800657a:	696b      	ldr	r3, [r5, #20]
 800657c:	4798      	blx	r3
 800657e:	692e      	ldr	r6, [r5, #16]
 8006580:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006582:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006584:	42b5      	cmp	r5, r6
 8006586:	f04f 0003 	mov.w	r0, #3
 800658a:	d007      	beq.n	800659c <ai_layers_forward_all+0x50>
 800658c:	47c0      	blx	r8
 800658e:	3701      	adds	r7, #1
 8006590:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8006592:	2e00      	cmp	r6, #0
 8006594:	d1eb      	bne.n	800656e <ai_layers_forward_all+0x22>
 8006596:	4638      	mov	r0, r7
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659c:	2003      	movs	r0, #3
 800659e:	47c0      	blx	r8
 80065a0:	2300      	movs	r3, #0
 80065a2:	3701      	adds	r7, #1
 80065a4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80065a6:	4638      	mov	r0, r7
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	2700      	movs	r7, #0
 80065ae:	4638      	mov	r0, r7
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80065b6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	d0f7      	beq.n	80065ac <ai_layers_forward_all+0x60>
 80065bc:	4647      	mov	r7, r8
 80065be:	696b      	ldr	r3, [r5, #20]
 80065c0:	4628      	mov	r0, r5
 80065c2:	4798      	blx	r3
 80065c4:	462b      	mov	r3, r5
 80065c6:	692d      	ldr	r5, [r5, #16]
 80065c8:	429d      	cmp	r5, r3
 80065ca:	d004      	beq.n	80065d6 <ai_layers_forward_all+0x8a>
 80065cc:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80065ce:	3701      	adds	r7, #1
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	d1f4      	bne.n	80065be <ai_layers_forward_all+0x72>
 80065d4:	e7df      	b.n	8006596 <ai_layers_forward_all+0x4a>
 80065d6:	2300      	movs	r3, #0
 80065d8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80065da:	3701      	adds	r7, #1
 80065dc:	e7db      	b.n	8006596 <ai_layers_forward_all+0x4a>
 80065de:	bf00      	nop

080065e0 <ai_layers_destroy_all>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80065e4:	2500      	movs	r5, #0
 80065e6:	b16c      	cbz	r4, 8006604 <ai_layers_destroy_all+0x24>
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	075b      	lsls	r3, r3, #29
 80065ec:	d504      	bpl.n	80065f8 <ai_layers_destroy_all+0x18>
 80065ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80065f0:	4620      	mov	r0, r4
 80065f2:	b10b      	cbz	r3, 80065f8 <ai_layers_destroy_all+0x18>
 80065f4:	4798      	blx	r3
 80065f6:	3501      	adds	r5, #1
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	d002      	beq.n	8006604 <ai_layers_destroy_all+0x24>
 80065fe:	b10b      	cbz	r3, 8006604 <ai_layers_destroy_all+0x24>
 8006600:	461c      	mov	r4, r3
 8006602:	e7f0      	b.n	80065e6 <ai_layers_destroy_all+0x6>
 8006604:	4628      	mov	r0, r5
 8006606:	bd38      	pop	{r3, r4, r5, pc}

08006608 <forward_conv2d_if32of32wf32_nl_pool>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8006610:	b0c3      	sub	sp, #268	@ 0x10c
 8006612:	f8bc 3000 	ldrh.w	r3, [ip]
 8006616:	9321      	str	r3, [sp, #132]	@ 0x84
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8139 	beq.w	8006890 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 800661e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006622:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8006626:	4604      	mov	r4, r0
 8006628:	f1ba 0f00 	cmp.w	sl, #0
 800662c:	d001      	beq.n	8006632 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 800662e:	f8da a000 	ldr.w	sl, [sl]
 8006632:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006634:	2a01      	cmp	r2, #1
 8006636:	f000 812a 	beq.w	800688e <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800663a:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800663e:	f1b9 0f00 	cmp.w	r9, #0
 8006642:	d001      	beq.n	8006648 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8006644:	f8d9 9000 	ldr.w	r9, [r9]
 8006648:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800664a:	2a02      	cmp	r2, #2
 800664c:	f000 811f 	beq.w	800688e <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8006650:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8006654:	8b1b      	ldrh	r3, [r3, #24]
 8006656:	f1b8 0f00 	cmp.w	r8, #0
 800665a:	f000 812d 	beq.w	80068b8 <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 800665e:	2b01      	cmp	r3, #1
 8006660:	f8d8 b000 	ldr.w	fp, [r8]
 8006664:	f240 812e 	bls.w	80068c4 <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 8006668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800666c:	9341      	str	r3, [sp, #260]	@ 0x104
 800666e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8006672:	f8da 200c 	ldr.w	r2, [sl, #12]
 8006676:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800667a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800667c:	f8db e00c 	ldr.w	lr, [fp, #12]
 8006680:	9022      	str	r0, [sp, #136]	@ 0x88
 8006682:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8006686:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006688:	9031      	str	r0, [sp, #196]	@ 0xc4
 800668a:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 800668e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8006690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006692:	f8de 7004 	ldr.w	r7, [lr, #4]
 8006696:	9032      	str	r0, [sp, #200]	@ 0xc8
 8006698:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800669c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80066a0:	9527      	str	r5, [sp, #156]	@ 0x9c
 80066a2:	9628      	str	r6, [sp, #160]	@ 0xa0
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	685e      	ldr	r6, [r3, #4]
 80066a8:	972b      	str	r7, [sp, #172]	@ 0xac
 80066aa:	9134      	str	r1, [sp, #208]	@ 0xd0
 80066ac:	f8de 7008 	ldr.w	r7, [lr, #8]
 80066b0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 80066b4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80066b8:	9529      	str	r5, [sp, #164]	@ 0xa4
 80066ba:	962a      	str	r6, [sp, #168]	@ 0xa8
 80066bc:	9730      	str	r7, [sp, #192]	@ 0xc0
 80066be:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 80066c2:	9033      	str	r0, [sp, #204]	@ 0xcc
 80066c4:	9123      	str	r1, [sp, #140]	@ 0x8c
 80066c6:	9224      	str	r2, [sp, #144]	@ 0x90
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	932f      	str	r3, [sp, #188]	@ 0xbc
 80066ce:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80066d2:	9339      	str	r3, [sp, #228]	@ 0xe4
 80066d4:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 80066d8:	922e      	str	r2, [sp, #184]	@ 0xb8
 80066da:	933c      	str	r3, [sp, #240]	@ 0xf0
 80066dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066de:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 80066e2:	933d      	str	r3, [sp, #244]	@ 0xf4
 80066e4:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 80066e8:	933e      	str	r3, [sp, #248]	@ 0xf8
 80066ea:	f9b2 3000 	ldrsh.w	r3, [r2]
 80066ee:	933f      	str	r3, [sp, #252]	@ 0xfc
 80066f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80066f4:	9340      	str	r3, [sp, #256]	@ 0x100
 80066f6:	6a23      	ldr	r3, [r4, #32]
 80066f8:	9322      	str	r3, [sp, #136]	@ 0x88
 80066fa:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 80066fe:	9335      	str	r3, [sp, #212]	@ 0xd4
 8006700:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8006704:	9336      	str	r3, [sp, #216]	@ 0xd8
 8006706:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 800670a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800670c:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8006710:	9338      	str	r3, [sp, #224]	@ 0xe0
 8006712:	b2ab      	uxth	r3, r5
 8006714:	933a      	str	r3, [sp, #232]	@ 0xe8
 8006716:	b2b3      	uxth	r3, r6
 8006718:	933b      	str	r3, [sp, #236]	@ 0xec
 800671a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 800671e:	9325      	str	r3, [sp, #148]	@ 0x94
 8006720:	b23b      	sxth	r3, r7
 8006722:	9326      	str	r3, [sp, #152]	@ 0x98
 8006724:	f1b8 0f00 	cmp.w	r8, #0
 8006728:	f000 80b4 	beq.w	8006894 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800672c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80b8 	beq.w	80068a6 <forward_conv2d_if32of32wf32_nl_pool+0x29e>
 8006736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	9322      	str	r3, [sp, #136]	@ 0x88
 800673e:	f001 fde7 	bl	8008310 <ai_array_get_byte_size>
 8006742:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006746:	902d      	str	r0, [sp, #180]	@ 0xb4
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80be 	beq.w	80068ca <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 800674e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006752:	f001 fddd 	bl	8008310 <ai_array_get_byte_size>
 8006756:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800675a:	902c      	str	r0, [sp, #176]	@ 0xb0
 800675c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006760:	9321      	str	r3, [sp, #132]	@ 0x84
 8006762:	f8da 1018 	ldr.w	r1, [sl, #24]
 8006766:	f8d9 8018 	ldr.w	r8, [r9, #24]
 800676a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800676c:	6888      	ldr	r0, [r1, #8]
 800676e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006772:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006774:	f8bd 909c 	ldrh.w	r9, [sp, #156]	@ 0x9c
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f8db 2018 	ldr.w	r2, [fp, #24]
 800677e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8006782:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006784:	f8bd e0a0 	ldrh.w	lr, [sp, #160]	@ 0xa0
 8006788:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 800678c:	6892      	ldr	r2, [r2, #8]
 800678e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006792:	b2ad      	uxth	r5, r5
 8006794:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 8006796:	3d01      	subs	r5, #1
 8006798:	fb15 7508 	smlabb	r5, r5, r8, r7
 800679c:	fa0f f885 	sxth.w	r8, r5
 80067a0:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80067a2:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 80067a4:	b2b6      	uxth	r6, r6
 80067a6:	3d01      	subs	r5, #1
 80067a8:	3e01      	subs	r6, #1
 80067aa:	fb16 7605 	smlabb	r6, r6, r5, r7
 80067ae:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80067b0:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80067b2:	eba5 0508 	sub.w	r5, r5, r8
 80067b6:	fa15 f587 	uxtah	r5, r5, r7
 80067ba:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 80067bc:	fa15 f587 	uxtah	r5, r5, r7
 80067c0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80067c2:	fb95 f5f9 	sdiv	r5, r5, r9
 80067c6:	b236      	sxth	r6, r6
 80067c8:	eba7 0906 	sub.w	r9, r7, r6
 80067cc:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80067ce:	fa19 f987 	uxtah	r9, r9, r7
 80067d2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80067d4:	3501      	adds	r5, #1
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	fa19 f987 	uxtah	r9, r9, r7
 80067dc:	b22d      	sxth	r5, r5
 80067de:	fb99 f9fe 	sdiv	r9, r9, lr
 80067e2:	f109 0e01 	add.w	lr, r9, #1
 80067e6:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 80067ea:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 80067ee:	d94e      	bls.n	800688e <forward_conv2d_if32of32wf32_nl_pool+0x286>
 80067f0:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80067f4:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 80067f8:	f1bc 0f00 	cmp.w	ip, #0
 80067fc:	d070      	beq.n	80068e0 <forward_conv2d_if32of32wf32_nl_pool+0x2d8>
 80067fe:	f8dc 7000 	ldr.w	r7, [ip]
 8006802:	b10f      	cbz	r7, 8006808 <forward_conv2d_if32of32wf32_nl_pool+0x200>
 8006804:	69bf      	ldr	r7, [r7, #24]
 8006806:	68bf      	ldr	r7, [r7, #8]
 8006808:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800680a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800680c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800680e:	931e      	str	r3, [sp, #120]	@ 0x78
 8006810:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8006812:	931d      	str	r3, [sp, #116]	@ 0x74
 8006814:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8006816:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006818:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 800681c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800681e:	960e      	str	r6, [sp, #56]	@ 0x38
 8006820:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8006824:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8006826:	9318      	str	r3, [sp, #96]	@ 0x60
 8006828:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800682a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800682c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800682e:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8006832:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8006834:	9312      	str	r3, [sp, #72]	@ 0x48
 8006836:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8006838:	9311      	str	r3, [sp, #68]	@ 0x44
 800683a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800683c:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8006840:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8006842:	930d      	str	r3, [sp, #52]	@ 0x34
 8006844:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8006846:	930c      	str	r3, [sp, #48]	@ 0x30
 8006848:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800684a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800684c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800684e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006850:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006852:	9309      	str	r3, [sp, #36]	@ 0x24
 8006854:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006856:	9308      	str	r3, [sp, #32]
 8006858:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800685a:	9307      	str	r3, [sp, #28]
 800685c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800685e:	9306      	str	r3, [sp, #24]
 8006860:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006862:	9305      	str	r3, [sp, #20]
 8006864:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800686e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8006872:	fa0f f48e 	sxth.w	r4, lr
 8006876:	9414      	str	r4, [sp, #80]	@ 0x50
 8006878:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800687c:	69a4      	ldr	r4, [r4, #24]
 800687e:	68a4      	ldr	r4, [r4, #8]
 8006880:	9400      	str	r4, [sp, #0]
 8006882:	465b      	mov	r3, fp
 8006884:	f000 f986 	bl	8006b94 <forward_lite_conv2d_if32of32wf32_pool>
 8006888:	b043      	add	sp, #268	@ 0x10c
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	2300      	movs	r3, #0
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	deff      	udf	#255	@ 0xff
 8006894:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006896:	b10b      	cbz	r3, 800689c <forward_conv2d_if32of32wf32_nl_pool+0x294>
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	9322      	str	r3, [sp, #136]	@ 0x88
 800689c:	2301      	movs	r3, #1
 800689e:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
 80068a2:	932c      	str	r3, [sp, #176]	@ 0xb0
 80068a4:	e75d      	b.n	8006762 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 80068a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80068a8:	b10b      	cbz	r3, 80068ae <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	9322      	str	r3, [sp, #136]	@ 0x88
 80068ae:	2301      	movs	r3, #1
 80068b0:	2200      	movs	r2, #0
 80068b2:	e9cd 322c 	strd	r3, r2, [sp, #176]	@ 0xb0
 80068b6:	e754      	b.n	8006762 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d90e      	bls.n	80068da <forward_conv2d_if32of32wf32_nl_pool+0x2d2>
 80068bc:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
 80068c0:	46c3      	mov	fp, r8
 80068c2:	e6d6      	b.n	8006672 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 80068c4:	2300      	movs	r3, #0
 80068c6:	9341      	str	r3, [sp, #260]	@ 0x104
 80068c8:	e6d1      	b.n	800666e <forward_conv2d_if32of32wf32_nl_pool+0x66>
 80068ca:	2301      	movs	r3, #1
 80068cc:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80068d0:	932c      	str	r3, [sp, #176]	@ 0xb0
 80068d2:	f8bc 3000 	ldrh.w	r3, [ip]
 80068d6:	9321      	str	r3, [sp, #132]	@ 0x84
 80068d8:	e743      	b.n	8006762 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 80068da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068de:	deff      	udf	#255	@ 0xff
 80068e0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80068e4:	deff      	udf	#255	@ 0xff
 80068e6:	bf00      	nop

080068e8 <forward_dense>:
 80068e8:	6982      	ldr	r2, [r0, #24]
 80068ea:	8813      	ldrh	r3, [r2, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d043      	beq.n	8006978 <forward_dense+0x90>
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	6855      	ldr	r5, [r2, #4]
 80068f6:	6869      	ldr	r1, [r5, #4]
 80068f8:	b08e      	sub	sp, #56	@ 0x38
 80068fa:	b101      	cbz	r1, 80068fe <forward_dense+0x16>
 80068fc:	6809      	ldr	r1, [r1, #0]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d069      	beq.n	80069d6 <forward_dense+0xee>
 8006902:	692a      	ldr	r2, [r5, #16]
 8006904:	b102      	cbz	r2, 8006908 <forward_dense+0x20>
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d061      	beq.n	80069d0 <forward_dense+0xe8>
 800690c:	69ec      	ldr	r4, [r5, #28]
 800690e:	2c00      	cmp	r4, #0
 8006910:	d057      	beq.n	80069c2 <forward_dense+0xda>
 8006912:	8b2e      	ldrh	r6, [r5, #24]
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	2e01      	cmp	r6, #1
 8006918:	d955      	bls.n	80069c6 <forward_dense+0xde>
 800691a:	6864      	ldr	r4, [r4, #4]
 800691c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8006920:	68cf      	ldr	r7, [r1, #12]
 8006922:	68d0      	ldr	r0, [r2, #12]
 8006924:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8006928:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800692c:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8006930:	f8d9 0000 	ldr.w	r0, [r9]
 8006934:	2b03      	cmp	r3, #3
 8006936:	fb06 f807 	mul.w	r8, r6, r7
 800693a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800693e:	d044      	beq.n	80069ca <forward_dense+0xe2>
 8006940:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8006942:	b11d      	cbz	r5, 800694c <forward_dense+0x64>
 8006944:	682d      	ldr	r5, [r5, #0]
 8006946:	b10d      	cbz	r5, 800694c <forward_dense+0x64>
 8006948:	69ab      	ldr	r3, [r5, #24]
 800694a:	689d      	ldr	r5, [r3, #8]
 800694c:	6992      	ldr	r2, [r2, #24]
 800694e:	698b      	ldr	r3, [r1, #24]
 8006950:	6890      	ldr	r0, [r2, #8]
 8006952:	6899      	ldr	r1, [r3, #8]
 8006954:	b10c      	cbz	r4, 800695a <forward_dense+0x72>
 8006956:	69a3      	ldr	r3, [r4, #24]
 8006958:	689c      	ldr	r4, [r3, #8]
 800695a:	4b20      	ldr	r3, [pc, #128]	@ (80069dc <forward_dense+0xf4>)
 800695c:	459c      	cmp	ip, r3
 800695e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8006962:	d023      	beq.n	80069ac <forward_dense+0xc4>
 8006964:	4e1e      	ldr	r6, [pc, #120]	@ (80069e0 <forward_dense+0xf8>)
 8006966:	45b4      	cmp	ip, r6
 8006968:	d015      	beq.n	8006996 <forward_dense+0xae>
 800696a:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800696e:	459c      	cmp	ip, r3
 8006970:	d004      	beq.n	800697c <forward_dense+0x94>
 8006972:	b00e      	add	sp, #56	@ 0x38
 8006974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	deff      	udf	#255	@ 0xff
 800697c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8006980:	a807      	add	r0, sp, #28
 8006982:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8006986:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800698a:	9209      	str	r2, [sp, #36]	@ 0x24
 800698c:	f000 fff8 	bl	8007980 <forward_lite_dense_if32of32wf32>
 8006990:	b00e      	add	sp, #56	@ 0x38
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	e9cd e803 	strd	lr, r8, [sp, #12]
 800699a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800699e:	9500      	str	r5, [sp, #0]
 80069a0:	464b      	mov	r3, r9
 80069a2:	f001 f947 	bl	8007c34 <forward_lite_dense_if32of32wf32_lut4>
 80069a6:	b00e      	add	sp, #56	@ 0x38
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	e9cd e803 	strd	lr, r8, [sp, #12]
 80069b0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80069b4:	9500      	str	r5, [sp, #0]
 80069b6:	464b      	mov	r3, r9
 80069b8:	f001 fa64 	bl	8007e84 <forward_lite_dense_if32of32wf32_lut8>
 80069bc:	b00e      	add	sp, #56	@ 0x38
 80069be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c2:	4620      	mov	r0, r4
 80069c4:	e7aa      	b.n	800691c <forward_dense+0x34>
 80069c6:	2400      	movs	r4, #0
 80069c8:	e7a8      	b.n	800691c <forward_dense+0x34>
 80069ca:	2300      	movs	r3, #0
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	deff      	udf	#255	@ 0xff
 80069d0:	2300      	movs	r3, #0
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	deff      	udf	#255	@ 0xff
 80069d6:	2300      	movs	r3, #0
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	deff      	udf	#255	@ 0xff
 80069dc:	01d01040 	.word	0x01d01040
 80069e0:	01e81040 	.word	0x01e81040

080069e4 <forward_relu>:
 80069e4:	6982      	ldr	r2, [r0, #24]
 80069e6:	8813      	ldrh	r3, [r2, #0]
 80069e8:	b323      	cbz	r3, 8006a34 <forward_relu+0x50>
 80069ea:	6851      	ldr	r1, [r2, #4]
 80069ec:	684a      	ldr	r2, [r1, #4]
 80069ee:	b102      	cbz	r2, 80069f2 <forward_relu+0xe>
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	f000 808d 	beq.w	8006b12 <forward_relu+0x12e>
 80069f8:	b470      	push	{r4, r5, r6}
 80069fa:	6909      	ldr	r1, [r1, #16]
 80069fc:	b101      	cbz	r1, 8006a00 <forward_relu+0x1c>
 80069fe:	6809      	ldr	r1, [r1, #0]
 8006a00:	69c6      	ldr	r6, [r0, #28]
 8006a02:	b1ce      	cbz	r6, 8006a38 <forward_relu+0x54>
 8006a04:	6873      	ldr	r3, [r6, #4]
 8006a06:	6988      	ldr	r0, [r1, #24]
 8006a08:	6991      	ldr	r1, [r2, #24]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d044      	beq.n	8006a98 <forward_relu+0xb4>
 8006a0e:	6893      	ldr	r3, [r2, #8]
 8006a10:	6880      	ldr	r0, [r0, #8]
 8006a12:	6889      	ldr	r1, [r1, #8]
 8006a14:	0a1b      	lsrs	r3, r3, #8
 8006a16:	d073      	beq.n	8006b00 <forward_relu+0x11c>
 8006a18:	68d5      	ldr	r5, [r2, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006a20:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006a24:	429d      	cmp	r5, r3
 8006a26:	fb04 f202 	mul.w	r2, r4, r2
 8006a2a:	d1f9      	bne.n	8006a20 <forward_relu+0x3c>
 8006a2c:	68b3      	ldr	r3, [r6, #8]
 8006a2e:	bc70      	pop	{r4, r5, r6}
 8006a30:	f000 bd00 	b.w	8007434 <forward_lite_nl_relu_generic_if32of32_kernel>
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	deff      	udf	#255	@ 0xff
 8006a38:	6893      	ldr	r3, [r2, #8]
 8006a3a:	6989      	ldr	r1, [r1, #24]
 8006a3c:	6990      	ldr	r0, [r2, #24]
 8006a3e:	6889      	ldr	r1, [r1, #8]
 8006a40:	6884      	ldr	r4, [r0, #8]
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	d05e      	beq.n	8006b04 <forward_relu+0x120>
 8006a46:	68d5      	ldr	r5, [r2, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006a4e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8006a52:	429d      	cmp	r5, r3
 8006a54:	fb00 f202 	mul.w	r2, r0, r2
 8006a58:	d1f9      	bne.n	8006a4e <forward_relu+0x6a>
 8006a5a:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006a64:	4294      	cmp	r4, r2
 8006a66:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006a6a:	d813      	bhi.n	8006a94 <forward_relu+0xb0>
 8006a6c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006b18 <forward_relu+0x134>
 8006a70:	3204      	adds	r2, #4
 8006a72:	3104      	adds	r1, #4
 8006a74:	4613      	mov	r3, r2
 8006a76:	ed72 7a01 	vldmdb	r2!, {s15}
 8006a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a82:	f1a3 0308 	sub.w	r3, r3, #8
 8006a86:	bfb8      	it	lt
 8006a88:	eef0 7a47 	vmovlt.f32	s15, s14
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	ed61 7a01 	vstmdb	r1!, {s15}
 8006a92:	d9ef      	bls.n	8006a74 <forward_relu+0x90>
 8006a94:	bc70      	pop	{r4, r5, r6}
 8006a96:	4770      	bx	lr
 8006a98:	688c      	ldr	r4, [r1, #8]
 8006a9a:	6891      	ldr	r1, [r2, #8]
 8006a9c:	6880      	ldr	r0, [r0, #8]
 8006a9e:	0a09      	lsrs	r1, r1, #8
 8006aa0:	d032      	beq.n	8006b08 <forward_relu+0x124>
 8006aa2:	68d5      	ldr	r5, [r2, #12]
 8006aa4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8006aa8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006aac:	4295      	cmp	r5, r2
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	d1f9      	bne.n	8006aa8 <forward_relu+0xc4>
 8006ab4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8006ab8:	3a01      	subs	r2, #1
 8006aba:	68b1      	ldr	r1, [r6, #8]
 8006abc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	ed91 7a00 	vldr	s14, [r1]
 8006ac6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006aca:	d8e3      	bhi.n	8006a94 <forward_relu+0xb0>
 8006acc:	2500      	movs	r5, #0
 8006ace:	3304      	adds	r3, #4
 8006ad0:	1d02      	adds	r2, r0, #4
 8006ad2:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	f1a3 0104 	sub.w	r1, r3, #4
 8006ae2:	f1a3 0308 	sub.w	r3, r3, #8
 8006ae6:	d405      	bmi.n	8006af4 <forward_relu+0x110>
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006aee:	d8d1      	bhi.n	8006a94 <forward_relu+0xb0>
 8006af0:	460b      	mov	r3, r1
 8006af2:	e7ee      	b.n	8006ad2 <forward_relu+0xee>
 8006af4:	429c      	cmp	r4, r3
 8006af6:	ed62 7a01 	vstmdb	r2!, {s15}
 8006afa:	d8cb      	bhi.n	8006a94 <forward_relu+0xb0>
 8006afc:	460b      	mov	r3, r1
 8006afe:	e7e8      	b.n	8006ad2 <forward_relu+0xee>
 8006b00:	2201      	movs	r2, #1
 8006b02:	e793      	b.n	8006a2c <forward_relu+0x48>
 8006b04:	4622      	mov	r2, r4
 8006b06:	e7b1      	b.n	8006a6c <forward_relu+0x88>
 8006b08:	68b2      	ldr	r2, [r6, #8]
 8006b0a:	4623      	mov	r3, r4
 8006b0c:	ed92 7a00 	vldr	s14, [r2]
 8006b10:	e7dc      	b.n	8006acc <forward_relu+0xe8>
 8006b12:	2300      	movs	r3, #0
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	deff      	udf	#255	@ 0xff
 8006b18:	00000000 	.word	0x00000000

08006b1c <forward_sm>:
 8006b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b20:	6982      	ldr	r2, [r0, #24]
 8006b22:	8813      	ldrh	r3, [r2, #0]
 8006b24:	b383      	cbz	r3, 8006b88 <forward_sm+0x6c>
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	6855      	ldr	r5, [r2, #4]
 8006b2a:	b105      	cbz	r5, 8006b2e <forward_sm+0x12>
 8006b2c:	682d      	ldr	r5, [r5, #0]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d029      	beq.n	8006b86 <forward_sm+0x6a>
 8006b32:	6913      	ldr	r3, [r2, #16]
 8006b34:	b363      	cbz	r3, 8006b90 <forward_sm+0x74>
 8006b36:	681e      	ldr	r6, [r3, #0]
 8006b38:	68a9      	ldr	r1, [r5, #8]
 8006b3a:	68ec      	ldr	r4, [r5, #12]
 8006b3c:	68f3      	ldr	r3, [r6, #12]
 8006b3e:	6867      	ldr	r7, [r4, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	0a09      	lsrs	r1, r1, #8
 8006b44:	d022      	beq.n	8006b8c <forward_sm+0x70>
 8006b46:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8006b50:	428c      	cmp	r4, r1
 8006b52:	fb00 f303 	mul.w	r3, r0, r3
 8006b56:	d1f9      	bne.n	8006b4c <forward_sm+0x30>
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	69a8      	ldr	r0, [r5, #24]
 8006b5c:	69b1      	ldr	r1, [r6, #24]
 8006b5e:	6884      	ldr	r4, [r0, #8]
 8006b60:	688e      	ldr	r6, [r1, #8]
 8006b62:	18e5      	adds	r5, r4, r3
 8006b64:	42ac      	cmp	r4, r5
 8006b66:	d20c      	bcs.n	8006b82 <forward_sm+0x66>
 8006b68:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8006b6c:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8006b70:	4621      	mov	r1, r4
 8006b72:	4630      	mov	r0, r6
 8006b74:	463a      	mov	r2, r7
 8006b76:	444c      	add	r4, r9
 8006b78:	f000 fc12 	bl	80073a0 <forward_lite_nl_softmax_if32of32_kernel>
 8006b7c:	42a5      	cmp	r5, r4
 8006b7e:	4446      	add	r6, r8
 8006b80:	d8f6      	bhi.n	8006b70 <forward_sm+0x54>
 8006b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b86:	2300      	movs	r3, #0
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	deff      	udf	#255	@ 0xff
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	e7e4      	b.n	8006b5a <forward_sm+0x3e>
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	deff      	udf	#255	@ 0xff

08006b94 <forward_lite_conv2d_if32of32wf32_pool>:
 8006b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	ed2d 8b02 	vpush	{d8}
 8006b9c:	b0c9      	sub	sp, #292	@ 0x124
 8006b9e:	4696      	mov	lr, r2
 8006ba0:	f9bd 519c 	ldrsh.w	r5, [sp, #412]	@ 0x19c
 8006ba4:	9323      	str	r3, [sp, #140]	@ 0x8c
 8006ba6:	f9bd 31bc 	ldrsh.w	r3, [sp, #444]	@ 0x1bc
 8006baa:	9137      	str	r1, [sp, #220]	@ 0xdc
 8006bac:	f9bd 115c 	ldrsh.w	r1, [sp, #348]	@ 0x15c
 8006bb0:	9238      	str	r2, [sp, #224]	@ 0xe0
 8006bb2:	fb05 f203 	mul.w	r2, r5, r3
 8006bb6:	9129      	str	r1, [sp, #164]	@ 0xa4
 8006bb8:	460e      	mov	r6, r1
 8006bba:	fb01 f202 	mul.w	r2, r1, r2
 8006bbe:	f9bd 1164 	ldrsh.w	r1, [sp, #356]	@ 0x164
 8006bc2:	f9bd 416c 	ldrsh.w	r4, [sp, #364]	@ 0x16c
 8006bc6:	f8bd c180 	ldrh.w	ip, [sp, #384]	@ 0x180
 8006bca:	9142      	str	r1, [sp, #264]	@ 0x108
 8006bcc:	f9bd 1170 	ldrsh.w	r1, [sp, #368]	@ 0x170
 8006bd0:	f9bd 7160 	ldrsh.w	r7, [sp, #352]	@ 0x160
 8006bd4:	932d      	str	r3, [sp, #180]	@ 0xb4
 8006bd6:	942a      	str	r4, [sp, #168]	@ 0xa8
 8006bd8:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	@ 0x168
 8006bdc:	f9bd 4158 	ldrsh.w	r4, [sp, #344]	@ 0x158
 8006be0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006be2:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8006be6:	f8bd 1178 	ldrh.w	r1, [sp, #376]	@ 0x178
 8006bea:	f8bd c184 	ldrh.w	ip, [sp, #388]	@ 0x184
 8006bee:	9041      	str	r0, [sp, #260]	@ 0x104
 8006bf0:	9339      	str	r3, [sp, #228]	@ 0xe4
 8006bf2:	912b      	str	r1, [sp, #172]	@ 0xac
 8006bf4:	f9bd 9174 	ldrsh.w	r9, [sp, #372]	@ 0x174
 8006bf8:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	9418      	str	r4, [sp, #96]	@ 0x60
 8006bfe:	f8bd 017c 	ldrh.w	r0, [sp, #380]	@ 0x17c
 8006c02:	9714      	str	r7, [sp, #80]	@ 0x50
 8006c04:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8006c08:	f9bd c188 	ldrsh.w	ip, [sp, #392]	@ 0x188
 8006c0c:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 8006c10:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 8006c14:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 8006c18:	4243      	negs	r3, r0
 8006c1a:	f9bd c1c0 	ldrsh.w	ip, [sp, #448]	@ 0x1c0
 8006c1e:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8006c22:	931e      	str	r3, [sp, #120]	@ 0x78
 8006c24:	f9bd c1c4 	ldrsh.w	ip, [sp, #452]	@ 0x1c4
 8006c28:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006c2a:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8006c2e:	f9bd c1c8 	ldrsh.w	ip, [sp, #456]	@ 0x1c8
 8006c32:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f9bd c1cc 	ldrsh.w	ip, [sp, #460]	@ 0x1cc
 8006c3c:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8006c40:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8006c44:	f340 80a7 	ble.w	8006d96 <forward_lite_conv2d_if32of32wf32_pool+0x202>
 8006c48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c4a:	ed9f 8a55 	vldr	s16, [pc, #340]	@ 8006da0 <forward_lite_conv2d_if32of32wf32_pool+0x20c>
 8006c4e:	fb03 f309 	mul.w	r3, r3, r9
 8006c52:	fb04 f303 	mul.w	r3, r4, r3
 8006c56:	3901      	subs	r1, #1
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	fa1f fc81 	uxth.w	ip, r1
 8006c5e:	4631      	mov	r1, r6
 8006c60:	b2b6      	uxth	r6, r6
 8006c62:	9324      	str	r3, [sp, #144]	@ 0x90
 8006c64:	1e73      	subs	r3, r6, #1
 8006c66:	e9cd 0c20 	strd	r0, ip, [sp, #128]	@ 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8006c6e:	963f      	str	r6, [sp, #252]	@ 0xfc
 8006c70:	3301      	adds	r3, #1
 8006c72:	009e      	lsls	r6, r3, #2
 8006c74:	fb00 f301 	mul.w	r3, r0, r1
 8006c78:	fb05 f303 	mul.w	r3, r5, r3
 8006c7c:	0098      	lsls	r0, r3, #2
 8006c7e:	903d      	str	r0, [sp, #244]	@ 0xf4
 8006c80:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8006c82:	9635      	str	r6, [sp, #212]	@ 0xd4
 8006c84:	fb00 f307 	mul.w	r3, r0, r7
 8006c88:	fb04 f303 	mul.w	r3, r4, r3
 8006c8c:	0098      	lsls	r0, r3, #2
 8006c8e:	9034      	str	r0, [sp, #208]	@ 0xd0
 8006c90:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8006c92:	0090      	lsls	r0, r2, #2
 8006c94:	9033      	str	r0, [sp, #204]	@ 0xcc
 8006c96:	9854      	ldr	r0, [sp, #336]	@ 0x150
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006ca0:	0098      	lsls	r0, r3, #2
 8006ca2:	00a6      	lsls	r6, r4, #2
 8006ca4:	903b      	str	r0, [sp, #236]	@ 0xec
 8006ca6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8006ca8:	9616      	str	r6, [sp, #88]	@ 0x58
 8006caa:	fb07 f306 	mul.w	r3, r7, r6
 8006cae:	fb00 8703 	mla	r7, r0, r3, r8
 8006cb2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8006cb4:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8006cb6:	9722      	str	r7, [sp, #136]	@ 0x88
 8006cb8:	425f      	negs	r7, r3
 8006cba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006cbc:	921f      	str	r2, [sp, #124]	@ 0x7c
 8006cbe:	fb05 f501 	mul.w	r5, r5, r1
 8006cc2:	0089      	lsls	r1, r1, #2
 8006cc4:	fb03 f304 	mul.w	r3, r3, r4
 8006cc8:	9112      	str	r1, [sp, #72]	@ 0x48
 8006cca:	4241      	negs	r1, r0
 8006ccc:	009c      	lsls	r4, r3, #2
 8006cce:	9125      	str	r1, [sp, #148]	@ 0x94
 8006cd0:	fb06 f107 	mul.w	r1, r6, r7
 8006cd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006cd6:	9417      	str	r4, [sp, #92]	@ 0x5c
 8006cd8:	953c      	str	r5, [sp, #240]	@ 0xf0
 8006cda:	2400      	movs	r4, #0
 8006cdc:	9136      	str	r1, [sp, #216]	@ 0xd8
 8006cde:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8006ce2:	9954      	ldr	r1, [sp, #336]	@ 0x150
 8006ce4:	9731      	str	r7, [sp, #196]	@ 0xc4
 8006ce6:	9428      	str	r4, [sp, #160]	@ 0xa0
 8006ce8:	953a      	str	r5, [sp, #232]	@ 0xe8
 8006cea:	911b      	str	r1, [sp, #108]	@ 0x6c
 8006cec:	9332      	str	r3, [sp, #200]	@ 0xc8
 8006cee:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 8006cf0:	932f      	str	r3, [sp, #188]	@ 0xbc
 8006cf2:	1e53      	subs	r3, r2, #1
 8006cf4:	9427      	str	r4, [sp, #156]	@ 0x9c
 8006cf6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006cf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	dc68      	bgt.n	8006dd4 <forward_lite_conv2d_if32of32wf32_pool+0x240>
 8006d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d04:	041b      	lsls	r3, r3, #16
 8006d06:	f100 81d4 	bmi.w	80070b2 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8006d0a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8006d0c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8006d0e:	4282      	cmp	r2, r0
 8006d10:	dc48      	bgt.n	8006da4 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 8006d12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006d14:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8006d16:	9108      	str	r1, [sp, #32]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	b21c      	sxth	r4, r3
 8006d1c:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8006d1e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8006d20:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 8006d22:	9427      	str	r4, [sp, #156]	@ 0x9c
 8006d24:	18cb      	adds	r3, r1, r3
 8006d26:	9337      	str	r3, [sp, #220]	@ 0xdc
 8006d28:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8006d2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006d2c:	440b      	add	r3, r1
 8006d2e:	931e      	str	r3, [sp, #120]	@ 0x78
 8006d30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d32:	1a5b      	subs	r3, r3, r1
 8006d34:	9320      	str	r3, [sp, #128]	@ 0x80
 8006d36:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8006d38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d3a:	440b      	add	r3, r1
 8006d3c:	9322      	str	r3, [sp, #136]	@ 0x88
 8006d3e:	b293      	uxth	r3, r2
 8006d40:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	b2bb      	uxth	r3, r7
 8006d4a:	1ac1      	subs	r1, r0, r3
 8006d4c:	9305      	str	r3, [sp, #20]
 8006d4e:	b20b      	sxth	r3, r1
 8006d50:	931d      	str	r3, [sp, #116]	@ 0x74
 8006d52:	b2b3      	uxth	r3, r6
 8006d54:	9303      	str	r3, [sp, #12]
 8006d56:	2301      	movs	r3, #1
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 8006d5e:	9306      	str	r3, [sp, #24]
 8006d60:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 8006d6a:	9302      	str	r3, [sp, #8]
 8006d6c:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8006d70:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8006d78:	9854      	ldr	r0, [sp, #336]	@ 0x150
 8006d7a:	9d6d      	ldr	r5, [sp, #436]	@ 0x1b4
 8006d7c:	47a8      	blx	r5
 8006d7e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d80:	1bf3      	subs	r3, r6, r7
 8006d82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d86:	b21b      	sxth	r3, r3
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	9332      	str	r3, [sp, #200]	@ 0xc8
 8006d8c:	b293      	uxth	r3, r2
 8006d8e:	9321      	str	r3, [sp, #132]	@ 0x84
 8006d90:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	dcb0      	bgt.n	8006cf8 <forward_lite_conv2d_if32of32wf32_pool+0x164>
 8006d96:	b049      	add	sp, #292	@ 0x124
 8006d98:	ecbd 8b02 	vpop	{d8}
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	00000000 	.word	0x00000000
 8006da4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006da6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8006da8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	9321      	str	r3, [sp, #132]	@ 0x84
 8006db0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006db2:	440a      	add	r2, r1
 8006db4:	1a5b      	subs	r3, r3, r1
 8006db6:	921e      	str	r2, [sp, #120]	@ 0x78
 8006db8:	9320      	str	r3, [sp, #128]	@ 0x80
 8006dba:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8006dbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dbe:	4413      	add	r3, r2
 8006dc0:	9322      	str	r3, [sp, #136]	@ 0x88
 8006dc2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006dc4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	dde5      	ble.n	8006d96 <forward_lite_conv2d_if32of32wf32_pool+0x202>
 8006dca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dd96      	ble.n	8006d02 <forward_lite_conv2d_if32of32wf32_pool+0x16e>
 8006dd4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f2c0 82cc 	blt.w	8007374 <forward_lite_conv2d_if32of32wf32_pool+0x7e0>
 8006ddc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dde:	931c      	str	r3, [sp, #112]	@ 0x70
 8006de0:	2300      	movs	r3, #0
 8006de2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006de4:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8006de6:	440a      	add	r2, r1
 8006de8:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8006dea:	428a      	cmp	r2, r1
 8006dec:	bfd4      	ite	le
 8006dee:	ebc3 0b02 	rsble	fp, r3, r2
 8006df2:	ebc3 0b01 	rsbgt	fp, r3, r1
 8006df6:	9a55      	ldr	r2, [sp, #340]	@ 0x154
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	f000 819c 	beq.w	8007136 <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 8006dfe:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8006e00:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8006e04:	f0c0 8197 	bcc.w	8007136 <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 8006e08:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	f340 8117 	ble.w	800703e <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8006e10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e12:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8006e14:	fb02 f303 	mul.w	r3, r2, r3
 8006e18:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e1a:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8006e1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e1e:	9326      	str	r3, [sp, #152]	@ 0x98
 8006e20:	189a      	adds	r2, r3, r2
 8006e22:	923e      	str	r2, [sp, #248]	@ 0xf8
 8006e24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e28:	9330      	str	r3, [sp, #192]	@ 0xc0
 8006e2a:	440a      	add	r2, r1
 8006e2c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8006e2e:	9240      	str	r2, [sp, #256]	@ 0x100
 8006e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e34:	9955      	ldr	r1, [sp, #340]	@ 0x154
 8006e36:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8006e38:	f001 f974 	bl	8008124 <st_int8_copy>
 8006e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8134 	beq.w	80070ac <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8006e44:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8006e46:	ecf3 1a01 	vldmia	r3!, {s3}
 8006e4a:	9330      	str	r3, [sp, #192]	@ 0xc0
 8006e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80ea 	beq.w	8007028 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8006e54:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8006e56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e58:	189a      	adds	r2, r3, r2
 8006e5a:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e5c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8006e5e:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8006e62:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006e64:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e66:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f2c0 8115 	blt.w	80070a0 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8006e76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8006e7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e80:	9c55      	ldr	r4, [sp, #340]	@ 0x154
 8006e82:	4298      	cmp	r0, r3
 8006e84:	bf94      	ite	ls
 8006e86:	ebc6 0600 	rsbls	r6, r6, r0
 8006e8a:	ebc6 0603 	rsbhi	r6, r6, r3
 8006e8e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e90:	eba0 0906 	sub.w	r9, r0, r6
 8006e94:	fb02 4203 	mla	r2, r2, r3, r4
 8006e98:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006e9a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8006e9c:	f1bb 0f00 	cmp.w	fp, #0
 8006ea0:	eba4 0a06 	sub.w	sl, r4, r6
 8006ea4:	eeb0 7a61 	vmov.f32	s14, s3
 8006ea8:	fb00 f606 	mul.w	r6, r0, r6
 8006eac:	f340 80a1 	ble.w	8006ff2 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 8006eb0:	f026 070f 	bic.w	r7, r6, #15
 8006eb4:	f107 38ff 	add.w	r8, r7, #4294967295
 8006eb8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006ebc:	f108 0801 	add.w	r8, r8, #1
 8006ec0:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8006ec4:	fb0a fa03 	mul.w	sl, sl, r3
 8006ec8:	fb09 f903 	mul.w	r9, r9, r3
 8006ecc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006ed0:	f04f 0c00 	mov.w	ip, #0
 8006ed4:	2f00      	cmp	r7, #0
 8006ed6:	bfd8      	it	le
 8006ed8:	2500      	movle	r5, #0
 8006eda:	dd70      	ble.n	8006fbe <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8006edc:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8006ee0:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8006ee4:	2400      	movs	r4, #0
 8006ee6:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8006eea:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8006eee:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 8006ef2:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8006ef6:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 8006efa:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 8006efe:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 8006f02:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8006f06:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 8006f0a:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 8006f0e:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 8006f12:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 8006f16:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8006f1a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006f1e:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8006f22:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f26:	3410      	adds	r4, #16
 8006f28:	42bc      	cmp	r4, r7
 8006f2a:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8006f2e:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8006f32:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f36:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8006f3a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8006f3e:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8006f42:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 8006f46:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006f4a:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8006f4e:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8006f52:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006f56:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 8006f5a:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8006f5e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f62:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 8006f66:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8006f6a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006f6e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8006f72:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8006f76:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006f7a:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8006f7e:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006f82:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006f86:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8006f8a:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8006f8e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f92:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8006f96:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8006f9a:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006f9e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006fa2:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006fa6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006faa:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006fae:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fb6:	db96      	blt.n	8006ee6 <forward_lite_conv2d_if32of32wf32_pool+0x352>
 8006fb8:	4471      	add	r1, lr
 8006fba:	4472      	add	r2, lr
 8006fbc:	4645      	mov	r5, r8
 8006fbe:	42ae      	cmp	r6, r5
 8006fc0:	dd10      	ble.n	8006fe4 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	ecf0 6a01 	vldmia	r0!, {s13}
 8006fcc:	ecf4 7a01 	vldmia	r4!, {s15}
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	429e      	cmp	r6, r3
 8006fd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006fd8:	d1f6      	bne.n	8006fc8 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8006fda:	1b75      	subs	r5, r6, r5
 8006fdc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006fe0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006fe4:	f10c 0c01 	add.w	ip, ip, #1
 8006fe8:	45e3      	cmp	fp, ip
 8006fea:	4451      	add	r1, sl
 8006fec:	444a      	add	r2, r9
 8006fee:	f47f af71 	bne.w	8006ed4 <forward_lite_conv2d_if32of32wf32_pool+0x340>
 8006ff2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ff4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006ff6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006ff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ffa:	ed81 7a00 	vstr	s14, [r1]
 8006ffe:	4410      	add	r0, r2
 8007000:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007002:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007004:	4401      	add	r1, r0
 8007006:	9110      	str	r1, [sp, #64]	@ 0x40
 8007008:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800700a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800700c:	1a89      	subs	r1, r1, r2
 800700e:	910e      	str	r1, [sp, #56]	@ 0x38
 8007010:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007012:	4401      	add	r1, r0
 8007014:	910d      	str	r1, [sp, #52]	@ 0x34
 8007016:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007018:	1a8a      	subs	r2, r1, r2
 800701a:	920c      	str	r2, [sp, #48]	@ 0x30
 800701c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800701e:	3301      	adds	r3, #1
 8007020:	429a      	cmp	r2, r3
 8007022:	9311      	str	r3, [sp, #68]	@ 0x44
 8007024:	f47f af23 	bne.w	8006e6e <forward_lite_conv2d_if32of32wf32_pool+0x2da>
 8007028:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800702a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800702c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800702e:	440a      	add	r2, r1
 8007030:	921a      	str	r2, [sp, #104]	@ 0x68
 8007032:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8007034:	3304      	adds	r3, #4
 8007036:	4293      	cmp	r3, r2
 8007038:	9326      	str	r3, [sp, #152]	@ 0x98
 800703a:	f47f aefa 	bne.w	8006e32 <forward_lite_conv2d_if32of32wf32_pool+0x29e>
 800703e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007040:	2b00      	cmp	r3, #0
 8007042:	dd28      	ble.n	8007096 <forward_lite_conv2d_if32of32wf32_pool+0x502>
 8007044:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 8198 	beq.w	800737c <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 800704c:	e9dd 6a6a 	ldrd	r6, sl, [sp, #424]	@ 0x1a8
 8007050:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 8007052:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 8007056:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8007058:	f8dd b1b0 	ldr.w	fp, [sp, #432]	@ 0x1b0
 800705c:	4699      	mov	r9, r3
 800705e:	2400      	movs	r4, #0
 8007060:	462b      	mov	r3, r5
 8007062:	463a      	mov	r2, r7
 8007064:	4455      	add	r5, sl
 8007066:	4641      	mov	r1, r8
 8007068:	4640      	mov	r0, r8
 800706a:	47c8      	blx	r9
 800706c:	1bab      	subs	r3, r5, r6
 800706e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007070:	455b      	cmp	r3, fp
 8007072:	bfa8      	it	ge
 8007074:	4635      	movge	r5, r6
 8007076:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007078:	4490      	add	r8, r2
 800707a:	4543      	cmp	r3, r8
 800707c:	bf98      	it	ls
 800707e:	9b25      	ldrls	r3, [sp, #148]	@ 0x94
 8007080:	f104 0401 	add.w	r4, r4, #1
 8007084:	bf98      	it	ls
 8007086:	4498      	addls	r8, r3
 8007088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800708a:	b224      	sxth	r4, r4
 800708c:	42a3      	cmp	r3, r4
 800708e:	d1e7      	bne.n	8007060 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 8007090:	952f      	str	r5, [sp, #188]	@ 0xbc
 8007092:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 8007096:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007098:	3301      	adds	r3, #1
 800709a:	b21b      	sxth	r3, r3
 800709c:	931d      	str	r3, [sp, #116]	@ 0x74
 800709e:	e634      	b.n	8006d0a <forward_lite_conv2d_if32of32wf32_pool+0x176>
 80070a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070a4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80070a6:	4616      	mov	r6, r2
 80070a8:	189a      	adds	r2, r3, r2
 80070aa:	e6e7      	b.n	8006e7c <forward_lite_conv2d_if32of32wf32_pool+0x2e8>
 80070ac:	eef0 1a48 	vmov.f32	s3, s16
 80070b0:	e6cc      	b.n	8006e4c <forward_lite_conv2d_if32of32wf32_pool+0x2b8>
 80070b2:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 80070b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070bc:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 80070c0:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 80070c2:	429a      	cmp	r2, r3
 80070c4:	bf84      	itt	hi
 80070c6:	9a33      	ldrhi	r2, [sp, #204]	@ 0xcc
 80070c8:	189b      	addhi	r3, r3, r2
 80070ca:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d217      	bcs.n	8007100 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80070d0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80070d2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80070d4:	428a      	cmp	r2, r1
 80070d6:	d013      	beq.n	8007100 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80070d8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d910      	bls.n	8007100 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80070de:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80070e0:	461a      	mov	r2, r3
 80070e2:	f852 0b04 	ldr.w	r0, [r2], #4
 80070e6:	f841 0b04 	str.w	r0, [r1], #4
 80070ea:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80070ec:	4290      	cmp	r0, r2
 80070ee:	d8f8      	bhi.n	80070e2 <forward_lite_conv2d_if32of32wf32_pool+0x54e>
 80070f0:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f023 0303 	bic.w	r3, r3, #3
 80070f8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070fa:	3304      	adds	r3, #4
 80070fc:	441a      	add	r2, r3
 80070fe:	921b      	str	r2, [sp, #108]	@ 0x6c
 8007100:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8007102:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8007104:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8007108:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 800710a:	440a      	add	r2, r1
 800710c:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	b212      	sxth	r2, r2
 8007112:	440b      	add	r3, r1
 8007114:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007116:	9228      	str	r2, [sp, #160]	@ 0xa0
 8007118:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800711a:	4401      	add	r1, r0
 800711c:	b21b      	sxth	r3, r3
 800711e:	428a      	cmp	r2, r1
 8007120:	931d      	str	r3, [sp, #116]	@ 0x74
 8007122:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007124:	460b      	mov	r3, r1
 8007126:	f63f adf0 	bhi.w	8006d0a <forward_lite_conv2d_if32of32wf32_pool+0x176>
 800712a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800712c:	440b      	add	r3, r1
 800712e:	429a      	cmp	r2, r3
 8007130:	d9fc      	bls.n	800712c <forward_lite_conv2d_if32of32wf32_pool+0x598>
 8007132:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007134:	e5e9      	b.n	8006d0a <forward_lite_conv2d_if32of32wf32_pool+0x176>
 8007136:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8007138:	2a00      	cmp	r2, #0
 800713a:	dd80      	ble.n	800703e <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800713c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800713e:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	931a      	str	r3, [sp, #104]	@ 0x68
 8007146:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8007148:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800714a:	9326      	str	r3, [sp, #152]	@ 0x98
 800714c:	189a      	adds	r2, r3, r2
 800714e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007150:	923e      	str	r2, [sp, #248]	@ 0xf8
 8007152:	9330      	str	r3, [sp, #192]	@ 0xc0
 8007154:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007156:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8007158:	9319      	str	r3, [sp, #100]	@ 0x64
 800715a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800715c:	440a      	add	r2, r1
 800715e:	9240      	str	r2, [sp, #256]	@ 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80fe 	beq.w	8007362 <forward_lite_conv2d_if32of32wf32_pool+0x7ce>
 8007166:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8007168:	ecf3 1a01 	vldmia	r3!, {s3}
 800716c:	9330      	str	r3, [sp, #192]	@ 0xc0
 800716e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80e7 	beq.w	8007344 <forward_lite_conv2d_if32of32wf32_pool+0x7b0>
 8007176:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8007178:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800717a:	189a      	adds	r2, r3, r2
 800717c:	920c      	str	r2, [sp, #48]	@ 0x30
 800717e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8007180:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8007184:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007186:	9310      	str	r3, [sp, #64]	@ 0x40
 8007188:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800718a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800718c:	2300      	movs	r3, #0
 800718e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f2c0 80e8 	blt.w	8007368 <forward_lite_conv2d_if32of32wf32_pool+0x7d4>
 8007198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800719a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800719c:	2000      	movs	r0, #0
 800719e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80071a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071a2:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80071a4:	428c      	cmp	r4, r1
 80071a6:	bf94      	ite	ls
 80071a8:	ebc0 0004 	rsbls	r0, r0, r4
 80071ac:	ebc0 0001 	rsbhi	r0, r0, r1
 80071b0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80071b2:	eba4 0900 	sub.w	r9, r4, r0
 80071b6:	fb03 5301 	mla	r3, r3, r1, r5
 80071ba:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80071bc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80071be:	f1bb 0f00 	cmp.w	fp, #0
 80071c2:	eba5 0a00 	sub.w	sl, r5, r0
 80071c6:	eeb0 7a61 	vmov.f32	s14, s3
 80071ca:	fb04 f000 	mul.w	r0, r4, r0
 80071ce:	f340 809e 	ble.w	800730e <forward_lite_conv2d_if32of32wf32_pool+0x77a>
 80071d2:	f020 080f 	bic.w	r8, r0, #15
 80071d6:	f108 37ff 	add.w	r7, r8, #4294967295
 80071da:	093f      	lsrs	r7, r7, #4
 80071dc:	3701      	adds	r7, #1
 80071de:	01be      	lsls	r6, r7, #6
 80071e0:	fb0a fa01 	mul.w	sl, sl, r1
 80071e4:	fb09 f901 	mul.w	r9, r9, r1
 80071e8:	013f      	lsls	r7, r7, #4
 80071ea:	2400      	movs	r4, #0
 80071ec:	f1b8 0f00 	cmp.w	r8, #0
 80071f0:	bfd8      	it	le
 80071f2:	2100      	movle	r1, #0
 80071f4:	dd72      	ble.n	80072dc <forward_lite_conv2d_if32of32wf32_pool+0x748>
 80071f6:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 80071fa:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80071fe:	f04f 0c00 	mov.w	ip, #0
 8007202:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 8007206:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 800720a:	ed15 6a10 	vldr	s12, [r5, #-64]	@ 0xffffffc0
 800720e:	ed51 6a10 	vldr	s13, [r1, #-64]	@ 0xffffffc0
 8007212:	ed55 4a0d 	vldr	s9, [r5, #-52]	@ 0xffffffcc
 8007216:	ed15 5a0c 	vldr	s10, [r5, #-48]	@ 0xffffffd0
 800721a:	ed15 3a0a 	vldr	s6, [r5, #-40]	@ 0xffffffd8
 800721e:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 8007222:	ed15 4a09 	vldr	s8, [r5, #-36]	@ 0xffffffdc
 8007226:	ed55 0a06 	vldr	s1, [r5, #-24]	@ 0xffffffe8
 800722a:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800722e:	ed15 2a05 	vldr	s4, [r5, #-20]	@ 0xffffffec
 8007232:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 8007236:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800723a:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 800723e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007242:	f10c 0c10 	add.w	ip, ip, #16
 8007246:	45e0      	cmp	r8, ip
 8007248:	ed11 6a0e 	vldr	s12, [r1, #-56]	@ 0xffffffc8
 800724c:	ed51 6a0d 	vldr	s13, [r1, #-52]	@ 0xffffffcc
 8007250:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007254:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8007258:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800725c:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 8007260:	ed15 6a1b 	vldr	s12, [r5, #-108]	@ 0xffffff94
 8007264:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007268:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 800726c:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 8007270:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007274:	ed15 5a18 	vldr	s10, [r5, #-96]	@ 0xffffffa0
 8007278:	ed51 5a18 	vldr	s11, [r1, #-96]	@ 0xffffffa0
 800727c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007280:	ed15 6a17 	vldr	s12, [r5, #-92]	@ 0xffffffa4
 8007284:	ed51 6a17 	vldr	s13, [r1, #-92]	@ 0xffffffa4
 8007288:	eee3 7a23 	vfma.f32	s15, s6, s7
 800728c:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8007290:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8007294:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007298:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 800729c:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 80072a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80072a4:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 80072a8:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 80072ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80072b0:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 80072b4:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 80072b8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80072bc:	eee2 7a22 	vfma.f32	s15, s4, s5
 80072c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80072c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80072c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80072cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80072d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072d4:	dc95      	bgt.n	8007202 <forward_lite_conv2d_if32of32wf32_pool+0x66e>
 80072d6:	4432      	add	r2, r6
 80072d8:	4433      	add	r3, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	4288      	cmp	r0, r1
 80072de:	dd10      	ble.n	8007302 <forward_lite_conv2d_if32of32wf32_pool+0x76e>
 80072e0:	460d      	mov	r5, r1
 80072e2:	4696      	mov	lr, r2
 80072e4:	469c      	mov	ip, r3
 80072e6:	ecfc 6a01 	vldmia	ip!, {s13}
 80072ea:	ecfe 7a01 	vldmia	lr!, {s15}
 80072ee:	3501      	adds	r5, #1
 80072f0:	42a8      	cmp	r0, r5
 80072f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80072f6:	d1f6      	bne.n	80072e6 <forward_lite_conv2d_if32of32wf32_pool+0x752>
 80072f8:	1a41      	subs	r1, r0, r1
 80072fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80072fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007302:	3401      	adds	r4, #1
 8007304:	45a3      	cmp	fp, r4
 8007306:	4452      	add	r2, sl
 8007308:	444b      	add	r3, r9
 800730a:	f47f af6f 	bne.w	80071ec <forward_lite_conv2d_if32of32wf32_pool+0x658>
 800730e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007310:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007312:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007314:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007316:	ed81 7a00 	vstr	s14, [r1]
 800731a:	4410      	add	r0, r2
 800731c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800731e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007320:	4401      	add	r1, r0
 8007322:	9110      	str	r1, [sp, #64]	@ 0x40
 8007324:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007326:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007328:	1a89      	subs	r1, r1, r2
 800732a:	910e      	str	r1, [sp, #56]	@ 0x38
 800732c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800732e:	4401      	add	r1, r0
 8007330:	910d      	str	r1, [sp, #52]	@ 0x34
 8007332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007334:	1a8a      	subs	r2, r1, r2
 8007336:	920c      	str	r2, [sp, #48]	@ 0x30
 8007338:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800733a:	3301      	adds	r3, #1
 800733c:	429a      	cmp	r2, r3
 800733e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007340:	f47f af26 	bne.w	8007190 <forward_lite_conv2d_if32of32wf32_pool+0x5fc>
 8007344:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007346:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8007348:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800734a:	440a      	add	r2, r1
 800734c:	9219      	str	r2, [sp, #100]	@ 0x64
 800734e:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8007350:	3304      	adds	r3, #4
 8007352:	4293      	cmp	r3, r2
 8007354:	9326      	str	r3, [sp, #152]	@ 0x98
 8007356:	f43f ae72 	beq.w	800703e <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800735a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800735c:	2b00      	cmp	r3, #0
 800735e:	f47f af02 	bne.w	8007166 <forward_lite_conv2d_if32of32wf32_pool+0x5d2>
 8007362:	eef0 1a48 	vmov.f32	s3, s16
 8007366:	e702      	b.n	800716e <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 8007368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800736a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800736c:	4610      	mov	r0, r2
 800736e:	4413      	add	r3, r2
 8007370:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007372:	e714      	b.n	800719e <forward_lite_conv2d_if32of32wf32_pool+0x60a>
 8007374:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007376:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007378:	921c      	str	r2, [sp, #112]	@ 0x70
 800737a:	e532      	b.n	8006de2 <forward_lite_conv2d_if32of32wf32_pool+0x24e>
 800737c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800737e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007380:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8007382:	440a      	add	r2, r1
 8007384:	4290      	cmp	r0, r2
 8007386:	bf98      	it	ls
 8007388:	9825      	ldrls	r0, [sp, #148]	@ 0x94
 800738a:	f103 0301 	add.w	r3, r3, #1
 800738e:	bf98      	it	ls
 8007390:	1812      	addls	r2, r2, r0
 8007392:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007394:	b219      	sxth	r1, r3
 8007396:	4281      	cmp	r1, r0
 8007398:	dbf1      	blt.n	800737e <forward_lite_conv2d_if32of32wf32_pool+0x7ea>
 800739a:	921b      	str	r2, [sp, #108]	@ 0x6c
 800739c:	e67b      	b.n	8007096 <forward_lite_conv2d_if32of32wf32_pool+0x502>
 800739e:	bf00      	nop

080073a0 <forward_lite_nl_softmax_if32of32_kernel>:
 80073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	2a01      	cmp	r2, #1
 80073a6:	ed2d 8b02 	vpush	{d8}
 80073aa:	4617      	mov	r7, r2
 80073ac:	ed91 8a00 	vldr	s16, [r1]
 80073b0:	d937      	bls.n	8007422 <forward_lite_nl_softmax_if32of32_kernel+0x82>
 80073b2:	1d0b      	adds	r3, r1, #4
 80073b4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80073b8:	ecf3 7a01 	vldmia	r3!, {s15}
 80073bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80073c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c4:	bfb8      	it	lt
 80073c6:	eeb0 8a67 	vmovlt.f32	s16, s15
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d1f4      	bne.n	80073b8 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 80073ce:	eddf 8a18 	vldr	s17, [pc, #96]	@ 8007430 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 80073d2:	4606      	mov	r6, r0
 80073d4:	460d      	mov	r5, r1
 80073d6:	4680      	mov	r8, r0
 80073d8:	2400      	movs	r4, #0
 80073da:	ecb5 0a01 	vldmia	r5!, {s0}
 80073de:	ee30 0a48 	vsub.f32	s0, s0, s16
 80073e2:	f003 fc69 	bl	800acb8 <expf>
 80073e6:	3401      	adds	r4, #1
 80073e8:	42a7      	cmp	r7, r4
 80073ea:	ee78 8a80 	vadd.f32	s17, s17, s0
 80073ee:	eca8 0a01 	vstmia	r8!, {s0}
 80073f2:	d8f2      	bhi.n	80073da <forward_lite_nl_softmax_if32of32_kernel+0x3a>
 80073f4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80073f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fc:	d00d      	beq.n	800741a <forward_lite_nl_softmax_if32of32_kernel+0x7a>
 80073fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007402:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8007406:	2300      	movs	r3, #0
 8007408:	3301      	adds	r3, #1
 800740a:	429f      	cmp	r7, r3
 800740c:	edd6 7a00 	vldr	s15, [r6]
 8007410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007414:	ece6 7a01 	vstmia	r6!, {s15}
 8007418:	d8f6      	bhi.n	8007408 <forward_lite_nl_softmax_if32of32_kernel+0x68>
 800741a:	ecbd 8b02 	vpop	{d8}
 800741e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007422:	2a00      	cmp	r2, #0
 8007424:	d1d3      	bne.n	80073ce <forward_lite_nl_softmax_if32of32_kernel+0x2e>
 8007426:	ecbd 8b02 	vpop	{d8}
 800742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742e:	bf00      	nop
 8007430:	00000000 	.word	0x00000000

08007434 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8007434:	edd3 6a02 	vldr	s13, [r3, #8]
 8007438:	ed93 7a00 	vldr	s14, [r3]
 800743c:	ed93 6a01 	vldr	s12, [r3, #4]
 8007440:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	d42a      	bmi.n	80074a0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800744a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800744e:	3a01      	subs	r2, #1
 8007450:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007454:	4561      	cmp	r1, ip
 8007456:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800745a:	d85d      	bhi.n	8007518 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800745c:	1d11      	adds	r1, r2, #4
 800745e:	f10c 0304 	add.w	r3, ip, #4
 8007462:	4408      	add	r0, r1
 8007464:	ebac 0202 	sub.w	r2, ip, r2
 8007468:	e00c      	b.n	8007484 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800746a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007472:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007476:	db01      	blt.n	800747c <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8007478:	ee65 7a86 	vmul.f32	s15, s11, s12
 800747c:	4293      	cmp	r3, r2
 800747e:	ed60 7a01 	vstmdb	r0!, {s15}
 8007482:	d00c      	beq.n	800749e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8007484:	ed73 7a01 	vldmdb	r3!, {s15}
 8007488:	eef4 6ae7 	vcmpe.f32	s13, s15
 800748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007490:	daeb      	bge.n	800746a <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8007492:	eef0 7a66 	vmov.f32	s15, s13
 8007496:	4293      	cmp	r3, r2
 8007498:	ed60 7a01 	vstmdb	r0!, {s15}
 800749c:	d1f2      	bne.n	8007484 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800749e:	4770      	bx	lr
 80074a0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80074a4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80074a8:	3a01      	subs	r2, #1
 80074aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ae:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80074b2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80074b6:	d017      	beq.n	80074e8 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 80074b8:	4561      	cmp	r1, ip
 80074ba:	d82d      	bhi.n	8007518 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80074bc:	1d11      	adds	r1, r2, #4
 80074be:	f10c 0304 	add.w	r3, ip, #4
 80074c2:	4401      	add	r1, r0
 80074c4:	ebac 0202 	sub.w	r2, ip, r2
 80074c8:	ed73 7a01 	vldmdb	r3!, {s15}
 80074cc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80074d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80074dc:	d81d      	bhi.n	800751a <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 80074de:	4293      	cmp	r3, r2
 80074e0:	ed61 6a01 	vstmdb	r1!, {s13}
 80074e4:	d1f0      	bne.n	80074c8 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80074e6:	4770      	bx	lr
 80074e8:	4561      	cmp	r1, ip
 80074ea:	d815      	bhi.n	8007518 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80074ec:	1d11      	adds	r1, r2, #4
 80074ee:	b500      	push	{lr}
 80074f0:	f10c 0304 	add.w	r3, ip, #4
 80074f4:	f04f 0e00 	mov.w	lr, #0
 80074f8:	4401      	add	r1, r0
 80074fa:	ebac 0202 	sub.w	r2, ip, r2
 80074fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8007502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750a:	d40b      	bmi.n	8007524 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800750c:	4293      	cmp	r3, r2
 800750e:	f841 ed04 	str.w	lr, [r1, #-4]!
 8007512:	d1f4      	bne.n	80074fe <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8007514:	f85d fb04 	ldr.w	pc, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	4293      	cmp	r3, r2
 800751c:	ed61 7a01 	vstmdb	r1!, {s15}
 8007520:	d1d2      	bne.n	80074c8 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8007522:	4770      	bx	lr
 8007524:	4293      	cmp	r3, r2
 8007526:	ed61 7a01 	vstmdb	r1!, {s15}
 800752a:	d1e8      	bne.n	80074fe <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800752c:	e7f2      	b.n	8007514 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800752e:	bf00      	nop

08007530 <pool_func_mp_array_f32>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	b093      	sub	sp, #76	@ 0x4c
 8007536:	468b      	mov	fp, r1
 8007538:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 800753c:	9101      	str	r1, [sp, #4]
 800753e:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8007542:	9105      	str	r1, [sp, #20]
 8007544:	4691      	mov	r9, r2
 8007546:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800754a:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 800754e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8007552:	9106      	str	r1, [sp, #24]
 8007554:	4698      	mov	r8, r3
 8007556:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 800755a:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800755e:	9404      	str	r4, [sp, #16]
 8007560:	9102      	str	r1, [sp, #8]
 8007562:	ea52 0403 	orrs.w	r4, r2, r3
 8007566:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 800756a:	9103      	str	r1, [sp, #12]
 800756c:	4682      	mov	sl, r0
 800756e:	d10b      	bne.n	8007588 <pool_func_mp_array_f32+0x58>
 8007570:	9904      	ldr	r1, [sp, #16]
 8007572:	9d02      	ldr	r5, [sp, #8]
 8007574:	9e05      	ldr	r6, [sp, #20]
 8007576:	eba1 000b 	sub.w	r0, r1, fp
 800757a:	3801      	subs	r0, #1
 800757c:	1e69      	subs	r1, r5, #1
 800757e:	fb11 0106 	smlabb	r1, r1, r6, r0
 8007582:	0408      	lsls	r0, r1, #16
 8007584:	f100 8083 	bmi.w	800768e <pool_func_mp_array_f32+0x15e>
 8007588:	9903      	ldr	r1, [sp, #12]
 800758a:	2900      	cmp	r1, #0
 800758c:	d07c      	beq.n	8007688 <pool_func_mp_array_f32+0x158>
 800758e:	9902      	ldr	r1, [sp, #8]
 8007590:	2900      	cmp	r1, #0
 8007592:	d079      	beq.n	8007688 <pool_func_mp_array_f32+0x158>
 8007594:	f1b8 0f00 	cmp.w	r8, #0
 8007598:	d076      	beq.n	8007688 <pool_func_mp_array_f32+0x158>
 800759a:	f1b8 0f01 	cmp.w	r8, #1
 800759e:	9901      	ldr	r1, [sp, #4]
 80075a0:	f040 80e3 	bne.w	800776a <pool_func_mp_array_f32+0x23a>
 80075a4:	1a8a      	subs	r2, r1, r2
 80075a6:	9904      	ldr	r1, [sp, #16]
 80075a8:	1ac9      	subs	r1, r1, r3
 80075aa:	425b      	negs	r3, r3
 80075ac:	b292      	uxth	r2, r2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	9207      	str	r2, [sp, #28]
 80075b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80075b4:	b28a      	uxth	r2, r1
 80075b6:	2300      	movs	r3, #0
 80075b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80075ba:	9308      	str	r3, [sp, #32]
 80075bc:	9a02      	ldr	r2, [sp, #8]
 80075be:	fb02 f303 	mul.w	r3, r2, r3
 80075c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075c4:	9a07      	ldr	r2, [sp, #28]
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ce:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	@ 0x2c
 80075d2:	f04f 0c00 	mov.w	ip, #0
 80075d6:	9304      	str	r3, [sp, #16]
 80075d8:	b217      	sxth	r7, r2
 80075da:	46e6      	mov	lr, ip
 80075dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 80075e4:	eddf 7aac 	vldr	s15, [pc, #688]	@ 8007898 <pool_func_mp_array_f32+0x368>
 80075e8:	428f      	cmp	r7, r1
 80075ea:	449e      	add	lr, r3
 80075ec:	fa0f f088 	sxth.w	r0, r8
 80075f0:	dd28      	ble.n	8007644 <pool_func_mp_array_f32+0x114>
 80075f2:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 80075f6:	4286      	cmp	r6, r0
 80075f8:	da20      	bge.n	800763c <pool_func_mp_array_f32+0x10c>
 80075fa:	2900      	cmp	r1, #0
 80075fc:	fb0b f401 	mul.w	r4, fp, r1
 8007600:	db1c      	blt.n	800763c <pool_func_mp_array_f32+0x10c>
 8007602:	4549      	cmp	r1, r9
 8007604:	da1a      	bge.n	800763c <pool_func_mp_array_f32+0x10c>
 8007606:	2e00      	cmp	r6, #0
 8007608:	4633      	mov	r3, r6
 800760a:	da05      	bge.n	8007618 <pool_func_mp_array_f32+0xe8>
 800760c:	3301      	adds	r3, #1
 800760e:	b21b      	sxth	r3, r3
 8007610:	429d      	cmp	r5, r3
 8007612:	dcfb      	bgt.n	800760c <pool_func_mp_array_f32+0xdc>
 8007614:	4283      	cmp	r3, r0
 8007616:	da11      	bge.n	800763c <pool_func_mp_array_f32+0x10c>
 8007618:	18e2      	adds	r2, r4, r3
 800761a:	459b      	cmp	fp, r3
 800761c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8007620:	dd08      	ble.n	8007634 <pool_func_mp_array_f32+0x104>
 8007622:	ed92 7a00 	vldr	s14, [r2]
 8007626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762e:	bfb8      	it	lt
 8007630:	eef0 7a47 	vmovlt.f32	s15, s14
 8007634:	3301      	adds	r3, #1
 8007636:	b21b      	sxth	r3, r3
 8007638:	4283      	cmp	r3, r0
 800763a:	dbed      	blt.n	8007618 <pool_func_mp_array_f32+0xe8>
 800763c:	3101      	adds	r1, #1
 800763e:	b209      	sxth	r1, r1
 8007640:	42b9      	cmp	r1, r7
 8007642:	dbd8      	blt.n	80075f6 <pool_func_mp_array_f32+0xc6>
 8007644:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007646:	9a05      	ldr	r2, [sp, #20]
 8007648:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800764c:	9b04      	ldr	r3, [sp, #16]
 800764e:	edce 7a00 	vstr	s15, [lr]
 8007652:	4413      	add	r3, r2
 8007654:	b29b      	uxth	r3, r3
 8007656:	f10c 0c01 	add.w	ip, ip, #1
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	9b02      	ldr	r3, [sp, #8]
 800765e:	fa0f fc8c 	sxth.w	ip, ip
 8007662:	4490      	add	r8, r2
 8007664:	4563      	cmp	r3, ip
 8007666:	fa1f f888 	uxth.w	r8, r8
 800766a:	46e6      	mov	lr, ip
 800766c:	dcb6      	bgt.n	80075dc <pool_func_mp_array_f32+0xac>
 800766e:	9b08      	ldr	r3, [sp, #32]
 8007670:	3301      	adds	r3, #1
 8007672:	b21a      	sxth	r2, r3
 8007674:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8007678:	440b      	add	r3, r1
 800767a:	9903      	ldr	r1, [sp, #12]
 800767c:	9208      	str	r2, [sp, #32]
 800767e:	b29b      	uxth	r3, r3
 8007680:	4291      	cmp	r1, r2
 8007682:	9307      	str	r3, [sp, #28]
 8007684:	4613      	mov	r3, r2
 8007686:	dc99      	bgt.n	80075bc <pool_func_mp_array_f32+0x8c>
 8007688:	b013      	add	sp, #76	@ 0x4c
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	9901      	ldr	r1, [sp, #4]
 8007690:	9e03      	ldr	r6, [sp, #12]
 8007692:	9f06      	ldr	r7, [sp, #24]
 8007694:	eba1 0009 	sub.w	r0, r1, r9
 8007698:	3801      	subs	r0, #1
 800769a:	1e71      	subs	r1, r6, #1
 800769c:	fb11 0107 	smlabb	r1, r1, r7, r0
 80076a0:	0409      	lsls	r1, r1, #16
 80076a2:	f57f af71 	bpl.w	8007588 <pool_func_mp_array_f32+0x58>
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	d0ee      	beq.n	8007688 <pool_func_mp_array_f32+0x158>
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	d0ec      	beq.n	8007688 <pool_func_mp_array_f32+0x158>
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	d0e9      	beq.n	8007688 <pool_func_mp_array_f32+0x158>
 80076b4:	f1b8 0f01 	cmp.w	r8, #1
 80076b8:	f040 80f0 	bne.w	800789c <pool_func_mp_array_f32+0x36c>
 80076bc:	46a1      	mov	r9, r4
 80076be:	9407      	str	r4, [sp, #28]
 80076c0:	46a0      	mov	r8, r4
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80076c8:	fb03 f308 	mul.w	r3, r3, r8
 80076cc:	2600      	movs	r6, #0
 80076ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d0:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 80076d4:	fa0f f389 	sxth.w	r3, r9
 80076d8:	9308      	str	r3, [sp, #32]
 80076da:	46b4      	mov	ip, r6
 80076dc:	4637      	mov	r7, r6
 80076de:	9c08      	ldr	r4, [sp, #32]
 80076e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e2:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8007898 <pool_func_mp_array_f32+0x368>
 80076e6:	4544      	cmp	r4, r8
 80076e8:	441f      	add	r7, r3
 80076ea:	b235      	sxth	r5, r6
 80076ec:	fa0f f08e 	sxth.w	r0, lr
 80076f0:	da17      	bge.n	8007722 <pool_func_mp_array_f32+0x1f2>
 80076f2:	4285      	cmp	r5, r0
 80076f4:	da11      	bge.n	800771a <pool_func_mp_array_f32+0x1ea>
 80076f6:	fb04 520b 	mla	r2, r4, fp, r5
 80076fa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80076fe:	462b      	mov	r3, r5
 8007700:	ecb2 7a01 	vldmia	r2!, {s14}
 8007704:	3301      	adds	r3, #1
 8007706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770e:	b219      	sxth	r1, r3
 8007710:	bfb8      	it	lt
 8007712:	eef0 7a47 	vmovlt.f32	s15, s14
 8007716:	4281      	cmp	r1, r0
 8007718:	dbf2      	blt.n	8007700 <pool_func_mp_array_f32+0x1d0>
 800771a:	3401      	adds	r4, #1
 800771c:	b224      	sxth	r4, r4
 800771e:	4544      	cmp	r4, r8
 8007720:	dbe7      	blt.n	80076f2 <pool_func_mp_array_f32+0x1c2>
 8007722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	edc7 7a00 	vstr	s15, [r7]
 800772e:	449e      	add	lr, r3
 8007730:	441e      	add	r6, r3
 8007732:	f10c 0c01 	add.w	ip, ip, #1
 8007736:	9b02      	ldr	r3, [sp, #8]
 8007738:	fa0f fc8c 	sxth.w	ip, ip
 800773c:	4563      	cmp	r3, ip
 800773e:	fa1f fe8e 	uxth.w	lr, lr
 8007742:	b2b6      	uxth	r6, r6
 8007744:	4667      	mov	r7, ip
 8007746:	dcca      	bgt.n	80076de <pool_func_mp_array_f32+0x1ae>
 8007748:	9b07      	ldr	r3, [sp, #28]
 800774a:	9906      	ldr	r1, [sp, #24]
 800774c:	3301      	adds	r3, #1
 800774e:	b21a      	sxth	r2, r3
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	9207      	str	r2, [sp, #28]
 8007754:	440b      	add	r3, r1
 8007756:	b29b      	uxth	r3, r3
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	4489      	add	r9, r1
 800775e:	4293      	cmp	r3, r2
 8007760:	fa1f f989 	uxth.w	r9, r9
 8007764:	4690      	mov	r8, r2
 8007766:	dcac      	bgt.n	80076c2 <pool_func_mp_array_f32+0x192>
 8007768:	e78e      	b.n	8007688 <pool_func_mp_array_f32+0x158>
 800776a:	1a88      	subs	r0, r1, r2
 800776c:	9904      	ldr	r1, [sp, #16]
 800776e:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8007772:	1ac9      	subs	r1, r1, r3
 8007774:	4252      	negs	r2, r2
 8007776:	425b      	negs	r3, r3
 8007778:	b292      	uxth	r2, r2
 800777a:	b29b      	uxth	r3, r3
 800777c:	b280      	uxth	r0, r0
 800777e:	9208      	str	r2, [sp, #32]
 8007780:	9311      	str	r3, [sp, #68]	@ 0x44
 8007782:	b28a      	uxth	r2, r1
 8007784:	2300      	movs	r3, #0
 8007786:	9007      	str	r0, [sp, #28]
 8007788:	9210      	str	r2, [sp, #64]	@ 0x40
 800778a:	930c      	str	r3, [sp, #48]	@ 0x30
 800778c:	9a02      	ldr	r2, [sp, #8]
 800778e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8007792:	fb03 f302 	mul.w	r3, r3, r2
 8007796:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800779a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800779c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800779e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077a0:	9201      	str	r2, [sp, #4]
 80077a2:	2300      	movs	r3, #0
 80077a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80077a8:	9204      	str	r2, [sp, #16]
 80077aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077ac:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80077b0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80077b4:	4413      	add	r3, r2
 80077b6:	fb08 f303 	mul.w	r3, r8, r3
 80077ba:	f04f 0e00 	mov.w	lr, #0
 80077be:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c0:	4676      	mov	r6, lr
 80077c2:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 80077c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077c8:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8007898 <pool_func_mp_array_f32+0x368>
 80077cc:	4549      	cmp	r1, r9
 80077ce:	da2f      	bge.n	8007830 <pool_func_mp_array_f32+0x300>
 80077d0:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 80077d4:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 80077d8:	45a4      	cmp	ip, r4
 80077da:	da23      	bge.n	8007824 <pool_func_mp_array_f32+0x2f4>
 80077dc:	2900      	cmp	r1, #0
 80077de:	fb0b f501 	mul.w	r5, fp, r1
 80077e2:	db1f      	blt.n	8007824 <pool_func_mp_array_f32+0x2f4>
 80077e4:	4571      	cmp	r1, lr
 80077e6:	da1d      	bge.n	8007824 <pool_func_mp_array_f32+0x2f4>
 80077e8:	f1bc 0f00 	cmp.w	ip, #0
 80077ec:	4663      	mov	r3, ip
 80077ee:	da05      	bge.n	80077fc <pool_func_mp_array_f32+0x2cc>
 80077f0:	3301      	adds	r3, #1
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	429f      	cmp	r7, r3
 80077f6:	dcfb      	bgt.n	80077f0 <pool_func_mp_array_f32+0x2c0>
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	da13      	bge.n	8007824 <pool_func_mp_array_f32+0x2f4>
 80077fc:	18ea      	adds	r2, r5, r3
 80077fe:	fb08 6202 	mla	r2, r8, r2, r6
 8007802:	1c58      	adds	r0, r3, #1
 8007804:	459b      	cmp	fp, r3
 8007806:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800780a:	b203      	sxth	r3, r0
 800780c:	dd08      	ble.n	8007820 <pool_func_mp_array_f32+0x2f0>
 800780e:	ed92 7a00 	vldr	s14, [r2]
 8007812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781a:	bfb8      	it	lt
 800781c:	eef0 7a47 	vmovlt.f32	s15, s14
 8007820:	42a3      	cmp	r3, r4
 8007822:	dbeb      	blt.n	80077fc <pool_func_mp_array_f32+0x2cc>
 8007824:	3101      	adds	r1, #1
 8007826:	b209      	sxth	r1, r1
 8007828:	4549      	cmp	r1, r9
 800782a:	dbd5      	blt.n	80077d8 <pool_func_mp_array_f32+0x2a8>
 800782c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8007830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007832:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007834:	f10e 0e01 	add.w	lr, lr, #1
 8007838:	4433      	add	r3, r6
 800783a:	fa0f fe8e 	sxth.w	lr, lr
 800783e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007842:	45c6      	cmp	lr, r8
 8007844:	edc3 7a00 	vstr	s15, [r3]
 8007848:	4676      	mov	r6, lr
 800784a:	dbbc      	blt.n	80077c6 <pool_func_mp_array_f32+0x296>
 800784c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800784e:	9a01      	ldr	r2, [sp, #4]
 8007850:	9805      	ldr	r0, [sp, #20]
 8007852:	3301      	adds	r3, #1
 8007854:	4402      	add	r2, r0
 8007856:	b219      	sxth	r1, r3
 8007858:	b292      	uxth	r2, r2
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	9a02      	ldr	r2, [sp, #8]
 8007860:	910d      	str	r1, [sp, #52]	@ 0x34
 8007862:	4403      	add	r3, r0
 8007864:	b29b      	uxth	r3, r3
 8007866:	428a      	cmp	r2, r1
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	460b      	mov	r3, r1
 800786c:	dc9d      	bgt.n	80077aa <pool_func_mp_array_f32+0x27a>
 800786e:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8007872:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007874:	4402      	add	r2, r0
 8007876:	3301      	adds	r3, #1
 8007878:	b219      	sxth	r1, r3
 800787a:	b292      	uxth	r2, r2
 800787c:	9b08      	ldr	r3, [sp, #32]
 800787e:	9207      	str	r2, [sp, #28]
 8007880:	9a03      	ldr	r2, [sp, #12]
 8007882:	910c      	str	r1, [sp, #48]	@ 0x30
 8007884:	4403      	add	r3, r0
 8007886:	b29b      	uxth	r3, r3
 8007888:	428a      	cmp	r2, r1
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	460b      	mov	r3, r1
 800788e:	f73f af7d 	bgt.w	800778c <pool_func_mp_array_f32+0x25c>
 8007892:	b013      	add	sp, #76	@ 0x4c
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	cf000000 	.word	0xcf000000
 800789c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80078a0:	46a4      	mov	ip, r4
 80078a2:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80078a6:	9407      	str	r4, [sp, #28]
 80078a8:	4623      	mov	r3, r4
 80078aa:	9a02      	ldr	r2, [sp, #8]
 80078ac:	f8dd e010 	ldr.w	lr, [sp, #16]
 80078b0:	fb03 f302 	mul.w	r3, r3, r2
 80078b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b6:	fa0f f38c 	sxth.w	r3, ip
 80078ba:	2400      	movs	r4, #0
 80078bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078be:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80078c2:	9308      	str	r3, [sp, #32]
 80078c4:	4627      	mov	r7, r4
 80078c6:	4623      	mov	r3, r4
 80078c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078ca:	4413      	add	r3, r2
 80078cc:	fb08 f303 	mul.w	r3, r8, r3
 80078d0:	2600      	movs	r6, #0
 80078d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078d4:	fa0f fb84 	sxth.w	fp, r4
 80078d8:	fa0f f08e 	sxth.w	r0, lr
 80078dc:	4635      	mov	r5, r6
 80078de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e0:	9a08      	ldr	r2, [sp, #32]
 80078e2:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8007898 <pool_func_mp_array_f32+0x368>
 80078e6:	4293      	cmp	r3, r2
 80078e8:	da20      	bge.n	800792c <pool_func_mp_array_f32+0x3fc>
 80078ea:	469a      	mov	sl, r3
 80078ec:	4583      	cmp	fp, r0
 80078ee:	da16      	bge.n	800791e <pool_func_mp_array_f32+0x3ee>
 80078f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078f4:	fb03 b30a 	mla	r3, r3, sl, fp
 80078f8:	fb08 5303 	mla	r3, r8, r3, r5
 80078fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007900:	465a      	mov	r2, fp
 8007902:	ed93 7a00 	vldr	s14, [r3]
 8007906:	3201      	adds	r2, #1
 8007908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	b211      	sxth	r1, r2
 8007912:	bfb8      	it	lt
 8007914:	eef0 7a47 	vmovlt.f32	s15, s14
 8007918:	4281      	cmp	r1, r0
 800791a:	444b      	add	r3, r9
 800791c:	dbf1      	blt.n	8007902 <pool_func_mp_array_f32+0x3d2>
 800791e:	9b08      	ldr	r3, [sp, #32]
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	fa0f fa8a 	sxth.w	sl, sl
 8007928:	459a      	cmp	sl, r3
 800792a:	dbdf      	blt.n	80078ec <pool_func_mp_array_f32+0x3bc>
 800792c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007930:	3601      	adds	r6, #1
 8007932:	442b      	add	r3, r5
 8007934:	b236      	sxth	r6, r6
 8007936:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800793a:	4546      	cmp	r6, r8
 800793c:	edc3 7a00 	vstr	s15, [r3]
 8007940:	4635      	mov	r5, r6
 8007942:	dbcc      	blt.n	80078de <pool_func_mp_array_f32+0x3ae>
 8007944:	9b05      	ldr	r3, [sp, #20]
 8007946:	9a02      	ldr	r2, [sp, #8]
 8007948:	3701      	adds	r7, #1
 800794a:	b23f      	sxth	r7, r7
 800794c:	449e      	add	lr, r3
 800794e:	441c      	add	r4, r3
 8007950:	42ba      	cmp	r2, r7
 8007952:	fa1f fe8e 	uxth.w	lr, lr
 8007956:	b2a4      	uxth	r4, r4
 8007958:	463b      	mov	r3, r7
 800795a:	dcb5      	bgt.n	80078c8 <pool_func_mp_array_f32+0x398>
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	9906      	ldr	r1, [sp, #24]
 8007960:	3301      	adds	r3, #1
 8007962:	b21a      	sxth	r2, r3
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	9207      	str	r2, [sp, #28]
 8007968:	440b      	add	r3, r1
 800796a:	448c      	add	ip, r1
 800796c:	9903      	ldr	r1, [sp, #12]
 800796e:	b29b      	uxth	r3, r3
 8007970:	4291      	cmp	r1, r2
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	fa1f fc8c 	uxth.w	ip, ip
 8007978:	4613      	mov	r3, r2
 800797a:	dc96      	bgt.n	80078aa <pool_func_mp_array_f32+0x37a>
 800797c:	e684      	b.n	8007688 <pool_func_mp_array_f32+0x158>
 800797e:	bf00      	nop

08007980 <forward_lite_dense_if32of32wf32>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8007988:	6801      	ldr	r1, [r0, #0]
 800798a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800798e:	fb02 f303 	mul.w	r3, r2, r3
 8007992:	b083      	sub	sp, #12
 8007994:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007998:	4299      	cmp	r1, r3
 800799a:	9100      	str	r1, [sp, #0]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	f080 811e 	bcs.w	8007bde <forward_lite_dense_if32of32wf32+0x25e>
 80079a2:	6904      	ldr	r4, [r0, #16]
 80079a4:	4607      	mov	r7, r0
 80079a6:	0096      	lsls	r6, r2, #2
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	68bd      	ldr	r5, [r7, #8]
 80079ac:	eb03 0e06 	add.w	lr, r3, r6
 80079b0:	459e      	cmp	lr, r3
 80079b2:	461e      	mov	r6, r3
 80079b4:	f240 8104 	bls.w	8007bc0 <forward_lite_dense_if32of32wf32+0x240>
 80079b8:	f1a4 0c10 	sub.w	ip, r4, #16
 80079bc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80079c0:	f10c 0c01 	add.w	ip, ip, #1
 80079c4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80079c8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80079cc:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80079d0:	2c0f      	cmp	r4, #15
 80079d2:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8007c30 <forward_lite_dense_if32of32wf32+0x2b0>
 80079d6:	f240 8105 	bls.w	8007be4 <forward_lite_dense_if32of32wf32+0x264>
 80079da:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80079de:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80079e2:	4621      	mov	r1, r4
 80079e4:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80079e8:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80079ec:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80079f0:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80079f4:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80079f8:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80079fc:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8007a00:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8007a04:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8007a08:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8007a0c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8007a10:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8007a14:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8007a18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007a1c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8007a20:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a24:	3910      	subs	r1, #16
 8007a26:	290f      	cmp	r1, #15
 8007a28:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8007a2c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8007a30:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007a34:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8007a38:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007a3c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8007a40:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8007a44:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007a48:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8007a4c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8007a50:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a54:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8007a58:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8007a5c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a60:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8007a64:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8007a68:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007a6c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8007a70:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007a74:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a78:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8007a7c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8007a80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a84:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007a88:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8007a8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a90:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007a94:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8007a98:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007a9c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007aa0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007aa4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007aa8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007aac:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ab4:	d896      	bhi.n	80079e4 <forward_lite_dense_if32of32wf32+0x64>
 8007ab6:	eb05 020b 	add.w	r2, r5, fp
 8007aba:	f004 010f 	and.w	r1, r4, #15
 8007abe:	4663      	mov	r3, ip
 8007ac0:	2903      	cmp	r1, #3
 8007ac2:	d95f      	bls.n	8007b84 <forward_lite_dense_if32of32wf32+0x204>
 8007ac4:	edd2 6a01 	vldr	s13, [r2, #4]
 8007ac8:	edd3 7a01 	vldr	s15, [r3, #4]
 8007acc:	ed93 6a00 	vldr	s12, [r3]
 8007ad0:	ed93 5a02 	vldr	s10, [r3, #8]
 8007ad4:	edd2 5a02 	vldr	s11, [r2, #8]
 8007ad8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007adc:	edd2 6a00 	vldr	s13, [r2]
 8007ae0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ae4:	1f08      	subs	r0, r1, #4
 8007ae6:	2803      	cmp	r0, #3
 8007ae8:	ed93 6a03 	vldr	s12, [r3, #12]
 8007aec:	edd2 6a03 	vldr	s13, [r2, #12]
 8007af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007af4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007af8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007afc:	eeb0 7a67 	vmov.f32	s14, s15
 8007b00:	d938      	bls.n	8007b74 <forward_lite_dense_if32of32wf32+0x1f4>
 8007b02:	edd2 6a05 	vldr	s13, [r2, #20]
 8007b06:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b0a:	ed93 6a04 	vldr	s12, [r3, #16]
 8007b0e:	ed93 5a06 	vldr	s10, [r3, #24]
 8007b12:	edd2 5a06 	vldr	s11, [r2, #24]
 8007b16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b1a:	edd2 6a04 	vldr	s13, [r2, #16]
 8007b1e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b22:	f1a1 0a08 	sub.w	sl, r1, #8
 8007b26:	f1ba 0f03 	cmp.w	sl, #3
 8007b2a:	ed93 6a07 	vldr	s12, [r3, #28]
 8007b2e:	edd2 6a07 	vldr	s13, [r2, #28]
 8007b32:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007b36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b3e:	d919      	bls.n	8007b74 <forward_lite_dense_if32of32wf32+0x1f4>
 8007b40:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8007b44:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8007b48:	ed92 6a08 	vldr	s12, [r2, #32]
 8007b4c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8007b50:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8007b54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b58:	edd3 6a08 	vldr	s13, [r3, #32]
 8007b5c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b60:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8007b64:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8007b68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007b6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b74:	0880      	lsrs	r0, r0, #2
 8007b76:	3001      	adds	r0, #1
 8007b78:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8007b7c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007b80:	f001 0103 	and.w	r1, r1, #3
 8007b84:	b1a9      	cbz	r1, 8007bb2 <forward_lite_dense_if32of32wf32+0x232>
 8007b86:	edd3 6a00 	vldr	s13, [r3]
 8007b8a:	edd2 7a00 	vldr	s15, [r2]
 8007b8e:	3901      	subs	r1, #1
 8007b90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b94:	d00d      	beq.n	8007bb2 <forward_lite_dense_if32of32wf32+0x232>
 8007b96:	edd3 6a01 	vldr	s13, [r3, #4]
 8007b9a:	edd2 7a01 	vldr	s15, [r2, #4]
 8007b9e:	2901      	cmp	r1, #1
 8007ba0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ba4:	d005      	beq.n	8007bb2 <forward_lite_dense_if32of32wf32+0x232>
 8007ba6:	edd2 6a02 	vldr	s13, [r2, #8]
 8007baa:	edd3 7a02 	vldr	s15, [r3, #8]
 8007bae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007bb2:	444d      	add	r5, r9
 8007bb4:	eca6 7a01 	vstmia	r6!, {s14}
 8007bb8:	45b6      	cmp	lr, r6
 8007bba:	f63f af09 	bhi.w	80079d0 <forward_lite_dense_if32of32wf32+0x50>
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	b99b      	cbnz	r3, 8007bec <forward_lite_dense_if32of32wf32+0x26c>
 8007bc4:	9b00      	ldr	r3, [sp, #0]
 8007bc6:	9901      	ldr	r1, [sp, #4]
 8007bc8:	693c      	ldr	r4, [r7, #16]
 8007bca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8007bd6:	ea4f 0682 	mov.w	r6, r2, lsl #2
 8007bda:	f63f aee5 	bhi.w	80079a8 <forward_lite_dense_if32of32wf32+0x28>
 8007bde:	b003      	add	sp, #12
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	4621      	mov	r1, r4
 8007be6:	462a      	mov	r2, r5
 8007be8:	4643      	mov	r3, r8
 8007bea:	e769      	b.n	8007ac0 <forward_lite_dense_if32of32wf32+0x140>
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	d0e9      	beq.n	8007bc4 <forward_lite_dense_if32of32wf32+0x244>
 8007bf0:	9a00      	ldr	r2, [sp, #0]
 8007bf2:	ed93 7a00 	vldr	s14, [r3]
 8007bf6:	edd2 7a00 	vldr	s15, [r2]
 8007bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bfe:	4613      	mov	r3, r2
 8007c00:	edc2 7a00 	vstr	s15, [r2]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	2a01      	cmp	r2, #1
 8007c08:	d9dc      	bls.n	8007bc4 <forward_lite_dense_if32of32wf32+0x244>
 8007c0a:	1d19      	adds	r1, r3, #4
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	ed91 7a00 	vldr	s14, [r1]
 8007c14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007c18:	edd2 7a00 	vldr	s15, [r2]
 8007c1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c20:	3301      	adds	r3, #1
 8007c22:	ece1 7a01 	vstmia	r1!, {s15}
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d8f0      	bhi.n	8007c0e <forward_lite_dense_if32of32wf32+0x28e>
 8007c2c:	e7ca      	b.n	8007bc4 <forward_lite_dense_if32of32wf32+0x244>
 8007c2e:	bf00      	nop
 8007c30:	00000000 	.word	0x00000000

08007c34 <forward_lite_dense_if32of32wf32_lut4>:
 8007c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	b08d      	sub	sp, #52	@ 0x34
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	9005      	str	r0, [sp, #20]
 8007c3e:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c40:	4618      	mov	r0, r3
 8007c42:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8007c46:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8007c48:	fb02 f303 	mul.w	r3, r2, r3
 8007c4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c50:	460c      	mov	r4, r1
 8007c52:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8007c54:	9308      	str	r3, [sp, #32]
 8007c56:	b126      	cbz	r6, 8007c62 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8007c58:	2240      	movs	r2, #64	@ 0x40
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	f000 fa62 	bl	8008124 <st_int8_copy>
 8007c60:	4630      	mov	r0, r6
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	9a08      	ldr	r2, [sp, #32]
 8007c66:	4293      	cmp	r3, r2
 8007c68:	f080 80f5 	bcs.w	8007e56 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8007c6c:	08eb      	lsrs	r3, r5, #3
 8007c6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	f005 0101 	and.w	r1, r5, #1
 8007c76:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	f025 0801 	bic.w	r8, r5, #1
 8007c82:	9102      	str	r1, [sp, #8]
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	00a9      	lsls	r1, r5, #2
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	9207      	str	r2, [sp, #28]
 8007c8c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8007c90:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c92:	f104 0b20 	add.w	fp, r4, #32
 8007c96:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c98:	9a07      	ldr	r2, [sp, #28]
 8007c9a:	eb03 0902 	add.w	r9, r3, r2
 8007c9e:	4599      	cmp	r9, r3
 8007ca0:	f1ab 0220 	sub.w	r2, fp, #32
 8007ca4:	9206      	str	r2, [sp, #24]
 8007ca6:	f240 80d9 	bls.w	8007e5c <forward_lite_dense_if32of32wf32_lut4+0x228>
 8007caa:	469e      	mov	lr, r3
 8007cac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cae:	f108 33ff 	add.w	r3, r8, #4294967295
 8007cb2:	9303      	str	r3, [sp, #12]
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8007e80 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80b2 	beq.w	8007e24 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	18d5      	adds	r5, r2, r3
 8007cc4:	465b      	mov	r3, fp
 8007cc6:	7814      	ldrb	r4, [r2, #0]
 8007cc8:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8007ccc:	7851      	ldrb	r1, [r2, #1]
 8007cce:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8007cd2:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8007cd6:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8007cda:	ed13 5a04 	vldr	s10, [r3, #-16]
 8007cde:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007ce2:	ed13 6a02 	vldr	s12, [r3, #-8]
 8007ce6:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007cea:	f004 060f 	and.w	r6, r4, #15
 8007cee:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007cf2:	edd6 7a00 	vldr	s15, [r6]
 8007cf6:	0924      	lsrs	r4, r4, #4
 8007cf8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007cfc:	ed94 3a00 	vldr	s6, [r4]
 8007d00:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007d04:	090c      	lsrs	r4, r1, #4
 8007d06:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007d0a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007d0e:	f001 010f 	and.w	r1, r1, #15
 8007d12:	edd4 3a00 	vldr	s7, [r4]
 8007d16:	7894      	ldrb	r4, [r2, #2]
 8007d18:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007d1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d20:	0926      	lsrs	r6, r4, #4
 8007d22:	ed91 4a00 	vldr	s8, [r1]
 8007d26:	78d1      	ldrb	r1, [r2, #3]
 8007d28:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007d2c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007d30:	f004 040f 	and.w	r4, r4, #15
 8007d34:	edd6 4a00 	vldr	s9, [r6]
 8007d38:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007d3c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007d40:	3204      	adds	r2, #4
 8007d42:	ed94 5a00 	vldr	s10, [r4]
 8007d46:	090c      	lsrs	r4, r1, #4
 8007d48:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007d4c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007d50:	f001 010f 	and.w	r1, r1, #15
 8007d54:	edd4 5a00 	vldr	s11, [r4]
 8007d58:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d60:	42aa      	cmp	r2, r5
 8007d62:	ed91 6a00 	vldr	s12, [r1]
 8007d66:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d6a:	f103 0320 	add.w	r3, r3, #32
 8007d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d72:	d1a8      	bne.n	8007cc6 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8007d74:	4656      	mov	r6, sl
 8007d76:	4546      	cmp	r6, r8
 8007d78:	d258      	bcs.n	8007e2c <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	1b9c      	subs	r4, r3, r6
 8007d7e:	08e7      	lsrs	r7, r4, #3
 8007d80:	f106 0208 	add.w	r2, r6, #8
 8007d84:	1e69      	subs	r1, r5, #1
 8007d86:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 8007d8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d8e:	ed52 5a01 	vldr	s11, [r2, #-4]
 8007d92:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007d96:	f003 0c0f 	and.w	ip, r3, #15
 8007d9a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007d9e:	eddc 7a00 	vldr	s15, [ip]
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007da8:	ed93 6a00 	vldr	s12, [r3]
 8007dac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007db0:	42a1      	cmp	r1, r4
 8007db2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007db6:	f102 0208 	add.w	r2, r2, #8
 8007dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dbe:	d1e4      	bne.n	8007d8a <forward_lite_dense_if32of32wf32_lut4+0x156>
 8007dc0:	3701      	adds	r7, #1
 8007dc2:	19ea      	adds	r2, r5, r7
 8007dc4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8007dc8:	9b02      	ldr	r3, [sp, #8]
 8007dca:	b30b      	cbz	r3, 8007e10 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8007dcc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007dd0:	edd6 7a00 	vldr	s15, [r6]
 8007dd4:	091b      	lsrs	r3, r3, #4
 8007dd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007dda:	edd3 6a00 	vldr	s13, [r3]
 8007dde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007de2:	ecae 7a01 	vstmia	lr!, {s14}
 8007de6:	45f1      	cmp	r9, lr
 8007de8:	f63f af64 	bhi.w	8007cb4 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8007dec:	9b05      	ldr	r3, [sp, #20]
 8007dee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007df0:	1899      	adds	r1, r3, r2
 8007df2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007df4:	b9e3      	cbnz	r3, 8007e30 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8007df6:	9b08      	ldr	r3, [sp, #32]
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	d92c      	bls.n	8007e56 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	4498      	add	r8, r3
 8007e00:	449a      	add	sl, r3
 8007e02:	449b      	add	fp, r3
 8007e04:	9b05      	ldr	r3, [sp, #20]
 8007e06:	4599      	cmp	r9, r3
 8007e08:	d92a      	bls.n	8007e60 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8007e0a:	9105      	str	r1, [sp, #20]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	e743      	b.n	8007c98 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8007e10:	ecae 7a01 	vstmia	lr!, {s14}
 8007e14:	45f1      	cmp	r9, lr
 8007e16:	d9e9      	bls.n	8007dec <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007e80 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f47f af4e 	bne.w	8007cc0 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8007e24:	9e06      	ldr	r6, [sp, #24]
 8007e26:	4546      	cmp	r6, r8
 8007e28:	4615      	mov	r5, r2
 8007e2a:	d3a6      	bcc.n	8007d7a <forward_lite_dense_if32of32wf32_lut4+0x146>
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	e7cb      	b.n	8007dc8 <forward_lite_dense_if32of32wf32_lut4+0x194>
 8007e30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0df      	beq.n	8007df6 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e3a:	1acb      	subs	r3, r1, r3
 8007e3c:	edd3 7a00 	vldr	s15, [r3]
 8007e40:	ecb2 7a01 	vldmia	r2!, {s14}
 8007e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e48:	ece3 7a01 	vstmia	r3!, {s15}
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	d1f5      	bne.n	8007e3c <forward_lite_dense_if32of32wf32_lut4+0x208>
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	428b      	cmp	r3, r1
 8007e54:	d8d2      	bhi.n	8007dfc <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8007e56:	b00d      	add	sp, #52	@ 0x34
 8007e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	e7c8      	b.n	8007df2 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8007e60:	9b07      	ldr	r3, [sp, #28]
 8007e62:	1acb      	subs	r3, r1, r3
 8007e64:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007e66:	461a      	mov	r2, r3
 8007e68:	ed92 7a00 	vldr	s14, [r2]
 8007e6c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007e70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e74:	ece2 7a01 	vstmia	r2!, {s15}
 8007e78:	428a      	cmp	r2, r1
 8007e7a:	d1f5      	bne.n	8007e68 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8007e7c:	e7f2      	b.n	8007e64 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8007e7e:	bf00      	nop
 8007e80:	00000000 	.word	0x00000000

08007e84 <forward_lite_dense_if32of32wf32_lut8>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	b087      	sub	sp, #28
 8007e8a:	460f      	mov	r7, r1
 8007e8c:	9204      	str	r2, [sp, #16]
 8007e8e:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8007e92:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007e94:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8007e96:	fb01 f202 	mul.w	r2, r1, r2
 8007e9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	9202      	str	r2, [sp, #8]
 8007ea2:	b136      	cbz	r6, 8007eb2 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007eaa:	4631      	mov	r1, r6
 8007eac:	f000 f93a 	bl	8008124 <st_int8_copy>
 8007eb0:	4633      	mov	r3, r6
 8007eb2:	9a02      	ldr	r2, [sp, #8]
 8007eb4:	4295      	cmp	r5, r2
 8007eb6:	f080 80f9 	bcs.w	80080ac <forward_lite_dense_if32of32wf32_lut8+0x228>
 8007eba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ebc:	0092      	lsls	r2, r2, #2
 8007ebe:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	9205      	str	r2, [sp, #20]
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8007ecc:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8007ed0:	464d      	mov	r5, r9
 8007ed2:	4691      	mov	r9, r2
 8007ed4:	9a01      	ldr	r2, [sp, #4]
 8007ed6:	eb09 0e02 	add.w	lr, r9, r2
 8007eda:	00a1      	lsls	r1, r4, #2
 8007edc:	3720      	adds	r7, #32
 8007ede:	45ce      	cmp	lr, r9
 8007ee0:	f004 0007 	and.w	r0, r4, #7
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	f1a7 0b20 	sub.w	fp, r7, #32
 8007eea:	f240 80c8 	bls.w	800807e <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8007eee:	9a04      	ldr	r2, [sp, #16]
 8007ef0:	46cc      	mov	ip, r9
 8007ef2:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80080dc <forward_lite_dense_if32of32wf32_lut8+0x258>
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	f000 80dd 	beq.w	80080b6 <forward_lite_dense_if32of32wf32_lut8+0x232>
 8007efc:	eb02 060a 	add.w	r6, r2, sl
 8007f00:	4639      	mov	r1, r7
 8007f02:	7854      	ldrb	r4, [r2, #1]
 8007f04:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8007f08:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8007f0c:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8007f10:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8007f14:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007f18:	ed51 5a03 	vldr	s11, [r1, #-12]
 8007f1c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007f20:	ed51 6a01 	vldr	s13, [r1, #-4]
 8007f24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f28:	edd4 7a00 	vldr	s15, [r4]
 8007f2c:	7814      	ldrb	r4, [r2, #0]
 8007f2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f32:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007f36:	ed94 3a00 	vldr	s6, [r4]
 8007f3a:	7894      	ldrb	r4, [r2, #2]
 8007f3c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007f40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f44:	3208      	adds	r2, #8
 8007f46:	edd4 3a00 	vldr	s7, [r4]
 8007f4a:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8007f4e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007f52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f56:	3120      	adds	r1, #32
 8007f58:	ed94 4a00 	vldr	s8, [r4]
 8007f5c:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8007f60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f68:	edd4 4a00 	vldr	s9, [r4]
 8007f6c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8007f70:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007f74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f78:	ed94 5a00 	vldr	s10, [r4]
 8007f7c:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8007f80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f88:	edd4 5a00 	vldr	s11, [r4]
 8007f8c:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8007f90:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f98:	42b2      	cmp	r2, r6
 8007f9a:	ed94 6a00 	vldr	s12, [r4]
 8007f9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fa6:	d1ac      	bne.n	8007f02 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8007fa8:	4642      	mov	r2, r8
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f000 8081 	beq.w	80080b2 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8007fb0:	7831      	ldrb	r1, [r6, #0]
 8007fb2:	edd2 7a00 	vldr	s15, [r2]
 8007fb6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007fba:	edd1 6a00 	vldr	s13, [r1]
 8007fbe:	2801      	cmp	r0, #1
 8007fc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fc4:	d03f      	beq.n	8008046 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8007fc6:	7871      	ldrb	r1, [r6, #1]
 8007fc8:	edd2 7a01 	vldr	s15, [r2, #4]
 8007fcc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007fd0:	edd1 6a00 	vldr	s13, [r1]
 8007fd4:	2802      	cmp	r0, #2
 8007fd6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fda:	d034      	beq.n	8008046 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8007fdc:	78b1      	ldrb	r1, [r6, #2]
 8007fde:	edd2 7a02 	vldr	s15, [r2, #8]
 8007fe2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007fe6:	edd1 6a00 	vldr	s13, [r1]
 8007fea:	2803      	cmp	r0, #3
 8007fec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ff0:	d029      	beq.n	8008046 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8007ff2:	78f1      	ldrb	r1, [r6, #3]
 8007ff4:	edd2 6a03 	vldr	s13, [r2, #12]
 8007ff8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007ffc:	edd1 7a00 	vldr	s15, [r1]
 8008000:	2804      	cmp	r0, #4
 8008002:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008006:	d01e      	beq.n	8008046 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008008:	7931      	ldrb	r1, [r6, #4]
 800800a:	edd2 6a04 	vldr	s13, [r2, #16]
 800800e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008012:	edd1 7a00 	vldr	s15, [r1]
 8008016:	2805      	cmp	r0, #5
 8008018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800801c:	d013      	beq.n	8008046 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800801e:	7971      	ldrb	r1, [r6, #5]
 8008020:	edd2 6a05 	vldr	s13, [r2, #20]
 8008024:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008028:	edd1 7a00 	vldr	s15, [r1]
 800802c:	2806      	cmp	r0, #6
 800802e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008032:	d008      	beq.n	8008046 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008034:	edd2 7a06 	vldr	s15, [r2, #24]
 8008038:	79b2      	ldrb	r2, [r6, #6]
 800803a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800803e:	edd2 6a00 	vldr	s13, [r2]
 8008042:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008046:	1832      	adds	r2, r6, r0
 8008048:	ecac 7a01 	vstmia	ip!, {s14}
 800804c:	45e6      	cmp	lr, ip
 800804e:	f63f af50 	bhi.w	8007ef2 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8008052:	9a05      	ldr	r2, [sp, #20]
 8008054:	eb09 0402 	add.w	r4, r9, r2
 8008058:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800805a:	b9a2      	cbnz	r2, 8008086 <forward_lite_dense_if32of32wf32_lut8+0x202>
 800805c:	9a02      	ldr	r2, [sp, #8]
 800805e:	42a2      	cmp	r2, r4
 8008060:	d924      	bls.n	80080ac <forward_lite_dense_if32of32wf32_lut8+0x228>
 8008062:	9a03      	ldr	r2, [sp, #12]
 8008064:	45ce      	cmp	lr, r9
 8008066:	4490      	add	r8, r2
 8008068:	4417      	add	r7, r2
 800806a:	d927      	bls.n	80080bc <forward_lite_dense_if32of32wf32_lut8+0x238>
 800806c:	9a01      	ldr	r2, [sp, #4]
 800806e:	46a1      	mov	r9, r4
 8008070:	eb09 0e02 	add.w	lr, r9, r2
 8008074:	45ce      	cmp	lr, r9
 8008076:	f1a7 0b20 	sub.w	fp, r7, #32
 800807a:	f63f af38 	bhi.w	8007eee <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800807e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008080:	464c      	mov	r4, r9
 8008082:	2a00      	cmp	r2, #0
 8008084:	d0ea      	beq.n	800805c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008086:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008088:	2a00      	cmp	r2, #0
 800808a:	d0e7      	beq.n	800805c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800808c:	9a01      	ldr	r2, [sp, #4]
 800808e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008090:	1aa2      	subs	r2, r4, r2
 8008092:	edd2 7a00 	vldr	s15, [r2]
 8008096:	ecb1 7a01 	vldmia	r1!, {s14}
 800809a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800809e:	ece2 7a01 	vstmia	r2!, {s15}
 80080a2:	4294      	cmp	r4, r2
 80080a4:	d1f5      	bne.n	8008092 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 80080a6:	9a02      	ldr	r2, [sp, #8]
 80080a8:	42a2      	cmp	r2, r4
 80080aa:	d8da      	bhi.n	8008062 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 80080ac:	b007      	add	sp, #28
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	4632      	mov	r2, r6
 80080b4:	e7c8      	b.n	8008048 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 80080b6:	4616      	mov	r6, r2
 80080b8:	465a      	mov	r2, fp
 80080ba:	e776      	b.n	8007faa <forward_lite_dense_if32of32wf32_lut8+0x126>
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	1ae3      	subs	r3, r4, r3
 80080c0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80080c2:	461a      	mov	r2, r3
 80080c4:	ed92 7a00 	vldr	s14, [r2]
 80080c8:	ecf1 7a01 	vldmia	r1!, {s15}
 80080cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080d0:	ece2 7a01 	vstmia	r2!, {s15}
 80080d4:	42a2      	cmp	r2, r4
 80080d6:	d1f5      	bne.n	80080c4 <forward_lite_dense_if32of32wf32_lut8+0x240>
 80080d8:	e7f2      	b.n	80080c0 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 80080da:	bf00      	nop
 80080dc:	00000000 	.word	0x00000000

080080e0 <forward_lite_nl_relu_if32of32>:
 80080e0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80080e4:	3a01      	subs	r2, #1
 80080e6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80080ea:	4561      	cmp	r1, ip
 80080ec:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80080f0:	d814      	bhi.n	800811c <forward_lite_nl_relu_if32of32+0x3c>
 80080f2:	1d11      	adds	r1, r2, #4
 80080f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8008120 <forward_lite_nl_relu_if32of32+0x40>
 80080f8:	f10c 0304 	add.w	r3, ip, #4
 80080fc:	4408      	add	r0, r1
 80080fe:	ebac 0202 	sub.w	r2, ip, r2
 8008102:	ed73 7a01 	vldmdb	r3!, {s15}
 8008106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800810a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810e:	bfb8      	it	lt
 8008110:	eef0 7a47 	vmovlt.f32	s15, s14
 8008114:	4293      	cmp	r3, r2
 8008116:	ed60 7a01 	vstmdb	r0!, {s15}
 800811a:	d1f2      	bne.n	8008102 <forward_lite_nl_relu_if32of32+0x22>
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	00000000 	.word	0x00000000

08008124 <st_int8_copy>:
 8008124:	4288      	cmp	r0, r1
 8008126:	d056      	beq.n	80081d6 <st_int8_copy+0xb2>
 8008128:	2a00      	cmp	r2, #0
 800812a:	d054      	beq.n	80081d6 <st_int8_copy+0xb2>
 800812c:	4288      	cmp	r0, r1
 800812e:	d353      	bcc.n	80081d8 <st_int8_copy+0xb4>
 8008130:	078b      	lsls	r3, r1, #30
 8008132:	d102      	bne.n	800813a <st_int8_copy+0x16>
 8008134:	e009      	b.n	800814a <st_int8_copy+0x26>
 8008136:	2a00      	cmp	r2, #0
 8008138:	d05b      	beq.n	80081f2 <st_int8_copy+0xce>
 800813a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800813e:	f801 3b01 	strb.w	r3, [r1], #1
 8008142:	078b      	lsls	r3, r1, #30
 8008144:	f102 32ff 	add.w	r2, r2, #4294967295
 8008148:	d1f5      	bne.n	8008136 <st_int8_copy+0x12>
 800814a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008152:	d068      	beq.n	8008226 <st_int8_copy+0x102>
 8008154:	ea40 0301 	orr.w	r3, r0, r1
 8008158:	075b      	lsls	r3, r3, #29
 800815a:	d14b      	bne.n	80081f4 <st_int8_copy+0xd0>
 800815c:	f1be 0f01 	cmp.w	lr, #1
 8008160:	d048      	beq.n	80081f4 <st_int8_copy+0xd0>
 8008162:	f100 0310 	add.w	r3, r0, #16
 8008166:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800816a:	f101 0c10 	add.w	ip, r1, #16
 800816e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008172:	ed13 6b04 	vldr	d6, [r3, #-16]
 8008176:	ed13 7b02 	vldr	d7, [r3, #-8]
 800817a:	3310      	adds	r3, #16
 800817c:	4573      	cmp	r3, lr
 800817e:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8008182:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8008186:	f10c 0c10 	add.w	ip, ip, #16
 800818a:	d1f2      	bne.n	8008172 <st_int8_copy+0x4e>
 800818c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008190:	4421      	add	r1, r4
 8008192:	4420      	add	r0, r4
 8008194:	f002 0203 	and.w	r2, r2, #3
 8008198:	b16b      	cbz	r3, 80081b6 <st_int8_copy+0x92>
 800819a:	6804      	ldr	r4, [r0, #0]
 800819c:	600c      	str	r4, [r1, #0]
 800819e:	1e5c      	subs	r4, r3, #1
 80081a0:	d005      	beq.n	80081ae <st_int8_copy+0x8a>
 80081a2:	6845      	ldr	r5, [r0, #4]
 80081a4:	604d      	str	r5, [r1, #4]
 80081a6:	2c01      	cmp	r4, #1
 80081a8:	bf1c      	itt	ne
 80081aa:	6884      	ldrne	r4, [r0, #8]
 80081ac:	608c      	strne	r4, [r1, #8]
 80081ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80081b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80081b6:	b162      	cbz	r2, 80081d2 <st_int8_copy+0xae>
 80081b8:	f990 3000 	ldrsb.w	r3, [r0]
 80081bc:	700b      	strb	r3, [r1, #0]
 80081be:	3a01      	subs	r2, #1
 80081c0:	d007      	beq.n	80081d2 <st_int8_copy+0xae>
 80081c2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80081c6:	704b      	strb	r3, [r1, #1]
 80081c8:	2a01      	cmp	r2, #1
 80081ca:	bf1c      	itt	ne
 80081cc:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80081d0:	708b      	strbne	r3, [r1, #2]
 80081d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d6:	4770      	bx	lr
 80081d8:	1883      	adds	r3, r0, r2
 80081da:	428b      	cmp	r3, r1
 80081dc:	d9a8      	bls.n	8008130 <st_int8_copy+0xc>
 80081de:	4283      	cmp	r3, r0
 80081e0:	440a      	add	r2, r1
 80081e2:	d9f8      	bls.n	80081d6 <st_int8_copy+0xb2>
 80081e4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80081e8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80081ec:	4283      	cmp	r3, r0
 80081ee:	d1f9      	bne.n	80081e4 <st_int8_copy+0xc0>
 80081f0:	4770      	bx	lr
 80081f2:	4770      	bx	lr
 80081f4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80081f8:	460b      	mov	r3, r1
 80081fa:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80081fe:	4684      	mov	ip, r0
 8008200:	f8dc 7000 	ldr.w	r7, [ip]
 8008204:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008208:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800820c:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008210:	f8c3 800c 	str.w	r8, [r3, #12]
 8008214:	601f      	str	r7, [r3, #0]
 8008216:	605e      	str	r6, [r3, #4]
 8008218:	609d      	str	r5, [r3, #8]
 800821a:	3310      	adds	r3, #16
 800821c:	459e      	cmp	lr, r3
 800821e:	f10c 0c10 	add.w	ip, ip, #16
 8008222:	d1ed      	bne.n	8008200 <st_int8_copy+0xdc>
 8008224:	e7b2      	b.n	800818c <st_int8_copy+0x68>
 8008226:	0893      	lsrs	r3, r2, #2
 8008228:	f002 0203 	and.w	r2, r2, #3
 800822c:	e7b4      	b.n	8008198 <st_int8_copy+0x74>
 800822e:	bf00      	nop

08008230 <ai_array_to_buffer_fmt>:
 8008230:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008234:	2b02      	cmp	r3, #2
 8008236:	d053      	beq.n	80082e0 <ai_array_to_buffer_fmt+0xb0>
 8008238:	4a2c      	ldr	r2, [pc, #176]	@ (80082ec <ai_array_to_buffer_fmt+0xbc>)
 800823a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800823e:	4293      	cmp	r3, r2
 8008240:	d010      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 8008242:	dc21      	bgt.n	8008288 <ai_array_to_buffer_fmt+0x58>
 8008244:	4a2a      	ldr	r2, [pc, #168]	@ (80082f0 <ai_array_to_buffer_fmt+0xc0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00c      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 800824a:	dd0f      	ble.n	800826c <ai_array_to_buffer_fmt+0x3c>
 800824c:	4a29      	ldr	r2, [pc, #164]	@ (80082f4 <ai_array_to_buffer_fmt+0xc4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d008      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 8008252:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8008256:	4293      	cmp	r3, r2
 8008258:	d004      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 800825a:	4a27      	ldr	r2, [pc, #156]	@ (80082f8 <ai_array_to_buffer_fmt+0xc8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	bf0c      	ite	eq
 8008260:	4613      	moveq	r3, r2
 8008262:	2340      	movne	r3, #64	@ 0x40
 8008264:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008268:	4318      	orrs	r0, r3
 800826a:	4770      	bx	lr
 800826c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008270:	4293      	cmp	r3, r2
 8008272:	d0f7      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 8008274:	dd2a      	ble.n	80082cc <ai_array_to_buffer_fmt+0x9c>
 8008276:	4a21      	ldr	r2, [pc, #132]	@ (80082fc <ai_array_to_buffer_fmt+0xcc>)
 8008278:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800827c:	4293      	cmp	r3, r2
 800827e:	bf0c      	ite	eq
 8008280:	4613      	moveq	r3, r2
 8008282:	2340      	movne	r3, #64	@ 0x40
 8008284:	4318      	orrs	r0, r3
 8008286:	4770      	bx	lr
 8008288:	4a1d      	ldr	r2, [pc, #116]	@ (8008300 <ai_array_to_buffer_fmt+0xd0>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d0ea      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 800828e:	dd0f      	ble.n	80082b0 <ai_array_to_buffer_fmt+0x80>
 8008290:	4a1c      	ldr	r2, [pc, #112]	@ (8008304 <ai_array_to_buffer_fmt+0xd4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d0e6      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 8008296:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800829a:	4293      	cmp	r3, r2
 800829c:	d0e2      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 800829e:	4a1a      	ldr	r2, [pc, #104]	@ (8008308 <ai_array_to_buffer_fmt+0xd8>)
 80082a0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80082a4:	4293      	cmp	r3, r2
 80082a6:	bf0c      	ite	eq
 80082a8:	4613      	moveq	r3, r2
 80082aa:	2340      	movne	r3, #64	@ 0x40
 80082ac:	4318      	orrs	r0, r3
 80082ae:	4770      	bx	lr
 80082b0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d0d5      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 80082b8:	3207      	adds	r2, #7
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d0d2      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 80082be:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80082c2:	4293      	cmp	r3, r2
 80082c4:	bf0c      	ite	eq
 80082c6:	4613      	moveq	r3, r2
 80082c8:	2340      	movne	r3, #64	@ 0x40
 80082ca:	e7cb      	b.n	8008264 <ai_array_to_buffer_fmt+0x34>
 80082cc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d0c7      	beq.n	8008264 <ai_array_to_buffer_fmt+0x34>
 80082d4:	3280      	adds	r2, #128	@ 0x80
 80082d6:	4293      	cmp	r3, r2
 80082d8:	bf0c      	ite	eq
 80082da:	4613      	moveq	r3, r2
 80082dc:	2340      	movne	r3, #64	@ 0x40
 80082de:	e7c1      	b.n	8008264 <ai_array_to_buffer_fmt+0x34>
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <ai_array_to_buffer_fmt+0xdc>)
 80082e2:	4003      	ands	r3, r0
 80082e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082e8:	e7bc      	b.n	8008264 <ai_array_to_buffer_fmt+0x34>
 80082ea:	bf00      	nop
 80082ec:	00840040 	.word	0x00840040
 80082f0:	00040840 	.word	0x00040840
 80082f4:	00041040 	.word	0x00041040
 80082f8:	0004084f 	.word	0x0004084f
 80082fc:	00040447 	.word	0x00040447
 8008300:	00840840 	.word	0x00840840
 8008304:	00841040 	.word	0x00841040
 8008308:	0084084f 	.word	0x0084084f
 800830c:	00803fff 	.word	0x00803fff

08008310 <ai_array_get_byte_size>:
 8008310:	b319      	cbz	r1, 800835a <ai_array_get_byte_size+0x4a>
 8008312:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008316:	fb01 f303 	mul.w	r3, r1, r3
 800831a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800831e:	3307      	adds	r3, #7
 8008320:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008324:	f023 0307 	bic.w	r3, r3, #7
 8008328:	2a04      	cmp	r2, #4
 800832a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800832e:	fa23 f101 	lsr.w	r1, r3, r1
 8008332:	d00b      	beq.n	800834c <ai_array_get_byte_size+0x3c>
 8008334:	2a08      	cmp	r2, #8
 8008336:	d002      	beq.n	800833e <ai_array_get_byte_size+0x2e>
 8008338:	3107      	adds	r1, #7
 800833a:	08c8      	lsrs	r0, r1, #3
 800833c:	4770      	bx	lr
 800833e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008342:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008346:	3107      	adds	r1, #7
 8008348:	08c8      	lsrs	r0, r1, #3
 800834a:	4770      	bx	lr
 800834c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008350:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008354:	3107      	adds	r1, #7
 8008356:	08c8      	lsrs	r0, r1, #3
 8008358:	4770      	bx	lr
 800835a:	4608      	mov	r0, r1
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <ai_array_get_data_byte_size>:
 8008360:	b169      	cbz	r1, 800837e <ai_array_get_data_byte_size+0x1e>
 8008362:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008366:	fb03 f101 	mul.w	r1, r3, r1
 800836a:	1dcb      	adds	r3, r1, #7
 800836c:	f023 0307 	bic.w	r3, r3, #7
 8008370:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008374:	fa23 f000 	lsr.w	r0, r3, r0
 8008378:	3007      	adds	r0, #7
 800837a:	08c0      	lsrs	r0, r0, #3
 800837c:	4770      	bx	lr
 800837e:	4608      	mov	r0, r1
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop

08008384 <malloc>:
 8008384:	4b02      	ldr	r3, [pc, #8]	@ (8008390 <malloc+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f000 b82d 	b.w	80083e8 <_malloc_r>
 800838e:	bf00      	nop
 8008390:	200009f4 	.word	0x200009f4

08008394 <free>:
 8008394:	4b02      	ldr	r3, [pc, #8]	@ (80083a0 <free+0xc>)
 8008396:	4601      	mov	r1, r0
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f001 bd0d 	b.w	8009db8 <_free_r>
 800839e:	bf00      	nop
 80083a0:	200009f4 	.word	0x200009f4

080083a4 <sbrk_aligned>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4e0f      	ldr	r6, [pc, #60]	@ (80083e4 <sbrk_aligned+0x40>)
 80083a8:	460c      	mov	r4, r1
 80083aa:	6831      	ldr	r1, [r6, #0]
 80083ac:	4605      	mov	r5, r0
 80083ae:	b911      	cbnz	r1, 80083b6 <sbrk_aligned+0x12>
 80083b0:	f000 fe56 	bl	8009060 <_sbrk_r>
 80083b4:	6030      	str	r0, [r6, #0]
 80083b6:	4621      	mov	r1, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 fe51 	bl	8009060 <_sbrk_r>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d103      	bne.n	80083ca <sbrk_aligned+0x26>
 80083c2:	f04f 34ff 	mov.w	r4, #4294967295
 80083c6:	4620      	mov	r0, r4
 80083c8:	bd70      	pop	{r4, r5, r6, pc}
 80083ca:	1cc4      	adds	r4, r0, #3
 80083cc:	f024 0403 	bic.w	r4, r4, #3
 80083d0:	42a0      	cmp	r0, r4
 80083d2:	d0f8      	beq.n	80083c6 <sbrk_aligned+0x22>
 80083d4:	1a21      	subs	r1, r4, r0
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 fe42 	bl	8009060 <_sbrk_r>
 80083dc:	3001      	adds	r0, #1
 80083de:	d1f2      	bne.n	80083c6 <sbrk_aligned+0x22>
 80083e0:	e7ef      	b.n	80083c2 <sbrk_aligned+0x1e>
 80083e2:	bf00      	nop
 80083e4:	2000750c 	.word	0x2000750c

080083e8 <_malloc_r>:
 80083e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ec:	1ccd      	adds	r5, r1, #3
 80083ee:	f025 0503 	bic.w	r5, r5, #3
 80083f2:	3508      	adds	r5, #8
 80083f4:	2d0c      	cmp	r5, #12
 80083f6:	bf38      	it	cc
 80083f8:	250c      	movcc	r5, #12
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	4606      	mov	r6, r0
 80083fe:	db01      	blt.n	8008404 <_malloc_r+0x1c>
 8008400:	42a9      	cmp	r1, r5
 8008402:	d904      	bls.n	800840e <_malloc_r+0x26>
 8008404:	230c      	movs	r3, #12
 8008406:	6033      	str	r3, [r6, #0]
 8008408:	2000      	movs	r0, #0
 800840a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084e4 <_malloc_r+0xfc>
 8008412:	f000 f869 	bl	80084e8 <__malloc_lock>
 8008416:	f8d8 3000 	ldr.w	r3, [r8]
 800841a:	461c      	mov	r4, r3
 800841c:	bb44      	cbnz	r4, 8008470 <_malloc_r+0x88>
 800841e:	4629      	mov	r1, r5
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff ffbf 	bl	80083a4 <sbrk_aligned>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	4604      	mov	r4, r0
 800842a:	d158      	bne.n	80084de <_malloc_r+0xf6>
 800842c:	f8d8 4000 	ldr.w	r4, [r8]
 8008430:	4627      	mov	r7, r4
 8008432:	2f00      	cmp	r7, #0
 8008434:	d143      	bne.n	80084be <_malloc_r+0xd6>
 8008436:	2c00      	cmp	r4, #0
 8008438:	d04b      	beq.n	80084d2 <_malloc_r+0xea>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	4639      	mov	r1, r7
 800843e:	4630      	mov	r0, r6
 8008440:	eb04 0903 	add.w	r9, r4, r3
 8008444:	f000 fe0c 	bl	8009060 <_sbrk_r>
 8008448:	4581      	cmp	r9, r0
 800844a:	d142      	bne.n	80084d2 <_malloc_r+0xea>
 800844c:	6821      	ldr	r1, [r4, #0]
 800844e:	1a6d      	subs	r5, r5, r1
 8008450:	4629      	mov	r1, r5
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff ffa6 	bl	80083a4 <sbrk_aligned>
 8008458:	3001      	adds	r0, #1
 800845a:	d03a      	beq.n	80084d2 <_malloc_r+0xea>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	442b      	add	r3, r5
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	f8d8 3000 	ldr.w	r3, [r8]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	bb62      	cbnz	r2, 80084c4 <_malloc_r+0xdc>
 800846a:	f8c8 7000 	str.w	r7, [r8]
 800846e:	e00f      	b.n	8008490 <_malloc_r+0xa8>
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	1b52      	subs	r2, r2, r5
 8008474:	d420      	bmi.n	80084b8 <_malloc_r+0xd0>
 8008476:	2a0b      	cmp	r2, #11
 8008478:	d917      	bls.n	80084aa <_malloc_r+0xc2>
 800847a:	1961      	adds	r1, r4, r5
 800847c:	42a3      	cmp	r3, r4
 800847e:	6025      	str	r5, [r4, #0]
 8008480:	bf18      	it	ne
 8008482:	6059      	strne	r1, [r3, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	bf08      	it	eq
 8008488:	f8c8 1000 	streq.w	r1, [r8]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4630      	mov	r0, r6
 8008492:	f000 f82f 	bl	80084f4 <__malloc_unlock>
 8008496:	f104 000b 	add.w	r0, r4, #11
 800849a:	1d23      	adds	r3, r4, #4
 800849c:	f020 0007 	bic.w	r0, r0, #7
 80084a0:	1ac2      	subs	r2, r0, r3
 80084a2:	bf1c      	itt	ne
 80084a4:	1a1b      	subne	r3, r3, r0
 80084a6:	50a3      	strne	r3, [r4, r2]
 80084a8:	e7af      	b.n	800840a <_malloc_r+0x22>
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	bf0c      	ite	eq
 80084b0:	f8c8 2000 	streq.w	r2, [r8]
 80084b4:	605a      	strne	r2, [r3, #4]
 80084b6:	e7eb      	b.n	8008490 <_malloc_r+0xa8>
 80084b8:	4623      	mov	r3, r4
 80084ba:	6864      	ldr	r4, [r4, #4]
 80084bc:	e7ae      	b.n	800841c <_malloc_r+0x34>
 80084be:	463c      	mov	r4, r7
 80084c0:	687f      	ldr	r7, [r7, #4]
 80084c2:	e7b6      	b.n	8008432 <_malloc_r+0x4a>
 80084c4:	461a      	mov	r2, r3
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d1fb      	bne.n	80084c4 <_malloc_r+0xdc>
 80084cc:	2300      	movs	r3, #0
 80084ce:	6053      	str	r3, [r2, #4]
 80084d0:	e7de      	b.n	8008490 <_malloc_r+0xa8>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	4630      	mov	r0, r6
 80084d8:	f000 f80c 	bl	80084f4 <__malloc_unlock>
 80084dc:	e794      	b.n	8008408 <_malloc_r+0x20>
 80084de:	6005      	str	r5, [r0, #0]
 80084e0:	e7d6      	b.n	8008490 <_malloc_r+0xa8>
 80084e2:	bf00      	nop
 80084e4:	20007510 	.word	0x20007510

080084e8 <__malloc_lock>:
 80084e8:	4801      	ldr	r0, [pc, #4]	@ (80084f0 <__malloc_lock+0x8>)
 80084ea:	f000 be06 	b.w	80090fa <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	20007654 	.word	0x20007654

080084f4 <__malloc_unlock>:
 80084f4:	4801      	ldr	r0, [pc, #4]	@ (80084fc <__malloc_unlock+0x8>)
 80084f6:	f000 be01 	b.w	80090fc <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	20007654 	.word	0x20007654

08008500 <__cvt>:
 8008500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	ec57 6b10 	vmov	r6, r7, d0
 8008508:	2f00      	cmp	r7, #0
 800850a:	460c      	mov	r4, r1
 800850c:	4619      	mov	r1, r3
 800850e:	463b      	mov	r3, r7
 8008510:	bfbb      	ittet	lt
 8008512:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008516:	461f      	movlt	r7, r3
 8008518:	2300      	movge	r3, #0
 800851a:	232d      	movlt	r3, #45	@ 0x2d
 800851c:	700b      	strb	r3, [r1, #0]
 800851e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008520:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008524:	4691      	mov	r9, r2
 8008526:	f023 0820 	bic.w	r8, r3, #32
 800852a:	bfbc      	itt	lt
 800852c:	4632      	movlt	r2, r6
 800852e:	4616      	movlt	r6, r2
 8008530:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008534:	d005      	beq.n	8008542 <__cvt+0x42>
 8008536:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800853a:	d100      	bne.n	800853e <__cvt+0x3e>
 800853c:	3401      	adds	r4, #1
 800853e:	2102      	movs	r1, #2
 8008540:	e000      	b.n	8008544 <__cvt+0x44>
 8008542:	2103      	movs	r1, #3
 8008544:	ab03      	add	r3, sp, #12
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	ab02      	add	r3, sp, #8
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	ec47 6b10 	vmov	d0, r6, r7
 8008550:	4653      	mov	r3, sl
 8008552:	4622      	mov	r2, r4
 8008554:	f000 fe6c 	bl	8009230 <_dtoa_r>
 8008558:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800855c:	4605      	mov	r5, r0
 800855e:	d119      	bne.n	8008594 <__cvt+0x94>
 8008560:	f019 0f01 	tst.w	r9, #1
 8008564:	d00e      	beq.n	8008584 <__cvt+0x84>
 8008566:	eb00 0904 	add.w	r9, r0, r4
 800856a:	2200      	movs	r2, #0
 800856c:	2300      	movs	r3, #0
 800856e:	4630      	mov	r0, r6
 8008570:	4639      	mov	r1, r7
 8008572:	f7f8 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008576:	b108      	cbz	r0, 800857c <__cvt+0x7c>
 8008578:	f8cd 900c 	str.w	r9, [sp, #12]
 800857c:	2230      	movs	r2, #48	@ 0x30
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	454b      	cmp	r3, r9
 8008582:	d31e      	bcc.n	80085c2 <__cvt+0xc2>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008588:	1b5b      	subs	r3, r3, r5
 800858a:	4628      	mov	r0, r5
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	b004      	add	sp, #16
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008598:	eb00 0904 	add.w	r9, r0, r4
 800859c:	d1e5      	bne.n	800856a <__cvt+0x6a>
 800859e:	7803      	ldrb	r3, [r0, #0]
 80085a0:	2b30      	cmp	r3, #48	@ 0x30
 80085a2:	d10a      	bne.n	80085ba <__cvt+0xba>
 80085a4:	2200      	movs	r2, #0
 80085a6:	2300      	movs	r3, #0
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 fa94 	bl	8000ad8 <__aeabi_dcmpeq>
 80085b0:	b918      	cbnz	r0, 80085ba <__cvt+0xba>
 80085b2:	f1c4 0401 	rsb	r4, r4, #1
 80085b6:	f8ca 4000 	str.w	r4, [sl]
 80085ba:	f8da 3000 	ldr.w	r3, [sl]
 80085be:	4499      	add	r9, r3
 80085c0:	e7d3      	b.n	800856a <__cvt+0x6a>
 80085c2:	1c59      	adds	r1, r3, #1
 80085c4:	9103      	str	r1, [sp, #12]
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	e7d9      	b.n	800857e <__cvt+0x7e>

080085ca <__exponent>:
 80085ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085cc:	2900      	cmp	r1, #0
 80085ce:	bfba      	itte	lt
 80085d0:	4249      	neglt	r1, r1
 80085d2:	232d      	movlt	r3, #45	@ 0x2d
 80085d4:	232b      	movge	r3, #43	@ 0x2b
 80085d6:	2909      	cmp	r1, #9
 80085d8:	7002      	strb	r2, [r0, #0]
 80085da:	7043      	strb	r3, [r0, #1]
 80085dc:	dd29      	ble.n	8008632 <__exponent+0x68>
 80085de:	f10d 0307 	add.w	r3, sp, #7
 80085e2:	461d      	mov	r5, r3
 80085e4:	270a      	movs	r7, #10
 80085e6:	461a      	mov	r2, r3
 80085e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80085ec:	fb07 1416 	mls	r4, r7, r6, r1
 80085f0:	3430      	adds	r4, #48	@ 0x30
 80085f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085f6:	460c      	mov	r4, r1
 80085f8:	2c63      	cmp	r4, #99	@ 0x63
 80085fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80085fe:	4631      	mov	r1, r6
 8008600:	dcf1      	bgt.n	80085e6 <__exponent+0x1c>
 8008602:	3130      	adds	r1, #48	@ 0x30
 8008604:	1e94      	subs	r4, r2, #2
 8008606:	f803 1c01 	strb.w	r1, [r3, #-1]
 800860a:	1c41      	adds	r1, r0, #1
 800860c:	4623      	mov	r3, r4
 800860e:	42ab      	cmp	r3, r5
 8008610:	d30a      	bcc.n	8008628 <__exponent+0x5e>
 8008612:	f10d 0309 	add.w	r3, sp, #9
 8008616:	1a9b      	subs	r3, r3, r2
 8008618:	42ac      	cmp	r4, r5
 800861a:	bf88      	it	hi
 800861c:	2300      	movhi	r3, #0
 800861e:	3302      	adds	r3, #2
 8008620:	4403      	add	r3, r0
 8008622:	1a18      	subs	r0, r3, r0
 8008624:	b003      	add	sp, #12
 8008626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008628:	f813 6b01 	ldrb.w	r6, [r3], #1
 800862c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008630:	e7ed      	b.n	800860e <__exponent+0x44>
 8008632:	2330      	movs	r3, #48	@ 0x30
 8008634:	3130      	adds	r1, #48	@ 0x30
 8008636:	7083      	strb	r3, [r0, #2]
 8008638:	70c1      	strb	r1, [r0, #3]
 800863a:	1d03      	adds	r3, r0, #4
 800863c:	e7f1      	b.n	8008622 <__exponent+0x58>
	...

08008640 <_printf_float>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	b08d      	sub	sp, #52	@ 0x34
 8008646:	460c      	mov	r4, r1
 8008648:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800864c:	4616      	mov	r6, r2
 800864e:	461f      	mov	r7, r3
 8008650:	4605      	mov	r5, r0
 8008652:	f000 fccd 	bl	8008ff0 <_localeconv_r>
 8008656:	6803      	ldr	r3, [r0, #0]
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	4618      	mov	r0, r3
 800865c:	f7f7 fe10 	bl	8000280 <strlen>
 8008660:	2300      	movs	r3, #0
 8008662:	930a      	str	r3, [sp, #40]	@ 0x28
 8008664:	f8d8 3000 	ldr.w	r3, [r8]
 8008668:	9005      	str	r0, [sp, #20]
 800866a:	3307      	adds	r3, #7
 800866c:	f023 0307 	bic.w	r3, r3, #7
 8008670:	f103 0208 	add.w	r2, r3, #8
 8008674:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008678:	f8d4 b000 	ldr.w	fp, [r4]
 800867c:	f8c8 2000 	str.w	r2, [r8]
 8008680:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008684:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008688:	9307      	str	r3, [sp, #28]
 800868a:	f8cd 8018 	str.w	r8, [sp, #24]
 800868e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008696:	4b9c      	ldr	r3, [pc, #624]	@ (8008908 <_printf_float+0x2c8>)
 8008698:	f04f 32ff 	mov.w	r2, #4294967295
 800869c:	f7f8 fa4e 	bl	8000b3c <__aeabi_dcmpun>
 80086a0:	bb70      	cbnz	r0, 8008700 <_printf_float+0xc0>
 80086a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086a6:	4b98      	ldr	r3, [pc, #608]	@ (8008908 <_printf_float+0x2c8>)
 80086a8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ac:	f7f8 fa28 	bl	8000b00 <__aeabi_dcmple>
 80086b0:	bb30      	cbnz	r0, 8008700 <_printf_float+0xc0>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f8 fa17 	bl	8000aec <__aeabi_dcmplt>
 80086be:	b110      	cbz	r0, 80086c6 <_printf_float+0x86>
 80086c0:	232d      	movs	r3, #45	@ 0x2d
 80086c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086c6:	4a91      	ldr	r2, [pc, #580]	@ (800890c <_printf_float+0x2cc>)
 80086c8:	4b91      	ldr	r3, [pc, #580]	@ (8008910 <_printf_float+0x2d0>)
 80086ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086ce:	bf94      	ite	ls
 80086d0:	4690      	movls	r8, r2
 80086d2:	4698      	movhi	r8, r3
 80086d4:	2303      	movs	r3, #3
 80086d6:	6123      	str	r3, [r4, #16]
 80086d8:	f02b 0304 	bic.w	r3, fp, #4
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	f04f 0900 	mov.w	r9, #0
 80086e2:	9700      	str	r7, [sp, #0]
 80086e4:	4633      	mov	r3, r6
 80086e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f9d2 	bl	8008a94 <_printf_common>
 80086f0:	3001      	adds	r0, #1
 80086f2:	f040 808d 	bne.w	8008810 <_printf_float+0x1d0>
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	b00d      	add	sp, #52	@ 0x34
 80086fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	4640      	mov	r0, r8
 8008706:	4649      	mov	r1, r9
 8008708:	f7f8 fa18 	bl	8000b3c <__aeabi_dcmpun>
 800870c:	b140      	cbz	r0, 8008720 <_printf_float+0xe0>
 800870e:	464b      	mov	r3, r9
 8008710:	2b00      	cmp	r3, #0
 8008712:	bfbc      	itt	lt
 8008714:	232d      	movlt	r3, #45	@ 0x2d
 8008716:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800871a:	4a7e      	ldr	r2, [pc, #504]	@ (8008914 <_printf_float+0x2d4>)
 800871c:	4b7e      	ldr	r3, [pc, #504]	@ (8008918 <_printf_float+0x2d8>)
 800871e:	e7d4      	b.n	80086ca <_printf_float+0x8a>
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008726:	9206      	str	r2, [sp, #24]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	d13b      	bne.n	80087a4 <_printf_float+0x164>
 800872c:	2306      	movs	r3, #6
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008734:	2300      	movs	r3, #0
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	ab0a      	add	r3, sp, #40	@ 0x28
 800873c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008740:	ab09      	add	r3, sp, #36	@ 0x24
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	6861      	ldr	r1, [r4, #4]
 8008746:	ec49 8b10 	vmov	d0, r8, r9
 800874a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800874e:	4628      	mov	r0, r5
 8008750:	f7ff fed6 	bl	8008500 <__cvt>
 8008754:	9b06      	ldr	r3, [sp, #24]
 8008756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008758:	2b47      	cmp	r3, #71	@ 0x47
 800875a:	4680      	mov	r8, r0
 800875c:	d129      	bne.n	80087b2 <_printf_float+0x172>
 800875e:	1cc8      	adds	r0, r1, #3
 8008760:	db02      	blt.n	8008768 <_printf_float+0x128>
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	4299      	cmp	r1, r3
 8008766:	dd41      	ble.n	80087ec <_printf_float+0x1ac>
 8008768:	f1aa 0a02 	sub.w	sl, sl, #2
 800876c:	fa5f fa8a 	uxtb.w	sl, sl
 8008770:	3901      	subs	r1, #1
 8008772:	4652      	mov	r2, sl
 8008774:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008778:	9109      	str	r1, [sp, #36]	@ 0x24
 800877a:	f7ff ff26 	bl	80085ca <__exponent>
 800877e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008780:	1813      	adds	r3, r2, r0
 8008782:	2a01      	cmp	r2, #1
 8008784:	4681      	mov	r9, r0
 8008786:	6123      	str	r3, [r4, #16]
 8008788:	dc02      	bgt.n	8008790 <_printf_float+0x150>
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	07d2      	lsls	r2, r2, #31
 800878e:	d501      	bpl.n	8008794 <_printf_float+0x154>
 8008790:	3301      	adds	r3, #1
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0a2      	beq.n	80086e2 <_printf_float+0xa2>
 800879c:	232d      	movs	r3, #45	@ 0x2d
 800879e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a2:	e79e      	b.n	80086e2 <_printf_float+0xa2>
 80087a4:	9a06      	ldr	r2, [sp, #24]
 80087a6:	2a47      	cmp	r2, #71	@ 0x47
 80087a8:	d1c2      	bne.n	8008730 <_printf_float+0xf0>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1c0      	bne.n	8008730 <_printf_float+0xf0>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e7bd      	b.n	800872e <_printf_float+0xee>
 80087b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087b6:	d9db      	bls.n	8008770 <_printf_float+0x130>
 80087b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087bc:	d118      	bne.n	80087f0 <_printf_float+0x1b0>
 80087be:	2900      	cmp	r1, #0
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	dd0b      	ble.n	80087dc <_printf_float+0x19c>
 80087c4:	6121      	str	r1, [r4, #16]
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x18e>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d0      	lsls	r0, r2, #31
 80087cc:	d502      	bpl.n	80087d4 <_printf_float+0x194>
 80087ce:	3301      	adds	r3, #1
 80087d0:	440b      	add	r3, r1
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	e7db      	b.n	8008794 <_printf_float+0x154>
 80087dc:	b913      	cbnz	r3, 80087e4 <_printf_float+0x1a4>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	07d2      	lsls	r2, r2, #31
 80087e2:	d501      	bpl.n	80087e8 <_printf_float+0x1a8>
 80087e4:	3302      	adds	r3, #2
 80087e6:	e7f4      	b.n	80087d2 <_printf_float+0x192>
 80087e8:	2301      	movs	r3, #1
 80087ea:	e7f2      	b.n	80087d2 <_printf_float+0x192>
 80087ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f2:	4299      	cmp	r1, r3
 80087f4:	db05      	blt.n	8008802 <_printf_float+0x1c2>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	6121      	str	r1, [r4, #16]
 80087fa:	07d8      	lsls	r0, r3, #31
 80087fc:	d5ea      	bpl.n	80087d4 <_printf_float+0x194>
 80087fe:	1c4b      	adds	r3, r1, #1
 8008800:	e7e7      	b.n	80087d2 <_printf_float+0x192>
 8008802:	2900      	cmp	r1, #0
 8008804:	bfd4      	ite	le
 8008806:	f1c1 0202 	rsble	r2, r1, #2
 800880a:	2201      	movgt	r2, #1
 800880c:	4413      	add	r3, r2
 800880e:	e7e0      	b.n	80087d2 <_printf_float+0x192>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	055a      	lsls	r2, r3, #21
 8008814:	d407      	bmi.n	8008826 <_printf_float+0x1e6>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	4642      	mov	r2, r8
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	d12b      	bne.n	800887c <_printf_float+0x23c>
 8008824:	e767      	b.n	80086f6 <_printf_float+0xb6>
 8008826:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800882a:	f240 80dd 	bls.w	80089e8 <_printf_float+0x3a8>
 800882e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	f7f8 f94f 	bl	8000ad8 <__aeabi_dcmpeq>
 800883a:	2800      	cmp	r0, #0
 800883c:	d033      	beq.n	80088a6 <_printf_float+0x266>
 800883e:	4a37      	ldr	r2, [pc, #220]	@ (800891c <_printf_float+0x2dc>)
 8008840:	2301      	movs	r3, #1
 8008842:	4631      	mov	r1, r6
 8008844:	4628      	mov	r0, r5
 8008846:	47b8      	blx	r7
 8008848:	3001      	adds	r0, #1
 800884a:	f43f af54 	beq.w	80086f6 <_printf_float+0xb6>
 800884e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008852:	4543      	cmp	r3, r8
 8008854:	db02      	blt.n	800885c <_printf_float+0x21c>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	07d8      	lsls	r0, r3, #31
 800885a:	d50f      	bpl.n	800887c <_printf_float+0x23c>
 800885c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f af45 	beq.w	80086f6 <_printf_float+0xb6>
 800886c:	f04f 0900 	mov.w	r9, #0
 8008870:	f108 38ff 	add.w	r8, r8, #4294967295
 8008874:	f104 0a1a 	add.w	sl, r4, #26
 8008878:	45c8      	cmp	r8, r9
 800887a:	dc09      	bgt.n	8008890 <_printf_float+0x250>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	f100 8103 	bmi.w	8008a8a <_printf_float+0x44a>
 8008884:	68e0      	ldr	r0, [r4, #12]
 8008886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008888:	4298      	cmp	r0, r3
 800888a:	bfb8      	it	lt
 800888c:	4618      	movlt	r0, r3
 800888e:	e734      	b.n	80086fa <_printf_float+0xba>
 8008890:	2301      	movs	r3, #1
 8008892:	4652      	mov	r2, sl
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f af2b 	beq.w	80086f6 <_printf_float+0xb6>
 80088a0:	f109 0901 	add.w	r9, r9, #1
 80088a4:	e7e8      	b.n	8008878 <_printf_float+0x238>
 80088a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	dc39      	bgt.n	8008920 <_printf_float+0x2e0>
 80088ac:	4a1b      	ldr	r2, [pc, #108]	@ (800891c <_printf_float+0x2dc>)
 80088ae:	2301      	movs	r3, #1
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	f43f af1d 	beq.w	80086f6 <_printf_float+0xb6>
 80088bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088c0:	ea59 0303 	orrs.w	r3, r9, r3
 80088c4:	d102      	bne.n	80088cc <_printf_float+0x28c>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	07d9      	lsls	r1, r3, #31
 80088ca:	d5d7      	bpl.n	800887c <_printf_float+0x23c>
 80088cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	f43f af0d 	beq.w	80086f6 <_printf_float+0xb6>
 80088dc:	f04f 0a00 	mov.w	sl, #0
 80088e0:	f104 0b1a 	add.w	fp, r4, #26
 80088e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e6:	425b      	negs	r3, r3
 80088e8:	4553      	cmp	r3, sl
 80088ea:	dc01      	bgt.n	80088f0 <_printf_float+0x2b0>
 80088ec:	464b      	mov	r3, r9
 80088ee:	e793      	b.n	8008818 <_printf_float+0x1d8>
 80088f0:	2301      	movs	r3, #1
 80088f2:	465a      	mov	r2, fp
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	f43f aefb 	beq.w	80086f6 <_printf_float+0xb6>
 8008900:	f10a 0a01 	add.w	sl, sl, #1
 8008904:	e7ee      	b.n	80088e4 <_printf_float+0x2a4>
 8008906:	bf00      	nop
 8008908:	7fefffff 	.word	0x7fefffff
 800890c:	08067b4c 	.word	0x08067b4c
 8008910:	08067b50 	.word	0x08067b50
 8008914:	08067b54 	.word	0x08067b54
 8008918:	08067b58 	.word	0x08067b58
 800891c:	0800baad 	.word	0x0800baad
 8008920:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008922:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008926:	4553      	cmp	r3, sl
 8008928:	bfa8      	it	ge
 800892a:	4653      	movge	r3, sl
 800892c:	2b00      	cmp	r3, #0
 800892e:	4699      	mov	r9, r3
 8008930:	dc36      	bgt.n	80089a0 <_printf_float+0x360>
 8008932:	f04f 0b00 	mov.w	fp, #0
 8008936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800893a:	f104 021a 	add.w	r2, r4, #26
 800893e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008940:	9306      	str	r3, [sp, #24]
 8008942:	eba3 0309 	sub.w	r3, r3, r9
 8008946:	455b      	cmp	r3, fp
 8008948:	dc31      	bgt.n	80089ae <_printf_float+0x36e>
 800894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894c:	459a      	cmp	sl, r3
 800894e:	dc3a      	bgt.n	80089c6 <_printf_float+0x386>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	07da      	lsls	r2, r3, #31
 8008954:	d437      	bmi.n	80089c6 <_printf_float+0x386>
 8008956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008958:	ebaa 0903 	sub.w	r9, sl, r3
 800895c:	9b06      	ldr	r3, [sp, #24]
 800895e:	ebaa 0303 	sub.w	r3, sl, r3
 8008962:	4599      	cmp	r9, r3
 8008964:	bfa8      	it	ge
 8008966:	4699      	movge	r9, r3
 8008968:	f1b9 0f00 	cmp.w	r9, #0
 800896c:	dc33      	bgt.n	80089d6 <_printf_float+0x396>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008976:	f104 0b1a 	add.w	fp, r4, #26
 800897a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897c:	ebaa 0303 	sub.w	r3, sl, r3
 8008980:	eba3 0309 	sub.w	r3, r3, r9
 8008984:	4543      	cmp	r3, r8
 8008986:	f77f af79 	ble.w	800887c <_printf_float+0x23c>
 800898a:	2301      	movs	r3, #1
 800898c:	465a      	mov	r2, fp
 800898e:	4631      	mov	r1, r6
 8008990:	4628      	mov	r0, r5
 8008992:	47b8      	blx	r7
 8008994:	3001      	adds	r0, #1
 8008996:	f43f aeae 	beq.w	80086f6 <_printf_float+0xb6>
 800899a:	f108 0801 	add.w	r8, r8, #1
 800899e:	e7ec      	b.n	800897a <_printf_float+0x33a>
 80089a0:	4642      	mov	r2, r8
 80089a2:	4631      	mov	r1, r6
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	d1c2      	bne.n	8008932 <_printf_float+0x2f2>
 80089ac:	e6a3      	b.n	80086f6 <_printf_float+0xb6>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	9206      	str	r2, [sp, #24]
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	f43f ae9c 	beq.w	80086f6 <_printf_float+0xb6>
 80089be:	9a06      	ldr	r2, [sp, #24]
 80089c0:	f10b 0b01 	add.w	fp, fp, #1
 80089c4:	e7bb      	b.n	800893e <_printf_float+0x2fe>
 80089c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ca:	4631      	mov	r1, r6
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b8      	blx	r7
 80089d0:	3001      	adds	r0, #1
 80089d2:	d1c0      	bne.n	8008956 <_printf_float+0x316>
 80089d4:	e68f      	b.n	80086f6 <_printf_float+0xb6>
 80089d6:	9a06      	ldr	r2, [sp, #24]
 80089d8:	464b      	mov	r3, r9
 80089da:	4442      	add	r2, r8
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	d1c3      	bne.n	800896e <_printf_float+0x32e>
 80089e6:	e686      	b.n	80086f6 <_printf_float+0xb6>
 80089e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089ec:	f1ba 0f01 	cmp.w	sl, #1
 80089f0:	dc01      	bgt.n	80089f6 <_printf_float+0x3b6>
 80089f2:	07db      	lsls	r3, r3, #31
 80089f4:	d536      	bpl.n	8008a64 <_printf_float+0x424>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4642      	mov	r2, r8
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	f43f ae78 	beq.w	80086f6 <_printf_float+0xb6>
 8008a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	f43f ae70 	beq.w	80086f6 <_printf_float+0xb6>
 8008a16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a22:	f7f8 f859 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a26:	b9c0      	cbnz	r0, 8008a5a <_printf_float+0x41a>
 8008a28:	4653      	mov	r3, sl
 8008a2a:	f108 0201 	add.w	r2, r8, #1
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	d10c      	bne.n	8008a52 <_printf_float+0x412>
 8008a38:	e65d      	b.n	80086f6 <_printf_float+0xb6>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	465a      	mov	r2, fp
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	f43f ae56 	beq.w	80086f6 <_printf_float+0xb6>
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	45d0      	cmp	r8, sl
 8008a50:	dbf3      	blt.n	8008a3a <_printf_float+0x3fa>
 8008a52:	464b      	mov	r3, r9
 8008a54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a58:	e6df      	b.n	800881a <_printf_float+0x1da>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	f104 0b1a 	add.w	fp, r4, #26
 8008a62:	e7f4      	b.n	8008a4e <_printf_float+0x40e>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4642      	mov	r2, r8
 8008a68:	e7e1      	b.n	8008a2e <_printf_float+0x3ee>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	464a      	mov	r2, r9
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	f43f ae3e 	beq.w	80086f6 <_printf_float+0xb6>
 8008a7a:	f108 0801 	add.w	r8, r8, #1
 8008a7e:	68e3      	ldr	r3, [r4, #12]
 8008a80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a82:	1a5b      	subs	r3, r3, r1
 8008a84:	4543      	cmp	r3, r8
 8008a86:	dcf0      	bgt.n	8008a6a <_printf_float+0x42a>
 8008a88:	e6fc      	b.n	8008884 <_printf_float+0x244>
 8008a8a:	f04f 0800 	mov.w	r8, #0
 8008a8e:	f104 0919 	add.w	r9, r4, #25
 8008a92:	e7f4      	b.n	8008a7e <_printf_float+0x43e>

08008a94 <_printf_common>:
 8008a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a98:	4616      	mov	r6, r2
 8008a9a:	4698      	mov	r8, r3
 8008a9c:	688a      	ldr	r2, [r1, #8]
 8008a9e:	690b      	ldr	r3, [r1, #16]
 8008aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	bfb8      	it	lt
 8008aa8:	4613      	movlt	r3, r2
 8008aaa:	6033      	str	r3, [r6, #0]
 8008aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b10a      	cbz	r2, 8008aba <_printf_common+0x26>
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	0699      	lsls	r1, r3, #26
 8008abe:	bf42      	ittt	mi
 8008ac0:	6833      	ldrmi	r3, [r6, #0]
 8008ac2:	3302      	addmi	r3, #2
 8008ac4:	6033      	strmi	r3, [r6, #0]
 8008ac6:	6825      	ldr	r5, [r4, #0]
 8008ac8:	f015 0506 	ands.w	r5, r5, #6
 8008acc:	d106      	bne.n	8008adc <_printf_common+0x48>
 8008ace:	f104 0a19 	add.w	sl, r4, #25
 8008ad2:	68e3      	ldr	r3, [r4, #12]
 8008ad4:	6832      	ldr	r2, [r6, #0]
 8008ad6:	1a9b      	subs	r3, r3, r2
 8008ad8:	42ab      	cmp	r3, r5
 8008ada:	dc26      	bgt.n	8008b2a <_printf_common+0x96>
 8008adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ae0:	6822      	ldr	r2, [r4, #0]
 8008ae2:	3b00      	subs	r3, #0
 8008ae4:	bf18      	it	ne
 8008ae6:	2301      	movne	r3, #1
 8008ae8:	0692      	lsls	r2, r2, #26
 8008aea:	d42b      	bmi.n	8008b44 <_printf_common+0xb0>
 8008aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008af0:	4641      	mov	r1, r8
 8008af2:	4638      	mov	r0, r7
 8008af4:	47c8      	blx	r9
 8008af6:	3001      	adds	r0, #1
 8008af8:	d01e      	beq.n	8008b38 <_printf_common+0xa4>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	f003 0306 	and.w	r3, r3, #6
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	bf02      	ittt	eq
 8008b06:	68e5      	ldreq	r5, [r4, #12]
 8008b08:	6833      	ldreq	r3, [r6, #0]
 8008b0a:	1aed      	subeq	r5, r5, r3
 8008b0c:	68a3      	ldr	r3, [r4, #8]
 8008b0e:	bf0c      	ite	eq
 8008b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b14:	2500      	movne	r5, #0
 8008b16:	4293      	cmp	r3, r2
 8008b18:	bfc4      	itt	gt
 8008b1a:	1a9b      	subgt	r3, r3, r2
 8008b1c:	18ed      	addgt	r5, r5, r3
 8008b1e:	2600      	movs	r6, #0
 8008b20:	341a      	adds	r4, #26
 8008b22:	42b5      	cmp	r5, r6
 8008b24:	d11a      	bne.n	8008b5c <_printf_common+0xc8>
 8008b26:	2000      	movs	r0, #0
 8008b28:	e008      	b.n	8008b3c <_printf_common+0xa8>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4652      	mov	r2, sl
 8008b2e:	4641      	mov	r1, r8
 8008b30:	4638      	mov	r0, r7
 8008b32:	47c8      	blx	r9
 8008b34:	3001      	adds	r0, #1
 8008b36:	d103      	bne.n	8008b40 <_printf_common+0xac>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b40:	3501      	adds	r5, #1
 8008b42:	e7c6      	b.n	8008ad2 <_printf_common+0x3e>
 8008b44:	18e1      	adds	r1, r4, r3
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	2030      	movs	r0, #48	@ 0x30
 8008b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b4e:	4422      	add	r2, r4
 8008b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b58:	3302      	adds	r3, #2
 8008b5a:	e7c7      	b.n	8008aec <_printf_common+0x58>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4622      	mov	r2, r4
 8008b60:	4641      	mov	r1, r8
 8008b62:	4638      	mov	r0, r7
 8008b64:	47c8      	blx	r9
 8008b66:	3001      	adds	r0, #1
 8008b68:	d0e6      	beq.n	8008b38 <_printf_common+0xa4>
 8008b6a:	3601      	adds	r6, #1
 8008b6c:	e7d9      	b.n	8008b22 <_printf_common+0x8e>
	...

08008b70 <_printf_i>:
 8008b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b74:	7e0f      	ldrb	r7, [r1, #24]
 8008b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b78:	2f78      	cmp	r7, #120	@ 0x78
 8008b7a:	4691      	mov	r9, r2
 8008b7c:	4680      	mov	r8, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	469a      	mov	sl, r3
 8008b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b86:	d807      	bhi.n	8008b98 <_printf_i+0x28>
 8008b88:	2f62      	cmp	r7, #98	@ 0x62
 8008b8a:	d80a      	bhi.n	8008ba2 <_printf_i+0x32>
 8008b8c:	2f00      	cmp	r7, #0
 8008b8e:	f000 80d2 	beq.w	8008d36 <_printf_i+0x1c6>
 8008b92:	2f58      	cmp	r7, #88	@ 0x58
 8008b94:	f000 80b9 	beq.w	8008d0a <_printf_i+0x19a>
 8008b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ba0:	e03a      	b.n	8008c18 <_printf_i+0xa8>
 8008ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ba6:	2b15      	cmp	r3, #21
 8008ba8:	d8f6      	bhi.n	8008b98 <_printf_i+0x28>
 8008baa:	a101      	add	r1, pc, #4	@ (adr r1, 8008bb0 <_printf_i+0x40>)
 8008bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bb0:	08008c09 	.word	0x08008c09
 8008bb4:	08008c1d 	.word	0x08008c1d
 8008bb8:	08008b99 	.word	0x08008b99
 8008bbc:	08008b99 	.word	0x08008b99
 8008bc0:	08008b99 	.word	0x08008b99
 8008bc4:	08008b99 	.word	0x08008b99
 8008bc8:	08008c1d 	.word	0x08008c1d
 8008bcc:	08008b99 	.word	0x08008b99
 8008bd0:	08008b99 	.word	0x08008b99
 8008bd4:	08008b99 	.word	0x08008b99
 8008bd8:	08008b99 	.word	0x08008b99
 8008bdc:	08008d1d 	.word	0x08008d1d
 8008be0:	08008c47 	.word	0x08008c47
 8008be4:	08008cd7 	.word	0x08008cd7
 8008be8:	08008b99 	.word	0x08008b99
 8008bec:	08008b99 	.word	0x08008b99
 8008bf0:	08008d3f 	.word	0x08008d3f
 8008bf4:	08008b99 	.word	0x08008b99
 8008bf8:	08008c47 	.word	0x08008c47
 8008bfc:	08008b99 	.word	0x08008b99
 8008c00:	08008b99 	.word	0x08008b99
 8008c04:	08008cdf 	.word	0x08008cdf
 8008c08:	6833      	ldr	r3, [r6, #0]
 8008c0a:	1d1a      	adds	r2, r3, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6032      	str	r2, [r6, #0]
 8008c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e09d      	b.n	8008d58 <_printf_i+0x1e8>
 8008c1c:	6833      	ldr	r3, [r6, #0]
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	1d19      	adds	r1, r3, #4
 8008c22:	6031      	str	r1, [r6, #0]
 8008c24:	0606      	lsls	r6, r0, #24
 8008c26:	d501      	bpl.n	8008c2c <_printf_i+0xbc>
 8008c28:	681d      	ldr	r5, [r3, #0]
 8008c2a:	e003      	b.n	8008c34 <_printf_i+0xc4>
 8008c2c:	0645      	lsls	r5, r0, #25
 8008c2e:	d5fb      	bpl.n	8008c28 <_printf_i+0xb8>
 8008c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c34:	2d00      	cmp	r5, #0
 8008c36:	da03      	bge.n	8008c40 <_printf_i+0xd0>
 8008c38:	232d      	movs	r3, #45	@ 0x2d
 8008c3a:	426d      	negs	r5, r5
 8008c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c40:	4859      	ldr	r0, [pc, #356]	@ (8008da8 <_printf_i+0x238>)
 8008c42:	230a      	movs	r3, #10
 8008c44:	e011      	b.n	8008c6a <_printf_i+0xfa>
 8008c46:	6821      	ldr	r1, [r4, #0]
 8008c48:	6833      	ldr	r3, [r6, #0]
 8008c4a:	0608      	lsls	r0, r1, #24
 8008c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c50:	d402      	bmi.n	8008c58 <_printf_i+0xe8>
 8008c52:	0649      	lsls	r1, r1, #25
 8008c54:	bf48      	it	mi
 8008c56:	b2ad      	uxthmi	r5, r5
 8008c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c5a:	4853      	ldr	r0, [pc, #332]	@ (8008da8 <_printf_i+0x238>)
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	bf14      	ite	ne
 8008c60:	230a      	movne	r3, #10
 8008c62:	2308      	moveq	r3, #8
 8008c64:	2100      	movs	r1, #0
 8008c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c6a:	6866      	ldr	r6, [r4, #4]
 8008c6c:	60a6      	str	r6, [r4, #8]
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	bfa2      	ittt	ge
 8008c72:	6821      	ldrge	r1, [r4, #0]
 8008c74:	f021 0104 	bicge.w	r1, r1, #4
 8008c78:	6021      	strge	r1, [r4, #0]
 8008c7a:	b90d      	cbnz	r5, 8008c80 <_printf_i+0x110>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	d04b      	beq.n	8008d18 <_printf_i+0x1a8>
 8008c80:	4616      	mov	r6, r2
 8008c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c86:	fb03 5711 	mls	r7, r3, r1, r5
 8008c8a:	5dc7      	ldrb	r7, [r0, r7]
 8008c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c90:	462f      	mov	r7, r5
 8008c92:	42bb      	cmp	r3, r7
 8008c94:	460d      	mov	r5, r1
 8008c96:	d9f4      	bls.n	8008c82 <_printf_i+0x112>
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d10b      	bne.n	8008cb4 <_printf_i+0x144>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	07df      	lsls	r7, r3, #31
 8008ca0:	d508      	bpl.n	8008cb4 <_printf_i+0x144>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	bfde      	ittt	le
 8008caa:	2330      	movle	r3, #48	@ 0x30
 8008cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cb4:	1b92      	subs	r2, r2, r6
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	f8cd a000 	str.w	sl, [sp]
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	aa03      	add	r2, sp, #12
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f7ff fee6 	bl	8008a94 <_printf_common>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d14a      	bne.n	8008d62 <_printf_i+0x1f2>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	b004      	add	sp, #16
 8008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f043 0320 	orr.w	r3, r3, #32
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	4833      	ldr	r0, [pc, #204]	@ (8008dac <_printf_i+0x23c>)
 8008ce0:	2778      	movs	r7, #120	@ 0x78
 8008ce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	6831      	ldr	r1, [r6, #0]
 8008cea:	061f      	lsls	r7, r3, #24
 8008cec:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cf0:	d402      	bmi.n	8008cf8 <_printf_i+0x188>
 8008cf2:	065f      	lsls	r7, r3, #25
 8008cf4:	bf48      	it	mi
 8008cf6:	b2ad      	uxthmi	r5, r5
 8008cf8:	6031      	str	r1, [r6, #0]
 8008cfa:	07d9      	lsls	r1, r3, #31
 8008cfc:	bf44      	itt	mi
 8008cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8008d02:	6023      	strmi	r3, [r4, #0]
 8008d04:	b11d      	cbz	r5, 8008d0e <_printf_i+0x19e>
 8008d06:	2310      	movs	r3, #16
 8008d08:	e7ac      	b.n	8008c64 <_printf_i+0xf4>
 8008d0a:	4827      	ldr	r0, [pc, #156]	@ (8008da8 <_printf_i+0x238>)
 8008d0c:	e7e9      	b.n	8008ce2 <_printf_i+0x172>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	f023 0320 	bic.w	r3, r3, #32
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	e7f6      	b.n	8008d06 <_printf_i+0x196>
 8008d18:	4616      	mov	r6, r2
 8008d1a:	e7bd      	b.n	8008c98 <_printf_i+0x128>
 8008d1c:	6833      	ldr	r3, [r6, #0]
 8008d1e:	6825      	ldr	r5, [r4, #0]
 8008d20:	6961      	ldr	r1, [r4, #20]
 8008d22:	1d18      	adds	r0, r3, #4
 8008d24:	6030      	str	r0, [r6, #0]
 8008d26:	062e      	lsls	r6, r5, #24
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	d501      	bpl.n	8008d30 <_printf_i+0x1c0>
 8008d2c:	6019      	str	r1, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <_printf_i+0x1c6>
 8008d30:	0668      	lsls	r0, r5, #25
 8008d32:	d5fb      	bpl.n	8008d2c <_printf_i+0x1bc>
 8008d34:	8019      	strh	r1, [r3, #0]
 8008d36:	2300      	movs	r3, #0
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	4616      	mov	r6, r2
 8008d3c:	e7bc      	b.n	8008cb8 <_printf_i+0x148>
 8008d3e:	6833      	ldr	r3, [r6, #0]
 8008d40:	1d1a      	adds	r2, r3, #4
 8008d42:	6032      	str	r2, [r6, #0]
 8008d44:	681e      	ldr	r6, [r3, #0]
 8008d46:	6862      	ldr	r2, [r4, #4]
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7f7 fa48 	bl	80001e0 <memchr>
 8008d50:	b108      	cbz	r0, 8008d56 <_printf_i+0x1e6>
 8008d52:	1b80      	subs	r0, r0, r6
 8008d54:	6060      	str	r0, [r4, #4]
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d60:	e7aa      	b.n	8008cb8 <_printf_i+0x148>
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	4632      	mov	r2, r6
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d0ad      	beq.n	8008ccc <_printf_i+0x15c>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	079b      	lsls	r3, r3, #30
 8008d74:	d413      	bmi.n	8008d9e <_printf_i+0x22e>
 8008d76:	68e0      	ldr	r0, [r4, #12]
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	4298      	cmp	r0, r3
 8008d7c:	bfb8      	it	lt
 8008d7e:	4618      	movlt	r0, r3
 8008d80:	e7a6      	b.n	8008cd0 <_printf_i+0x160>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4632      	mov	r2, r6
 8008d86:	4649      	mov	r1, r9
 8008d88:	4640      	mov	r0, r8
 8008d8a:	47d0      	blx	sl
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d09d      	beq.n	8008ccc <_printf_i+0x15c>
 8008d90:	3501      	adds	r5, #1
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	9903      	ldr	r1, [sp, #12]
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	dcf2      	bgt.n	8008d82 <_printf_i+0x212>
 8008d9c:	e7eb      	b.n	8008d76 <_printf_i+0x206>
 8008d9e:	2500      	movs	r5, #0
 8008da0:	f104 0619 	add.w	r6, r4, #25
 8008da4:	e7f5      	b.n	8008d92 <_printf_i+0x222>
 8008da6:	bf00      	nop
 8008da8:	08067b5c 	.word	0x08067b5c
 8008dac:	08067b6d 	.word	0x08067b6d

08008db0 <std>:
 8008db0:	2300      	movs	r3, #0
 8008db2:	b510      	push	{r4, lr}
 8008db4:	4604      	mov	r4, r0
 8008db6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dbe:	6083      	str	r3, [r0, #8]
 8008dc0:	8181      	strh	r1, [r0, #12]
 8008dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dc4:	81c2      	strh	r2, [r0, #14]
 8008dc6:	6183      	str	r3, [r0, #24]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	2208      	movs	r2, #8
 8008dcc:	305c      	adds	r0, #92	@ 0x5c
 8008dce:	f000 f8f4 	bl	8008fba <memset>
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <std+0x58>)
 8008dd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e0c <std+0x5c>)
 8008dd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <std+0x60>)
 8008ddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dde:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <std+0x64>)
 8008de0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008de2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <std+0x68>)
 8008de4:	6224      	str	r4, [r4, #32]
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d006      	beq.n	8008df8 <std+0x48>
 8008dea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dee:	4294      	cmp	r4, r2
 8008df0:	d002      	beq.n	8008df8 <std+0x48>
 8008df2:	33d0      	adds	r3, #208	@ 0xd0
 8008df4:	429c      	cmp	r4, r3
 8008df6:	d105      	bne.n	8008e04 <std+0x54>
 8008df8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e00:	f000 b97a 	b.w	80090f8 <__retarget_lock_init_recursive>
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	bf00      	nop
 8008e08:	08008f35 	.word	0x08008f35
 8008e0c:	08008f57 	.word	0x08008f57
 8008e10:	08008f8f 	.word	0x08008f8f
 8008e14:	08008fb3 	.word	0x08008fb3
 8008e18:	20007514 	.word	0x20007514

08008e1c <stdio_exit_handler>:
 8008e1c:	4a02      	ldr	r2, [pc, #8]	@ (8008e28 <stdio_exit_handler+0xc>)
 8008e1e:	4903      	ldr	r1, [pc, #12]	@ (8008e2c <stdio_exit_handler+0x10>)
 8008e20:	4803      	ldr	r0, [pc, #12]	@ (8008e30 <stdio_exit_handler+0x14>)
 8008e22:	f000 b869 	b.w	8008ef8 <_fwalk_sglue>
 8008e26:	bf00      	nop
 8008e28:	200009e8 	.word	0x200009e8
 8008e2c:	0800a659 	.word	0x0800a659
 8008e30:	200009f8 	.word	0x200009f8

08008e34 <cleanup_stdio>:
 8008e34:	6841      	ldr	r1, [r0, #4]
 8008e36:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <cleanup_stdio+0x34>)
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	d001      	beq.n	8008e44 <cleanup_stdio+0x10>
 8008e40:	f001 fc0a 	bl	800a658 <_fflush_r>
 8008e44:	68a1      	ldr	r1, [r4, #8]
 8008e46:	4b09      	ldr	r3, [pc, #36]	@ (8008e6c <cleanup_stdio+0x38>)
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d002      	beq.n	8008e52 <cleanup_stdio+0x1e>
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f001 fc03 	bl	800a658 <_fflush_r>
 8008e52:	68e1      	ldr	r1, [r4, #12]
 8008e54:	4b06      	ldr	r3, [pc, #24]	@ (8008e70 <cleanup_stdio+0x3c>)
 8008e56:	4299      	cmp	r1, r3
 8008e58:	d004      	beq.n	8008e64 <cleanup_stdio+0x30>
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e60:	f001 bbfa 	b.w	800a658 <_fflush_r>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	bf00      	nop
 8008e68:	20007514 	.word	0x20007514
 8008e6c:	2000757c 	.word	0x2000757c
 8008e70:	200075e4 	.word	0x200075e4

08008e74 <global_stdio_init.part.0>:
 8008e74:	b510      	push	{r4, lr}
 8008e76:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea4 <global_stdio_init.part.0+0x30>)
 8008e78:	4c0b      	ldr	r4, [pc, #44]	@ (8008ea8 <global_stdio_init.part.0+0x34>)
 8008e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8008eac <global_stdio_init.part.0+0x38>)
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	2200      	movs	r2, #0
 8008e82:	2104      	movs	r1, #4
 8008e84:	f7ff ff94 	bl	8008db0 <std>
 8008e88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	2109      	movs	r1, #9
 8008e90:	f7ff ff8e 	bl	8008db0 <std>
 8008e94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e98:	2202      	movs	r2, #2
 8008e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e9e:	2112      	movs	r1, #18
 8008ea0:	f7ff bf86 	b.w	8008db0 <std>
 8008ea4:	2000764c 	.word	0x2000764c
 8008ea8:	20007514 	.word	0x20007514
 8008eac:	08008e1d 	.word	0x08008e1d

08008eb0 <__sfp_lock_acquire>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	@ (8008eb8 <__sfp_lock_acquire+0x8>)
 8008eb2:	f000 b922 	b.w	80090fa <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	20007655 	.word	0x20007655

08008ebc <__sfp_lock_release>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	@ (8008ec4 <__sfp_lock_release+0x8>)
 8008ebe:	f000 b91d 	b.w	80090fc <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20007655 	.word	0x20007655

08008ec8 <__sinit>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	f7ff fff0 	bl	8008eb0 <__sfp_lock_acquire>
 8008ed0:	6a23      	ldr	r3, [r4, #32]
 8008ed2:	b11b      	cbz	r3, 8008edc <__sinit+0x14>
 8008ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed8:	f7ff bff0 	b.w	8008ebc <__sfp_lock_release>
 8008edc:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <__sinit+0x28>)
 8008ede:	6223      	str	r3, [r4, #32]
 8008ee0:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <__sinit+0x2c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f5      	bne.n	8008ed4 <__sinit+0xc>
 8008ee8:	f7ff ffc4 	bl	8008e74 <global_stdio_init.part.0>
 8008eec:	e7f2      	b.n	8008ed4 <__sinit+0xc>
 8008eee:	bf00      	nop
 8008ef0:	08008e35 	.word	0x08008e35
 8008ef4:	2000764c 	.word	0x2000764c

08008ef8 <_fwalk_sglue>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	4607      	mov	r7, r0
 8008efe:	4688      	mov	r8, r1
 8008f00:	4614      	mov	r4, r2
 8008f02:	2600      	movs	r6, #0
 8008f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f08:	f1b9 0901 	subs.w	r9, r9, #1
 8008f0c:	d505      	bpl.n	8008f1a <_fwalk_sglue+0x22>
 8008f0e:	6824      	ldr	r4, [r4, #0]
 8008f10:	2c00      	cmp	r4, #0
 8008f12:	d1f7      	bne.n	8008f04 <_fwalk_sglue+0xc>
 8008f14:	4630      	mov	r0, r6
 8008f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d907      	bls.n	8008f30 <_fwalk_sglue+0x38>
 8008f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f24:	3301      	adds	r3, #1
 8008f26:	d003      	beq.n	8008f30 <_fwalk_sglue+0x38>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c0      	blx	r8
 8008f2e:	4306      	orrs	r6, r0
 8008f30:	3568      	adds	r5, #104	@ 0x68
 8008f32:	e7e9      	b.n	8008f08 <_fwalk_sglue+0x10>

08008f34 <__sread>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	460c      	mov	r4, r1
 8008f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3c:	f000 f87e 	bl	800903c <_read_r>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	bfab      	itete	ge
 8008f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f46:	89a3      	ldrhlt	r3, [r4, #12]
 8008f48:	181b      	addge	r3, r3, r0
 8008f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f4e:	bfac      	ite	ge
 8008f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f52:	81a3      	strhlt	r3, [r4, #12]
 8008f54:	bd10      	pop	{r4, pc}

08008f56 <__swrite>:
 8008f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	461f      	mov	r7, r3
 8008f5c:	898b      	ldrh	r3, [r1, #12]
 8008f5e:	05db      	lsls	r3, r3, #23
 8008f60:	4605      	mov	r5, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	4616      	mov	r6, r2
 8008f66:	d505      	bpl.n	8008f74 <__swrite+0x1e>
 8008f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f000 f852 	bl	8009018 <_lseek_r>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	4632      	mov	r2, r6
 8008f82:	463b      	mov	r3, r7
 8008f84:	4628      	mov	r0, r5
 8008f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8a:	f000 b879 	b.w	8009080 <_write_r>

08008f8e <__sseek>:
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	460c      	mov	r4, r1
 8008f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f96:	f000 f83f 	bl	8009018 <_lseek_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	bf15      	itete	ne
 8008fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008faa:	81a3      	strheq	r3, [r4, #12]
 8008fac:	bf18      	it	ne
 8008fae:	81a3      	strhne	r3, [r4, #12]
 8008fb0:	bd10      	pop	{r4, pc}

08008fb2 <__sclose>:
 8008fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb6:	f000 b81f 	b.w	8008ff8 <_close_r>

08008fba <memset>:
 8008fba:	4402      	add	r2, r0
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d100      	bne.n	8008fc4 <memset+0xa>
 8008fc2:	4770      	bx	lr
 8008fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc8:	e7f9      	b.n	8008fbe <memset+0x4>

08008fca <strncmp>:
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	b16a      	cbz	r2, 8008fea <strncmp+0x20>
 8008fce:	3901      	subs	r1, #1
 8008fd0:	1884      	adds	r4, r0, r2
 8008fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d103      	bne.n	8008fe6 <strncmp+0x1c>
 8008fde:	42a0      	cmp	r0, r4
 8008fe0:	d001      	beq.n	8008fe6 <strncmp+0x1c>
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	d1f5      	bne.n	8008fd2 <strncmp+0x8>
 8008fe6:	1ad0      	subs	r0, r2, r3
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	4610      	mov	r0, r2
 8008fec:	e7fc      	b.n	8008fe8 <strncmp+0x1e>
	...

08008ff0 <_localeconv_r>:
 8008ff0:	4800      	ldr	r0, [pc, #0]	@ (8008ff4 <_localeconv_r+0x4>)
 8008ff2:	4770      	bx	lr
 8008ff4:	20000b34 	.word	0x20000b34

08008ff8 <_close_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d06      	ldr	r5, [pc, #24]	@ (8009014 <_close_r+0x1c>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f001 ff8c 	bl	800af20 <_close>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_close_r+0x1a>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_close_r+0x1a>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	20007650 	.word	0x20007650

08009018 <_lseek_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4d07      	ldr	r5, [pc, #28]	@ (8009038 <_lseek_r+0x20>)
 800901c:	4604      	mov	r4, r0
 800901e:	4608      	mov	r0, r1
 8009020:	4611      	mov	r1, r2
 8009022:	2200      	movs	r2, #0
 8009024:	602a      	str	r2, [r5, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	f001 ffa2 	bl	800af70 <_lseek>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_lseek_r+0x1e>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_lseek_r+0x1e>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20007650 	.word	0x20007650

0800903c <_read_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d07      	ldr	r5, [pc, #28]	@ (800905c <_read_r+0x20>)
 8009040:	4604      	mov	r4, r0
 8009042:	4608      	mov	r0, r1
 8009044:	4611      	mov	r1, r2
 8009046:	2200      	movs	r2, #0
 8009048:	602a      	str	r2, [r5, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	f001 ff98 	bl	800af80 <_read>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_read_r+0x1e>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_read_r+0x1e>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20007650 	.word	0x20007650

08009060 <_sbrk_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d06      	ldr	r5, [pc, #24]	@ (800907c <_sbrk_r+0x1c>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	f7f8 f9a8 	bl	80013c0 <_sbrk>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_sbrk_r+0x1a>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_sbrk_r+0x1a>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20007650 	.word	0x20007650

08009080 <_write_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	@ (80090a0 <_write_r+0x20>)
 8009084:	4604      	mov	r4, r0
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	2200      	movs	r2, #0
 800908c:	602a      	str	r2, [r5, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	f7f9 fc86 	bl	80029a0 <_write>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_write_r+0x1e>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_write_r+0x1e>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20007650 	.word	0x20007650

080090a4 <__errno>:
 80090a4:	4b01      	ldr	r3, [pc, #4]	@ (80090ac <__errno+0x8>)
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	200009f4 	.word	0x200009f4

080090b0 <__libc_init_array>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	4d0d      	ldr	r5, [pc, #52]	@ (80090e8 <__libc_init_array+0x38>)
 80090b4:	4c0d      	ldr	r4, [pc, #52]	@ (80090ec <__libc_init_array+0x3c>)
 80090b6:	1b64      	subs	r4, r4, r5
 80090b8:	10a4      	asrs	r4, r4, #2
 80090ba:	2600      	movs	r6, #0
 80090bc:	42a6      	cmp	r6, r4
 80090be:	d109      	bne.n	80090d4 <__libc_init_array+0x24>
 80090c0:	4d0b      	ldr	r5, [pc, #44]	@ (80090f0 <__libc_init_array+0x40>)
 80090c2:	4c0c      	ldr	r4, [pc, #48]	@ (80090f4 <__libc_init_array+0x44>)
 80090c4:	f001 ff66 	bl	800af94 <_init>
 80090c8:	1b64      	subs	r4, r4, r5
 80090ca:	10a4      	asrs	r4, r4, #2
 80090cc:	2600      	movs	r6, #0
 80090ce:	42a6      	cmp	r6, r4
 80090d0:	d105      	bne.n	80090de <__libc_init_array+0x2e>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d8:	4798      	blx	r3
 80090da:	3601      	adds	r6, #1
 80090dc:	e7ee      	b.n	80090bc <__libc_init_array+0xc>
 80090de:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e2:	4798      	blx	r3
 80090e4:	3601      	adds	r6, #1
 80090e6:	e7f2      	b.n	80090ce <__libc_init_array+0x1e>
 80090e8:	08067ed8 	.word	0x08067ed8
 80090ec:	08067ed8 	.word	0x08067ed8
 80090f0:	08067ed8 	.word	0x08067ed8
 80090f4:	08067edc 	.word	0x08067edc

080090f8 <__retarget_lock_init_recursive>:
 80090f8:	4770      	bx	lr

080090fa <__retarget_lock_acquire_recursive>:
 80090fa:	4770      	bx	lr

080090fc <__retarget_lock_release_recursive>:
 80090fc:	4770      	bx	lr

080090fe <memcpy>:
 80090fe:	440a      	add	r2, r1
 8009100:	4291      	cmp	r1, r2
 8009102:	f100 33ff 	add.w	r3, r0, #4294967295
 8009106:	d100      	bne.n	800910a <memcpy+0xc>
 8009108:	4770      	bx	lr
 800910a:	b510      	push	{r4, lr}
 800910c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009110:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009114:	4291      	cmp	r1, r2
 8009116:	d1f9      	bne.n	800910c <memcpy+0xe>
 8009118:	bd10      	pop	{r4, pc}

0800911a <quorem>:
 800911a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911e:	6903      	ldr	r3, [r0, #16]
 8009120:	690c      	ldr	r4, [r1, #16]
 8009122:	42a3      	cmp	r3, r4
 8009124:	4607      	mov	r7, r0
 8009126:	db7e      	blt.n	8009226 <quorem+0x10c>
 8009128:	3c01      	subs	r4, #1
 800912a:	f101 0814 	add.w	r8, r1, #20
 800912e:	00a3      	lsls	r3, r4, #2
 8009130:	f100 0514 	add.w	r5, r0, #20
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009144:	3301      	adds	r3, #1
 8009146:	429a      	cmp	r2, r3
 8009148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800914c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009150:	d32e      	bcc.n	80091b0 <quorem+0x96>
 8009152:	f04f 0a00 	mov.w	sl, #0
 8009156:	46c4      	mov	ip, r8
 8009158:	46ae      	mov	lr, r5
 800915a:	46d3      	mov	fp, sl
 800915c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009160:	b298      	uxth	r0, r3
 8009162:	fb06 a000 	mla	r0, r6, r0, sl
 8009166:	0c02      	lsrs	r2, r0, #16
 8009168:	0c1b      	lsrs	r3, r3, #16
 800916a:	fb06 2303 	mla	r3, r6, r3, r2
 800916e:	f8de 2000 	ldr.w	r2, [lr]
 8009172:	b280      	uxth	r0, r0
 8009174:	b292      	uxth	r2, r2
 8009176:	1a12      	subs	r2, r2, r0
 8009178:	445a      	add	r2, fp
 800917a:	f8de 0000 	ldr.w	r0, [lr]
 800917e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009182:	b29b      	uxth	r3, r3
 8009184:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009188:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800918c:	b292      	uxth	r2, r2
 800918e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009192:	45e1      	cmp	r9, ip
 8009194:	f84e 2b04 	str.w	r2, [lr], #4
 8009198:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800919c:	d2de      	bcs.n	800915c <quorem+0x42>
 800919e:	9b00      	ldr	r3, [sp, #0]
 80091a0:	58eb      	ldr	r3, [r5, r3]
 80091a2:	b92b      	cbnz	r3, 80091b0 <quorem+0x96>
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	3b04      	subs	r3, #4
 80091a8:	429d      	cmp	r5, r3
 80091aa:	461a      	mov	r2, r3
 80091ac:	d32f      	bcc.n	800920e <quorem+0xf4>
 80091ae:	613c      	str	r4, [r7, #16]
 80091b0:	4638      	mov	r0, r7
 80091b2:	f001 f8c5 	bl	800a340 <__mcmp>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	db25      	blt.n	8009206 <quorem+0xec>
 80091ba:	4629      	mov	r1, r5
 80091bc:	2000      	movs	r0, #0
 80091be:	f858 2b04 	ldr.w	r2, [r8], #4
 80091c2:	f8d1 c000 	ldr.w	ip, [r1]
 80091c6:	fa1f fe82 	uxth.w	lr, r2
 80091ca:	fa1f f38c 	uxth.w	r3, ip
 80091ce:	eba3 030e 	sub.w	r3, r3, lr
 80091d2:	4403      	add	r3, r0
 80091d4:	0c12      	lsrs	r2, r2, #16
 80091d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80091da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80091de:	b29b      	uxth	r3, r3
 80091e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091e4:	45c1      	cmp	r9, r8
 80091e6:	f841 3b04 	str.w	r3, [r1], #4
 80091ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091ee:	d2e6      	bcs.n	80091be <quorem+0xa4>
 80091f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091f8:	b922      	cbnz	r2, 8009204 <quorem+0xea>
 80091fa:	3b04      	subs	r3, #4
 80091fc:	429d      	cmp	r5, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	d30b      	bcc.n	800921a <quorem+0x100>
 8009202:	613c      	str	r4, [r7, #16]
 8009204:	3601      	adds	r6, #1
 8009206:	4630      	mov	r0, r6
 8009208:	b003      	add	sp, #12
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	3b04      	subs	r3, #4
 8009212:	2a00      	cmp	r2, #0
 8009214:	d1cb      	bne.n	80091ae <quorem+0x94>
 8009216:	3c01      	subs	r4, #1
 8009218:	e7c6      	b.n	80091a8 <quorem+0x8e>
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	3b04      	subs	r3, #4
 800921e:	2a00      	cmp	r2, #0
 8009220:	d1ef      	bne.n	8009202 <quorem+0xe8>
 8009222:	3c01      	subs	r4, #1
 8009224:	e7ea      	b.n	80091fc <quorem+0xe2>
 8009226:	2000      	movs	r0, #0
 8009228:	e7ee      	b.n	8009208 <quorem+0xee>
 800922a:	0000      	movs	r0, r0
 800922c:	0000      	movs	r0, r0
	...

08009230 <_dtoa_r>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	69c7      	ldr	r7, [r0, #28]
 8009236:	b099      	sub	sp, #100	@ 0x64
 8009238:	ed8d 0b02 	vstr	d0, [sp, #8]
 800923c:	ec55 4b10 	vmov	r4, r5, d0
 8009240:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009242:	9109      	str	r1, [sp, #36]	@ 0x24
 8009244:	4683      	mov	fp, r0
 8009246:	920e      	str	r2, [sp, #56]	@ 0x38
 8009248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800924a:	b97f      	cbnz	r7, 800926c <_dtoa_r+0x3c>
 800924c:	2010      	movs	r0, #16
 800924e:	f7f9 fc01 	bl	8002a54 <__wrap_malloc>
 8009252:	4602      	mov	r2, r0
 8009254:	f8cb 001c 	str.w	r0, [fp, #28]
 8009258:	b920      	cbnz	r0, 8009264 <_dtoa_r+0x34>
 800925a:	4ba7      	ldr	r3, [pc, #668]	@ (80094f8 <_dtoa_r+0x2c8>)
 800925c:	21ef      	movs	r1, #239	@ 0xef
 800925e:	48a7      	ldr	r0, [pc, #668]	@ (80094fc <_dtoa_r+0x2cc>)
 8009260:	f001 fa22 	bl	800a6a8 <__assert_func>
 8009264:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009268:	6007      	str	r7, [r0, #0]
 800926a:	60c7      	str	r7, [r0, #12]
 800926c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009270:	6819      	ldr	r1, [r3, #0]
 8009272:	b159      	cbz	r1, 800928c <_dtoa_r+0x5c>
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	604a      	str	r2, [r1, #4]
 8009278:	2301      	movs	r3, #1
 800927a:	4093      	lsls	r3, r2
 800927c:	608b      	str	r3, [r1, #8]
 800927e:	4658      	mov	r0, fp
 8009280:	f000 fe24 	bl	8009ecc <_Bfree>
 8009284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	1e2b      	subs	r3, r5, #0
 800928e:	bfb9      	ittee	lt
 8009290:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009294:	9303      	strlt	r3, [sp, #12]
 8009296:	2300      	movge	r3, #0
 8009298:	6033      	strge	r3, [r6, #0]
 800929a:	9f03      	ldr	r7, [sp, #12]
 800929c:	4b98      	ldr	r3, [pc, #608]	@ (8009500 <_dtoa_r+0x2d0>)
 800929e:	bfbc      	itt	lt
 80092a0:	2201      	movlt	r2, #1
 80092a2:	6032      	strlt	r2, [r6, #0]
 80092a4:	43bb      	bics	r3, r7
 80092a6:	d112      	bne.n	80092ce <_dtoa_r+0x9e>
 80092a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092b4:	4323      	orrs	r3, r4
 80092b6:	f000 854d 	beq.w	8009d54 <_dtoa_r+0xb24>
 80092ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009514 <_dtoa_r+0x2e4>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 854f 	beq.w	8009d64 <_dtoa_r+0xb34>
 80092c6:	f10a 0303 	add.w	r3, sl, #3
 80092ca:	f000 bd49 	b.w	8009d60 <_dtoa_r+0xb30>
 80092ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092d2:	2200      	movs	r2, #0
 80092d4:	ec51 0b17 	vmov	r0, r1, d7
 80092d8:	2300      	movs	r3, #0
 80092da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092de:	f7f7 fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80092e2:	4680      	mov	r8, r0
 80092e4:	b158      	cbz	r0, 80092fe <_dtoa_r+0xce>
 80092e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092e8:	2301      	movs	r3, #1
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092ee:	b113      	cbz	r3, 80092f6 <_dtoa_r+0xc6>
 80092f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092f2:	4b84      	ldr	r3, [pc, #528]	@ (8009504 <_dtoa_r+0x2d4>)
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009518 <_dtoa_r+0x2e8>
 80092fa:	f000 bd33 	b.w	8009d64 <_dtoa_r+0xb34>
 80092fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009302:	aa16      	add	r2, sp, #88	@ 0x58
 8009304:	a917      	add	r1, sp, #92	@ 0x5c
 8009306:	4658      	mov	r0, fp
 8009308:	f001 f8ca 	bl	800a4a0 <__d2b>
 800930c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009310:	4681      	mov	r9, r0
 8009312:	2e00      	cmp	r6, #0
 8009314:	d077      	beq.n	8009406 <_dtoa_r+0x1d6>
 8009316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009318:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800931c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009324:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009328:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800932c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009330:	4619      	mov	r1, r3
 8009332:	2200      	movs	r2, #0
 8009334:	4b74      	ldr	r3, [pc, #464]	@ (8009508 <_dtoa_r+0x2d8>)
 8009336:	f7f6 ffaf 	bl	8000298 <__aeabi_dsub>
 800933a:	a369      	add	r3, pc, #420	@ (adr r3, 80094e0 <_dtoa_r+0x2b0>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 f962 	bl	8000608 <__aeabi_dmul>
 8009344:	a368      	add	r3, pc, #416	@ (adr r3, 80094e8 <_dtoa_r+0x2b8>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	4604      	mov	r4, r0
 8009350:	4630      	mov	r0, r6
 8009352:	460d      	mov	r5, r1
 8009354:	f7f7 f8ee 	bl	8000534 <__aeabi_i2d>
 8009358:	a365      	add	r3, pc, #404	@ (adr r3, 80094f0 <_dtoa_r+0x2c0>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f7 f953 	bl	8000608 <__aeabi_dmul>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	f7f6 ff97 	bl	800029c <__adddf3>
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	f7f7 fbf9 	bl	8000b68 <__aeabi_d2iz>
 8009376:	2200      	movs	r2, #0
 8009378:	4607      	mov	r7, r0
 800937a:	2300      	movs	r3, #0
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f7 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8009384:	b140      	cbz	r0, 8009398 <_dtoa_r+0x168>
 8009386:	4638      	mov	r0, r7
 8009388:	f7f7 f8d4 	bl	8000534 <__aeabi_i2d>
 800938c:	4622      	mov	r2, r4
 800938e:	462b      	mov	r3, r5
 8009390:	f7f7 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009394:	b900      	cbnz	r0, 8009398 <_dtoa_r+0x168>
 8009396:	3f01      	subs	r7, #1
 8009398:	2f16      	cmp	r7, #22
 800939a:	d851      	bhi.n	8009440 <_dtoa_r+0x210>
 800939c:	4b5b      	ldr	r3, [pc, #364]	@ (800950c <_dtoa_r+0x2dc>)
 800939e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093aa:	f7f7 fb9f 	bl	8000aec <__aeabi_dcmplt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d048      	beq.n	8009444 <_dtoa_r+0x214>
 80093b2:	3f01      	subs	r7, #1
 80093b4:	2300      	movs	r3, #0
 80093b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80093b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093ba:	1b9b      	subs	r3, r3, r6
 80093bc:	1e5a      	subs	r2, r3, #1
 80093be:	bf44      	itt	mi
 80093c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80093c4:	2300      	movmi	r3, #0
 80093c6:	9208      	str	r2, [sp, #32]
 80093c8:	bf54      	ite	pl
 80093ca:	f04f 0800 	movpl.w	r8, #0
 80093ce:	9308      	strmi	r3, [sp, #32]
 80093d0:	2f00      	cmp	r7, #0
 80093d2:	db39      	blt.n	8009448 <_dtoa_r+0x218>
 80093d4:	9b08      	ldr	r3, [sp, #32]
 80093d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093d8:	443b      	add	r3, r7
 80093da:	9308      	str	r3, [sp, #32]
 80093dc:	2300      	movs	r3, #0
 80093de:	930a      	str	r3, [sp, #40]	@ 0x28
 80093e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e2:	2b09      	cmp	r3, #9
 80093e4:	d864      	bhi.n	80094b0 <_dtoa_r+0x280>
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	bfc4      	itt	gt
 80093ea:	3b04      	subgt	r3, #4
 80093ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80093ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f0:	f1a3 0302 	sub.w	r3, r3, #2
 80093f4:	bfcc      	ite	gt
 80093f6:	2400      	movgt	r4, #0
 80093f8:	2401      	movle	r4, #1
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d863      	bhi.n	80094c6 <_dtoa_r+0x296>
 80093fe:	e8df f003 	tbb	[pc, r3]
 8009402:	372a      	.short	0x372a
 8009404:	5535      	.short	0x5535
 8009406:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800940a:	441e      	add	r6, r3
 800940c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009410:	2b20      	cmp	r3, #32
 8009412:	bfc1      	itttt	gt
 8009414:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009418:	409f      	lslgt	r7, r3
 800941a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800941e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009422:	bfd6      	itet	le
 8009424:	f1c3 0320 	rsble	r3, r3, #32
 8009428:	ea47 0003 	orrgt.w	r0, r7, r3
 800942c:	fa04 f003 	lslle.w	r0, r4, r3
 8009430:	f7f7 f870 	bl	8000514 <__aeabi_ui2d>
 8009434:	2201      	movs	r2, #1
 8009436:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800943a:	3e01      	subs	r6, #1
 800943c:	9214      	str	r2, [sp, #80]	@ 0x50
 800943e:	e777      	b.n	8009330 <_dtoa_r+0x100>
 8009440:	2301      	movs	r3, #1
 8009442:	e7b8      	b.n	80093b6 <_dtoa_r+0x186>
 8009444:	9012      	str	r0, [sp, #72]	@ 0x48
 8009446:	e7b7      	b.n	80093b8 <_dtoa_r+0x188>
 8009448:	427b      	negs	r3, r7
 800944a:	930a      	str	r3, [sp, #40]	@ 0x28
 800944c:	2300      	movs	r3, #0
 800944e:	eba8 0807 	sub.w	r8, r8, r7
 8009452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009454:	e7c4      	b.n	80093e0 <_dtoa_r+0x1b0>
 8009456:	2300      	movs	r3, #0
 8009458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800945a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	dc35      	bgt.n	80094cc <_dtoa_r+0x29c>
 8009460:	2301      	movs	r3, #1
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	9307      	str	r3, [sp, #28]
 8009466:	461a      	mov	r2, r3
 8009468:	920e      	str	r2, [sp, #56]	@ 0x38
 800946a:	e00b      	b.n	8009484 <_dtoa_r+0x254>
 800946c:	2301      	movs	r3, #1
 800946e:	e7f3      	b.n	8009458 <_dtoa_r+0x228>
 8009470:	2300      	movs	r3, #0
 8009472:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009476:	18fb      	adds	r3, r7, r3
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	3301      	adds	r3, #1
 800947c:	2b01      	cmp	r3, #1
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	bfb8      	it	lt
 8009482:	2301      	movlt	r3, #1
 8009484:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009488:	2100      	movs	r1, #0
 800948a:	2204      	movs	r2, #4
 800948c:	f102 0514 	add.w	r5, r2, #20
 8009490:	429d      	cmp	r5, r3
 8009492:	d91f      	bls.n	80094d4 <_dtoa_r+0x2a4>
 8009494:	6041      	str	r1, [r0, #4]
 8009496:	4658      	mov	r0, fp
 8009498:	f000 fcd8 	bl	8009e4c <_Balloc>
 800949c:	4682      	mov	sl, r0
 800949e:	2800      	cmp	r0, #0
 80094a0:	d13c      	bne.n	800951c <_dtoa_r+0x2ec>
 80094a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009510 <_dtoa_r+0x2e0>)
 80094a4:	4602      	mov	r2, r0
 80094a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80094aa:	e6d8      	b.n	800925e <_dtoa_r+0x2e>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e7e0      	b.n	8009472 <_dtoa_r+0x242>
 80094b0:	2401      	movs	r4, #1
 80094b2:	2300      	movs	r3, #0
 80094b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094b8:	f04f 33ff 	mov.w	r3, #4294967295
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	2200      	movs	r2, #0
 80094c2:	2312      	movs	r3, #18
 80094c4:	e7d0      	b.n	8009468 <_dtoa_r+0x238>
 80094c6:	2301      	movs	r3, #1
 80094c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094ca:	e7f5      	b.n	80094b8 <_dtoa_r+0x288>
 80094cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	e7d7      	b.n	8009484 <_dtoa_r+0x254>
 80094d4:	3101      	adds	r1, #1
 80094d6:	0052      	lsls	r2, r2, #1
 80094d8:	e7d8      	b.n	800948c <_dtoa_r+0x25c>
 80094da:	bf00      	nop
 80094dc:	f3af 8000 	nop.w
 80094e0:	636f4361 	.word	0x636f4361
 80094e4:	3fd287a7 	.word	0x3fd287a7
 80094e8:	8b60c8b3 	.word	0x8b60c8b3
 80094ec:	3fc68a28 	.word	0x3fc68a28
 80094f0:	509f79fb 	.word	0x509f79fb
 80094f4:	3fd34413 	.word	0x3fd34413
 80094f8:	08067b8b 	.word	0x08067b8b
 80094fc:	08067ba2 	.word	0x08067ba2
 8009500:	7ff00000 	.word	0x7ff00000
 8009504:	0800baae 	.word	0x0800baae
 8009508:	3ff80000 	.word	0x3ff80000
 800950c:	08067c98 	.word	0x08067c98
 8009510:	08067bfa 	.word	0x08067bfa
 8009514:	08067b87 	.word	0x08067b87
 8009518:	0800baad 	.word	0x0800baad
 800951c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009520:	6018      	str	r0, [r3, #0]
 8009522:	9b07      	ldr	r3, [sp, #28]
 8009524:	2b0e      	cmp	r3, #14
 8009526:	f200 80a4 	bhi.w	8009672 <_dtoa_r+0x442>
 800952a:	2c00      	cmp	r4, #0
 800952c:	f000 80a1 	beq.w	8009672 <_dtoa_r+0x442>
 8009530:	2f00      	cmp	r7, #0
 8009532:	dd33      	ble.n	800959c <_dtoa_r+0x36c>
 8009534:	4bad      	ldr	r3, [pc, #692]	@ (80097ec <_dtoa_r+0x5bc>)
 8009536:	f007 020f 	and.w	r2, r7, #15
 800953a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800953e:	ed93 7b00 	vldr	d7, [r3]
 8009542:	05f8      	lsls	r0, r7, #23
 8009544:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009548:	ea4f 1427 	mov.w	r4, r7, asr #4
 800954c:	d516      	bpl.n	800957c <_dtoa_r+0x34c>
 800954e:	4ba8      	ldr	r3, [pc, #672]	@ (80097f0 <_dtoa_r+0x5c0>)
 8009550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009558:	f7f7 f980 	bl	800085c <__aeabi_ddiv>
 800955c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009560:	f004 040f 	and.w	r4, r4, #15
 8009564:	2603      	movs	r6, #3
 8009566:	4da2      	ldr	r5, [pc, #648]	@ (80097f0 <_dtoa_r+0x5c0>)
 8009568:	b954      	cbnz	r4, 8009580 <_dtoa_r+0x350>
 800956a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800956e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009572:	f7f7 f973 	bl	800085c <__aeabi_ddiv>
 8009576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800957a:	e028      	b.n	80095ce <_dtoa_r+0x39e>
 800957c:	2602      	movs	r6, #2
 800957e:	e7f2      	b.n	8009566 <_dtoa_r+0x336>
 8009580:	07e1      	lsls	r1, r4, #31
 8009582:	d508      	bpl.n	8009596 <_dtoa_r+0x366>
 8009584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009588:	e9d5 2300 	ldrd	r2, r3, [r5]
 800958c:	f7f7 f83c 	bl	8000608 <__aeabi_dmul>
 8009590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009594:	3601      	adds	r6, #1
 8009596:	1064      	asrs	r4, r4, #1
 8009598:	3508      	adds	r5, #8
 800959a:	e7e5      	b.n	8009568 <_dtoa_r+0x338>
 800959c:	f000 80d2 	beq.w	8009744 <_dtoa_r+0x514>
 80095a0:	427c      	negs	r4, r7
 80095a2:	4b92      	ldr	r3, [pc, #584]	@ (80097ec <_dtoa_r+0x5bc>)
 80095a4:	4d92      	ldr	r5, [pc, #584]	@ (80097f0 <_dtoa_r+0x5c0>)
 80095a6:	f004 020f 	and.w	r2, r4, #15
 80095aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095b6:	f7f7 f827 	bl	8000608 <__aeabi_dmul>
 80095ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095be:	1124      	asrs	r4, r4, #4
 80095c0:	2300      	movs	r3, #0
 80095c2:	2602      	movs	r6, #2
 80095c4:	2c00      	cmp	r4, #0
 80095c6:	f040 80b2 	bne.w	800972e <_dtoa_r+0x4fe>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1d3      	bne.n	8009576 <_dtoa_r+0x346>
 80095ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 80b7 	beq.w	8009748 <_dtoa_r+0x518>
 80095da:	4b86      	ldr	r3, [pc, #536]	@ (80097f4 <_dtoa_r+0x5c4>)
 80095dc:	2200      	movs	r2, #0
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f7 fa83 	bl	8000aec <__aeabi_dcmplt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f000 80ae 	beq.w	8009748 <_dtoa_r+0x518>
 80095ec:	9b07      	ldr	r3, [sp, #28]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80aa 	beq.w	8009748 <_dtoa_r+0x518>
 80095f4:	9b00      	ldr	r3, [sp, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	dd37      	ble.n	800966a <_dtoa_r+0x43a>
 80095fa:	1e7b      	subs	r3, r7, #1
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	4620      	mov	r0, r4
 8009600:	4b7d      	ldr	r3, [pc, #500]	@ (80097f8 <_dtoa_r+0x5c8>)
 8009602:	2200      	movs	r2, #0
 8009604:	4629      	mov	r1, r5
 8009606:	f7f6 ffff 	bl	8000608 <__aeabi_dmul>
 800960a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800960e:	9c00      	ldr	r4, [sp, #0]
 8009610:	3601      	adds	r6, #1
 8009612:	4630      	mov	r0, r6
 8009614:	f7f6 ff8e 	bl	8000534 <__aeabi_i2d>
 8009618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800961c:	f7f6 fff4 	bl	8000608 <__aeabi_dmul>
 8009620:	4b76      	ldr	r3, [pc, #472]	@ (80097fc <_dtoa_r+0x5cc>)
 8009622:	2200      	movs	r2, #0
 8009624:	f7f6 fe3a 	bl	800029c <__adddf3>
 8009628:	4605      	mov	r5, r0
 800962a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800962e:	2c00      	cmp	r4, #0
 8009630:	f040 808d 	bne.w	800974e <_dtoa_r+0x51e>
 8009634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009638:	4b71      	ldr	r3, [pc, #452]	@ (8009800 <_dtoa_r+0x5d0>)
 800963a:	2200      	movs	r2, #0
 800963c:	f7f6 fe2c 	bl	8000298 <__aeabi_dsub>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009648:	462a      	mov	r2, r5
 800964a:	4633      	mov	r3, r6
 800964c:	f7f7 fa6c 	bl	8000b28 <__aeabi_dcmpgt>
 8009650:	2800      	cmp	r0, #0
 8009652:	f040 828b 	bne.w	8009b6c <_dtoa_r+0x93c>
 8009656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800965a:	462a      	mov	r2, r5
 800965c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009660:	f7f7 fa44 	bl	8000aec <__aeabi_dcmplt>
 8009664:	2800      	cmp	r0, #0
 8009666:	f040 8128 	bne.w	80098ba <_dtoa_r+0x68a>
 800966a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800966e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009674:	2b00      	cmp	r3, #0
 8009676:	f2c0 815a 	blt.w	800992e <_dtoa_r+0x6fe>
 800967a:	2f0e      	cmp	r7, #14
 800967c:	f300 8157 	bgt.w	800992e <_dtoa_r+0x6fe>
 8009680:	4b5a      	ldr	r3, [pc, #360]	@ (80097ec <_dtoa_r+0x5bc>)
 8009682:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009686:	ed93 7b00 	vldr	d7, [r3]
 800968a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968c:	2b00      	cmp	r3, #0
 800968e:	ed8d 7b00 	vstr	d7, [sp]
 8009692:	da03      	bge.n	800969c <_dtoa_r+0x46c>
 8009694:	9b07      	ldr	r3, [sp, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f340 8101 	ble.w	800989e <_dtoa_r+0x66e>
 800969c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096a0:	4656      	mov	r6, sl
 80096a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f7 f8d7 	bl	800085c <__aeabi_ddiv>
 80096ae:	f7f7 fa5b 	bl	8000b68 <__aeabi_d2iz>
 80096b2:	4680      	mov	r8, r0
 80096b4:	f7f6 ff3e 	bl	8000534 <__aeabi_i2d>
 80096b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096bc:	f7f6 ffa4 	bl	8000608 <__aeabi_dmul>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4620      	mov	r0, r4
 80096c6:	4629      	mov	r1, r5
 80096c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096cc:	f7f6 fde4 	bl	8000298 <__aeabi_dsub>
 80096d0:	f806 4b01 	strb.w	r4, [r6], #1
 80096d4:	9d07      	ldr	r5, [sp, #28]
 80096d6:	eba6 040a 	sub.w	r4, r6, sl
 80096da:	42a5      	cmp	r5, r4
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	f040 8117 	bne.w	8009912 <_dtoa_r+0x6e2>
 80096e4:	f7f6 fdda 	bl	800029c <__adddf3>
 80096e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	f7f7 fa1a 	bl	8000b28 <__aeabi_dcmpgt>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	f040 80f9 	bne.w	80098ec <_dtoa_r+0x6bc>
 80096fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f7 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009706:	b118      	cbz	r0, 8009710 <_dtoa_r+0x4e0>
 8009708:	f018 0f01 	tst.w	r8, #1
 800970c:	f040 80ee 	bne.w	80098ec <_dtoa_r+0x6bc>
 8009710:	4649      	mov	r1, r9
 8009712:	4658      	mov	r0, fp
 8009714:	f000 fbda 	bl	8009ecc <_Bfree>
 8009718:	2300      	movs	r3, #0
 800971a:	7033      	strb	r3, [r6, #0]
 800971c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800971e:	3701      	adds	r7, #1
 8009720:	601f      	str	r7, [r3, #0]
 8009722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 831d 	beq.w	8009d64 <_dtoa_r+0xb34>
 800972a:	601e      	str	r6, [r3, #0]
 800972c:	e31a      	b.n	8009d64 <_dtoa_r+0xb34>
 800972e:	07e2      	lsls	r2, r4, #31
 8009730:	d505      	bpl.n	800973e <_dtoa_r+0x50e>
 8009732:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009736:	f7f6 ff67 	bl	8000608 <__aeabi_dmul>
 800973a:	3601      	adds	r6, #1
 800973c:	2301      	movs	r3, #1
 800973e:	1064      	asrs	r4, r4, #1
 8009740:	3508      	adds	r5, #8
 8009742:	e73f      	b.n	80095c4 <_dtoa_r+0x394>
 8009744:	2602      	movs	r6, #2
 8009746:	e742      	b.n	80095ce <_dtoa_r+0x39e>
 8009748:	9c07      	ldr	r4, [sp, #28]
 800974a:	9704      	str	r7, [sp, #16]
 800974c:	e761      	b.n	8009612 <_dtoa_r+0x3e2>
 800974e:	4b27      	ldr	r3, [pc, #156]	@ (80097ec <_dtoa_r+0x5bc>)
 8009750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009752:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009756:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800975a:	4454      	add	r4, sl
 800975c:	2900      	cmp	r1, #0
 800975e:	d053      	beq.n	8009808 <_dtoa_r+0x5d8>
 8009760:	4928      	ldr	r1, [pc, #160]	@ (8009804 <_dtoa_r+0x5d4>)
 8009762:	2000      	movs	r0, #0
 8009764:	f7f7 f87a 	bl	800085c <__aeabi_ddiv>
 8009768:	4633      	mov	r3, r6
 800976a:	462a      	mov	r2, r5
 800976c:	f7f6 fd94 	bl	8000298 <__aeabi_dsub>
 8009770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009774:	4656      	mov	r6, sl
 8009776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977a:	f7f7 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800977e:	4605      	mov	r5, r0
 8009780:	f7f6 fed8 	bl	8000534 <__aeabi_i2d>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800978c:	f7f6 fd84 	bl	8000298 <__aeabi_dsub>
 8009790:	3530      	adds	r5, #48	@ 0x30
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800979a:	f806 5b01 	strb.w	r5, [r6], #1
 800979e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097a2:	f7f7 f9a3 	bl	8000aec <__aeabi_dcmplt>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d171      	bne.n	800988e <_dtoa_r+0x65e>
 80097aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ae:	4911      	ldr	r1, [pc, #68]	@ (80097f4 <_dtoa_r+0x5c4>)
 80097b0:	2000      	movs	r0, #0
 80097b2:	f7f6 fd71 	bl	8000298 <__aeabi_dsub>
 80097b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097ba:	f7f7 f997 	bl	8000aec <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f040 8095 	bne.w	80098ee <_dtoa_r+0x6be>
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	f43f af50 	beq.w	800966a <_dtoa_r+0x43a>
 80097ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097ce:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <_dtoa_r+0x5c8>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 ff19 	bl	8000608 <__aeabi_dmul>
 80097d6:	4b08      	ldr	r3, [pc, #32]	@ (80097f8 <_dtoa_r+0x5c8>)
 80097d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097dc:	2200      	movs	r2, #0
 80097de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e2:	f7f6 ff11 	bl	8000608 <__aeabi_dmul>
 80097e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ea:	e7c4      	b.n	8009776 <_dtoa_r+0x546>
 80097ec:	08067c98 	.word	0x08067c98
 80097f0:	08067c70 	.word	0x08067c70
 80097f4:	3ff00000 	.word	0x3ff00000
 80097f8:	40240000 	.word	0x40240000
 80097fc:	401c0000 	.word	0x401c0000
 8009800:	40140000 	.word	0x40140000
 8009804:	3fe00000 	.word	0x3fe00000
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	f7f6 fefc 	bl	8000608 <__aeabi_dmul>
 8009810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009814:	9415      	str	r4, [sp, #84]	@ 0x54
 8009816:	4656      	mov	r6, sl
 8009818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800981c:	f7f7 f9a4 	bl	8000b68 <__aeabi_d2iz>
 8009820:	4605      	mov	r5, r0
 8009822:	f7f6 fe87 	bl	8000534 <__aeabi_i2d>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800982e:	f7f6 fd33 	bl	8000298 <__aeabi_dsub>
 8009832:	3530      	adds	r5, #48	@ 0x30
 8009834:	f806 5b01 	strb.w	r5, [r6], #1
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	42a6      	cmp	r6, r4
 800983e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009842:	f04f 0200 	mov.w	r2, #0
 8009846:	d124      	bne.n	8009892 <_dtoa_r+0x662>
 8009848:	4bac      	ldr	r3, [pc, #688]	@ (8009afc <_dtoa_r+0x8cc>)
 800984a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800984e:	f7f6 fd25 	bl	800029c <__adddf3>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985a:	f7f7 f965 	bl	8000b28 <__aeabi_dcmpgt>
 800985e:	2800      	cmp	r0, #0
 8009860:	d145      	bne.n	80098ee <_dtoa_r+0x6be>
 8009862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009866:	49a5      	ldr	r1, [pc, #660]	@ (8009afc <_dtoa_r+0x8cc>)
 8009868:	2000      	movs	r0, #0
 800986a:	f7f6 fd15 	bl	8000298 <__aeabi_dsub>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009876:	f7f7 f939 	bl	8000aec <__aeabi_dcmplt>
 800987a:	2800      	cmp	r0, #0
 800987c:	f43f aef5 	beq.w	800966a <_dtoa_r+0x43a>
 8009880:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009882:	1e73      	subs	r3, r6, #1
 8009884:	9315      	str	r3, [sp, #84]	@ 0x54
 8009886:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800988a:	2b30      	cmp	r3, #48	@ 0x30
 800988c:	d0f8      	beq.n	8009880 <_dtoa_r+0x650>
 800988e:	9f04      	ldr	r7, [sp, #16]
 8009890:	e73e      	b.n	8009710 <_dtoa_r+0x4e0>
 8009892:	4b9b      	ldr	r3, [pc, #620]	@ (8009b00 <_dtoa_r+0x8d0>)
 8009894:	f7f6 feb8 	bl	8000608 <__aeabi_dmul>
 8009898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989c:	e7bc      	b.n	8009818 <_dtoa_r+0x5e8>
 800989e:	d10c      	bne.n	80098ba <_dtoa_r+0x68a>
 80098a0:	4b98      	ldr	r3, [pc, #608]	@ (8009b04 <_dtoa_r+0x8d4>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a8:	f7f6 feae 	bl	8000608 <__aeabi_dmul>
 80098ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098b0:	f7f7 f930 	bl	8000b14 <__aeabi_dcmpge>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f000 8157 	beq.w	8009b68 <_dtoa_r+0x938>
 80098ba:	2400      	movs	r4, #0
 80098bc:	4625      	mov	r5, r4
 80098be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098c0:	43db      	mvns	r3, r3
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	4656      	mov	r6, sl
 80098c6:	2700      	movs	r7, #0
 80098c8:	4621      	mov	r1, r4
 80098ca:	4658      	mov	r0, fp
 80098cc:	f000 fafe 	bl	8009ecc <_Bfree>
 80098d0:	2d00      	cmp	r5, #0
 80098d2:	d0dc      	beq.n	800988e <_dtoa_r+0x65e>
 80098d4:	b12f      	cbz	r7, 80098e2 <_dtoa_r+0x6b2>
 80098d6:	42af      	cmp	r7, r5
 80098d8:	d003      	beq.n	80098e2 <_dtoa_r+0x6b2>
 80098da:	4639      	mov	r1, r7
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 faf5 	bl	8009ecc <_Bfree>
 80098e2:	4629      	mov	r1, r5
 80098e4:	4658      	mov	r0, fp
 80098e6:	f000 faf1 	bl	8009ecc <_Bfree>
 80098ea:	e7d0      	b.n	800988e <_dtoa_r+0x65e>
 80098ec:	9704      	str	r7, [sp, #16]
 80098ee:	4633      	mov	r3, r6
 80098f0:	461e      	mov	r6, r3
 80098f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098f6:	2a39      	cmp	r2, #57	@ 0x39
 80098f8:	d107      	bne.n	800990a <_dtoa_r+0x6da>
 80098fa:	459a      	cmp	sl, r3
 80098fc:	d1f8      	bne.n	80098f0 <_dtoa_r+0x6c0>
 80098fe:	9a04      	ldr	r2, [sp, #16]
 8009900:	3201      	adds	r2, #1
 8009902:	9204      	str	r2, [sp, #16]
 8009904:	2230      	movs	r2, #48	@ 0x30
 8009906:	f88a 2000 	strb.w	r2, [sl]
 800990a:	781a      	ldrb	r2, [r3, #0]
 800990c:	3201      	adds	r2, #1
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e7bd      	b.n	800988e <_dtoa_r+0x65e>
 8009912:	4b7b      	ldr	r3, [pc, #492]	@ (8009b00 <_dtoa_r+0x8d0>)
 8009914:	2200      	movs	r2, #0
 8009916:	f7f6 fe77 	bl	8000608 <__aeabi_dmul>
 800991a:	2200      	movs	r2, #0
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	f7f7 f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009926:	2800      	cmp	r0, #0
 8009928:	f43f aebb 	beq.w	80096a2 <_dtoa_r+0x472>
 800992c:	e6f0      	b.n	8009710 <_dtoa_r+0x4e0>
 800992e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009930:	2a00      	cmp	r2, #0
 8009932:	f000 80db 	beq.w	8009aec <_dtoa_r+0x8bc>
 8009936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009938:	2a01      	cmp	r2, #1
 800993a:	f300 80bf 	bgt.w	8009abc <_dtoa_r+0x88c>
 800993e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009940:	2a00      	cmp	r2, #0
 8009942:	f000 80b7 	beq.w	8009ab4 <_dtoa_r+0x884>
 8009946:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800994a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800994c:	4646      	mov	r6, r8
 800994e:	9a08      	ldr	r2, [sp, #32]
 8009950:	2101      	movs	r1, #1
 8009952:	441a      	add	r2, r3
 8009954:	4658      	mov	r0, fp
 8009956:	4498      	add	r8, r3
 8009958:	9208      	str	r2, [sp, #32]
 800995a:	f000 fb6b 	bl	800a034 <__i2b>
 800995e:	4605      	mov	r5, r0
 8009960:	b15e      	cbz	r6, 800997a <_dtoa_r+0x74a>
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	2b00      	cmp	r3, #0
 8009966:	dd08      	ble.n	800997a <_dtoa_r+0x74a>
 8009968:	42b3      	cmp	r3, r6
 800996a:	9a08      	ldr	r2, [sp, #32]
 800996c:	bfa8      	it	ge
 800996e:	4633      	movge	r3, r6
 8009970:	eba8 0803 	sub.w	r8, r8, r3
 8009974:	1af6      	subs	r6, r6, r3
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800997c:	b1f3      	cbz	r3, 80099bc <_dtoa_r+0x78c>
 800997e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80b7 	beq.w	8009af4 <_dtoa_r+0x8c4>
 8009986:	b18c      	cbz	r4, 80099ac <_dtoa_r+0x77c>
 8009988:	4629      	mov	r1, r5
 800998a:	4622      	mov	r2, r4
 800998c:	4658      	mov	r0, fp
 800998e:	f000 fc11 	bl	800a1b4 <__pow5mult>
 8009992:	464a      	mov	r2, r9
 8009994:	4601      	mov	r1, r0
 8009996:	4605      	mov	r5, r0
 8009998:	4658      	mov	r0, fp
 800999a:	f000 fb61 	bl	800a060 <__multiply>
 800999e:	4649      	mov	r1, r9
 80099a0:	9004      	str	r0, [sp, #16]
 80099a2:	4658      	mov	r0, fp
 80099a4:	f000 fa92 	bl	8009ecc <_Bfree>
 80099a8:	9b04      	ldr	r3, [sp, #16]
 80099aa:	4699      	mov	r9, r3
 80099ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ae:	1b1a      	subs	r2, r3, r4
 80099b0:	d004      	beq.n	80099bc <_dtoa_r+0x78c>
 80099b2:	4649      	mov	r1, r9
 80099b4:	4658      	mov	r0, fp
 80099b6:	f000 fbfd 	bl	800a1b4 <__pow5mult>
 80099ba:	4681      	mov	r9, r0
 80099bc:	2101      	movs	r1, #1
 80099be:	4658      	mov	r0, fp
 80099c0:	f000 fb38 	bl	800a034 <__i2b>
 80099c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c6:	4604      	mov	r4, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 81cf 	beq.w	8009d6c <_dtoa_r+0xb3c>
 80099ce:	461a      	mov	r2, r3
 80099d0:	4601      	mov	r1, r0
 80099d2:	4658      	mov	r0, fp
 80099d4:	f000 fbee 	bl	800a1b4 <__pow5mult>
 80099d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099da:	2b01      	cmp	r3, #1
 80099dc:	4604      	mov	r4, r0
 80099de:	f300 8095 	bgt.w	8009b0c <_dtoa_r+0x8dc>
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f040 8087 	bne.w	8009af8 <_dtoa_r+0x8c8>
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f040 8089 	bne.w	8009b08 <_dtoa_r+0x8d8>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099fc:	0d1b      	lsrs	r3, r3, #20
 80099fe:	051b      	lsls	r3, r3, #20
 8009a00:	b12b      	cbz	r3, 8009a0e <_dtoa_r+0x7de>
 8009a02:	9b08      	ldr	r3, [sp, #32]
 8009a04:	3301      	adds	r3, #1
 8009a06:	9308      	str	r3, [sp, #32]
 8009a08:	f108 0801 	add.w	r8, r8, #1
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 81b0 	beq.w	8009d78 <_dtoa_r+0xb48>
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a1e:	6918      	ldr	r0, [r3, #16]
 8009a20:	f000 fabc 	bl	8009f9c <__hi0bits>
 8009a24:	f1c0 0020 	rsb	r0, r0, #32
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	4418      	add	r0, r3
 8009a2c:	f010 001f 	ands.w	r0, r0, #31
 8009a30:	d077      	beq.n	8009b22 <_dtoa_r+0x8f2>
 8009a32:	f1c0 0320 	rsb	r3, r0, #32
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	dd6b      	ble.n	8009b12 <_dtoa_r+0x8e2>
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	f1c0 001c 	rsb	r0, r0, #28
 8009a40:	4403      	add	r3, r0
 8009a42:	4480      	add	r8, r0
 8009a44:	4406      	add	r6, r0
 8009a46:	9308      	str	r3, [sp, #32]
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	dd05      	ble.n	8009a5a <_dtoa_r+0x82a>
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4642      	mov	r2, r8
 8009a52:	4658      	mov	r0, fp
 8009a54:	f000 fc08 	bl	800a268 <__lshift>
 8009a58:	4681      	mov	r9, r0
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dd05      	ble.n	8009a6c <_dtoa_r+0x83c>
 8009a60:	4621      	mov	r1, r4
 8009a62:	461a      	mov	r2, r3
 8009a64:	4658      	mov	r0, fp
 8009a66:	f000 fbff 	bl	800a268 <__lshift>
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d059      	beq.n	8009b26 <_dtoa_r+0x8f6>
 8009a72:	4621      	mov	r1, r4
 8009a74:	4648      	mov	r0, r9
 8009a76:	f000 fc63 	bl	800a340 <__mcmp>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	da53      	bge.n	8009b26 <_dtoa_r+0x8f6>
 8009a7e:	1e7b      	subs	r3, r7, #1
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	4649      	mov	r1, r9
 8009a84:	2300      	movs	r3, #0
 8009a86:	220a      	movs	r2, #10
 8009a88:	4658      	mov	r0, fp
 8009a8a:	f000 fa41 	bl	8009f10 <__multadd>
 8009a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a90:	4681      	mov	r9, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 8172 	beq.w	8009d7c <_dtoa_r+0xb4c>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	4658      	mov	r0, fp
 8009aa0:	f000 fa36 	bl	8009f10 <__multadd>
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	dc67      	bgt.n	8009b7c <_dtoa_r+0x94c>
 8009aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	dc41      	bgt.n	8009b36 <_dtoa_r+0x906>
 8009ab2:	e063      	b.n	8009b7c <_dtoa_r+0x94c>
 8009ab4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ab6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009aba:	e746      	b.n	800994a <_dtoa_r+0x71a>
 8009abc:	9b07      	ldr	r3, [sp, #28]
 8009abe:	1e5c      	subs	r4, r3, #1
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	bfbf      	itttt	lt
 8009ac6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ac8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009aca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009acc:	1ae3      	sublt	r3, r4, r3
 8009ace:	bfb4      	ite	lt
 8009ad0:	18d2      	addlt	r2, r2, r3
 8009ad2:	1b1c      	subge	r4, r3, r4
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	bfbc      	itt	lt
 8009ad8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ada:	2400      	movlt	r4, #0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfb5      	itete	lt
 8009ae0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ae4:	9b07      	ldrge	r3, [sp, #28]
 8009ae6:	2300      	movlt	r3, #0
 8009ae8:	4646      	movge	r6, r8
 8009aea:	e730      	b.n	800994e <_dtoa_r+0x71e>
 8009aec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009aee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009af0:	4646      	mov	r6, r8
 8009af2:	e735      	b.n	8009960 <_dtoa_r+0x730>
 8009af4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009af6:	e75c      	b.n	80099b2 <_dtoa_r+0x782>
 8009af8:	2300      	movs	r3, #0
 8009afa:	e788      	b.n	8009a0e <_dtoa_r+0x7de>
 8009afc:	3fe00000 	.word	0x3fe00000
 8009b00:	40240000 	.word	0x40240000
 8009b04:	40140000 	.word	0x40140000
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	e780      	b.n	8009a0e <_dtoa_r+0x7de>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b10:	e782      	b.n	8009a18 <_dtoa_r+0x7e8>
 8009b12:	d099      	beq.n	8009a48 <_dtoa_r+0x818>
 8009b14:	9a08      	ldr	r2, [sp, #32]
 8009b16:	331c      	adds	r3, #28
 8009b18:	441a      	add	r2, r3
 8009b1a:	4498      	add	r8, r3
 8009b1c:	441e      	add	r6, r3
 8009b1e:	9208      	str	r2, [sp, #32]
 8009b20:	e792      	b.n	8009a48 <_dtoa_r+0x818>
 8009b22:	4603      	mov	r3, r0
 8009b24:	e7f6      	b.n	8009b14 <_dtoa_r+0x8e4>
 8009b26:	9b07      	ldr	r3, [sp, #28]
 8009b28:	9704      	str	r7, [sp, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dc20      	bgt.n	8009b70 <_dtoa_r+0x940>
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	dd1e      	ble.n	8009b74 <_dtoa_r+0x944>
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f47f aec0 	bne.w	80098be <_dtoa_r+0x68e>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	2205      	movs	r2, #5
 8009b42:	4658      	mov	r0, fp
 8009b44:	f000 f9e4 	bl	8009f10 <__multadd>
 8009b48:	4601      	mov	r1, r0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4648      	mov	r0, r9
 8009b4e:	f000 fbf7 	bl	800a340 <__mcmp>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f77f aeb3 	ble.w	80098be <_dtoa_r+0x68e>
 8009b58:	4656      	mov	r6, sl
 8009b5a:	2331      	movs	r3, #49	@ 0x31
 8009b5c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b60:	9b04      	ldr	r3, [sp, #16]
 8009b62:	3301      	adds	r3, #1
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	e6ae      	b.n	80098c6 <_dtoa_r+0x696>
 8009b68:	9c07      	ldr	r4, [sp, #28]
 8009b6a:	9704      	str	r7, [sp, #16]
 8009b6c:	4625      	mov	r5, r4
 8009b6e:	e7f3      	b.n	8009b58 <_dtoa_r+0x928>
 8009b70:	9b07      	ldr	r3, [sp, #28]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 8104 	beq.w	8009d84 <_dtoa_r+0xb54>
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	dd05      	ble.n	8009b8c <_dtoa_r+0x95c>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4632      	mov	r2, r6
 8009b84:	4658      	mov	r0, fp
 8009b86:	f000 fb6f 	bl	800a268 <__lshift>
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d05a      	beq.n	8009c48 <_dtoa_r+0xa18>
 8009b92:	6869      	ldr	r1, [r5, #4]
 8009b94:	4658      	mov	r0, fp
 8009b96:	f000 f959 	bl	8009e4c <_Balloc>
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <_dtoa_r+0x97a>
 8009b9e:	4b84      	ldr	r3, [pc, #528]	@ (8009db0 <_dtoa_r+0xb80>)
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ba6:	f7ff bb5a 	b.w	800925e <_dtoa_r+0x2e>
 8009baa:	692a      	ldr	r2, [r5, #16]
 8009bac:	3202      	adds	r2, #2
 8009bae:	0092      	lsls	r2, r2, #2
 8009bb0:	f105 010c 	add.w	r1, r5, #12
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	f7ff faa2 	bl	80090fe <memcpy>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f000 fb52 	bl	800a268 <__lshift>
 8009bc4:	f10a 0301 	add.w	r3, sl, #1
 8009bc8:	9307      	str	r3, [sp, #28]
 8009bca:	9b00      	ldr	r3, [sp, #0]
 8009bcc:	4453      	add	r3, sl
 8009bce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	462f      	mov	r7, r5
 8009bd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bda:	4605      	mov	r5, r0
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	4621      	mov	r1, r4
 8009be0:	3b01      	subs	r3, #1
 8009be2:	4648      	mov	r0, r9
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	f7ff fa98 	bl	800911a <quorem>
 8009bea:	4639      	mov	r1, r7
 8009bec:	9002      	str	r0, [sp, #8]
 8009bee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009bf2:	4648      	mov	r0, r9
 8009bf4:	f000 fba4 	bl	800a340 <__mcmp>
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	9008      	str	r0, [sp, #32]
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4658      	mov	r0, fp
 8009c00:	f000 fbba 	bl	800a378 <__mdiff>
 8009c04:	68c2      	ldr	r2, [r0, #12]
 8009c06:	4606      	mov	r6, r0
 8009c08:	bb02      	cbnz	r2, 8009c4c <_dtoa_r+0xa1c>
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	4648      	mov	r0, r9
 8009c0e:	f000 fb97 	bl	800a340 <__mcmp>
 8009c12:	4602      	mov	r2, r0
 8009c14:	4631      	mov	r1, r6
 8009c16:	4658      	mov	r0, fp
 8009c18:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c1a:	f000 f957 	bl	8009ecc <_Bfree>
 8009c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c22:	9e07      	ldr	r6, [sp, #28]
 8009c24:	ea43 0102 	orr.w	r1, r3, r2
 8009c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2a:	4319      	orrs	r1, r3
 8009c2c:	d110      	bne.n	8009c50 <_dtoa_r+0xa20>
 8009c2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c32:	d029      	beq.n	8009c88 <_dtoa_r+0xa58>
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd02      	ble.n	8009c40 <_dtoa_r+0xa10>
 8009c3a:	9b02      	ldr	r3, [sp, #8]
 8009c3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c40:	9b00      	ldr	r3, [sp, #0]
 8009c42:	f883 8000 	strb.w	r8, [r3]
 8009c46:	e63f      	b.n	80098c8 <_dtoa_r+0x698>
 8009c48:	4628      	mov	r0, r5
 8009c4a:	e7bb      	b.n	8009bc4 <_dtoa_r+0x994>
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	e7e1      	b.n	8009c14 <_dtoa_r+0x9e4>
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	db04      	blt.n	8009c60 <_dtoa_r+0xa30>
 8009c56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	d120      	bne.n	8009ca2 <_dtoa_r+0xa72>
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	dded      	ble.n	8009c40 <_dtoa_r+0xa10>
 8009c64:	4649      	mov	r1, r9
 8009c66:	2201      	movs	r2, #1
 8009c68:	4658      	mov	r0, fp
 8009c6a:	f000 fafd 	bl	800a268 <__lshift>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4681      	mov	r9, r0
 8009c72:	f000 fb65 	bl	800a340 <__mcmp>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	dc03      	bgt.n	8009c82 <_dtoa_r+0xa52>
 8009c7a:	d1e1      	bne.n	8009c40 <_dtoa_r+0xa10>
 8009c7c:	f018 0f01 	tst.w	r8, #1
 8009c80:	d0de      	beq.n	8009c40 <_dtoa_r+0xa10>
 8009c82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c86:	d1d8      	bne.n	8009c3a <_dtoa_r+0xa0a>
 8009c88:	9a00      	ldr	r2, [sp, #0]
 8009c8a:	2339      	movs	r3, #57	@ 0x39
 8009c8c:	7013      	strb	r3, [r2, #0]
 8009c8e:	4633      	mov	r3, r6
 8009c90:	461e      	mov	r6, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c98:	2a39      	cmp	r2, #57	@ 0x39
 8009c9a:	d052      	beq.n	8009d42 <_dtoa_r+0xb12>
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	e612      	b.n	80098c8 <_dtoa_r+0x698>
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	dd07      	ble.n	8009cb6 <_dtoa_r+0xa86>
 8009ca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009caa:	d0ed      	beq.n	8009c88 <_dtoa_r+0xa58>
 8009cac:	9a00      	ldr	r2, [sp, #0]
 8009cae:	f108 0301 	add.w	r3, r8, #1
 8009cb2:	7013      	strb	r3, [r2, #0]
 8009cb4:	e608      	b.n	80098c8 <_dtoa_r+0x698>
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	9a07      	ldr	r2, [sp, #28]
 8009cba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d028      	beq.n	8009d16 <_dtoa_r+0xae6>
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	220a      	movs	r2, #10
 8009cca:	4658      	mov	r0, fp
 8009ccc:	f000 f920 	bl	8009f10 <__multadd>
 8009cd0:	42af      	cmp	r7, r5
 8009cd2:	4681      	mov	r9, r0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	f04f 020a 	mov.w	r2, #10
 8009cdc:	4639      	mov	r1, r7
 8009cde:	4658      	mov	r0, fp
 8009ce0:	d107      	bne.n	8009cf2 <_dtoa_r+0xac2>
 8009ce2:	f000 f915 	bl	8009f10 <__multadd>
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	4605      	mov	r5, r0
 8009cea:	9b07      	ldr	r3, [sp, #28]
 8009cec:	3301      	adds	r3, #1
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	e774      	b.n	8009bdc <_dtoa_r+0x9ac>
 8009cf2:	f000 f90d 	bl	8009f10 <__multadd>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	220a      	movs	r2, #10
 8009cfe:	4658      	mov	r0, fp
 8009d00:	f000 f906 	bl	8009f10 <__multadd>
 8009d04:	4605      	mov	r5, r0
 8009d06:	e7f0      	b.n	8009cea <_dtoa_r+0xaba>
 8009d08:	9b00      	ldr	r3, [sp, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bfcc      	ite	gt
 8009d0e:	461e      	movgt	r6, r3
 8009d10:	2601      	movle	r6, #1
 8009d12:	4456      	add	r6, sl
 8009d14:	2700      	movs	r7, #0
 8009d16:	4649      	mov	r1, r9
 8009d18:	2201      	movs	r2, #1
 8009d1a:	4658      	mov	r0, fp
 8009d1c:	f000 faa4 	bl	800a268 <__lshift>
 8009d20:	4621      	mov	r1, r4
 8009d22:	4681      	mov	r9, r0
 8009d24:	f000 fb0c 	bl	800a340 <__mcmp>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	dcb0      	bgt.n	8009c8e <_dtoa_r+0xa5e>
 8009d2c:	d102      	bne.n	8009d34 <_dtoa_r+0xb04>
 8009d2e:	f018 0f01 	tst.w	r8, #1
 8009d32:	d1ac      	bne.n	8009c8e <_dtoa_r+0xa5e>
 8009d34:	4633      	mov	r3, r6
 8009d36:	461e      	mov	r6, r3
 8009d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d3c:	2a30      	cmp	r2, #48	@ 0x30
 8009d3e:	d0fa      	beq.n	8009d36 <_dtoa_r+0xb06>
 8009d40:	e5c2      	b.n	80098c8 <_dtoa_r+0x698>
 8009d42:	459a      	cmp	sl, r3
 8009d44:	d1a4      	bne.n	8009c90 <_dtoa_r+0xa60>
 8009d46:	9b04      	ldr	r3, [sp, #16]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	2331      	movs	r3, #49	@ 0x31
 8009d4e:	f88a 3000 	strb.w	r3, [sl]
 8009d52:	e5b9      	b.n	80098c8 <_dtoa_r+0x698>
 8009d54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009db4 <_dtoa_r+0xb84>
 8009d5a:	b11b      	cbz	r3, 8009d64 <_dtoa_r+0xb34>
 8009d5c:	f10a 0308 	add.w	r3, sl, #8
 8009d60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	4650      	mov	r0, sl
 8009d66:	b019      	add	sp, #100	@ 0x64
 8009d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	f77f ae37 	ble.w	80099e2 <_dtoa_r+0x7b2>
 8009d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d78:	2001      	movs	r0, #1
 8009d7a:	e655      	b.n	8009a28 <_dtoa_r+0x7f8>
 8009d7c:	9b00      	ldr	r3, [sp, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f77f aed6 	ble.w	8009b30 <_dtoa_r+0x900>
 8009d84:	4656      	mov	r6, sl
 8009d86:	4621      	mov	r1, r4
 8009d88:	4648      	mov	r0, r9
 8009d8a:	f7ff f9c6 	bl	800911a <quorem>
 8009d8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d92:	f806 8b01 	strb.w	r8, [r6], #1
 8009d96:	9b00      	ldr	r3, [sp, #0]
 8009d98:	eba6 020a 	sub.w	r2, r6, sl
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	ddb3      	ble.n	8009d08 <_dtoa_r+0xad8>
 8009da0:	4649      	mov	r1, r9
 8009da2:	2300      	movs	r3, #0
 8009da4:	220a      	movs	r2, #10
 8009da6:	4658      	mov	r0, fp
 8009da8:	f000 f8b2 	bl	8009f10 <__multadd>
 8009dac:	4681      	mov	r9, r0
 8009dae:	e7ea      	b.n	8009d86 <_dtoa_r+0xb56>
 8009db0:	08067bfa 	.word	0x08067bfa
 8009db4:	08067b7e 	.word	0x08067b7e

08009db8 <_free_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4605      	mov	r5, r0
 8009dbc:	2900      	cmp	r1, #0
 8009dbe:	d041      	beq.n	8009e44 <_free_r+0x8c>
 8009dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc4:	1f0c      	subs	r4, r1, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfb8      	it	lt
 8009dca:	18e4      	addlt	r4, r4, r3
 8009dcc:	f7fe fb8c 	bl	80084e8 <__malloc_lock>
 8009dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e48 <_free_r+0x90>)
 8009dd2:	6813      	ldr	r3, [r2, #0]
 8009dd4:	b933      	cbnz	r3, 8009de4 <_free_r+0x2c>
 8009dd6:	6063      	str	r3, [r4, #4]
 8009dd8:	6014      	str	r4, [r2, #0]
 8009dda:	4628      	mov	r0, r5
 8009ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de0:	f7fe bb88 	b.w	80084f4 <__malloc_unlock>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	d908      	bls.n	8009dfa <_free_r+0x42>
 8009de8:	6820      	ldr	r0, [r4, #0]
 8009dea:	1821      	adds	r1, r4, r0
 8009dec:	428b      	cmp	r3, r1
 8009dee:	bf01      	itttt	eq
 8009df0:	6819      	ldreq	r1, [r3, #0]
 8009df2:	685b      	ldreq	r3, [r3, #4]
 8009df4:	1809      	addeq	r1, r1, r0
 8009df6:	6021      	streq	r1, [r4, #0]
 8009df8:	e7ed      	b.n	8009dd6 <_free_r+0x1e>
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	b10b      	cbz	r3, 8009e04 <_free_r+0x4c>
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	d9fa      	bls.n	8009dfa <_free_r+0x42>
 8009e04:	6811      	ldr	r1, [r2, #0]
 8009e06:	1850      	adds	r0, r2, r1
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d10b      	bne.n	8009e24 <_free_r+0x6c>
 8009e0c:	6820      	ldr	r0, [r4, #0]
 8009e0e:	4401      	add	r1, r0
 8009e10:	1850      	adds	r0, r2, r1
 8009e12:	4283      	cmp	r3, r0
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	d1e0      	bne.n	8009dda <_free_r+0x22>
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	6053      	str	r3, [r2, #4]
 8009e1e:	4408      	add	r0, r1
 8009e20:	6010      	str	r0, [r2, #0]
 8009e22:	e7da      	b.n	8009dda <_free_r+0x22>
 8009e24:	d902      	bls.n	8009e2c <_free_r+0x74>
 8009e26:	230c      	movs	r3, #12
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	e7d6      	b.n	8009dda <_free_r+0x22>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	1821      	adds	r1, r4, r0
 8009e30:	428b      	cmp	r3, r1
 8009e32:	bf04      	itt	eq
 8009e34:	6819      	ldreq	r1, [r3, #0]
 8009e36:	685b      	ldreq	r3, [r3, #4]
 8009e38:	6063      	str	r3, [r4, #4]
 8009e3a:	bf04      	itt	eq
 8009e3c:	1809      	addeq	r1, r1, r0
 8009e3e:	6021      	streq	r1, [r4, #0]
 8009e40:	6054      	str	r4, [r2, #4]
 8009e42:	e7ca      	b.n	8009dda <_free_r+0x22>
 8009e44:	bd38      	pop	{r3, r4, r5, pc}
 8009e46:	bf00      	nop
 8009e48:	20007510 	.word	0x20007510

08009e4c <_Balloc>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	69c6      	ldr	r6, [r0, #28]
 8009e50:	4604      	mov	r4, r0
 8009e52:	460d      	mov	r5, r1
 8009e54:	b976      	cbnz	r6, 8009e74 <_Balloc+0x28>
 8009e56:	2010      	movs	r0, #16
 8009e58:	f7f8 fdfc 	bl	8002a54 <__wrap_malloc>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	61e0      	str	r0, [r4, #28]
 8009e60:	b920      	cbnz	r0, 8009e6c <_Balloc+0x20>
 8009e62:	4b18      	ldr	r3, [pc, #96]	@ (8009ec4 <_Balloc+0x78>)
 8009e64:	4818      	ldr	r0, [pc, #96]	@ (8009ec8 <_Balloc+0x7c>)
 8009e66:	216b      	movs	r1, #107	@ 0x6b
 8009e68:	f000 fc1e 	bl	800a6a8 <__assert_func>
 8009e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e70:	6006      	str	r6, [r0, #0]
 8009e72:	60c6      	str	r6, [r0, #12]
 8009e74:	69e6      	ldr	r6, [r4, #28]
 8009e76:	68f3      	ldr	r3, [r6, #12]
 8009e78:	b183      	cbz	r3, 8009e9c <_Balloc+0x50>
 8009e7a:	69e3      	ldr	r3, [r4, #28]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e82:	b9b8      	cbnz	r0, 8009eb4 <_Balloc+0x68>
 8009e84:	2101      	movs	r1, #1
 8009e86:	fa01 f605 	lsl.w	r6, r1, r5
 8009e8a:	1d72      	adds	r2, r6, #5
 8009e8c:	0092      	lsls	r2, r2, #2
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 fc28 	bl	800a6e4 <_calloc_r>
 8009e94:	b160      	cbz	r0, 8009eb0 <_Balloc+0x64>
 8009e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e9a:	e00e      	b.n	8009eba <_Balloc+0x6e>
 8009e9c:	2221      	movs	r2, #33	@ 0x21
 8009e9e:	2104      	movs	r1, #4
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fc1f 	bl	800a6e4 <_calloc_r>
 8009ea6:	69e3      	ldr	r3, [r4, #28]
 8009ea8:	60f0      	str	r0, [r6, #12]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e4      	bne.n	8009e7a <_Balloc+0x2e>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	6802      	ldr	r2, [r0, #0]
 8009eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ec0:	e7f7      	b.n	8009eb2 <_Balloc+0x66>
 8009ec2:	bf00      	nop
 8009ec4:	08067b8b 	.word	0x08067b8b
 8009ec8:	08067c0b 	.word	0x08067c0b

08009ecc <_Bfree>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	69c6      	ldr	r6, [r0, #28]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	b976      	cbnz	r6, 8009ef4 <_Bfree+0x28>
 8009ed6:	2010      	movs	r0, #16
 8009ed8:	f7f8 fdbc 	bl	8002a54 <__wrap_malloc>
 8009edc:	4602      	mov	r2, r0
 8009ede:	61e8      	str	r0, [r5, #28]
 8009ee0:	b920      	cbnz	r0, 8009eec <_Bfree+0x20>
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <_Bfree+0x3c>)
 8009ee4:	4809      	ldr	r0, [pc, #36]	@ (8009f0c <_Bfree+0x40>)
 8009ee6:	218f      	movs	r1, #143	@ 0x8f
 8009ee8:	f000 fbde 	bl	800a6a8 <__assert_func>
 8009eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ef0:	6006      	str	r6, [r0, #0]
 8009ef2:	60c6      	str	r6, [r0, #12]
 8009ef4:	b13c      	cbz	r4, 8009f06 <_Bfree+0x3a>
 8009ef6:	69eb      	ldr	r3, [r5, #28]
 8009ef8:	6862      	ldr	r2, [r4, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f00:	6021      	str	r1, [r4, #0]
 8009f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	08067b8b 	.word	0x08067b8b
 8009f0c:	08067c0b 	.word	0x08067c0b

08009f10 <__multadd>:
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	690d      	ldr	r5, [r1, #16]
 8009f16:	4607      	mov	r7, r0
 8009f18:	460c      	mov	r4, r1
 8009f1a:	461e      	mov	r6, r3
 8009f1c:	f101 0c14 	add.w	ip, r1, #20
 8009f20:	2000      	movs	r0, #0
 8009f22:	f8dc 3000 	ldr.w	r3, [ip]
 8009f26:	b299      	uxth	r1, r3
 8009f28:	fb02 6101 	mla	r1, r2, r1, r6
 8009f2c:	0c1e      	lsrs	r6, r3, #16
 8009f2e:	0c0b      	lsrs	r3, r1, #16
 8009f30:	fb02 3306 	mla	r3, r2, r6, r3
 8009f34:	b289      	uxth	r1, r1
 8009f36:	3001      	adds	r0, #1
 8009f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f3c:	4285      	cmp	r5, r0
 8009f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f46:	dcec      	bgt.n	8009f22 <__multadd+0x12>
 8009f48:	b30e      	cbz	r6, 8009f8e <__multadd+0x7e>
 8009f4a:	68a3      	ldr	r3, [r4, #8]
 8009f4c:	42ab      	cmp	r3, r5
 8009f4e:	dc19      	bgt.n	8009f84 <__multadd+0x74>
 8009f50:	6861      	ldr	r1, [r4, #4]
 8009f52:	4638      	mov	r0, r7
 8009f54:	3101      	adds	r1, #1
 8009f56:	f7ff ff79 	bl	8009e4c <_Balloc>
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	b928      	cbnz	r0, 8009f6a <__multadd+0x5a>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4b0c      	ldr	r3, [pc, #48]	@ (8009f94 <__multadd+0x84>)
 8009f62:	480d      	ldr	r0, [pc, #52]	@ (8009f98 <__multadd+0x88>)
 8009f64:	21ba      	movs	r1, #186	@ 0xba
 8009f66:	f000 fb9f 	bl	800a6a8 <__assert_func>
 8009f6a:	6922      	ldr	r2, [r4, #16]
 8009f6c:	3202      	adds	r2, #2
 8009f6e:	f104 010c 	add.w	r1, r4, #12
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	300c      	adds	r0, #12
 8009f76:	f7ff f8c2 	bl	80090fe <memcpy>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff ffa5 	bl	8009ecc <_Bfree>
 8009f82:	4644      	mov	r4, r8
 8009f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f88:	3501      	adds	r5, #1
 8009f8a:	615e      	str	r6, [r3, #20]
 8009f8c:	6125      	str	r5, [r4, #16]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f94:	08067bfa 	.word	0x08067bfa
 8009f98:	08067c0b 	.word	0x08067c0b

08009f9c <__hi0bits>:
 8009f9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	bf36      	itet	cc
 8009fa4:	0403      	lslcc	r3, r0, #16
 8009fa6:	2000      	movcs	r0, #0
 8009fa8:	2010      	movcc	r0, #16
 8009faa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fae:	bf3c      	itt	cc
 8009fb0:	021b      	lslcc	r3, r3, #8
 8009fb2:	3008      	addcc	r0, #8
 8009fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fb8:	bf3c      	itt	cc
 8009fba:	011b      	lslcc	r3, r3, #4
 8009fbc:	3004      	addcc	r0, #4
 8009fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fc2:	bf3c      	itt	cc
 8009fc4:	009b      	lslcc	r3, r3, #2
 8009fc6:	3002      	addcc	r0, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	db05      	blt.n	8009fd8 <__hi0bits+0x3c>
 8009fcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009fd0:	f100 0001 	add.w	r0, r0, #1
 8009fd4:	bf08      	it	eq
 8009fd6:	2020      	moveq	r0, #32
 8009fd8:	4770      	bx	lr

08009fda <__lo0bits>:
 8009fda:	6803      	ldr	r3, [r0, #0]
 8009fdc:	4602      	mov	r2, r0
 8009fde:	f013 0007 	ands.w	r0, r3, #7
 8009fe2:	d00b      	beq.n	8009ffc <__lo0bits+0x22>
 8009fe4:	07d9      	lsls	r1, r3, #31
 8009fe6:	d421      	bmi.n	800a02c <__lo0bits+0x52>
 8009fe8:	0798      	lsls	r0, r3, #30
 8009fea:	bf49      	itett	mi
 8009fec:	085b      	lsrmi	r3, r3, #1
 8009fee:	089b      	lsrpl	r3, r3, #2
 8009ff0:	2001      	movmi	r0, #1
 8009ff2:	6013      	strmi	r3, [r2, #0]
 8009ff4:	bf5c      	itt	pl
 8009ff6:	6013      	strpl	r3, [r2, #0]
 8009ff8:	2002      	movpl	r0, #2
 8009ffa:	4770      	bx	lr
 8009ffc:	b299      	uxth	r1, r3
 8009ffe:	b909      	cbnz	r1, 800a004 <__lo0bits+0x2a>
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	2010      	movs	r0, #16
 800a004:	b2d9      	uxtb	r1, r3
 800a006:	b909      	cbnz	r1, 800a00c <__lo0bits+0x32>
 800a008:	3008      	adds	r0, #8
 800a00a:	0a1b      	lsrs	r3, r3, #8
 800a00c:	0719      	lsls	r1, r3, #28
 800a00e:	bf04      	itt	eq
 800a010:	091b      	lsreq	r3, r3, #4
 800a012:	3004      	addeq	r0, #4
 800a014:	0799      	lsls	r1, r3, #30
 800a016:	bf04      	itt	eq
 800a018:	089b      	lsreq	r3, r3, #2
 800a01a:	3002      	addeq	r0, #2
 800a01c:	07d9      	lsls	r1, r3, #31
 800a01e:	d403      	bmi.n	800a028 <__lo0bits+0x4e>
 800a020:	085b      	lsrs	r3, r3, #1
 800a022:	f100 0001 	add.w	r0, r0, #1
 800a026:	d003      	beq.n	800a030 <__lo0bits+0x56>
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	4770      	bx	lr
 800a02c:	2000      	movs	r0, #0
 800a02e:	4770      	bx	lr
 800a030:	2020      	movs	r0, #32
 800a032:	4770      	bx	lr

0800a034 <__i2b>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	2101      	movs	r1, #1
 800a03a:	f7ff ff07 	bl	8009e4c <_Balloc>
 800a03e:	4602      	mov	r2, r0
 800a040:	b928      	cbnz	r0, 800a04e <__i2b+0x1a>
 800a042:	4b05      	ldr	r3, [pc, #20]	@ (800a058 <__i2b+0x24>)
 800a044:	4805      	ldr	r0, [pc, #20]	@ (800a05c <__i2b+0x28>)
 800a046:	f240 1145 	movw	r1, #325	@ 0x145
 800a04a:	f000 fb2d 	bl	800a6a8 <__assert_func>
 800a04e:	2301      	movs	r3, #1
 800a050:	6144      	str	r4, [r0, #20]
 800a052:	6103      	str	r3, [r0, #16]
 800a054:	bd10      	pop	{r4, pc}
 800a056:	bf00      	nop
 800a058:	08067bfa 	.word	0x08067bfa
 800a05c:	08067c0b 	.word	0x08067c0b

0800a060 <__multiply>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4614      	mov	r4, r2
 800a066:	690a      	ldr	r2, [r1, #16]
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	bfa8      	it	ge
 800a06e:	4623      	movge	r3, r4
 800a070:	460f      	mov	r7, r1
 800a072:	bfa4      	itt	ge
 800a074:	460c      	movge	r4, r1
 800a076:	461f      	movge	r7, r3
 800a078:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a07c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a080:	68a3      	ldr	r3, [r4, #8]
 800a082:	6861      	ldr	r1, [r4, #4]
 800a084:	eb0a 0609 	add.w	r6, sl, r9
 800a088:	42b3      	cmp	r3, r6
 800a08a:	b085      	sub	sp, #20
 800a08c:	bfb8      	it	lt
 800a08e:	3101      	addlt	r1, #1
 800a090:	f7ff fedc 	bl	8009e4c <_Balloc>
 800a094:	b930      	cbnz	r0, 800a0a4 <__multiply+0x44>
 800a096:	4602      	mov	r2, r0
 800a098:	4b44      	ldr	r3, [pc, #272]	@ (800a1ac <__multiply+0x14c>)
 800a09a:	4845      	ldr	r0, [pc, #276]	@ (800a1b0 <__multiply+0x150>)
 800a09c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0a0:	f000 fb02 	bl	800a6a8 <__assert_func>
 800a0a4:	f100 0514 	add.w	r5, r0, #20
 800a0a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4543      	cmp	r3, r8
 800a0b2:	d321      	bcc.n	800a0f8 <__multiply+0x98>
 800a0b4:	f107 0114 	add.w	r1, r7, #20
 800a0b8:	f104 0214 	add.w	r2, r4, #20
 800a0bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0c4:	9302      	str	r3, [sp, #8]
 800a0c6:	1b13      	subs	r3, r2, r4
 800a0c8:	3b15      	subs	r3, #21
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	f104 0715 	add.w	r7, r4, #21
 800a0d4:	42ba      	cmp	r2, r7
 800a0d6:	bf38      	it	cc
 800a0d8:	2304      	movcc	r3, #4
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	9b02      	ldr	r3, [sp, #8]
 800a0de:	9103      	str	r1, [sp, #12]
 800a0e0:	428b      	cmp	r3, r1
 800a0e2:	d80c      	bhi.n	800a0fe <__multiply+0x9e>
 800a0e4:	2e00      	cmp	r6, #0
 800a0e6:	dd03      	ble.n	800a0f0 <__multiply+0x90>
 800a0e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d05b      	beq.n	800a1a8 <__multiply+0x148>
 800a0f0:	6106      	str	r6, [r0, #16]
 800a0f2:	b005      	add	sp, #20
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f8:	f843 2b04 	str.w	r2, [r3], #4
 800a0fc:	e7d8      	b.n	800a0b0 <__multiply+0x50>
 800a0fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800a102:	f1ba 0f00 	cmp.w	sl, #0
 800a106:	d024      	beq.n	800a152 <__multiply+0xf2>
 800a108:	f104 0e14 	add.w	lr, r4, #20
 800a10c:	46a9      	mov	r9, r5
 800a10e:	f04f 0c00 	mov.w	ip, #0
 800a112:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a116:	f8d9 3000 	ldr.w	r3, [r9]
 800a11a:	fa1f fb87 	uxth.w	fp, r7
 800a11e:	b29b      	uxth	r3, r3
 800a120:	fb0a 330b 	mla	r3, sl, fp, r3
 800a124:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a128:	f8d9 7000 	ldr.w	r7, [r9]
 800a12c:	4463      	add	r3, ip
 800a12e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a132:	fb0a c70b 	mla	r7, sl, fp, ip
 800a136:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a140:	4572      	cmp	r2, lr
 800a142:	f849 3b04 	str.w	r3, [r9], #4
 800a146:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a14a:	d8e2      	bhi.n	800a112 <__multiply+0xb2>
 800a14c:	9b01      	ldr	r3, [sp, #4]
 800a14e:	f845 c003 	str.w	ip, [r5, r3]
 800a152:	9b03      	ldr	r3, [sp, #12]
 800a154:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a158:	3104      	adds	r1, #4
 800a15a:	f1b9 0f00 	cmp.w	r9, #0
 800a15e:	d021      	beq.n	800a1a4 <__multiply+0x144>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	f104 0c14 	add.w	ip, r4, #20
 800a166:	46ae      	mov	lr, r5
 800a168:	f04f 0a00 	mov.w	sl, #0
 800a16c:	f8bc b000 	ldrh.w	fp, [ip]
 800a170:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a174:	fb09 770b 	mla	r7, r9, fp, r7
 800a178:	4457      	add	r7, sl
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a180:	f84e 3b04 	str.w	r3, [lr], #4
 800a184:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a18c:	f8be 3000 	ldrh.w	r3, [lr]
 800a190:	fb09 330a 	mla	r3, r9, sl, r3
 800a194:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a198:	4562      	cmp	r2, ip
 800a19a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a19e:	d8e5      	bhi.n	800a16c <__multiply+0x10c>
 800a1a0:	9f01      	ldr	r7, [sp, #4]
 800a1a2:	51eb      	str	r3, [r5, r7]
 800a1a4:	3504      	adds	r5, #4
 800a1a6:	e799      	b.n	800a0dc <__multiply+0x7c>
 800a1a8:	3e01      	subs	r6, #1
 800a1aa:	e79b      	b.n	800a0e4 <__multiply+0x84>
 800a1ac:	08067bfa 	.word	0x08067bfa
 800a1b0:	08067c0b 	.word	0x08067c0b

0800a1b4 <__pow5mult>:
 800a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	4615      	mov	r5, r2
 800a1ba:	f012 0203 	ands.w	r2, r2, #3
 800a1be:	4607      	mov	r7, r0
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	d007      	beq.n	800a1d4 <__pow5mult+0x20>
 800a1c4:	4c25      	ldr	r4, [pc, #148]	@ (800a25c <__pow5mult+0xa8>)
 800a1c6:	3a01      	subs	r2, #1
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1ce:	f7ff fe9f 	bl	8009f10 <__multadd>
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	10ad      	asrs	r5, r5, #2
 800a1d6:	d03d      	beq.n	800a254 <__pow5mult+0xa0>
 800a1d8:	69fc      	ldr	r4, [r7, #28]
 800a1da:	b97c      	cbnz	r4, 800a1fc <__pow5mult+0x48>
 800a1dc:	2010      	movs	r0, #16
 800a1de:	f7f8 fc39 	bl	8002a54 <__wrap_malloc>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	61f8      	str	r0, [r7, #28]
 800a1e6:	b928      	cbnz	r0, 800a1f4 <__pow5mult+0x40>
 800a1e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a260 <__pow5mult+0xac>)
 800a1ea:	481e      	ldr	r0, [pc, #120]	@ (800a264 <__pow5mult+0xb0>)
 800a1ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a1f0:	f000 fa5a 	bl	800a6a8 <__assert_func>
 800a1f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1f8:	6004      	str	r4, [r0, #0]
 800a1fa:	60c4      	str	r4, [r0, #12]
 800a1fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a204:	b94c      	cbnz	r4, 800a21a <__pow5mult+0x66>
 800a206:	f240 2171 	movw	r1, #625	@ 0x271
 800a20a:	4638      	mov	r0, r7
 800a20c:	f7ff ff12 	bl	800a034 <__i2b>
 800a210:	2300      	movs	r3, #0
 800a212:	f8c8 0008 	str.w	r0, [r8, #8]
 800a216:	4604      	mov	r4, r0
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	f04f 0900 	mov.w	r9, #0
 800a21e:	07eb      	lsls	r3, r5, #31
 800a220:	d50a      	bpl.n	800a238 <__pow5mult+0x84>
 800a222:	4631      	mov	r1, r6
 800a224:	4622      	mov	r2, r4
 800a226:	4638      	mov	r0, r7
 800a228:	f7ff ff1a 	bl	800a060 <__multiply>
 800a22c:	4631      	mov	r1, r6
 800a22e:	4680      	mov	r8, r0
 800a230:	4638      	mov	r0, r7
 800a232:	f7ff fe4b 	bl	8009ecc <_Bfree>
 800a236:	4646      	mov	r6, r8
 800a238:	106d      	asrs	r5, r5, #1
 800a23a:	d00b      	beq.n	800a254 <__pow5mult+0xa0>
 800a23c:	6820      	ldr	r0, [r4, #0]
 800a23e:	b938      	cbnz	r0, 800a250 <__pow5mult+0x9c>
 800a240:	4622      	mov	r2, r4
 800a242:	4621      	mov	r1, r4
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff ff0b 	bl	800a060 <__multiply>
 800a24a:	6020      	str	r0, [r4, #0]
 800a24c:	f8c0 9000 	str.w	r9, [r0]
 800a250:	4604      	mov	r4, r0
 800a252:	e7e4      	b.n	800a21e <__pow5mult+0x6a>
 800a254:	4630      	mov	r0, r6
 800a256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25a:	bf00      	nop
 800a25c:	08067c64 	.word	0x08067c64
 800a260:	08067b8b 	.word	0x08067b8b
 800a264:	08067c0b 	.word	0x08067c0b

0800a268 <__lshift>:
 800a268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a26c:	460c      	mov	r4, r1
 800a26e:	6849      	ldr	r1, [r1, #4]
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	4607      	mov	r7, r0
 800a27a:	4691      	mov	r9, r2
 800a27c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a280:	f108 0601 	add.w	r6, r8, #1
 800a284:	42b3      	cmp	r3, r6
 800a286:	db0b      	blt.n	800a2a0 <__lshift+0x38>
 800a288:	4638      	mov	r0, r7
 800a28a:	f7ff fddf 	bl	8009e4c <_Balloc>
 800a28e:	4605      	mov	r5, r0
 800a290:	b948      	cbnz	r0, 800a2a6 <__lshift+0x3e>
 800a292:	4602      	mov	r2, r0
 800a294:	4b28      	ldr	r3, [pc, #160]	@ (800a338 <__lshift+0xd0>)
 800a296:	4829      	ldr	r0, [pc, #164]	@ (800a33c <__lshift+0xd4>)
 800a298:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a29c:	f000 fa04 	bl	800a6a8 <__assert_func>
 800a2a0:	3101      	adds	r1, #1
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	e7ee      	b.n	800a284 <__lshift+0x1c>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f100 0114 	add.w	r1, r0, #20
 800a2ac:	f100 0210 	add.w	r2, r0, #16
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	4553      	cmp	r3, sl
 800a2b4:	db33      	blt.n	800a31e <__lshift+0xb6>
 800a2b6:	6920      	ldr	r0, [r4, #16]
 800a2b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2bc:	f104 0314 	add.w	r3, r4, #20
 800a2c0:	f019 091f 	ands.w	r9, r9, #31
 800a2c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2cc:	d02b      	beq.n	800a326 <__lshift+0xbe>
 800a2ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a2d2:	468a      	mov	sl, r1
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a2dc:	4310      	orrs	r0, r2
 800a2de:	f84a 0b04 	str.w	r0, [sl], #4
 800a2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e6:	459c      	cmp	ip, r3
 800a2e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2ec:	d8f3      	bhi.n	800a2d6 <__lshift+0x6e>
 800a2ee:	ebac 0304 	sub.w	r3, ip, r4
 800a2f2:	3b15      	subs	r3, #21
 800a2f4:	f023 0303 	bic.w	r3, r3, #3
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	f104 0015 	add.w	r0, r4, #21
 800a2fe:	4584      	cmp	ip, r0
 800a300:	bf38      	it	cc
 800a302:	2304      	movcc	r3, #4
 800a304:	50ca      	str	r2, [r1, r3]
 800a306:	b10a      	cbz	r2, 800a30c <__lshift+0xa4>
 800a308:	f108 0602 	add.w	r6, r8, #2
 800a30c:	3e01      	subs	r6, #1
 800a30e:	4638      	mov	r0, r7
 800a310:	612e      	str	r6, [r5, #16]
 800a312:	4621      	mov	r1, r4
 800a314:	f7ff fdda 	bl	8009ecc <_Bfree>
 800a318:	4628      	mov	r0, r5
 800a31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a322:	3301      	adds	r3, #1
 800a324:	e7c5      	b.n	800a2b2 <__lshift+0x4a>
 800a326:	3904      	subs	r1, #4
 800a328:	f853 2b04 	ldr.w	r2, [r3], #4
 800a32c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a330:	459c      	cmp	ip, r3
 800a332:	d8f9      	bhi.n	800a328 <__lshift+0xc0>
 800a334:	e7ea      	b.n	800a30c <__lshift+0xa4>
 800a336:	bf00      	nop
 800a338:	08067bfa 	.word	0x08067bfa
 800a33c:	08067c0b 	.word	0x08067c0b

0800a340 <__mcmp>:
 800a340:	690a      	ldr	r2, [r1, #16]
 800a342:	4603      	mov	r3, r0
 800a344:	6900      	ldr	r0, [r0, #16]
 800a346:	1a80      	subs	r0, r0, r2
 800a348:	b530      	push	{r4, r5, lr}
 800a34a:	d10e      	bne.n	800a36a <__mcmp+0x2a>
 800a34c:	3314      	adds	r3, #20
 800a34e:	3114      	adds	r1, #20
 800a350:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a354:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a35c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a360:	4295      	cmp	r5, r2
 800a362:	d003      	beq.n	800a36c <__mcmp+0x2c>
 800a364:	d205      	bcs.n	800a372 <__mcmp+0x32>
 800a366:	f04f 30ff 	mov.w	r0, #4294967295
 800a36a:	bd30      	pop	{r4, r5, pc}
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	d3f3      	bcc.n	800a358 <__mcmp+0x18>
 800a370:	e7fb      	b.n	800a36a <__mcmp+0x2a>
 800a372:	2001      	movs	r0, #1
 800a374:	e7f9      	b.n	800a36a <__mcmp+0x2a>
	...

0800a378 <__mdiff>:
 800a378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	4689      	mov	r9, r1
 800a37e:	4606      	mov	r6, r0
 800a380:	4611      	mov	r1, r2
 800a382:	4648      	mov	r0, r9
 800a384:	4614      	mov	r4, r2
 800a386:	f7ff ffdb 	bl	800a340 <__mcmp>
 800a38a:	1e05      	subs	r5, r0, #0
 800a38c:	d112      	bne.n	800a3b4 <__mdiff+0x3c>
 800a38e:	4629      	mov	r1, r5
 800a390:	4630      	mov	r0, r6
 800a392:	f7ff fd5b 	bl	8009e4c <_Balloc>
 800a396:	4602      	mov	r2, r0
 800a398:	b928      	cbnz	r0, 800a3a6 <__mdiff+0x2e>
 800a39a:	4b3f      	ldr	r3, [pc, #252]	@ (800a498 <__mdiff+0x120>)
 800a39c:	f240 2137 	movw	r1, #567	@ 0x237
 800a3a0:	483e      	ldr	r0, [pc, #248]	@ (800a49c <__mdiff+0x124>)
 800a3a2:	f000 f981 	bl	800a6a8 <__assert_func>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	b003      	add	sp, #12
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	bfbc      	itt	lt
 800a3b6:	464b      	movlt	r3, r9
 800a3b8:	46a1      	movlt	r9, r4
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3c0:	bfba      	itte	lt
 800a3c2:	461c      	movlt	r4, r3
 800a3c4:	2501      	movlt	r5, #1
 800a3c6:	2500      	movge	r5, #0
 800a3c8:	f7ff fd40 	bl	8009e4c <_Balloc>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	b918      	cbnz	r0, 800a3d8 <__mdiff+0x60>
 800a3d0:	4b31      	ldr	r3, [pc, #196]	@ (800a498 <__mdiff+0x120>)
 800a3d2:	f240 2145 	movw	r1, #581	@ 0x245
 800a3d6:	e7e3      	b.n	800a3a0 <__mdiff+0x28>
 800a3d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3dc:	6926      	ldr	r6, [r4, #16]
 800a3de:	60c5      	str	r5, [r0, #12]
 800a3e0:	f109 0310 	add.w	r3, r9, #16
 800a3e4:	f109 0514 	add.w	r5, r9, #20
 800a3e8:	f104 0e14 	add.w	lr, r4, #20
 800a3ec:	f100 0b14 	add.w	fp, r0, #20
 800a3f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a3f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	46d9      	mov	r9, fp
 800a3fc:	f04f 0c00 	mov.w	ip, #0
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a406:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	fa1f f38a 	uxth.w	r3, sl
 800a410:	4619      	mov	r1, r3
 800a412:	b283      	uxth	r3, r0
 800a414:	1acb      	subs	r3, r1, r3
 800a416:	0c00      	lsrs	r0, r0, #16
 800a418:	4463      	add	r3, ip
 800a41a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a41e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a422:	b29b      	uxth	r3, r3
 800a424:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a428:	4576      	cmp	r6, lr
 800a42a:	f849 3b04 	str.w	r3, [r9], #4
 800a42e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a432:	d8e5      	bhi.n	800a400 <__mdiff+0x88>
 800a434:	1b33      	subs	r3, r6, r4
 800a436:	3b15      	subs	r3, #21
 800a438:	f023 0303 	bic.w	r3, r3, #3
 800a43c:	3415      	adds	r4, #21
 800a43e:	3304      	adds	r3, #4
 800a440:	42a6      	cmp	r6, r4
 800a442:	bf38      	it	cc
 800a444:	2304      	movcc	r3, #4
 800a446:	441d      	add	r5, r3
 800a448:	445b      	add	r3, fp
 800a44a:	461e      	mov	r6, r3
 800a44c:	462c      	mov	r4, r5
 800a44e:	4544      	cmp	r4, r8
 800a450:	d30e      	bcc.n	800a470 <__mdiff+0xf8>
 800a452:	f108 0103 	add.w	r1, r8, #3
 800a456:	1b49      	subs	r1, r1, r5
 800a458:	f021 0103 	bic.w	r1, r1, #3
 800a45c:	3d03      	subs	r5, #3
 800a45e:	45a8      	cmp	r8, r5
 800a460:	bf38      	it	cc
 800a462:	2100      	movcc	r1, #0
 800a464:	440b      	add	r3, r1
 800a466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a46a:	b191      	cbz	r1, 800a492 <__mdiff+0x11a>
 800a46c:	6117      	str	r7, [r2, #16]
 800a46e:	e79d      	b.n	800a3ac <__mdiff+0x34>
 800a470:	f854 1b04 	ldr.w	r1, [r4], #4
 800a474:	46e6      	mov	lr, ip
 800a476:	0c08      	lsrs	r0, r1, #16
 800a478:	fa1c fc81 	uxtah	ip, ip, r1
 800a47c:	4471      	add	r1, lr
 800a47e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a482:	b289      	uxth	r1, r1
 800a484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a488:	f846 1b04 	str.w	r1, [r6], #4
 800a48c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a490:	e7dd      	b.n	800a44e <__mdiff+0xd6>
 800a492:	3f01      	subs	r7, #1
 800a494:	e7e7      	b.n	800a466 <__mdiff+0xee>
 800a496:	bf00      	nop
 800a498:	08067bfa 	.word	0x08067bfa
 800a49c:	08067c0b 	.word	0x08067c0b

0800a4a0 <__d2b>:
 800a4a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	ec59 8b10 	vmov	r8, r9, d0
 800a4ac:	4616      	mov	r6, r2
 800a4ae:	f7ff fccd 	bl	8009e4c <_Balloc>
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	b930      	cbnz	r0, 800a4c4 <__d2b+0x24>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	4b23      	ldr	r3, [pc, #140]	@ (800a548 <__d2b+0xa8>)
 800a4ba:	4824      	ldr	r0, [pc, #144]	@ (800a54c <__d2b+0xac>)
 800a4bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4c0:	f000 f8f2 	bl	800a6a8 <__assert_func>
 800a4c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4cc:	b10d      	cbz	r5, 800a4d2 <__d2b+0x32>
 800a4ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a4d8:	d023      	beq.n	800a522 <__d2b+0x82>
 800a4da:	4668      	mov	r0, sp
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	f7ff fd7c 	bl	8009fda <__lo0bits>
 800a4e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4e6:	b1d0      	cbz	r0, 800a51e <__d2b+0x7e>
 800a4e8:	f1c0 0320 	rsb	r3, r0, #32
 800a4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	40c2      	lsrs	r2, r0
 800a4f4:	6163      	str	r3, [r4, #20]
 800a4f6:	9201      	str	r2, [sp, #4]
 800a4f8:	9b01      	ldr	r3, [sp, #4]
 800a4fa:	61a3      	str	r3, [r4, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bf0c      	ite	eq
 800a500:	2201      	moveq	r2, #1
 800a502:	2202      	movne	r2, #2
 800a504:	6122      	str	r2, [r4, #16]
 800a506:	b1a5      	cbz	r5, 800a532 <__d2b+0x92>
 800a508:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a50c:	4405      	add	r5, r0
 800a50e:	603d      	str	r5, [r7, #0]
 800a510:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a514:	6030      	str	r0, [r6, #0]
 800a516:	4620      	mov	r0, r4
 800a518:	b003      	add	sp, #12
 800a51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a51e:	6161      	str	r1, [r4, #20]
 800a520:	e7ea      	b.n	800a4f8 <__d2b+0x58>
 800a522:	a801      	add	r0, sp, #4
 800a524:	f7ff fd59 	bl	8009fda <__lo0bits>
 800a528:	9b01      	ldr	r3, [sp, #4]
 800a52a:	6163      	str	r3, [r4, #20]
 800a52c:	3020      	adds	r0, #32
 800a52e:	2201      	movs	r2, #1
 800a530:	e7e8      	b.n	800a504 <__d2b+0x64>
 800a532:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a536:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a53a:	6038      	str	r0, [r7, #0]
 800a53c:	6918      	ldr	r0, [r3, #16]
 800a53e:	f7ff fd2d 	bl	8009f9c <__hi0bits>
 800a542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a546:	e7e5      	b.n	800a514 <__d2b+0x74>
 800a548:	08067bfa 	.word	0x08067bfa
 800a54c:	08067c0b 	.word	0x08067c0b

0800a550 <__sflush_r>:
 800a550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	0716      	lsls	r6, r2, #28
 800a55a:	4605      	mov	r5, r0
 800a55c:	460c      	mov	r4, r1
 800a55e:	d454      	bmi.n	800a60a <__sflush_r+0xba>
 800a560:	684b      	ldr	r3, [r1, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	dc02      	bgt.n	800a56c <__sflush_r+0x1c>
 800a566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dd48      	ble.n	800a5fe <__sflush_r+0xae>
 800a56c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a56e:	2e00      	cmp	r6, #0
 800a570:	d045      	beq.n	800a5fe <__sflush_r+0xae>
 800a572:	2300      	movs	r3, #0
 800a574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a578:	682f      	ldr	r7, [r5, #0]
 800a57a:	6a21      	ldr	r1, [r4, #32]
 800a57c:	602b      	str	r3, [r5, #0]
 800a57e:	d030      	beq.n	800a5e2 <__sflush_r+0x92>
 800a580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	0759      	lsls	r1, r3, #29
 800a586:	d505      	bpl.n	800a594 <__sflush_r+0x44>
 800a588:	6863      	ldr	r3, [r4, #4]
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a58e:	b10b      	cbz	r3, 800a594 <__sflush_r+0x44>
 800a590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	2300      	movs	r3, #0
 800a596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a598:	6a21      	ldr	r1, [r4, #32]
 800a59a:	4628      	mov	r0, r5
 800a59c:	47b0      	blx	r6
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	d106      	bne.n	800a5b2 <__sflush_r+0x62>
 800a5a4:	6829      	ldr	r1, [r5, #0]
 800a5a6:	291d      	cmp	r1, #29
 800a5a8:	d82b      	bhi.n	800a602 <__sflush_r+0xb2>
 800a5aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a654 <__sflush_r+0x104>)
 800a5ac:	410a      	asrs	r2, r1
 800a5ae:	07d6      	lsls	r6, r2, #31
 800a5b0:	d427      	bmi.n	800a602 <__sflush_r+0xb2>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	6062      	str	r2, [r4, #4]
 800a5b6:	04d9      	lsls	r1, r3, #19
 800a5b8:	6922      	ldr	r2, [r4, #16]
 800a5ba:	6022      	str	r2, [r4, #0]
 800a5bc:	d504      	bpl.n	800a5c8 <__sflush_r+0x78>
 800a5be:	1c42      	adds	r2, r0, #1
 800a5c0:	d101      	bne.n	800a5c6 <__sflush_r+0x76>
 800a5c2:	682b      	ldr	r3, [r5, #0]
 800a5c4:	b903      	cbnz	r3, 800a5c8 <__sflush_r+0x78>
 800a5c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5ca:	602f      	str	r7, [r5, #0]
 800a5cc:	b1b9      	cbz	r1, 800a5fe <__sflush_r+0xae>
 800a5ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5d2:	4299      	cmp	r1, r3
 800a5d4:	d002      	beq.n	800a5dc <__sflush_r+0x8c>
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f7ff fbee 	bl	8009db8 <_free_r>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5e0:	e00d      	b.n	800a5fe <__sflush_r+0xae>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b0      	blx	r6
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	1c50      	adds	r0, r2, #1
 800a5ec:	d1c9      	bne.n	800a582 <__sflush_r+0x32>
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0c6      	beq.n	800a582 <__sflush_r+0x32>
 800a5f4:	2b1d      	cmp	r3, #29
 800a5f6:	d001      	beq.n	800a5fc <__sflush_r+0xac>
 800a5f8:	2b16      	cmp	r3, #22
 800a5fa:	d11e      	bne.n	800a63a <__sflush_r+0xea>
 800a5fc:	602f      	str	r7, [r5, #0]
 800a5fe:	2000      	movs	r0, #0
 800a600:	e022      	b.n	800a648 <__sflush_r+0xf8>
 800a602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a606:	b21b      	sxth	r3, r3
 800a608:	e01b      	b.n	800a642 <__sflush_r+0xf2>
 800a60a:	690f      	ldr	r7, [r1, #16]
 800a60c:	2f00      	cmp	r7, #0
 800a60e:	d0f6      	beq.n	800a5fe <__sflush_r+0xae>
 800a610:	0793      	lsls	r3, r2, #30
 800a612:	680e      	ldr	r6, [r1, #0]
 800a614:	bf08      	it	eq
 800a616:	694b      	ldreq	r3, [r1, #20]
 800a618:	600f      	str	r7, [r1, #0]
 800a61a:	bf18      	it	ne
 800a61c:	2300      	movne	r3, #0
 800a61e:	eba6 0807 	sub.w	r8, r6, r7
 800a622:	608b      	str	r3, [r1, #8]
 800a624:	f1b8 0f00 	cmp.w	r8, #0
 800a628:	dde9      	ble.n	800a5fe <__sflush_r+0xae>
 800a62a:	6a21      	ldr	r1, [r4, #32]
 800a62c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a62e:	4643      	mov	r3, r8
 800a630:	463a      	mov	r2, r7
 800a632:	4628      	mov	r0, r5
 800a634:	47b0      	blx	r6
 800a636:	2800      	cmp	r0, #0
 800a638:	dc08      	bgt.n	800a64c <__sflush_r+0xfc>
 800a63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	4407      	add	r7, r0
 800a64e:	eba8 0800 	sub.w	r8, r8, r0
 800a652:	e7e7      	b.n	800a624 <__sflush_r+0xd4>
 800a654:	dfbffffe 	.word	0xdfbffffe

0800a658 <_fflush_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	690b      	ldr	r3, [r1, #16]
 800a65c:	4605      	mov	r5, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	b913      	cbnz	r3, 800a668 <_fflush_r+0x10>
 800a662:	2500      	movs	r5, #0
 800a664:	4628      	mov	r0, r5
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	b118      	cbz	r0, 800a672 <_fflush_r+0x1a>
 800a66a:	6a03      	ldr	r3, [r0, #32]
 800a66c:	b90b      	cbnz	r3, 800a672 <_fflush_r+0x1a>
 800a66e:	f7fe fc2b 	bl	8008ec8 <__sinit>
 800a672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0f3      	beq.n	800a662 <_fflush_r+0xa>
 800a67a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a67c:	07d0      	lsls	r0, r2, #31
 800a67e:	d404      	bmi.n	800a68a <_fflush_r+0x32>
 800a680:	0599      	lsls	r1, r3, #22
 800a682:	d402      	bmi.n	800a68a <_fflush_r+0x32>
 800a684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a686:	f7fe fd38 	bl	80090fa <__retarget_lock_acquire_recursive>
 800a68a:	4628      	mov	r0, r5
 800a68c:	4621      	mov	r1, r4
 800a68e:	f7ff ff5f 	bl	800a550 <__sflush_r>
 800a692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a694:	07da      	lsls	r2, r3, #31
 800a696:	4605      	mov	r5, r0
 800a698:	d4e4      	bmi.n	800a664 <_fflush_r+0xc>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	059b      	lsls	r3, r3, #22
 800a69e:	d4e1      	bmi.n	800a664 <_fflush_r+0xc>
 800a6a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6a2:	f7fe fd2b 	bl	80090fc <__retarget_lock_release_recursive>
 800a6a6:	e7dd      	b.n	800a664 <_fflush_r+0xc>

0800a6a8 <__assert_func>:
 800a6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4b09      	ldr	r3, [pc, #36]	@ (800a6d4 <__assert_func+0x2c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	68d8      	ldr	r0, [r3, #12]
 800a6b6:	b954      	cbnz	r4, 800a6ce <__assert_func+0x26>
 800a6b8:	4b07      	ldr	r3, [pc, #28]	@ (800a6d8 <__assert_func+0x30>)
 800a6ba:	461c      	mov	r4, r3
 800a6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6c0:	9100      	str	r1, [sp, #0]
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	4905      	ldr	r1, [pc, #20]	@ (800a6dc <__assert_func+0x34>)
 800a6c6:	f000 f841 	bl	800a74c <fiprintf>
 800a6ca:	f000 f851 	bl	800a770 <abort>
 800a6ce:	4b04      	ldr	r3, [pc, #16]	@ (800a6e0 <__assert_func+0x38>)
 800a6d0:	e7f4      	b.n	800a6bc <__assert_func+0x14>
 800a6d2:	bf00      	nop
 800a6d4:	200009f4 	.word	0x200009f4
 800a6d8:	08067da5 	.word	0x08067da5
 800a6dc:	08067d77 	.word	0x08067d77
 800a6e0:	08067d6a 	.word	0x08067d6a

0800a6e4 <_calloc_r>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	fba1 5402 	umull	r5, r4, r1, r2
 800a6ea:	b93c      	cbnz	r4, 800a6fc <_calloc_r+0x18>
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	f7fd fe7b 	bl	80083e8 <_malloc_r>
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	b928      	cbnz	r0, 800a702 <_calloc_r+0x1e>
 800a6f6:	2600      	movs	r6, #0
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
 800a6fc:	220c      	movs	r2, #12
 800a6fe:	6002      	str	r2, [r0, #0]
 800a700:	e7f9      	b.n	800a6f6 <_calloc_r+0x12>
 800a702:	462a      	mov	r2, r5
 800a704:	4621      	mov	r1, r4
 800a706:	f7fe fc58 	bl	8008fba <memset>
 800a70a:	e7f5      	b.n	800a6f8 <_calloc_r+0x14>

0800a70c <__ascii_mbtowc>:
 800a70c:	b082      	sub	sp, #8
 800a70e:	b901      	cbnz	r1, 800a712 <__ascii_mbtowc+0x6>
 800a710:	a901      	add	r1, sp, #4
 800a712:	b142      	cbz	r2, 800a726 <__ascii_mbtowc+0x1a>
 800a714:	b14b      	cbz	r3, 800a72a <__ascii_mbtowc+0x1e>
 800a716:	7813      	ldrb	r3, [r2, #0]
 800a718:	600b      	str	r3, [r1, #0]
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	1e10      	subs	r0, r2, #0
 800a71e:	bf18      	it	ne
 800a720:	2001      	movne	r0, #1
 800a722:	b002      	add	sp, #8
 800a724:	4770      	bx	lr
 800a726:	4610      	mov	r0, r2
 800a728:	e7fb      	b.n	800a722 <__ascii_mbtowc+0x16>
 800a72a:	f06f 0001 	mvn.w	r0, #1
 800a72e:	e7f8      	b.n	800a722 <__ascii_mbtowc+0x16>

0800a730 <__ascii_wctomb>:
 800a730:	4603      	mov	r3, r0
 800a732:	4608      	mov	r0, r1
 800a734:	b141      	cbz	r1, 800a748 <__ascii_wctomb+0x18>
 800a736:	2aff      	cmp	r2, #255	@ 0xff
 800a738:	d904      	bls.n	800a744 <__ascii_wctomb+0x14>
 800a73a:	228a      	movs	r2, #138	@ 0x8a
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	f04f 30ff 	mov.w	r0, #4294967295
 800a742:	4770      	bx	lr
 800a744:	700a      	strb	r2, [r1, #0]
 800a746:	2001      	movs	r0, #1
 800a748:	4770      	bx	lr
	...

0800a74c <fiprintf>:
 800a74c:	b40e      	push	{r1, r2, r3}
 800a74e:	b503      	push	{r0, r1, lr}
 800a750:	4601      	mov	r1, r0
 800a752:	ab03      	add	r3, sp, #12
 800a754:	4805      	ldr	r0, [pc, #20]	@ (800a76c <fiprintf+0x20>)
 800a756:	f853 2b04 	ldr.w	r2, [r3], #4
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	f000 f837 	bl	800a7d0 <_vfiprintf_r>
 800a762:	b002      	add	sp, #8
 800a764:	f85d eb04 	ldr.w	lr, [sp], #4
 800a768:	b003      	add	sp, #12
 800a76a:	4770      	bx	lr
 800a76c:	200009f4 	.word	0x200009f4

0800a770 <abort>:
 800a770:	b508      	push	{r3, lr}
 800a772:	2006      	movs	r0, #6
 800a774:	f000 fa00 	bl	800ab78 <raise>
 800a778:	2001      	movs	r0, #1
 800a77a:	f000 fc09 	bl	800af90 <_exit>

0800a77e <__sfputc_r>:
 800a77e:	6893      	ldr	r3, [r2, #8]
 800a780:	3b01      	subs	r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	b410      	push	{r4}
 800a786:	6093      	str	r3, [r2, #8]
 800a788:	da08      	bge.n	800a79c <__sfputc_r+0x1e>
 800a78a:	6994      	ldr	r4, [r2, #24]
 800a78c:	42a3      	cmp	r3, r4
 800a78e:	db01      	blt.n	800a794 <__sfputc_r+0x16>
 800a790:	290a      	cmp	r1, #10
 800a792:	d103      	bne.n	800a79c <__sfputc_r+0x1e>
 800a794:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a798:	f000 b932 	b.w	800aa00 <__swbuf_r>
 800a79c:	6813      	ldr	r3, [r2, #0]
 800a79e:	1c58      	adds	r0, r3, #1
 800a7a0:	6010      	str	r0, [r2, #0]
 800a7a2:	7019      	strb	r1, [r3, #0]
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <__sfputs_r>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	460f      	mov	r7, r1
 800a7b2:	4614      	mov	r4, r2
 800a7b4:	18d5      	adds	r5, r2, r3
 800a7b6:	42ac      	cmp	r4, r5
 800a7b8:	d101      	bne.n	800a7be <__sfputs_r+0x12>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e007      	b.n	800a7ce <__sfputs_r+0x22>
 800a7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c2:	463a      	mov	r2, r7
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff ffda 	bl	800a77e <__sfputc_r>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d1f3      	bne.n	800a7b6 <__sfputs_r+0xa>
 800a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7d0 <_vfiprintf_r>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	b09d      	sub	sp, #116	@ 0x74
 800a7d8:	4614      	mov	r4, r2
 800a7da:	4698      	mov	r8, r3
 800a7dc:	4606      	mov	r6, r0
 800a7de:	b118      	cbz	r0, 800a7e8 <_vfiprintf_r+0x18>
 800a7e0:	6a03      	ldr	r3, [r0, #32]
 800a7e2:	b90b      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x18>
 800a7e4:	f7fe fb70 	bl	8008ec8 <__sinit>
 800a7e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7ea:	07d9      	lsls	r1, r3, #31
 800a7ec:	d405      	bmi.n	800a7fa <_vfiprintf_r+0x2a>
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	059a      	lsls	r2, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_vfiprintf_r+0x2a>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7f6:	f7fe fc80 	bl	80090fa <__retarget_lock_acquire_recursive>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	071b      	lsls	r3, r3, #28
 800a7fe:	d501      	bpl.n	800a804 <_vfiprintf_r+0x34>
 800a800:	692b      	ldr	r3, [r5, #16]
 800a802:	b99b      	cbnz	r3, 800a82c <_vfiprintf_r+0x5c>
 800a804:	4629      	mov	r1, r5
 800a806:	4630      	mov	r0, r6
 800a808:	f000 f938 	bl	800aa7c <__swsetup_r>
 800a80c:	b170      	cbz	r0, 800a82c <_vfiprintf_r+0x5c>
 800a80e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a810:	07dc      	lsls	r4, r3, #31
 800a812:	d504      	bpl.n	800a81e <_vfiprintf_r+0x4e>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b01d      	add	sp, #116	@ 0x74
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	0598      	lsls	r0, r3, #22
 800a822:	d4f7      	bmi.n	800a814 <_vfiprintf_r+0x44>
 800a824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a826:	f7fe fc69 	bl	80090fc <__retarget_lock_release_recursive>
 800a82a:	e7f3      	b.n	800a814 <_vfiprintf_r+0x44>
 800a82c:	2300      	movs	r3, #0
 800a82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a830:	2320      	movs	r3, #32
 800a832:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a836:	f8cd 800c 	str.w	r8, [sp, #12]
 800a83a:	2330      	movs	r3, #48	@ 0x30
 800a83c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9ec <_vfiprintf_r+0x21c>
 800a840:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a844:	f04f 0901 	mov.w	r9, #1
 800a848:	4623      	mov	r3, r4
 800a84a:	469a      	mov	sl, r3
 800a84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a850:	b10a      	cbz	r2, 800a856 <_vfiprintf_r+0x86>
 800a852:	2a25      	cmp	r2, #37	@ 0x25
 800a854:	d1f9      	bne.n	800a84a <_vfiprintf_r+0x7a>
 800a856:	ebba 0b04 	subs.w	fp, sl, r4
 800a85a:	d00b      	beq.n	800a874 <_vfiprintf_r+0xa4>
 800a85c:	465b      	mov	r3, fp
 800a85e:	4622      	mov	r2, r4
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ffa2 	bl	800a7ac <__sfputs_r>
 800a868:	3001      	adds	r0, #1
 800a86a:	f000 80a7 	beq.w	800a9bc <_vfiprintf_r+0x1ec>
 800a86e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a870:	445a      	add	r2, fp
 800a872:	9209      	str	r2, [sp, #36]	@ 0x24
 800a874:	f89a 3000 	ldrb.w	r3, [sl]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 809f 	beq.w	800a9bc <_vfiprintf_r+0x1ec>
 800a87e:	2300      	movs	r3, #0
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a888:	f10a 0a01 	add.w	sl, sl, #1
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a894:	931a      	str	r3, [sp, #104]	@ 0x68
 800a896:	4654      	mov	r4, sl
 800a898:	2205      	movs	r2, #5
 800a89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89e:	4853      	ldr	r0, [pc, #332]	@ (800a9ec <_vfiprintf_r+0x21c>)
 800a8a0:	f7f5 fc9e 	bl	80001e0 <memchr>
 800a8a4:	9a04      	ldr	r2, [sp, #16]
 800a8a6:	b9d8      	cbnz	r0, 800a8e0 <_vfiprintf_r+0x110>
 800a8a8:	06d1      	lsls	r1, r2, #27
 800a8aa:	bf44      	itt	mi
 800a8ac:	2320      	movmi	r3, #32
 800a8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b2:	0713      	lsls	r3, r2, #28
 800a8b4:	bf44      	itt	mi
 800a8b6:	232b      	movmi	r3, #43	@ 0x2b
 800a8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8c2:	d015      	beq.n	800a8f0 <_vfiprintf_r+0x120>
 800a8c4:	9a07      	ldr	r2, [sp, #28]
 800a8c6:	4654      	mov	r4, sl
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	f04f 0c0a 	mov.w	ip, #10
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d4:	3b30      	subs	r3, #48	@ 0x30
 800a8d6:	2b09      	cmp	r3, #9
 800a8d8:	d94b      	bls.n	800a972 <_vfiprintf_r+0x1a2>
 800a8da:	b1b0      	cbz	r0, 800a90a <_vfiprintf_r+0x13a>
 800a8dc:	9207      	str	r2, [sp, #28]
 800a8de:	e014      	b.n	800a90a <_vfiprintf_r+0x13a>
 800a8e0:	eba0 0308 	sub.w	r3, r0, r8
 800a8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	46a2      	mov	sl, r4
 800a8ee:	e7d2      	b.n	800a896 <_vfiprintf_r+0xc6>
 800a8f0:	9b03      	ldr	r3, [sp, #12]
 800a8f2:	1d19      	adds	r1, r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	9103      	str	r1, [sp, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bfbb      	ittet	lt
 800a8fc:	425b      	neglt	r3, r3
 800a8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a902:	9307      	strge	r3, [sp, #28]
 800a904:	9307      	strlt	r3, [sp, #28]
 800a906:	bfb8      	it	lt
 800a908:	9204      	strlt	r2, [sp, #16]
 800a90a:	7823      	ldrb	r3, [r4, #0]
 800a90c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a90e:	d10a      	bne.n	800a926 <_vfiprintf_r+0x156>
 800a910:	7863      	ldrb	r3, [r4, #1]
 800a912:	2b2a      	cmp	r3, #42	@ 0x2a
 800a914:	d132      	bne.n	800a97c <_vfiprintf_r+0x1ac>
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	1d1a      	adds	r2, r3, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	9203      	str	r2, [sp, #12]
 800a91e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a922:	3402      	adds	r4, #2
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9fc <_vfiprintf_r+0x22c>
 800a92a:	7821      	ldrb	r1, [r4, #0]
 800a92c:	2203      	movs	r2, #3
 800a92e:	4650      	mov	r0, sl
 800a930:	f7f5 fc56 	bl	80001e0 <memchr>
 800a934:	b138      	cbz	r0, 800a946 <_vfiprintf_r+0x176>
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	eba0 000a 	sub.w	r0, r0, sl
 800a93c:	2240      	movs	r2, #64	@ 0x40
 800a93e:	4082      	lsls	r2, r0
 800a940:	4313      	orrs	r3, r2
 800a942:	3401      	adds	r4, #1
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94a:	4829      	ldr	r0, [pc, #164]	@ (800a9f0 <_vfiprintf_r+0x220>)
 800a94c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a950:	2206      	movs	r2, #6
 800a952:	f7f5 fc45 	bl	80001e0 <memchr>
 800a956:	2800      	cmp	r0, #0
 800a958:	d03f      	beq.n	800a9da <_vfiprintf_r+0x20a>
 800a95a:	4b26      	ldr	r3, [pc, #152]	@ (800a9f4 <_vfiprintf_r+0x224>)
 800a95c:	bb1b      	cbnz	r3, 800a9a6 <_vfiprintf_r+0x1d6>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	3307      	adds	r3, #7
 800a962:	f023 0307 	bic.w	r3, r3, #7
 800a966:	3308      	adds	r3, #8
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a96c:	443b      	add	r3, r7
 800a96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a970:	e76a      	b.n	800a848 <_vfiprintf_r+0x78>
 800a972:	fb0c 3202 	mla	r2, ip, r2, r3
 800a976:	460c      	mov	r4, r1
 800a978:	2001      	movs	r0, #1
 800a97a:	e7a8      	b.n	800a8ce <_vfiprintf_r+0xfe>
 800a97c:	2300      	movs	r3, #0
 800a97e:	3401      	adds	r4, #1
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	4619      	mov	r1, r3
 800a984:	f04f 0c0a 	mov.w	ip, #10
 800a988:	4620      	mov	r0, r4
 800a98a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98e:	3a30      	subs	r2, #48	@ 0x30
 800a990:	2a09      	cmp	r2, #9
 800a992:	d903      	bls.n	800a99c <_vfiprintf_r+0x1cc>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0c6      	beq.n	800a926 <_vfiprintf_r+0x156>
 800a998:	9105      	str	r1, [sp, #20]
 800a99a:	e7c4      	b.n	800a926 <_vfiprintf_r+0x156>
 800a99c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e7f0      	b.n	800a988 <_vfiprintf_r+0x1b8>
 800a9a6:	ab03      	add	r3, sp, #12
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4b12      	ldr	r3, [pc, #72]	@ (800a9f8 <_vfiprintf_r+0x228>)
 800a9ae:	a904      	add	r1, sp, #16
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7fd fe45 	bl	8008640 <_printf_float>
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	1c78      	adds	r0, r7, #1
 800a9ba:	d1d6      	bne.n	800a96a <_vfiprintf_r+0x19a>
 800a9bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9be:	07d9      	lsls	r1, r3, #31
 800a9c0:	d405      	bmi.n	800a9ce <_vfiprintf_r+0x1fe>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	059a      	lsls	r2, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_vfiprintf_r+0x1fe>
 800a9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ca:	f7fe fb97 	bl	80090fc <__retarget_lock_release_recursive>
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	065b      	lsls	r3, r3, #25
 800a9d2:	f53f af1f 	bmi.w	800a814 <_vfiprintf_r+0x44>
 800a9d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9d8:	e71e      	b.n	800a818 <_vfiprintf_r+0x48>
 800a9da:	ab03      	add	r3, sp, #12
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	462a      	mov	r2, r5
 800a9e0:	4b05      	ldr	r3, [pc, #20]	@ (800a9f8 <_vfiprintf_r+0x228>)
 800a9e2:	a904      	add	r1, sp, #16
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7fe f8c3 	bl	8008b70 <_printf_i>
 800a9ea:	e7e4      	b.n	800a9b6 <_vfiprintf_r+0x1e6>
 800a9ec:	08067ea7 	.word	0x08067ea7
 800a9f0:	08067eb1 	.word	0x08067eb1
 800a9f4:	08008641 	.word	0x08008641
 800a9f8:	0800a7ad 	.word	0x0800a7ad
 800a9fc:	08067ead 	.word	0x08067ead

0800aa00 <__swbuf_r>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	460e      	mov	r6, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	4605      	mov	r5, r0
 800aa08:	b118      	cbz	r0, 800aa12 <__swbuf_r+0x12>
 800aa0a:	6a03      	ldr	r3, [r0, #32]
 800aa0c:	b90b      	cbnz	r3, 800aa12 <__swbuf_r+0x12>
 800aa0e:	f7fe fa5b 	bl	8008ec8 <__sinit>
 800aa12:	69a3      	ldr	r3, [r4, #24]
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	071a      	lsls	r2, r3, #28
 800aa1a:	d501      	bpl.n	800aa20 <__swbuf_r+0x20>
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	b943      	cbnz	r3, 800aa32 <__swbuf_r+0x32>
 800aa20:	4621      	mov	r1, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 f82a 	bl	800aa7c <__swsetup_r>
 800aa28:	b118      	cbz	r0, 800aa32 <__swbuf_r+0x32>
 800aa2a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa2e:	4638      	mov	r0, r7
 800aa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	6922      	ldr	r2, [r4, #16]
 800aa36:	1a98      	subs	r0, r3, r2
 800aa38:	6963      	ldr	r3, [r4, #20]
 800aa3a:	b2f6      	uxtb	r6, r6
 800aa3c:	4283      	cmp	r3, r0
 800aa3e:	4637      	mov	r7, r6
 800aa40:	dc05      	bgt.n	800aa4e <__swbuf_r+0x4e>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f7ff fe07 	bl	800a658 <_fflush_r>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d1ed      	bne.n	800aa2a <__swbuf_r+0x2a>
 800aa4e:	68a3      	ldr	r3, [r4, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	60a3      	str	r3, [r4, #8]
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	6022      	str	r2, [r4, #0]
 800aa5a:	701e      	strb	r6, [r3, #0]
 800aa5c:	6962      	ldr	r2, [r4, #20]
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d004      	beq.n	800aa6e <__swbuf_r+0x6e>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	07db      	lsls	r3, r3, #31
 800aa68:	d5e1      	bpl.n	800aa2e <__swbuf_r+0x2e>
 800aa6a:	2e0a      	cmp	r6, #10
 800aa6c:	d1df      	bne.n	800aa2e <__swbuf_r+0x2e>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f7ff fdf1 	bl	800a658 <_fflush_r>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d0d9      	beq.n	800aa2e <__swbuf_r+0x2e>
 800aa7a:	e7d6      	b.n	800aa2a <__swbuf_r+0x2a>

0800aa7c <__swsetup_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4b29      	ldr	r3, [pc, #164]	@ (800ab24 <__swsetup_r+0xa8>)
 800aa80:	4605      	mov	r5, r0
 800aa82:	6818      	ldr	r0, [r3, #0]
 800aa84:	460c      	mov	r4, r1
 800aa86:	b118      	cbz	r0, 800aa90 <__swsetup_r+0x14>
 800aa88:	6a03      	ldr	r3, [r0, #32]
 800aa8a:	b90b      	cbnz	r3, 800aa90 <__swsetup_r+0x14>
 800aa8c:	f7fe fa1c 	bl	8008ec8 <__sinit>
 800aa90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa94:	0719      	lsls	r1, r3, #28
 800aa96:	d422      	bmi.n	800aade <__swsetup_r+0x62>
 800aa98:	06da      	lsls	r2, r3, #27
 800aa9a:	d407      	bmi.n	800aaac <__swsetup_r+0x30>
 800aa9c:	2209      	movs	r2, #9
 800aa9e:	602a      	str	r2, [r5, #0]
 800aaa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	e033      	b.n	800ab14 <__swsetup_r+0x98>
 800aaac:	0758      	lsls	r0, r3, #29
 800aaae:	d512      	bpl.n	800aad6 <__swsetup_r+0x5a>
 800aab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aab2:	b141      	cbz	r1, 800aac6 <__swsetup_r+0x4a>
 800aab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aab8:	4299      	cmp	r1, r3
 800aaba:	d002      	beq.n	800aac2 <__swsetup_r+0x46>
 800aabc:	4628      	mov	r0, r5
 800aabe:	f7ff f97b 	bl	8009db8 <_free_r>
 800aac2:	2300      	movs	r3, #0
 800aac4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	2300      	movs	r3, #0
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f043 0308 	orr.w	r3, r3, #8
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	b94b      	cbnz	r3, 800aaf6 <__swsetup_r+0x7a>
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaec:	d003      	beq.n	800aaf6 <__swsetup_r+0x7a>
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f000 f883 	bl	800abfc <__smakebuf_r>
 800aaf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aafa:	f013 0201 	ands.w	r2, r3, #1
 800aafe:	d00a      	beq.n	800ab16 <__swsetup_r+0x9a>
 800ab00:	2200      	movs	r2, #0
 800ab02:	60a2      	str	r2, [r4, #8]
 800ab04:	6962      	ldr	r2, [r4, #20]
 800ab06:	4252      	negs	r2, r2
 800ab08:	61a2      	str	r2, [r4, #24]
 800ab0a:	6922      	ldr	r2, [r4, #16]
 800ab0c:	b942      	cbnz	r2, 800ab20 <__swsetup_r+0xa4>
 800ab0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab12:	d1c5      	bne.n	800aaa0 <__swsetup_r+0x24>
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	0799      	lsls	r1, r3, #30
 800ab18:	bf58      	it	pl
 800ab1a:	6962      	ldrpl	r2, [r4, #20]
 800ab1c:	60a2      	str	r2, [r4, #8]
 800ab1e:	e7f4      	b.n	800ab0a <__swsetup_r+0x8e>
 800ab20:	2000      	movs	r0, #0
 800ab22:	e7f7      	b.n	800ab14 <__swsetup_r+0x98>
 800ab24:	200009f4 	.word	0x200009f4

0800ab28 <_raise_r>:
 800ab28:	291f      	cmp	r1, #31
 800ab2a:	b538      	push	{r3, r4, r5, lr}
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	d904      	bls.n	800ab3c <_raise_r+0x14>
 800ab32:	2316      	movs	r3, #22
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab3e:	b112      	cbz	r2, 800ab46 <_raise_r+0x1e>
 800ab40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab44:	b94b      	cbnz	r3, 800ab5a <_raise_r+0x32>
 800ab46:	4628      	mov	r0, r5
 800ab48:	f000 f830 	bl	800abac <_getpid_r>
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	4601      	mov	r1, r0
 800ab50:	4628      	mov	r0, r5
 800ab52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab56:	f000 b817 	b.w	800ab88 <_kill_r>
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d00a      	beq.n	800ab74 <_raise_r+0x4c>
 800ab5e:	1c59      	adds	r1, r3, #1
 800ab60:	d103      	bne.n	800ab6a <_raise_r+0x42>
 800ab62:	2316      	movs	r3, #22
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	2001      	movs	r0, #1
 800ab68:	e7e7      	b.n	800ab3a <_raise_r+0x12>
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab70:	4620      	mov	r0, r4
 800ab72:	4798      	blx	r3
 800ab74:	2000      	movs	r0, #0
 800ab76:	e7e0      	b.n	800ab3a <_raise_r+0x12>

0800ab78 <raise>:
 800ab78:	4b02      	ldr	r3, [pc, #8]	@ (800ab84 <raise+0xc>)
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f7ff bfd3 	b.w	800ab28 <_raise_r>
 800ab82:	bf00      	nop
 800ab84:	200009f4 	.word	0x200009f4

0800ab88 <_kill_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d07      	ldr	r5, [pc, #28]	@ (800aba8 <_kill_r+0x20>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	602b      	str	r3, [r5, #0]
 800ab96:	f000 f9e3 	bl	800af60 <_kill>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d102      	bne.n	800aba4 <_kill_r+0x1c>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	b103      	cbz	r3, 800aba4 <_kill_r+0x1c>
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	bd38      	pop	{r3, r4, r5, pc}
 800aba6:	bf00      	nop
 800aba8:	20007650 	.word	0x20007650

0800abac <_getpid_r>:
 800abac:	f000 b9c8 	b.w	800af40 <_getpid>

0800abb0 <__swhatbuf_r>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	460c      	mov	r4, r1
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2900      	cmp	r1, #0
 800abba:	b096      	sub	sp, #88	@ 0x58
 800abbc:	4615      	mov	r5, r2
 800abbe:	461e      	mov	r6, r3
 800abc0:	da0d      	bge.n	800abde <__swhatbuf_r+0x2e>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abc8:	f04f 0100 	mov.w	r1, #0
 800abcc:	bf14      	ite	ne
 800abce:	2340      	movne	r3, #64	@ 0x40
 800abd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abd4:	2000      	movs	r0, #0
 800abd6:	6031      	str	r1, [r6, #0]
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	b016      	add	sp, #88	@ 0x58
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
 800abde:	466a      	mov	r2, sp
 800abe0:	f000 f848 	bl	800ac74 <_fstat_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	dbec      	blt.n	800abc2 <__swhatbuf_r+0x12>
 800abe8:	9901      	ldr	r1, [sp, #4]
 800abea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abf2:	4259      	negs	r1, r3
 800abf4:	4159      	adcs	r1, r3
 800abf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abfa:	e7eb      	b.n	800abd4 <__swhatbuf_r+0x24>

0800abfc <__smakebuf_r>:
 800abfc:	898b      	ldrh	r3, [r1, #12]
 800abfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac00:	079d      	lsls	r5, r3, #30
 800ac02:	4606      	mov	r6, r0
 800ac04:	460c      	mov	r4, r1
 800ac06:	d507      	bpl.n	800ac18 <__smakebuf_r+0x1c>
 800ac08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	6123      	str	r3, [r4, #16]
 800ac10:	2301      	movs	r3, #1
 800ac12:	6163      	str	r3, [r4, #20]
 800ac14:	b003      	add	sp, #12
 800ac16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac18:	ab01      	add	r3, sp, #4
 800ac1a:	466a      	mov	r2, sp
 800ac1c:	f7ff ffc8 	bl	800abb0 <__swhatbuf_r>
 800ac20:	9f00      	ldr	r7, [sp, #0]
 800ac22:	4605      	mov	r5, r0
 800ac24:	4639      	mov	r1, r7
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7fd fbde 	bl	80083e8 <_malloc_r>
 800ac2c:	b948      	cbnz	r0, 800ac42 <__smakebuf_r+0x46>
 800ac2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac32:	059a      	lsls	r2, r3, #22
 800ac34:	d4ee      	bmi.n	800ac14 <__smakebuf_r+0x18>
 800ac36:	f023 0303 	bic.w	r3, r3, #3
 800ac3a:	f043 0302 	orr.w	r3, r3, #2
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	e7e2      	b.n	800ac08 <__smakebuf_r+0xc>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	6020      	str	r0, [r4, #0]
 800ac46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac4a:	81a3      	strh	r3, [r4, #12]
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac52:	b15b      	cbz	r3, 800ac6c <__smakebuf_r+0x70>
 800ac54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 f81d 	bl	800ac98 <_isatty_r>
 800ac5e:	b128      	cbz	r0, 800ac6c <__smakebuf_r+0x70>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	f023 0303 	bic.w	r3, r3, #3
 800ac66:	f043 0301 	orr.w	r3, r3, #1
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	431d      	orrs	r5, r3
 800ac70:	81a5      	strh	r5, [r4, #12]
 800ac72:	e7cf      	b.n	800ac14 <__smakebuf_r+0x18>

0800ac74 <_fstat_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	@ (800ac94 <_fstat_r+0x20>)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4608      	mov	r0, r1
 800ac7e:	4611      	mov	r1, r2
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f000 f955 	bl	800af30 <_fstat>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d102      	bne.n	800ac90 <_fstat_r+0x1c>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b103      	cbz	r3, 800ac90 <_fstat_r+0x1c>
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	bd38      	pop	{r3, r4, r5, pc}
 800ac92:	bf00      	nop
 800ac94:	20007650 	.word	0x20007650

0800ac98 <_isatty_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d06      	ldr	r5, [pc, #24]	@ (800acb4 <_isatty_r+0x1c>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	602b      	str	r3, [r5, #0]
 800aca4:	f000 f954 	bl	800af50 <_isatty>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d102      	bne.n	800acb2 <_isatty_r+0x1a>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	b103      	cbz	r3, 800acb2 <_isatty_r+0x1a>
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	20007650 	.word	0x20007650

0800acb8 <expf>:
 800acb8:	b508      	push	{r3, lr}
 800acba:	ed2d 8b02 	vpush	{d8}
 800acbe:	eef0 8a40 	vmov.f32	s17, s0
 800acc2:	f000 f85f 	bl	800ad84 <__ieee754_expf>
 800acc6:	eeb0 8a40 	vmov.f32	s16, s0
 800acca:	eeb0 0a68 	vmov.f32	s0, s17
 800acce:	f000 f829 	bl	800ad24 <finitef>
 800acd2:	b160      	cbz	r0, 800acee <expf+0x36>
 800acd4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800ad14 <expf+0x5c>
 800acd8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800acdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace0:	dd0a      	ble.n	800acf8 <expf+0x40>
 800ace2:	f7fe f9df 	bl	80090a4 <__errno>
 800ace6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800ad18 <expf+0x60>
 800acea:	2322      	movs	r3, #34	@ 0x22
 800acec:	6003      	str	r3, [r0, #0]
 800acee:	eeb0 0a48 	vmov.f32	s0, s16
 800acf2:	ecbd 8b02 	vpop	{d8}
 800acf6:	bd08      	pop	{r3, pc}
 800acf8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ad1c <expf+0x64>
 800acfc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad04:	d5f3      	bpl.n	800acee <expf+0x36>
 800ad06:	f7fe f9cd 	bl	80090a4 <__errno>
 800ad0a:	2322      	movs	r3, #34	@ 0x22
 800ad0c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800ad20 <expf+0x68>
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	e7ec      	b.n	800acee <expf+0x36>
 800ad14:	42b17217 	.word	0x42b17217
 800ad18:	7f800000 	.word	0x7f800000
 800ad1c:	c2cff1b5 	.word	0xc2cff1b5
 800ad20:	00000000 	.word	0x00000000

0800ad24 <finitef>:
 800ad24:	ee10 3a10 	vmov	r3, s0
 800ad28:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ad2c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ad30:	bfac      	ite	ge
 800ad32:	2000      	movge	r0, #0
 800ad34:	2001      	movlt	r0, #1
 800ad36:	4770      	bx	lr

0800ad38 <with_errnof>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	ed2d 8b02 	vpush	{d8}
 800ad3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ad42:	4604      	mov	r4, r0
 800ad44:	f7fe f9ae 	bl	80090a4 <__errno>
 800ad48:	eeb0 0a48 	vmov.f32	s0, s16
 800ad4c:	ecbd 8b02 	vpop	{d8}
 800ad50:	6004      	str	r4, [r0, #0]
 800ad52:	bd10      	pop	{r4, pc}

0800ad54 <xflowf>:
 800ad54:	b130      	cbz	r0, 800ad64 <xflowf+0x10>
 800ad56:	eef1 7a40 	vneg.f32	s15, s0
 800ad5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ad5e:	2022      	movs	r0, #34	@ 0x22
 800ad60:	f7ff bfea 	b.w	800ad38 <with_errnof>
 800ad64:	eef0 7a40 	vmov.f32	s15, s0
 800ad68:	e7f7      	b.n	800ad5a <xflowf+0x6>
	...

0800ad6c <__math_uflowf>:
 800ad6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ad74 <__math_uflowf+0x8>
 800ad70:	f7ff bff0 	b.w	800ad54 <xflowf>
 800ad74:	10000000 	.word	0x10000000

0800ad78 <__math_oflowf>:
 800ad78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ad80 <__math_oflowf+0x8>
 800ad7c:	f7ff bfea 	b.w	800ad54 <xflowf>
 800ad80:	70000000 	.word	0x70000000

0800ad84 <__ieee754_expf>:
 800ad84:	ee10 2a10 	vmov	r2, s0
 800ad88:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800ad8c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ad90:	d902      	bls.n	800ad98 <__ieee754_expf+0x14>
 800ad92:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad96:	4770      	bx	lr
 800ad98:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ad9c:	d106      	bne.n	800adac <__ieee754_expf+0x28>
 800ad9e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800aed8 <__ieee754_expf+0x154>
 800ada2:	2900      	cmp	r1, #0
 800ada4:	bf18      	it	ne
 800ada6:	eeb0 0a67 	vmovne.f32	s0, s15
 800adaa:	4770      	bx	lr
 800adac:	484b      	ldr	r0, [pc, #300]	@ (800aedc <__ieee754_expf+0x158>)
 800adae:	4282      	cmp	r2, r0
 800adb0:	dd02      	ble.n	800adb8 <__ieee754_expf+0x34>
 800adb2:	2000      	movs	r0, #0
 800adb4:	f7ff bfe0 	b.w	800ad78 <__math_oflowf>
 800adb8:	2a00      	cmp	r2, #0
 800adba:	da05      	bge.n	800adc8 <__ieee754_expf+0x44>
 800adbc:	4a48      	ldr	r2, [pc, #288]	@ (800aee0 <__ieee754_expf+0x15c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d902      	bls.n	800adc8 <__ieee754_expf+0x44>
 800adc2:	2000      	movs	r0, #0
 800adc4:	f7ff bfd2 	b.w	800ad6c <__math_uflowf>
 800adc8:	4a46      	ldr	r2, [pc, #280]	@ (800aee4 <__ieee754_expf+0x160>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800add0:	d952      	bls.n	800ae78 <__ieee754_expf+0xf4>
 800add2:	4a45      	ldr	r2, [pc, #276]	@ (800aee8 <__ieee754_expf+0x164>)
 800add4:	4293      	cmp	r3, r2
 800add6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800adda:	d834      	bhi.n	800ae46 <__ieee754_expf+0xc2>
 800addc:	4b43      	ldr	r3, [pc, #268]	@ (800aeec <__ieee754_expf+0x168>)
 800adde:	4413      	add	r3, r2
 800ade0:	ed93 7a00 	vldr	s14, [r3]
 800ade4:	4b42      	ldr	r3, [pc, #264]	@ (800aef0 <__ieee754_expf+0x16c>)
 800ade6:	4413      	add	r3, r2
 800ade8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800adec:	f1c1 0201 	rsb	r2, r1, #1
 800adf0:	edd3 7a00 	vldr	s15, [r3]
 800adf4:	1a52      	subs	r2, r2, r1
 800adf6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800adfa:	ee20 6a00 	vmul.f32	s12, s0, s0
 800adfe:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800aef4 <__ieee754_expf+0x170>
 800ae02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aef8 <__ieee754_expf+0x174>
 800ae06:	eee6 6a05 	vfma.f32	s13, s12, s10
 800ae0a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800aefc <__ieee754_expf+0x178>
 800ae0e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ae12:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800af00 <__ieee754_expf+0x17c>
 800ae16:	eee5 6a06 	vfma.f32	s13, s10, s12
 800ae1a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800af04 <__ieee754_expf+0x180>
 800ae1e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ae22:	eef0 6a40 	vmov.f32	s13, s0
 800ae26:	eee5 6a46 	vfms.f32	s13, s10, s12
 800ae2a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ae2e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800ae32:	bb92      	cbnz	r2, 800ae9a <__ieee754_expf+0x116>
 800ae34:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ae38:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ae3c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ae40:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800ae44:	4770      	bx	lr
 800ae46:	4b30      	ldr	r3, [pc, #192]	@ (800af08 <__ieee754_expf+0x184>)
 800ae48:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800af0c <__ieee754_expf+0x188>
 800ae4c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800af10 <__ieee754_expf+0x18c>
 800ae50:	4413      	add	r3, r2
 800ae52:	edd3 7a00 	vldr	s15, [r3]
 800ae56:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae5a:	eeb0 7a40 	vmov.f32	s14, s0
 800ae5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae62:	ee17 2a90 	vmov	r2, s15
 800ae66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae6a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ae6e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800af14 <__ieee754_expf+0x190>
 800ae72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae76:	e7be      	b.n	800adf6 <__ieee754_expf+0x72>
 800ae78:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800ae7c:	d20b      	bcs.n	800ae96 <__ieee754_expf+0x112>
 800ae7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800af18 <__ieee754_expf+0x194>
 800ae82:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ae86:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8e:	dd02      	ble.n	800ae96 <__ieee754_expf+0x112>
 800ae90:	ee30 0a25 	vadd.f32	s0, s0, s11
 800ae94:	4770      	bx	lr
 800ae96:	2200      	movs	r2, #0
 800ae98:	e7af      	b.n	800adfa <__ieee754_expf+0x76>
 800ae9a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ae9e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800aea2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800aea6:	bfb8      	it	lt
 800aea8:	3264      	addlt	r2, #100	@ 0x64
 800aeaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aeae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aeb2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800aeb6:	ee17 3a90 	vmov	r3, s15
 800aeba:	bfab      	itete	ge
 800aebc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800aec0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800aec4:	ee00 3a10 	vmovge	s0, r3
 800aec8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800af1c <__ieee754_expf+0x198>
 800aecc:	bfbc      	itt	lt
 800aece:	ee00 3a10 	vmovlt	s0, r3
 800aed2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800aed6:	4770      	bx	lr
 800aed8:	00000000 	.word	0x00000000
 800aedc:	42b17217 	.word	0x42b17217
 800aee0:	42cff1b5 	.word	0x42cff1b5
 800aee4:	3eb17218 	.word	0x3eb17218
 800aee8:	3f851591 	.word	0x3f851591
 800aeec:	08067ec0 	.word	0x08067ec0
 800aef0:	08067eb8 	.word	0x08067eb8
 800aef4:	3331bb4c 	.word	0x3331bb4c
 800aef8:	b5ddea0e 	.word	0xb5ddea0e
 800aefc:	388ab355 	.word	0x388ab355
 800af00:	bb360b61 	.word	0xbb360b61
 800af04:	3e2aaaab 	.word	0x3e2aaaab
 800af08:	08067ec8 	.word	0x08067ec8
 800af0c:	3fb8aa3b 	.word	0x3fb8aa3b
 800af10:	3f317180 	.word	0x3f317180
 800af14:	3717f7d1 	.word	0x3717f7d1
 800af18:	7149f2ca 	.word	0x7149f2ca
 800af1c:	0d800000 	.word	0x0d800000

0800af20 <_close>:
 800af20:	4b02      	ldr	r3, [pc, #8]	@ (800af2c <_close+0xc>)
 800af22:	2258      	movs	r2, #88	@ 0x58
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	f04f 30ff 	mov.w	r0, #4294967295
 800af2a:	4770      	bx	lr
 800af2c:	20007650 	.word	0x20007650

0800af30 <_fstat>:
 800af30:	4b02      	ldr	r3, [pc, #8]	@ (800af3c <_fstat+0xc>)
 800af32:	2258      	movs	r2, #88	@ 0x58
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	4770      	bx	lr
 800af3c:	20007650 	.word	0x20007650

0800af40 <_getpid>:
 800af40:	4b02      	ldr	r3, [pc, #8]	@ (800af4c <_getpid+0xc>)
 800af42:	2258      	movs	r2, #88	@ 0x58
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	f04f 30ff 	mov.w	r0, #4294967295
 800af4a:	4770      	bx	lr
 800af4c:	20007650 	.word	0x20007650

0800af50 <_isatty>:
 800af50:	4b02      	ldr	r3, [pc, #8]	@ (800af5c <_isatty+0xc>)
 800af52:	2258      	movs	r2, #88	@ 0x58
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	2000      	movs	r0, #0
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	20007650 	.word	0x20007650

0800af60 <_kill>:
 800af60:	4b02      	ldr	r3, [pc, #8]	@ (800af6c <_kill+0xc>)
 800af62:	2258      	movs	r2, #88	@ 0x58
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	f04f 30ff 	mov.w	r0, #4294967295
 800af6a:	4770      	bx	lr
 800af6c:	20007650 	.word	0x20007650

0800af70 <_lseek>:
 800af70:	4b02      	ldr	r3, [pc, #8]	@ (800af7c <_lseek+0xc>)
 800af72:	2258      	movs	r2, #88	@ 0x58
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	4770      	bx	lr
 800af7c:	20007650 	.word	0x20007650

0800af80 <_read>:
 800af80:	4b02      	ldr	r3, [pc, #8]	@ (800af8c <_read+0xc>)
 800af82:	2258      	movs	r2, #88	@ 0x58
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	4770      	bx	lr
 800af8c:	20007650 	.word	0x20007650

0800af90 <_exit>:
 800af90:	e7fe      	b.n	800af90 <_exit>
	...

0800af94 <_init>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	bf00      	nop
 800af98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9a:	bc08      	pop	{r3}
 800af9c:	469e      	mov	lr, r3
 800af9e:	4770      	bx	lr

0800afa0 <_fini>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	bf00      	nop
 800afa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa6:	bc08      	pop	{r3}
 800afa8:	469e      	mov	lr, r3
 800afaa:	4770      	bx	lr
