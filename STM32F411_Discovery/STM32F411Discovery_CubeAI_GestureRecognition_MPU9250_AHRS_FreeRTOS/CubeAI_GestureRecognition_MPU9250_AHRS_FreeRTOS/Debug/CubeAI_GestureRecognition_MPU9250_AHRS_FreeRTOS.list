
CubeAI_GestureRecognition_MPU9250_AHRS_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008488  08008488  00009488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f0  080085f0  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f8  080085f8  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f8  080085f8  000095f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085fc  080085fc  000095fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008600  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c4  20000070  08008670  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20004334  08008670  0000a334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c4e  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003623  00000000  00000000  00021cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00025318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb7  00000000  00000000  00026758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e3b  00000000  00000000  0002770f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179a1  00000000  00000000  0004154a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3b0  00000000  00000000  00058eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f729b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006054  00000000  00000000  000f72e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d4  00000000  00000000  000fd334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008470 	.word	0x08008470

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008470 	.word	0x08008470

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <vApplicationGetIdleTaskMemory+0x30>)
 8000dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2280      	movs	r2, #128	@ 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000008c 	.word	0x2000008c
 8000ddc:	2000012c 	.word	0x2000012c

08000de0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000de8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d013      	beq.n	8000e20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000df8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dfc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00b      	beq.n	8000e20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e08:	e000      	b.n	8000e0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f9      	beq.n	8000e0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e16:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e009      	b.n	8000e58 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffc7 	bl	8000de0 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf1      	blt.n	8000e44 <_write+0x16>
	}
	return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b0a0      	sub	sp, #128	@ 0x80
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e72:	f000 ff55 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e76:	f000 f879 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7a:	f000 f953 	bl	8001124 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e7e:	f000 f8f1 	bl	8001064 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e82:	f000 f925 	bl	80010d0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000e86:	f000 f8d9 	bl	800103c <MX_CRC_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
#if Debug
  osMessageQDef(Queue_1, 1, sizeof(IMUdata_t));
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <main+0xd8>)
 8000e8c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_1Handle = osMessageCreate(osMessageQ(Queue_1), NULL);
 8000e96:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fd8a 	bl	80049b6 <osMessageCreate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a28      	ldr	r2, [pc, #160]	@ (8000f48 <main+0xdc>)
 8000ea6:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <main+0xe0>)
 8000eaa:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000eae:	461d      	mov	r5, r3
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ebc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fd17 	bl	80048f6 <osThreadCreate>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <main+0xe4>)
 8000ecc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of runTask */
  osThreadDef(runTask, StartRunTask, osPriorityNormal, 0, 128);
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <main+0xe8>)
 8000ed0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000ed4:	461d      	mov	r5, r3
 8000ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  runTaskHandle = osThreadCreate(osThread(runTask), NULL);
 8000ee2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fd04 	bl	80048f6 <osThreadCreate>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <main+0xec>)
 8000ef2:	6013      	str	r3, [r2, #0]

  /* definition and creation of readDataTask */
  osThreadDef(readDataTask, StartReadDataTask, osPriorityIdle, 0, 512);
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <main+0xf0>)
 8000ef6:	f107 041c 	add.w	r4, r7, #28
 8000efa:	461d      	mov	r5, r3
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readDataTaskHandle = osThreadCreate(osThread(readDataTask), NULL);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fcf1 	bl	80048f6 <osThreadCreate>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <main+0xf4>)
 8000f18:	6013      	str	r3, [r2, #0]
#if Debug
  /* definition and creation of sendDataTask */
  osThreadDef(sendDataTask, StartSendDataTask, osPriorityNormal, 0, 512);
 8000f1a:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <main+0xf8>)
 8000f1c:	463c      	mov	r4, r7
 8000f1e:	461d      	mov	r5, r3
 8000f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendDataTaskHandle = osThreadCreate(osThread(sendDataTask), NULL);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fce0 	bl	80048f6 <osThreadCreate>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <main+0xfc>)
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f3c:	f003 fcd4 	bl	80048e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <main+0xd4>
 8000f44:	08008488 	.word	0x08008488
 8000f48:	200003e4 	.word	0x200003e4
 8000f4c:	080084a4 	.word	0x080084a4
 8000f50:	200003d4 	.word	0x200003d4
 8000f54:	080084c8 	.word	0x080084c8
 8000f58:	200003d8 	.word	0x200003d8
 8000f5c:	080084f4 	.word	0x080084f4
 8000f60:	200003dc 	.word	0x200003dc
 8000f64:	08008520 	.word	0x08008520
 8000f68:	200003e0 	.word	0x200003e0

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	@ 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	@ 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 f967 	bl	800724e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <SystemClock_Config+0xc8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <SystemClock_Config+0xc8>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <SystemClock_Config+0xc8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <SystemClock_Config+0xcc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <SystemClock_Config+0xcc>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <SystemClock_Config+0xcc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fe0:	2364      	movs	r3, #100	@ 0x64
 8000fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 f9b1 	bl	8002358 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ffc:	f000 fc9a 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2103      	movs	r1, #3
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fc13 	bl	8002848 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001028:	f000 fc84 	bl	8001934 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	@ 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_CRC_Init+0x20>)
 8001042:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <MX_CRC_Init+0x24>)
 8001044:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_CRC_Init+0x20>)
 8001048:	f000 ffb2 	bl	8001fb0 <HAL_CRC_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001052:	f000 fc6f 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000032c 	.word	0x2000032c
 8001060:	40023000 	.word	0x40023000

08001064 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	@ (80010cc <MX_SPI1_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001070:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001098:	2208      	movs	r2, #8
 800109a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010b6:	f001 fe19 	bl	8002cec <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 fc38 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000334 	.word	0x20000334
 80010cc:	40013000 	.word	0x40013000

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <MX_USART2_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 8001108:	f002 fe36 	bl	8003d78 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 fc0f 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000038c 	.word	0x2000038c
 8001120:	40004400 	.word	0x40004400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	4816      	ldr	r0, [pc, #88]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b0:	f001 f89e 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Run_Pin|LED_Error_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f001 f898 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011c0:	2310      	movs	r3, #16
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011d8:	f000 ff06 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Run_Pin LED_Error_Pin */
  GPIO_InitStruct.Pin = LED_Run_Pin|LED_Error_Pin;
 80011dc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f000 fef7 	bl	8001fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00

08001210 <IMU_Init>:

/* USER CODE BEGIN 4 */
// <---- ------------ IMU Initialized ------------ ---->
void IMU_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	MPU9250.PWR_MGMT1	= CLKSEL_1;						// CLOCK_SEL_PLL
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <IMU_Init+0x44>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
	MPU9250.PWR_MGMT2	= ENABLE_ALL;					// Enable All Sensors
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <IMU_Init+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]
	MPU9250.Gyro_DLPF   = BW250_D970;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <IMU_Init+0x44>)
 8001222:	2200      	movs	r2, #0
 8001224:	709a      	strb	r2, [r3, #2]
	MPU9250.Accel_DLPF  = BW218_D1880;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <IMU_Init+0x44>)
 8001228:	2200      	movs	r2, #0
 800122a:	70da      	strb	r2, [r3, #3]
	MPU9250.Gyro_Range  = MPU9250_Gyroscope_2000;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <IMU_Init+0x44>)
 800122e:	2203      	movs	r2, #3
 8001230:	711a      	strb	r2, [r3, #4]
	MPU9250.Accel_Range = MPU9250_Accelerometer_16;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <IMU_Init+0x44>)
 8001234:	2203      	movs	r2, #3
 8001236:	715a      	strb	r2, [r3, #5]

	if(MPU9250_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin, &MPU9250) != MPU9250_RESULT_OK)
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <IMU_Init+0x44>)
 800123a:	2210      	movs	r2, #16
 800123c:	4906      	ldr	r1, [pc, #24]	@ (8001258 <IMU_Init+0x48>)
 800123e:	4807      	ldr	r0, [pc, #28]	@ (800125c <IMU_Init+0x4c>)
 8001240:	f003 f9a6 	bl	8004590 <MPU9250_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <IMU_Init+0x3e>
	{
		Error_Handler();
 800124a:	f000 fb73 	bl	8001934 <Error_Handler>
	}
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200003e8 	.word	0x200003e8
 8001258:	40020000 	.word	0x40020000
 800125c:	20000334 	.word	0x20000334

08001260 <IMU_readRawData>:
// <---- ------------ IMU Read Raw Data ------------ ---->
void IMU_readRawData(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	// <---- ------------ Merging Data to get real IMU data ------------ ---->
	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_ACCEL_XOUT_H, 6);
 8001264:	2306      	movs	r3, #6
 8001266:	223b      	movs	r2, #59	@ 0x3b
 8001268:	499d      	ldr	r1, [pc, #628]	@ (80014e0 <IMU_readRawData+0x280>)
 800126a:	489e      	ldr	r0, [pc, #632]	@ (80014e4 <IMU_readRawData+0x284>)
 800126c:	f003 faa6 	bl	80047bc <MPU9250_ReadData>
	Raw_Accel[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 8001270:	4b9b      	ldr	r3, [pc, #620]	@ (80014e0 <IMU_readRawData+0x280>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	4b99      	ldr	r3, [pc, #612]	@ (80014e0 <IMU_readRawData+0x280>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21a      	sxth	r2, r3
 8001282:	4b99      	ldr	r3, [pc, #612]	@ (80014e8 <IMU_readRawData+0x288>)
 8001284:	801a      	strh	r2, [r3, #0]
	Raw_Accel[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 8001286:	4b96      	ldr	r3, [pc, #600]	@ (80014e0 <IMU_readRawData+0x280>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	4b94      	ldr	r3, [pc, #592]	@ (80014e0 <IMU_readRawData+0x280>)
 8001290:	78db      	ldrb	r3, [r3, #3]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b93      	ldr	r3, [pc, #588]	@ (80014e8 <IMU_readRawData+0x288>)
 800129a:	805a      	strh	r2, [r3, #2]
	Raw_Accel[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 800129c:	4b90      	ldr	r3, [pc, #576]	@ (80014e0 <IMU_readRawData+0x280>)
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4b8e      	ldr	r3, [pc, #568]	@ (80014e0 <IMU_readRawData+0x280>)
 80012a6:	795b      	ldrb	r3, [r3, #5]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b8e      	ldr	r3, [pc, #568]	@ (80014e8 <IMU_readRawData+0x288>)
 80012b0:	809a      	strh	r2, [r3, #4]

	MPU9250_ReadData(&hspi1, IMU_rawData, MPU9250_GYRO_XOUT_H, 6);
 80012b2:	2306      	movs	r3, #6
 80012b4:	2243      	movs	r2, #67	@ 0x43
 80012b6:	498a      	ldr	r1, [pc, #552]	@ (80014e0 <IMU_readRawData+0x280>)
 80012b8:	488a      	ldr	r0, [pc, #552]	@ (80014e4 <IMU_readRawData+0x284>)
 80012ba:	f003 fa7f 	bl	80047bc <MPU9250_ReadData>
	Raw_Gyro[0] = (int16_t)(IMU_rawData[0] << 8 | IMU_rawData[1]);
 80012be:	4b88      	ldr	r3, [pc, #544]	@ (80014e0 <IMU_readRawData+0x280>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b86      	ldr	r3, [pc, #536]	@ (80014e0 <IMU_readRawData+0x280>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b86      	ldr	r3, [pc, #536]	@ (80014ec <IMU_readRawData+0x28c>)
 80012d2:	801a      	strh	r2, [r3, #0]
	Raw_Gyro[1] = (int16_t)(IMU_rawData[2] << 8 | IMU_rawData[3]);
 80012d4:	4b82      	ldr	r3, [pc, #520]	@ (80014e0 <IMU_readRawData+0x280>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b80      	ldr	r3, [pc, #512]	@ (80014e0 <IMU_readRawData+0x280>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b81      	ldr	r3, [pc, #516]	@ (80014ec <IMU_readRawData+0x28c>)
 80012e8:	805a      	strh	r2, [r3, #2]
	Raw_Gyro[2] = (int16_t)(IMU_rawData[4] << 8 | IMU_rawData[5]);
 80012ea:	4b7d      	ldr	r3, [pc, #500]	@ (80014e0 <IMU_readRawData+0x280>)
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b7b      	ldr	r3, [pc, #492]	@ (80014e0 <IMU_readRawData+0x280>)
 80012f4:	795b      	ldrb	r3, [r3, #5]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <IMU_readRawData+0x28c>)
 80012fe:	809a      	strh	r2, [r3, #4]

	// <---- ------------ Removing Gyro's Noise around 0 state ------------ ---->
	Raw_Gyro[0] = (Raw_Gyro[0] <= ZERO_MAX && Raw_Gyro[0] >= ZERO_MIN)? 0: Raw_Gyro[0];
 8001300:	4b7a      	ldr	r3, [pc, #488]	@ (80014ec <IMU_readRawData+0x28c>)
 8001302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001306:	2b14      	cmp	r3, #20
 8001308:	dc05      	bgt.n	8001316 <IMU_readRawData+0xb6>
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <IMU_readRawData+0x28c>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	f113 0f14 	cmn.w	r3, #20
 8001314:	da03      	bge.n	800131e <IMU_readRawData+0xbe>
 8001316:	4b75      	ldr	r3, [pc, #468]	@ (80014ec <IMU_readRawData+0x28c>)
 8001318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131c:	e000      	b.n	8001320 <IMU_readRawData+0xc0>
 800131e:	2300      	movs	r3, #0
 8001320:	4a72      	ldr	r2, [pc, #456]	@ (80014ec <IMU_readRawData+0x28c>)
 8001322:	8013      	strh	r3, [r2, #0]
	Raw_Gyro[1] = (Raw_Gyro[1] <= ZERO_MAX && Raw_Gyro[1] >= ZERO_MIN)? 0: Raw_Gyro[1];
 8001324:	4b71      	ldr	r3, [pc, #452]	@ (80014ec <IMU_readRawData+0x28c>)
 8001326:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800132a:	2b14      	cmp	r3, #20
 800132c:	dc05      	bgt.n	800133a <IMU_readRawData+0xda>
 800132e:	4b6f      	ldr	r3, [pc, #444]	@ (80014ec <IMU_readRawData+0x28c>)
 8001330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001334:	f113 0f14 	cmn.w	r3, #20
 8001338:	da03      	bge.n	8001342 <IMU_readRawData+0xe2>
 800133a:	4b6c      	ldr	r3, [pc, #432]	@ (80014ec <IMU_readRawData+0x28c>)
 800133c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001340:	e000      	b.n	8001344 <IMU_readRawData+0xe4>
 8001342:	2300      	movs	r3, #0
 8001344:	4a69      	ldr	r2, [pc, #420]	@ (80014ec <IMU_readRawData+0x28c>)
 8001346:	8053      	strh	r3, [r2, #2]
	Raw_Gyro[2] = (Raw_Gyro[2] <= ZERO_MAX && Raw_Gyro[2] >= ZERO_MIN)? 0: Raw_Gyro[2];
 8001348:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <IMU_readRawData+0x28c>)
 800134a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800134e:	2b14      	cmp	r3, #20
 8001350:	dc05      	bgt.n	800135e <IMU_readRawData+0xfe>
 8001352:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <IMU_readRawData+0x28c>)
 8001354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001358:	f113 0f14 	cmn.w	r3, #20
 800135c:	da03      	bge.n	8001366 <IMU_readRawData+0x106>
 800135e:	4b63      	ldr	r3, [pc, #396]	@ (80014ec <IMU_readRawData+0x28c>)
 8001360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001364:	e000      	b.n	8001368 <IMU_readRawData+0x108>
 8001366:	2300      	movs	r3, #0
 8001368:	4a60      	ldr	r2, [pc, #384]	@ (80014ec <IMU_readRawData+0x28c>)
 800136a:	8093      	strh	r3, [r2, #4]

	GX = (float)(Raw_Gyro[0] * (2000 / 32768.0));
 800136c:	4b5f      	ldr	r3, [pc, #380]	@ (80014ec <IMU_readRawData+0x28c>)
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8d6 	bl	8000524 <__aeabi_i2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <IMU_readRawData+0x290>)
 800137e:	f7ff f93b 	bl	80005f8 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fb47 	bl	8000a1c <__aeabi_d2f>
 800138e:	4603      	mov	r3, r0
 8001390:	4a58      	ldr	r2, [pc, #352]	@ (80014f4 <IMU_readRawData+0x294>)
 8001392:	6013      	str	r3, [r2, #0]
	GY = (float)(Raw_Gyro[1] * (2000 / 32768.0));
 8001394:	4b55      	ldr	r3, [pc, #340]	@ (80014ec <IMU_readRawData+0x28c>)
 8001396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8c2 	bl	8000524 <__aeabi_i2d>
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	4b52      	ldr	r3, [pc, #328]	@ (80014f0 <IMU_readRawData+0x290>)
 80013a6:	f7ff f927 	bl	80005f8 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fb33 	bl	8000a1c <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a4f      	ldr	r2, [pc, #316]	@ (80014f8 <IMU_readRawData+0x298>)
 80013ba:	6013      	str	r3, [r2, #0]
	GZ = (float)(Raw_Gyro[2] * (2000 / 32768.0));
 80013bc:	4b4b      	ldr	r3, [pc, #300]	@ (80014ec <IMU_readRawData+0x28c>)
 80013be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8ae 	bl	8000524 <__aeabi_i2d>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <IMU_readRawData+0x290>)
 80013ce:	f7ff f913 	bl	80005f8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb1f 	bl	8000a1c <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a46      	ldr	r2, [pc, #280]	@ (80014fc <IMU_readRawData+0x29c>)
 80013e2:	6013      	str	r3, [r2, #0]

	AX = (float)(Raw_Accel[0] * (16.0 / 32768.0));
 80013e4:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <IMU_readRawData+0x288>)
 80013e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f89a 	bl	8000524 <__aeabi_i2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb0a 	bl	8000a1c <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	4a3d      	ldr	r2, [pc, #244]	@ (8001500 <IMU_readRawData+0x2a0>)
 800140c:	6013      	str	r3, [r2, #0]
	AY = (float)(Raw_Accel[1] * (16.0 / 32768.0));
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <IMU_readRawData+0x288>)
 8001410:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001422:	f7ff f8e9 	bl	80005f8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff faf5 	bl	8000a1c <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <IMU_readRawData+0x2a4>)
 8001436:	6013      	str	r3, [r2, #0]
	AZ = (float)(Raw_Accel[2] * (16.0 / 32768.0));
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <IMU_readRawData+0x288>)
 800143a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f870 	bl	8000524 <__aeabi_i2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800144c:	f7ff f8d4 	bl	80005f8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fae0 	bl	8000a1c <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <IMU_readRawData+0x2a8>)
 8001460:	6013      	str	r3, [r2, #0]

//	// <---- ------------ Converting Degree to Radian------------ ---->
	GX = GX / (180.0 / M_PI);
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <IMU_readRawData+0x294>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f86e 	bl	8000548 <__aeabi_f2d>
 800146c:	a31a      	add	r3, pc, #104	@ (adr r3, 80014d8 <IMU_readRawData+0x278>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f9eb 	bl	800084c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff facd 	bl	8000a1c <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4a1b      	ldr	r2, [pc, #108]	@ (80014f4 <IMU_readRawData+0x294>)
 8001486:	6013      	str	r3, [r2, #0]
	GY = GY / (180.0 / M_PI);
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <IMU_readRawData+0x298>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	a311      	add	r3, pc, #68	@ (adr r3, 80014d8 <IMU_readRawData+0x278>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f9d8 	bl	800084c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff faba 	bl	8000a1c <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <IMU_readRawData+0x298>)
 80014ac:	6013      	str	r3, [r2, #0]
	GZ = GZ / (180.0 / M_PI);
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <IMU_readRawData+0x29c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f848 	bl	8000548 <__aeabi_f2d>
 80014b8:	a307      	add	r3, pc, #28	@ (adr r3, 80014d8 <IMU_readRawData+0x278>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f9c5 	bl	800084c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff faa7 	bl	8000a1c <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <IMU_readRawData+0x29c>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	1a63c1f8 	.word	0x1a63c1f8
 80014dc:	404ca5dc 	.word	0x404ca5dc
 80014e0:	200003f0 	.word	0x200003f0
 80014e4:	20000334 	.word	0x20000334
 80014e8:	20000400 	.word	0x20000400
 80014ec:	20000408 	.word	0x20000408
 80014f0:	3faf4000 	.word	0x3faf4000
 80014f4:	20000410 	.word	0x20000410
 80014f8:	20000414 	.word	0x20000414
 80014fc:	20000418 	.word	0x20000418
 8001500:	2000041c 	.word	0x2000041c
 8001504:	20000420 	.word	0x20000420
 8001508:	20000424 	.word	0x20000424

0800150c <IMU_UpdateAngles>:

// <---- ------------ Convert raw data to the Roll and Pitch ------------ ---->
void IMU_UpdateAngles(float dt)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	ed2d 8b02 	vpush	{d8}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0a01 	vstr	s0, [r7, #4]
    static int first_run = 1;
    static float last_roll, last_pitch;

    IMUdata_t data;

    if(first_run)
 800151a:	4b94      	ldr	r3, [pc, #592]	@ (800176c <IMU_UpdateAngles+0x260>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d051      	beq.n	80015c6 <IMU_UpdateAngles+0xba>
    {
        float roll_acc = atan2f(AY, sqrtf(AX*AX + AZ*AZ));
 8001522:	4b93      	ldr	r3, [pc, #588]	@ (8001770 <IMU_UpdateAngles+0x264>)
 8001524:	ed93 8a00 	vldr	s16, [r3]
 8001528:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <IMU_UpdateAngles+0x268>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	4b91      	ldr	r3, [pc, #580]	@ (8001774 <IMU_UpdateAngles+0x268>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001538:	4b8f      	ldr	r3, [pc, #572]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 800153a:	edd3 6a00 	vldr	s13, [r3]
 800153e:	4b8e      	ldr	r3, [pc, #568]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	f006 fdc8 	bl	80080e4 <sqrtf>
 8001554:	eef0 7a40 	vmov.f32	s15, s0
 8001558:	eef0 0a67 	vmov.f32	s1, s15
 800155c:	eeb0 0a48 	vmov.f32	s0, s16
 8001560:	f006 fdbe 	bl	80080e0 <atan2f>
 8001564:	ed87 0a05 	vstr	s0, [r7, #20]
        float pitch_acc = atan2f(-AX, sqrtf(AY*AY + AZ*AZ));
 8001568:	4b82      	ldr	r3, [pc, #520]	@ (8001774 <IMU_UpdateAngles+0x268>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eeb1 8a67 	vneg.f32	s16, s15
 8001572:	4b7f      	ldr	r3, [pc, #508]	@ (8001770 <IMU_UpdateAngles+0x264>)
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	4b7d      	ldr	r3, [pc, #500]	@ (8001770 <IMU_UpdateAngles+0x264>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001582:	4b7d      	ldr	r3, [pc, #500]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 8001584:	edd3 6a00 	vldr	s13, [r3]
 8001588:	4b7b      	ldr	r3, [pc, #492]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	f006 fda3 	bl	80080e4 <sqrtf>
 800159e:	eef0 7a40 	vmov.f32	s15, s0
 80015a2:	eef0 0a67 	vmov.f32	s1, s15
 80015a6:	eeb0 0a48 	vmov.f32	s0, s16
 80015aa:	f006 fd99 	bl	80080e0 <atan2f>
 80015ae:	ed87 0a04 	vstr	s0, [r7, #16]
        last_roll = roll_acc;
 80015b2:	4a72      	ldr	r2, [pc, #456]	@ (800177c <IMU_UpdateAngles+0x270>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	6013      	str	r3, [r2, #0]
        last_pitch = pitch_acc;
 80015b8:	4a71      	ldr	r2, [pc, #452]	@ (8001780 <IMU_UpdateAngles+0x274>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6013      	str	r3, [r2, #0]
        first_run = 0;
 80015be:	4b6b      	ldr	r3, [pc, #428]	@ (800176c <IMU_UpdateAngles+0x260>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e0cc      	b.n	8001760 <IMU_UpdateAngles+0x254>
        return;
    }

    // Gyro integration
    float gyro_roll = last_roll + GX * dt;
 80015c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001784 <IMU_UpdateAngles+0x278>)
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d4:	4b69      	ldr	r3, [pc, #420]	@ (800177c <IMU_UpdateAngles+0x270>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gyro_pitch = last_pitch + GY * dt;
 80015e2:	4b69      	ldr	r3, [pc, #420]	@ (8001788 <IMU_UpdateAngles+0x27c>)
 80015e4:	ed93 7a00 	vldr	s14, [r3]
 80015e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f0:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <IMU_UpdateAngles+0x274>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	edc7 7a08 	vstr	s15, [r7, #32]

    // Accelerometer angles
    float roll_acc = atan2f(AY, sqrtf(AX * AX + AZ * AZ));
 80015fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001770 <IMU_UpdateAngles+0x264>)
 8001600:	ed93 8a00 	vldr	s16, [r3]
 8001604:	4b5b      	ldr	r3, [pc, #364]	@ (8001774 <IMU_UpdateAngles+0x268>)
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	4b5a      	ldr	r3, [pc, #360]	@ (8001774 <IMU_UpdateAngles+0x268>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001614:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 8001616:	edd3 6a00 	vldr	s13, [r3]
 800161a:	4b57      	ldr	r3, [pc, #348]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	f006 fd5a 	bl	80080e4 <sqrtf>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	eeb0 0a48 	vmov.f32	s0, s16
 800163c:	f006 fd50 	bl	80080e0 <atan2f>
 8001640:	ed87 0a07 	vstr	s0, [r7, #28]
    float pitch_acc = atan2f(-AX, sqrtf(AY * AY + AZ * AZ));
 8001644:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <IMU_UpdateAngles+0x268>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb1 8a67 	vneg.f32	s16, s15
 800164e:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <IMU_UpdateAngles+0x264>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b46      	ldr	r3, [pc, #280]	@ (8001770 <IMU_UpdateAngles+0x264>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165e:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 8001660:	edd3 6a00 	vldr	s13, [r3]
 8001664:	4b44      	ldr	r3, [pc, #272]	@ (8001778 <IMU_UpdateAngles+0x26c>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	f006 fd35 	bl	80080e4 <sqrtf>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
 800167e:	eef0 0a67 	vmov.f32	s1, s15
 8001682:	eeb0 0a48 	vmov.f32	s0, s16
 8001686:	f006 fd2b 	bl	80080e0 <atan2f>
 800168a:	ed87 0a06 	vstr	s0, [r7, #24]

    // Complementary filter
    Roll = ALPHA * gyro_roll + (1 - ALPHA) * roll_acc;
 800168e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001692:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800178c <IMU_UpdateAngles+0x280>
 8001696:	ee27 7a87 	vmul.f32	s14, s15, s14
 800169a:	edd7 7a07 	vldr	s15, [r7, #28]
 800169e:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001790 <IMU_UpdateAngles+0x284>
 80016a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001794 <IMU_UpdateAngles+0x288>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]
    Pitch = ALPHA * gyro_pitch + (1 - ALPHA) * pitch_acc;
 80016b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b4:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800178c <IMU_UpdateAngles+0x280>
 80016b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c0:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001790 <IMU_UpdateAngles+0x284>
 80016c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <IMU_UpdateAngles+0x28c>)
 80016ce:	edc3 7a00 	vstr	s15, [r3]

    // Yaw integration (will drift without magnetometer)
    Yaw += GZ * dt;
 80016d2:	4b32      	ldr	r3, [pc, #200]	@ (800179c <IMU_UpdateAngles+0x290>)
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <IMU_UpdateAngles+0x294>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ea:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <IMU_UpdateAngles+0x294>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]

    // Store for next iteration
    last_roll = Roll;
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <IMU_UpdateAngles+0x288>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a21      	ldr	r2, [pc, #132]	@ (800177c <IMU_UpdateAngles+0x270>)
 80016f6:	6013      	str	r3, [r2, #0]
    last_pitch = Pitch;
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <IMU_UpdateAngles+0x28c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <IMU_UpdateAngles+0x274>)
 80016fe:	6013      	str	r3, [r2, #0]

    data.Shifted_Roll  = (Roll + 10) * 10;
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <IMU_UpdateAngles+0x288>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800170a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171a:	edc7 7a00 	vstr	s15, [r7]
 800171e:	783b      	ldrb	r3, [r7, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	733b      	strb	r3, [r7, #12]
    data.Shifted_Pitch = (Pitch + 10) * 10;
 8001724:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <IMU_UpdateAngles+0x28c>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800172e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001732:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800173e:	edc7 7a00 	vstr	s15, [r7]
 8001742:	783b      	ldrb	r3, [r7, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	737b      	strb	r3, [r7, #13]
    osMessagePut(Queue_1Handle, &data, osWaitForever);
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <IMU_UpdateAngles+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f107 010c 	add.w	r1, r7, #12
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	4618      	mov	r0, r3
 8001756:	f003 f957 	bl	8004a08 <osMessagePut>
    osDelay(100);
 800175a:	2064      	movs	r0, #100	@ 0x64
 800175c:	f003 f917 	bl	800498e <osDelay>
}
 8001760:	3728      	adds	r7, #40	@ 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	ecbd 8b02 	vpop	{d8}
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	20000420 	.word	0x20000420
 8001774:	2000041c 	.word	0x2000041c
 8001778:	20000424 	.word	0x20000424
 800177c:	20000434 	.word	0x20000434
 8001780:	20000438 	.word	0x20000438
 8001784:	20000410 	.word	0x20000410
 8001788:	20000414 	.word	0x20000414
 800178c:	3f7ae148 	.word	0x3f7ae148
 8001790:	3ca3d700 	.word	0x3ca3d700
 8001794:	20000428 	.word	0x20000428
 8001798:	2000042c 	.word	0x2000042c
 800179c:	20000418 	.word	0x20000418
 80017a0:	20000430 	.word	0x20000430
 80017a4:	200003e4 	.word	0x200003e4

080017a8 <StartRunTask>:

// <---- ------------ Check RunTime Task ------------ ---->
void StartRunTask(void const * argument)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 80017b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <StartRunTask+0x20>)
 80017b6:	f000 fdb4 	bl	8002322 <HAL_GPIO_TogglePin>
    osDelay(500);
 80017ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017be:	f003 f8e6 	bl	800498e <osDelay>
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 80017c2:	bf00      	nop
 80017c4:	e7f4      	b.n	80017b0 <StartRunTask+0x8>
 80017c6:	bf00      	nop
 80017c8:	40020c00 	.word	0x40020c00

080017cc <StartReadDataTask>:
  }
}

// <---- ------------ Reading raw data and converting Task ------------ ---->
void StartReadDataTask(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t last_time = HAL_GetTick();
 80017d4:	f000 fada 	bl	8001d8c <HAL_GetTick>
 80017d8:	6178      	str	r0, [r7, #20]
  uint32_t now = HAL_GetTick();
 80017da:	f000 fad7 	bl	8001d8c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]
  float dt = (now - last_time) * 0.001f;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ee:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001834 <StartReadDataTask+0x68>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	edc7 7a03 	vstr	s15, [r7, #12]

  IMU_Init();
 80017fa:	f7ff fd09 	bl	8001210 <IMU_Init>

  for(;;)
  {
	IMU_readRawData();
 80017fe:	f7ff fd2f 	bl	8001260 <IMU_readRawData>

	now = HAL_GetTick();
 8001802:	f000 fac3 	bl	8001d8c <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]
    dt = (now - last_time) * 0.001f;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001834 <StartReadDataTask+0x68>
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	edc7 7a03 	vstr	s15, [r7, #12]
    last_time = now;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	617b      	str	r3, [r7, #20]

    IMU_UpdateAngles(dt);
 8001826:	ed97 0a03 	vldr	s0, [r7, #12]
 800182a:	f7ff fe6f 	bl	800150c <IMU_UpdateAngles>
	IMU_readRawData();
 800182e:	bf00      	nop
 8001830:	e7e5      	b.n	80017fe <StartReadDataTask+0x32>
 8001832:	bf00      	nop
 8001834:	3a83126f 	.word	0x3a83126f

08001838 <StartSendDataTask>:
  }
}

// <---- ------------ Sending to the PC Task ------------ ---->
void StartSendDataTask(void const * argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0a0      	sub	sp, #128	@ 0x80
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  IMUdata_t *data;
  osEvent evt;

  for(;;)
  {
    evt = osMessageGet(Queue_1Handle, osWaitForever);
 8001840:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <StartSendDataTask+0xa4>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f91b 	bl	8004a88 <osMessageGet>
    if (evt.status == osEventMessage)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b10      	cmp	r3, #16
 8001856:	d1f3      	bne.n	8001840 <StartSendDataTask+0x8>
    {
    	data = evt.value.p;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    	printf("Roll ----> %d \r\n", data->Shifted_Roll);
 800185c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	481f      	ldr	r0, [pc, #124]	@ (80018e0 <StartSendDataTask+0xa8>)
 8001864:	f005 fc7e 	bl	8007164 <iprintf>
    	buf_len = sprintf(buf, "Roll ----> %d \r\n", data->Shifted_Roll);
 8001868:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	491b      	ldr	r1, [pc, #108]	@ (80018e0 <StartSendDataTask+0xa8>)
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fc87 	bl	8007188 <siprintf>
 800187a:	67b8      	str	r0, [r7, #120]	@ 0x78
    	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 800187c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 0114 	add.w	r1, r7, #20
 8001884:	2364      	movs	r3, #100	@ 0x64
 8001886:	4817      	ldr	r0, [pc, #92]	@ (80018e4 <StartSendDataTask+0xac>)
 8001888:	f002 fac6 	bl	8003e18 <HAL_UART_Transmit>
    	memset(buf, 0, buf_len);
 800188c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f005 fcda 	bl	800724e <memset>

    	printf("Pitch ----> %d \r\n", data->Shifted_Pitch);
 800189a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800189c:	785b      	ldrb	r3, [r3, #1]
 800189e:	4619      	mov	r1, r3
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <StartSendDataTask+0xb0>)
 80018a2:	f005 fc5f 	bl	8007164 <iprintf>
    	buf_len = sprintf(buf, "Pitch ----> %d \r\n", data->Shifted_Pitch);
 80018a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <StartSendDataTask+0xb0>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 fc68 	bl	8007188 <siprintf>
 80018b8:	67b8      	str	r0, [r7, #120]	@ 0x78
    	HAL_UART_Transmit(&huart2, buf, buf_len, 100);
 80018ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f107 0114 	add.w	r1, r7, #20
 80018c2:	2364      	movs	r3, #100	@ 0x64
 80018c4:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <StartSendDataTask+0xac>)
 80018c6:	f002 faa7 	bl	8003e18 <HAL_UART_Transmit>
    	memset(buf, 0, buf_len);
 80018ca:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 fcbb 	bl	800724e <memset>
    evt = osMessageGet(Queue_1Handle, osWaitForever);
 80018d8:	e7b2      	b.n	8001840 <StartSendDataTask+0x8>
 80018da:	bf00      	nop
 80018dc:	200003e4 	.word	0x200003e4
 80018e0:	0800853c 	.word	0x0800853c
 80018e4:	2000038c 	.word	0x2000038c
 80018e8:	08008550 	.word	0x08008550

080018ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 80018f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <StartDefaultTask+0x20>)
 80018fa:	f000 fd12 	bl	8002322 <HAL_GPIO_TogglePin>
    osDelay(500);
 80018fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001902:	f003 f844 	bl	800498e <osDelay>
	HAL_GPIO_TogglePin(LED_Run_GPIO_Port, LED_Run_Pin);
 8001906:	bf00      	nop
 8001908:	e7f4      	b.n	80018f4 <StartDefaultTask+0x8>
 800190a:	bf00      	nop
 800190c:	40020c00 	.word	0x40020c00

08001910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001922:	f000 fa1f 	bl	8001d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40014800 	.word	0x40014800

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_Error_GPIO_Port, LED_Error_Pin, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <Error_Handler+0x18>)
 8001940:	f000 fcd6 	bl	80022f0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <Error_Handler+0x14>
 800194c:	40020c00 	.word	0x40020c00

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_MspInit+0x54>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a11      	ldr	r2, [pc, #68]	@ (80019a4 <HAL_MspInit+0x54>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_MspInit+0x54>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_MspInit+0x54>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_MspInit+0x54>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	@ 0x40
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_MspInit+0x54>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	210f      	movs	r1, #15
 8001992:	f06f 0001 	mvn.w	r0, #1
 8001996:	f000 fae1 	bl	8001f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <HAL_CRC_MspInit+0x3c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10d      	bne.n	80019d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_CRC_MspInit+0x40>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_CRC_MspInit+0x40>)
 80019c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_CRC_MspInit+0x40>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023000 	.word	0x40023000
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_SPI_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12b      	bne.n	8001a66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a46:	23e0      	movs	r3, #224	@ 0xe0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a56:	2305      	movs	r3, #5
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <HAL_SPI_MspInit+0x8c>)
 8001a62:	f000 fac1 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	@ 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <HAL_UART_MspInit+0x84>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d12b      	bne.n	8001af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_UART_MspInit+0x88>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <HAL_UART_MspInit+0x88>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_UART_MspInit+0x88>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_UART_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a10      	ldr	r2, [pc, #64]	@ (8001b04 <HAL_UART_MspInit+0x88>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_UART_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <HAL_UART_MspInit+0x8c>)
 8001af2:	f000 fa79 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	@ 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40004400 	.word	0x40004400
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020000 	.word	0x40020000

08001b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	@ 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <HAL_InitTick+0xd0>)
 8001b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b24:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <HAL_InitTick+0xd0>)
 8001b26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_InitTick+0xd0>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b38:	f107 020c 	add.w	r2, r7, #12
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 f8a0 	bl	8002c88 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b48:	f001 f88a 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8001b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b50:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <HAL_InitTick+0xd4>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9b      	lsrs	r3, r3, #18
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b5e:	4a22      	ldr	r2, [pc, #136]	@ (8001be8 <HAL_InitTick+0xdc>)
 8001b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b68:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001b82:	4818      	ldr	r0, [pc, #96]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b84:	f001 fe84 	bl	8003890 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11b      	bne.n	8001bce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001b96:	4813      	ldr	r0, [pc, #76]	@ (8001be4 <HAL_InitTick+0xd8>)
 8001b98:	f001 fed4 	bl	8003944 <HAL_TIM_Base_Start_IT>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d111      	bne.n	8001bce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001baa:	201a      	movs	r0, #26
 8001bac:	f000 f9f2 	bl	8001f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	d808      	bhi.n	8001bc8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	201a      	movs	r0, #26
 8001bbc:	f000 f9ce 	bl	8001f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_InitTick+0xe0>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e002      	b.n	8001bce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3730      	adds	r7, #48	@ 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	2000043c 	.word	0x2000043c
 8001be8:	40014800 	.word	0x40014800
 8001bec:	20000008 	.word	0x20000008

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <MemManage_Handler+0x4>

08001c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c2e:	f001 feeb 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000043c 	.word	0x2000043c

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f005 fba4 	bl	80073b8 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20020000 	.word	0x20020000
 8001c9c:	00000800 	.word	0x00000800
 8001ca0:	20000484 	.word	0x20000484
 8001ca4:	20004338 	.word	0x20004338

08001ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd0:	f7ff ffea 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	@ (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f005 fb63 	bl	80073c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff f8b5 	bl	8000e6c <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d10:	08008600 	.word	0x08008600
  ldr r2, =_sbss
 8001d14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d18:	20004334 	.word	0x20004334

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <HAL_Init+0x40>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_Init+0x40>)
 8001d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <HAL_Init+0x40>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 f8fc 	bl	8001f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4e:	200f      	movs	r0, #15
 8001d50:	f7ff fedc 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d54:	f7ff fdfc 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000488 	.word	0x20000488

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000488 	.word	0x20000488

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c

08001dec <__NVIC_SetPriorityGrouping>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff4c 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6e:	f7ff ff61 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	6978      	ldr	r0, [r7, #20]
 8001f7a:	f7ff ffb1 	bl	8001ee0 <NVIC_EncodePriority>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff80 	bl	8001e8c <__NVIC_SetPriority>
}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff54 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	795b      	ldrb	r3, [r3, #5]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fce8 	bl	80019a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e159      	b.n	80022b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8148 	bne.w	80022b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	2b02      	cmp	r3, #2
 8002038:	d130      	bne.n	800209c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a2 	beq.w	80022b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b57      	ldr	r3, [pc, #348]	@ (80022d0 <HAL_GPIO_Init+0x2e8>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	4a56      	ldr	r2, [pc, #344]	@ (80022d0 <HAL_GPIO_Init+0x2e8>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217c:	6453      	str	r3, [r2, #68]	@ 0x44
 800217e:	4b54      	ldr	r3, [pc, #336]	@ (80022d0 <HAL_GPIO_Init+0x2e8>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218a:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_GPIO_Init+0x2ec>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a49      	ldr	r2, [pc, #292]	@ (80022d8 <HAL_GPIO_Init+0x2f0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x202>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a48      	ldr	r2, [pc, #288]	@ (80022dc <HAL_GPIO_Init+0x2f4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x1fe>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a47      	ldr	r2, [pc, #284]	@ (80022e0 <HAL_GPIO_Init+0x2f8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x1fa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <HAL_GPIO_Init+0x2fc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x1f6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a45      	ldr	r2, [pc, #276]	@ (80022e8 <HAL_GPIO_Init+0x300>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x1f2>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e008      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021da:	2307      	movs	r3, #7
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021de:	2303      	movs	r3, #3
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x204>
 80021ea:	2300      	movs	r3, #0
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f002 0203 	and.w	r2, r2, #3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fc:	4935      	ldr	r1, [pc, #212]	@ (80022d4 <HAL_GPIO_Init+0x2ec>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b38      	ldr	r3, [pc, #224]	@ (80022ec <HAL_GPIO_Init+0x304>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a2f      	ldr	r2, [pc, #188]	@ (80022ec <HAL_GPIO_Init+0x304>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_GPIO_Init+0x304>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <HAL_GPIO_Init+0x304>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_GPIO_Init+0x304>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002282:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_GPIO_Init+0x304>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_GPIO_Init+0x304>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ac:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <HAL_GPIO_Init+0x304>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	f67f aea2 	bls.w	8002004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002334:	887a      	ldrh	r2, [r7, #2]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4013      	ands	r3, r2
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43d9      	mvns	r1, r3
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	400b      	ands	r3, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e267      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d075      	beq.n	8002462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002376:	4b88      	ldr	r3, [pc, #544]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b85      	ldr	r3, [pc, #532]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800238a:	2b08      	cmp	r3, #8
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b82      	ldr	r3, [pc, #520]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b7e      	ldr	r3, [pc, #504]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05b      	beq.n	8002460 <HAL_RCC_OscConfig+0x108>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d157      	bne.n	8002460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e242      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x74>
 80023be:	4b76      	ldr	r3, [pc, #472]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a75      	ldr	r2, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x98>
 80023d6:	4b70      	ldr	r3, [pc, #448]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6f      	ldr	r2, [pc, #444]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023f0:	4b69      	ldr	r3, [pc, #420]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a68      	ldr	r2, [pc, #416]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b66      	ldr	r3, [pc, #408]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a65      	ldr	r2, [pc, #404]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fcbc 	bl	8001d8c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff fcb8 	bl	8001d8c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e207      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b5b      	ldr	r3, [pc, #364]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fca8 	bl	8001d8c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff fca4 	bl	8001d8c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1f3      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b51      	ldr	r3, [pc, #324]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0xe8>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800246e:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b44      	ldr	r3, [pc, #272]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1c7      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4937      	ldr	r1, [pc, #220]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e03a      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCC_OscConfig+0x244>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7ff fc5d 	bl	8001d8c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d6:	f7ff fc59 	bl	8001d8c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1a8      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4925      	ldr	r1, [pc, #148]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_RCC_OscConfig+0x244>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff fc3c 	bl	8001d8c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002518:	f7ff fc38 	bl	8001d8c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e187      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d036      	beq.n	80025b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_RCC_OscConfig+0x248>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7ff fc1c 	bl	8001d8c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fc18 	bl	8001d8c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e167      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_RCC_OscConfig+0x240>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x200>
 8002576:	e01b      	b.n	80025b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_OscConfig+0x248>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff fc05 	bl	8001d8c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e00e      	b.n	80025a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002586:	f7ff fc01 	bl	8001d8c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d907      	bls.n	80025a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e150      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
 8002598:	40023800 	.word	0x40023800
 800259c:	42470000 	.word	0x42470000
 80025a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	4b88      	ldr	r3, [pc, #544]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ea      	bne.n	8002586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8097 	beq.w	80026ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b81      	ldr	r3, [pc, #516]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b7d      	ldr	r3, [pc, #500]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a7c      	ldr	r2, [pc, #496]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b7a      	ldr	r3, [pc, #488]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b77      	ldr	r3, [pc, #476]	@ (80027cc <HAL_RCC_OscConfig+0x474>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b74      	ldr	r3, [pc, #464]	@ (80027cc <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a73      	ldr	r2, [pc, #460]	@ (80027cc <HAL_RCC_OscConfig+0x474>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7ff fbc1 	bl	8001d8c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7ff fbbd 	bl	8001d8c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e10c      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b6a      	ldr	r3, [pc, #424]	@ (80027cc <HAL_RCC_OscConfig+0x474>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x2ea>
 8002634:	4b64      	ldr	r3, [pc, #400]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4a63      	ldr	r2, [pc, #396]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002640:	e01c      	b.n	800267c <HAL_RCC_OscConfig+0x324>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x30c>
 800264a:	4b5f      	ldr	r3, [pc, #380]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264e:	4a5e      	ldr	r2, [pc, #376]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	@ 0x70
 8002656:	4b5c      	ldr	r3, [pc, #368]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	4a5b      	ldr	r2, [pc, #364]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	@ 0x70
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0x324>
 8002664:	4b58      	ldr	r3, [pc, #352]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002668:	4a57      	ldr	r2, [pc, #348]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002670:	4b55      	ldr	r3, [pc, #340]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4a54      	ldr	r2, [pc, #336]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7ff fb82 	bl	8001d8c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7ff fb7e 	bl	8001d8c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0cb      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ee      	beq.n	800268c <HAL_RCC_OscConfig+0x334>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7ff fb6c 	bl	8001d8c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7ff fb68 	bl	8001d8c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0b5      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ce:	4b3e      	ldr	r3, [pc, #248]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ee      	bne.n	80026b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	4a38      	ldr	r2, [pc, #224]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a1 	beq.w	8002838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f6:	4b34      	ldr	r3, [pc, #208]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d05c      	beq.n	80027bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d141      	bne.n	800278e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fb3c 	bl	8001d8c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fb38 	bl	8001d8c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e087      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b27      	ldr	r3, [pc, #156]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	491b      	ldr	r1, [pc, #108]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_RCC_OscConfig+0x478>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff fb11 	bl	8001d8c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7ff fb0d 	bl	8001d8c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e05c      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x416>
 800278c:	e054      	b.n	8002838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <HAL_RCC_OscConfig+0x478>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fafa 	bl	8001d8c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff faf6 	bl	8001d8c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e045      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_RCC_OscConfig+0x470>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x444>
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e038      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_RCC_OscConfig+0x4ec>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d028      	beq.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d121      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11a      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800280a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	4293      	cmp	r3, r2
 800280e:	d111      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0cc      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b68      	ldr	r3, [pc, #416]	@ (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d90c      	bls.n	8002884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b65      	ldr	r3, [pc, #404]	@ (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	@ (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a52      	ldr	r2, [pc, #328]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d044      	beq.n	8002968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d119      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	2b03      	cmp	r3, #3
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e067      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4934      	ldr	r1, [pc, #208]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002938:	f7ff fa28 	bl	8001d8c <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7ff fa24 	bl	8001d8c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e04f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b2b      	ldr	r3, [pc, #172]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002968:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d20c      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ba:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	@ (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f88c 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00
 8002a04:	40023800 	.word	0x40023800
 8002a08:	0800856c 	.word	0x0800856c
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	20000008 	.word	0x20000008

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b094      	sub	sp, #80	@ 0x50
 8002a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2c:	4b79      	ldr	r3, [pc, #484]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d00d      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x40>
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	f200 80e1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x34>
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a46:	e0db      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b73      	ldr	r3, [pc, #460]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a4c:	e0db      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4e:	4b73      	ldr	r3, [pc, #460]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a52:	e0d8      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a54:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d063      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	2200      	movs	r2, #0
 8002a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	0159      	lsls	r1, r3, #5
 8002a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a98:	0150      	lsls	r0, r2, #5
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	1a51      	subs	r1, r2, r1
 8002aa2:	6139      	str	r1, [r7, #16]
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab8:	4659      	mov	r1, fp
 8002aba:	018b      	lsls	r3, r1, #6
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	018a      	lsls	r2, r1, #6
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8002acc:	4659      	mov	r1, fp
 8002ace:	eb63 0901 	sbc.w	r9, r3, r1
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	4699      	mov	r9, r3
 8002aea:	4623      	mov	r3, r4
 8002aec:	eb18 0303 	adds.w	r3, r8, r3
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	462b      	mov	r3, r5
 8002af4:	eb49 0303 	adc.w	r3, r9, r3
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b06:	4629      	mov	r1, r5
 8002b08:	024b      	lsls	r3, r1, #9
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b10:	4621      	mov	r1, r4
 8002b12:	024a      	lsls	r2, r1, #9
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b24:	f7fd ffca 	bl	8000abc <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b30:	e058      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b4c:	4642      	mov	r2, r8
 8002b4e:	464b      	mov	r3, r9
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0159      	lsls	r1, r3, #5
 8002b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5e:	0150      	lsls	r0, r2, #5
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4641      	mov	r1, r8
 8002b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b84:	ebb2 040a 	subs.w	r4, r2, sl
 8002b88:	eb63 050b 	sbc.w	r5, r3, fp
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	00eb      	lsls	r3, r5, #3
 8002b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9a:	00e2      	lsls	r2, r4, #3
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	18e3      	adds	r3, r4, r3
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	464b      	mov	r3, r9
 8002ba8:	eb45 0303 	adc.w	r3, r5, r3
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	028b      	lsls	r3, r1, #10
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	028a      	lsls	r2, r1, #10
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	61fa      	str	r2, [r7, #28]
 8002bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd8:	f7fd ff70 	bl	8000abc <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3750      	adds	r7, #80	@ 0x50
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000004 	.word	0x20000004

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	@ (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	0800857c 	.word	0x0800857c

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c64:	f7ff ffdc 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0b5b      	lsrs	r3, r3, #13
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	@ (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	0800857c 	.word	0x0800857c

08002c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	220f      	movs	r2, #15
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0203 	and.w	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <HAL_RCC_GetClockConfig+0x60>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0207 	and.w	r2, r3, #7
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07b      	b.n	8002df6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d0e:	d009      	beq.n	8002d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
 8002d16:	e005      	b.n	8002d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe fe54 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0104 	and.w	r1, r3, #4
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	f003 0210 	and.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b088      	sub	sp, #32
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e0e:	f7fe ffbd 	bl	8001d8c <HAL_GetTick>
 8002e12:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	e12a      	b.n	800307e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x36>
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e122      	b.n	800307e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_SPI_Transmit+0x48>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e11b      	b.n	800307e <HAL_SPI_Transmit+0x280>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e94:	d10f      	bne.n	8002eb6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec0:	2b40      	cmp	r3, #64	@ 0x40
 8002ec2:	d007      	beq.n	8002ed4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002edc:	d152      	bne.n	8002f84 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Transmit+0xee>
 8002ee6:	8b7b      	ldrh	r3, [r7, #26]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d145      	bne.n	8002f78 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	1c9a      	adds	r2, r3, #2
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f10:	e032      	b.n	8002f78 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d112      	bne.n	8002f46 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f44:	e018      	b.n	8002f78 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f46:	f7fe ff21 	bl	8001d8c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d803      	bhi.n	8002f5e <HAL_SPI_Transmit+0x160>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d102      	bne.n	8002f64 <HAL_SPI_Transmit+0x166>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e082      	b.n	800307e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1c7      	bne.n	8002f12 <HAL_SPI_Transmit+0x114>
 8002f82:	e053      	b.n	800302c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_SPI_Transmit+0x194>
 8002f8c:	8b7b      	ldrh	r3, [r7, #26]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d147      	bne.n	8003022 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fb8:	e033      	b.n	8003022 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d113      	bne.n	8002ff0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fee:	e018      	b.n	8003022 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff0:	f7fe fecc 	bl	8001d8c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d803      	bhi.n	8003008 <HAL_SPI_Transmit+0x20a>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d102      	bne.n	800300e <HAL_SPI_Transmit+0x210>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e02d      	b.n	800307e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1c6      	bne.n	8002fba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fbd9 	bl	80037e8 <SPI_EndRxTxTransaction>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800307c:	2300      	movs	r3, #0
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b088      	sub	sp, #32
 800308a:	af02      	add	r7, sp, #8
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d001      	beq.n	80030a6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e104      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ae:	d112      	bne.n	80030d6 <HAL_SPI_Receive+0x50>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2204      	movs	r2, #4
 80030bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f8f3 	bl	80032b8 <HAL_SPI_TransmitReceive>
 80030d2:	4603      	mov	r3, r0
 80030d4:	e0ec      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030d6:	f7fe fe59 	bl	8001d8c <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_SPI_Receive+0x62>
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0e1      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_SPI_Receive+0x74>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0da      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2204      	movs	r2, #4
 8003106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003148:	d10f      	bne.n	800316a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003174:	2b40      	cmp	r3, #64	@ 0x40
 8003176:	d007      	beq.n	8003188 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d170      	bne.n	8003272 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003190:	e035      	b.n	80031fe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d115      	bne.n	80031cc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f103 020c 	add.w	r2, r3, #12
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ca:	e018      	b.n	80031fe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031cc:	f7fe fdde 	bl	8001d8c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d803      	bhi.n	80031e4 <HAL_SPI_Receive+0x15e>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_Receive+0x164>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e058      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1c4      	bne.n	8003192 <HAL_SPI_Receive+0x10c>
 8003208:	e038      	b.n	800327c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d113      	bne.n	8003240 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	b292      	uxth	r2, r2
 8003224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800323e:	e018      	b.n	8003272 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003240:	f7fe fda4 	bl	8001d8c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d803      	bhi.n	8003258 <HAL_SPI_Receive+0x1d2>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d102      	bne.n	800325e <HAL_SPI_Receive+0x1d8>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e01e      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1c6      	bne.n	800320a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6839      	ldr	r1, [r7, #0]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa4b 	bl	800371c <SPI_EndRxTransaction>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	@ 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032c6:	2301      	movs	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ca:	f7fe fd5f 	bl	8001d8c <HAL_GetTick>
 80032ce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032d6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032e2:	7ffb      	ldrb	r3, [r7, #31]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d00c      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x4a>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ee:	d106      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x46>
 80032f8:	7ffb      	ldrb	r3, [r7, #31]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d001      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	e17f      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x5c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x5c>
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e174      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x6e>
 8003322:	2302      	movs	r3, #2
 8003324:	e16d      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b04      	cmp	r3, #4
 8003338:	d003      	beq.n	8003342 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2205      	movs	r2, #5
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	887a      	ldrh	r2, [r7, #2]
 8003352:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b40      	cmp	r3, #64	@ 0x40
 8003384:	d007      	beq.n	8003396 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800339e:	d17e      	bne.n	800349e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_SPI_TransmitReceive+0xf6>
 80033a8:	8afb      	ldrh	r3, [r7, #22]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d16c      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	881a      	ldrh	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	1c9a      	adds	r2, r3, #2
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d2:	e059      	b.n	8003488 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d11b      	bne.n	800341a <HAL_SPI_TransmitReceive+0x162>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_SPI_TransmitReceive+0x162>
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d113      	bne.n	800341a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	881a      	ldrh	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d119      	bne.n	800345c <HAL_SPI_TransmitReceive+0x1a4>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d014      	beq.n	800345c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	b292      	uxth	r2, r2
 800343e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	1c9a      	adds	r2, r3, #2
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003458:	2301      	movs	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800345c:	f7fe fc96 	bl	8001d8c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003468:	429a      	cmp	r2, r3
 800346a:	d80d      	bhi.n	8003488 <HAL_SPI_TransmitReceive+0x1d0>
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d009      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0bc      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1a0      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x11c>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d19b      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x11c>
 800349c:	e082      	b.n	80035a4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x1f4>
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d171      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d2:	e05d      	b.n	8003590 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d11c      	bne.n	800351c <HAL_SPI_TransmitReceive+0x264>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d017      	beq.n	800351c <HAL_SPI_TransmitReceive+0x264>
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d114      	bne.n	800351c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d119      	bne.n	800355e <HAL_SPI_TransmitReceive+0x2a6>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d014      	beq.n	800355e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800355a:	2301      	movs	r3, #1
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800355e:	f7fe fc15 	bl	8001d8c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356a:	429a      	cmp	r2, r3
 800356c:	d803      	bhi.n	8003576 <HAL_SPI_TransmitReceive+0x2be>
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d102      	bne.n	800357c <HAL_SPI_TransmitReceive+0x2c4>
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e038      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d19c      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x21c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d197      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a4:	6a3a      	ldr	r2, [r7, #32]
 80035a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f91d 	bl	80037e8 <SPI_EndRxTxTransaction>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e01d      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3728      	adds	r7, #40	@ 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800361c:	f7fe fbb6 	bl	8001d8c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4413      	add	r3, r2
 800362a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800362c:	f7fe fbae 	bl	8001d8c <HAL_GetTick>
 8003630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003632:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	015b      	lsls	r3, r3, #5
 8003638:	0d1b      	lsrs	r3, r3, #20
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003642:	e054      	b.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d050      	beq.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800364c:	f7fe fb9e 	bl	8001d8c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	429a      	cmp	r2, r3
 800365a:	d902      	bls.n	8003662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d13d      	bne.n	80036de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800367a:	d111      	bne.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003684:	d004      	beq.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368e:	d107      	bne.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800369e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a8:	d10f      	bne.n	80036ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e017      	b.n	800370e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d19b      	bne.n	8003644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000004 	.word	0x20000004

0800371c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003730:	d111      	bne.n	8003756 <SPI_EndRxTransaction+0x3a>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373a:	d004      	beq.n	8003746 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003744:	d107      	bne.n	8003756 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800375e:	d12a      	bne.n	80037b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003768:	d012      	beq.n	8003790 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	2180      	movs	r1, #128	@ 0x80
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff ff49 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02d      	beq.n	80037dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e026      	b.n	80037de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	2101      	movs	r1, #1
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff ff36 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01a      	beq.n	80037dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e013      	b.n	80037de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2200      	movs	r2, #0
 80037be:	2101      	movs	r1, #1
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff ff23 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e000      	b.n	80037de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2201      	movs	r2, #1
 80037fc:	2102      	movs	r1, #2
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff ff04 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e032      	b.n	8003880 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <SPI_EndRxTxTransaction+0xa0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <SPI_EndRxTxTransaction+0xa4>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	0d5b      	lsrs	r3, r3, #21
 8003826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003838:	d112      	bne.n	8003860 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	2180      	movs	r1, #128	@ 0x80
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fee1 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d016      	beq.n	800387e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e00f      	b.n	8003880 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3b01      	subs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d0f2      	beq.n	8003860 <SPI_EndRxTxTransaction+0x78>
 800387a:	e000      	b.n	800387e <SPI_EndRxTxTransaction+0x96>
        break;
 800387c:	bf00      	nop
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000004 	.word	0x20000004
 800388c:	165e9f81 	.word	0x165e9f81

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e041      	b.n	8003926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f839 	bl	800392e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 f9b2 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d001      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e044      	b.n	80039e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x6c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003986:	d013      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_TIM_Base_Start_IT+0xb8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x6c>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <HAL_TIM_Base_Start_IT+0xbc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x6c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <HAL_TIM_Base_Start_IT+0xc0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d010      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	e007      	b.n	80039e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40014000 	.word	0x40014000

08003a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d020      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0202 	mvn.w	r2, #2
 8003a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8d2 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8c4 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f8d5 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0204 	mvn.w	r2, #4
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8ac 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f89e 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8af 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d020      	beq.n	8003b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01b      	beq.n	8003b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0208 	mvn.w	r2, #8
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f886 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f878 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f889 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0210 	mvn.w	r2, #16
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2208      	movs	r2, #8
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f860 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f852 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f863 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0201 	mvn.w	r2, #1
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fece 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8e6 	bl	8003d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f834 	bl	8003c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0220 	mvn.w	r2, #32
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8b8 	bl	8003d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d34 <TIM_Base_SetConfig+0xfc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00f      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c56:	d00b      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a37      	ldr	r2, [pc, #220]	@ (8003d38 <TIM_Base_SetConfig+0x100>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a36      	ldr	r2, [pc, #216]	@ (8003d3c <TIM_Base_SetConfig+0x104>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a35      	ldr	r2, [pc, #212]	@ (8003d40 <TIM_Base_SetConfig+0x108>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2b      	ldr	r2, [pc, #172]	@ (8003d34 <TIM_Base_SetConfig+0xfc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c90:	d017      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a28      	ldr	r2, [pc, #160]	@ (8003d38 <TIM_Base_SetConfig+0x100>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <TIM_Base_SetConfig+0x104>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <TIM_Base_SetConfig+0x108>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a25      	ldr	r2, [pc, #148]	@ (8003d44 <TIM_Base_SetConfig+0x10c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	@ (8003d48 <TIM_Base_SetConfig+0x110>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	@ (8003d4c <TIM_Base_SetConfig+0x114>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003d34 <TIM_Base_SetConfig+0xfc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d103      	bne.n	8003d08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]
  }
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40014400 	.word	0x40014400
 8003d4c:	40014800 	.word	0x40014800

08003d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e042      	b.n	8003e10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fe6c 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	@ 0x24
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f973 	bl	80040a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	@ 0x28
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d175      	bne.n	8003f24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_UART_Transmit+0x2c>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e06e      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	@ 0x21
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e56:	f7fd ff99 	bl	8001d8c <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d108      	bne.n	8003e84 <HAL_UART_Transmit+0x6c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e003      	b.n	8003e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e8c:	e02e      	b.n	8003eec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f848 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e03a      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	3302      	adds	r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e007      	b.n	8003ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1cb      	bne.n	8003e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2140      	movs	r1, #64	@ 0x40
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f814 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e006      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	e03b      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d037      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f48:	f7fd ff20 	bl	8001d8c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e03a      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d020      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d01d      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d116      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f81d 	bl	8003fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e00f      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d0b4      	beq.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b095      	sub	sp, #84	@ 0x54
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004008:	643a      	str	r2, [r7, #64]	@ 0x40
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	61fb      	str	r3, [r7, #28]
   return(result);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800403c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d119      	bne.n	800408c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	60bb      	str	r3, [r7, #8]
   return(result);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004078:	61ba      	str	r2, [r7, #24]
 800407a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	613b      	str	r3, [r7, #16]
   return(result);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800409a:	bf00      	nop
 800409c:	3754      	adds	r7, #84	@ 0x54
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b0c0      	sub	sp, #256	@ 0x100
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	ea40 0301 	orr.w	r3, r0, r1
 80040d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004100:	f021 010c 	bic.w	r1, r1, #12
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800410e:	430b      	orrs	r3, r1
 8004110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	6999      	ldr	r1, [r3, #24]
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	ea40 0301 	orr.w	r3, r0, r1
 800412e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8f      	ldr	r3, [pc, #572]	@ (8004374 <UART_SetConfig+0x2cc>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d005      	beq.n	8004148 <UART_SetConfig+0xa0>
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b8d      	ldr	r3, [pc, #564]	@ (8004378 <UART_SetConfig+0x2d0>)
 8004144:	429a      	cmp	r2, r3
 8004146:	d104      	bne.n	8004152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fe fd8a 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 800414c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004150:	e003      	b.n	800415a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004152:	f7fe fd71 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8004156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004164:	f040 810c 	bne.w	8004380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	1891      	adds	r1, r2, r2
 8004180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004182:	415b      	adcs	r3, r3
 8004184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800418a:	4621      	mov	r1, r4
 800418c:	eb12 0801 	adds.w	r8, r2, r1
 8004190:	4629      	mov	r1, r5
 8004192:	eb43 0901 	adc.w	r9, r3, r1
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041aa:	4690      	mov	r8, r2
 80041ac:	4699      	mov	r9, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	eb18 0303 	adds.w	r3, r8, r3
 80041b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041b8:	462b      	mov	r3, r5
 80041ba:	eb49 0303 	adc.w	r3, r9, r3
 80041be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041d6:	460b      	mov	r3, r1
 80041d8:	18db      	adds	r3, r3, r3
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
 80041dc:	4613      	mov	r3, r2
 80041de:	eb42 0303 	adc.w	r3, r2, r3
 80041e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041ec:	f7fc fc66 	bl	8000abc <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4b61      	ldr	r3, [pc, #388]	@ (800437c <UART_SetConfig+0x2d4>)
 80041f6:	fba3 2302 	umull	r2, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	011c      	lsls	r4, r3, #4
 80041fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004202:	2200      	movs	r2, #0
 8004204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800420c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	1891      	adds	r1, r2, r2
 8004216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004218:	415b      	adcs	r3, r3
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004220:	4641      	mov	r1, r8
 8004222:	eb12 0a01 	adds.w	sl, r2, r1
 8004226:	4649      	mov	r1, r9
 8004228:	eb43 0b01 	adc.w	fp, r3, r1
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800423c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004240:	4692      	mov	sl, r2
 8004242:	469b      	mov	fp, r3
 8004244:	4643      	mov	r3, r8
 8004246:	eb1a 0303 	adds.w	r3, sl, r3
 800424a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424e:	464b      	mov	r3, r9
 8004250:	eb4b 0303 	adc.w	r3, fp, r3
 8004254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800426c:	460b      	mov	r3, r1
 800426e:	18db      	adds	r3, r3, r3
 8004270:	643b      	str	r3, [r7, #64]	@ 0x40
 8004272:	4613      	mov	r3, r2
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
 800427a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800427e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004282:	f7fc fc1b 	bl	8000abc <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4611      	mov	r1, r2
 800428c:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <UART_SetConfig+0x2d4>)
 800428e:	fba3 2301 	umull	r2, r3, r3, r1
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2264      	movs	r2, #100	@ 0x64
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042a2:	4b36      	ldr	r3, [pc, #216]	@ (800437c <UART_SetConfig+0x2d4>)
 80042a4:	fba3 2302 	umull	r2, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042b0:	441c      	add	r4, r3
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042cc:	415b      	adcs	r3, r3
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042d4:	4641      	mov	r1, r8
 80042d6:	1851      	adds	r1, r2, r1
 80042d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80042da:	4649      	mov	r1, r9
 80042dc:	414b      	adcs	r3, r1
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042ec:	4659      	mov	r1, fp
 80042ee:	00cb      	lsls	r3, r1, #3
 80042f0:	4651      	mov	r1, sl
 80042f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f6:	4651      	mov	r1, sl
 80042f8:	00ca      	lsls	r2, r1, #3
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	4642      	mov	r2, r8
 8004302:	189b      	adds	r3, r3, r2
 8004304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004308:	464b      	mov	r3, r9
 800430a:	460a      	mov	r2, r1
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004328:	460b      	mov	r3, r1
 800432a:	18db      	adds	r3, r3, r3
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432e:	4613      	mov	r3, r2
 8004330:	eb42 0303 	adc.w	r3, r2, r3
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800433a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800433e:	f7fc fbbd 	bl	8000abc <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <UART_SetConfig+0x2d4>)
 8004348:	fba3 1302 	umull	r1, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	2164      	movs	r1, #100	@ 0x64
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	3332      	adds	r3, #50	@ 0x32
 800435a:	4a08      	ldr	r2, [pc, #32]	@ (800437c <UART_SetConfig+0x2d4>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	f003 0207 	and.w	r2, r3, #7
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4422      	add	r2, r4
 800436e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004370:	e106      	b.n	8004580 <UART_SetConfig+0x4d8>
 8004372:	bf00      	nop
 8004374:	40011000 	.word	0x40011000
 8004378:	40011400 	.word	0x40011400
 800437c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800438a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800438e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004392:	4642      	mov	r2, r8
 8004394:	464b      	mov	r3, r9
 8004396:	1891      	adds	r1, r2, r2
 8004398:	6239      	str	r1, [r7, #32]
 800439a:	415b      	adcs	r3, r3
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043a2:	4641      	mov	r1, r8
 80043a4:	1854      	adds	r4, r2, r1
 80043a6:	4649      	mov	r1, r9
 80043a8:	eb43 0501 	adc.w	r5, r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	00eb      	lsls	r3, r5, #3
 80043b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ba:	00e2      	lsls	r2, r4, #3
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	4643      	mov	r3, r8
 80043c2:	18e3      	adds	r3, r4, r3
 80043c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c8:	464b      	mov	r3, r9
 80043ca:	eb45 0303 	adc.w	r3, r5, r3
 80043ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ee:	4629      	mov	r1, r5
 80043f0:	008b      	lsls	r3, r1, #2
 80043f2:	4621      	mov	r1, r4
 80043f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f8:	4621      	mov	r1, r4
 80043fa:	008a      	lsls	r2, r1, #2
 80043fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004400:	f7fc fb5c 	bl	8000abc <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b60      	ldr	r3, [pc, #384]	@ (800458c <UART_SetConfig+0x4e4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800441c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	61b9      	str	r1, [r7, #24]
 800442c:	415b      	adcs	r3, r3
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004434:	4641      	mov	r1, r8
 8004436:	1851      	adds	r1, r2, r1
 8004438:	6139      	str	r1, [r7, #16]
 800443a:	4649      	mov	r1, r9
 800443c:	414b      	adcs	r3, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800444c:	4659      	mov	r1, fp
 800444e:	00cb      	lsls	r3, r1, #3
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004456:	4651      	mov	r1, sl
 8004458:	00ca      	lsls	r2, r1, #3
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	4603      	mov	r3, r0
 8004460:	4642      	mov	r2, r8
 8004462:	189b      	adds	r3, r3, r2
 8004464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004468:	464b      	mov	r3, r9
 800446a:	460a      	mov	r2, r1
 800446c:	eb42 0303 	adc.w	r3, r2, r3
 8004470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800448c:	4649      	mov	r1, r9
 800448e:	008b      	lsls	r3, r1, #2
 8004490:	4641      	mov	r1, r8
 8004492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004496:	4641      	mov	r1, r8
 8004498:	008a      	lsls	r2, r1, #2
 800449a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800449e:	f7fc fb0d 	bl	8000abc <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <UART_SetConfig+0x4e4>)
 80044aa:	fba3 2301 	umull	r2, r3, r3, r1
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2264      	movs	r2, #100	@ 0x64
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	1acb      	subs	r3, r1, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	@ 0x32
 80044bc:	4a33      	ldr	r2, [pc, #204]	@ (800458c <UART_SetConfig+0x4e4>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c8:	441c      	add	r4, r3
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80044d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80044d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	415b      	adcs	r3, r3
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451a:	464b      	mov	r3, r9
 800451c:	460a      	mov	r2, r1
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	663b      	str	r3, [r7, #96]	@ 0x60
 800452e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800453c:	4649      	mov	r1, r9
 800453e:	008b      	lsls	r3, r1, #2
 8004540:	4641      	mov	r1, r8
 8004542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004546:	4641      	mov	r1, r8
 8004548:	008a      	lsls	r2, r1, #2
 800454a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800454e:	f7fc fab5 	bl	8000abc <__aeabi_uldivmod>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <UART_SetConfig+0x4e4>)
 8004558:	fba3 1302 	umull	r1, r3, r3, r2
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	2164      	movs	r1, #100	@ 0x64
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	3332      	adds	r3, #50	@ 0x32
 800456a:	4a08      	ldr	r2, [pc, #32]	@ (800458c <UART_SetConfig+0x4e4>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4422      	add	r2, r4
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004586:	46bd      	mov	sp, r7
 8004588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458c:	51eb851f 	.word	0x51eb851f

08004590 <MPU9250_Init>:
GPIO_TypeDef *_CS_GPIO;

// <---- ------------ Main MPu9250 Functions ------------ ---->
// <---- ------------ MPU9250 Initialize ------------ ---->
MPU9250_Result MPU9250_Init(SPI_HandleTypeDef* SPIx, GPIO_TypeDef *CS_GPIOx, uint16_t CS_PinNumber, MPU9250TypeDef* datastruct)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	80fb      	strh	r3, [r7, #6]
	_CS_GPIO = CS_GPIOx;
 80045a0:	4a84      	ldr	r2, [pc, #528]	@ (80047b4 <MPU9250_Init+0x224>)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6013      	str	r3, [r2, #0]
	_CS_PinNumber = CS_PinNumber;
 80045a6:	4a84      	ldr	r2, [pc, #528]	@ (80047b8 <MPU9250_Init+0x228>)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	8013      	strh	r3, [r2, #0]

	uint8_t WHO_AM_I = MPU9250_WHO_AM_I;
 80045ac:	2375      	movs	r3, #117	@ 0x75
 80045ae:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;
	uint8_t transmit_buffer[2]={0};
 80045b0:	2300      	movs	r3, #0
 80045b2:	823b      	strh	r3, [r7, #16]

	// <---- ------------ Initialize Registers ------------ ---->
	uint8_t CLOCK_SEL_PLL = 0x01;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75bb      	strb	r3, [r7, #22]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 80045b8:	236b      	movs	r3, #107	@ 0x6b
 80045ba:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = CLOCK_SEL_PLL;
 80045bc:	7dbb      	ldrb	r3, [r7, #22]
 80045be:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80045c0:	7c3b      	ldrb	r3, [r7, #16]
 80045c2:	7c7a      	ldrb	r2, [r7, #17]
 80045c4:	4619      	mov	r1, r3
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f934 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80045cc:	2019      	movs	r0, #25
 80045ce:	f000 f9de 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_EN = 0x20;
 80045d2:	2320      	movs	r3, #32
 80045d4:	757b      	strb	r3, [r7, #21]
	transmit_buffer[0] = MPU9250_USER_CTRL;
 80045d6:	236a      	movs	r3, #106	@ 0x6a
 80045d8:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_EN;
 80045da:	7d7b      	ldrb	r3, [r7, #21]
 80045dc:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80045de:	7c3b      	ldrb	r3, [r7, #16]
 80045e0:	7c7a      	ldrb	r2, [r7, #17]
 80045e2:	4619      	mov	r1, r3
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f925 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80045ea:	2019      	movs	r0, #25
 80045ec:	f000 f9cf 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t I2C_MST_CLK = 0x0D;
 80045f0:	230d      	movs	r3, #13
 80045f2:	753b      	strb	r3, [r7, #20]
	transmit_buffer[0] = I2C_MST_CTRL;
 80045f4:	2324      	movs	r3, #36	@ 0x24
 80045f6:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = I2C_MST_CLK;
 80045f8:	7d3b      	ldrb	r3, [r7, #20]
 80045fa:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80045fc:	7c3b      	ldrb	r3, [r7, #16]
 80045fe:	7c7a      	ldrb	r2, [r7, #17]
 8004600:	4619      	mov	r1, r3
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f916 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004608:	2019      	movs	r0, #25
 800460a:	f000 f9c0 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif

	uint8_t PWR_RESET = 0x80;
 800460e:	2380      	movs	r3, #128	@ 0x80
 8004610:	74fb      	strb	r3, [r7, #19]
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 8004612:	236b      	movs	r3, #107	@ 0x6b
 8004614:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = PWR_RESET;
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 800461a:	7c3b      	ldrb	r3, [r7, #16]
 800461c:	7c7a      	ldrb	r2, [r7, #17]
 800461e:	4619      	mov	r1, r3
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f907 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004626:	2019      	movs	r0, #25
 8004628:	f000 f9b1 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 1 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_1;
 800462c:	236b      	movs	r3, #107	@ 0x6b
 800462e:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT1;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004636:	7c3b      	ldrb	r3, [r7, #16]
 8004638:	7c7a      	ldrb	r2, [r7, #17]
 800463a:	4619      	mov	r1, r3
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f8f9 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004642:	2019      	movs	r0, #25
 8004644:	f000 f9a3 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_1, 1);
 8004648:	f107 0112 	add.w	r1, r7, #18
 800464c:	2301      	movs	r3, #1
 800464e:	226b      	movs	r2, #107	@ 0x6b
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f8b3 	bl	80047bc <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT1)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	7cbb      	ldrb	r3, [r7, #18]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <MPU9250_Init+0xd4>
		return MPU9250_RESULT_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0a3      	b.n	80047ac <MPU9250_Init+0x21c>

	// <---- ------------ Check WHO_AM_I Register ------------ ---->
	MPU9250_ReadData(SPIx, &temp, WHO_AM_I, 1);
 8004664:	7dfa      	ldrb	r2, [r7, #23]
 8004666:	f107 0112 	add.w	r1, r7, #18
 800466a:	2301      	movs	r3, #1
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f8a5 	bl	80047bc <MPU9250_ReadData>
	if(temp != MPU9250_I_AM)
 8004672:	7cbb      	ldrb	r3, [r7, #18]
 8004674:	2b71      	cmp	r3, #113	@ 0x71
 8004676:	d001      	beq.n	800467c <MPU9250_Init+0xec>
 		return MPU9250_RESULT_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e097      	b.n	80047ac <MPU9250_Init+0x21c>
#if FreeRTOS_En
	osDelay(25);
 800467c:	2019      	movs	r0, #25
 800467e:	f000 f986 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif

	// <---- ------------ Configure PowerManagement 2 ------------ ---->
	transmit_buffer[0] = MPU9250_PWR_MGMT_2;
 8004682:	236c      	movs	r3, #108	@ 0x6c
 8004684:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->PWR_MGMT2;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	785b      	ldrb	r3, [r3, #1]
 800468a:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 800468c:	7c3b      	ldrb	r3, [r7, #16]
 800468e:	7c7a      	ldrb	r2, [r7, #17]
 8004690:	4619      	mov	r1, r3
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f8ce 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004698:	2019      	movs	r0, #25
 800469a:	f000 f978 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_PWR_MGMT_2, 1);
 800469e:	f107 0112 	add.w	r1, r7, #18
 80046a2:	2301      	movs	r3, #1
 80046a4:	226c      	movs	r2, #108	@ 0x6c
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f888 	bl	80047bc <MPU9250_ReadData>
	if(temp != datastruct->PWR_MGMT2)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	785a      	ldrb	r2, [r3, #1]
 80046b0:	7cbb      	ldrb	r3, [r7, #18]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <MPU9250_Init+0x12a>
		return MPU9250_RESULT_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e078      	b.n	80047ac <MPU9250_Init+0x21c>

	// <---- ------------ Configure Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_CONFIG;
 80046ba:	231a      	movs	r3, #26
 80046bc:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Gyro_DLPF;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 80046c4:	7c3b      	ldrb	r3, [r7, #16]
 80046c6:	7c7a      	ldrb	r2, [r7, #17]
 80046c8:	4619      	mov	r1, r3
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f8b2 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 80046d0:	2019      	movs	r0, #25
 80046d2:	f000 f95c 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_CONFIG, 1);
 80046d6:	f107 0112 	add.w	r1, r7, #18
 80046da:	2301      	movs	r3, #1
 80046dc:	221a      	movs	r2, #26
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f86c 	bl	80047bc <MPU9250_ReadData>
	if(temp != datastruct->Gyro_DLPF)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	789a      	ldrb	r2, [r3, #2]
 80046e8:	7cbb      	ldrb	r3, [r7, #18]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <MPU9250_Init+0x162>
		return MPU9250_RESULT_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e05c      	b.n	80047ac <MPU9250_Init+0x21c>

	// <---- ------------ Configure Gyro_Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_GYRO_CONFIG;
 80046f2:	231b      	movs	r3, #27
 80046f4:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Gyro_Range) << 3;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	791b      	ldrb	r3, [r3, #4]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004700:	7c3b      	ldrb	r3, [r7, #16]
 8004702:	7c7a      	ldrb	r2, [r7, #17]
 8004704:	4619      	mov	r1, r3
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f894 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 800470c:	2019      	movs	r0, #25
 800470e:	f000 f93e 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_GYRO_CONFIG, 1);
 8004712:	f107 0112 	add.w	r1, r7, #18
 8004716:	2301      	movs	r3, #1
 8004718:	221b      	movs	r2, #27
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f84e 	bl	80047bc <MPU9250_ReadData>
	if(temp != ((datastruct->Gyro_Range) << 3))
 8004720:	7cbb      	ldrb	r3, [r7, #18]
 8004722:	461a      	mov	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <MPU9250_Init+0x1a2>
		return MPU9250_RESULT_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e03c      	b.n	80047ac <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register 2 ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG_2;
 8004732:	231d      	movs	r3, #29
 8004734:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = datastruct->Accel_DLPF;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	78db      	ldrb	r3, [r3, #3]
 800473a:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 800473c:	7c3b      	ldrb	r3, [r7, #16]
 800473e:	7c7a      	ldrb	r2, [r7, #17]
 8004740:	4619      	mov	r1, r3
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f876 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004748:	2019      	movs	r0, #25
 800474a:	f000 f920 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG_2, 1);
 800474e:	f107 0112 	add.w	r1, r7, #18
 8004752:	2301      	movs	r3, #1
 8004754:	221d      	movs	r2, #29
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f830 	bl	80047bc <MPU9250_ReadData>
	if(temp != datastruct->Accel_DLPF)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	78da      	ldrb	r2, [r3, #3]
 8004760:	7cbb      	ldrb	r3, [r7, #18]
 8004762:	429a      	cmp	r2, r3
 8004764:	d001      	beq.n	800476a <MPU9250_Init+0x1da>
		return MPU9250_RESULT_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e020      	b.n	80047ac <MPU9250_Init+0x21c>

	// <---- ------------ Configure Accel Config Register ------------ ---->
	transmit_buffer[0] = MPU9250_ACCEL_CONFIG;
 800476a:	231c      	movs	r3, #28
 800476c:	743b      	strb	r3, [r7, #16]
	transmit_buffer[1] = (datastruct->Accel_Range) << 3;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	795b      	ldrb	r3, [r3, #5]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	747b      	strb	r3, [r7, #17]
	MPU9250_WriteData(SPIx, transmit_buffer[0], transmit_buffer[1]);
 8004778:	7c3b      	ldrb	r3, [r7, #16]
 800477a:	7c7a      	ldrb	r2, [r7, #17]
 800477c:	4619      	mov	r1, r3
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f858 	bl	8004834 <MPU9250_WriteData>
#if FreeRTOS_En
	osDelay(25);
 8004784:	2019      	movs	r0, #25
 8004786:	f000 f902 	bl	800498e <osDelay>
#else
	HAL_Delay(25);
#endif
	MPU9250_ReadData(SPIx, &temp, MPU9250_ACCEL_CONFIG, 1);
 800478a:	f107 0112 	add.w	r1, r7, #18
 800478e:	2301      	movs	r3, #1
 8004790:	221c      	movs	r2, #28
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f812 	bl	80047bc <MPU9250_ReadData>
	if(temp != ((datastruct->Accel_Range) << 3))
 8004798:	7cbb      	ldrb	r3, [r7, #18]
 800479a:	461a      	mov	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	795b      	ldrb	r3, [r3, #5]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d001      	beq.n	80047aa <MPU9250_Init+0x21a>
		return MPU9250_RESULT_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <MPU9250_Init+0x21c>

	/* Return OK */
	return MPU9250_RESULT_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000490 	.word	0x20000490
 80047b8:	2000048c 	.word	0x2000048c

080047bc <MPU9250_ReadData>:

// <---- ------------ MPU9250 Read Data ------------ ---->
MPU9250_Result MPU9250_ReadData(SPI_HandleTypeDef* SPIx, uint8_t* buffer, uint8_t addr, uint8_t num)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	460b      	mov	r3, r1
 80047cc:	71fb      	strb	r3, [r7, #7]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71bb      	strb	r3, [r7, #6]
	uint8_t reg = addr | 0x80;
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	75fb      	strb	r3, [r7, #23]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <MPU9250_ReadData+0x70>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <MPU9250_ReadData+0x74>)
 80047e2:	8811      	ldrh	r1, [r2, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fd82 	bl	80022f0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80047ec:	2014      	movs	r0, #20
 80047ee:	f7fd fad9 	bl	8001da4 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, &reg, 1, 1000);
 80047f2:	f107 0117 	add.w	r1, r7, #23
 80047f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047fa:	2201      	movs	r2, #1
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7fe fafe 	bl	8002dfe <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPIx, buffer, num, 1000);
 8004802:	79bb      	ldrb	r3, [r7, #6]
 8004804:	b29a      	uxth	r2, r3
 8004806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7fe fc3a 	bl	8003086 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <MPU9250_ReadData+0x70>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a06      	ldr	r2, [pc, #24]	@ (8004830 <MPU9250_ReadData+0x74>)
 8004818:	8811      	ldrh	r1, [r2, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd fd67 	bl	80022f0 <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000490 	.word	0x20000490
 8004830:	2000048c 	.word	0x2000048c

08004834 <MPU9250_WriteData>:

// <---- ------------ MPU9250 Write Data ------------ ---->
MPU9250_Result MPU9250_WriteData(SPI_HandleTypeDef* SPIx, uint8_t addr, uint8_t data)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
 8004840:	4613      	mov	r3, r2
 8004842:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {addr, data};
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	733b      	strb	r3, [r7, #12]
 8004848:	78bb      	ldrb	r3, [r7, #2]
 800484a:	737b      	strb	r3, [r7, #13]
	
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_RESET);
 800484c:	4b0f      	ldr	r3, [pc, #60]	@ (800488c <MPU9250_WriteData+0x58>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0f      	ldr	r2, [pc, #60]	@ (8004890 <MPU9250_WriteData+0x5c>)
 8004852:	8811      	ldrh	r1, [r2, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fd4a 	bl	80022f0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800485c:	2014      	movs	r0, #20
 800485e:	f7fd faa1 	bl	8001da4 <HAL_Delay>
	HAL_SPI_Transmit(SPIx, buffer, 2, 1000);
 8004862:	f107 010c 	add.w	r1, r7, #12
 8004866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800486a:	2202      	movs	r2, #2
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fe fac6 	bl	8002dfe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_CS_GPIO, _CS_PinNumber, GPIO_PIN_SET);
 8004872:	4b06      	ldr	r3, [pc, #24]	@ (800488c <MPU9250_WriteData+0x58>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a06      	ldr	r2, [pc, #24]	@ (8004890 <MPU9250_WriteData+0x5c>)
 8004878:	8811      	ldrh	r1, [r2, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fd37 	bl	80022f0 <HAL_GPIO_WritePin>

	/* Return OK */
	return MPU9250_RESULT_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000490 	.word	0x20000490
 8004890:	2000048c 	.word	0x2000048c

08004894 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a6:	2b84      	cmp	r3, #132	@ 0x84
 80048a8:	d005      	beq.n	80048b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	3303      	adds	r3, #3
 80048b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ca:	f3ef 8305 	mrs	r3, IPSR
 80048ce:	607b      	str	r3, [r7, #4]
  return(result);
 80048d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80048ec:	f001 f930 	bl	8005b50 <vTaskStartScheduler>
  
  return osOK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80048f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f8:	b089      	sub	sp, #36	@ 0x24
 80048fa:	af04      	add	r7, sp, #16
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d020      	beq.n	800494a <osThreadCreate+0x54>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01c      	beq.n	800494a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685c      	ldr	r4, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691e      	ldr	r6, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ffb6 	bl	8004894 <makeFreeRtosPriority>
 8004928:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004932:	9202      	str	r2, [sp, #8]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	9100      	str	r1, [sp, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4632      	mov	r2, r6
 800493c:	4629      	mov	r1, r5
 800493e:	4620      	mov	r0, r4
 8004940:	f000 ff20 	bl	8005784 <xTaskCreateStatic>
 8004944:	4603      	mov	r3, r0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e01c      	b.n	8004984 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685c      	ldr	r4, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004956:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff98 	bl	8004894 <makeFreeRtosPriority>
 8004964:	4602      	mov	r2, r0
 8004966:	f107 030c 	add.w	r3, r7, #12
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	9200      	str	r2, [sp, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	4632      	mov	r2, r6
 8004972:	4629      	mov	r1, r5
 8004974:	4620      	mov	r0, r4
 8004976:	f000 ff65 	bl	8005844 <xTaskCreate>
 800497a:	4603      	mov	r3, r0
 800497c:	2b01      	cmp	r3, #1
 800497e:	d001      	beq.n	8004984 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800498e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <osDelay+0x16>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e000      	b.n	80049a6 <osDelay+0x18>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f89c 	bl	8005ae4 <vTaskDelay>
  
  return osOK;
 80049ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80049b6:	b590      	push	{r4, r7, lr}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af02      	add	r7, sp, #8
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d011      	beq.n	80049ec <osMessageCreate+0x36>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2400      	movs	r4, #0
 80049e2:	9400      	str	r4, [sp, #0]
 80049e4:	f000 f9e2 	bl	8004dac <xQueueGenericCreateStatic>
 80049e8:	4603      	mov	r3, r0
 80049ea:	e008      	b.n	80049fe <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	4619      	mov	r1, r3
 80049f8:	f000 fa55 	bl	8004ea6 <xQueueGenericCreate>
 80049fc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd90      	pop	{r4, r7, pc}
	...

08004a08 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <osMessagePut+0x1e>
    ticks = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004a26:	f7ff ff4d 	bl	80048c4 <inHandlerMode>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d018      	beq.n	8004a62 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004a30:	f107 0210 	add.w	r2, r7, #16
 8004a34:	f107 0108 	add.w	r1, r7, #8
 8004a38:	2300      	movs	r3, #0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fb90 	bl	8005160 <xQueueGenericSendFromISR>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d001      	beq.n	8004a4a <osMessagePut+0x42>
      return osErrorOS;
 8004a46:	23ff      	movs	r3, #255	@ 0xff
 8004a48:	e018      	b.n	8004a7c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d014      	beq.n	8004a7a <osMessagePut+0x72>
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <osMessagePut+0x7c>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	e00b      	b.n	8004a7a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004a62:	f107 0108 	add.w	r1, r7, #8
 8004a66:	2300      	movs	r3, #0
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fa76 	bl	8004f5c <xQueueGenericSend>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <osMessagePut+0x72>
      return osErrorOS;
 8004a76:	23ff      	movs	r3, #255	@ 0xff
 8004a78:	e000      	b.n	8004a7c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b08b      	sub	sp, #44	@ 0x2c
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	617b      	str	r3, [r7, #20]
    return event;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	461c      	mov	r4, r3
 8004aaa:	f107 0314 	add.w	r3, r7, #20
 8004aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ab6:	e054      	b.n	8004b62 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d103      	bne.n	8004ad0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ace:	e009      	b.n	8004ae4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d006      	beq.n	8004ae4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <osMessageGet+0x5c>
      ticks = 1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004ae4:	f7ff feee 	bl	80048c4 <inHandlerMode>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01c      	beq.n	8004b28 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004aee:	f107 0220 	add.w	r2, r7, #32
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	68b8      	ldr	r0, [r7, #8]
 8004afc:	f000 fcb0 	bl	8005460 <xQueueReceiveFromISR>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d102      	bne.n	8004b0c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004b06:	2310      	movs	r3, #16
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	e001      	b.n	8004b10 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01d      	beq.n	8004b52 <osMessageGet+0xca>
 8004b16:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <osMessageGet+0xe4>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	e014      	b.n	8004b52 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b30:	4619      	mov	r1, r3
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f000 fbb2 	bl	800529c <xQueueReceive>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d102      	bne.n	8004b44 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004b3e:	2310      	movs	r3, #16
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e006      	b.n	8004b52 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <osMessageGet+0xc6>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <osMessageGet+0xc8>
 8004b4e:	2340      	movs	r3, #64	@ 0x40
 8004b50:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	461c      	mov	r4, r3
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	372c      	adds	r7, #44	@ 0x2c
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd90      	pop	{r4, r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	e000ed04 	.word	0xe000ed04

08004b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f103 0208 	add.w	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f103 0208 	add.w	r2, r3, #8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f103 0208 	add.w	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d103      	bne.n	8004c32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e00c      	b.n	8004c4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3308      	adds	r3, #8
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e002      	b.n	8004c40 <vListInsert+0x2e>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d2f6      	bcs.n	8004c3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d103      	bne.n	8004cb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d04:	f001 fd80 	bl	8006808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d34:	3b01      	subs	r3, #1
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	22ff      	movs	r2, #255	@ 0xff
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	22ff      	movs	r2, #255	@ 0xff
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d114      	bne.n	8004d84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01a      	beq.n	8004d98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3310      	adds	r3, #16
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f94c 	bl	8006004 <xTaskRemoveFromEventList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <xQueueGenericReset+0xd0>)
 8004d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	e009      	b.n	8004d98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3310      	adds	r3, #16
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fef1 	bl	8004b70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3324      	adds	r3, #36	@ 0x24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff feec 	bl	8004b70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d98:	f001 fd68 	bl	800686c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d9c:	2301      	movs	r3, #1
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	@ 0x38
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <xQueueGenericCreateStatic+0x56>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <xQueueGenericCreateStatic+0x5a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericCreateStatic+0x5c>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <xQueueGenericCreateStatic+0x84>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericCreateStatic+0x88>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGenericCreateStatic+0x8a>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61fb      	str	r3, [r7, #28]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e52:	2348      	movs	r3, #72	@ 0x48
 8004e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b48      	cmp	r3, #72	@ 0x48
 8004e5a:	d00b      	beq.n	8004e74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	61bb      	str	r3, [r7, #24]
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f840 	bl	8004f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3730      	adds	r7, #48	@ 0x30
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b08a      	sub	sp, #40	@ 0x28
 8004eaa:	af02      	add	r7, sp, #8
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	613b      	str	r3, [r7, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	3348      	adds	r3, #72	@ 0x48
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fdb3 	bl	8006a4c <pvPortMalloc>
 8004ee6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d011      	beq.n	8004f12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3348      	adds	r3, #72	@ 0x48
 8004ef6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f805 	bl	8004f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f12:	69bb      	ldr	r3, [r7, #24]
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	69b8      	ldr	r0, [r7, #24]
 8004f4e:	f7ff fec3 	bl	8004cd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	@ 0x38
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <xQueueGenericSend+0x34>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSend+0x42>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <xQueueGenericSend+0x46>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueGenericSend+0x48>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <xQueueGenericSend+0x64>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d103      	bne.n	8004fce <xQueueGenericSend+0x72>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <xQueueGenericSend+0x76>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueGenericSend+0x78>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueGenericSend+0x94>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	623b      	str	r3, [r7, #32]
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff0:	f001 f9ce 	bl	8006390 <xTaskGetSchedulerState>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <xQueueGenericSend+0xa4>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <xQueueGenericSend+0xa8>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <xQueueGenericSend+0xaa>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <xQueueGenericSend+0xc6>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	61fb      	str	r3, [r7, #28]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005022:	f001 fbf1 	bl	8006808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <xQueueGenericSend+0xdc>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d129      	bne.n	800508c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800503e:	f000 fa91 	bl	8005564 <prvCopyDataToQueue>
 8005042:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	3324      	adds	r3, #36	@ 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f000 ffd7 	bl	8006004 <xTaskRemoveFromEventList>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800505c:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <xQueueGenericSend+0x200>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	e00a      	b.n	8005084 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005074:	4b39      	ldr	r3, [pc, #228]	@ (800515c <xQueueGenericSend+0x200>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005084:	f001 fbf2 	bl	800686c <vPortExitCritical>
				return pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	e063      	b.n	8005154 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005092:	f001 fbeb 	bl	800686c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005096:	2300      	movs	r3, #0
 8005098:	e05c      	b.n	8005154 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800509a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f811 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050aa:	2301      	movs	r3, #1
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050ae:	f001 fbdd 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050b2:	f000 fdb7 	bl	8005c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050b6:	f001 fba7 	bl	8006808 <vPortEnterCritical>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d103      	bne.n	80050d0 <xQueueGenericSend+0x174>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSend+0x18a>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e6:	f001 fbc1 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ea:	1d3a      	adds	r2, r7, #4
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f800 	bl	80060f8 <xTaskCheckForTimeOut>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d124      	bne.n	8005148 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005100:	f000 fb28 	bl	8005754 <prvIsQueueFull>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	3310      	adds	r3, #16
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ff50 	bl	8005fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800511a:	f000 fab3 	bl	8005684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800511e:	f000 fd8f 	bl	8005c40 <xTaskResumeAll>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f af7c 	bne.w	8005022 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <xQueueGenericSend+0x200>)
 800512c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	e772      	b.n	8005022 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800513c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800513e:	f000 faa1 	bl	8005684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005142:	f000 fd7d 	bl	8005c40 <xTaskResumeAll>
 8005146:	e76c      	b.n	8005022 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800514a:	f000 fa9b 	bl	8005684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800514e:	f000 fd77 	bl	8005c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005152:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005154:	4618      	mov	r0, r3
 8005156:	3738      	adds	r7, #56	@ 0x38
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b090      	sub	sp, #64	@ 0x40
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <xQueueGenericSendFromISR+0x3e>
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSendFromISR+0x42>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSendFromISR+0x44>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d103      	bne.n	80051ce <xQueueGenericSendFromISR+0x6e>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <xQueueGenericSendFromISR+0x72>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueGenericSendFromISR+0x74>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	623b      	str	r3, [r7, #32]
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051f0:	f001 fbea 	bl	80069c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051f4:	f3ef 8211 	mrs	r2, BASEPRI
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61fa      	str	r2, [r7, #28]
 800520a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800520c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800520e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <xQueueGenericSendFromISR+0xc2>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d12f      	bne.n	8005282 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005228:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005238:	f000 f994 	bl	8005564 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800523c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d112      	bne.n	800526c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	3324      	adds	r3, #36	@ 0x24
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fed6 	bl	8006004 <xTaskRemoveFromEventList>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e007      	b.n	800527c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800526c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005270:	3301      	adds	r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	b25a      	sxtb	r2, r3
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800527c:	2301      	movs	r3, #1
 800527e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005280:	e001      	b.n	8005286 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005282:	2300      	movs	r3, #0
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005288:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005290:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005294:	4618      	mov	r0, r3
 8005296:	3740      	adds	r7, #64	@ 0x40
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	@ 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <xQueueReceive+0x32>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	623b      	str	r3, [r7, #32]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d103      	bne.n	80052dc <xQueueReceive+0x40>
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <xQueueReceive+0x44>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <xQueueReceive+0x46>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xQueueReceive+0x62>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	61fb      	str	r3, [r7, #28]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052fe:	f001 f847 	bl	8006390 <xTaskGetSchedulerState>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <xQueueReceive+0x72>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <xQueueReceive+0x76>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <xQueueReceive+0x78>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <xQueueReceive+0x94>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61bb      	str	r3, [r7, #24]
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005330:	f001 fa6a 	bl	8006808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01f      	beq.n	8005380 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 f978 	bl	8005638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	1e5a      	subs	r2, r3, #1
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00f      	beq.n	8005378 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	3310      	adds	r3, #16
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fe51 	bl	8006004 <xTaskRemoveFromEventList>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005368:	4b3c      	ldr	r3, [pc, #240]	@ (800545c <xQueueReceive+0x1c0>)
 800536a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005378:	f001 fa78 	bl	800686c <vPortExitCritical>
				return pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	e069      	b.n	8005454 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005386:	f001 fa71 	bl	800686c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800538a:	2300      	movs	r3, #0
 800538c:	e062      	b.n	8005454 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fe97 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053a2:	f001 fa63 	bl	800686c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053a6:	f000 fc3d 	bl	8005c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053aa:	f001 fa2d 	bl	8006808 <vPortEnterCritical>
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053b4:	b25b      	sxtb	r3, r3
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d103      	bne.n	80053c4 <xQueueReceive+0x128>
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ca:	b25b      	sxtb	r3, r3
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d103      	bne.n	80053da <xQueueReceive+0x13e>
 80053d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053da:	f001 fa47 	bl	800686c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053de:	1d3a      	adds	r2, r7, #4
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fe86 	bl	80060f8 <xTaskCheckForTimeOut>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d123      	bne.n	800543a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053f4:	f000 f998 	bl	8005728 <prvIsQueueEmpty>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d017      	beq.n	800542e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	3324      	adds	r3, #36	@ 0x24
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4611      	mov	r1, r2
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fdd6 	bl	8005fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800540c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540e:	f000 f939 	bl	8005684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005412:	f000 fc15 	bl	8005c40 <xTaskResumeAll>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d189      	bne.n	8005330 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800541c:	4b0f      	ldr	r3, [pc, #60]	@ (800545c <xQueueReceive+0x1c0>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	e780      	b.n	8005330 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800542e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005430:	f000 f928 	bl	8005684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005434:	f000 fc04 	bl	8005c40 <xTaskResumeAll>
 8005438:	e77a      	b.n	8005330 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800543a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800543c:	f000 f922 	bl	8005684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005440:	f000 fbfe 	bl	8005c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005446:	f000 f96f 	bl	8005728 <prvIsQueueEmpty>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	f43f af6f 	beq.w	8005330 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005452:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	@ 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	@ 0x38
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	623b      	str	r3, [r7, #32]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <xQueueReceiveFromISR+0x3c>
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <xQueueReceiveFromISR+0x40>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <xQueueReceiveFromISR+0x42>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	61fb      	str	r3, [r7, #28]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054be:	f001 fa83 	bl	80069c8 <vPortValidateInterruptPriority>
	__asm volatile
 80054c2:	f3ef 8211 	mrs	r2, BASEPRI
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	61ba      	str	r2, [r7, #24]
 80054d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80054da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02f      	beq.n	800554a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054f8:	f000 f89e 	bl	8005638 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005504:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d112      	bne.n	8005534 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	3310      	adds	r3, #16
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fd72 	bl	8006004 <xTaskRemoveFromEventList>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00e      	beq.n	8005544 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e007      	b.n	8005544 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005538:	3301      	adds	r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	b25a      	sxtb	r2, r3
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005544:	2301      	movs	r3, #1
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
 8005548:	e001      	b.n	800554e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800554a:	2300      	movs	r3, #0
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
 800554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005550:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f383 8811 	msr	BASEPRI, r3
}
 8005558:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800555a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800555c:	4618      	mov	r0, r3
 800555e:	3738      	adds	r7, #56	@ 0x38
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d14d      	bne.n	8005626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 ff1c 	bl	80063cc <xTaskPriorityDisinherit>
 8005594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	609a      	str	r2, [r3, #8]
 800559c:	e043      	b.n	8005626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d119      	bne.n	80055d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6858      	ldr	r0, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	461a      	mov	r2, r3
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	f001 ff2f 	bl	8007412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d32b      	bcc.n	8005626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e026      	b.n	8005626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68d8      	ldr	r0, [r3, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	461a      	mov	r2, r3
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	f001 ff15 	bl	8007412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	425b      	negs	r3, r3
 80055f2:	441a      	add	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d207      	bcs.n	8005614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	425b      	negs	r3, r3
 800560e:	441a      	add	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d105      	bne.n	8005626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	3b01      	subs	r3, #1
 8005624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800562e:	697b      	ldr	r3, [r7, #20]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	441a      	add	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d303      	bcc.n	800566c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68d9      	ldr	r1, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005674:	461a      	mov	r2, r3
 8005676:	6838      	ldr	r0, [r7, #0]
 8005678:	f001 fecb 	bl	8007412 <memcpy>
	}
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800568c:	f001 f8bc 	bl	8006808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005698:	e011      	b.n	80056be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d012      	beq.n	80056c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3324      	adds	r3, #36	@ 0x24
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fcac 	bl	8006004 <xTaskRemoveFromEventList>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056b2:	f000 fd85 	bl	80061c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	dce9      	bgt.n	800569a <prvUnlockQueue+0x16>
 80056c6:	e000      	b.n	80056ca <prvUnlockQueue+0x46>
					break;
 80056c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	22ff      	movs	r2, #255	@ 0xff
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056d2:	f001 f8cb 	bl	800686c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056d6:	f001 f897 	bl	8006808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056e2:	e011      	b.n	8005708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d012      	beq.n	8005712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3310      	adds	r3, #16
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc87 	bl	8006004 <xTaskRemoveFromEventList>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056fc:	f000 fd60 	bl	80061c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	3b01      	subs	r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dce9      	bgt.n	80056e4 <prvUnlockQueue+0x60>
 8005710:	e000      	b.n	8005714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	22ff      	movs	r2, #255	@ 0xff
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800571c:	f001 f8a6 	bl	800686c <vPortExitCritical>
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005730:	f001 f86a 	bl	8006808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e001      	b.n	8005746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005746:	f001 f891 	bl	800686c <vPortExitCritical>

	return xReturn;
 800574a:	68fb      	ldr	r3, [r7, #12]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800575c:	f001 f854 	bl	8006808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	429a      	cmp	r2, r3
 800576a:	d102      	bne.n	8005772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e001      	b.n	8005776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005776:	f001 f879 	bl	800686c <vPortExitCritical>

	return xReturn;
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08e      	sub	sp, #56	@ 0x38
 8005788:	af04      	add	r7, sp, #16
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	623b      	str	r3, [r7, #32]
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	61fb      	str	r3, [r7, #28]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057ce:	23a0      	movs	r3, #160	@ 0xa0
 80057d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80057d6:	d00b      	beq.n	80057f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	61bb      	str	r3, [r7, #24]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01e      	beq.n	8005836 <xTaskCreateStatic+0xb2>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01b      	beq.n	8005836 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	2202      	movs	r2, #2
 800580c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005810:	2300      	movs	r3, #0
 8005812:	9303      	str	r3, [sp, #12]
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	9302      	str	r3, [sp, #8]
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f851 	bl	80058d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800582e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005830:	f000 f8ee 	bl	8005a10 <prvAddNewTaskToReadyList>
 8005834:	e001      	b.n	800583a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800583a:	697b      	ldr	r3, [r7, #20]
	}
 800583c:	4618      	mov	r0, r3
 800583e:	3728      	adds	r7, #40	@ 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08c      	sub	sp, #48	@ 0x30
 8005848:	af04      	add	r7, sp, #16
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f8f7 	bl	8006a4c <pvPortMalloc>
 800585e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00e      	beq.n	8005884 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005866:	20a0      	movs	r0, #160	@ 0xa0
 8005868:	f001 f8f0 	bl	8006a4c <pvPortMalloc>
 800586c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	631a      	str	r2, [r3, #48]	@ 0x30
 800587a:	e005      	b.n	8005888 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800587c:	6978      	ldr	r0, [r7, #20]
 800587e:	f001 f9b3 	bl	8006be8 <vPortFree>
 8005882:	e001      	b.n	8005888 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d017      	beq.n	80058be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	2300      	movs	r3, #0
 800589a:	9303      	str	r3, [sp, #12]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	9302      	str	r3, [sp, #8]
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f80f 	bl	80058d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058b2:	69f8      	ldr	r0, [r7, #28]
 80058b4:	f000 f8ac 	bl	8005a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058b8:	2301      	movs	r3, #1
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e002      	b.n	80058c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058c4:	69bb      	ldr	r3, [r7, #24]
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e8:	3b01      	subs	r3, #1
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	617b      	str	r3, [r7, #20]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01f      	beq.n	8005960 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e012      	b.n	800594c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	7819      	ldrb	r1, [r3, #0]
 800592e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	3334      	adds	r3, #52	@ 0x34
 8005936:	460a      	mov	r2, r1
 8005938:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d006      	beq.n	8005954 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3301      	adds	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b0f      	cmp	r3, #15
 8005950:	d9e9      	bls.n	8005926 <prvInitialiseNewTask+0x56>
 8005952:	e000      	b.n	8005956 <prvInitialiseNewTask+0x86>
			{
				break;
 8005954:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800595e:	e003      	b.n	8005968 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	2b06      	cmp	r3, #6
 800596c:	d901      	bls.n	8005972 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800596e:	2306      	movs	r3, #6
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005976:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	2200      	movs	r2, #0
 8005982:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	3304      	adds	r3, #4
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff f911 	bl	8004bb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	3318      	adds	r3, #24
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff f90c 	bl	8004bb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	f1c3 0207 	rsb	r2, r3, #7
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	334c      	adds	r3, #76	@ 0x4c
 80059c2:	224c      	movs	r2, #76	@ 0x4c
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fc41 	bl	800724e <memset>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005a04 <prvInitialiseNewTask+0x134>)
 80059d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005a08 <prvInitialiseNewTask+0x138>)
 80059d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059da:	4a0c      	ldr	r2, [pc, #48]	@ (8005a0c <prvInitialiseNewTask+0x13c>)
 80059dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	69b8      	ldr	r0, [r7, #24]
 80059e4:	f000 fde0 	bl	80065a8 <pxPortInitialiseStack>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059fa:	bf00      	nop
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200041f0 	.word	0x200041f0
 8005a08:	20004258 	.word	0x20004258
 8005a0c:	200042c0 	.word	0x200042c0

08005a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a18:	f000 fef6 	bl	8006808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac8 <prvAddNewTaskToReadyList+0xb8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	4a29      	ldr	r2, [pc, #164]	@ (8005ac8 <prvAddNewTaskToReadyList+0xb8>)
 8005a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a26:	4b29      	ldr	r3, [pc, #164]	@ (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a2e:	4a27      	ldr	r2, [pc, #156]	@ (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a34:	4b24      	ldr	r3, [pc, #144]	@ (8005ac8 <prvAddNewTaskToReadyList+0xb8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d110      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a3c:	f000 fbe4 	bl	8006208 <prvInitialiseTaskLists>
 8005a40:	e00d      	b.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a42:	4b23      	ldr	r3, [pc, #140]	@ (8005ad0 <prvAddNewTaskToReadyList+0xc0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a4a:	4b20      	ldr	r3, [pc, #128]	@ (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d802      	bhi.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a58:	4a1c      	ldr	r2, [pc, #112]	@ (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	4b19      	ldr	r3, [pc, #100]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	4a18      	ldr	r2, [pc, #96]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <prvAddNewTaskToReadyList+0xcc>)
 8005a88:	441a      	add	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f7ff f89a 	bl	8004bca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a96:	f000 fee9 	bl	800686c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <prvAddNewTaskToReadyList+0xc0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d207      	bcs.n	8005ac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000594 	.word	0x20000594
 8005acc:	20000494 	.word	0x20000494
 8005ad0:	200005a0 	.word	0x200005a0
 8005ad4:	200005b0 	.word	0x200005b0
 8005ad8:	2000059c 	.word	0x2000059c
 8005adc:	20000498 	.word	0x20000498
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d018      	beq.n	8005b28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005af6:	4b14      	ldr	r3, [pc, #80]	@ (8005b48 <vTaskDelay+0x64>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <vTaskDelay+0x32>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60bb      	str	r3, [r7, #8]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b16:	f000 f885 	bl	8005c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fcdd 	bl	80064dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b22:	f000 f88d 	bl	8005c40 <xTaskResumeAll>
 8005b26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b2e:	4b07      	ldr	r3, [pc, #28]	@ (8005b4c <vTaskDelay+0x68>)
 8005b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200005bc 	.word	0x200005bc
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	@ 0x28
 8005b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b5e:	463a      	mov	r2, r7
 8005b60:	1d39      	adds	r1, r7, #4
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fb f920 	bl	8000dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	9202      	str	r2, [sp, #8]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	460a      	mov	r2, r1
 8005b7e:	4921      	ldr	r1, [pc, #132]	@ (8005c04 <vTaskStartScheduler+0xb4>)
 8005b80:	4821      	ldr	r0, [pc, #132]	@ (8005c08 <vTaskStartScheduler+0xb8>)
 8005b82:	f7ff fdff 	bl	8005784 <xTaskCreateStatic>
 8005b86:	4603      	mov	r3, r0
 8005b88:	4a20      	ldr	r2, [pc, #128]	@ (8005c0c <vTaskStartScheduler+0xbc>)
 8005b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c0c <vTaskStartScheduler+0xbc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e001      	b.n	8005b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d11b      	bne.n	8005bdc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	613b      	str	r3, [r7, #16]
}
 8005bb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bb8:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <vTaskStartScheduler+0xc0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	334c      	adds	r3, #76	@ 0x4c
 8005bbe:	4a15      	ldr	r2, [pc, #84]	@ (8005c14 <vTaskStartScheduler+0xc4>)
 8005bc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <vTaskStartScheduler+0xc8>)
 8005bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bca:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <vTaskStartScheduler+0xcc>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <vTaskStartScheduler+0xd0>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bd6:	f000 fd73 	bl	80066c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bda:	e00f      	b.n	8005bfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d10b      	bne.n	8005bfc <vTaskStartScheduler+0xac>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <vTaskStartScheduler+0xa8>
}
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	08008564 	.word	0x08008564
 8005c08:	080061d9 	.word	0x080061d9
 8005c0c:	200005b8 	.word	0x200005b8
 8005c10:	20000494 	.word	0x20000494
 8005c14:	20000020 	.word	0x20000020
 8005c18:	200005b4 	.word	0x200005b4
 8005c1c:	200005a0 	.word	0x200005a0
 8005c20:	20000598 	.word	0x20000598

08005c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c28:	4b04      	ldr	r3, [pc, #16]	@ (8005c3c <vTaskSuspendAll+0x18>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	4a03      	ldr	r2, [pc, #12]	@ (8005c3c <vTaskSuspendAll+0x18>)
 8005c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c32:	bf00      	nop
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	200005bc 	.word	0x200005bc

08005c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c4e:	4b42      	ldr	r3, [pc, #264]	@ (8005d58 <xTaskResumeAll+0x118>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <xTaskResumeAll+0x2e>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c6e:	f000 fdcb 	bl	8006808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c72:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <xTaskResumeAll+0x118>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	4a37      	ldr	r2, [pc, #220]	@ (8005d58 <xTaskResumeAll+0x118>)
 8005c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7c:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <xTaskResumeAll+0x118>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d161      	bne.n	8005d48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c84:	4b35      	ldr	r3, [pc, #212]	@ (8005d5c <xTaskResumeAll+0x11c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d05d      	beq.n	8005d48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8c:	e02e      	b.n	8005cec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8e:	4b34      	ldr	r3, [pc, #208]	@ (8005d60 <xTaskResumeAll+0x120>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3318      	adds	r3, #24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fff2 	bl	8004c84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe ffed 	bl	8004c84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cae:	2201      	movs	r2, #1
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <xTaskResumeAll+0x124>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <xTaskResumeAll+0x124>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4a27      	ldr	r2, [pc, #156]	@ (8005d68 <xTaskResumeAll+0x128>)
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe ff79 	bl	8004bca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4b23      	ldr	r3, [pc, #140]	@ (8005d6c <xTaskResumeAll+0x12c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ce6:	4b22      	ldr	r3, [pc, #136]	@ (8005d70 <xTaskResumeAll+0x130>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cec:	4b1c      	ldr	r3, [pc, #112]	@ (8005d60 <xTaskResumeAll+0x120>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1cc      	bne.n	8005c8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cfa:	f000 fb29 	bl	8006350 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005d74 <xTaskResumeAll+0x134>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d0a:	f000 f837 	bl	8005d7c <xTaskIncrementTick>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d14:	4b16      	ldr	r3, [pc, #88]	@ (8005d70 <xTaskResumeAll+0x130>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f1      	bne.n	8005d0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <xTaskResumeAll+0x134>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d2c:	4b10      	ldr	r3, [pc, #64]	@ (8005d70 <xTaskResumeAll+0x130>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d38:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <xTaskResumeAll+0x138>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d48:	f000 fd90 	bl	800686c <vPortExitCritical>

	return xAlreadyYielded;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200005bc 	.word	0x200005bc
 8005d5c:	20000594 	.word	0x20000594
 8005d60:	20000554 	.word	0x20000554
 8005d64:	2000059c 	.word	0x2000059c
 8005d68:	20000498 	.word	0x20000498
 8005d6c:	20000494 	.word	0x20000494
 8005d70:	200005a8 	.word	0x200005a8
 8005d74:	200005a4 	.word	0x200005a4
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d86:	4b4f      	ldr	r3, [pc, #316]	@ (8005ec4 <xTaskIncrementTick+0x148>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 808f 	bne.w	8005eae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d90:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec8 <xTaskIncrementTick+0x14c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d98:	4a4b      	ldr	r2, [pc, #300]	@ (8005ec8 <xTaskIncrementTick+0x14c>)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d121      	bne.n	8005de8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005da4:	4b49      	ldr	r3, [pc, #292]	@ (8005ecc <xTaskIncrementTick+0x150>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	603b      	str	r3, [r7, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <xTaskIncrementTick+0x46>
 8005dc6:	4b41      	ldr	r3, [pc, #260]	@ (8005ecc <xTaskIncrementTick+0x150>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	4b40      	ldr	r3, [pc, #256]	@ (8005ed0 <xTaskIncrementTick+0x154>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8005ecc <xTaskIncrementTick+0x150>)
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ed0 <xTaskIncrementTick+0x154>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed4 <xTaskIncrementTick+0x158>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed4 <xTaskIncrementTick+0x158>)
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	f000 fab4 	bl	8006350 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005de8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed8 <xTaskIncrementTick+0x15c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d348      	bcc.n	8005e84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df2:	4b36      	ldr	r3, [pc, #216]	@ (8005ecc <xTaskIncrementTick+0x150>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfc:	4b36      	ldr	r3, [pc, #216]	@ (8005ed8 <xTaskIncrementTick+0x15c>)
 8005dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005e02:	601a      	str	r2, [r3, #0]
					break;
 8005e04:	e03e      	b.n	8005e84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e06:	4b31      	ldr	r3, [pc, #196]	@ (8005ecc <xTaskIncrementTick+0x150>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d203      	bcs.n	8005e26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed8 <xTaskIncrementTick+0x15c>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e24:	e02e      	b.n	8005e84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe ff2a 	bl	8004c84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe ff21 	bl	8004c84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e46:	2201      	movs	r2, #1
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	4b24      	ldr	r3, [pc, #144]	@ (8005edc <xTaskIncrementTick+0x160>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	4a22      	ldr	r2, [pc, #136]	@ (8005edc <xTaskIncrementTick+0x160>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <xTaskIncrementTick+0x164>)
 8005e62:	441a      	add	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fe fead 	bl	8004bca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee4 <xTaskIncrementTick+0x168>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d3b9      	bcc.n	8005df2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e82:	e7b6      	b.n	8005df2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <xTaskIncrementTick+0x168>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8a:	4915      	ldr	r1, [pc, #84]	@ (8005ee0 <xTaskIncrementTick+0x164>)
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d901      	bls.n	8005ea0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ea0:	4b11      	ldr	r3, [pc, #68]	@ (8005ee8 <xTaskIncrementTick+0x16c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e004      	b.n	8005eb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005eae:	4b0f      	ldr	r3, [pc, #60]	@ (8005eec <xTaskIncrementTick+0x170>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005eec <xTaskIncrementTick+0x170>)
 8005eb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eb8:	697b      	ldr	r3, [r7, #20]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200005bc 	.word	0x200005bc
 8005ec8:	20000598 	.word	0x20000598
 8005ecc:	2000054c 	.word	0x2000054c
 8005ed0:	20000550 	.word	0x20000550
 8005ed4:	200005ac 	.word	0x200005ac
 8005ed8:	200005b4 	.word	0x200005b4
 8005edc:	2000059c 	.word	0x2000059c
 8005ee0:	20000498 	.word	0x20000498
 8005ee4:	20000494 	.word	0x20000494
 8005ee8:	200005a8 	.word	0x200005a8
 8005eec:	200005a4 	.word	0x200005a4

08005ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa0 <vTaskSwitchContext+0xb0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005efe:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <vTaskSwitchContext+0xb4>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f04:	e045      	b.n	8005f92 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005f06:	4b27      	ldr	r3, [pc, #156]	@ (8005fa4 <vTaskSwitchContext+0xb4>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b26      	ldr	r3, [pc, #152]	@ (8005fa8 <vTaskSwitchContext+0xb8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	fab3 f383 	clz	r3, r3
 8005f18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	f1c3 031f 	rsb	r3, r3, #31
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	4922      	ldr	r1, [pc, #136]	@ (8005fac <vTaskSwitchContext+0xbc>)
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	607b      	str	r3, [r7, #4]
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <vTaskSwitchContext+0x5a>
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a14      	ldr	r2, [pc, #80]	@ (8005fac <vTaskSwitchContext+0xbc>)
 8005f5a:	4413      	add	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d104      	bne.n	8005f7e <vTaskSwitchContext+0x8e>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb0 <vTaskSwitchContext+0xc0>)
 8005f86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <vTaskSwitchContext+0xc0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	334c      	adds	r3, #76	@ 0x4c
 8005f8e:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <vTaskSwitchContext+0xc4>)
 8005f90:	6013      	str	r3, [r2, #0]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	200005bc 	.word	0x200005bc
 8005fa4:	200005a8 	.word	0x200005a8
 8005fa8:	2000059c 	.word	0x2000059c
 8005fac:	20000498 	.word	0x20000498
 8005fb0:	20000494 	.word	0x20000494
 8005fb4:	20000020 	.word	0x20000020

08005fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60fb      	str	r3, [r7, #12]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fe0:	4b07      	ldr	r3, [pc, #28]	@ (8006000 <vTaskPlaceOnEventList+0x48>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3318      	adds	r3, #24
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fe fe12 	bl	8004c12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6838      	ldr	r0, [r7, #0]
 8005ff2:	f000 fa73 	bl	80064dc <prvAddCurrentTaskToDelayedList>
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000494 	.word	0x20000494

08006004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3318      	adds	r3, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fe24 	bl	8004c84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <xTaskRemoveFromEventList+0xb0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d11c      	bne.n	800607e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3304      	adds	r3, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe fe1b 	bl	8004c84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	4b18      	ldr	r3, [pc, #96]	@ (80060b8 <xTaskRemoveFromEventList+0xb4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	4a16      	ldr	r2, [pc, #88]	@ (80060b8 <xTaskRemoveFromEventList+0xb4>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <xTaskRemoveFromEventList+0xb8>)
 800606e:	441a      	add	r2, r3
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe fda7 	bl	8004bca <vListInsertEnd>
 800607c:	e005      	b.n	800608a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3318      	adds	r3, #24
 8006082:	4619      	mov	r1, r3
 8006084:	480e      	ldr	r0, [pc, #56]	@ (80060c0 <xTaskRemoveFromEventList+0xbc>)
 8006086:	f7fe fda0 	bl	8004bca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <xTaskRemoveFromEventList+0xc0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d905      	bls.n	80060a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <xTaskRemoveFromEventList+0xc4>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e001      	b.n	80060a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060a8:	697b      	ldr	r3, [r7, #20]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	200005bc 	.word	0x200005bc
 80060b8:	2000059c 	.word	0x2000059c
 80060bc:	20000498 	.word	0x20000498
 80060c0:	20000554 	.word	0x20000554
 80060c4:	20000494 	.word	0x20000494
 80060c8:	200005a8 	.word	0x200005a8

080060cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060d4:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <vTaskInternalSetTimeOutState+0x24>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060dc:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <vTaskInternalSetTimeOutState+0x28>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	605a      	str	r2, [r3, #4]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	200005ac 	.word	0x200005ac
 80060f4:	20000598 	.word	0x20000598

080060f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	613b      	str	r3, [r7, #16]
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10b      	bne.n	800613e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60fb      	str	r3, [r7, #12]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800613e:	f000 fb63 	bl	8006808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006142:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <xTaskCheckForTimeOut+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d102      	bne.n	8006162 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e023      	b.n	80061aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <xTaskCheckForTimeOut+0xc4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d007      	beq.n	800617e <xTaskCheckForTimeOut+0x86>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e015      	b.n	80061aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	429a      	cmp	r2, r3
 8006186:	d20b      	bcs.n	80061a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff ff99 	bl	80060cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	e004      	b.n	80061aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061a6:	2301      	movs	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061aa:	f000 fb5f 	bl	800686c <vPortExitCritical>

	return xReturn;
 80061ae:	69fb      	ldr	r3, [r7, #28]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000598 	.word	0x20000598
 80061bc:	200005ac 	.word	0x200005ac

080061c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061c4:	4b03      	ldr	r3, [pc, #12]	@ (80061d4 <vTaskMissedYield+0x14>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
}
 80061ca:	bf00      	nop
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	200005a8 	.word	0x200005a8

080061d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061e0:	f000 f852 	bl	8006288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061e4:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <prvIdleTask+0x28>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d9f9      	bls.n	80061e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061ec:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <prvIdleTask+0x2c>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061fc:	e7f0      	b.n	80061e0 <prvIdleTask+0x8>
 80061fe:	bf00      	nop
 8006200:	20000498 	.word	0x20000498
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	e00c      	b.n	800622e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4a12      	ldr	r2, [pc, #72]	@ (8006268 <prvInitialiseTaskLists+0x60>)
 8006220:	4413      	add	r3, r2
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fca4 	bl	8004b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3301      	adds	r3, #1
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b06      	cmp	r3, #6
 8006232:	d9ef      	bls.n	8006214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006234:	480d      	ldr	r0, [pc, #52]	@ (800626c <prvInitialiseTaskLists+0x64>)
 8006236:	f7fe fc9b 	bl	8004b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800623a:	480d      	ldr	r0, [pc, #52]	@ (8006270 <prvInitialiseTaskLists+0x68>)
 800623c:	f7fe fc98 	bl	8004b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006240:	480c      	ldr	r0, [pc, #48]	@ (8006274 <prvInitialiseTaskLists+0x6c>)
 8006242:	f7fe fc95 	bl	8004b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006246:	480c      	ldr	r0, [pc, #48]	@ (8006278 <prvInitialiseTaskLists+0x70>)
 8006248:	f7fe fc92 	bl	8004b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800624c:	480b      	ldr	r0, [pc, #44]	@ (800627c <prvInitialiseTaskLists+0x74>)
 800624e:	f7fe fc8f 	bl	8004b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006252:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <prvInitialiseTaskLists+0x78>)
 8006254:	4a05      	ldr	r2, [pc, #20]	@ (800626c <prvInitialiseTaskLists+0x64>)
 8006256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006258:	4b0a      	ldr	r3, [pc, #40]	@ (8006284 <prvInitialiseTaskLists+0x7c>)
 800625a:	4a05      	ldr	r2, [pc, #20]	@ (8006270 <prvInitialiseTaskLists+0x68>)
 800625c:	601a      	str	r2, [r3, #0]
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000498 	.word	0x20000498
 800626c:	20000524 	.word	0x20000524
 8006270:	20000538 	.word	0x20000538
 8006274:	20000554 	.word	0x20000554
 8006278:	20000568 	.word	0x20000568
 800627c:	20000580 	.word	0x20000580
 8006280:	2000054c 	.word	0x2000054c
 8006284:	20000550 	.word	0x20000550

08006288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800628e:	e019      	b.n	80062c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006290:	f000 faba 	bl	8006808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006294:	4b10      	ldr	r3, [pc, #64]	@ (80062d8 <prvCheckTasksWaitingTermination+0x50>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe fcef 	bl	8004c84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062a6:	4b0d      	ldr	r3, [pc, #52]	@ (80062dc <prvCheckTasksWaitingTermination+0x54>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	4a0b      	ldr	r2, [pc, #44]	@ (80062dc <prvCheckTasksWaitingTermination+0x54>)
 80062ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <prvCheckTasksWaitingTermination+0x58>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	4a0a      	ldr	r2, [pc, #40]	@ (80062e0 <prvCheckTasksWaitingTermination+0x58>)
 80062b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062ba:	f000 fad7 	bl	800686c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f810 	bl	80062e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c4:	4b06      	ldr	r3, [pc, #24]	@ (80062e0 <prvCheckTasksWaitingTermination+0x58>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e1      	bne.n	8006290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000568 	.word	0x20000568
 80062dc:	20000594 	.word	0x20000594
 80062e0:	2000057c 	.word	0x2000057c

080062e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	334c      	adds	r3, #76	@ 0x4c
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 ffc5 	bl	8007280 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fc6f 	bl	8006be8 <vPortFree>
				vPortFree( pxTCB );
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc6c 	bl	8006be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006310:	e019      	b.n	8006346 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006318:	2b01      	cmp	r3, #1
 800631a:	d103      	bne.n	8006324 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc63 	bl	8006be8 <vPortFree>
	}
 8006322:	e010      	b.n	8006346 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800632a:	2b02      	cmp	r3, #2
 800632c:	d00b      	beq.n	8006346 <prvDeleteTCB+0x62>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <prvDeleteTCB+0x5e>
	}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006356:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <prvResetNextTaskUnblockTime+0x38>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006360:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <prvResetNextTaskUnblockTime+0x3c>)
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006368:	e008      	b.n	800637c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636a:	4b07      	ldr	r3, [pc, #28]	@ (8006388 <prvResetNextTaskUnblockTime+0x38>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	4a04      	ldr	r2, [pc, #16]	@ (800638c <prvResetNextTaskUnblockTime+0x3c>)
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	2000054c 	.word	0x2000054c
 800638c:	200005b4 	.word	0x200005b4

08006390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <xTaskGetSchedulerState+0x34>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800639e:	2301      	movs	r3, #1
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	e008      	b.n	80063b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a4:	4b08      	ldr	r3, [pc, #32]	@ (80063c8 <xTaskGetSchedulerState+0x38>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063ac:	2302      	movs	r3, #2
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	e001      	b.n	80063b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063b2:	2300      	movs	r3, #0
 80063b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063b6:	687b      	ldr	r3, [r7, #4]
	}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	200005a0 	.word	0x200005a0
 80063c8:	200005bc 	.word	0x200005bc

080063cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d070      	beq.n	80064c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063e2:	4b3b      	ldr	r3, [pc, #236]	@ (80064d0 <xTaskPriorityDisinherit+0x104>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d00b      	beq.n	8006404 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60fb      	str	r3, [r7, #12]
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	e7fd      	b.n	8006400 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60bb      	str	r3, [r7, #8]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006428:	1e5a      	subs	r2, r3, #1
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	429a      	cmp	r2, r3
 8006438:	d044      	beq.n	80064c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800643e:	2b00      	cmp	r3, #0
 8006440:	d140      	bne.n	80064c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3304      	adds	r3, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fc1c 	bl	8004c84 <uxListRemove>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d115      	bne.n	800647e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006456:	491f      	ldr	r1, [pc, #124]	@ (80064d4 <xTaskPriorityDisinherit+0x108>)
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xTaskPriorityDisinherit+0xb2>
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646c:	2201      	movs	r2, #1
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43da      	mvns	r2, r3
 8006474:	4b18      	ldr	r3, [pc, #96]	@ (80064d8 <xTaskPriorityDisinherit+0x10c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4013      	ands	r3, r2
 800647a:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <xTaskPriorityDisinherit+0x10c>)
 800647c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	f1c3 0207 	rsb	r2, r3, #7
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	2201      	movs	r2, #1
 8006498:	409a      	lsls	r2, r3
 800649a:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <xTaskPriorityDisinherit+0x10c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	4a0d      	ldr	r2, [pc, #52]	@ (80064d8 <xTaskPriorityDisinherit+0x10c>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4a08      	ldr	r2, [pc, #32]	@ (80064d4 <xTaskPriorityDisinherit+0x108>)
 80064b2:	441a      	add	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fe fb85 	bl	8004bca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064c4:	697b      	ldr	r3, [r7, #20]
	}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000494 	.word	0x20000494
 80064d4:	20000498 	.word	0x20000498
 80064d8:	2000059c 	.word	0x2000059c

080064dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064e6:	4b29      	ldr	r3, [pc, #164]	@ (800658c <prvAddCurrentTaskToDelayedList+0xb0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ec:	4b28      	ldr	r3, [pc, #160]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fbc6 	bl	8004c84 <uxListRemove>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064fe:	4b24      	ldr	r3, [pc, #144]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	2201      	movs	r2, #1
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43da      	mvns	r2, r3
 800650c:	4b21      	ldr	r3, [pc, #132]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4013      	ands	r3, r2
 8006512:	4a20      	ldr	r2, [pc, #128]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006514:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d10a      	bne.n	8006534 <prvAddCurrentTaskToDelayedList+0x58>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006524:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	481a      	ldr	r0, [pc, #104]	@ (8006598 <prvAddCurrentTaskToDelayedList+0xbc>)
 800652e:	f7fe fb4c 	bl	8004bca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006532:	e026      	b.n	8006582 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800653c:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	429a      	cmp	r2, r3
 800654a:	d209      	bcs.n	8006560 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800654c:	4b13      	ldr	r3, [pc, #76]	@ (800659c <prvAddCurrentTaskToDelayedList+0xc0>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b0f      	ldr	r3, [pc, #60]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe fb5a 	bl	8004c12 <vListInsert>
}
 800655e:	e010      	b.n	8006582 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006560:	4b0f      	ldr	r3, [pc, #60]	@ (80065a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe fb50 	bl	8004c12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006572:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	d202      	bcs.n	8006582 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800657c:	4a09      	ldr	r2, [pc, #36]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6013      	str	r3, [r2, #0]
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000598 	.word	0x20000598
 8006590:	20000494 	.word	0x20000494
 8006594:	2000059c 	.word	0x2000059c
 8006598:	20000580 	.word	0x20000580
 800659c:	20000550 	.word	0x20000550
 80065a0:	2000054c 	.word	0x2000054c
 80065a4:	200005b4 	.word	0x200005b4

080065a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b04      	subs	r3, #4
 80065b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0201 	bic.w	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3b04      	subs	r3, #4
 80065d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d8:	4a0c      	ldr	r2, [pc, #48]	@ (800660c <pxPortInitialiseStack+0x64>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b14      	subs	r3, #20
 80065e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f06f 0202 	mvn.w	r2, #2
 80065f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3b20      	subs	r3, #32
 80065fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	08006611 	.word	0x08006611

08006610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800661a:	4b13      	ldr	r3, [pc, #76]	@ (8006668 <prvTaskExitError+0x58>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d00b      	beq.n	800663c <prvTaskExitError+0x2c>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	60fb      	str	r3, [r7, #12]
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <prvTaskExitError+0x28>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60bb      	str	r3, [r7, #8]
}
 800664e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006650:	bf00      	nop
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0fc      	beq.n	8006652 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000010 	.word	0x20000010
 800666c:	00000000 	.word	0x00000000

08006670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	20000494 	.word	0x20000494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006698:	4808      	ldr	r0, [pc, #32]	@ (80066bc <prvPortStartFirstTask+0x24>)
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f380 8808 	msr	MSP, r0
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8814 	msr	CONTROL, r0
 80066aa:	b662      	cpsie	i
 80066ac:	b661      	cpsie	f
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	df00      	svc	0
 80066b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ba:	bf00      	nop
 80066bc:	e000ed08 	.word	0xe000ed08

080066c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066c6:	4b47      	ldr	r3, [pc, #284]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a47      	ldr	r2, [pc, #284]	@ (80067e8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10b      	bne.n	80066e8 <xPortStartScheduler+0x28>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066e8:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3f      	ldr	r2, [pc, #252]	@ (80067ec <xPortStartScheduler+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10b      	bne.n	800670a <xPortStartScheduler+0x4a>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800670a:	4b39      	ldr	r3, [pc, #228]	@ (80067f0 <xPortStartScheduler+0x130>)
 800670c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	22ff      	movs	r2, #255	@ 0xff
 800671a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b31      	ldr	r3, [pc, #196]	@ (80067f4 <xPortStartScheduler+0x134>)
 8006730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006732:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006734:	2207      	movs	r2, #7
 8006736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006738:	e009      	b.n	800674e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800673a:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <xPortStartScheduler+0x138>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a2d      	ldr	r2, [pc, #180]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d0ef      	beq.n	800673a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800675a:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <xPortStartScheduler+0x138>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1c3 0307 	rsb	r3, r3, #7
 8006762:	2b04      	cmp	r3, #4
 8006764:	d00b      	beq.n	800677e <xPortStartScheduler+0xbe>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60bb      	str	r3, [r7, #8]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800677e:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006788:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <xPortStartScheduler+0x138>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006790:	4a19      	ldr	r2, [pc, #100]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800679c:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <xPortStartScheduler+0x13c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a16      	ldr	r2, [pc, #88]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067a8:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067b4:	f000 f8da 	bl	800696c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067b8:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <xPortStartScheduler+0x140>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067be:	f000 f8f9 	bl	80069b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ce:	f7ff ff63 	bl	8006698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067d2:	f7ff fb8d 	bl	8005ef0 <vTaskSwitchContext>
	prvTaskExitError();
 80067d6:	f7ff ff1b 	bl	8006610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	e000ed00 	.word	0xe000ed00
 80067e8:	410fc271 	.word	0x410fc271
 80067ec:	410fc270 	.word	0x410fc270
 80067f0:	e000e400 	.word	0xe000e400
 80067f4:	200005c0 	.word	0x200005c0
 80067f8:	200005c4 	.word	0x200005c4
 80067fc:	e000ed20 	.word	0xe000ed20
 8006800:	20000010 	.word	0x20000010
 8006804:	e000ef34 	.word	0xe000ef34

08006808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006822:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <vPortEnterCritical+0x5c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	4a0e      	ldr	r2, [pc, #56]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800682c:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d110      	bne.n	8006856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <vPortEnterCritical+0x60>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <vPortEnterCritical+0x4e>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	603b      	str	r3, [r7, #0]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <vPortEnterCritical+0x4a>
	}
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000010 	.word	0x20000010
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006872:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <vPortExitCritical+0x26>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006892:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <vPortExitCritical+0x50>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3b01      	subs	r3, #1
 8006898:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <vPortExitCritical+0x50>)
 800689a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <vPortExitCritical+0x50>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <vPortExitCritical+0x44>
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000010 	.word	0x20000010

080068c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f01e 0f10 	tst.w	lr, #16
 80068d0:	bf08      	it	eq
 80068d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068e4:	f380 8811 	msr	BASEPRI, r0
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f7ff fafe 	bl	8005ef0 <vTaskSwitchContext>
 80068f4:	f04f 0000 	mov.w	r0, #0
 80068f8:	f380 8811 	msr	BASEPRI, r0
 80068fc:	bc09      	pop	{r0, r3}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f01e 0f10 	tst.w	lr, #16
 800690a:	bf08      	it	eq
 800690c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006910:	f380 8809 	msr	PSP, r0
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst>:
 8006920:	20000494 	.word	0x20000494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006942:	f7ff fa1b 	bl	8005d7c <xTaskIncrementTick>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <SysTick_Handler+0x40>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f383 8811 	msr	BASEPRI, r3
}
 800695e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <vPortSetupTimerInterrupt+0x38>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <vPortSetupTimerInterrupt+0x3c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <vPortSetupTimerInterrupt+0x40>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a09      	ldr	r2, [pc, #36]	@ (80069b0 <vPortSetupTimerInterrupt+0x44>)
 800698a:	3b01      	subs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800698e:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e010 	.word	0xe000e010
 80069a4:	e000e018 	.word	0xe000e018
 80069a8:	20000004 	.word	0x20000004
 80069ac:	10624dd3 	.word	0x10624dd3
 80069b0:	e000e014 	.word	0xe000e014

080069b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069c4 <vPortEnableVFP+0x10>
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069be:	6001      	str	r1, [r0, #0]
 80069c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed88 	.word	0xe000ed88

080069c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d915      	bls.n	8006a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069da:	4a18      	ldr	r2, [pc, #96]	@ (8006a3c <vPortValidateInterruptPriority+0x74>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069e4:	4b16      	ldr	r3, [pc, #88]	@ (8006a40 <vPortValidateInterruptPriority+0x78>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d20b      	bcs.n	8006a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a06:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <vPortValidateInterruptPriority+0x7c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a48 <vPortValidateInterruptPriority+0x80>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90b      	bls.n	8006a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	603b      	str	r3, [r7, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <vPortValidateInterruptPriority+0x62>
	}
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000e3f0 	.word	0xe000e3f0
 8006a40:	200005c0 	.word	0x200005c0
 8006a44:	e000ed0c 	.word	0xe000ed0c
 8006a48:	200005c4 	.word	0x200005c4

08006a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a58:	f7ff f8e4 	bl	8005c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006bd0 <pvPortMalloc+0x184>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a64:	f000 f924 	bl	8006cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a68:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd4 <pvPortMalloc+0x188>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8095 	bne.w	8006ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01e      	beq.n	8006aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	3308      	adds	r3, #8
 8006a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <pvPortMalloc+0x6e>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	617b      	str	r3, [r7, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d06f      	beq.n	8006ba0 <pvPortMalloc+0x154>
 8006ac0:	4b45      	ldr	r3, [pc, #276]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d86a      	bhi.n	8006ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006aca:	4b44      	ldr	r3, [pc, #272]	@ (8006bdc <pvPortMalloc+0x190>)
 8006acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ace:	4b43      	ldr	r3, [pc, #268]	@ (8006bdc <pvPortMalloc+0x190>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad4:	e004      	b.n	8006ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d903      	bls.n	8006af2 <pvPortMalloc+0xa6>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f1      	bne.n	8006ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006af2:	4b37      	ldr	r3, [pc, #220]	@ (8006bd0 <pvPortMalloc+0x184>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d051      	beq.n	8006ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	4413      	add	r3, r2
 8006b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	2308      	movs	r3, #8
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d920      	bls.n	8006b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <pvPortMalloc+0xfc>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f000 f90a 	bl	8006d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b60:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b1b      	ldr	r3, [pc, #108]	@ (8006be0 <pvPortMalloc+0x194>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d203      	bcs.n	8006b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b7a:	4b17      	ldr	r3, [pc, #92]	@ (8006bd8 <pvPortMalloc+0x18c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <pvPortMalloc+0x194>)
 8006b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <pvPortMalloc+0x188>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <pvPortMalloc+0x198>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	4a11      	ldr	r2, [pc, #68]	@ (8006be4 <pvPortMalloc+0x198>)
 8006b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ba0:	f7ff f84e 	bl	8005c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60fb      	str	r3, [r7, #12]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	@ 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	200041d0 	.word	0x200041d0
 8006bd4:	200041e4 	.word	0x200041e4
 8006bd8:	200041d4 	.word	0x200041d4
 8006bdc:	200041c8 	.word	0x200041c8
 8006be0:	200041d8 	.word	0x200041d8
 8006be4:	200041dc 	.word	0x200041dc

08006be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d04f      	beq.n	8006c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	425b      	negs	r3, r3
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ca4 <vPortFree+0xbc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <vPortFree+0x46>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60fb      	str	r3, [r7, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <vPortFree+0x66>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60bb      	str	r3, [r7, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	e7fd      	b.n	8006c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <vPortFree+0xbc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01e      	beq.n	8006c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11a      	bne.n	8006c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <vPortFree+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	401a      	ands	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c74:	f7fe ffd6 	bl	8005c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <vPortFree+0xc0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4413      	add	r3, r2
 8006c82:	4a09      	ldr	r2, [pc, #36]	@ (8006ca8 <vPortFree+0xc0>)
 8006c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c86:	6938      	ldr	r0, [r7, #16]
 8006c88:	f000 f874 	bl	8006d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <vPortFree+0xc4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4a06      	ldr	r2, [pc, #24]	@ (8006cac <vPortFree+0xc4>)
 8006c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c96:	f7fe ffd3 	bl	8005c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200041e4 	.word	0x200041e4
 8006ca8:	200041d4 	.word	0x200041d4
 8006cac:	200041e0 	.word	0x200041e0

08006cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cbc:	4b27      	ldr	r3, [pc, #156]	@ (8006d5c <prvHeapInit+0xac>)
 8006cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3307      	adds	r3, #7
 8006cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0307 	bic.w	r3, r3, #7
 8006cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <prvHeapInit+0xac>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <prvHeapInit+0xb0>)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cee:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <prvHeapInit+0xb0>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a15      	ldr	r2, [pc, #84]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d12:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d30:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <prvHeapInit+0xb4>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d68 <prvHeapInit+0xb8>)
 8006d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <prvHeapInit+0xbc>)
 8006d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d48:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <prvHeapInit+0xc0>)
 8006d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	200005c8 	.word	0x200005c8
 8006d60:	200041c8 	.word	0x200041c8
 8006d64:	200041d0 	.word	0x200041d0
 8006d68:	200041d8 	.word	0x200041d8
 8006d6c:	200041d4 	.word	0x200041d4
 8006d70:	200041e4 	.word	0x200041e4

08006d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d7c:	4b28      	ldr	r3, [pc, #160]	@ (8006e20 <prvInsertBlockIntoFreeList+0xac>)
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e002      	b.n	8006d88 <prvInsertBlockIntoFreeList+0x14>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d8f7      	bhi.n	8006d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d108      	bne.n	8006db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d118      	bne.n	8006dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d00d      	beq.n	8006df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e008      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <prvInsertBlockIntoFreeList+0xb0>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e003      	b.n	8006e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d002      	beq.n	8006e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	200041c8 	.word	0x200041c8
 8006e24:	200041d0 	.word	0x200041d0

08006e28 <sbrk_aligned>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8006e68 <sbrk_aligned+0x40>)
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	6831      	ldr	r1, [r6, #0]
 8006e30:	4605      	mov	r5, r0
 8006e32:	b911      	cbnz	r1, 8006e3a <sbrk_aligned+0x12>
 8006e34:	f000 fa9e 	bl	8007374 <_sbrk_r>
 8006e38:	6030      	str	r0, [r6, #0]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 fa99 	bl	8007374 <_sbrk_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d103      	bne.n	8006e4e <sbrk_aligned+0x26>
 8006e46:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	1cc4      	adds	r4, r0, #3
 8006e50:	f024 0403 	bic.w	r4, r4, #3
 8006e54:	42a0      	cmp	r0, r4
 8006e56:	d0f8      	beq.n	8006e4a <sbrk_aligned+0x22>
 8006e58:	1a21      	subs	r1, r4, r0
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 fa8a 	bl	8007374 <_sbrk_r>
 8006e60:	3001      	adds	r0, #1
 8006e62:	d1f2      	bne.n	8006e4a <sbrk_aligned+0x22>
 8006e64:	e7ef      	b.n	8006e46 <sbrk_aligned+0x1e>
 8006e66:	bf00      	nop
 8006e68:	200041e8 	.word	0x200041e8

08006e6c <_malloc_r>:
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	1ccd      	adds	r5, r1, #3
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	4606      	mov	r6, r0
 8006e82:	db01      	blt.n	8006e88 <_malloc_r+0x1c>
 8006e84:	42a9      	cmp	r1, r5
 8006e86:	d904      	bls.n	8006e92 <_malloc_r+0x26>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f68 <_malloc_r+0xfc>
 8006e96:	f000 f869 	bl	8006f6c <__malloc_lock>
 8006e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	bb44      	cbnz	r4, 8006ef4 <_malloc_r+0x88>
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f7ff ffbf 	bl	8006e28 <sbrk_aligned>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	4604      	mov	r4, r0
 8006eae:	d158      	bne.n	8006f62 <_malloc_r+0xf6>
 8006eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8006eb4:	4627      	mov	r7, r4
 8006eb6:	2f00      	cmp	r7, #0
 8006eb8:	d143      	bne.n	8006f42 <_malloc_r+0xd6>
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	d04b      	beq.n	8006f56 <_malloc_r+0xea>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	eb04 0903 	add.w	r9, r4, r3
 8006ec8:	f000 fa54 	bl	8007374 <_sbrk_r>
 8006ecc:	4581      	cmp	r9, r0
 8006ece:	d142      	bne.n	8006f56 <_malloc_r+0xea>
 8006ed0:	6821      	ldr	r1, [r4, #0]
 8006ed2:	1a6d      	subs	r5, r5, r1
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7ff ffa6 	bl	8006e28 <sbrk_aligned>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d03a      	beq.n	8006f56 <_malloc_r+0xea>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	442b      	add	r3, r5
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	bb62      	cbnz	r2, 8006f48 <_malloc_r+0xdc>
 8006eee:	f8c8 7000 	str.w	r7, [r8]
 8006ef2:	e00f      	b.n	8006f14 <_malloc_r+0xa8>
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	1b52      	subs	r2, r2, r5
 8006ef8:	d420      	bmi.n	8006f3c <_malloc_r+0xd0>
 8006efa:	2a0b      	cmp	r2, #11
 8006efc:	d917      	bls.n	8006f2e <_malloc_r+0xc2>
 8006efe:	1961      	adds	r1, r4, r5
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	6025      	str	r5, [r4, #0]
 8006f04:	bf18      	it	ne
 8006f06:	6059      	strne	r1, [r3, #4]
 8006f08:	6863      	ldr	r3, [r4, #4]
 8006f0a:	bf08      	it	eq
 8006f0c:	f8c8 1000 	streq.w	r1, [r8]
 8006f10:	5162      	str	r2, [r4, r5]
 8006f12:	604b      	str	r3, [r1, #4]
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 f82f 	bl	8006f78 <__malloc_unlock>
 8006f1a:	f104 000b 	add.w	r0, r4, #11
 8006f1e:	1d23      	adds	r3, r4, #4
 8006f20:	f020 0007 	bic.w	r0, r0, #7
 8006f24:	1ac2      	subs	r2, r0, r3
 8006f26:	bf1c      	itt	ne
 8006f28:	1a1b      	subne	r3, r3, r0
 8006f2a:	50a3      	strne	r3, [r4, r2]
 8006f2c:	e7af      	b.n	8006e8e <_malloc_r+0x22>
 8006f2e:	6862      	ldr	r2, [r4, #4]
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	bf0c      	ite	eq
 8006f34:	f8c8 2000 	streq.w	r2, [r8]
 8006f38:	605a      	strne	r2, [r3, #4]
 8006f3a:	e7eb      	b.n	8006f14 <_malloc_r+0xa8>
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	6864      	ldr	r4, [r4, #4]
 8006f40:	e7ae      	b.n	8006ea0 <_malloc_r+0x34>
 8006f42:	463c      	mov	r4, r7
 8006f44:	687f      	ldr	r7, [r7, #4]
 8006f46:	e7b6      	b.n	8006eb6 <_malloc_r+0x4a>
 8006f48:	461a      	mov	r2, r3
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d1fb      	bne.n	8006f48 <_malloc_r+0xdc>
 8006f50:	2300      	movs	r3, #0
 8006f52:	6053      	str	r3, [r2, #4]
 8006f54:	e7de      	b.n	8006f14 <_malloc_r+0xa8>
 8006f56:	230c      	movs	r3, #12
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f000 f80c 	bl	8006f78 <__malloc_unlock>
 8006f60:	e794      	b.n	8006e8c <_malloc_r+0x20>
 8006f62:	6005      	str	r5, [r0, #0]
 8006f64:	e7d6      	b.n	8006f14 <_malloc_r+0xa8>
 8006f66:	bf00      	nop
 8006f68:	200041ec 	.word	0x200041ec

08006f6c <__malloc_lock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__malloc_lock+0x8>)
 8006f6e:	f000 ba4e 	b.w	800740e <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20004330 	.word	0x20004330

08006f78 <__malloc_unlock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <__malloc_unlock+0x8>)
 8006f7a:	f000 ba49 	b.w	8007410 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20004330 	.word	0x20004330

08006f84 <_realloc_r>:
 8006f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f88:	4680      	mov	r8, r0
 8006f8a:	4615      	mov	r5, r2
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b921      	cbnz	r1, 8006f9a <_realloc_r+0x16>
 8006f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	4611      	mov	r1, r2
 8006f96:	f7ff bf69 	b.w	8006e6c <_malloc_r>
 8006f9a:	b92a      	cbnz	r2, 8006fa8 <_realloc_r+0x24>
 8006f9c:	f000 fa48 	bl	8007430 <_free_r>
 8006fa0:	2400      	movs	r4, #0
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	f000 fa8c 	bl	80074c4 <_malloc_usable_size_r>
 8006fac:	4285      	cmp	r5, r0
 8006fae:	4606      	mov	r6, r0
 8006fb0:	d802      	bhi.n	8006fb8 <_realloc_r+0x34>
 8006fb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fb6:	d8f4      	bhi.n	8006fa2 <_realloc_r+0x1e>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f7ff ff56 	bl	8006e6c <_malloc_r>
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d0ec      	beq.n	8006fa0 <_realloc_r+0x1c>
 8006fc6:	42b5      	cmp	r5, r6
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4621      	mov	r1, r4
 8006fcc:	bf28      	it	cs
 8006fce:	4632      	movcs	r2, r6
 8006fd0:	f000 fa1f 	bl	8007412 <memcpy>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f000 fa2a 	bl	8007430 <_free_r>
 8006fdc:	463c      	mov	r4, r7
 8006fde:	e7e0      	b.n	8006fa2 <_realloc_r+0x1e>

08006fe0 <std>:
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fee:	6083      	str	r3, [r0, #8]
 8006ff0:	8181      	strh	r1, [r0, #12]
 8006ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ff4:	81c2      	strh	r2, [r0, #14]
 8006ff6:	6183      	str	r3, [r0, #24]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	305c      	adds	r0, #92	@ 0x5c
 8006ffe:	f000 f926 	bl	800724e <memset>
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <std+0x58>)
 8007004:	6263      	str	r3, [r4, #36]	@ 0x24
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <std+0x5c>)
 8007008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800700a:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <std+0x60>)
 800700c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <std+0x64>)
 8007010:	6323      	str	r3, [r4, #48]	@ 0x30
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <std+0x68>)
 8007014:	6224      	str	r4, [r4, #32]
 8007016:	429c      	cmp	r4, r3
 8007018:	d006      	beq.n	8007028 <std+0x48>
 800701a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800701e:	4294      	cmp	r4, r2
 8007020:	d002      	beq.n	8007028 <std+0x48>
 8007022:	33d0      	adds	r3, #208	@ 0xd0
 8007024:	429c      	cmp	r4, r3
 8007026:	d105      	bne.n	8007034 <std+0x54>
 8007028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007030:	f000 b9ec 	b.w	800740c <__retarget_lock_init_recursive>
 8007034:	bd10      	pop	{r4, pc}
 8007036:	bf00      	nop
 8007038:	080071c9 	.word	0x080071c9
 800703c:	080071eb 	.word	0x080071eb
 8007040:	08007223 	.word	0x08007223
 8007044:	08007247 	.word	0x08007247
 8007048:	200041f0 	.word	0x200041f0

0800704c <stdio_exit_handler>:
 800704c:	4a02      	ldr	r2, [pc, #8]	@ (8007058 <stdio_exit_handler+0xc>)
 800704e:	4903      	ldr	r1, [pc, #12]	@ (800705c <stdio_exit_handler+0x10>)
 8007050:	4803      	ldr	r0, [pc, #12]	@ (8007060 <stdio_exit_handler+0x14>)
 8007052:	f000 b869 	b.w	8007128 <_fwalk_sglue>
 8007056:	bf00      	nop
 8007058:	20000014 	.word	0x20000014
 800705c:	08007e2d 	.word	0x08007e2d
 8007060:	20000024 	.word	0x20000024

08007064 <cleanup_stdio>:
 8007064:	6841      	ldr	r1, [r0, #4]
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <cleanup_stdio+0x34>)
 8007068:	4299      	cmp	r1, r3
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	d001      	beq.n	8007074 <cleanup_stdio+0x10>
 8007070:	f000 fedc 	bl	8007e2c <_fflush_r>
 8007074:	68a1      	ldr	r1, [r4, #8]
 8007076:	4b09      	ldr	r3, [pc, #36]	@ (800709c <cleanup_stdio+0x38>)
 8007078:	4299      	cmp	r1, r3
 800707a:	d002      	beq.n	8007082 <cleanup_stdio+0x1e>
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fed5 	bl	8007e2c <_fflush_r>
 8007082:	68e1      	ldr	r1, [r4, #12]
 8007084:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <cleanup_stdio+0x3c>)
 8007086:	4299      	cmp	r1, r3
 8007088:	d004      	beq.n	8007094 <cleanup_stdio+0x30>
 800708a:	4620      	mov	r0, r4
 800708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007090:	f000 becc 	b.w	8007e2c <_fflush_r>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	200041f0 	.word	0x200041f0
 800709c:	20004258 	.word	0x20004258
 80070a0:	200042c0 	.word	0x200042c0

080070a4 <global_stdio_init.part.0>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <global_stdio_init.part.0+0x30>)
 80070a8:	4c0b      	ldr	r4, [pc, #44]	@ (80070d8 <global_stdio_init.part.0+0x34>)
 80070aa:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <global_stdio_init.part.0+0x38>)
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	4620      	mov	r0, r4
 80070b0:	2200      	movs	r2, #0
 80070b2:	2104      	movs	r1, #4
 80070b4:	f7ff ff94 	bl	8006fe0 <std>
 80070b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070bc:	2201      	movs	r2, #1
 80070be:	2109      	movs	r1, #9
 80070c0:	f7ff ff8e 	bl	8006fe0 <std>
 80070c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070c8:	2202      	movs	r2, #2
 80070ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ce:	2112      	movs	r1, #18
 80070d0:	f7ff bf86 	b.w	8006fe0 <std>
 80070d4:	20004328 	.word	0x20004328
 80070d8:	200041f0 	.word	0x200041f0
 80070dc:	0800704d 	.word	0x0800704d

080070e0 <__sfp_lock_acquire>:
 80070e0:	4801      	ldr	r0, [pc, #4]	@ (80070e8 <__sfp_lock_acquire+0x8>)
 80070e2:	f000 b994 	b.w	800740e <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	20004331 	.word	0x20004331

080070ec <__sfp_lock_release>:
 80070ec:	4801      	ldr	r0, [pc, #4]	@ (80070f4 <__sfp_lock_release+0x8>)
 80070ee:	f000 b98f 	b.w	8007410 <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	20004331 	.word	0x20004331

080070f8 <__sinit>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	f7ff fff0 	bl	80070e0 <__sfp_lock_acquire>
 8007100:	6a23      	ldr	r3, [r4, #32]
 8007102:	b11b      	cbz	r3, 800710c <__sinit+0x14>
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f7ff bff0 	b.w	80070ec <__sfp_lock_release>
 800710c:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <__sinit+0x28>)
 800710e:	6223      	str	r3, [r4, #32]
 8007110:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <__sinit+0x2c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f5      	bne.n	8007104 <__sinit+0xc>
 8007118:	f7ff ffc4 	bl	80070a4 <global_stdio_init.part.0>
 800711c:	e7f2      	b.n	8007104 <__sinit+0xc>
 800711e:	bf00      	nop
 8007120:	08007065 	.word	0x08007065
 8007124:	20004328 	.word	0x20004328

08007128 <_fwalk_sglue>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4607      	mov	r7, r0
 800712e:	4688      	mov	r8, r1
 8007130:	4614      	mov	r4, r2
 8007132:	2600      	movs	r6, #0
 8007134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007138:	f1b9 0901 	subs.w	r9, r9, #1
 800713c:	d505      	bpl.n	800714a <_fwalk_sglue+0x22>
 800713e:	6824      	ldr	r4, [r4, #0]
 8007140:	2c00      	cmp	r4, #0
 8007142:	d1f7      	bne.n	8007134 <_fwalk_sglue+0xc>
 8007144:	4630      	mov	r0, r6
 8007146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d907      	bls.n	8007160 <_fwalk_sglue+0x38>
 8007150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007154:	3301      	adds	r3, #1
 8007156:	d003      	beq.n	8007160 <_fwalk_sglue+0x38>
 8007158:	4629      	mov	r1, r5
 800715a:	4638      	mov	r0, r7
 800715c:	47c0      	blx	r8
 800715e:	4306      	orrs	r6, r0
 8007160:	3568      	adds	r5, #104	@ 0x68
 8007162:	e7e9      	b.n	8007138 <_fwalk_sglue+0x10>

08007164 <iprintf>:
 8007164:	b40f      	push	{r0, r1, r2, r3}
 8007166:	b507      	push	{r0, r1, r2, lr}
 8007168:	4906      	ldr	r1, [pc, #24]	@ (8007184 <iprintf+0x20>)
 800716a:	ab04      	add	r3, sp, #16
 800716c:	6808      	ldr	r0, [r1, #0]
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	6881      	ldr	r1, [r0, #8]
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	f000 fb2f 	bl	80077d8 <_vfiprintf_r>
 800717a:	b003      	add	sp, #12
 800717c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007180:	b004      	add	sp, #16
 8007182:	4770      	bx	lr
 8007184:	20000020 	.word	0x20000020

08007188 <siprintf>:
 8007188:	b40e      	push	{r1, r2, r3}
 800718a:	b500      	push	{lr}
 800718c:	b09c      	sub	sp, #112	@ 0x70
 800718e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007190:	9002      	str	r0, [sp, #8]
 8007192:	9006      	str	r0, [sp, #24]
 8007194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007198:	4809      	ldr	r0, [pc, #36]	@ (80071c0 <siprintf+0x38>)
 800719a:	9107      	str	r1, [sp, #28]
 800719c:	9104      	str	r1, [sp, #16]
 800719e:	4909      	ldr	r1, [pc, #36]	@ (80071c4 <siprintf+0x3c>)
 80071a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a4:	9105      	str	r1, [sp, #20]
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	a902      	add	r1, sp, #8
 80071ac:	f000 f9ee 	bl	800758c <_svfiprintf_r>
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	b01c      	add	sp, #112	@ 0x70
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b003      	add	sp, #12
 80071be:	4770      	bx	lr
 80071c0:	20000020 	.word	0x20000020
 80071c4:	ffff0208 	.word	0xffff0208

080071c8 <__sread>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	460c      	mov	r4, r1
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	f000 f8be 	bl	8007350 <_read_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	bfab      	itete	ge
 80071d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071da:	89a3      	ldrhlt	r3, [r4, #12]
 80071dc:	181b      	addge	r3, r3, r0
 80071de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071e2:	bfac      	ite	ge
 80071e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071e6:	81a3      	strhlt	r3, [r4, #12]
 80071e8:	bd10      	pop	{r4, pc}

080071ea <__swrite>:
 80071ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	461f      	mov	r7, r3
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	05db      	lsls	r3, r3, #23
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4616      	mov	r6, r2
 80071fa:	d505      	bpl.n	8007208 <__swrite+0x1e>
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2302      	movs	r3, #2
 8007202:	2200      	movs	r2, #0
 8007204:	f000 f892 	bl	800732c <_lseek_r>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	f000 b8b9 	b.w	8007394 <_write_r>

08007222 <__sseek>:
 8007222:	b510      	push	{r4, lr}
 8007224:	460c      	mov	r4, r1
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 f87f 	bl	800732c <_lseek_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	bf15      	itete	ne
 8007234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800723a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800723e:	81a3      	strheq	r3, [r4, #12]
 8007240:	bf18      	it	ne
 8007242:	81a3      	strhne	r3, [r4, #12]
 8007244:	bd10      	pop	{r4, pc}

08007246 <__sclose>:
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 b809 	b.w	8007260 <_close_r>

0800724e <memset>:
 800724e:	4402      	add	r2, r0
 8007250:	4603      	mov	r3, r0
 8007252:	4293      	cmp	r3, r2
 8007254:	d100      	bne.n	8007258 <memset+0xa>
 8007256:	4770      	bx	lr
 8007258:	f803 1b01 	strb.w	r1, [r3], #1
 800725c:	e7f9      	b.n	8007252 <memset+0x4>
	...

08007260 <_close_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d06      	ldr	r5, [pc, #24]	@ (800727c <_close_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f001 f8d8 	bl	8008420 <_close>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_close_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_close_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	2000432c 	.word	0x2000432c

08007280 <_reclaim_reent>:
 8007280:	4b29      	ldr	r3, [pc, #164]	@ (8007328 <_reclaim_reent+0xa8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4283      	cmp	r3, r0
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	d04b      	beq.n	8007324 <_reclaim_reent+0xa4>
 800728c:	69c3      	ldr	r3, [r0, #28]
 800728e:	b1ab      	cbz	r3, 80072bc <_reclaim_reent+0x3c>
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	b16b      	cbz	r3, 80072b0 <_reclaim_reent+0x30>
 8007294:	2500      	movs	r5, #0
 8007296:	69e3      	ldr	r3, [r4, #28]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	5959      	ldr	r1, [r3, r5]
 800729c:	2900      	cmp	r1, #0
 800729e:	d13b      	bne.n	8007318 <_reclaim_reent+0x98>
 80072a0:	3504      	adds	r5, #4
 80072a2:	2d80      	cmp	r5, #128	@ 0x80
 80072a4:	d1f7      	bne.n	8007296 <_reclaim_reent+0x16>
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	4620      	mov	r0, r4
 80072aa:	68d9      	ldr	r1, [r3, #12]
 80072ac:	f000 f8c0 	bl	8007430 <_free_r>
 80072b0:	69e3      	ldr	r3, [r4, #28]
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	b111      	cbz	r1, 80072bc <_reclaim_reent+0x3c>
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 f8ba 	bl	8007430 <_free_r>
 80072bc:	6961      	ldr	r1, [r4, #20]
 80072be:	b111      	cbz	r1, 80072c6 <_reclaim_reent+0x46>
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 f8b5 	bl	8007430 <_free_r>
 80072c6:	69e1      	ldr	r1, [r4, #28]
 80072c8:	b111      	cbz	r1, 80072d0 <_reclaim_reent+0x50>
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f8b0 	bl	8007430 <_free_r>
 80072d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80072d2:	b111      	cbz	r1, 80072da <_reclaim_reent+0x5a>
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f8ab 	bl	8007430 <_free_r>
 80072da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072dc:	b111      	cbz	r1, 80072e4 <_reclaim_reent+0x64>
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 f8a6 	bl	8007430 <_free_r>
 80072e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072e6:	b111      	cbz	r1, 80072ee <_reclaim_reent+0x6e>
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 f8a1 	bl	8007430 <_free_r>
 80072ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80072f0:	b111      	cbz	r1, 80072f8 <_reclaim_reent+0x78>
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f89c 	bl	8007430 <_free_r>
 80072f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072fa:	b111      	cbz	r1, 8007302 <_reclaim_reent+0x82>
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 f897 	bl	8007430 <_free_r>
 8007302:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007304:	b111      	cbz	r1, 800730c <_reclaim_reent+0x8c>
 8007306:	4620      	mov	r0, r4
 8007308:	f000 f892 	bl	8007430 <_free_r>
 800730c:	6a23      	ldr	r3, [r4, #32]
 800730e:	b14b      	cbz	r3, 8007324 <_reclaim_reent+0xa4>
 8007310:	4620      	mov	r0, r4
 8007312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007316:	4718      	bx	r3
 8007318:	680e      	ldr	r6, [r1, #0]
 800731a:	4620      	mov	r0, r4
 800731c:	f000 f888 	bl	8007430 <_free_r>
 8007320:	4631      	mov	r1, r6
 8007322:	e7bb      	b.n	800729c <_reclaim_reent+0x1c>
 8007324:	bd70      	pop	{r4, r5, r6, pc}
 8007326:	bf00      	nop
 8007328:	20000020 	.word	0x20000020

0800732c <_lseek_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d07      	ldr	r5, [pc, #28]	@ (800734c <_lseek_r+0x20>)
 8007330:	4604      	mov	r4, r0
 8007332:	4608      	mov	r0, r1
 8007334:	4611      	mov	r1, r2
 8007336:	2200      	movs	r2, #0
 8007338:	602a      	str	r2, [r5, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	f001 f888 	bl	8008450 <_lseek>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_lseek_r+0x1e>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_lseek_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	2000432c 	.word	0x2000432c

08007350 <_read_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	@ (8007370 <_read_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f001 f87e 	bl	8008460 <_read>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_read_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_read_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	2000432c 	.word	0x2000432c

08007374 <_sbrk_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	@ (8007390 <_sbrk_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7fa fc5c 	bl	8001c3c <_sbrk>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_sbrk_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_sbrk_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	2000432c 	.word	0x2000432c

08007394 <_write_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	@ (80073b4 <_write_r+0x20>)
 8007398:	4604      	mov	r4, r0
 800739a:	4608      	mov	r0, r1
 800739c:	4611      	mov	r1, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7f9 fd43 	bl	8000e2e <_write>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_write_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_write_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	2000432c 	.word	0x2000432c

080073b8 <__errno>:
 80073b8:	4b01      	ldr	r3, [pc, #4]	@ (80073c0 <__errno+0x8>)
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000020 	.word	0x20000020

080073c4 <__libc_init_array>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	4d0d      	ldr	r5, [pc, #52]	@ (80073fc <__libc_init_array+0x38>)
 80073c8:	4c0d      	ldr	r4, [pc, #52]	@ (8007400 <__libc_init_array+0x3c>)
 80073ca:	1b64      	subs	r4, r4, r5
 80073cc:	10a4      	asrs	r4, r4, #2
 80073ce:	2600      	movs	r6, #0
 80073d0:	42a6      	cmp	r6, r4
 80073d2:	d109      	bne.n	80073e8 <__libc_init_array+0x24>
 80073d4:	4d0b      	ldr	r5, [pc, #44]	@ (8007404 <__libc_init_array+0x40>)
 80073d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007408 <__libc_init_array+0x44>)
 80073d8:	f001 f84a 	bl	8008470 <_init>
 80073dc:	1b64      	subs	r4, r4, r5
 80073de:	10a4      	asrs	r4, r4, #2
 80073e0:	2600      	movs	r6, #0
 80073e2:	42a6      	cmp	r6, r4
 80073e4:	d105      	bne.n	80073f2 <__libc_init_array+0x2e>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ec:	4798      	blx	r3
 80073ee:	3601      	adds	r6, #1
 80073f0:	e7ee      	b.n	80073d0 <__libc_init_array+0xc>
 80073f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f6:	4798      	blx	r3
 80073f8:	3601      	adds	r6, #1
 80073fa:	e7f2      	b.n	80073e2 <__libc_init_array+0x1e>
 80073fc:	080085f8 	.word	0x080085f8
 8007400:	080085f8 	.word	0x080085f8
 8007404:	080085f8 	.word	0x080085f8
 8007408:	080085fc 	.word	0x080085fc

0800740c <__retarget_lock_init_recursive>:
 800740c:	4770      	bx	lr

0800740e <__retarget_lock_acquire_recursive>:
 800740e:	4770      	bx	lr

08007410 <__retarget_lock_release_recursive>:
 8007410:	4770      	bx	lr

08007412 <memcpy>:
 8007412:	440a      	add	r2, r1
 8007414:	4291      	cmp	r1, r2
 8007416:	f100 33ff 	add.w	r3, r0, #4294967295
 800741a:	d100      	bne.n	800741e <memcpy+0xc>
 800741c:	4770      	bx	lr
 800741e:	b510      	push	{r4, lr}
 8007420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007428:	4291      	cmp	r1, r2
 800742a:	d1f9      	bne.n	8007420 <memcpy+0xe>
 800742c:	bd10      	pop	{r4, pc}
	...

08007430 <_free_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4605      	mov	r5, r0
 8007434:	2900      	cmp	r1, #0
 8007436:	d041      	beq.n	80074bc <_free_r+0x8c>
 8007438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743c:	1f0c      	subs	r4, r1, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	bfb8      	it	lt
 8007442:	18e4      	addlt	r4, r4, r3
 8007444:	f7ff fd92 	bl	8006f6c <__malloc_lock>
 8007448:	4a1d      	ldr	r2, [pc, #116]	@ (80074c0 <_free_r+0x90>)
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	b933      	cbnz	r3, 800745c <_free_r+0x2c>
 800744e:	6063      	str	r3, [r4, #4]
 8007450:	6014      	str	r4, [r2, #0]
 8007452:	4628      	mov	r0, r5
 8007454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007458:	f7ff bd8e 	b.w	8006f78 <__malloc_unlock>
 800745c:	42a3      	cmp	r3, r4
 800745e:	d908      	bls.n	8007472 <_free_r+0x42>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	1821      	adds	r1, r4, r0
 8007464:	428b      	cmp	r3, r1
 8007466:	bf01      	itttt	eq
 8007468:	6819      	ldreq	r1, [r3, #0]
 800746a:	685b      	ldreq	r3, [r3, #4]
 800746c:	1809      	addeq	r1, r1, r0
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	e7ed      	b.n	800744e <_free_r+0x1e>
 8007472:	461a      	mov	r2, r3
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b10b      	cbz	r3, 800747c <_free_r+0x4c>
 8007478:	42a3      	cmp	r3, r4
 800747a:	d9fa      	bls.n	8007472 <_free_r+0x42>
 800747c:	6811      	ldr	r1, [r2, #0]
 800747e:	1850      	adds	r0, r2, r1
 8007480:	42a0      	cmp	r0, r4
 8007482:	d10b      	bne.n	800749c <_free_r+0x6c>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	4401      	add	r1, r0
 8007488:	1850      	adds	r0, r2, r1
 800748a:	4283      	cmp	r3, r0
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	d1e0      	bne.n	8007452 <_free_r+0x22>
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	6053      	str	r3, [r2, #4]
 8007496:	4408      	add	r0, r1
 8007498:	6010      	str	r0, [r2, #0]
 800749a:	e7da      	b.n	8007452 <_free_r+0x22>
 800749c:	d902      	bls.n	80074a4 <_free_r+0x74>
 800749e:	230c      	movs	r3, #12
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	e7d6      	b.n	8007452 <_free_r+0x22>
 80074a4:	6820      	ldr	r0, [r4, #0]
 80074a6:	1821      	adds	r1, r4, r0
 80074a8:	428b      	cmp	r3, r1
 80074aa:	bf04      	itt	eq
 80074ac:	6819      	ldreq	r1, [r3, #0]
 80074ae:	685b      	ldreq	r3, [r3, #4]
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	bf04      	itt	eq
 80074b4:	1809      	addeq	r1, r1, r0
 80074b6:	6021      	streq	r1, [r4, #0]
 80074b8:	6054      	str	r4, [r2, #4]
 80074ba:	e7ca      	b.n	8007452 <_free_r+0x22>
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	200041ec 	.word	0x200041ec

080074c4 <_malloc_usable_size_r>:
 80074c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c8:	1f18      	subs	r0, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfbc      	itt	lt
 80074ce:	580b      	ldrlt	r3, [r1, r0]
 80074d0:	18c0      	addlt	r0, r0, r3
 80074d2:	4770      	bx	lr

080074d4 <__ssputs_r>:
 80074d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	688e      	ldr	r6, [r1, #8]
 80074da:	461f      	mov	r7, r3
 80074dc:	42be      	cmp	r6, r7
 80074de:	680b      	ldr	r3, [r1, #0]
 80074e0:	4682      	mov	sl, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	4690      	mov	r8, r2
 80074e6:	d82d      	bhi.n	8007544 <__ssputs_r+0x70>
 80074e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074f0:	d026      	beq.n	8007540 <__ssputs_r+0x6c>
 80074f2:	6965      	ldr	r5, [r4, #20]
 80074f4:	6909      	ldr	r1, [r1, #16]
 80074f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074fa:	eba3 0901 	sub.w	r9, r3, r1
 80074fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007502:	1c7b      	adds	r3, r7, #1
 8007504:	444b      	add	r3, r9
 8007506:	106d      	asrs	r5, r5, #1
 8007508:	429d      	cmp	r5, r3
 800750a:	bf38      	it	cc
 800750c:	461d      	movcc	r5, r3
 800750e:	0553      	lsls	r3, r2, #21
 8007510:	d527      	bpl.n	8007562 <__ssputs_r+0x8e>
 8007512:	4629      	mov	r1, r5
 8007514:	f7ff fcaa 	bl	8006e6c <_malloc_r>
 8007518:	4606      	mov	r6, r0
 800751a:	b360      	cbz	r0, 8007576 <__ssputs_r+0xa2>
 800751c:	6921      	ldr	r1, [r4, #16]
 800751e:	464a      	mov	r2, r9
 8007520:	f7ff ff77 	bl	8007412 <memcpy>
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800752a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800752e:	81a3      	strh	r3, [r4, #12]
 8007530:	6126      	str	r6, [r4, #16]
 8007532:	6165      	str	r5, [r4, #20]
 8007534:	444e      	add	r6, r9
 8007536:	eba5 0509 	sub.w	r5, r5, r9
 800753a:	6026      	str	r6, [r4, #0]
 800753c:	60a5      	str	r5, [r4, #8]
 800753e:	463e      	mov	r6, r7
 8007540:	42be      	cmp	r6, r7
 8007542:	d900      	bls.n	8007546 <__ssputs_r+0x72>
 8007544:	463e      	mov	r6, r7
 8007546:	6820      	ldr	r0, [r4, #0]
 8007548:	4632      	mov	r2, r6
 800754a:	4641      	mov	r1, r8
 800754c:	f000 fd2a 	bl	8007fa4 <memmove>
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	1b9b      	subs	r3, r3, r6
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	4433      	add	r3, r6
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	2000      	movs	r0, #0
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	462a      	mov	r2, r5
 8007564:	f7ff fd0e 	bl	8006f84 <_realloc_r>
 8007568:	4606      	mov	r6, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	d1e0      	bne.n	8007530 <__ssputs_r+0x5c>
 800756e:	6921      	ldr	r1, [r4, #16]
 8007570:	4650      	mov	r0, sl
 8007572:	f7ff ff5d 	bl	8007430 <_free_r>
 8007576:	230c      	movs	r3, #12
 8007578:	f8ca 3000 	str.w	r3, [sl]
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	e7e9      	b.n	800755e <__ssputs_r+0x8a>
	...

0800758c <_svfiprintf_r>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	4698      	mov	r8, r3
 8007592:	898b      	ldrh	r3, [r1, #12]
 8007594:	061b      	lsls	r3, r3, #24
 8007596:	b09d      	sub	sp, #116	@ 0x74
 8007598:	4607      	mov	r7, r0
 800759a:	460d      	mov	r5, r1
 800759c:	4614      	mov	r4, r2
 800759e:	d510      	bpl.n	80075c2 <_svfiprintf_r+0x36>
 80075a0:	690b      	ldr	r3, [r1, #16]
 80075a2:	b973      	cbnz	r3, 80075c2 <_svfiprintf_r+0x36>
 80075a4:	2140      	movs	r1, #64	@ 0x40
 80075a6:	f7ff fc61 	bl	8006e6c <_malloc_r>
 80075aa:	6028      	str	r0, [r5, #0]
 80075ac:	6128      	str	r0, [r5, #16]
 80075ae:	b930      	cbnz	r0, 80075be <_svfiprintf_r+0x32>
 80075b0:	230c      	movs	r3, #12
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	b01d      	add	sp, #116	@ 0x74
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075be:	2340      	movs	r3, #64	@ 0x40
 80075c0:	616b      	str	r3, [r5, #20]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075c6:	2320      	movs	r3, #32
 80075c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d0:	2330      	movs	r3, #48	@ 0x30
 80075d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007770 <_svfiprintf_r+0x1e4>
 80075d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075da:	f04f 0901 	mov.w	r9, #1
 80075de:	4623      	mov	r3, r4
 80075e0:	469a      	mov	sl, r3
 80075e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075e6:	b10a      	cbz	r2, 80075ec <_svfiprintf_r+0x60>
 80075e8:	2a25      	cmp	r2, #37	@ 0x25
 80075ea:	d1f9      	bne.n	80075e0 <_svfiprintf_r+0x54>
 80075ec:	ebba 0b04 	subs.w	fp, sl, r4
 80075f0:	d00b      	beq.n	800760a <_svfiprintf_r+0x7e>
 80075f2:	465b      	mov	r3, fp
 80075f4:	4622      	mov	r2, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7ff ff6b 	bl	80074d4 <__ssputs_r>
 80075fe:	3001      	adds	r0, #1
 8007600:	f000 80a7 	beq.w	8007752 <_svfiprintf_r+0x1c6>
 8007604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007606:	445a      	add	r2, fp
 8007608:	9209      	str	r2, [sp, #36]	@ 0x24
 800760a:	f89a 3000 	ldrb.w	r3, [sl]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 809f 	beq.w	8007752 <_svfiprintf_r+0x1c6>
 8007614:	2300      	movs	r3, #0
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800761e:	f10a 0a01 	add.w	sl, sl, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800762a:	931a      	str	r3, [sp, #104]	@ 0x68
 800762c:	4654      	mov	r4, sl
 800762e:	2205      	movs	r2, #5
 8007630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007634:	484e      	ldr	r0, [pc, #312]	@ (8007770 <_svfiprintf_r+0x1e4>)
 8007636:	f7f8 fdd3 	bl	80001e0 <memchr>
 800763a:	9a04      	ldr	r2, [sp, #16]
 800763c:	b9d8      	cbnz	r0, 8007676 <_svfiprintf_r+0xea>
 800763e:	06d0      	lsls	r0, r2, #27
 8007640:	bf44      	itt	mi
 8007642:	2320      	movmi	r3, #32
 8007644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007648:	0711      	lsls	r1, r2, #28
 800764a:	bf44      	itt	mi
 800764c:	232b      	movmi	r3, #43	@ 0x2b
 800764e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007652:	f89a 3000 	ldrb.w	r3, [sl]
 8007656:	2b2a      	cmp	r3, #42	@ 0x2a
 8007658:	d015      	beq.n	8007686 <_svfiprintf_r+0xfa>
 800765a:	9a07      	ldr	r2, [sp, #28]
 800765c:	4654      	mov	r4, sl
 800765e:	2000      	movs	r0, #0
 8007660:	f04f 0c0a 	mov.w	ip, #10
 8007664:	4621      	mov	r1, r4
 8007666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800766a:	3b30      	subs	r3, #48	@ 0x30
 800766c:	2b09      	cmp	r3, #9
 800766e:	d94b      	bls.n	8007708 <_svfiprintf_r+0x17c>
 8007670:	b1b0      	cbz	r0, 80076a0 <_svfiprintf_r+0x114>
 8007672:	9207      	str	r2, [sp, #28]
 8007674:	e014      	b.n	80076a0 <_svfiprintf_r+0x114>
 8007676:	eba0 0308 	sub.w	r3, r0, r8
 800767a:	fa09 f303 	lsl.w	r3, r9, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	46a2      	mov	sl, r4
 8007684:	e7d2      	b.n	800762c <_svfiprintf_r+0xa0>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	1d19      	adds	r1, r3, #4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	9103      	str	r1, [sp, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfbb      	ittet	lt
 8007692:	425b      	neglt	r3, r3
 8007694:	f042 0202 	orrlt.w	r2, r2, #2
 8007698:	9307      	strge	r3, [sp, #28]
 800769a:	9307      	strlt	r3, [sp, #28]
 800769c:	bfb8      	it	lt
 800769e:	9204      	strlt	r2, [sp, #16]
 80076a0:	7823      	ldrb	r3, [r4, #0]
 80076a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80076a4:	d10a      	bne.n	80076bc <_svfiprintf_r+0x130>
 80076a6:	7863      	ldrb	r3, [r4, #1]
 80076a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076aa:	d132      	bne.n	8007712 <_svfiprintf_r+0x186>
 80076ac:	9b03      	ldr	r3, [sp, #12]
 80076ae:	1d1a      	adds	r2, r3, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	9203      	str	r2, [sp, #12]
 80076b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076b8:	3402      	adds	r4, #2
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007780 <_svfiprintf_r+0x1f4>
 80076c0:	7821      	ldrb	r1, [r4, #0]
 80076c2:	2203      	movs	r2, #3
 80076c4:	4650      	mov	r0, sl
 80076c6:	f7f8 fd8b 	bl	80001e0 <memchr>
 80076ca:	b138      	cbz	r0, 80076dc <_svfiprintf_r+0x150>
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	eba0 000a 	sub.w	r0, r0, sl
 80076d2:	2240      	movs	r2, #64	@ 0x40
 80076d4:	4082      	lsls	r2, r0
 80076d6:	4313      	orrs	r3, r2
 80076d8:	3401      	adds	r4, #1
 80076da:	9304      	str	r3, [sp, #16]
 80076dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e0:	4824      	ldr	r0, [pc, #144]	@ (8007774 <_svfiprintf_r+0x1e8>)
 80076e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076e6:	2206      	movs	r2, #6
 80076e8:	f7f8 fd7a 	bl	80001e0 <memchr>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d036      	beq.n	800775e <_svfiprintf_r+0x1d2>
 80076f0:	4b21      	ldr	r3, [pc, #132]	@ (8007778 <_svfiprintf_r+0x1ec>)
 80076f2:	bb1b      	cbnz	r3, 800773c <_svfiprintf_r+0x1b0>
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	3307      	adds	r3, #7
 80076f8:	f023 0307 	bic.w	r3, r3, #7
 80076fc:	3308      	adds	r3, #8
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007702:	4433      	add	r3, r6
 8007704:	9309      	str	r3, [sp, #36]	@ 0x24
 8007706:	e76a      	b.n	80075de <_svfiprintf_r+0x52>
 8007708:	fb0c 3202 	mla	r2, ip, r2, r3
 800770c:	460c      	mov	r4, r1
 800770e:	2001      	movs	r0, #1
 8007710:	e7a8      	b.n	8007664 <_svfiprintf_r+0xd8>
 8007712:	2300      	movs	r3, #0
 8007714:	3401      	adds	r4, #1
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	4619      	mov	r1, r3
 800771a:	f04f 0c0a 	mov.w	ip, #10
 800771e:	4620      	mov	r0, r4
 8007720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007724:	3a30      	subs	r2, #48	@ 0x30
 8007726:	2a09      	cmp	r2, #9
 8007728:	d903      	bls.n	8007732 <_svfiprintf_r+0x1a6>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0c6      	beq.n	80076bc <_svfiprintf_r+0x130>
 800772e:	9105      	str	r1, [sp, #20]
 8007730:	e7c4      	b.n	80076bc <_svfiprintf_r+0x130>
 8007732:	fb0c 2101 	mla	r1, ip, r1, r2
 8007736:	4604      	mov	r4, r0
 8007738:	2301      	movs	r3, #1
 800773a:	e7f0      	b.n	800771e <_svfiprintf_r+0x192>
 800773c:	ab03      	add	r3, sp, #12
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	462a      	mov	r2, r5
 8007742:	4b0e      	ldr	r3, [pc, #56]	@ (800777c <_svfiprintf_r+0x1f0>)
 8007744:	a904      	add	r1, sp, #16
 8007746:	4638      	mov	r0, r7
 8007748:	f3af 8000 	nop.w
 800774c:	1c42      	adds	r2, r0, #1
 800774e:	4606      	mov	r6, r0
 8007750:	d1d6      	bne.n	8007700 <_svfiprintf_r+0x174>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	065b      	lsls	r3, r3, #25
 8007756:	f53f af2d 	bmi.w	80075b4 <_svfiprintf_r+0x28>
 800775a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800775c:	e72c      	b.n	80075b8 <_svfiprintf_r+0x2c>
 800775e:	ab03      	add	r3, sp, #12
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	462a      	mov	r2, r5
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <_svfiprintf_r+0x1f0>)
 8007766:	a904      	add	r1, sp, #16
 8007768:	4638      	mov	r0, r7
 800776a:	f000 f9bb 	bl	8007ae4 <_printf_i>
 800776e:	e7ed      	b.n	800774c <_svfiprintf_r+0x1c0>
 8007770:	08008584 	.word	0x08008584
 8007774:	0800858e 	.word	0x0800858e
 8007778:	00000000 	.word	0x00000000
 800777c:	080074d5 	.word	0x080074d5
 8007780:	0800858a 	.word	0x0800858a

08007784 <__sfputc_r>:
 8007784:	6893      	ldr	r3, [r2, #8]
 8007786:	3b01      	subs	r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	b410      	push	{r4}
 800778c:	6093      	str	r3, [r2, #8]
 800778e:	da08      	bge.n	80077a2 <__sfputc_r+0x1e>
 8007790:	6994      	ldr	r4, [r2, #24]
 8007792:	42a3      	cmp	r3, r4
 8007794:	db01      	blt.n	800779a <__sfputc_r+0x16>
 8007796:	290a      	cmp	r1, #10
 8007798:	d103      	bne.n	80077a2 <__sfputc_r+0x1e>
 800779a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800779e:	f000 bb6d 	b.w	8007e7c <__swbuf_r>
 80077a2:	6813      	ldr	r3, [r2, #0]
 80077a4:	1c58      	adds	r0, r3, #1
 80077a6:	6010      	str	r0, [r2, #0]
 80077a8:	7019      	strb	r1, [r3, #0]
 80077aa:	4608      	mov	r0, r1
 80077ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <__sfputs_r>:
 80077b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	18d5      	adds	r5, r2, r3
 80077bc:	42ac      	cmp	r4, r5
 80077be:	d101      	bne.n	80077c4 <__sfputs_r+0x12>
 80077c0:	2000      	movs	r0, #0
 80077c2:	e007      	b.n	80077d4 <__sfputs_r+0x22>
 80077c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c8:	463a      	mov	r2, r7
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ffda 	bl	8007784 <__sfputc_r>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d1f3      	bne.n	80077bc <__sfputs_r+0xa>
 80077d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077d8 <_vfiprintf_r>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	460d      	mov	r5, r1
 80077de:	b09d      	sub	sp, #116	@ 0x74
 80077e0:	4614      	mov	r4, r2
 80077e2:	4698      	mov	r8, r3
 80077e4:	4606      	mov	r6, r0
 80077e6:	b118      	cbz	r0, 80077f0 <_vfiprintf_r+0x18>
 80077e8:	6a03      	ldr	r3, [r0, #32]
 80077ea:	b90b      	cbnz	r3, 80077f0 <_vfiprintf_r+0x18>
 80077ec:	f7ff fc84 	bl	80070f8 <__sinit>
 80077f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	d405      	bmi.n	8007802 <_vfiprintf_r+0x2a>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	059a      	lsls	r2, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_vfiprintf_r+0x2a>
 80077fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077fe:	f7ff fe06 	bl	800740e <__retarget_lock_acquire_recursive>
 8007802:	89ab      	ldrh	r3, [r5, #12]
 8007804:	071b      	lsls	r3, r3, #28
 8007806:	d501      	bpl.n	800780c <_vfiprintf_r+0x34>
 8007808:	692b      	ldr	r3, [r5, #16]
 800780a:	b99b      	cbnz	r3, 8007834 <_vfiprintf_r+0x5c>
 800780c:	4629      	mov	r1, r5
 800780e:	4630      	mov	r0, r6
 8007810:	f000 fb72 	bl	8007ef8 <__swsetup_r>
 8007814:	b170      	cbz	r0, 8007834 <_vfiprintf_r+0x5c>
 8007816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007818:	07dc      	lsls	r4, r3, #31
 800781a:	d504      	bpl.n	8007826 <_vfiprintf_r+0x4e>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	b01d      	add	sp, #116	@ 0x74
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	0598      	lsls	r0, r3, #22
 800782a:	d4f7      	bmi.n	800781c <_vfiprintf_r+0x44>
 800782c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800782e:	f7ff fdef 	bl	8007410 <__retarget_lock_release_recursive>
 8007832:	e7f3      	b.n	800781c <_vfiprintf_r+0x44>
 8007834:	2300      	movs	r3, #0
 8007836:	9309      	str	r3, [sp, #36]	@ 0x24
 8007838:	2320      	movs	r3, #32
 800783a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800783e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007842:	2330      	movs	r3, #48	@ 0x30
 8007844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80079f4 <_vfiprintf_r+0x21c>
 8007848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800784c:	f04f 0901 	mov.w	r9, #1
 8007850:	4623      	mov	r3, r4
 8007852:	469a      	mov	sl, r3
 8007854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007858:	b10a      	cbz	r2, 800785e <_vfiprintf_r+0x86>
 800785a:	2a25      	cmp	r2, #37	@ 0x25
 800785c:	d1f9      	bne.n	8007852 <_vfiprintf_r+0x7a>
 800785e:	ebba 0b04 	subs.w	fp, sl, r4
 8007862:	d00b      	beq.n	800787c <_vfiprintf_r+0xa4>
 8007864:	465b      	mov	r3, fp
 8007866:	4622      	mov	r2, r4
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ffa1 	bl	80077b2 <__sfputs_r>
 8007870:	3001      	adds	r0, #1
 8007872:	f000 80a7 	beq.w	80079c4 <_vfiprintf_r+0x1ec>
 8007876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007878:	445a      	add	r2, fp
 800787a:	9209      	str	r2, [sp, #36]	@ 0x24
 800787c:	f89a 3000 	ldrb.w	r3, [sl]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 809f 	beq.w	80079c4 <_vfiprintf_r+0x1ec>
 8007886:	2300      	movs	r3, #0
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007890:	f10a 0a01 	add.w	sl, sl, #1
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800789c:	931a      	str	r3, [sp, #104]	@ 0x68
 800789e:	4654      	mov	r4, sl
 80078a0:	2205      	movs	r2, #5
 80078a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a6:	4853      	ldr	r0, [pc, #332]	@ (80079f4 <_vfiprintf_r+0x21c>)
 80078a8:	f7f8 fc9a 	bl	80001e0 <memchr>
 80078ac:	9a04      	ldr	r2, [sp, #16]
 80078ae:	b9d8      	cbnz	r0, 80078e8 <_vfiprintf_r+0x110>
 80078b0:	06d1      	lsls	r1, r2, #27
 80078b2:	bf44      	itt	mi
 80078b4:	2320      	movmi	r3, #32
 80078b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ba:	0713      	lsls	r3, r2, #28
 80078bc:	bf44      	itt	mi
 80078be:	232b      	movmi	r3, #43	@ 0x2b
 80078c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078c4:	f89a 3000 	ldrb.w	r3, [sl]
 80078c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ca:	d015      	beq.n	80078f8 <_vfiprintf_r+0x120>
 80078cc:	9a07      	ldr	r2, [sp, #28]
 80078ce:	4654      	mov	r4, sl
 80078d0:	2000      	movs	r0, #0
 80078d2:	f04f 0c0a 	mov.w	ip, #10
 80078d6:	4621      	mov	r1, r4
 80078d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078dc:	3b30      	subs	r3, #48	@ 0x30
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d94b      	bls.n	800797a <_vfiprintf_r+0x1a2>
 80078e2:	b1b0      	cbz	r0, 8007912 <_vfiprintf_r+0x13a>
 80078e4:	9207      	str	r2, [sp, #28]
 80078e6:	e014      	b.n	8007912 <_vfiprintf_r+0x13a>
 80078e8:	eba0 0308 	sub.w	r3, r0, r8
 80078ec:	fa09 f303 	lsl.w	r3, r9, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	46a2      	mov	sl, r4
 80078f6:	e7d2      	b.n	800789e <_vfiprintf_r+0xc6>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	1d19      	adds	r1, r3, #4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	9103      	str	r1, [sp, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfbb      	ittet	lt
 8007904:	425b      	neglt	r3, r3
 8007906:	f042 0202 	orrlt.w	r2, r2, #2
 800790a:	9307      	strge	r3, [sp, #28]
 800790c:	9307      	strlt	r3, [sp, #28]
 800790e:	bfb8      	it	lt
 8007910:	9204      	strlt	r2, [sp, #16]
 8007912:	7823      	ldrb	r3, [r4, #0]
 8007914:	2b2e      	cmp	r3, #46	@ 0x2e
 8007916:	d10a      	bne.n	800792e <_vfiprintf_r+0x156>
 8007918:	7863      	ldrb	r3, [r4, #1]
 800791a:	2b2a      	cmp	r3, #42	@ 0x2a
 800791c:	d132      	bne.n	8007984 <_vfiprintf_r+0x1ac>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	9203      	str	r2, [sp, #12]
 8007926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800792a:	3402      	adds	r4, #2
 800792c:	9305      	str	r3, [sp, #20]
 800792e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a04 <_vfiprintf_r+0x22c>
 8007932:	7821      	ldrb	r1, [r4, #0]
 8007934:	2203      	movs	r2, #3
 8007936:	4650      	mov	r0, sl
 8007938:	f7f8 fc52 	bl	80001e0 <memchr>
 800793c:	b138      	cbz	r0, 800794e <_vfiprintf_r+0x176>
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	eba0 000a 	sub.w	r0, r0, sl
 8007944:	2240      	movs	r2, #64	@ 0x40
 8007946:	4082      	lsls	r2, r0
 8007948:	4313      	orrs	r3, r2
 800794a:	3401      	adds	r4, #1
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007952:	4829      	ldr	r0, [pc, #164]	@ (80079f8 <_vfiprintf_r+0x220>)
 8007954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007958:	2206      	movs	r2, #6
 800795a:	f7f8 fc41 	bl	80001e0 <memchr>
 800795e:	2800      	cmp	r0, #0
 8007960:	d03f      	beq.n	80079e2 <_vfiprintf_r+0x20a>
 8007962:	4b26      	ldr	r3, [pc, #152]	@ (80079fc <_vfiprintf_r+0x224>)
 8007964:	bb1b      	cbnz	r3, 80079ae <_vfiprintf_r+0x1d6>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	3307      	adds	r3, #7
 800796a:	f023 0307 	bic.w	r3, r3, #7
 800796e:	3308      	adds	r3, #8
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	443b      	add	r3, r7
 8007976:	9309      	str	r3, [sp, #36]	@ 0x24
 8007978:	e76a      	b.n	8007850 <_vfiprintf_r+0x78>
 800797a:	fb0c 3202 	mla	r2, ip, r2, r3
 800797e:	460c      	mov	r4, r1
 8007980:	2001      	movs	r0, #1
 8007982:	e7a8      	b.n	80078d6 <_vfiprintf_r+0xfe>
 8007984:	2300      	movs	r3, #0
 8007986:	3401      	adds	r4, #1
 8007988:	9305      	str	r3, [sp, #20]
 800798a:	4619      	mov	r1, r3
 800798c:	f04f 0c0a 	mov.w	ip, #10
 8007990:	4620      	mov	r0, r4
 8007992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007996:	3a30      	subs	r2, #48	@ 0x30
 8007998:	2a09      	cmp	r2, #9
 800799a:	d903      	bls.n	80079a4 <_vfiprintf_r+0x1cc>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0c6      	beq.n	800792e <_vfiprintf_r+0x156>
 80079a0:	9105      	str	r1, [sp, #20]
 80079a2:	e7c4      	b.n	800792e <_vfiprintf_r+0x156>
 80079a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a8:	4604      	mov	r4, r0
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7f0      	b.n	8007990 <_vfiprintf_r+0x1b8>
 80079ae:	ab03      	add	r3, sp, #12
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	462a      	mov	r2, r5
 80079b4:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <_vfiprintf_r+0x228>)
 80079b6:	a904      	add	r1, sp, #16
 80079b8:	4630      	mov	r0, r6
 80079ba:	f3af 8000 	nop.w
 80079be:	4607      	mov	r7, r0
 80079c0:	1c78      	adds	r0, r7, #1
 80079c2:	d1d6      	bne.n	8007972 <_vfiprintf_r+0x19a>
 80079c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079c6:	07d9      	lsls	r1, r3, #31
 80079c8:	d405      	bmi.n	80079d6 <_vfiprintf_r+0x1fe>
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	059a      	lsls	r2, r3, #22
 80079ce:	d402      	bmi.n	80079d6 <_vfiprintf_r+0x1fe>
 80079d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079d2:	f7ff fd1d 	bl	8007410 <__retarget_lock_release_recursive>
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	065b      	lsls	r3, r3, #25
 80079da:	f53f af1f 	bmi.w	800781c <_vfiprintf_r+0x44>
 80079de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079e0:	e71e      	b.n	8007820 <_vfiprintf_r+0x48>
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	462a      	mov	r2, r5
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <_vfiprintf_r+0x228>)
 80079ea:	a904      	add	r1, sp, #16
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f879 	bl	8007ae4 <_printf_i>
 80079f2:	e7e4      	b.n	80079be <_vfiprintf_r+0x1e6>
 80079f4:	08008584 	.word	0x08008584
 80079f8:	0800858e 	.word	0x0800858e
 80079fc:	00000000 	.word	0x00000000
 8007a00:	080077b3 	.word	0x080077b3
 8007a04:	0800858a 	.word	0x0800858a

08007a08 <_printf_common>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	4698      	mov	r8, r3
 8007a10:	688a      	ldr	r2, [r1, #8]
 8007a12:	690b      	ldr	r3, [r1, #16]
 8007a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	bfb8      	it	lt
 8007a1c:	4613      	movlt	r3, r2
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a24:	4607      	mov	r7, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	b10a      	cbz	r2, 8007a2e <_printf_common+0x26>
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	0699      	lsls	r1, r3, #26
 8007a32:	bf42      	ittt	mi
 8007a34:	6833      	ldrmi	r3, [r6, #0]
 8007a36:	3302      	addmi	r3, #2
 8007a38:	6033      	strmi	r3, [r6, #0]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	f015 0506 	ands.w	r5, r5, #6
 8007a40:	d106      	bne.n	8007a50 <_printf_common+0x48>
 8007a42:	f104 0a19 	add.w	sl, r4, #25
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	6832      	ldr	r2, [r6, #0]
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dc26      	bgt.n	8007a9e <_printf_common+0x96>
 8007a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	3b00      	subs	r3, #0
 8007a58:	bf18      	it	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	0692      	lsls	r2, r2, #26
 8007a5e:	d42b      	bmi.n	8007ab8 <_printf_common+0xb0>
 8007a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a64:	4641      	mov	r1, r8
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c8      	blx	r9
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d01e      	beq.n	8007aac <_printf_common+0xa4>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6922      	ldr	r2, [r4, #16]
 8007a72:	f003 0306 	and.w	r3, r3, #6
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	bf02      	ittt	eq
 8007a7a:	68e5      	ldreq	r5, [r4, #12]
 8007a7c:	6833      	ldreq	r3, [r6, #0]
 8007a7e:	1aed      	subeq	r5, r5, r3
 8007a80:	68a3      	ldr	r3, [r4, #8]
 8007a82:	bf0c      	ite	eq
 8007a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a88:	2500      	movne	r5, #0
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bfc4      	itt	gt
 8007a8e:	1a9b      	subgt	r3, r3, r2
 8007a90:	18ed      	addgt	r5, r5, r3
 8007a92:	2600      	movs	r6, #0
 8007a94:	341a      	adds	r4, #26
 8007a96:	42b5      	cmp	r5, r6
 8007a98:	d11a      	bne.n	8007ad0 <_printf_common+0xc8>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e008      	b.n	8007ab0 <_printf_common+0xa8>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	47c8      	blx	r9
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d103      	bne.n	8007ab4 <_printf_common+0xac>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	e7c6      	b.n	8007a46 <_printf_common+0x3e>
 8007ab8:	18e1      	adds	r1, r4, r3
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	2030      	movs	r0, #48	@ 0x30
 8007abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ac2:	4422      	add	r2, r4
 8007ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007acc:	3302      	adds	r3, #2
 8007ace:	e7c7      	b.n	8007a60 <_printf_common+0x58>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	47c8      	blx	r9
 8007ada:	3001      	adds	r0, #1
 8007adc:	d0e6      	beq.n	8007aac <_printf_common+0xa4>
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7d9      	b.n	8007a96 <_printf_common+0x8e>
	...

08007ae4 <_printf_i>:
 8007ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	7e0f      	ldrb	r7, [r1, #24]
 8007aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aec:	2f78      	cmp	r7, #120	@ 0x78
 8007aee:	4691      	mov	r9, r2
 8007af0:	4680      	mov	r8, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	469a      	mov	sl, r3
 8007af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007afa:	d807      	bhi.n	8007b0c <_printf_i+0x28>
 8007afc:	2f62      	cmp	r7, #98	@ 0x62
 8007afe:	d80a      	bhi.n	8007b16 <_printf_i+0x32>
 8007b00:	2f00      	cmp	r7, #0
 8007b02:	f000 80d2 	beq.w	8007caa <_printf_i+0x1c6>
 8007b06:	2f58      	cmp	r7, #88	@ 0x58
 8007b08:	f000 80b9 	beq.w	8007c7e <_printf_i+0x19a>
 8007b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b14:	e03a      	b.n	8007b8c <_printf_i+0xa8>
 8007b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b1a:	2b15      	cmp	r3, #21
 8007b1c:	d8f6      	bhi.n	8007b0c <_printf_i+0x28>
 8007b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b24 <_printf_i+0x40>)
 8007b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b24:	08007b7d 	.word	0x08007b7d
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007b0d 	.word	0x08007b0d
 8007b30:	08007b0d 	.word	0x08007b0d
 8007b34:	08007b0d 	.word	0x08007b0d
 8007b38:	08007b0d 	.word	0x08007b0d
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b0d 	.word	0x08007b0d
 8007b44:	08007b0d 	.word	0x08007b0d
 8007b48:	08007b0d 	.word	0x08007b0d
 8007b4c:	08007b0d 	.word	0x08007b0d
 8007b50:	08007c91 	.word	0x08007c91
 8007b54:	08007bbb 	.word	0x08007bbb
 8007b58:	08007c4b 	.word	0x08007c4b
 8007b5c:	08007b0d 	.word	0x08007b0d
 8007b60:	08007b0d 	.word	0x08007b0d
 8007b64:	08007cb3 	.word	0x08007cb3
 8007b68:	08007b0d 	.word	0x08007b0d
 8007b6c:	08007bbb 	.word	0x08007bbb
 8007b70:	08007b0d 	.word	0x08007b0d
 8007b74:	08007b0d 	.word	0x08007b0d
 8007b78:	08007c53 	.word	0x08007c53
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6032      	str	r2, [r6, #0]
 8007b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e09d      	b.n	8007ccc <_printf_i+0x1e8>
 8007b90:	6833      	ldr	r3, [r6, #0]
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	1d19      	adds	r1, r3, #4
 8007b96:	6031      	str	r1, [r6, #0]
 8007b98:	0606      	lsls	r6, r0, #24
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0xbc>
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	e003      	b.n	8007ba8 <_printf_i+0xc4>
 8007ba0:	0645      	lsls	r5, r0, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0xb8>
 8007ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	da03      	bge.n	8007bb4 <_printf_i+0xd0>
 8007bac:	232d      	movs	r3, #45	@ 0x2d
 8007bae:	426d      	negs	r5, r5
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bb4:	4859      	ldr	r0, [pc, #356]	@ (8007d1c <_printf_i+0x238>)
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	e011      	b.n	8007bde <_printf_i+0xfa>
 8007bba:	6821      	ldr	r1, [r4, #0]
 8007bbc:	6833      	ldr	r3, [r6, #0]
 8007bbe:	0608      	lsls	r0, r1, #24
 8007bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bc4:	d402      	bmi.n	8007bcc <_printf_i+0xe8>
 8007bc6:	0649      	lsls	r1, r1, #25
 8007bc8:	bf48      	it	mi
 8007bca:	b2ad      	uxthmi	r5, r5
 8007bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bce:	4853      	ldr	r0, [pc, #332]	@ (8007d1c <_printf_i+0x238>)
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	bf14      	ite	ne
 8007bd4:	230a      	movne	r3, #10
 8007bd6:	2308      	moveq	r3, #8
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bde:	6866      	ldr	r6, [r4, #4]
 8007be0:	60a6      	str	r6, [r4, #8]
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	bfa2      	ittt	ge
 8007be6:	6821      	ldrge	r1, [r4, #0]
 8007be8:	f021 0104 	bicge.w	r1, r1, #4
 8007bec:	6021      	strge	r1, [r4, #0]
 8007bee:	b90d      	cbnz	r5, 8007bf4 <_printf_i+0x110>
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	d04b      	beq.n	8007c8c <_printf_i+0x1a8>
 8007bf4:	4616      	mov	r6, r2
 8007bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8007bfe:	5dc7      	ldrb	r7, [r0, r7]
 8007c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c04:	462f      	mov	r7, r5
 8007c06:	42bb      	cmp	r3, r7
 8007c08:	460d      	mov	r5, r1
 8007c0a:	d9f4      	bls.n	8007bf6 <_printf_i+0x112>
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d10b      	bne.n	8007c28 <_printf_i+0x144>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	07df      	lsls	r7, r3, #31
 8007c14:	d508      	bpl.n	8007c28 <_printf_i+0x144>
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	6861      	ldr	r1, [r4, #4]
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	bfde      	ittt	le
 8007c1e:	2330      	movle	r3, #48	@ 0x30
 8007c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c28:	1b92      	subs	r2, r2, r6
 8007c2a:	6122      	str	r2, [r4, #16]
 8007c2c:	f8cd a000 	str.w	sl, [sp]
 8007c30:	464b      	mov	r3, r9
 8007c32:	aa03      	add	r2, sp, #12
 8007c34:	4621      	mov	r1, r4
 8007c36:	4640      	mov	r0, r8
 8007c38:	f7ff fee6 	bl	8007a08 <_printf_common>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d14a      	bne.n	8007cd6 <_printf_i+0x1f2>
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	b004      	add	sp, #16
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	f043 0320 	orr.w	r3, r3, #32
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	4833      	ldr	r0, [pc, #204]	@ (8007d20 <_printf_i+0x23c>)
 8007c54:	2778      	movs	r7, #120	@ 0x78
 8007c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	6831      	ldr	r1, [r6, #0]
 8007c5e:	061f      	lsls	r7, r3, #24
 8007c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c64:	d402      	bmi.n	8007c6c <_printf_i+0x188>
 8007c66:	065f      	lsls	r7, r3, #25
 8007c68:	bf48      	it	mi
 8007c6a:	b2ad      	uxthmi	r5, r5
 8007c6c:	6031      	str	r1, [r6, #0]
 8007c6e:	07d9      	lsls	r1, r3, #31
 8007c70:	bf44      	itt	mi
 8007c72:	f043 0320 	orrmi.w	r3, r3, #32
 8007c76:	6023      	strmi	r3, [r4, #0]
 8007c78:	b11d      	cbz	r5, 8007c82 <_printf_i+0x19e>
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	e7ac      	b.n	8007bd8 <_printf_i+0xf4>
 8007c7e:	4827      	ldr	r0, [pc, #156]	@ (8007d1c <_printf_i+0x238>)
 8007c80:	e7e9      	b.n	8007c56 <_printf_i+0x172>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f023 0320 	bic.w	r3, r3, #32
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	e7f6      	b.n	8007c7a <_printf_i+0x196>
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	e7bd      	b.n	8007c0c <_printf_i+0x128>
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	6825      	ldr	r5, [r4, #0]
 8007c94:	6961      	ldr	r1, [r4, #20]
 8007c96:	1d18      	adds	r0, r3, #4
 8007c98:	6030      	str	r0, [r6, #0]
 8007c9a:	062e      	lsls	r6, r5, #24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	d501      	bpl.n	8007ca4 <_printf_i+0x1c0>
 8007ca0:	6019      	str	r1, [r3, #0]
 8007ca2:	e002      	b.n	8007caa <_printf_i+0x1c6>
 8007ca4:	0668      	lsls	r0, r5, #25
 8007ca6:	d5fb      	bpl.n	8007ca0 <_printf_i+0x1bc>
 8007ca8:	8019      	strh	r1, [r3, #0]
 8007caa:	2300      	movs	r3, #0
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	4616      	mov	r6, r2
 8007cb0:	e7bc      	b.n	8007c2c <_printf_i+0x148>
 8007cb2:	6833      	ldr	r3, [r6, #0]
 8007cb4:	1d1a      	adds	r2, r3, #4
 8007cb6:	6032      	str	r2, [r6, #0]
 8007cb8:	681e      	ldr	r6, [r3, #0]
 8007cba:	6862      	ldr	r2, [r4, #4]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7f8 fa8e 	bl	80001e0 <memchr>
 8007cc4:	b108      	cbz	r0, 8007cca <_printf_i+0x1e6>
 8007cc6:	1b80      	subs	r0, r0, r6
 8007cc8:	6060      	str	r0, [r4, #4]
 8007cca:	6863      	ldr	r3, [r4, #4]
 8007ccc:	6123      	str	r3, [r4, #16]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd4:	e7aa      	b.n	8007c2c <_printf_i+0x148>
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4640      	mov	r0, r8
 8007cde:	47d0      	blx	sl
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d0ad      	beq.n	8007c40 <_printf_i+0x15c>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	079b      	lsls	r3, r3, #30
 8007ce8:	d413      	bmi.n	8007d12 <_printf_i+0x22e>
 8007cea:	68e0      	ldr	r0, [r4, #12]
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	4298      	cmp	r0, r3
 8007cf0:	bfb8      	it	lt
 8007cf2:	4618      	movlt	r0, r3
 8007cf4:	e7a6      	b.n	8007c44 <_printf_i+0x160>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	47d0      	blx	sl
 8007d00:	3001      	adds	r0, #1
 8007d02:	d09d      	beq.n	8007c40 <_printf_i+0x15c>
 8007d04:	3501      	adds	r5, #1
 8007d06:	68e3      	ldr	r3, [r4, #12]
 8007d08:	9903      	ldr	r1, [sp, #12]
 8007d0a:	1a5b      	subs	r3, r3, r1
 8007d0c:	42ab      	cmp	r3, r5
 8007d0e:	dcf2      	bgt.n	8007cf6 <_printf_i+0x212>
 8007d10:	e7eb      	b.n	8007cea <_printf_i+0x206>
 8007d12:	2500      	movs	r5, #0
 8007d14:	f104 0619 	add.w	r6, r4, #25
 8007d18:	e7f5      	b.n	8007d06 <_printf_i+0x222>
 8007d1a:	bf00      	nop
 8007d1c:	08008595 	.word	0x08008595
 8007d20:	080085a6 	.word	0x080085a6

08007d24 <__sflush_r>:
 8007d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2c:	0716      	lsls	r6, r2, #28
 8007d2e:	4605      	mov	r5, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	d454      	bmi.n	8007dde <__sflush_r+0xba>
 8007d34:	684b      	ldr	r3, [r1, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dc02      	bgt.n	8007d40 <__sflush_r+0x1c>
 8007d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dd48      	ble.n	8007dd2 <__sflush_r+0xae>
 8007d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	d045      	beq.n	8007dd2 <__sflush_r+0xae>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d4c:	682f      	ldr	r7, [r5, #0]
 8007d4e:	6a21      	ldr	r1, [r4, #32]
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	d030      	beq.n	8007db6 <__sflush_r+0x92>
 8007d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	0759      	lsls	r1, r3, #29
 8007d5a:	d505      	bpl.n	8007d68 <__sflush_r+0x44>
 8007d5c:	6863      	ldr	r3, [r4, #4]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d62:	b10b      	cbz	r3, 8007d68 <__sflush_r+0x44>
 8007d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d6c:	6a21      	ldr	r1, [r4, #32]
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b0      	blx	r6
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	d106      	bne.n	8007d86 <__sflush_r+0x62>
 8007d78:	6829      	ldr	r1, [r5, #0]
 8007d7a:	291d      	cmp	r1, #29
 8007d7c:	d82b      	bhi.n	8007dd6 <__sflush_r+0xb2>
 8007d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e28 <__sflush_r+0x104>)
 8007d80:	410a      	asrs	r2, r1
 8007d82:	07d6      	lsls	r6, r2, #31
 8007d84:	d427      	bmi.n	8007dd6 <__sflush_r+0xb2>
 8007d86:	2200      	movs	r2, #0
 8007d88:	6062      	str	r2, [r4, #4]
 8007d8a:	04d9      	lsls	r1, r3, #19
 8007d8c:	6922      	ldr	r2, [r4, #16]
 8007d8e:	6022      	str	r2, [r4, #0]
 8007d90:	d504      	bpl.n	8007d9c <__sflush_r+0x78>
 8007d92:	1c42      	adds	r2, r0, #1
 8007d94:	d101      	bne.n	8007d9a <__sflush_r+0x76>
 8007d96:	682b      	ldr	r3, [r5, #0]
 8007d98:	b903      	cbnz	r3, 8007d9c <__sflush_r+0x78>
 8007d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d9e:	602f      	str	r7, [r5, #0]
 8007da0:	b1b9      	cbz	r1, 8007dd2 <__sflush_r+0xae>
 8007da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d002      	beq.n	8007db0 <__sflush_r+0x8c>
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7ff fb40 	bl	8007430 <_free_r>
 8007db0:	2300      	movs	r3, #0
 8007db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007db4:	e00d      	b.n	8007dd2 <__sflush_r+0xae>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b0      	blx	r6
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	1c50      	adds	r0, r2, #1
 8007dc0:	d1c9      	bne.n	8007d56 <__sflush_r+0x32>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0c6      	beq.n	8007d56 <__sflush_r+0x32>
 8007dc8:	2b1d      	cmp	r3, #29
 8007dca:	d001      	beq.n	8007dd0 <__sflush_r+0xac>
 8007dcc:	2b16      	cmp	r3, #22
 8007dce:	d11e      	bne.n	8007e0e <__sflush_r+0xea>
 8007dd0:	602f      	str	r7, [r5, #0]
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	e022      	b.n	8007e1c <__sflush_r+0xf8>
 8007dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dda:	b21b      	sxth	r3, r3
 8007ddc:	e01b      	b.n	8007e16 <__sflush_r+0xf2>
 8007dde:	690f      	ldr	r7, [r1, #16]
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	d0f6      	beq.n	8007dd2 <__sflush_r+0xae>
 8007de4:	0793      	lsls	r3, r2, #30
 8007de6:	680e      	ldr	r6, [r1, #0]
 8007de8:	bf08      	it	eq
 8007dea:	694b      	ldreq	r3, [r1, #20]
 8007dec:	600f      	str	r7, [r1, #0]
 8007dee:	bf18      	it	ne
 8007df0:	2300      	movne	r3, #0
 8007df2:	eba6 0807 	sub.w	r8, r6, r7
 8007df6:	608b      	str	r3, [r1, #8]
 8007df8:	f1b8 0f00 	cmp.w	r8, #0
 8007dfc:	dde9      	ble.n	8007dd2 <__sflush_r+0xae>
 8007dfe:	6a21      	ldr	r1, [r4, #32]
 8007e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e02:	4643      	mov	r3, r8
 8007e04:	463a      	mov	r2, r7
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b0      	blx	r6
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	dc08      	bgt.n	8007e20 <__sflush_r+0xfc>
 8007e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e20:	4407      	add	r7, r0
 8007e22:	eba8 0800 	sub.w	r8, r8, r0
 8007e26:	e7e7      	b.n	8007df8 <__sflush_r+0xd4>
 8007e28:	dfbffffe 	.word	0xdfbffffe

08007e2c <_fflush_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	690b      	ldr	r3, [r1, #16]
 8007e30:	4605      	mov	r5, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	b913      	cbnz	r3, 8007e3c <_fflush_r+0x10>
 8007e36:	2500      	movs	r5, #0
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	b118      	cbz	r0, 8007e46 <_fflush_r+0x1a>
 8007e3e:	6a03      	ldr	r3, [r0, #32]
 8007e40:	b90b      	cbnz	r3, 8007e46 <_fflush_r+0x1a>
 8007e42:	f7ff f959 	bl	80070f8 <__sinit>
 8007e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f3      	beq.n	8007e36 <_fflush_r+0xa>
 8007e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e50:	07d0      	lsls	r0, r2, #31
 8007e52:	d404      	bmi.n	8007e5e <_fflush_r+0x32>
 8007e54:	0599      	lsls	r1, r3, #22
 8007e56:	d402      	bmi.n	8007e5e <_fflush_r+0x32>
 8007e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e5a:	f7ff fad8 	bl	800740e <__retarget_lock_acquire_recursive>
 8007e5e:	4628      	mov	r0, r5
 8007e60:	4621      	mov	r1, r4
 8007e62:	f7ff ff5f 	bl	8007d24 <__sflush_r>
 8007e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e68:	07da      	lsls	r2, r3, #31
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	d4e4      	bmi.n	8007e38 <_fflush_r+0xc>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	059b      	lsls	r3, r3, #22
 8007e72:	d4e1      	bmi.n	8007e38 <_fflush_r+0xc>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f7ff facb 	bl	8007410 <__retarget_lock_release_recursive>
 8007e7a:	e7dd      	b.n	8007e38 <_fflush_r+0xc>

08007e7c <__swbuf_r>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	460e      	mov	r6, r1
 8007e80:	4614      	mov	r4, r2
 8007e82:	4605      	mov	r5, r0
 8007e84:	b118      	cbz	r0, 8007e8e <__swbuf_r+0x12>
 8007e86:	6a03      	ldr	r3, [r0, #32]
 8007e88:	b90b      	cbnz	r3, 8007e8e <__swbuf_r+0x12>
 8007e8a:	f7ff f935 	bl	80070f8 <__sinit>
 8007e8e:	69a3      	ldr	r3, [r4, #24]
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	071a      	lsls	r2, r3, #28
 8007e96:	d501      	bpl.n	8007e9c <__swbuf_r+0x20>
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	b943      	cbnz	r3, 8007eae <__swbuf_r+0x32>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f82a 	bl	8007ef8 <__swsetup_r>
 8007ea4:	b118      	cbz	r0, 8007eae <__swbuf_r+0x32>
 8007ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8007eaa:	4638      	mov	r0, r7
 8007eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	1a98      	subs	r0, r3, r2
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	b2f6      	uxtb	r6, r6
 8007eb8:	4283      	cmp	r3, r0
 8007eba:	4637      	mov	r7, r6
 8007ebc:	dc05      	bgt.n	8007eca <__swbuf_r+0x4e>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f7ff ffb3 	bl	8007e2c <_fflush_r>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d1ed      	bne.n	8007ea6 <__swbuf_r+0x2a>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	701e      	strb	r6, [r3, #0]
 8007ed8:	6962      	ldr	r2, [r4, #20]
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d004      	beq.n	8007eea <__swbuf_r+0x6e>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d5e1      	bpl.n	8007eaa <__swbuf_r+0x2e>
 8007ee6:	2e0a      	cmp	r6, #10
 8007ee8:	d1df      	bne.n	8007eaa <__swbuf_r+0x2e>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7ff ff9d 	bl	8007e2c <_fflush_r>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d0d9      	beq.n	8007eaa <__swbuf_r+0x2e>
 8007ef6:	e7d6      	b.n	8007ea6 <__swbuf_r+0x2a>

08007ef8 <__swsetup_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4b29      	ldr	r3, [pc, #164]	@ (8007fa0 <__swsetup_r+0xa8>)
 8007efc:	4605      	mov	r5, r0
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	460c      	mov	r4, r1
 8007f02:	b118      	cbz	r0, 8007f0c <__swsetup_r+0x14>
 8007f04:	6a03      	ldr	r3, [r0, #32]
 8007f06:	b90b      	cbnz	r3, 8007f0c <__swsetup_r+0x14>
 8007f08:	f7ff f8f6 	bl	80070f8 <__sinit>
 8007f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f10:	0719      	lsls	r1, r3, #28
 8007f12:	d422      	bmi.n	8007f5a <__swsetup_r+0x62>
 8007f14:	06da      	lsls	r2, r3, #27
 8007f16:	d407      	bmi.n	8007f28 <__swsetup_r+0x30>
 8007f18:	2209      	movs	r2, #9
 8007f1a:	602a      	str	r2, [r5, #0]
 8007f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	e033      	b.n	8007f90 <__swsetup_r+0x98>
 8007f28:	0758      	lsls	r0, r3, #29
 8007f2a:	d512      	bpl.n	8007f52 <__swsetup_r+0x5a>
 8007f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f2e:	b141      	cbz	r1, 8007f42 <__swsetup_r+0x4a>
 8007f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f34:	4299      	cmp	r1, r3
 8007f36:	d002      	beq.n	8007f3e <__swsetup_r+0x46>
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7ff fa79 	bl	8007430 <_free_r>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f043 0308 	orr.w	r3, r3, #8
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	b94b      	cbnz	r3, 8007f72 <__swsetup_r+0x7a>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f68:	d003      	beq.n	8007f72 <__swsetup_r+0x7a>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 f859 	bl	8008024 <__smakebuf_r>
 8007f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f76:	f013 0201 	ands.w	r2, r3, #1
 8007f7a:	d00a      	beq.n	8007f92 <__swsetup_r+0x9a>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	60a2      	str	r2, [r4, #8]
 8007f80:	6962      	ldr	r2, [r4, #20]
 8007f82:	4252      	negs	r2, r2
 8007f84:	61a2      	str	r2, [r4, #24]
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	b942      	cbnz	r2, 8007f9c <__swsetup_r+0xa4>
 8007f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f8e:	d1c5      	bne.n	8007f1c <__swsetup_r+0x24>
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
 8007f92:	0799      	lsls	r1, r3, #30
 8007f94:	bf58      	it	pl
 8007f96:	6962      	ldrpl	r2, [r4, #20]
 8007f98:	60a2      	str	r2, [r4, #8]
 8007f9a:	e7f4      	b.n	8007f86 <__swsetup_r+0x8e>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7f7      	b.n	8007f90 <__swsetup_r+0x98>
 8007fa0:	20000020 	.word	0x20000020

08007fa4 <memmove>:
 8007fa4:	4288      	cmp	r0, r1
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	eb01 0402 	add.w	r4, r1, r2
 8007fac:	d902      	bls.n	8007fb4 <memmove+0x10>
 8007fae:	4284      	cmp	r4, r0
 8007fb0:	4623      	mov	r3, r4
 8007fb2:	d807      	bhi.n	8007fc4 <memmove+0x20>
 8007fb4:	1e43      	subs	r3, r0, #1
 8007fb6:	42a1      	cmp	r1, r4
 8007fb8:	d008      	beq.n	8007fcc <memmove+0x28>
 8007fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fc2:	e7f8      	b.n	8007fb6 <memmove+0x12>
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	428a      	cmp	r2, r1
 8007fca:	d100      	bne.n	8007fce <memmove+0x2a>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fd6:	e7f7      	b.n	8007fc8 <memmove+0x24>

08007fd8 <__swhatbuf_r>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	460c      	mov	r4, r1
 8007fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	b096      	sub	sp, #88	@ 0x58
 8007fe4:	4615      	mov	r5, r2
 8007fe6:	461e      	mov	r6, r3
 8007fe8:	da0d      	bge.n	8008006 <__swhatbuf_r+0x2e>
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ff0:	f04f 0100 	mov.w	r1, #0
 8007ff4:	bf14      	ite	ne
 8007ff6:	2340      	movne	r3, #64	@ 0x40
 8007ff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	6031      	str	r1, [r6, #0]
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	b016      	add	sp, #88	@ 0x58
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	466a      	mov	r2, sp
 8008008:	f000 f848 	bl	800809c <_fstat_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	dbec      	blt.n	8007fea <__swhatbuf_r+0x12>
 8008010:	9901      	ldr	r1, [sp, #4]
 8008012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800801a:	4259      	negs	r1, r3
 800801c:	4159      	adcs	r1, r3
 800801e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008022:	e7eb      	b.n	8007ffc <__swhatbuf_r+0x24>

08008024 <__smakebuf_r>:
 8008024:	898b      	ldrh	r3, [r1, #12]
 8008026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008028:	079d      	lsls	r5, r3, #30
 800802a:	4606      	mov	r6, r0
 800802c:	460c      	mov	r4, r1
 800802e:	d507      	bpl.n	8008040 <__smakebuf_r+0x1c>
 8008030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	2301      	movs	r3, #1
 800803a:	6163      	str	r3, [r4, #20]
 800803c:	b003      	add	sp, #12
 800803e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008040:	ab01      	add	r3, sp, #4
 8008042:	466a      	mov	r2, sp
 8008044:	f7ff ffc8 	bl	8007fd8 <__swhatbuf_r>
 8008048:	9f00      	ldr	r7, [sp, #0]
 800804a:	4605      	mov	r5, r0
 800804c:	4639      	mov	r1, r7
 800804e:	4630      	mov	r0, r6
 8008050:	f7fe ff0c 	bl	8006e6c <_malloc_r>
 8008054:	b948      	cbnz	r0, 800806a <__smakebuf_r+0x46>
 8008056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805a:	059a      	lsls	r2, r3, #22
 800805c:	d4ee      	bmi.n	800803c <__smakebuf_r+0x18>
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	f043 0302 	orr.w	r3, r3, #2
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	e7e2      	b.n	8008030 <__smakebuf_r+0xc>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	6020      	str	r0, [r4, #0]
 800806e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800807a:	b15b      	cbz	r3, 8008094 <__smakebuf_r+0x70>
 800807c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008080:	4630      	mov	r0, r6
 8008082:	f000 f81d 	bl	80080c0 <_isatty_r>
 8008086:	b128      	cbz	r0, 8008094 <__smakebuf_r+0x70>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	431d      	orrs	r5, r3
 8008098:	81a5      	strh	r5, [r4, #12]
 800809a:	e7cf      	b.n	800803c <__smakebuf_r+0x18>

0800809c <_fstat_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	@ (80080bc <_fstat_r+0x20>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	f000 f9c1 	bl	8008430 <_fstat>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	d102      	bne.n	80080b8 <_fstat_r+0x1c>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	b103      	cbz	r3, 80080b8 <_fstat_r+0x1c>
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	bd38      	pop	{r3, r4, r5, pc}
 80080ba:	bf00      	nop
 80080bc:	2000432c 	.word	0x2000432c

080080c0 <_isatty_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d06      	ldr	r5, [pc, #24]	@ (80080dc <_isatty_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f000 f9b8 	bl	8008440 <_isatty>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_isatty_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_isatty_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	2000432c 	.word	0x2000432c

080080e0 <atan2f>:
 80080e0:	f000 b822 	b.w	8008128 <__ieee754_atan2f>

080080e4 <sqrtf>:
 80080e4:	b508      	push	{r3, lr}
 80080e6:	ed2d 8b02 	vpush	{d8}
 80080ea:	eeb0 8a40 	vmov.f32	s16, s0
 80080ee:	f000 f817 	bl	8008120 <__ieee754_sqrtf>
 80080f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	d60c      	bvs.n	8008116 <sqrtf+0x32>
 80080fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800811c <sqrtf+0x38>
 8008100:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008108:	d505      	bpl.n	8008116 <sqrtf+0x32>
 800810a:	f7ff f955 	bl	80073b8 <__errno>
 800810e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008112:	2321      	movs	r3, #33	@ 0x21
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	ecbd 8b02 	vpop	{d8}
 800811a:	bd08      	pop	{r3, pc}
 800811c:	00000000 	.word	0x00000000

08008120 <__ieee754_sqrtf>:
 8008120:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008124:	4770      	bx	lr
	...

08008128 <__ieee754_atan2f>:
 8008128:	ee10 2a90 	vmov	r2, s1
 800812c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008130:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008134:	b510      	push	{r4, lr}
 8008136:	eef0 7a40 	vmov.f32	s15, s0
 800813a:	d806      	bhi.n	800814a <__ieee754_atan2f+0x22>
 800813c:	ee10 0a10 	vmov	r0, s0
 8008140:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008144:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008148:	d904      	bls.n	8008154 <__ieee754_atan2f+0x2c>
 800814a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800814e:	eeb0 0a67 	vmov.f32	s0, s15
 8008152:	bd10      	pop	{r4, pc}
 8008154:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008158:	d103      	bne.n	8008162 <__ieee754_atan2f+0x3a>
 800815a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815e:	f000 b883 	b.w	8008268 <atanf>
 8008162:	1794      	asrs	r4, r2, #30
 8008164:	f004 0402 	and.w	r4, r4, #2
 8008168:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800816c:	b943      	cbnz	r3, 8008180 <__ieee754_atan2f+0x58>
 800816e:	2c02      	cmp	r4, #2
 8008170:	d05e      	beq.n	8008230 <__ieee754_atan2f+0x108>
 8008172:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008244 <__ieee754_atan2f+0x11c>
 8008176:	2c03      	cmp	r4, #3
 8008178:	bf08      	it	eq
 800817a:	eef0 7a47 	vmoveq.f32	s15, s14
 800817e:	e7e6      	b.n	800814e <__ieee754_atan2f+0x26>
 8008180:	b941      	cbnz	r1, 8008194 <__ieee754_atan2f+0x6c>
 8008182:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8008248 <__ieee754_atan2f+0x120>
 8008186:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800824c <__ieee754_atan2f+0x124>
 800818a:	2800      	cmp	r0, #0
 800818c:	bfb8      	it	lt
 800818e:	eef0 7a47 	vmovlt.f32	s15, s14
 8008192:	e7dc      	b.n	800814e <__ieee754_atan2f+0x26>
 8008194:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008198:	d110      	bne.n	80081bc <__ieee754_atan2f+0x94>
 800819a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800819e:	f104 34ff 	add.w	r4, r4, #4294967295
 80081a2:	d107      	bne.n	80081b4 <__ieee754_atan2f+0x8c>
 80081a4:	2c02      	cmp	r4, #2
 80081a6:	d846      	bhi.n	8008236 <__ieee754_atan2f+0x10e>
 80081a8:	4b29      	ldr	r3, [pc, #164]	@ (8008250 <__ieee754_atan2f+0x128>)
 80081aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80081ae:	edd3 7a00 	vldr	s15, [r3]
 80081b2:	e7cc      	b.n	800814e <__ieee754_atan2f+0x26>
 80081b4:	2c02      	cmp	r4, #2
 80081b6:	d841      	bhi.n	800823c <__ieee754_atan2f+0x114>
 80081b8:	4b26      	ldr	r3, [pc, #152]	@ (8008254 <__ieee754_atan2f+0x12c>)
 80081ba:	e7f6      	b.n	80081aa <__ieee754_atan2f+0x82>
 80081bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80081c0:	d0df      	beq.n	8008182 <__ieee754_atan2f+0x5a>
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80081c8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80081cc:	da1a      	bge.n	8008204 <__ieee754_atan2f+0xdc>
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	da01      	bge.n	80081d6 <__ieee754_atan2f+0xae>
 80081d2:	313c      	adds	r1, #60	@ 0x3c
 80081d4:	db19      	blt.n	800820a <__ieee754_atan2f+0xe2>
 80081d6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80081da:	f000 f919 	bl	8008410 <fabsf>
 80081de:	f000 f843 	bl	8008268 <atanf>
 80081e2:	eef0 7a40 	vmov.f32	s15, s0
 80081e6:	2c01      	cmp	r4, #1
 80081e8:	d012      	beq.n	8008210 <__ieee754_atan2f+0xe8>
 80081ea:	2c02      	cmp	r4, #2
 80081ec:	d017      	beq.n	800821e <__ieee754_atan2f+0xf6>
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	d0ad      	beq.n	800814e <__ieee754_atan2f+0x26>
 80081f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008258 <__ieee754_atan2f+0x130>
 80081f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081fa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800825c <__ieee754_atan2f+0x134>
 80081fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008202:	e7a4      	b.n	800814e <__ieee754_atan2f+0x26>
 8008204:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8008248 <__ieee754_atan2f+0x120>
 8008208:	e7ed      	b.n	80081e6 <__ieee754_atan2f+0xbe>
 800820a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008260 <__ieee754_atan2f+0x138>
 800820e:	e7ea      	b.n	80081e6 <__ieee754_atan2f+0xbe>
 8008210:	ee17 3a90 	vmov	r3, s15
 8008214:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	e797      	b.n	800814e <__ieee754_atan2f+0x26>
 800821e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8008258 <__ieee754_atan2f+0x130>
 8008222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008226:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800825c <__ieee754_atan2f+0x134>
 800822a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800822e:	e78e      	b.n	800814e <__ieee754_atan2f+0x26>
 8008230:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800825c <__ieee754_atan2f+0x134>
 8008234:	e78b      	b.n	800814e <__ieee754_atan2f+0x26>
 8008236:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8008264 <__ieee754_atan2f+0x13c>
 800823a:	e788      	b.n	800814e <__ieee754_atan2f+0x26>
 800823c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008260 <__ieee754_atan2f+0x138>
 8008240:	e785      	b.n	800814e <__ieee754_atan2f+0x26>
 8008242:	bf00      	nop
 8008244:	c0490fdb 	.word	0xc0490fdb
 8008248:	3fc90fdb 	.word	0x3fc90fdb
 800824c:	bfc90fdb 	.word	0xbfc90fdb
 8008250:	080085c4 	.word	0x080085c4
 8008254:	080085b8 	.word	0x080085b8
 8008258:	33bbbd2e 	.word	0x33bbbd2e
 800825c:	40490fdb 	.word	0x40490fdb
 8008260:	00000000 	.word	0x00000000
 8008264:	3f490fdb 	.word	0x3f490fdb

08008268 <atanf>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	ee10 5a10 	vmov	r5, s0
 800826e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8008272:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8008276:	eef0 7a40 	vmov.f32	s15, s0
 800827a:	d310      	bcc.n	800829e <atanf+0x36>
 800827c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8008280:	d904      	bls.n	800828c <atanf+0x24>
 8008282:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008286:	eeb0 0a67 	vmov.f32	s0, s15
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80083c4 <atanf+0x15c>
 8008290:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80083c8 <atanf+0x160>
 8008294:	2d00      	cmp	r5, #0
 8008296:	bfc8      	it	gt
 8008298:	eef0 7a47 	vmovgt.f32	s15, s14
 800829c:	e7f3      	b.n	8008286 <atanf+0x1e>
 800829e:	4b4b      	ldr	r3, [pc, #300]	@ (80083cc <atanf+0x164>)
 80082a0:	429c      	cmp	r4, r3
 80082a2:	d810      	bhi.n	80082c6 <atanf+0x5e>
 80082a4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80082a8:	d20a      	bcs.n	80082c0 <atanf+0x58>
 80082aa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80083d0 <atanf+0x168>
 80082ae:	ee30 7a07 	vadd.f32	s14, s0, s14
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80082ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082be:	dce2      	bgt.n	8008286 <atanf+0x1e>
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	e013      	b.n	80082ee <atanf+0x86>
 80082c6:	f000 f8a3 	bl	8008410 <fabsf>
 80082ca:	4b42      	ldr	r3, [pc, #264]	@ (80083d4 <atanf+0x16c>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d84f      	bhi.n	8008370 <atanf+0x108>
 80082d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d841      	bhi.n	800835c <atanf+0xf4>
 80082d8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80082dc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80082e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80082e4:	2300      	movs	r3, #0
 80082e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80082f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80083d8 <atanf+0x170>
 80082f8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80083dc <atanf+0x174>
 80082fc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80083e0 <atanf+0x178>
 8008300:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008304:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008308:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80083e4 <atanf+0x17c>
 800830c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008310:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80083e8 <atanf+0x180>
 8008314:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008318:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80083ec <atanf+0x184>
 800831c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008320:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80083f0 <atanf+0x188>
 8008324:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008328:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80083f4 <atanf+0x18c>
 800832c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008330:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80083f8 <atanf+0x190>
 8008334:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008338:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80083fc <atanf+0x194>
 800833c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008340:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008400 <atanf+0x198>
 8008344:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008348:	ee27 7a26 	vmul.f32	s14, s14, s13
 800834c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008354:	d121      	bne.n	800839a <atanf+0x132>
 8008356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800835a:	e794      	b.n	8008286 <atanf+0x1e>
 800835c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008360:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008364:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008368:	2301      	movs	r3, #1
 800836a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800836e:	e7be      	b.n	80082ee <atanf+0x86>
 8008370:	4b24      	ldr	r3, [pc, #144]	@ (8008404 <atanf+0x19c>)
 8008372:	429c      	cmp	r4, r3
 8008374:	d80b      	bhi.n	800838e <atanf+0x126>
 8008376:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800837a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800837e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008382:	2302      	movs	r3, #2
 8008384:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838c:	e7af      	b.n	80082ee <atanf+0x86>
 800838e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008392:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008396:	2303      	movs	r3, #3
 8008398:	e7a9      	b.n	80082ee <atanf+0x86>
 800839a:	4a1b      	ldr	r2, [pc, #108]	@ (8008408 <atanf+0x1a0>)
 800839c:	491b      	ldr	r1, [pc, #108]	@ (800840c <atanf+0x1a4>)
 800839e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80083a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80083a6:	edd3 6a00 	vldr	s13, [r3]
 80083aa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083b4:	edd2 7a00 	vldr	s15, [r2]
 80083b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083bc:	bfb8      	it	lt
 80083be:	eef1 7a67 	vneglt.f32	s15, s15
 80083c2:	e760      	b.n	8008286 <atanf+0x1e>
 80083c4:	bfc90fdb 	.word	0xbfc90fdb
 80083c8:	3fc90fdb 	.word	0x3fc90fdb
 80083cc:	3edfffff 	.word	0x3edfffff
 80083d0:	7149f2ca 	.word	0x7149f2ca
 80083d4:	3f97ffff 	.word	0x3f97ffff
 80083d8:	3c8569d7 	.word	0x3c8569d7
 80083dc:	3d4bda59 	.word	0x3d4bda59
 80083e0:	bd6ef16b 	.word	0xbd6ef16b
 80083e4:	3d886b35 	.word	0x3d886b35
 80083e8:	3dba2e6e 	.word	0x3dba2e6e
 80083ec:	3e124925 	.word	0x3e124925
 80083f0:	3eaaaaab 	.word	0x3eaaaaab
 80083f4:	bd15a221 	.word	0xbd15a221
 80083f8:	bd9d8795 	.word	0xbd9d8795
 80083fc:	bde38e38 	.word	0xbde38e38
 8008400:	be4ccccd 	.word	0xbe4ccccd
 8008404:	401bffff 	.word	0x401bffff
 8008408:	080085e0 	.word	0x080085e0
 800840c:	080085d0 	.word	0x080085d0

08008410 <fabsf>:
 8008410:	ee10 3a10 	vmov	r3, s0
 8008414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008418:	ee00 3a10 	vmov	s0, r3
 800841c:	4770      	bx	lr
	...

08008420 <_close>:
 8008420:	4b02      	ldr	r3, [pc, #8]	@ (800842c <_close+0xc>)
 8008422:	2258      	movs	r2, #88	@ 0x58
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295
 800842a:	4770      	bx	lr
 800842c:	2000432c 	.word	0x2000432c

08008430 <_fstat>:
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <_fstat+0xc>)
 8008432:	2258      	movs	r2, #88	@ 0x58
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	f04f 30ff 	mov.w	r0, #4294967295
 800843a:	4770      	bx	lr
 800843c:	2000432c 	.word	0x2000432c

08008440 <_isatty>:
 8008440:	4b02      	ldr	r3, [pc, #8]	@ (800844c <_isatty+0xc>)
 8008442:	2258      	movs	r2, #88	@ 0x58
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	2000      	movs	r0, #0
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	2000432c 	.word	0x2000432c

08008450 <_lseek>:
 8008450:	4b02      	ldr	r3, [pc, #8]	@ (800845c <_lseek+0xc>)
 8008452:	2258      	movs	r2, #88	@ 0x58
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f04f 30ff 	mov.w	r0, #4294967295
 800845a:	4770      	bx	lr
 800845c:	2000432c 	.word	0x2000432c

08008460 <_read>:
 8008460:	4b02      	ldr	r3, [pc, #8]	@ (800846c <_read+0xc>)
 8008462:	2258      	movs	r2, #88	@ 0x58
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	4770      	bx	lr
 800846c:	2000432c 	.word	0x2000432c

08008470 <_init>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr

0800847c <_fini>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr
